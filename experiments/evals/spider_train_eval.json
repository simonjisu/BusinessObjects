[{"sample_id": 0, "db_id": "department_management", "score": 1, "gold_sql": "SELECT COUNT(*) FROM head WHERE age > 56", "pred_sql": "SELECT COUNT(*) AS num_heads FROM head WHERE age > 56", "source_tables": ["head"], "error_info": ""}, {"sample_id": 1, "db_id": "department_management", "score": 0, "gold_sql": "SELECT name, born_state, age FROM head ORDER BY age", "pred_sql": "SELECT head.name, head.born_state, head.age FROM head JOIN management ON head.head_ID = management.head_ID JOIN department ON management.department_ID = department.Department_ID ORDER BY head.age", "source_tables": ["head"], "error_info": "Result not equal"}, {"sample_id": 2, "db_id": "department_management", "score": 0, "gold_sql": "SELECT creation, name, budget_in_billions FROM department", "pred_sql": "SELECT TIME_TO_STR(CAST(Creation AS TIMESTAMP), '%Y') AS creation_year, Name, Budget_in_Billions FROM department", "source_tables": ["department"], "error_info": "Predction Execution Error:no such function: TIME_TO_STR"}, {"sample_id": 3, "db_id": "department_management", "score": 1, "gold_sql": "SELECT MAX(budget_in_billions), MIN(budget_in_billions) FROM department", "pred_sql": "SELECT MAX(Budget_in_Billions) AS Max_Budget, MIN(Budget_in_Billions) AS Min_Budget FROM department", "source_tables": ["department"], "error_info": ""}, {"sample_id": 4, "db_id": "department_management", "score": 1, "gold_sql": "SELECT AVG(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15", "pred_sql": "SELECT AVG(Num_Employees) AS average_num_employees FROM department WHERE Ranking BETWEEN '10' AND '15'", "source_tables": ["department"], "error_info": ""}, {"sample_id": 5, "db_id": "department_management", "score": 1, "gold_sql": "SELECT name FROM head WHERE born_state <> 'California'", "pred_sql": "SELECT head.name FROM head WHERE head.born_state <> 'California'", "source_tables": ["head"], "error_info": ""}, {"sample_id": 6, "db_id": "department_management", "score": 0, "gold_sql": "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T3.born_state = 'Alabama'", "pred_sql": "SELECT DISTINCT TIME_TO_STR(CAST(Creation AS TIMESTAMP), '%Y') AS creation_year FROM department AS d JOIN management AS m ON d.Department_ID = m.department_ID JOIN head AS h ON m.head_ID = h.head_ID WHERE h.born_state = 'Alabama'", "source_tables": ["head", "department", "management"], "error_info": "Predction Execution Error:no such function: TIME_TO_STR"}, {"sample_id": 7, "db_id": "department_management", "score": 1, "gold_sql": "SELECT born_state FROM head GROUP BY born_state HAVING COUNT(*) >= 3", "pred_sql": "SELECT born_state FROM head GROUP BY born_state HAVING COUNT(head_ID) >= 3", "source_tables": ["head"], "error_info": ""}, {"sample_id": 8, "db_id": "department_management", "score": 0, "gold_sql": "SELECT creation FROM department GROUP BY creation ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT TIME_TO_STR(CAST(Creation AS TIMESTAMP), '%Y') AS establishment_year, COUNT(*) AS num_departments FROM department GROUP BY establishment_year ORDER BY num_departments DESC LIMIT 1", "source_tables": ["department"], "error_info": "Predction Execution Error:no such function: TIME_TO_STR"}, {"sample_id": 9, "db_id": "department_management", "score": 1, "gold_sql": "SELECT T1.name, T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id WHERE T2.temporary_acting = 'Yes'", "pred_sql": "SELECT department.Name, department.Num_Employees FROM department JOIN management ON department.Department_ID = management.department_ID JOIN head ON management.head_ID = head.head_ID WHERE management.temporary_acting = 'Yes'", "source_tables": ["department", "management"], "error_info": ""}, {"sample_id": 10, "db_id": "department_management", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT temporary_acting) FROM management", "pred_sql": "SELECT COUNT(DISTINCT temporary_acting) AS acting_status_count FROM management", "source_tables": ["management"], "error_info": ""}, {"sample_id": 11, "db_id": "department_management", "score": 1, "gold_sql": "SELECT COUNT(*) FROM department WHERE NOT department_id IN (SELECT department_id FROM management)", "pred_sql": "SELECT COUNT(DISTINCT department.Department_ID) AS num_departments FROM department LEFT JOIN management ON department.Department_ID = management.department_ID LEFT JOIN head ON management.head_ID = head.head_ID WHERE head.head_ID IS NULL", "source_tables": ["department", "management"], "error_info": ""}, {"sample_id": 12, "db_id": "department_management", "score": 0, "gold_sql": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id = T2.head_id WHERE T2.temporary_acting = 'Yes'", "pred_sql": "SELECT DISTINCT h.age FROM head AS h JOIN management AS m ON h.head_ID = m.head_ID WHERE m.temporary_acting = 'yes'", "source_tables": ["management", "head"], "error_info": "Result not equal"}, {"sample_id": 13, "db_id": "department_management", "score": 0, "gold_sql": "SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Homeland Security'", "pred_sql": "SELECT h1.born_state FROM department AS d1 JOIN management AS m1 ON d1.Department_ID = m1.department_ID JOIN head AS h1 ON m1.head_ID = h1.head_ID WHERE d1.Name = 'Treasury' UNION SELECT h2.born_state FROM department AS d2 JOIN management AS m2 ON d2.Department_ID = m2.department_ID JOIN head AS h2 ON m2.head_ID = h2.head_ID WHERE d2.Name = 'Homeland Security'", "source_tables": ["head", "department", "management"], "error_info": "Result not equal"}, {"sample_id": 14, "db_id": "department_management", "score": 1, "gold_sql": "SELECT T1.department_id, T1.name, COUNT(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id = T2.department_id GROUP BY T1.department_id HAVING COUNT(*) > 1", "pred_sql": "SELECT department.Department_ID, department.Name, COUNT(management.head_ID) AS Number_of_Heads FROM department JOIN management ON department.Department_ID = management.department_ID GROUP BY department.Department_ID, department.Name HAVING COUNT(management.head_ID) > 1", "source_tables": ["management", "department"], "error_info": ""}, {"sample_id": 15, "db_id": "department_management", "score": 1, "gold_sql": "SELECT head_id, name FROM head WHERE name LIKE '%Ha%'", "pred_sql": "SELECT head_ID, name FROM head WHERE name LIKE '%Ha%'", "source_tables": ["head"], "error_info": ""}, {"sample_id": 16, "db_id": "farm", "score": 1, "gold_sql": "SELECT COUNT(*) FROM farm", "pred_sql": "SELECT COUNT(*) AS Total_Farms FROM farm", "source_tables": ["farm"], "error_info": ""}, {"sample_id": 17, "db_id": "farm", "score": 1, "gold_sql": "SELECT COUNT(*) FROM farm", "pred_sql": "SELECT COUNT(*) AS NumberOfFarms FROM farm", "source_tables": ["farm"], "error_info": ""}, {"sample_id": 18, "db_id": "farm", "score": 1, "gold_sql": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC", "pred_sql": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC", "source_tables": ["farm"], "error_info": ""}, {"sample_id": 19, "db_id": "farm", "score": 0, "gold_sql": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC", "pred_sql": "SELECT Farm_ID, Total_Horses FROM farm ORDER BY Total_Horses ASC", "source_tables": ["farm"], "error_info": "Result not equal"}, {"sample_id": 20, "db_id": "farm", "score": 1, "gold_sql": "SELECT Hosts FROM farm_competition WHERE Theme <> 'Aliens'", "pred_sql": "SELECT DISTINCT Hosts FROM farm_competition WHERE Theme <> 'Aliens'", "source_tables": ["farm_competition"], "error_info": ""}, {"sample_id": 21, "db_id": "farm", "score": 1, "gold_sql": "SELECT Hosts FROM farm_competition WHERE Theme <> 'Aliens'", "pred_sql": "SELECT Hosts FROM farm_competition WHERE Theme <> 'Aliens'", "source_tables": ["farm_competition"], "error_info": ""}, {"sample_id": 22, "db_id": "farm", "score": 1, "gold_sql": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC", "pred_sql": "SELECT Theme FROM farm_competition ORDER BY Year ASC", "source_tables": ["farm_competition"], "error_info": ""}, {"sample_id": 23, "db_id": "farm", "score": 1, "gold_sql": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC", "pred_sql": "SELECT Theme FROM farm_competition ORDER BY Year ASC", "source_tables": ["farm_competition"], "error_info": ""}, {"sample_id": 24, "db_id": "farm", "score": 1, "gold_sql": "SELECT AVG(Working_Horses) FROM farm WHERE Total_Horses > 5000", "pred_sql": "SELECT AVG(Working_Horses) AS Average_Working_Horses FROM farm WHERE Total_Horses > 5000", "source_tables": ["farm"], "error_info": ""}, {"sample_id": 25, "db_id": "farm", "score": 1, "gold_sql": "SELECT AVG(Working_Horses) FROM farm WHERE Total_Horses > 5000", "pred_sql": "SELECT AVG(Working_Horses) AS Average_Working_Horses FROM farm WHERE Total_Horses > 5000", "source_tables": ["farm"], "error_info": ""}, {"sample_id": 26, "db_id": "farm", "score": 1, "gold_sql": "SELECT MAX(Cows), MIN(Cows) FROM farm", "pred_sql": "SELECT MAX(Cows) AS Max_Cows, MIN(Cows) AS Min_Cows FROM farm", "source_tables": ["farm"], "error_info": ""}, {"sample_id": 27, "db_id": "farm", "score": 1, "gold_sql": "SELECT MAX(Cows), MIN(Cows) FROM farm", "pred_sql": "SELECT MAX(Cows) AS Max_Cows, MIN(Cows) AS Min_Cows FROM farm", "source_tables": ["farm"], "error_info": ""}, {"sample_id": 28, "db_id": "farm", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT Status) FROM city", "pred_sql": "SELECT COUNT(DISTINCT Status) AS Different_Statuses FROM city", "source_tables": ["city"], "error_info": ""}, {"sample_id": 29, "db_id": "farm", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT Status) FROM city", "pred_sql": "SELECT COUNT(DISTINCT Status) AS Different_Status_Count FROM city", "source_tables": ["city"], "error_info": ""}, {"sample_id": 30, "db_id": "farm", "score": 1, "gold_sql": "SELECT Official_Name FROM city ORDER BY Population DESC", "pred_sql": "SELECT Official_Name FROM city ORDER BY Population DESC", "source_tables": ["city"], "error_info": ""}, {"sample_id": 31, "db_id": "farm", "score": 1, "gold_sql": "SELECT Official_Name FROM city ORDER BY Population DESC", "pred_sql": "SELECT Official_Name FROM city ORDER BY Population DESC", "source_tables": ["city"], "error_info": ""}, {"sample_id": 32, "db_id": "farm", "score": 1, "gold_sql": "SELECT Official_Name, Status FROM city ORDER BY Population DESC LIMIT 1", "pred_sql": "SELECT Official_Name, Status FROM city WHERE Population = (SELECT MAX(Population) FROM city)", "source_tables": ["city"], "error_info": ""}, {"sample_id": 33, "db_id": "farm", "score": 1, "gold_sql": "SELECT Official_Name, Status FROM city ORDER BY Population DESC LIMIT 1", "pred_sql": "SELECT Official_Name, Status FROM city ORDER BY Population DESC LIMIT 1", "source_tables": ["city"], "error_info": ""}, {"sample_id": 34, "db_id": "farm", "score": 1, "gold_sql": "SELECT T2.Year, T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID", "pred_sql": "SELECT farm_competition.Year, city.Official_Name FROM farm_competition JOIN city ON farm_competition.Host_city_ID = city.City_ID", "source_tables": ["farm_competition", "city"], "error_info": ""}, {"sample_id": 35, "db_id": "farm", "score": 1, "gold_sql": "SELECT T2.Year, T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID", "pred_sql": "SELECT farm_competition.Year, city.Official_Name FROM farm_competition JOIN city ON farm_competition.Host_city_ID = city.City_ID", "source_tables": ["farm_competition", "city"], "error_info": ""}, {"sample_id": 36, "db_id": "farm", "score": 1, "gold_sql": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*) > 1", "pred_sql": "SELECT c.Official_Name FROM city AS c JOIN farm_competition AS fc ON c.City_ID = fc.Host_city_ID GROUP BY c.City_ID HAVING COUNT(fc.Competition_ID) > 1", "source_tables": ["farm_competition", "city"], "error_info": ""}, {"sample_id": 37, "db_id": "farm", "score": 1, "gold_sql": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*) > 1", "pred_sql": "SELECT c.Official_Name FROM city AS c JOIN farm_competition AS fc ON c.City_ID = fc.Host_city_ID GROUP BY c.City_ID HAVING COUNT(fc.Competition_ID) > 1", "source_tables": ["farm_competition", "city"], "error_info": ""}, {"sample_id": 38, "db_id": "farm", "score": 1, "gold_sql": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT c.Status FROM city AS c JOIN farm_competition AS fc ON c.City_ID = fc.Host_city_ID GROUP BY c.City_ID ORDER BY COUNT(fc.Competition_ID) DESC LIMIT 1", "source_tables": ["farm_competition", "city"], "error_info": ""}, {"sample_id": 39, "db_id": "farm", "score": 1, "gold_sql": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT c.Status FROM city AS c JOIN farm_competition AS fc ON c.City_ID = fc.Host_city_ID GROUP BY c.City_ID ORDER BY COUNT(fc.Competition_ID) DESC LIMIT 1", "source_tables": ["farm_competition", "city"], "error_info": ""}, {"sample_id": 40, "db_id": "farm", "score": 1, "gold_sql": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID WHERE T1.Population > 1000", "pred_sql": "SELECT fc.Theme FROM farm_competition AS fc JOIN city AS c ON fc.Host_city_ID = c.City_ID WHERE c.Population > 1000", "source_tables": ["farm_competition", "city"], "error_info": ""}, {"sample_id": 41, "db_id": "farm", "score": 1, "gold_sql": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID WHERE T1.Population > 1000", "pred_sql": "SELECT DISTINCT fc.Theme FROM farm_competition AS fc JOIN city AS c ON fc.Host_city_ID = c.City_ID WHERE c.Population > 1000", "source_tables": ["farm_competition", "city"], "error_info": ""}, {"sample_id": 42, "db_id": "farm", "score": 1, "gold_sql": "SELECT Status, AVG(Population) FROM city GROUP BY Status", "pred_sql": "SELECT Status, AVG(Population) AS Average_Population FROM city GROUP BY Status", "source_tables": ["city"], "error_info": ""}, {"sample_id": 43, "db_id": "farm", "score": 1, "gold_sql": "SELECT Status, AVG(Population) FROM city GROUP BY Status", "pred_sql": "SELECT Status, AVG(Population) AS Average_Population FROM city GROUP BY Status", "source_tables": ["city"], "error_info": ""}, {"sample_id": 44, "db_id": "farm", "score": 0, "gold_sql": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC", "pred_sql": "SELECT Status, COUNT(*) AS City_Count FROM city GROUP BY Status ORDER BY City_Count DESC", "source_tables": ["city"], "error_info": "Result not equal"}, {"sample_id": 45, "db_id": "farm", "score": 0, "gold_sql": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC", "pred_sql": "SELECT Status, COUNT(*) AS Frequency FROM city GROUP BY Status ORDER BY Frequency ASC", "source_tables": ["city"], "error_info": "Result not equal"}, {"sample_id": 46, "db_id": "farm", "score": 0, "gold_sql": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Status, COUNT(*) AS Count FROM city GROUP BY Status ORDER BY Count DESC LIMIT 1", "source_tables": ["city"], "error_info": "Result not equal"}, {"sample_id": 47, "db_id": "farm", "score": 0, "gold_sql": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Status, COUNT(*) AS Count FROM city GROUP BY Status ORDER BY Count DESC LIMIT 1", "source_tables": ["city"], "error_info": "Result not equal"}, {"sample_id": 48, "db_id": "farm", "score": 1, "gold_sql": "SELECT Official_Name FROM city WHERE NOT City_ID IN (SELECT Host_city_ID FROM farm_competition)", "pred_sql": "SELECT Official_Name FROM city WHERE NOT City_ID IN (SELECT Host_city_ID FROM farm_competition)", "source_tables": ["farm_competition", "city"], "error_info": ""}, {"sample_id": 49, "db_id": "farm", "score": 1, "gold_sql": "SELECT Official_Name FROM city WHERE NOT City_ID IN (SELECT Host_city_ID FROM farm_competition)", "pred_sql": "SELECT Official_Name FROM city WHERE NOT City_ID IN (SELECT Host_city_ID FROM farm_competition)", "source_tables": ["farm_competition", "city"], "error_info": ""}, {"sample_id": 50, "db_id": "farm", "score": 0, "gold_sql": "SELECT Status FROM city WHERE Population > 1500 INTERSECT SELECT Status FROM city WHERE Population < 500", "pred_sql": "SELECT Status FROM city WHERE Population > 1500 AND Population < 500", "source_tables": ["city"], "error_info": "Result not equal"}, {"sample_id": 51, "db_id": "farm", "score": 0, "gold_sql": "SELECT Status FROM city WHERE Population > 1500 INTERSECT SELECT Status FROM city WHERE Population < 500", "pred_sql": "SELECT DISTINCT Status FROM city WHERE Population > 1500 OR Population < 500", "source_tables": ["city"], "error_info": "Result not equal"}, {"sample_id": 52, "db_id": "farm", "score": 1, "gold_sql": "SELECT Official_Name FROM city WHERE Population > 1500 OR Population < 500", "pred_sql": "SELECT Official_Name FROM city WHERE Population > 1500 OR Population < 500", "source_tables": ["city"], "error_info": ""}, {"sample_id": 53, "db_id": "farm", "score": 1, "gold_sql": "SELECT Official_Name FROM city WHERE Population > 1500 OR Population < 500", "pred_sql": "SELECT Official_Name FROM city WHERE Population > 1500 OR Population < 500", "source_tables": ["city"], "error_info": ""}, {"sample_id": 54, "db_id": "farm", "score": 1, "gold_sql": "SELECT Census_Ranking FROM city WHERE Status <> 'Village'", "pred_sql": "SELECT Census_Ranking FROM city WHERE Status <> 'Village'", "source_tables": ["city"], "error_info": ""}, {"sample_id": 55, "db_id": "farm", "score": 1, "gold_sql": "SELECT Census_Ranking FROM city WHERE Status <> 'Village'", "pred_sql": "SELECT Census_Ranking FROM city WHERE Status <> 'Village'", "source_tables": ["city"], "error_info": ""}, {"sample_id": 56, "db_id": "student_assessment", "score": 0, "gold_sql": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT course_id, COUNT(student_id) AS student_count FROM Student_Course_Registrations GROUP BY course_id ORDER BY student_count DESC LIMIT 1", "source_tables": ["courses", "student_course_registrations"], "error_info": "Result not equal"}, {"sample_id": 57, "db_id": "student_assessment", "score": 1, "gold_sql": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT course_name FROM Courses WHERE course_id = (SELECT course_id FROM Student_Course_Registrations GROUP BY course_id ORDER BY COUNT(student_id) DESC LIMIT 1)", "source_tables": ["courses", "student_course_registrations"], "error_info": ""}, {"sample_id": 58, "db_id": "student_assessment", "score": 0, "gold_sql": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY COUNT(*) LIMIT 1", "pred_sql": "SELECT student_id FROM Student_Course_Registrations GROUP BY student_id HAVING COUNT(course_id) = (SELECT MIN(course_count) FROM (SELECT COUNT(course_id) AS course_count FROM Student_Course_Registrations GROUP BY student_id))", "source_tables": ["student_course_registrations"], "error_info": "Result not equal"}, {"sample_id": 59, "db_id": "student_assessment", "score": 0, "gold_sql": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY COUNT(*) LIMIT 1", "pred_sql": "SELECT student_id FROM Student_Course_Registrations GROUP BY student_id HAVING COUNT(course_id) = (SELECT MIN(course_count) FROM (SELECT COUNT(course_id) AS course_count FROM Student_Course_Registrations GROUP BY student_id))", "source_tables": ["student_course_registrations"], "error_info": "Result not equal"}, {"sample_id": 60, "db_id": "student_assessment", "score": 1, "gold_sql": "SELECT T2.first_name, T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id", "pred_sql": "SELECT P.first_name, P.last_name FROM People AS P JOIN Candidates AS C ON P.person_id = C.candidate_id", "source_tables": ["candidates", "people"], "error_info": ""}, {"sample_id": 61, "db_id": "student_assessment", "score": 1, "gold_sql": "SELECT T2.first_name, T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id", "pred_sql": "SELECT P.first_name, P.last_name FROM People AS P JOIN Candidates AS C ON P.person_id = C.candidate_id", "source_tables": ["candidates", "people"], "error_info": ""}, {"sample_id": 62, "db_id": "student_assessment", "score": 1, "gold_sql": "SELECT student_id FROM students WHERE NOT student_id IN (SELECT student_id FROM student_course_attendance)", "pred_sql": "SELECT s.student_id FROM Students AS s LEFT JOIN Student_Course_Attendance AS a ON s.student_id = a.student_id WHERE a.course_id IS NULL", "source_tables": ["student_course_attendance", "students"], "error_info": ""}, {"sample_id": 63, "db_id": "student_assessment", "score": 1, "gold_sql": "SELECT student_id FROM students WHERE NOT student_id IN (SELECT student_id FROM student_course_attendance)", "pred_sql": "SELECT s.student_id FROM Students AS s LEFT JOIN Student_Course_Attendance AS a ON s.student_id = a.student_id WHERE a.course_id IS NULL", "source_tables": ["student_course_attendance", "students"], "error_info": ""}, {"sample_id": 64, "db_id": "student_assessment", "score": 0, "gold_sql": "SELECT student_id FROM student_course_attendance", "pred_sql": "SELECT DISTINCT student_id FROM Student_Course_Attendance", "source_tables": ["student_course_attendance"], "error_info": "Result not equal"}, {"sample_id": 65, "db_id": "student_assessment", "score": 0, "gold_sql": "SELECT student_id FROM student_course_attendance", "pred_sql": "SELECT DISTINCT student_id FROM Student_Course_Attendance", "source_tables": ["student_course_attendance"], "error_info": "Result not equal"}, {"sample_id": 66, "db_id": "student_assessment", "score": 1, "gold_sql": "SELECT T1.student_id, T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id", "pred_sql": "SELECT Students.student_id, Courses.course_name FROM Students JOIN Student_Course_Registrations ON Students.student_id = Student_Course_Registrations.student_id JOIN Courses ON Student_Course_Registrations.course_id = Courses.course_id", "source_tables": ["courses", "student_course_registrations"], "error_info": ""}, {"sample_id": 67, "db_id": "student_assessment", "score": 0, "gold_sql": "SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1", "pred_sql": "SELECT s.student_id, s.student_details, scr.registration_date FROM Students AS s JOIN Student_Course_Registrations AS scr ON s.student_id = scr.student_id ORDER BY scr.registration_date DESC LIMIT 1", "source_tables": ["student_course_registrations", "students"], "error_info": "Result not equal"}, {"sample_id": 68, "db_id": "student_assessment", "score": 0, "gold_sql": "SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1", "pred_sql": "SELECT s.student_id, s.student_details, scr.registration_date, c.course_name, c.course_description FROM Students AS s JOIN Student_Course_Registrations AS scr ON s.student_id = scr.student_id JOIN Courses AS c ON scr.course_id = c.course_id ORDER BY scr.registration_date DESC LIMIT 10", "source_tables": ["student_course_registrations", "students"], "error_info": "Result not equal"}, {"sample_id": 69, "db_id": "student_assessment", "score": 1, "gold_sql": "SELECT COUNT(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = 'English'", "pred_sql": "SELECT COUNT(DISTINCT Student_Course_Attendance.student_id) AS student_count FROM Student_Course_Attendance JOIN Student_Course_Registrations ON Student_Course_Attendance.student_id = Student_Course_Registrations.student_id JOIN Courses ON Student_Course_Registrations.course_id = Courses.course_id WHERE Courses.course_name = 'English'", "source_tables": ["courses", "student_course_attendance"], "error_info": ""}, {"sample_id": 70, "db_id": "student_assessment", "score": 1, "gold_sql": "SELECT COUNT(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = 'English'", "pred_sql": "SELECT COUNT(DISTINCT scr.student_id) AS number_of_students FROM Student_Course_Attendance AS sca JOIN Student_Course_Registrations AS scr ON sca.student_id = scr.student_id AND sca.course_id = scr.course_id JOIN Courses AS c ON scr.course_id = c.course_id WHERE c.course_name LIKE '%English%'", "source_tables": ["courses", "student_course_attendance"], "error_info": ""}, {"sample_id": 71, "db_id": "student_assessment", "score": 1, "gold_sql": "SELECT COUNT(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171", "pred_sql": "SELECT COUNT(*) AS course_count FROM Student_Course_Attendance WHERE student_id = '171'", "source_tables": ["courses", "student_course_attendance"], "error_info": ""}, {"sample_id": 72, "db_id": "student_assessment", "score": 1, "gold_sql": "SELECT COUNT(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171", "pred_sql": "SELECT COUNT(DISTINCT course_id) AS course_count FROM Student_Course_Attendance WHERE student_id = '171'", "source_tables": ["courses", "student_course_attendance"], "error_info": ""}, {"sample_id": 73, "db_id": "student_assessment", "score": 1, "gold_sql": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = 'stanley.monahan@example.org'", "pred_sql": "SELECT candidate_id FROM Candidates WHERE candidate_id IN (SELECT person_id FROM People WHERE email_address = 'stanley.monahan@example.org')", "source_tables": ["candidates", "people"], "error_info": ""}, {"sample_id": 74, "db_id": "student_assessment", "score": 1, "gold_sql": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = 'stanley.monahan@example.org'", "pred_sql": "SELECT candidate_id FROM Candidates WHERE candidate_id = (SELECT person_id FROM People WHERE email_address = 'stanley.monahan@example.org')", "source_tables": ["candidates", "people"], "error_info": ""}, {"sample_id": 75, "db_id": "student_assessment", "score": 1, "gold_sql": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1", "pred_sql": "SELECT DISTINCT c.candidate_id FROM Candidates AS c JOIN Candidate_Assessments AS ca ON c.candidate_id = ca.candidate_id JOIN Student_Course_Registrations AS scr ON c.candidate_id = scr.student_id JOIN Student_Course_Attendance AS sca ON scr.student_id = sca.student_id AND scr.course_id = sca.course_id ORDER BY ca.assessment_date DESC LIMIT 1", "source_tables": ["candidate_assessments"], "error_info": ""}, {"sample_id": 76, "db_id": "student_assessment", "score": 0, "gold_sql": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1", "pred_sql": "SELECT c.candidate_id FROM Candidates AS c JOIN Student_Course_Attendance AS a ON c.candidate_id = a.student_id JOIN Student_Course_Registrations AS r ON a.student_id = r.student_id ORDER BY a.date_of_attendance DESC LIMIT 1", "source_tables": ["candidate_assessments"], "error_info": "Result not equal"}, {"sample_id": 77, "db_id": "student_assessment", "score": 0, "gold_sql": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT s.student_id, s.student_details, COUNT(scr.course_id) AS course_count FROM Students AS s JOIN Student_Course_Registrations AS scr ON s.student_id = scr.student_id GROUP BY s.student_id, s.student_details ORDER BY course_count DESC LIMIT 1", "source_tables": ["student_course_registrations", "students"], "error_info": "Result not equal"}, {"sample_id": 78, "db_id": "student_assessment", "score": 0, "gold_sql": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT s.student_id, s.student_details, COUNT(scr.course_id) AS course_count FROM Students AS s JOIN Student_Course_Registrations AS scr ON s.student_id = scr.student_id GROUP BY s.student_id, s.student_details ORDER BY course_count DESC LIMIT 1", "source_tables": ["student_course_registrations", "students"], "error_info": "Result not equal"}, {"sample_id": 79, "db_id": "student_assessment", "score": 1, "gold_sql": "SELECT T1.student_id, COUNT(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id", "pred_sql": "SELECT sr.student_id, COUNT(sr.course_id) AS registered_courses_count FROM Student_Course_Registrations AS sr GROUP BY sr.student_id", "source_tables": ["student_course_registrations", "students"], "error_info": ""}, {"sample_id": 80, "db_id": "student_assessment", "score": 1, "gold_sql": "SELECT T1.student_id, COUNT(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id", "pred_sql": "SELECT s.student_id, COUNT(scr.course_id) AS course_count FROM Students AS s JOIN Student_Course_Registrations AS scr ON s.student_id = scr.student_id GROUP BY s.student_id", "source_tables": ["student_course_registrations", "students"], "error_info": ""}, {"sample_id": 81, "db_id": "student_assessment", "score": 0, "gold_sql": "SELECT T3.course_name, COUNT(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id", "pred_sql": "SELECT Courses.course_name, COUNT(Student_Course_Registrations.student_id) AS registered_students_count FROM Courses LEFT JOIN Student_Course_Registrations ON Courses.course_id = Student_Course_Registrations.course_id GROUP BY Courses.course_name", "source_tables": ["courses", "student_course_registrations", "students"], "error_info": "Result not equal"}, {"sample_id": 82, "db_id": "student_assessment", "score": 0, "gold_sql": "SELECT T3.course_name, COUNT(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id", "pred_sql": "SELECT Courses.course_id, COUNT(Student_Course_Registrations.student_id) AS student_count, Courses.course_name FROM Courses LEFT JOIN Student_Course_Registrations ON Courses.course_id = Student_Course_Registrations.course_id GROUP BY Courses.course_id, Courses.course_name", "source_tables": ["courses", "student_course_registrations", "students"], "error_info": "Result not equal"}, {"sample_id": 83, "db_id": "student_assessment", "score": 1, "gold_sql": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = 'Pass'", "pred_sql": "SELECT candidate_id FROM Candidate_Assessments WHERE asessment_outcome_code = 'Pass'", "source_tables": ["candidate_assessments"], "error_info": ""}, {"sample_id": 84, "db_id": "student_assessment", "score": 1, "gold_sql": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = 'Pass'", "pred_sql": "SELECT candidate_id FROM Candidate_Assessments WHERE asessment_outcome_code = 'Pass'", "source_tables": ["candidate_assessments"], "error_info": ""}, {"sample_id": 85, "db_id": "student_assessment", "score": 1, "gold_sql": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = 'Fail'", "pred_sql": "SELECT P.cell_mobile_number FROM People AS P JOIN Candidates AS C ON P.person_id = C.candidate_id JOIN Candidate_Assessments AS CA ON C.candidate_id = CA.candidate_id WHERE CA.asessment_outcome_code = 'Fail'", "source_tables": ["candidates", "candidate_assessments", "people"], "error_info": ""}, {"sample_id": 86, "db_id": "student_assessment", "score": 1, "gold_sql": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = 'Fail'", "pred_sql": "SELECT P.cell_mobile_number FROM People AS P JOIN Candidates AS C ON P.person_id = C.candidate_id JOIN Candidate_Assessments AS CA ON C.candidate_id = CA.candidate_id WHERE CA.asessment_outcome_code = 'Fail'", "source_tables": ["candidates", "candidate_assessments", "people"], "error_info": ""}, {"sample_id": 87, "db_id": "student_assessment", "score": 1, "gold_sql": "SELECT student_id FROM student_course_attendance WHERE course_id = 301", "pred_sql": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = '301'", "source_tables": ["student_course_attendance"], "error_info": ""}, {"sample_id": 88, "db_id": "student_assessment", "score": 1, "gold_sql": "SELECT student_id FROM student_course_attendance WHERE course_id = 301", "pred_sql": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = '301'", "source_tables": ["student_course_attendance"], "error_info": ""}, {"sample_id": 89, "db_id": "student_assessment", "score": 0, "gold_sql": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1", "pred_sql": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = '301' ORDER BY registration_date DESC LIMIT 1", "source_tables": ["student_course_attendance"], "error_info": "Result not equal"}, {"sample_id": 90, "db_id": "student_assessment", "score": 0, "gold_sql": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1", "pred_sql": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = '301' ORDER BY registration_date DESC LIMIT 1", "source_tables": ["student_course_attendance"], "error_info": "Result not equal"}, {"sample_id": 91, "db_id": "student_assessment", "score": 1, "gold_sql": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id", "pred_sql": "SELECT DISTINCT A.city FROM Addresses AS A JOIN People_Addresses AS PA ON A.address_id = PA.address_id JOIN People AS P ON PA.person_id = P.person_id", "source_tables": ["addresses", "people_addresses"], "error_info": ""}, {"sample_id": 92, "db_id": "student_assessment", "score": 0, "gold_sql": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id", "pred_sql": "SELECT DISTINCT city FROM Addresses", "source_tables": ["addresses", "people_addresses"], "error_info": "Result not equal"}, {"sample_id": 93, "db_id": "student_assessment", "score": 0, "gold_sql": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id", "pred_sql": "SELECT DISTINCT a.city FROM Addresses AS a JOIN People AS p ON a.address_id = p.person_id JOIN Students AS s ON p.person_id = s.student_id", "source_tables": ["addresses", "people_addresses", "students"], "error_info": "Result not equal"}, {"sample_id": 94, "db_id": "student_assessment", "score": 1, "gold_sql": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id", "pred_sql": "SELECT DISTINCT a.city FROM Addresses AS a JOIN People_Addresses AS pa ON a.address_id = pa.address_id JOIN Students AS s ON pa.person_id = s.student_id", "source_tables": ["addresses", "people_addresses", "students"], "error_info": ""}, {"sample_id": 95, "db_id": "student_assessment", "score": 1, "gold_sql": "SELECT course_name FROM courses ORDER BY course_name", "pred_sql": "SELECT course_name FROM Courses ORDER BY course_name ASC", "source_tables": ["courses"], "error_info": ""}, {"sample_id": 96, "db_id": "student_assessment", "score": 1, "gold_sql": "SELECT course_name FROM courses ORDER BY course_name", "pred_sql": "SELECT course_name FROM Courses ORDER BY course_name ASC", "source_tables": ["courses"], "error_info": ""}, {"sample_id": 97, "db_id": "student_assessment", "score": 1, "gold_sql": "SELECT first_name FROM people ORDER BY first_name", "pred_sql": "SELECT first_name FROM People ORDER BY first_name ASC", "source_tables": ["people"], "error_info": ""}, {"sample_id": 98, "db_id": "student_assessment", "score": 1, "gold_sql": "SELECT first_name FROM people ORDER BY first_name", "pred_sql": "SELECT first_name FROM People ORDER BY first_name ASC", "source_tables": ["people"], "error_info": ""}, {"sample_id": 99, "db_id": "student_assessment", "score": 1, "gold_sql": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance", "pred_sql": "SELECT DISTINCT student_id FROM Student_Course_Registrations UNION SELECT DISTINCT student_id FROM Student_Course_Attendance", "source_tables": ["student_course_attendance", "student_course_registrations"], "error_info": ""}, {"sample_id": 100, "db_id": "student_assessment", "score": 1, "gold_sql": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance", "pred_sql": "SELECT DISTINCT student_id FROM Student_Course_Registrations UNION SELECT DISTINCT student_id FROM Student_Course_Attendance", "source_tables": ["student_course_attendance", "student_course_registrations"], "error_info": ""}, {"sample_id": 101, "db_id": "student_assessment", "score": 1, "gold_sql": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121", "pred_sql": "SELECT DISTINCT course_id FROM Student_Course_Registrations WHERE student_id = '121' UNION SELECT DISTINCT course_id FROM Student_Course_Attendance WHERE student_id = '121'", "source_tables": ["student_course_attendance", "student_course_registrations"], "error_info": ""}, {"sample_id": 102, "db_id": "student_assessment", "score": 1, "gold_sql": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121", "pred_sql": "SELECT DISTINCT course_id FROM Student_Course_Registrations WHERE student_id = '121' UNION SELECT DISTINCT course_id FROM Student_Course_Attendance WHERE student_id = '121'", "source_tables": ["student_course_attendance", "student_course_registrations"], "error_info": ""}, {"sample_id": 103, "db_id": "student_assessment", "score": 0, "gold_sql": "SELECT * FROM student_course_registrations WHERE NOT student_id IN (SELECT student_id FROM student_course_attendance)", "pred_sql": "SELECT s.student_id, s.student_details FROM Students AS s JOIN Student_Course_Registrations AS scr ON s.student_id = scr.student_id LEFT JOIN Student_Course_Attendance AS sca ON scr.student_id = sca.student_id AND scr.course_id = sca.course_id WHERE sca.student_id IS NULL", "source_tables": ["student_course_attendance", "student_course_registrations"], "error_info": "Result not equal"}, {"sample_id": 104, "db_id": "student_assessment", "score": 0, "gold_sql": "SELECT * FROM student_course_registrations WHERE NOT student_id IN (SELECT student_id FROM student_course_attendance)", "pred_sql": "SELECT s.student_id, s.student_details FROM Students AS s LEFT JOIN Student_Course_Registrations AS scr ON s.student_id = scr.student_id LEFT JOIN Student_Course_Attendance AS sca ON scr.student_id = sca.student_id AND scr.course_id = sca.course_id WHERE NOT scr.student_id IS NULL AND sca.student_id IS NULL", "source_tables": ["student_course_attendance", "student_course_registrations"], "error_info": "Result not equal"}, {"sample_id": 105, "db_id": "student_assessment", "score": 0, "gold_sql": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = 'statistics' ORDER BY T2.registration_date", "pred_sql": "SELECT sr.student_id FROM Student_Course_Registrations AS sr JOIN Courses AS c ON sr.course_id = c.course_id WHERE c.course_name = 'Statistics' ORDER BY sr.registration_date", "source_tables": ["courses", "student_course_registrations"], "error_info": "Result not equal"}, {"sample_id": 106, "db_id": "student_assessment", "score": 0, "gold_sql": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = 'statistics' ORDER BY T2.registration_date", "pred_sql": "SELECT sr.student_id FROM Student_Course_Registrations AS sr JOIN Courses AS c ON sr.course_id = c.course_id WHERE c.course_name = 'Statistics' ORDER BY sr.registration_date", "source_tables": ["courses", "student_course_registrations"], "error_info": "Result not equal"}, {"sample_id": 107, "db_id": "student_assessment", "score": 1, "gold_sql": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = 'statistics' ORDER BY T2.date_of_attendance", "pred_sql": "SELECT DISTINCT Student_Course_Attendance.student_id FROM Student_Course_Attendance JOIN Student_Course_Registrations ON Student_Course_Attendance.student_id = Student_Course_Registrations.student_id JOIN Courses ON Student_Course_Registrations.course_id = Courses.course_id WHERE Courses.course_name LIKE '%statistics%' ORDER BY Student_Course_Attendance.date_of_attendance", "source_tables": ["courses", "student_course_attendance"], "error_info": ""}, {"sample_id": 108, "db_id": "student_assessment", "score": 1, "gold_sql": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = 'statistics' ORDER BY T2.date_of_attendance", "pred_sql": "SELECT DISTINCT scr.student_id FROM Student_Course_Attendance AS scr JOIN Student_Course_Registrations AS scrg ON scr.student_id = scrg.student_id JOIN Courses AS c ON scrg.course_id = c.course_id WHERE c.course_name LIKE '%Statistics%' ORDER BY scr.date_of_attendance", "source_tables": ["courses", "student_course_attendance"], "error_info": ""}, {"sample_id": 109, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT date FROM weather WHERE max_temperature_f > 85", "pred_sql": "SELECT date FROM weather WHERE max_temperature_f > 85", "source_tables": ["weather"], "error_info": ""}, {"sample_id": 110, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT date FROM weather WHERE max_temperature_f > 85", "pred_sql": "SELECT date FROM weather WHERE max_temperature_f > 85", "source_tables": ["weather"], "error_info": ""}, {"sample_id": 111, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT name FROM station WHERE lat < 37.5", "pred_sql": "SELECT name FROM station WHERE lat < '37.5'", "source_tables": ["station"], "error_info": ""}, {"sample_id": 112, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT name FROM station WHERE lat < 37.5", "pred_sql": "SELECT name FROM station WHERE lat < '37.5'", "source_tables": ["station"], "error_info": ""}, {"sample_id": 113, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT city, MAX(lat) FROM station GROUP BY city", "pred_sql": "SELECT city, MAX(lat) AS highest_latitude FROM station GROUP BY city", "source_tables": ["station"], "error_info": ""}, {"sample_id": 114, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT city, MAX(lat) FROM station GROUP BY city", "pred_sql": "SELECT city, MAX(lat) AS highest_latitude FROM station GROUP BY city", "source_tables": ["station"], "error_info": ""}, {"sample_id": 115, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT start_station_name, end_station_name FROM trip ORDER BY id LIMIT 3", "pred_sql": "SELECT start_station_name, end_station_name FROM trip ORDER BY id ASC LIMIT 3", "source_tables": ["trip"], "error_info": ""}, {"sample_id": 116, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT start_station_name, end_station_name FROM trip ORDER BY id LIMIT 3", "pred_sql": "SELECT start_station_name, end_station_name FROM trip WHERE id IN (SELECT id FROM trip ORDER BY id ASC LIMIT 3)", "source_tables": ["trip"], "error_info": ""}, {"sample_id": 117, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT AVG(lat), AVG(long) FROM station WHERE city = 'San Jose'", "pred_sql": "SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude FROM station WHERE city = 'San Jose'", "source_tables": ["station"], "error_info": ""}, {"sample_id": 118, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT AVG(lat), AVG(long) FROM station WHERE city = 'San Jose'", "pred_sql": "SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude FROM station WHERE city = 'San Jose'", "source_tables": ["station"], "error_info": ""}, {"sample_id": 119, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT id FROM trip ORDER BY duration LIMIT 1", "pred_sql": "SELECT id FROM trip ORDER BY duration ASC LIMIT 1", "source_tables": ["trip"], "error_info": ""}, {"sample_id": 120, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT id FROM trip ORDER BY duration LIMIT 1", "pred_sql": "SELECT id FROM trip ORDER BY duration ASC LIMIT 1", "source_tables": ["trip"], "error_info": ""}, {"sample_id": 121, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT SUM(duration), MAX(duration) FROM trip WHERE bike_id = 636", "pred_sql": "SELECT SUM(duration) AS total_duration, MAX(duration) AS max_duration FROM trip WHERE bike_id = '636'", "source_tables": ["trip"], "error_info": ""}, {"sample_id": 122, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT SUM(duration), MAX(duration) FROM trip WHERE bike_id = 636", "pred_sql": "SELECT SUM(duration) AS total_duration, MAX(duration) AS max_duration FROM trip WHERE bike_id = '636'", "source_tables": ["trip"], "error_info": ""}, {"sample_id": 123, "db_id": "bike_1", "score": 0, "gold_sql": "SELECT zip_code, AVG(mean_temperature_f) FROM weather WHERE date LIKE '8/%' GROUP BY zip_code", "pred_sql": "SELECT zip_code, AVG(mean_temperature_f) AS average_mean_temperature FROM weather WHERE date >= '2023-08-01' AND date <= '2023-08-31' GROUP BY zip_code", "source_tables": ["weather"], "error_info": "Result not equal"}, {"sample_id": 124, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT zip_code, AVG(mean_temperature_f) FROM weather WHERE date LIKE '8/%' GROUP BY zip_code", "pred_sql": "SELECT zip_code, AVG(mean_temperature_f) AS average_mean_temperature FROM weather WHERE date LIKE '8%' GROUP BY zip_code", "source_tables": ["weather"], "error_info": ""}, {"sample_id": 125, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT bike_id) FROM trip", "pred_sql": "SELECT COUNT(DISTINCT bike_id) AS unique_bike_count FROM trip", "source_tables": ["trip"], "error_info": ""}, {"sample_id": 126, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT bike_id) FROM trip", "pred_sql": "SELECT COUNT(DISTINCT bike_id) AS different_bike_ids FROM trip", "source_tables": ["trip"], "error_info": ""}, {"sample_id": 127, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT city) FROM station", "pred_sql": "SELECT COUNT(DISTINCT city) AS distinct_city_count FROM station", "source_tables": ["station"], "error_info": ""}, {"sample_id": 128, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT city) FROM station", "pred_sql": "SELECT COUNT(DISTINCT city) AS different_cities FROM station", "source_tables": ["station"], "error_info": ""}, {"sample_id": 129, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM station WHERE city = 'Mountain View'", "pred_sql": "SELECT COUNT(*) AS station_count FROM station WHERE city = 'Mountain View'", "source_tables": ["station"], "error_info": ""}, {"sample_id": 130, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM station WHERE city = 'Mountain View'", "pred_sql": "SELECT COUNT(*) AS station_count FROM station WHERE city = 'Mountain View'", "source_tables": ["station"], "error_info": ""}, {"sample_id": 131, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available = 7", "pred_sql": "SELECT DISTINCT s.name FROM station AS s JOIN status AS st ON s.id = st.station_id WHERE st.bikes_available = 7", "source_tables": ["status", "station"], "error_info": ""}, {"sample_id": 132, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available = 7", "pred_sql": "SELECT DISTINCT s.name FROM station AS s JOIN status AS st ON s.id = st.station_id WHERE st.bikes_available = 7", "source_tables": ["status", "station"], "error_info": ""}, {"sample_id": 133, "db_id": "bike_1", "score": 0, "gold_sql": "SELECT start_station_name, start_station_id FROM trip WHERE start_date LIKE '8/%' GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT start_station_name, start_station_id FROM trip WHERE TIME_TO_STR(CAST(start_date AS TIMESTAMP), '%m') = '08' GROUP BY start_station_id ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["trip"], "error_info": "Predction Execution Error:no such function: TIME_TO_STR"}, {"sample_id": 134, "db_id": "bike_1", "score": 0, "gold_sql": "SELECT start_station_name, start_station_id FROM trip WHERE start_date LIKE '8/%' GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT start_station_name, start_station_id FROM trip WHERE TIME_TO_STR(CAST(start_date AS TIMESTAMP), '%Y-%m') = '2023-08' GROUP BY start_station_name, start_station_id ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["trip"], "error_info": "Predction Execution Error:no such function: TIME_TO_STR"}, {"sample_id": 135, "db_id": "bike_1", "score": 0, "gold_sql": "SELECT bike_id FROM trip WHERE zip_code = 94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT bike_id, COUNT(*) AS trip_count FROM trip WHERE zip_code = '94002' GROUP BY bike_id ORDER BY trip_count DESC LIMIT 1", "source_tables": ["trip"], "error_info": "Result not equal"}, {"sample_id": 136, "db_id": "bike_1", "score": 0, "gold_sql": "SELECT bike_id FROM trip WHERE zip_code = 94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT bike_id FROM trip WHERE zip_code = '94002' ORDER BY duration DESC LIMIT 1", "source_tables": ["trip"], "error_info": "Result not equal"}, {"sample_id": 137, "db_id": "bike_1", "score": 0, "gold_sql": "SELECT COUNT(*) FROM weather WHERE mean_humidity > 50 AND mean_visibility_miles > 8", "pred_sql": "SELECT COUNT(*) AS days_count FROM weather WHERE mean_humidity > 50 AND mean_visibility > 8", "source_tables": ["weather"], "error_info": "Predction Execution Error:no such column: mean_visibility"}, {"sample_id": 138, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM weather WHERE mean_humidity > 50 AND mean_visibility_miles > 8", "pred_sql": "SELECT COUNT(*) AS number_of_days FROM weather WHERE mean_humidity > 50 AND mean_visibility_miles > 8", "source_tables": ["weather"], "error_info": ""}, {"sample_id": 139, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT T1.lat, T1.long, T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id ORDER BY T2.duration LIMIT 1", "pred_sql": "SELECT s.lat, s.long, s.city FROM station AS s JOIN trip AS t ON s.id = t.start_station_id ORDER BY t.duration ASC LIMIT 1", "source_tables": ["trip", "station"], "error_info": ""}, {"sample_id": 140, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT T1.lat, T1.long, T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id ORDER BY T2.duration LIMIT 1", "pred_sql": "SELECT s.lat, s.long, s.city FROM trip AS t JOIN station AS s ON t.start_station_id = s.id ORDER BY t.duration ASC LIMIT 1", "source_tables": ["trip", "station"], "error_info": ""}, {"sample_id": 141, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT id FROM station WHERE city = 'San Francisco' INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING AVG(bikes_available) > 10", "pred_sql": "SELECT s.id FROM station AS s JOIN status AS st ON s.id = st.station_id WHERE s.city = 'San Francisco' GROUP BY s.id HAVING AVG(st.bikes_available) > 10", "source_tables": ["status", "station"], "error_info": ""}, {"sample_id": 142, "db_id": "bike_1", "score": 0, "gold_sql": "SELECT id FROM station WHERE city = 'San Francisco' INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING AVG(bikes_available) > 10", "pred_sql": "SELECT s.id FROM station AS s JOIN status AS st ON s.id = st.station_id WHERE s.city = 'San Francisco' AND st.bikes_available > 10", "source_tables": ["status", "station"], "error_info": "Result not equal"}, {"sample_id": 143, "db_id": "bike_1", "score": 0, "gold_sql": "SELECT T1.name, T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING AVG(T2.bikes_available) > 14 UNION SELECT name, id FROM station WHERE installation_date LIKE '12/%'", "pred_sql": "SELECT s.name, s.id FROM station AS s JOIN status AS st ON s.id = st.station_id GROUP BY s.id HAVING AVG(st.bikes_available) > 14 OR TIME_TO_STR(CAST(s.installation_date AS TIMESTAMP), '%m') = '12'", "source_tables": ["status", "station"], "error_info": "Predction Execution Error:no such function: TIME_TO_STR"}, {"sample_id": 144, "db_id": "bike_1", "score": 0, "gold_sql": "SELECT T1.name, T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING AVG(T2.bikes_available) > 14 UNION SELECT name, id FROM station WHERE installation_date LIKE '12/%'", "pred_sql": "SELECT s.name, s.id FROM station AS s JOIN status AS st ON s.id = st.station_id GROUP BY s.id HAVING AVG(st.bikes_available) > 14 OR s.installation_date LIKE '%-12-%'", "source_tables": ["status", "station"], "error_info": "Result not equal"}, {"sample_id": 145, "db_id": "bike_1", "score": 0, "gold_sql": "SELECT cloud_cover FROM weather WHERE zip_code = 94107 GROUP BY cloud_cover ORDER BY COUNT(*) DESC LIMIT 3", "pred_sql": "SELECT cloud_cover, COUNT(cloud_cover) AS count FROM weather WHERE zip_code = 94107 GROUP BY cloud_cover ORDER BY count DESC LIMIT 3", "source_tables": ["weather"], "error_info": "Result not equal"}, {"sample_id": 146, "db_id": "bike_1", "score": 0, "gold_sql": "SELECT cloud_cover FROM weather WHERE zip_code = 94107 GROUP BY cloud_cover ORDER BY COUNT(*) DESC LIMIT 3", "pred_sql": "SELECT cloud_cover, COUNT(cloud_cover) AS cover_count FROM weather WHERE zip_code = 94107 GROUP BY cloud_cover ORDER BY cover_count DESC LIMIT 3", "source_tables": ["weather"], "error_info": "Result not equal"}, {"sample_id": 147, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY AVG(mean_sea_level_pressure_inches) LIMIT 1", "pred_sql": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY AVG(mean_sea_level_pressure_inches) ASC LIMIT 1", "source_tables": ["weather"], "error_info": ""}, {"sample_id": 148, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY AVG(mean_sea_level_pressure_inches) LIMIT 1", "pred_sql": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY AVG(mean_sea_level_pressure_inches) ASC LIMIT 1", "source_tables": ["weather"], "error_info": ""}, {"sample_id": 149, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT AVG(bikes_available) FROM status WHERE NOT station_id IN (SELECT id FROM station WHERE city = 'Palo Alto')", "pred_sql": "SELECT AVG(s.bikes_available) AS average_bike_availability FROM status AS s JOIN station AS st ON s.station_id = st.id WHERE st.city <> 'Palo Alto'", "source_tables": ["status", "station"], "error_info": ""}, {"sample_id": 150, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT AVG(bikes_available) FROM status WHERE NOT station_id IN (SELECT id FROM station WHERE city = 'Palo Alto')", "pred_sql": "SELECT AVG(bikes_available) AS average_bike_availability FROM status JOIN station ON status.station_id = station.id WHERE station.city <> 'Palo Alto'", "source_tables": ["status", "station"], "error_info": ""}, {"sample_id": 151, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT AVG(long) FROM station WHERE NOT id IN (SELECT station_id FROM status GROUP BY station_id HAVING MAX(bikes_available) > 10)", "pred_sql": "SELECT AVG(long) AS average_longitude FROM station WHERE NOT id IN (SELECT station_id FROM status WHERE bikes_available > 10)", "source_tables": ["status", "station"], "error_info": ""}, {"sample_id": 152, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT AVG(long) FROM station WHERE NOT id IN (SELECT station_id FROM status GROUP BY station_id HAVING MAX(bikes_available) > 10)", "pred_sql": "SELECT AVG(long) AS mean_longitude FROM station WHERE NOT id IN (SELECT station_id FROM status WHERE bikes_available > 10)", "source_tables": ["status", "station"], "error_info": ""}, {"sample_id": 153, "db_id": "bike_1", "score": 0, "gold_sql": "SELECT date, zip_code FROM weather WHERE max_temperature_f >= 80", "pred_sql": "SELECT date, zip_code FROM weather WHERE max_temperature_f = 80", "source_tables": ["weather"], "error_info": "Result not equal"}, {"sample_id": 154, "db_id": "bike_1", "score": 0, "gold_sql": "SELECT date, zip_code FROM weather WHERE max_temperature_f >= 80", "pred_sql": "SELECT DISTINCT w.zip_code, w.date FROM weather AS w JOIN station AS s ON w.zip_code = s.city WHERE w.max_temperature_f >= 80", "source_tables": ["weather"], "error_info": "Result not equal"}, {"sample_id": 155, "db_id": "bike_1", "score": 0, "gold_sql": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code = T2.zip_code GROUP BY T2.zip_code HAVING AVG(T2.mean_temperature_f) > 60", "pred_sql": "SELECT trip.id FROM trip JOIN weather ON trip.zip_code = weather.zip_code WHERE weather.mean_temperature_f > 60", "source_tables": ["weather", "trip"], "error_info": "Result not equal"}, {"sample_id": 156, "db_id": "bike_1", "score": 0, "gold_sql": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code = T2.zip_code GROUP BY T2.zip_code HAVING AVG(T2.mean_temperature_f) > 60", "pred_sql": "SELECT DISTINCT trip.id FROM trip JOIN weather ON trip.start_date >= weather.date AND trip.start_date < weather.date + 1 GROUP BY trip.zip_code HAVING AVG(weather.mean_temperature_f) > 60", "source_tables": ["weather", "trip"], "error_info": "Result not equal"}, {"sample_id": 157, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT zip_code, COUNT(*) FROM weather WHERE max_wind_Speed_mph >= 25 GROUP BY zip_code", "pred_sql": "SELECT zip_code, COUNT(*) AS count_max_wind_speed_25 FROM weather WHERE max_wind_Speed_mph >= 25 GROUP BY zip_code", "source_tables": ["weather"], "error_info": ""}, {"sample_id": 158, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT zip_code, COUNT(*) FROM weather WHERE max_wind_Speed_mph >= 25 GROUP BY zip_code", "pred_sql": "SELECT zip_code, COUNT(*) AS count FROM weather WHERE max_wind_Speed_mph >= 25 GROUP BY zip_code", "source_tables": ["weather"], "error_info": ""}, {"sample_id": 159, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT date, zip_code FROM weather WHERE min_dew_point_f < (SELECT MIN(min_dew_point_f) FROM weather WHERE zip_code = 94107)", "pred_sql": "SELECT w.date, w.zip_code FROM weather AS w WHERE w.min_dew_point_f < (SELECT MIN(w2.min_dew_point_f) FROM weather AS w2 WHERE w2.zip_code = 94107) ORDER BY w.date", "source_tables": ["weather"], "error_info": ""}, {"sample_id": 160, "db_id": "bike_1", "score": 0, "gold_sql": "SELECT date, zip_code FROM weather WHERE min_dew_point_f < (SELECT MIN(min_dew_point_f) FROM weather WHERE zip_code = 94107)", "pred_sql": "SELECT w.zip_code FROM weather AS w WHERE w.min_dew_point_f < (SELECT MIN(min_dew_point_f) FROM weather WHERE zip_code = 94107)", "source_tables": ["weather"], "error_info": "Result not equal"}, {"sample_id": 161, "db_id": "bike_1", "score": 0, "gold_sql": "SELECT T1.id, T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id", "pred_sql": "SELECT trip.end_station_id, station.installation_date FROM trip JOIN station ON trip.end_station_id = station.id", "source_tables": ["trip", "station"], "error_info": "Result not equal"}, {"sample_id": 162, "db_id": "bike_1", "score": 0, "gold_sql": "SELECT T1.id, T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id", "pred_sql": "SELECT s.installation_date FROM trip AS t JOIN station AS s ON t.end_station_id = s.id", "source_tables": ["trip", "station"], "error_info": "Result not equal"}, {"sample_id": 163, "db_id": "bike_1", "score": 0, "gold_sql": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id = T2.id ORDER BY T2.dock_count DESC LIMIT 1", "pred_sql": "SELECT trip.id FROM trip JOIN station ON trip.start_station_id = station.id WHERE station.dock_count = (SELECT MAX(dock_count) FROM station)", "source_tables": ["trip", "station"], "error_info": "Result not equal"}, {"sample_id": 164, "db_id": "bike_1", "score": 0, "gold_sql": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id = T2.id ORDER BY T2.dock_count DESC LIMIT 1", "pred_sql": "SELECT trip.id FROM trip JOIN station ON trip.start_station_id = station.id WHERE station.dock_count = (SELECT MAX(dock_count) FROM station)", "source_tables": ["trip", "station"], "error_info": "Result not equal"}, {"sample_id": 165, "db_id": "bike_1", "score": 0, "gold_sql": "SELECT COUNT(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id WHERE T2.city <> 'San Francisco'", "pred_sql": "SELECT COUNT(*) AS trip_count FROM trip WHERE NOT end_station_name IN (SELECT name FROM station WHERE city = 'San Francisco')", "source_tables": ["trip", "station"], "error_info": "Result not equal"}, {"sample_id": 166, "db_id": "bike_1", "score": 0, "gold_sql": "SELECT COUNT(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id WHERE T2.city <> 'San Francisco'", "pred_sql": "SELECT COUNT(*) AS trip_count FROM trip WHERE end_station_name <> 'San Francisco'", "source_tables": ["trip", "station"], "error_info": "Result not equal"}, {"sample_id": 167, "db_id": "bike_1", "score": 0, "gold_sql": "SELECT date FROM weather WHERE zip_code = 94107 AND EVENTS <> 'Fog' AND EVENTS <> 'Rain'", "pred_sql": "SELECT date FROM weather WHERE zip_code = 94107 AND NOT events LIKE '%Fog%' AND NOT events LIKE '%Rain%'", "source_tables": ["weather"], "error_info": "Result not equal"}, {"sample_id": 168, "db_id": "bike_1", "score": 0, "gold_sql": "SELECT date FROM weather WHERE zip_code = 94107 AND EVENTS <> 'Fog' AND EVENTS <> 'Rain'", "pred_sql": "SELECT date FROM weather WHERE zip_code = 94107 AND NOT events LIKE '%fog%' AND NOT events LIKE '%rain%'", "source_tables": ["weather"], "error_info": "Result not equal"}, {"sample_id": 169, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT id FROM station WHERE lat > 37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING MIN(bikes_available) < 7", "pred_sql": "SELECT s.id FROM station AS s JOIN status AS st ON s.id = st.station_id WHERE s.lat > 37.4 GROUP BY s.id HAVING MIN(st.bikes_available) >= 7", "source_tables": ["status", "station"], "error_info": ""}, {"sample_id": 170, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT id FROM station WHERE lat > 37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING MIN(bikes_available) < 7", "pred_sql": "SELECT s.id FROM station AS s JOIN status AS st ON s.id = st.station_id WHERE s.lat > 37.4 GROUP BY s.id HAVING MIN(st.bikes_available) >= 7", "source_tables": ["status", "station"], "error_info": ""}, {"sample_id": 171, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING AVG(bikes_available) > 10 EXCEPT SELECT name FROM station WHERE city = 'San Jose'", "pred_sql": "SELECT s.name FROM station AS s JOIN status AS st ON s.id = st.station_id GROUP BY s.id HAVING AVG(st.bikes_available) > 10 AND s.city <> 'San Jose'", "source_tables": ["status", "station"], "error_info": ""}, {"sample_id": 172, "db_id": "bike_1", "score": 0, "gold_sql": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING AVG(bikes_available) > 10 EXCEPT SELECT name FROM station WHERE city = 'San Jose'", "pred_sql": "SELECT s.name FROM station AS s JOIN status AS st ON s.id = st.station_id WHERE st.bikes_available > 10 AND s.city <> 'San Jose'", "source_tables": ["status", "station"], "error_info": "Result not equal"}, {"sample_id": 173, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT name, lat, city FROM station ORDER BY lat LIMIT 1", "pred_sql": "SELECT name, lat, city FROM station ORDER BY lat ASC LIMIT 1", "source_tables": ["station"], "error_info": ""}, {"sample_id": 174, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT name, lat, city FROM station ORDER BY lat LIMIT 1", "pred_sql": "SELECT name, lat, city FROM station ORDER BY lat ASC LIMIT 1", "source_tables": ["station"], "error_info": ""}, {"sample_id": 175, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT date, mean_temperature_f, mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3", "pred_sql": "SELECT date, mean_temperature_f, mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3", "source_tables": ["weather"], "error_info": ""}, {"sample_id": 176, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT date, mean_temperature_f, mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3", "pred_sql": "SELECT date, mean_temperature_f, mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3", "source_tables": ["weather"], "error_info": ""}, {"sample_id": 177, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT city, COUNT(*) FROM station GROUP BY city HAVING COUNT(*) >= 15", "pred_sql": "SELECT city, COUNT(*) AS station_count FROM station GROUP BY city HAVING COUNT(*) >= 15", "source_tables": ["station"], "error_info": ""}, {"sample_id": 178, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT city, COUNT(*) FROM station GROUP BY city HAVING COUNT(*) >= 15", "pred_sql": "SELECT city, COUNT(*) AS station_count FROM station GROUP BY city HAVING COUNT(*) >= 15", "source_tables": ["station"], "error_info": ""}, {"sample_id": 179, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT start_station_id, start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*) >= 200", "pred_sql": "SELECT start_station_id AS id, start_station_name AS name FROM trip GROUP BY start_station_id, start_station_name HAVING COUNT(id) >= 200", "source_tables": ["trip"], "error_info": ""}, {"sample_id": 180, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT start_station_id, start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*) >= 200", "pred_sql": "SELECT start_station_id, start_station_name FROM trip GROUP BY start_station_id, start_station_name HAVING COUNT(id) >= 200", "source_tables": ["trip"], "error_info": ""}, {"sample_id": 181, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_visibility_miles) < 10", "pred_sql": "SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_visibility_miles) < 10", "source_tables": ["weather"], "error_info": ""}, {"sample_id": 182, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_visibility_miles) < 10", "pred_sql": "SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_visibility_miles) < 10", "source_tables": ["weather"], "error_info": ""}, {"sample_id": 183, "db_id": "bike_1", "score": 0, "gold_sql": "SELECT city FROM station GROUP BY city ORDER BY MAX(lat) DESC", "pred_sql": "SELECT city, MAX(lat) AS highest_latitude FROM station GROUP BY city ORDER BY highest_latitude DESC", "source_tables": ["station"], "error_info": "Result not equal"}, {"sample_id": 184, "db_id": "bike_1", "score": 0, "gold_sql": "SELECT city FROM station GROUP BY city ORDER BY MAX(lat) DESC", "pred_sql": "SELECT city, name FROM station ORDER BY CAST(lat AS FLOAT) DESC", "source_tables": ["station"], "error_info": "Result not equal"}, {"sample_id": 185, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT date, cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5", "pred_sql": "SELECT date, cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5", "source_tables": ["weather"], "error_info": ""}, {"sample_id": 186, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT date, cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5", "pred_sql": "SELECT date, cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5", "source_tables": ["weather"], "error_info": ""}, {"sample_id": 187, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT id, duration FROM trip ORDER BY duration DESC LIMIT 3", "pred_sql": "SELECT id, duration FROM trip ORDER BY duration DESC LIMIT 3", "source_tables": ["trip"], "error_info": ""}, {"sample_id": 188, "db_id": "bike_1", "score": 0, "gold_sql": "SELECT id, duration FROM trip ORDER BY duration DESC LIMIT 3", "pred_sql": "SELECT id, duration FROM trip ORDER BY duration DESC LIMIT 1", "source_tables": ["trip"], "error_info": "Result not equal"}, {"sample_id": 189, "db_id": "bike_1", "score": 0, "gold_sql": "SELECT T1.name, T1.long, AVG(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY T2.start_station_id", "pred_sql": "SELECT s.long, AVG(t.duration) AS average_duration FROM station AS s JOIN trip AS t ON s.id = t.start_station_id GROUP BY s.id", "source_tables": ["trip", "station"], "error_info": "Result not equal"}, {"sample_id": 190, "db_id": "bike_1", "score": 0, "gold_sql": "SELECT T1.name, T1.long, AVG(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY T2.start_station_id", "pred_sql": "SELECT trip.start_station_id, station.name, station.long, AVG(trip.duration) AS average_duration FROM trip JOIN station ON trip.start_station_id = station.id GROUP BY trip.start_station_id, station.name, station.long", "source_tables": ["trip", "station"], "error_info": "Result not equal"}, {"sample_id": 191, "db_id": "bike_1", "score": 0, "gold_sql": "SELECT T1.name, T1.lat, MIN(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.end_station_id GROUP BY T2.end_station_id", "pred_sql": "SELECT s.lat, MIN(t.duration) AS min_duration FROM station AS s JOIN trip AS t ON s.id = t.end_station_id GROUP BY s.id", "source_tables": ["trip", "station"], "error_info": "Result not equal"}, {"sample_id": 192, "db_id": "bike_1", "score": 0, "gold_sql": "SELECT T1.name, T1.lat, MIN(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.end_station_id GROUP BY T2.end_station_id", "pred_sql": "SELECT end_station_id, end_station_name, lat, MIN(duration) AS min_duration FROM trip JOIN station ON trip.end_station_id = station.id GROUP BY end_station_id, end_station_name, lat", "source_tables": ["trip", "station"], "error_info": "Result not equal"}, {"sample_id": 193, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT DISTINCT start_station_name FROM trip WHERE duration < 100", "pred_sql": "SELECT DISTINCT start_station_name FROM trip WHERE duration < 100", "source_tables": ["trip"], "error_info": ""}, {"sample_id": 194, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT DISTINCT start_station_name FROM trip WHERE duration < 100", "pred_sql": "SELECT DISTINCT start_station_name FROM trip WHERE duration < 100", "source_tables": ["trip"], "error_info": ""}, {"sample_id": 195, "db_id": "bike_1", "score": 0, "gold_sql": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f >= 70", "pred_sql": "SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f < 70", "source_tables": ["weather"], "error_info": "Result not equal"}, {"sample_id": 196, "db_id": "bike_1", "score": 0, "gold_sql": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f >= 70", "pred_sql": "SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f < 70", "source_tables": ["weather"], "error_info": "Result not equal"}, {"sample_id": 197, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT id FROM trip WHERE duration >= (SELECT AVG(duration) FROM trip WHERE zip_code = 94103)", "pred_sql": "SELECT id FROM trip WHERE duration >= (SELECT AVG(duration) FROM trip WHERE zip_code = '94103')", "source_tables": ["trip"], "error_info": ""}, {"sample_id": 198, "db_id": "bike_1", "score": 0, "gold_sql": "SELECT id FROM trip WHERE duration >= (SELECT AVG(duration) FROM trip WHERE zip_code = 94103)", "pred_sql": "SELECT id FROM trip WHERE duration = (SELECT AVG(duration) FROM trip WHERE zip_code = '94103')", "source_tables": ["trip"], "error_info": "Result not equal"}, {"sample_id": 199, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31", "pred_sql": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31", "source_tables": ["weather"], "error_info": ""}, {"sample_id": 200, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31", "pred_sql": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31", "source_tables": ["weather"], "error_info": ""}, {"sample_id": 201, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT date, max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1", "pred_sql": "SELECT date, (max_temperature_f - min_temperature_f) AS temperature_difference FROM weather ORDER BY temperature_difference ASC LIMIT 1", "source_tables": ["weather"], "error_info": ""}, {"sample_id": 202, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT date, max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1", "pred_sql": "SELECT date, (max_temperature_f - min_temperature_f) AS temperature_range FROM weather ORDER BY temperature_range ASC LIMIT 1", "source_tables": ["weather"], "error_info": ""}, {"sample_id": 203, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT DISTINCT T1.id, T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available > 12", "pred_sql": "SELECT DISTINCT s.id, s.name FROM station AS s JOIN status AS st ON s.id = st.station_id WHERE st.bikes_available > 12", "source_tables": ["status", "station"], "error_info": ""}, {"sample_id": 204, "db_id": "bike_1", "score": 0, "gold_sql": "SELECT DISTINCT T1.id, T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available > 12", "pred_sql": "SELECT station.id, station.name FROM station JOIN status ON station.id = status.station_id WHERE status.bikes_available > 12", "source_tables": ["status", "station"], "error_info": "Result not equal"}, {"sample_id": 205, "db_id": "bike_1", "score": 0, "gold_sql": "SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_humidity) < 70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING COUNT(*) >= 100", "pred_sql": "SELECT zip_code FROM trip WHERE zip_code IN (SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_humidity) < 70) AND zip_code IN (SELECT zip_code FROM trip GROUP BY zip_code HAVING COUNT(id) >= 100)", "source_tables": ["weather", "trip"], "error_info": "Result not equal"}, {"sample_id": 206, "db_id": "bike_1", "score": 0, "gold_sql": "SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_humidity) < 70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING COUNT(*) >= 100", "pred_sql": "SELECT zip_code FROM trip GROUP BY zip_code HAVING AVG(mean_humidity) < 70 AND COUNT(id) >= 100", "source_tables": ["weather", "trip"], "error_info": "Predction Execution Error:no such column: mean_humidity"}, {"sample_id": 207, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT name FROM station WHERE city = 'Palo Alto' EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING COUNT(*) > 100", "pred_sql": "SELECT s.name FROM station AS s LEFT JOIN trip AS t ON s.id = t.end_station_id WHERE s.city = 'Palo Alto' GROUP BY s.id HAVING COUNT(t.id) <= 100", "source_tables": ["trip", "station"], "error_info": ""}, {"sample_id": 208, "db_id": "bike_1", "score": 0, "gold_sql": "SELECT name FROM station WHERE city = 'Palo Alto' EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING COUNT(*) > 100", "pred_sql": "SELECT name FROM station WHERE city = 'Palo Alto' AND NOT id IN (SELECT end_station_id FROM trip)", "source_tables": ["trip", "station"], "error_info": "Result not equal"}, {"sample_id": 209, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM station AS T1, trip AS T2, station AS T3 JOIN trip AS T4 ON T1.id = T2.start_station_id AND T2.id = T4.id AND T3.id = T4.end_station_id WHERE T1.city = 'Mountain View' AND T3.city = 'Palo Alto'", "pred_sql": "SELECT COUNT(*) AS trip_count FROM trip WHERE start_station_name IN (SELECT name FROM station WHERE city = 'Mountain View') AND end_station_name IN (SELECT name FROM station WHERE city = 'Palo Alto')", "source_tables": ["trip", "station"], "error_info": ""}, {"sample_id": 210, "db_id": "bike_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM station AS T1, trip AS T2, station AS T3 JOIN trip AS T4 ON T1.id = T2.start_station_id AND T2.id = T4.id AND T3.id = T4.end_station_id WHERE T1.city = 'Mountain View' AND T3.city = 'Palo Alto'", "pred_sql": "SELECT COUNT(*) AS trip_count FROM trip WHERE start_station_name IN (SELECT name FROM station WHERE city = 'Mountain View') AND end_station_name IN (SELECT name FROM station WHERE city = 'Palo Alto')", "source_tables": ["trip", "station"], "error_info": ""}, {"sample_id": 211, "db_id": "bike_1", "score": 0, "gold_sql": "SELECT AVG(T1.lat), AVG(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id", "pred_sql": "SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude FROM station WHERE id IN (SELECT start_station_id FROM trip)", "source_tables": ["trip", "station"], "error_info": "Result not equal"}, {"sample_id": 212, "db_id": "bike_1", "score": 0, "gold_sql": "SELECT AVG(T1.lat), AVG(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id", "pred_sql": "SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude FROM station WHERE id IN (SELECT start_station_id FROM trip)", "source_tables": ["trip", "station"], "error_info": "Result not equal"}, {"sample_id": 213, "db_id": "book_2", "score": 1, "gold_sql": "SELECT COUNT(*) FROM book", "pred_sql": "SELECT COUNT(*) AS total_books FROM book", "source_tables": ["book"], "error_info": ""}, {"sample_id": 214, "db_id": "book_2", "score": 0, "gold_sql": "SELECT Writer FROM book ORDER BY Writer ASC", "pred_sql": "SELECT DISTINCT b.Writer FROM book AS b ORDER BY b.Writer ASC", "source_tables": ["book"], "error_info": "Result not equal"}, {"sample_id": 215, "db_id": "book_2", "score": 1, "gold_sql": "SELECT Title FROM book ORDER BY Issues ASC", "pred_sql": "SELECT Title FROM book ORDER BY Issues ASC", "source_tables": ["book"], "error_info": ""}, {"sample_id": 216, "db_id": "book_2", "score": 1, "gold_sql": "SELECT Title FROM book WHERE Writer <> 'Elaine Lee'", "pred_sql": "SELECT book.Title FROM book WHERE book.Writer <> 'Elaine Lee'", "source_tables": ["book"], "error_info": ""}, {"sample_id": 217, "db_id": "book_2", "score": 1, "gold_sql": "SELECT Title, Issues FROM book", "pred_sql": "SELECT Title, Issues FROM book", "source_tables": ["book"], "error_info": ""}, {"sample_id": 218, "db_id": "book_2", "score": 1, "gold_sql": "SELECT Publication_Date FROM publication ORDER BY Price DESC", "pred_sql": "SELECT Publication_Date FROM publication ORDER BY Price DESC", "source_tables": ["publication"], "error_info": ""}, {"sample_id": 219, "db_id": "book_2", "score": 1, "gold_sql": "SELECT DISTINCT Publisher FROM publication WHERE Price > 5000000", "pred_sql": "SELECT DISTINCT Publisher FROM publication WHERE Price > '5000000'", "source_tables": ["publication"], "error_info": ""}, {"sample_id": 220, "db_id": "book_2", "score": 1, "gold_sql": "SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1", "pred_sql": "SELECT Publisher FROM publication WHERE Price = (SELECT MAX(Price) FROM publication)", "source_tables": ["publication"], "error_info": ""}, {"sample_id": 221, "db_id": "book_2", "score": 1, "gold_sql": "SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3", "pred_sql": "SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3", "source_tables": ["publication"], "error_info": ""}, {"sample_id": 222, "db_id": "book_2", "score": 1, "gold_sql": "SELECT T1.Title, T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID", "pred_sql": "SELECT book.Title, publication.Publication_Date FROM book JOIN publication ON book.Book_ID = publication.Book_ID", "source_tables": ["publication", "book"], "error_info": ""}, {"sample_id": 223, "db_id": "book_2", "score": 1, "gold_sql": "SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID WHERE T2.Price > 4000000", "pred_sql": "SELECT DISTINCT b.Writer FROM book AS b JOIN publication AS p ON b.Book_ID = p.Book_ID WHERE p.Price > '4000000'", "source_tables": ["publication", "book"], "error_info": ""}, {"sample_id": 224, "db_id": "book_2", "score": 1, "gold_sql": "SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T2.Price DESC", "pred_sql": "SELECT book.Title FROM book JOIN publication ON book.Book_ID = publication.Book_ID ORDER BY publication.Price DESC", "source_tables": ["publication", "book"], "error_info": ""}, {"sample_id": 225, "db_id": "book_2", "score": 1, "gold_sql": "SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*) > 1", "pred_sql": "SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(Publication_ID) > 1", "source_tables": ["publication"], "error_info": ""}, {"sample_id": 226, "db_id": "book_2", "score": 1, "gold_sql": "SELECT Publisher, COUNT(*) FROM publication GROUP BY Publisher", "pred_sql": "SELECT Publisher, COUNT(Publication_ID) AS Number_of_Publications FROM publication GROUP BY Publisher", "source_tables": ["publication"], "error_info": ""}, {"sample_id": 227, "db_id": "book_2", "score": 0, "gold_sql": "SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Publication_Date, COUNT(*) AS count FROM publication GROUP BY Publication_Date ORDER BY count DESC LIMIT 1", "source_tables": ["publication"], "error_info": "Result not equal"}, {"sample_id": 228, "db_id": "book_2", "score": 1, "gold_sql": "SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*) > 1", "pred_sql": "SELECT Writer FROM book GROUP BY Writer HAVING COUNT(Book_ID) > 1", "source_tables": ["book"], "error_info": ""}, {"sample_id": 229, "db_id": "book_2", "score": 1, "gold_sql": "SELECT Title FROM book WHERE NOT Book_ID IN (SELECT Book_ID FROM publication)", "pred_sql": "SELECT Title FROM book WHERE NOT Book_ID IN (SELECT Book_ID FROM publication)", "source_tables": ["publication", "book"], "error_info": ""}, {"sample_id": 230, "db_id": "book_2", "score": 0, "gold_sql": "SELECT Publisher FROM publication WHERE Price > 10000000 INTERSECT SELECT Publisher FROM publication WHERE Price < 5000000", "pred_sql": "SELECT DISTINCT p.Publisher FROM publication AS p WHERE p.Price > '10000000' OR p.Price < '5000000'", "source_tables": ["publication"], "error_info": "Result not equal"}, {"sample_id": 231, "db_id": "book_2", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT Publication_Date) FROM publication", "pred_sql": "SELECT COUNT(DISTINCT Publication_Date) AS distinct_publication_dates FROM publication", "source_tables": ["publication"], "error_info": ""}, {"sample_id": 232, "db_id": "book_2", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT Publication_Date) FROM publication", "pred_sql": "SELECT COUNT(DISTINCT Publication_Date) AS Distinct_Publication_Dates FROM publication", "source_tables": ["publication"], "error_info": ""}, {"sample_id": 233, "db_id": "book_2", "score": 1, "gold_sql": "SELECT Price FROM publication WHERE Publisher = 'Person' OR Publisher = 'Wiley'", "pred_sql": "SELECT Price FROM publication WHERE Publisher IN ('Person', 'Wiley')", "source_tables": ["publication"], "error_info": ""}, {"sample_id": 234, "db_id": "musical", "score": 1, "gold_sql": "SELECT COUNT(*) FROM actor", "pred_sql": "SELECT COUNT(*) AS ActorCount FROM actor", "source_tables": ["actor"], "error_info": ""}, {"sample_id": 235, "db_id": "musical", "score": 1, "gold_sql": "SELECT COUNT(*) FROM actor", "pred_sql": "SELECT COUNT(*) AS NumberOfActors FROM actor", "source_tables": ["actor"], "error_info": ""}, {"sample_id": 236, "db_id": "musical", "score": 1, "gold_sql": "SELECT Name FROM actor ORDER BY Name ASC", "pred_sql": "SELECT Name FROM actor ORDER BY Name ASC", "source_tables": ["actor"], "error_info": ""}, {"sample_id": 237, "db_id": "musical", "score": 1, "gold_sql": "SELECT Name FROM actor ORDER BY Name ASC", "pred_sql": "SELECT Name FROM actor ORDER BY Name ASC", "source_tables": ["actor"], "error_info": ""}, {"sample_id": 238, "db_id": "musical", "score": 1, "gold_sql": "SELECT Character, Duration FROM actor", "pred_sql": "SELECT Character, Duration FROM actor", "source_tables": ["actor"], "error_info": ""}, {"sample_id": 239, "db_id": "musical", "score": 1, "gold_sql": "SELECT Character, Duration FROM actor", "pred_sql": "SELECT Character, Duration FROM actor", "source_tables": ["actor"], "error_info": ""}, {"sample_id": 240, "db_id": "musical", "score": 1, "gold_sql": "SELECT Name FROM actor WHERE Age <> 20", "pred_sql": "SELECT Name FROM actor WHERE age <> 20", "source_tables": ["actor"], "error_info": ""}, {"sample_id": 241, "db_id": "musical", "score": 1, "gold_sql": "SELECT Name FROM actor WHERE Age <> 20", "pred_sql": "SELECT Name FROM actor WHERE age <> 20", "source_tables": ["actor"], "error_info": ""}, {"sample_id": 242, "db_id": "musical", "score": 1, "gold_sql": "SELECT Character FROM actor ORDER BY age DESC", "pred_sql": "SELECT Character FROM actor ORDER BY age DESC", "source_tables": ["actor"], "error_info": ""}, {"sample_id": 243, "db_id": "musical", "score": 1, "gold_sql": "SELECT Character FROM actor ORDER BY age DESC", "pred_sql": "SELECT Character FROM actor ORDER BY age DESC", "source_tables": ["actor"], "error_info": ""}, {"sample_id": 244, "db_id": "musical", "score": 1, "gold_sql": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1", "pred_sql": "SELECT Duration FROM actor WHERE age = (SELECT MAX(age) FROM actor)", "source_tables": ["actor"], "error_info": ""}, {"sample_id": 245, "db_id": "musical", "score": 1, "gold_sql": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1", "pred_sql": "SELECT Duration FROM actor WHERE age = (SELECT MAX(age) FROM actor)", "source_tables": ["actor"], "error_info": ""}, {"sample_id": 246, "db_id": "musical", "score": 1, "gold_sql": "SELECT Name FROM musical WHERE Nominee = 'Bob Fosse'", "pred_sql": "SELECT Name FROM musical WHERE Nominee = 'Bob Fosse'", "source_tables": ["musical"], "error_info": ""}, {"sample_id": 247, "db_id": "musical", "score": 1, "gold_sql": "SELECT Name FROM musical WHERE Nominee = 'Bob Fosse'", "pred_sql": "SELECT Name FROM musical WHERE Nominee = 'Bob Fosse'", "source_tables": ["musical"], "error_info": ""}, {"sample_id": 248, "db_id": "musical", "score": 1, "gold_sql": "SELECT DISTINCT Nominee FROM musical WHERE Award <> 'Tony Award'", "pred_sql": "SELECT DISTINCT Nominee FROM musical WHERE Award <> 'Tony Award'", "source_tables": ["musical"], "error_info": ""}, {"sample_id": 249, "db_id": "musical", "score": 1, "gold_sql": "SELECT DISTINCT Nominee FROM musical WHERE Award <> 'Tony Award'", "pred_sql": "SELECT DISTINCT Nominee FROM musical WHERE Award <> 'Tony Award'", "source_tables": ["musical"], "error_info": ""}, {"sample_id": 250, "db_id": "musical", "score": 1, "gold_sql": "SELECT T1.Name, T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID", "pred_sql": "SELECT actor.Name AS Actor_Name, musical.Name AS Musical_Name FROM actor JOIN musical ON actor.Musical_ID = musical.Musical_ID", "source_tables": ["actor", "musical"], "error_info": ""}, {"sample_id": 251, "db_id": "musical", "score": 1, "gold_sql": "SELECT T1.Name, T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID", "pred_sql": "SELECT actor.Name AS Actor_Name, musical.Name AS Musical_Name FROM actor JOIN musical ON actor.Musical_ID = musical.Musical_ID", "source_tables": ["actor", "musical"], "error_info": ""}, {"sample_id": 252, "db_id": "musical", "score": 1, "gold_sql": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID WHERE T2.Name = 'The Phantom of the Opera'", "pred_sql": "SELECT actor.Name FROM actor JOIN musical ON actor.Musical_ID = musical.Musical_ID WHERE musical.Name = 'The Phantom of the Opera'", "source_tables": ["actor", "musical"], "error_info": ""}, {"sample_id": 253, "db_id": "musical", "score": 1, "gold_sql": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID WHERE T2.Name = 'The Phantom of the Opera'", "pred_sql": "SELECT actor.Name FROM actor JOIN musical ON actor.Musical_ID = musical.Musical_ID WHERE musical.Name = 'The Phantom of the Opera'", "source_tables": ["actor", "musical"], "error_info": ""}, {"sample_id": 254, "db_id": "musical", "score": 1, "gold_sql": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID ORDER BY T2.Year DESC", "pred_sql": "SELECT a.Name FROM actor AS a JOIN musical AS m ON a.Musical_ID = m.Musical_ID ORDER BY m.Year DESC", "source_tables": ["actor", "musical"], "error_info": ""}, {"sample_id": 255, "db_id": "musical", "score": 0, "gold_sql": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID ORDER BY T2.Year DESC", "pred_sql": "SELECT a.Name FROM actor AS a JOIN musical AS m ON a.Musical_ID = m.Musical_ID WHERE m.Result = 'Won' ORDER BY m.Year DESC", "source_tables": ["actor", "musical"], "error_info": "Result not equal"}, {"sample_id": 256, "db_id": "musical", "score": 0, "gold_sql": "SELECT T2.Name, COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID", "pred_sql": "SELECT musical.Name, COUNT(actor.Actor_ID) AS NumberOfActors FROM musical LEFT JOIN actor ON musical.Musical_ID = actor.Musical_ID GROUP BY musical.Name", "source_tables": ["actor", "musical"], "error_info": "Result not equal"}, {"sample_id": 257, "db_id": "musical", "score": 0, "gold_sql": "SELECT T2.Name, COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID", "pred_sql": "SELECT musical.Name, COUNT(actor.Actor_ID) AS Actor_Count FROM musical LEFT JOIN actor ON musical.Musical_ID = actor.Musical_ID GROUP BY musical.Name", "source_tables": ["actor", "musical"], "error_info": "Result not equal"}, {"sample_id": 258, "db_id": "musical", "score": 1, "gold_sql": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*) >= 3", "pred_sql": "SELECT m.Name FROM musical AS m JOIN actor AS a ON m.Musical_ID = a.Musical_ID GROUP BY m.Musical_ID HAVING COUNT(a.Actor_ID) >= 3", "source_tables": ["actor", "musical"], "error_info": ""}, {"sample_id": 259, "db_id": "musical", "score": 1, "gold_sql": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*) >= 3", "pred_sql": "SELECT m.Name FROM musical AS m JOIN actor AS a ON m.Musical_ID = a.Musical_ID GROUP BY m.Musical_ID HAVING COUNT(a.Actor_ID) >= 3", "source_tables": ["actor", "musical"], "error_info": ""}, {"sample_id": 260, "db_id": "musical", "score": 0, "gold_sql": "SELECT Nominee, COUNT(*) FROM musical GROUP BY Nominee", "pred_sql": "SELECT Nominee, COUNT(Musical_ID) AS Number_of_Musicals FROM musical WHERE Result = 'Nominated' GROUP BY Nominee", "source_tables": ["musical"], "error_info": "Result not equal"}, {"sample_id": 261, "db_id": "musical", "score": 0, "gold_sql": "SELECT Nominee, COUNT(*) FROM musical GROUP BY Nominee", "pred_sql": "SELECT Nominee, COUNT(*) AS Nomination_Count FROM musical WHERE Result = 'Nominated' GROUP BY Nominee", "source_tables": ["musical"], "error_info": "Result not equal"}, {"sample_id": 262, "db_id": "musical", "score": 0, "gold_sql": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Nominee, COUNT(*) AS Nomination_Count FROM musical GROUP BY Nominee ORDER BY Nomination_Count DESC LIMIT 1", "source_tables": ["musical"], "error_info": "Result not equal"}, {"sample_id": 263, "db_id": "musical", "score": 0, "gold_sql": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Nominee, COUNT(*) AS NominationCount FROM musical WHERE Result = 'Nominated' GROUP BY Nominee ORDER BY NominationCount DESC LIMIT 1", "source_tables": ["musical"], "error_info": "Result not equal"}, {"sample_id": 264, "db_id": "musical", "score": 0, "gold_sql": "SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Result, COUNT(*) AS Count FROM musical GROUP BY Result ORDER BY Count DESC LIMIT 1", "source_tables": ["musical"], "error_info": "Result not equal"}, {"sample_id": 265, "db_id": "musical", "score": 0, "gold_sql": "SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Result, COUNT(*) AS Frequency FROM musical GROUP BY Result ORDER BY Frequency DESC LIMIT 1", "source_tables": ["musical"], "error_info": "Result not equal"}, {"sample_id": 266, "db_id": "musical", "score": 1, "gold_sql": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*) > 2", "pred_sql": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(DISTINCT Musical_ID) > 2", "source_tables": ["musical"], "error_info": ""}, {"sample_id": 267, "db_id": "musical", "score": 0, "gold_sql": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*) > 2", "pred_sql": "SELECT Nominee, COUNT(*) AS NominationCount FROM musical WHERE Result = 'Nominated' GROUP BY Nominee HAVING COUNT(*) > 2", "source_tables": ["musical"], "error_info": "Result not equal"}, {"sample_id": 268, "db_id": "musical", "score": 1, "gold_sql": "SELECT Name FROM musical WHERE NOT Musical_ID IN (SELECT Musical_ID FROM actor)", "pred_sql": "SELECT Name FROM musical WHERE NOT Musical_ID IN (SELECT DISTINCT Musical_ID FROM actor)", "source_tables": ["actor", "musical"], "error_info": ""}, {"sample_id": 269, "db_id": "musical", "score": 1, "gold_sql": "SELECT Name FROM musical WHERE NOT Musical_ID IN (SELECT Musical_ID FROM actor)", "pred_sql": "SELECT Name FROM musical WHERE NOT Musical_ID IN (SELECT DISTINCT Musical_ID FROM actor)", "source_tables": ["actor", "musical"], "error_info": ""}, {"sample_id": 270, "db_id": "musical", "score": 1, "gold_sql": "SELECT Nominee FROM musical WHERE Award = 'Tony Award' INTERSECT SELECT Nominee FROM musical WHERE Award = 'Drama Desk Award'", "pred_sql": "SELECT DISTINCT Nominee FROM musical WHERE Award IN ('Tony Award', 'Drama Desk Award') GROUP BY Nominee HAVING COUNT(DISTINCT Award) = 2", "source_tables": ["musical"], "error_info": ""}, {"sample_id": 271, "db_id": "musical", "score": 1, "gold_sql": "SELECT Nominee FROM musical WHERE Award = 'Tony Award' INTERSECT SELECT Nominee FROM musical WHERE Award = 'Drama Desk Award'", "pred_sql": "SELECT DISTINCT Nominee FROM musical WHERE Award IN ('Tony Award', 'Drama Desk Award') GROUP BY Nominee HAVING COUNT(DISTINCT Award) = 2", "source_tables": ["musical"], "error_info": ""}, {"sample_id": 272, "db_id": "musical", "score": 0, "gold_sql": "SELECT Nominee FROM musical WHERE Award = 'Tony Award' OR Award = 'Cleavant Derricks'", "pred_sql": "SELECT Name, Nominee FROM musical WHERE Award IN ('Bob Fosse', 'Cleavant Derricks')", "source_tables": ["musical"], "error_info": "Result not equal"}, {"sample_id": 273, "db_id": "musical", "score": 0, "gold_sql": "SELECT Nominee FROM musical WHERE Award = 'Tony Award' OR Award = 'Cleavant Derricks'", "pred_sql": "SELECT DISTINCT Nominee FROM musical WHERE Award IN ('Bob Fosse', 'Cleavant Derricks') AND Result = 'Nominated'", "source_tables": ["musical"], "error_info": "Result not equal"}, {"sample_id": 274, "db_id": "twitter_1", "score": 1, "gold_sql": "SELECT email FROM user_profiles WHERE name = 'Mary'", "pred_sql": "SELECT email FROM user_profiles WHERE name = 'Mary'", "source_tables": ["user_profiles"], "error_info": ""}, {"sample_id": 275, "db_id": "twitter_1", "score": 1, "gold_sql": "SELECT partitionid FROM user_profiles WHERE name = 'Iron Man'", "pred_sql": "SELECT partitionid FROM user_profiles WHERE name = 'Iron Man'", "source_tables": ["user_profiles"], "error_info": ""}, {"sample_id": 276, "db_id": "twitter_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM user_profiles", "pred_sql": "SELECT COUNT(*) AS user_count FROM user_profiles", "source_tables": ["user_profiles"], "error_info": ""}, {"sample_id": 277, "db_id": "twitter_1", "score": 0, "gold_sql": "SELECT COUNT(*) FROM follows", "pred_sql": "SELECT uid, followers FROM user_profiles", "source_tables": ["follows"], "error_info": "Result not equal"}, {"sample_id": 278, "db_id": "twitter_1", "score": 0, "gold_sql": "SELECT COUNT(*) FROM follows GROUP BY f1", "pred_sql": "SELECT uid, followers FROM user_profiles", "source_tables": ["follows"], "error_info": "Result not equal"}, {"sample_id": 279, "db_id": "twitter_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM tweets", "pred_sql": "SELECT COUNT(*) AS tweet_count FROM tweets", "source_tables": ["tweets"], "error_info": ""}, {"sample_id": 280, "db_id": "twitter_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT UID) FROM tweets", "pred_sql": "SELECT COUNT(DISTINCT uid) AS number_of_users FROM tweets", "source_tables": ["tweets"], "error_info": ""}, {"sample_id": 281, "db_id": "twitter_1", "score": 1, "gold_sql": "SELECT name, email FROM user_profiles WHERE name LIKE '%Swift%'", "pred_sql": "SELECT name, email FROM user_profiles WHERE name LIKE '%Swift%'", "source_tables": ["user_profiles"], "error_info": ""}, {"sample_id": 282, "db_id": "twitter_1", "score": 1, "gold_sql": "SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'", "pred_sql": "SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'", "source_tables": ["user_profiles"], "error_info": ""}, {"sample_id": 283, "db_id": "twitter_1", "score": 1, "gold_sql": "SELECT text FROM tweets WHERE text LIKE '%intern%'", "pred_sql": "SELECT text FROM tweets WHERE text LIKE '%intern%'", "source_tables": ["tweets"], "error_info": ""}, {"sample_id": 284, "db_id": "twitter_1", "score": 1, "gold_sql": "SELECT name, email FROM user_profiles WHERE followers > 1000", "pred_sql": "SELECT name, email FROM user_profiles WHERE followers > 1000", "source_tables": ["user_profiles"], "error_info": ""}, {"sample_id": 285, "db_id": "twitter_1", "score": 0, "gold_sql": "SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 GROUP BY T2.f1 HAVING COUNT(*) > (SELECT COUNT(*) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 WHERE T1.name = 'Tyler Swift')", "pred_sql": "SELECT up.name FROM user_profiles AS up WHERE up.followers > (SELECT up2.followers FROM user_profiles AS up2 WHERE up2.name = 'Tyler Swift')", "source_tables": ["follows", "user_profiles"], "error_info": "Result not equal"}, {"sample_id": 286, "db_id": "twitter_1", "score": 0, "gold_sql": "SELECT T1.name, T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 GROUP BY T2.f1 HAVING COUNT(*) > 1", "pred_sql": "SELECT name, email FROM user_profiles WHERE followers > 1", "source_tables": ["follows", "user_profiles"], "error_info": "Result not equal"}, {"sample_id": 287, "db_id": "twitter_1", "score": 1, "gold_sql": "SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING COUNT(*) > 1", "pred_sql": "SELECT up.name FROM user_profiles AS up JOIN tweets AS t ON up.uid = t.uid GROUP BY up.uid HAVING COUNT(t.id) > 1", "source_tables": ["tweets", "user_profiles"], "error_info": ""}, {"sample_id": 288, "db_id": "twitter_1", "score": 0, "gold_sql": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = 'Mary' INTERSECT SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = 'Susan'", "pred_sql": "SELECT f1 FROM follows WHERE f2 IN (SELECT uid FROM user_profiles WHERE name IN ('Mary', 'Susan'))", "source_tables": ["follows", "user_profiles"], "error_info": "Result not equal"}, {"sample_id": 289, "db_id": "twitter_1", "score": 1, "gold_sql": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = 'Mary' OR T1.name = 'Susan'", "pred_sql": "SELECT f1 FROM follows JOIN user_profiles ON follows.f2 = user_profiles.uid WHERE user_profiles.name IN ('Mary', 'Susan')", "source_tables": ["follows", "user_profiles"], "error_info": ""}, {"sample_id": 290, "db_id": "twitter_1", "score": 1, "gold_sql": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1", "pred_sql": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1", "source_tables": ["user_profiles"], "error_info": ""}, {"sample_id": 291, "db_id": "twitter_1", "score": 1, "gold_sql": "SELECT name, email FROM user_profiles ORDER BY followers LIMIT 1", "pred_sql": "SELECT name, email FROM user_profiles WHERE uid = (SELECT uid FROM user_profiles ORDER BY followers ASC LIMIT 1)", "source_tables": ["user_profiles"], "error_info": ""}, {"sample_id": 292, "db_id": "twitter_1", "score": 1, "gold_sql": "SELECT name, followers FROM user_profiles ORDER BY followers DESC", "pred_sql": "SELECT name, followers FROM user_profiles ORDER BY followers DESC", "source_tables": ["user_profiles"], "error_info": ""}, {"sample_id": 293, "db_id": "twitter_1", "score": 0, "gold_sql": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 5", "pred_sql": "SELECT up.name FROM user_profiles AS up JOIN follows AS f ON up.uid = f.f1 GROUP BY up.uid ORDER BY COUNT(f.f2) DESC LIMIT 5", "source_tables": ["user_profiles"], "error_info": "Result not equal"}, {"sample_id": 294, "db_id": "twitter_1", "score": 1, "gold_sql": "SELECT text FROM tweets ORDER BY createdate", "pred_sql": "SELECT text FROM tweets ORDER BY createdate", "source_tables": ["tweets"], "error_info": ""}, {"sample_id": 295, "db_id": "twitter_1", "score": 0, "gold_sql": "SELECT T1.name, COUNT(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid", "pred_sql": "SELECT user_profiles.name, COUNT(tweets.id) AS tweet_count FROM user_profiles LEFT JOIN tweets ON user_profiles.uid = tweets.uid GROUP BY user_profiles.uid", "source_tables": ["tweets", "user_profiles"], "error_info": "Result not equal"}, {"sample_id": 296, "db_id": "twitter_1", "score": 1, "gold_sql": "SELECT T1.name, T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING COUNT(*) < 2", "pred_sql": "SELECT up.name, up.partitionid FROM user_profiles AS up JOIN tweets AS t ON up.uid = t.uid GROUP BY up.uid HAVING COUNT(t.id) < 2", "source_tables": ["tweets", "user_profiles"], "error_info": ""}, {"sample_id": 297, "db_id": "twitter_1", "score": 1, "gold_sql": "SELECT T1.name, COUNT(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING COUNT(*) > 1", "pred_sql": "SELECT up.name, COUNT(t.id) AS tweet_count FROM tweets AS t JOIN user_profiles AS up ON t.uid = up.uid GROUP BY up.name HAVING COUNT(t.id) > 1", "source_tables": ["tweets", "user_profiles"], "error_info": ""}, {"sample_id": 298, "db_id": "twitter_1", "score": 1, "gold_sql": "SELECT AVG(followers) FROM user_profiles WHERE NOT UID IN (SELECT UID FROM tweets)", "pred_sql": "SELECT AVG(followers) AS average_followers FROM user_profiles WHERE NOT uid IN (SELECT uid FROM tweets)", "source_tables": ["tweets", "user_profiles"], "error_info": ""}, {"sample_id": 299, "db_id": "twitter_1", "score": 1, "gold_sql": "SELECT AVG(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)", "pred_sql": "SELECT AVG(followers) AS average_followers FROM user_profiles WHERE uid IN (SELECT DISTINCT uid FROM tweets)", "source_tables": ["tweets", "user_profiles"], "error_info": ""}, {"sample_id": 300, "db_id": "twitter_1", "score": 1, "gold_sql": "SELECT MAX(followers), SUM(followers) FROM user_profiles", "pred_sql": "SELECT MAX(followers) AS max_followers, SUM(followers) AS total_followers FROM user_profiles", "source_tables": ["user_profiles"], "error_info": ""}, {"sample_id": 301, "db_id": "product_catalog", "score": 1, "gold_sql": "SELECT DISTINCT (catalog_entry_name) FROM catalog_contents", "pred_sql": "SELECT catalog_entry_name FROM Catalog_Contents", "source_tables": ["catalog_contents"], "error_info": ""}, {"sample_id": 302, "db_id": "product_catalog", "score": 1, "gold_sql": "SELECT DISTINCT (catalog_entry_name) FROM catalog_contents", "pred_sql": "SELECT catalog_entry_name FROM Catalog_Contents", "source_tables": ["catalog_contents"], "error_info": ""}, {"sample_id": 303, "db_id": "product_catalog", "score": 1, "gold_sql": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING COUNT(*) > 3", "pred_sql": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING COUNT(attribute_id) > 3", "source_tables": ["attribute_definitions"], "error_info": ""}, {"sample_id": 304, "db_id": "product_catalog", "score": 0, "gold_sql": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING COUNT(*) > 3", "pred_sql": "SELECT attribute_data_type, COUNT(attribute_id) AS attribute_count FROM Attribute_Definitions GROUP BY attribute_data_type HAVING COUNT(attribute_id) > 3", "source_tables": ["attribute_definitions"], "error_info": "Result not equal"}, {"sample_id": 305, "db_id": "product_catalog", "score": 1, "gold_sql": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name = 'Green'", "pred_sql": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name = 'Green'", "source_tables": ["attribute_definitions"], "error_info": ""}, {"sample_id": 306, "db_id": "product_catalog", "score": 1, "gold_sql": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name = 'Green'", "pred_sql": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name = 'Green'", "source_tables": ["attribute_definitions"], "error_info": ""}, {"sample_id": 307, "db_id": "product_catalog", "score": 1, "gold_sql": "SELECT catalog_level_name, catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10", "pred_sql": "SELECT catalog_level_name, catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN '5' AND '10'", "source_tables": ["catalog_structure"], "error_info": ""}, {"sample_id": 308, "db_id": "product_catalog", "score": 1, "gold_sql": "SELECT catalog_level_name, catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10", "pred_sql": "SELECT catalog_level_name, catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN '5' AND '10'", "source_tables": ["catalog_structure"], "error_info": ""}, {"sample_id": 309, "db_id": "product_catalog", "score": 1, "gold_sql": "SELECT DISTINCT (catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE '%Murray%'", "pred_sql": "SELECT DISTINCT catalog_publisher FROM Catalogs WHERE catalog_publisher LIKE '%Murray%'", "source_tables": ["catalogs"], "error_info": ""}, {"sample_id": 310, "db_id": "product_catalog", "score": 1, "gold_sql": "SELECT DISTINCT (catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE '%Murray%'", "pred_sql": "SELECT DISTINCT catalog_publisher FROM Catalogs WHERE catalog_publisher LIKE '%Murray%'", "source_tables": ["catalogs"], "error_info": ""}, {"sample_id": 311, "db_id": "product_catalog", "score": 0, "gold_sql": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT catalog_publisher, COUNT(catalog_id) AS catalog_count FROM Catalogs GROUP BY catalog_publisher ORDER BY catalog_count DESC LIMIT 1", "source_tables": ["catalogs"], "error_info": "Result not equal"}, {"sample_id": 312, "db_id": "product_catalog", "score": 0, "gold_sql": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT catalog_publisher, COUNT(catalog_id) AS catalog_count FROM Catalogs GROUP BY catalog_publisher ORDER BY catalog_count DESC LIMIT 1", "source_tables": ["catalogs"], "error_info": "Result not equal"}, {"sample_id": 313, "db_id": "product_catalog", "score": 1, "gold_sql": "SELECT t1.catalog_name, t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id = t2.catalog_id WHERE catalog_level_number > 5", "pred_sql": "SELECT catalog_name, date_of_publication FROM Catalogs WHERE catalog_id IN (SELECT catalog_id FROM Catalog_Structure WHERE catalog_level_number > '5')", "source_tables": ["catalog_structure", "catalogs"], "error_info": ""}, {"sample_id": 314, "db_id": "product_catalog", "score": 1, "gold_sql": "SELECT t1.catalog_name, t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id = t2.catalog_id WHERE catalog_level_number > 5", "pred_sql": "SELECT catalog_name, date_of_publication FROM Catalogs WHERE catalog_id IN (SELECT catalog_id FROM Catalog_Structure WHERE catalog_level_number > '5')", "source_tables": ["catalog_structure", "catalogs"], "error_info": ""}, {"sample_id": 315, "db_id": "product_catalog", "score": 0, "gold_sql": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.attribute_value = (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY COUNT(*) DESC LIMIT 1)", "pred_sql": "SELECT cc.catalog_entry_name FROM Catalog_Contents AS cc JOIN Catalog_Contents_Additional_Attributes AS cca ON cc.catalog_entry_id = cca.catalog_entry_id WHERE cca.attribute_id = (SELECT attribute_id FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_id ORDER BY COUNT(*) DESC LIMIT 1)", "source_tables": ["catalog_contents", "catalog_contents_additional_attributes"], "error_info": "Result not equal"}, {"sample_id": 316, "db_id": "product_catalog", "score": 0, "gold_sql": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.attribute_value = (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY COUNT(*) DESC LIMIT 1)", "pred_sql": "SELECT cc.catalog_entry_name FROM Catalog_Contents AS cc JOIN Catalog_Contents_Additional_Attributes AS cca ON cc.catalog_entry_id = cca.catalog_entry_id WHERE cca.attribute_id = (SELECT attribute_id FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_id ORDER BY COUNT(*) DESC LIMIT 1)", "source_tables": ["catalog_contents", "catalog_contents_additional_attributes"], "error_info": "Result not equal"}, {"sample_id": 317, "db_id": "product_catalog", "score": 0, "gold_sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1", "pred_sql": "SELECT cc.catalog_entry_name FROM Catalogs AS c JOIN Catalog_Contents AS cc ON c.catalog_id = cc.catalog_id WHERE c.catalog_id = (SELECT catalog_id FROM Catalogs ORDER BY date_of_publication DESC LIMIT 1) ORDER BY cc.price_in_dollars DESC LIMIT 1", "source_tables": ["catalog_contents"], "error_info": "Predction Execution Error:no such column: cc.catalog_id"}, {"sample_id": 318, "db_id": "product_catalog", "score": 1, "gold_sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1", "pred_sql": "SELECT catalog_entry_name FROM Catalog_Contents ORDER BY price_in_dollars DESC LIMIT 1", "source_tables": ["catalog_contents"], "error_info": ""}, {"sample_id": 319, "db_id": "product_catalog", "score": 0, "gold_sql": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number = t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1", "pred_sql": "SELECT cs.catalog_level_name FROM Catalogs AS c JOIN Catalog_Contents AS cc ON c.catalog_id = cc.catalog_id JOIN Catalog_Structure AS cs ON cc.catalog_level_number = cs.catalog_level_number ORDER BY cc.price_in_dollars ASC LIMIT 1", "source_tables": ["catalog_structure", "catalog_contents"], "error_info": "Predction Execution Error:no such column: cc.catalog_id"}, {"sample_id": 320, "db_id": "product_catalog", "score": 0, "gold_sql": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number = t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1", "pred_sql": "SELECT cs.catalog_level_name FROM Catalogs AS c JOIN Catalog_Contents AS cc ON c.catalog_id = cc.catalog_id JOIN Catalog_Structure AS cs ON cc.catalog_level_number = cs.catalog_level_number ORDER BY cc.price_in_dollars ASC LIMIT 1", "source_tables": ["catalog_structure", "catalog_contents"], "error_info": "Predction Execution Error:no such column: cc.catalog_id"}, {"sample_id": 321, "db_id": "product_catalog", "score": 1, "gold_sql": "SELECT AVG(price_in_euros), MIN(price_in_euros) FROM catalog_contents", "pred_sql": "SELECT AVG(price_in_euros) AS average_price, MIN(price_in_euros) AS minimum_price FROM Catalog_Contents", "source_tables": ["catalog_contents"], "error_info": ""}, {"sample_id": 322, "db_id": "product_catalog", "score": 1, "gold_sql": "SELECT AVG(price_in_euros), MIN(price_in_euros) FROM catalog_contents", "pred_sql": "SELECT AVG(price_in_euros) AS average_price, MIN(price_in_euros) AS minimum_price FROM Catalog_Contents", "source_tables": ["catalog_contents"], "error_info": ""}, {"sample_id": 323, "db_id": "product_catalog", "score": 1, "gold_sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1", "pred_sql": "SELECT catalog_entry_name FROM Catalog_Contents ORDER BY height DESC LIMIT 1", "source_tables": ["catalog_contents"], "error_info": ""}, {"sample_id": 324, "db_id": "product_catalog", "score": 1, "gold_sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1", "pred_sql": "SELECT catalog_entry_name FROM Catalog_Contents ORDER BY height DESC LIMIT 1", "source_tables": ["catalog_contents"], "error_info": ""}, {"sample_id": 325, "db_id": "product_catalog", "score": 1, "gold_sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1", "pred_sql": "SELECT catalog_entry_name FROM Catalog_Contents ORDER BY capacity ASC LIMIT 1", "source_tables": ["catalog_contents"], "error_info": ""}, {"sample_id": 326, "db_id": "product_catalog", "score": 1, "gold_sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1", "pred_sql": "SELECT catalog_entry_name FROM Catalog_Contents ORDER BY capacity ASC LIMIT 1", "source_tables": ["catalog_contents"], "error_info": ""}, {"sample_id": 327, "db_id": "product_catalog", "score": 1, "gold_sql": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE '2%'", "pred_sql": "SELECT catalog_entry_name FROM Catalog_Contents WHERE product_stock_number LIKE '2%'", "source_tables": ["catalog_contents"], "error_info": ""}, {"sample_id": 328, "db_id": "product_catalog", "score": 1, "gold_sql": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE '2%'", "pred_sql": "SELECT catalog_entry_name FROM Catalog_Contents WHERE product_stock_number LIKE '2%'", "source_tables": ["catalog_contents"], "error_info": ""}, {"sample_id": 329, "db_id": "product_catalog", "score": 0, "gold_sql": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.catalog_level_number = '8'", "pred_sql": "SELECT catalog_entry_name FROM Catalog_Contents WHERE catalog_level_number = '8'", "source_tables": ["catalog_contents", "catalog_contents_additional_attributes"], "error_info": "Result not equal"}, {"sample_id": 330, "db_id": "product_catalog", "score": 0, "gold_sql": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.catalog_level_number = '8'", "pred_sql": "SELECT catalog_entry_name FROM Catalog_Contents WHERE catalog_level_number = '8'", "source_tables": ["catalog_contents", "catalog_contents_additional_attributes"], "error_info": "Result not equal"}, {"sample_id": 331, "db_id": "product_catalog", "score": 0, "gold_sql": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH < 3 OR width > 5", "pred_sql": "SELECT catalog_entry_name FROM Catalog_Contents WHERE length < 3 OR height > 5", "source_tables": ["catalog_contents"], "error_info": "Result not equal"}, {"sample_id": 332, "db_id": "product_catalog", "score": 0, "gold_sql": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH < 3 OR width > 5", "pred_sql": "SELECT catalog_entry_name FROM Catalog_Contents WHERE length < 3 OR length > 5", "source_tables": ["catalog_contents"], "error_info": "Result not equal"}, {"sample_id": 333, "db_id": "product_catalog", "score": 1, "gold_sql": "SELECT t1.attribute_name, t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id = t2.attribute_id WHERE t2.attribute_value = 0", "pred_sql": "SELECT ad.attribute_name, ad.attribute_id FROM Attribute_Definitions AS ad JOIN Catalog_Contents_Additional_Attributes AS cca ON ad.attribute_id = cca.attribute_id WHERE cca.attribute_value = 0", "source_tables": ["attribute_definitions", "catalog_contents_additional_attributes"], "error_info": ""}, {"sample_id": 334, "db_id": "product_catalog", "score": 1, "gold_sql": "SELECT t1.attribute_name, t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id = t2.attribute_id WHERE t2.attribute_value = 0", "pred_sql": "SELECT ad.attribute_id, ad.attribute_name FROM Attribute_Definitions AS ad JOIN Catalog_Contents_Additional_Attributes AS cca ON ad.attribute_id = cca.attribute_id WHERE cca.attribute_value = 0", "source_tables": ["attribute_definitions", "catalog_contents_additional_attributes"], "error_info": ""}, {"sample_id": 335, "db_id": "product_catalog", "score": 1, "gold_sql": "SELECT catalog_entry_name, capacity FROM Catalog_Contents WHERE price_in_dollars > 700", "pred_sql": "SELECT cc.catalog_entry_name, cc.capacity FROM Catalog_Contents AS cc WHERE cc.price_in_dollars > 700", "source_tables": ["catalog_contents"], "error_info": ""}, {"sample_id": 336, "db_id": "product_catalog", "score": 1, "gold_sql": "SELECT catalog_entry_name, capacity FROM Catalog_Contents WHERE price_in_dollars > 700", "pred_sql": "SELECT catalog_entry_name, capacity FROM Catalog_Contents WHERE price_in_dollars > 700", "source_tables": ["catalog_contents"], "error_info": ""}, {"sample_id": 337, "db_id": "product_catalog", "score": 0, "gold_sql": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING COUNT(*) > 1", "pred_sql": "SELECT date_of_latest_revision, COUNT(*) AS revision_count FROM Catalogs GROUP BY date_of_latest_revision HAVING COUNT(*) > 1", "source_tables": ["catalogs"], "error_info": "Result not equal"}, {"sample_id": 338, "db_id": "product_catalog", "score": 0, "gold_sql": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING COUNT(*) > 1", "pred_sql": "SELECT date_of_latest_revision, COUNT(*) AS revision_count FROM Catalogs GROUP BY date_of_latest_revision HAVING COUNT(*) > 1", "source_tables": ["catalogs"], "error_info": "Result not equal"}, {"sample_id": 339, "db_id": "product_catalog", "score": 1, "gold_sql": "SELECT COUNT(*) FROM catalog_contents", "pred_sql": "SELECT COUNT(*) AS total_products FROM Catalog_Contents", "source_tables": ["catalog_contents"], "error_info": ""}, {"sample_id": 340, "db_id": "product_catalog", "score": 1, "gold_sql": "SELECT COUNT(*) FROM catalog_contents", "pred_sql": "SELECT COUNT(*) AS total_catalog_contents FROM Catalog_Contents", "source_tables": ["catalog_contents"], "error_info": ""}, {"sample_id": 341, "db_id": "product_catalog", "score": 1, "gold_sql": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id > 8", "pred_sql": "SELECT catalog_entry_name FROM Catalog_Contents WHERE next_entry_id > '8'", "source_tables": ["catalog_contents"], "error_info": ""}, {"sample_id": 342, "db_id": "product_catalog", "score": 1, "gold_sql": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id > 8", "pred_sql": "SELECT catalog_entry_name FROM Catalog_Contents WHERE next_entry_id > '8'", "source_tables": ["catalog_contents"], "error_info": ""}, {"sample_id": 343, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Aircraft", "pred_sql": "SELECT COUNT(*) AS total_aircrafts FROM aircraft", "source_tables": ["aircraft"], "error_info": ""}, {"sample_id": 344, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Aircraft", "pred_sql": "SELECT COUNT(*) AS aircraft_count FROM aircraft", "source_tables": ["aircraft"], "error_info": ""}, {"sample_id": 345, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT name, distance FROM Aircraft", "pred_sql": "SELECT name, distance FROM aircraft", "source_tables": ["aircraft"], "error_info": ""}, {"sample_id": 346, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT name, distance FROM Aircraft", "pred_sql": "SELECT name, distance FROM aircraft", "source_tables": ["aircraft"], "error_info": ""}, {"sample_id": 347, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT aid FROM Aircraft WHERE distance > 1000", "pred_sql": "SELECT aid FROM aircraft WHERE distance > 1000", "source_tables": ["aircraft"], "error_info": ""}, {"sample_id": 348, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT aid FROM Aircraft WHERE distance > 1000", "pred_sql": "SELECT aid FROM aircraft WHERE distance > 1000", "source_tables": ["aircraft"], "error_info": ""}, {"sample_id": 349, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000", "pred_sql": "SELECT COUNT(*) AS aircraft_count FROM aircraft WHERE distance BETWEEN 1000 AND 5000", "source_tables": ["aircraft"], "error_info": ""}, {"sample_id": 350, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000", "pred_sql": "SELECT COUNT(*) AS aircraft_count FROM aircraft WHERE distance BETWEEN 1000 AND 5000", "source_tables": ["aircraft"], "error_info": ""}, {"sample_id": 351, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT name, distance FROM Aircraft WHERE aid = 12", "pred_sql": "SELECT name, distance FROM aircraft WHERE aid = 12", "source_tables": ["aircraft"], "error_info": ""}, {"sample_id": 352, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT name, distance FROM Aircraft WHERE aid = 12", "pred_sql": "SELECT name, distance FROM aircraft WHERE aid = 12", "source_tables": ["aircraft"], "error_info": ""}, {"sample_id": 353, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT MIN(distance), AVG(distance), MAX(distance) FROM Aircraft", "pred_sql": "SELECT MIN(distance) AS min_distance, AVG(distance) AS avg_distance, MAX(distance) AS max_distance FROM aircraft", "source_tables": ["aircraft"], "error_info": ""}, {"sample_id": 354, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT MIN(distance), AVG(distance), MAX(distance) FROM Aircraft", "pred_sql": "SELECT MIN(distance) AS min_distance, AVG(distance) AS avg_distance, MAX(distance) AS max_distance FROM aircraft", "source_tables": ["aircraft"], "error_info": ""}, {"sample_id": 355, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT aid, name FROM Aircraft ORDER BY distance DESC LIMIT 1", "pred_sql": "SELECT aid, name FROM aircraft WHERE distance = (SELECT MAX(distance) FROM aircraft)", "source_tables": ["aircraft"], "error_info": ""}, {"sample_id": 356, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT aid, name FROM Aircraft ORDER BY distance DESC LIMIT 1", "pred_sql": "SELECT aid, name FROM aircraft WHERE distance = (SELECT MAX(distance) FROM aircraft)", "source_tables": ["aircraft"], "error_info": ""}, {"sample_id": 357, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3", "pred_sql": "SELECT name FROM aircraft ORDER BY distance ASC LIMIT 3", "source_tables": ["aircraft"], "error_info": ""}, {"sample_id": 358, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3", "pred_sql": "SELECT name FROM aircraft ORDER BY distance ASC LIMIT 3", "source_tables": ["aircraft"], "error_info": ""}, {"sample_id": 359, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT name FROM Aircraft WHERE distance > (SELECT AVG(distance) FROM Aircraft)", "pred_sql": "SELECT name FROM aircraft WHERE distance > (SELECT AVG(distance) FROM aircraft)", "source_tables": ["aircraft"], "error_info": ""}, {"sample_id": 360, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT name FROM Aircraft WHERE distance > (SELECT AVG(distance) FROM Aircraft)", "pred_sql": "SELECT name FROM aircraft WHERE distance > (SELECT AVG(distance) FROM aircraft)", "source_tables": ["aircraft"], "error_info": ""}, {"sample_id": 361, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Employee", "pred_sql": "SELECT COUNT(*) AS employee_count FROM employee", "source_tables": ["employee"], "error_info": ""}, {"sample_id": 362, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Employee", "pred_sql": "SELECT COUNT(*) AS number_of_employees FROM employee", "source_tables": ["employee"], "error_info": ""}, {"sample_id": 363, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT name, salary FROM Employee ORDER BY salary", "pred_sql": "SELECT name, salary FROM employee ORDER BY salary", "source_tables": ["employee"], "error_info": ""}, {"sample_id": 364, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT name, salary FROM Employee ORDER BY salary", "pred_sql": "SELECT name, salary FROM employee ORDER BY salary", "source_tables": ["employee"], "error_info": ""}, {"sample_id": 365, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT eid FROM Employee WHERE salary > 100000", "pred_sql": "SELECT eid FROM employee WHERE salary >= '100000'", "source_tables": ["employee"], "error_info": ""}, {"sample_id": 366, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT eid FROM Employee WHERE salary > 100000", "pred_sql": "SELECT eid FROM employee WHERE salary >= '100000'", "source_tables": ["employee"], "error_info": ""}, {"sample_id": 367, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000", "pred_sql": "SELECT COUNT(*) AS employee_count FROM employee WHERE salary BETWEEN '100000' AND '200000'", "source_tables": ["employee"], "error_info": ""}, {"sample_id": 368, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000", "pred_sql": "SELECT COUNT(*) AS employee_count FROM employee WHERE salary BETWEEN '100000' AND '200000'", "source_tables": ["employee"], "error_info": ""}, {"sample_id": 369, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT name, salary FROM Employee WHERE eid = 242518965", "pred_sql": "SELECT name, salary FROM employee WHERE eid = '242518965'", "source_tables": ["employee"], "error_info": ""}, {"sample_id": 370, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT name, salary FROM Employee WHERE eid = 242518965", "pred_sql": "SELECT name, salary FROM employee WHERE eid = '242518965'", "source_tables": ["employee"], "error_info": ""}, {"sample_id": 371, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT AVG(salary), MAX(salary) FROM Employee", "pred_sql": "SELECT AVG(salary) AS average_salary, MAX(salary) AS maximum_salary FROM employee", "source_tables": ["employee"], "error_info": ""}, {"sample_id": 372, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT AVG(salary), MAX(salary) FROM Employee", "pred_sql": "SELECT AVG(salary) AS average_salary, MAX(salary) AS largest_salary FROM employee", "source_tables": ["employee"], "error_info": ""}, {"sample_id": 373, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT eid, name FROM Employee ORDER BY salary DESC LIMIT 1", "pred_sql": "SELECT eid, name FROM employee WHERE salary = (SELECT MAX(salary) FROM employee)", "source_tables": ["employee"], "error_info": ""}, {"sample_id": 374, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT eid, name FROM Employee ORDER BY salary DESC LIMIT 1", "pred_sql": "SELECT eid, name FROM employee ORDER BY salary DESC LIMIT 1", "source_tables": ["employee"], "error_info": ""}, {"sample_id": 375, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3", "pred_sql": "SELECT name FROM employee ORDER BY salary ASC LIMIT 3", "source_tables": ["employee"], "error_info": ""}, {"sample_id": 376, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3", "pred_sql": "SELECT name FROM employee ORDER BY salary ASC LIMIT 3", "source_tables": ["employee"], "error_info": ""}, {"sample_id": 377, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT name FROM Employee WHERE salary > (SELECT AVG(salary) FROM Employee)", "pred_sql": "SELECT name FROM employee WHERE salary > (SELECT AVG(salary) FROM employee)", "source_tables": ["employee"], "error_info": ""}, {"sample_id": 378, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT name FROM Employee WHERE salary > (SELECT AVG(salary) FROM Employee)", "pred_sql": "SELECT name FROM employee WHERE salary > (SELECT AVG(salary) FROM employee)", "source_tables": ["employee"], "error_info": ""}, {"sample_id": 379, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT eid, salary FROM Employee WHERE name = 'Mark Young'", "pred_sql": "SELECT eid, salary FROM employee WHERE name = 'Mark Young'", "source_tables": ["employee"], "error_info": ""}, {"sample_id": 380, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT eid, salary FROM Employee WHERE name = 'Mark Young'", "pred_sql": "SELECT eid, salary FROM employee WHERE name = 'Mark Young'", "source_tables": ["employee"], "error_info": ""}, {"sample_id": 381, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Flight", "pred_sql": "SELECT COUNT(*) AS total_flights FROM flight", "source_tables": ["flight"], "error_info": ""}, {"sample_id": 382, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Flight", "pred_sql": "SELECT COUNT(*) AS number_of_flights FROM flight", "source_tables": ["flight"], "error_info": ""}, {"sample_id": 383, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT flno, origin, destination FROM Flight ORDER BY origin", "pred_sql": "SELECT flno, origin, destination FROM flight ORDER BY origin ASC", "source_tables": ["flight"], "error_info": ""}, {"sample_id": 384, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT flno, origin, destination FROM Flight ORDER BY origin", "pred_sql": "SELECT flno, origin, destination FROM flight ORDER BY origin ASC", "source_tables": ["flight"], "error_info": ""}, {"sample_id": 385, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT flno FROM Flight WHERE origin = 'Los Angeles'", "pred_sql": "SELECT flno FROM flight WHERE origin = 'Los Angeles'", "source_tables": ["flight"], "error_info": ""}, {"sample_id": 386, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT flno FROM Flight WHERE origin = 'Los Angeles'", "pred_sql": "SELECT flno FROM flight WHERE origin = 'Los Angeles'", "source_tables": ["flight"], "error_info": ""}, {"sample_id": 387, "db_id": "flight_1", "score": 0, "gold_sql": "SELECT origin FROM Flight WHERE destination = 'Honolulu'", "pred_sql": "SELECT DISTINCT origin FROM flight WHERE destination = 'Honolulu'", "source_tables": ["flight"], "error_info": "Result not equal"}, {"sample_id": 388, "db_id": "flight_1", "score": 0, "gold_sql": "SELECT origin FROM Flight WHERE destination = 'Honolulu'", "pred_sql": "SELECT DISTINCT origin FROM flight WHERE destination = 'Honolulu'", "source_tables": ["flight"], "error_info": "Result not equal"}, {"sample_id": 389, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT departure_date, arrival_date FROM Flight WHERE origin = 'Los Angeles' AND destination = 'Honolulu'", "pred_sql": "SELECT departure_date, arrival_date FROM flight WHERE origin = 'Los Angeles' AND destination = 'Honolulu'", "source_tables": ["flight"], "error_info": ""}, {"sample_id": 390, "db_id": "flight_1", "score": 0, "gold_sql": "SELECT departure_date, arrival_date FROM Flight WHERE origin = 'Los Angeles' AND destination = 'Honolulu'", "pred_sql": "SELECT departure_date, arrival_date FROM flight WHERE origin = 'LA' AND destination = 'Honolulu'", "source_tables": ["flight"], "error_info": "Result not equal"}, {"sample_id": 391, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT flno FROM Flight WHERE distance > 2000", "pred_sql": "SELECT flno FROM flight WHERE distance > 2000", "source_tables": ["flight"], "error_info": ""}, {"sample_id": 392, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT flno FROM Flight WHERE distance > 2000", "pred_sql": "SELECT flno FROM flight WHERE distance > 2000", "source_tables": ["flight"], "error_info": ""}, {"sample_id": 393, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT AVG(price) FROM Flight WHERE origin = 'Los Angeles' AND destination = 'Honolulu'", "pred_sql": "SELECT AVG(price) AS average_price FROM flight WHERE origin = 'Los Angeles' AND destination = 'Honolulu'", "source_tables": ["flight"], "error_info": ""}, {"sample_id": 394, "db_id": "flight_1", "score": 0, "gold_sql": "SELECT AVG(price) FROM Flight WHERE origin = 'Los Angeles' AND destination = 'Honolulu'", "pred_sql": "SELECT AVG(price) AS average_price FROM flight WHERE origin = 'LA' AND destination = 'Honolulu'", "source_tables": ["flight"], "error_info": "Result not equal"}, {"sample_id": 395, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT origin, destination FROM Flight WHERE price > 300", "pred_sql": "SELECT origin, destination FROM flight WHERE price > 300", "source_tables": ["flight"], "error_info": ""}, {"sample_id": 396, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT origin, destination FROM Flight WHERE price > 300", "pred_sql": "SELECT origin, destination FROM flight WHERE price > '300'", "source_tables": ["flight"], "error_info": ""}, {"sample_id": 397, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT flno, distance FROM Flight ORDER BY price DESC LIMIT 1", "pred_sql": "SELECT flno, distance FROM flight WHERE price = (SELECT MAX(price) FROM flight)", "source_tables": ["flight"], "error_info": ""}, {"sample_id": 398, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT flno, distance FROM Flight ORDER BY price DESC LIMIT 1", "pred_sql": "SELECT flno, distance FROM flight WHERE price = (SELECT MAX(price) FROM flight)", "source_tables": ["flight"], "error_info": ""}, {"sample_id": 399, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3", "pred_sql": "SELECT flno FROM flight ORDER BY distance ASC LIMIT 3", "source_tables": ["flight"], "error_info": ""}, {"sample_id": 400, "db_id": "flight_1", "score": 0, "gold_sql": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3", "pred_sql": "SELECT flno FROM flight ORDER BY distance ASC LIMIT 1", "source_tables": ["flight"], "error_info": "Result not equal"}, {"sample_id": 401, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT AVG(distance), AVG(price) FROM Flight WHERE origin = 'Los Angeles'", "pred_sql": "SELECT AVG(distance) AS average_distance, AVG(price) AS average_price FROM flight WHERE origin = 'Los Angeles'", "source_tables": ["flight"], "error_info": ""}, {"sample_id": 402, "db_id": "flight_1", "score": 0, "gold_sql": "SELECT AVG(distance), AVG(price) FROM Flight WHERE origin = 'Los Angeles'", "pred_sql": "SELECT AVG(distance) AS average_distance, AVG(price) AS average_price FROM flight WHERE origin = 'LA'", "source_tables": ["flight"], "error_info": "Result not equal"}, {"sample_id": 403, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT origin, COUNT(*) FROM Flight GROUP BY origin", "pred_sql": "SELECT origin, COUNT(*) AS number_of_flights FROM flight GROUP BY origin", "source_tables": ["flight"], "error_info": ""}, {"sample_id": 404, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT origin, COUNT(*) FROM Flight GROUP BY origin", "pred_sql": "SELECT origin, COUNT(*) AS flight_count FROM flight GROUP BY origin", "source_tables": ["flight"], "error_info": ""}, {"sample_id": 405, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT destination, COUNT(*) FROM Flight GROUP BY destination", "pred_sql": "SELECT destination, COUNT(*) AS number_of_flights FROM flight GROUP BY destination", "source_tables": ["flight"], "error_info": ""}, {"sample_id": 406, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT destination, COUNT(*) FROM Flight GROUP BY destination", "pred_sql": "SELECT destination, COUNT(*) AS number_of_flights FROM flight GROUP BY destination", "source_tables": ["flight"], "error_info": ""}, {"sample_id": 407, "db_id": "flight_1", "score": 0, "gold_sql": "SELECT origin FROM Flight GROUP BY origin ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT origin, COUNT(*) AS flight_count FROM flight GROUP BY origin ORDER BY flight_count DESC LIMIT 1", "source_tables": ["flight"], "error_info": "Result not equal"}, {"sample_id": 408, "db_id": "flight_1", "score": 0, "gold_sql": "SELECT origin FROM Flight GROUP BY origin ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT origin, COUNT(*) AS flight_count FROM flight GROUP BY origin ORDER BY flight_count DESC LIMIT 1", "source_tables": ["flight"], "error_info": "Result not equal"}, {"sample_id": 409, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT destination FROM Flight GROUP BY destination ORDER BY COUNT(*) LIMIT 1", "pred_sql": "SELECT destination FROM flight GROUP BY destination ORDER BY COUNT(*) ASC LIMIT 1", "source_tables": ["flight"], "error_info": ""}, {"sample_id": 410, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT destination FROM Flight GROUP BY destination ORDER BY COUNT(*) LIMIT 1", "pred_sql": "SELECT destination FROM flight GROUP BY destination ORDER BY COUNT(*) ASC LIMIT 1", "source_tables": ["flight"], "error_info": ""}, {"sample_id": 411, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid WHERE T1.flno = 99", "pred_sql": "SELECT aircraft.name FROM flight JOIN aircraft ON flight.aid = aircraft.aid WHERE flight.flno = '99'", "source_tables": ["aircraft", "flight"], "error_info": ""}, {"sample_id": 412, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid WHERE T1.flno = 99", "pred_sql": "SELECT aircraft.name FROM flight JOIN aircraft ON flight.aid = aircraft.aid WHERE flight.flno = '99'", "source_tables": ["aircraft", "flight"], "error_info": ""}, {"sample_id": 413, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = 'Airbus A340-300'", "pred_sql": "SELECT flight.flno FROM flight JOIN aircraft ON flight.aid = aircraft.aid WHERE aircraft.name = 'Airbus A340-300'", "source_tables": ["aircraft", "flight"], "error_info": ""}, {"sample_id": 414, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = 'Airbus A340-300'", "pred_sql": "SELECT flight.flno FROM flight JOIN aircraft ON flight.aid = aircraft.aid WHERE aircraft.name = 'Airbus A340-300'", "source_tables": ["aircraft", "flight"], "error_info": ""}, {"sample_id": 415, "db_id": "flight_1", "score": 0, "gold_sql": "SELECT T2.name, COUNT(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid", "pred_sql": "SELECT a.name, COUNT(f.flno) AS number_of_flights FROM aircraft AS a LEFT JOIN flight AS f ON a.aid = f.aid GROUP BY a.aid, a.name", "source_tables": ["aircraft", "flight"], "error_info": "Result not equal"}, {"sample_id": 416, "db_id": "flight_1", "score": 0, "gold_sql": "SELECT T2.name, COUNT(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid", "pred_sql": "SELECT a.name, COUNT(f.flno) AS flight_count FROM aircraft AS a LEFT JOIN flight AS f ON a.aid = f.aid GROUP BY a.aid", "source_tables": ["aircraft", "flight"], "error_info": "Result not equal"}, {"sample_id": 417, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid HAVING COUNT(*) >= 2", "pred_sql": "SELECT DISTINCT a.name FROM aircraft AS a JOIN flight AS f ON a.aid = f.aid GROUP BY a.aid HAVING COUNT(f.flno) >= 2", "source_tables": ["aircraft", "flight"], "error_info": ""}, {"sample_id": 418, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid HAVING COUNT(*) >= 2", "pred_sql": "SELECT DISTINCT a.name FROM aircraft AS a JOIN flight AS f ON a.aid = f.aid GROUP BY a.aid HAVING COUNT(f.flno) >= 2", "source_tables": ["aircraft", "flight"], "error_info": ""}, {"sample_id": 419, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT eid) FROM Certificate", "pred_sql": "SELECT COUNT(DISTINCT eid) AS employee_count FROM certificate", "source_tables": ["certificate"], "error_info": ""}, {"sample_id": 420, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT eid) FROM Certificate", "pred_sql": "SELECT COUNT(DISTINCT eid) AS distinct_employee_count FROM certificate", "source_tables": ["certificate"], "error_info": ""}, {"sample_id": 421, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate", "pred_sql": "SELECT eid FROM employee WHERE NOT eid IN (SELECT eid FROM certificate)", "source_tables": ["employee", "certificate"], "error_info": ""}, {"sample_id": 422, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate", "pred_sql": "SELECT eid FROM employee WHERE NOT eid IN (SELECT eid FROM certificate)", "source_tables": ["employee", "certificate"], "error_info": ""}, {"sample_id": 423, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T1.name = 'John Williams'", "pred_sql": "SELECT DISTINCT aircraft.name FROM aircraft JOIN certificate ON aircraft.aid = certificate.aid JOIN employee ON certificate.eid = employee.eid WHERE employee.name = 'John Williams'", "source_tables": ["employee", "certificate", "aircraft"], "error_info": ""}, {"sample_id": 424, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T1.name = 'John Williams'", "pred_sql": "SELECT DISTINCT aircraft.name FROM aircraft JOIN certificate ON aircraft.aid = certificate.aid JOIN employee ON certificate.eid = employee.eid WHERE employee.name = 'John Williams'", "source_tables": ["employee", "certificate", "aircraft"], "error_info": ""}, {"sample_id": 425, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = 'Boeing 737-800'", "pred_sql": "SELECT employee.name FROM employee JOIN certificate ON employee.eid = certificate.eid JOIN aircraft ON certificate.aid = aircraft.aid WHERE aircraft.name = 'Boeing 737-800'", "source_tables": ["employee", "certificate", "aircraft"], "error_info": ""}, {"sample_id": 426, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = 'Boeing 737-800'", "pred_sql": "SELECT employee.name FROM employee JOIN certificate ON employee.eid = certificate.eid JOIN aircraft ON certificate.aid = aircraft.aid WHERE aircraft.name = 'Boeing 737-800'", "source_tables": ["employee", "certificate", "aircraft"], "error_info": ""}, {"sample_id": 427, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = 'Boeing 737-800' INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = 'Airbus A340-300'", "pred_sql": "SELECT e.name FROM employee AS e JOIN certificate AS c1 ON e.eid = c1.eid JOIN aircraft AS a1 ON c1.aid = a1.aid WHERE a1.name = 'Boeing 737-800' AND c1.eid IN (SELECT c2.eid FROM certificate AS c2 JOIN aircraft AS a2 ON c2.aid = a2.aid WHERE a2.name = 'Airbus A340-300')", "source_tables": ["employee", "certificate", "aircraft"], "error_info": ""}, {"sample_id": 428, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = 'Boeing 737-800' INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = 'Airbus A340-300'", "pred_sql": "SELECT e.name FROM employee AS e JOIN certificate AS c1 ON e.eid = c1.eid JOIN aircraft AS a1 ON c1.aid = a1.aid WHERE a1.name = 'Boeing 737-800' INTERSECT SELECT e.name FROM employee AS e JOIN certificate AS c2 ON e.eid = c2.eid JOIN aircraft AS a2 ON c2.aid = a2.aid WHERE a2.name = 'Airbus A340-300'", "source_tables": ["employee", "certificate", "aircraft"], "error_info": ""}, {"sample_id": 429, "db_id": "flight_1", "score": 0, "gold_sql": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = 'Boeing 737-800'", "pred_sql": "SELECT name FROM employee WHERE NOT eid IN (SELECT eid FROM certificate WHERE aid = (SELECT aid FROM aircraft WHERE name = 'Boeing 737-800'))", "source_tables": ["employee", "certificate", "aircraft"], "error_info": "Result not equal"}, {"sample_id": 430, "db_id": "flight_1", "score": 0, "gold_sql": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = 'Boeing 737-800'", "pred_sql": "SELECT e.name FROM employee AS e WHERE NOT e.eid IN (SELECT c.eid FROM certificate AS c JOIN aircraft AS a ON c.aid = a.aid WHERE a.name = 'Boeing 737-800')", "source_tables": ["employee", "certificate", "aircraft"], "error_info": "Result not equal"}, {"sample_id": 431, "db_id": "flight_1", "score": 0, "gold_sql": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid GROUP BY T1.aid ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT a.name FROM aircraft AS a JOIN certificate AS c ON a.aid = c.aid GROUP BY a.aid ORDER BY COUNT(c.eid) ASC LIMIT 1", "source_tables": ["aircraft", "certificate"], "error_info": "Result not equal"}, {"sample_id": 432, "db_id": "flight_1", "score": 0, "gold_sql": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid GROUP BY T1.aid ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT a.name FROM aircraft AS a JOIN certificate AS c ON a.aid = c.aid GROUP BY a.aid ORDER BY COUNT(c.eid) ASC LIMIT 1", "source_tables": ["aircraft", "certificate"], "error_info": "Result not equal"}, {"sample_id": 433, "db_id": "flight_1", "score": 0, "gold_sql": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid WHERE T2.distance > 5000 GROUP BY T1.aid ORDER BY COUNT(*) >= 5", "pred_sql": "SELECT a.name, a.distance FROM aircraft AS a JOIN certificate AS c ON a.aid = c.aid GROUP BY a.aid HAVING a.distance > 5000 AND COUNT(c.eid) >= 5", "source_tables": ["aircraft", "certificate"], "error_info": "Result not equal"}, {"sample_id": 434, "db_id": "flight_1", "score": 0, "gold_sql": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid WHERE T2.distance > 5000 GROUP BY T1.aid ORDER BY COUNT(*) >= 5", "pred_sql": "SELECT name, distance FROM aircraft WHERE distance > 5000 AND aid IN (SELECT aid FROM flight GROUP BY aid HAVING COUNT(DISTINCT flno) >= 5)", "source_tables": ["aircraft", "certificate"], "error_info": "Result not equal"}, {"sample_id": 435, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT T1.name, T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid GROUP BY T1.eid ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT e.name, e.salary FROM employee AS e JOIN certificate AS c ON e.eid = c.eid GROUP BY e.eid ORDER BY COUNT(c.aid) DESC LIMIT 1", "source_tables": ["employee", "certificate"], "error_info": ""}, {"sample_id": 436, "db_id": "flight_1", "score": 1, "gold_sql": "SELECT T1.name, T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid GROUP BY T1.eid ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT e.name, e.salary FROM employee AS e JOIN certificate AS c ON e.eid = c.eid GROUP BY e.eid ORDER BY COUNT(c.aid) DESC LIMIT 1", "source_tables": ["employee", "certificate"], "error_info": ""}, {"sample_id": 437, "db_id": "flight_1", "score": 0, "gold_sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.distance > 5000 GROUP BY T1.eid ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT e.name, e.salary FROM employee AS e JOIN certificate AS c ON e.eid = c.eid JOIN aircraft AS a ON c.aid = a.aid WHERE a.distance > 5000 GROUP BY e.eid ORDER BY COUNT(c.aid) DESC LIMIT 1", "source_tables": ["employee", "certificate", "aircraft"], "error_info": "Result not equal"}, {"sample_id": 438, "db_id": "flight_1", "score": 0, "gold_sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.distance > 5000 GROUP BY T1.eid ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT e.name, e.salary FROM employee AS e JOIN certificate AS c ON e.eid = c.eid JOIN aircraft AS a ON c.aid = a.aid WHERE a.distance > 5000 GROUP BY e.eid ORDER BY COUNT(c.eid) DESC LIMIT 1", "source_tables": ["employee", "certificate", "aircraft"], "error_info": "Result not equal"}, {"sample_id": 439, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT allergy) FROM Allergy_type", "pred_sql": "SELECT COUNT(*) AS TotalAllergies FROM Allergy_Type", "source_tables": ["allergy_type"], "error_info": ""}, {"sample_id": 440, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT allergy) FROM Allergy_type", "pred_sql": "SELECT COUNT(*) AS AllergyCount FROM Allergy_Type", "source_tables": ["allergy_type"], "error_info": ""}, {"sample_id": 441, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT allergytype) FROM Allergy_type", "pred_sql": "SELECT COUNT(DISTINCT AllergyType) AS DifferentAllergyTypes FROM Allergy_Type", "source_tables": ["allergy_type"], "error_info": ""}, {"sample_id": 442, "db_id": "allergy_1", "score": 0, "gold_sql": "SELECT COUNT(DISTINCT allergytype) FROM Allergy_type", "pred_sql": "SELECT COUNT(DISTINCT Allergy) AS distinct_allergies FROM Allergy_Type", "source_tables": ["allergy_type"], "error_info": "Result not equal"}, {"sample_id": 443, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT DISTINCT allergytype FROM Allergy_type", "pred_sql": "SELECT DISTINCT AllergyType FROM Allergy_Type", "source_tables": ["allergy_type"], "error_info": ""}, {"sample_id": 444, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT DISTINCT allergytype FROM Allergy_type", "pred_sql": "SELECT DISTINCT AllergyType FROM Allergy_Type", "source_tables": ["allergy_type"], "error_info": ""}, {"sample_id": 445, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT allergy, allergytype FROM Allergy_type", "pred_sql": "SELECT Allergy, AllergyType FROM Allergy_Type", "source_tables": ["allergy_type"], "error_info": ""}, {"sample_id": 446, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT allergy, allergytype FROM Allergy_type", "pred_sql": "SELECT Allergy, AllergyType FROM Allergy_Type", "source_tables": ["allergy_type"], "error_info": ""}, {"sample_id": 447, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype = 'food'", "pred_sql": "SELECT Allergy FROM Allergy_Type WHERE AllergyType = 'food'", "source_tables": ["allergy_type"], "error_info": ""}, {"sample_id": 448, "db_id": "allergy_1", "score": 0, "gold_sql": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype = 'food'", "pred_sql": "SELECT DISTINCT Allergy FROM Allergy_Type WHERE AllergyType = 'Food'", "source_tables": ["allergy_type"], "error_info": "Result not equal"}, {"sample_id": 449, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT allergytype FROM Allergy_type WHERE allergy = 'Cat'", "pred_sql": "SELECT AllergyType FROM Allergy_Type WHERE Allergy = 'Cat'", "source_tables": ["allergy_type"], "error_info": ""}, {"sample_id": 450, "db_id": "allergy_1", "score": 0, "gold_sql": "SELECT allergytype FROM Allergy_type WHERE allergy = 'Cat'", "pred_sql": "SELECT AllergyType FROM Allergy_Type WHERE Allergy = 'cat allergy'", "source_tables": ["allergy_type"], "error_info": "Result not equal"}, {"sample_id": 451, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Allergy_type WHERE allergytype = 'animal'", "pred_sql": "SELECT COUNT(*) AS AllergyCount FROM Allergy_Type WHERE AllergyType = 'animal'", "source_tables": ["allergy_type"], "error_info": ""}, {"sample_id": 452, "db_id": "allergy_1", "score": 0, "gold_sql": "SELECT COUNT(*) FROM Allergy_type WHERE allergytype = 'animal'", "pred_sql": "SELECT COUNT(*) AS Animal_Allergy_Count FROM Allergy_Type WHERE AllergyType = 'Animal'", "source_tables": ["allergy_type"], "error_info": "Result not equal"}, {"sample_id": 453, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT allergytype, COUNT(*) FROM Allergy_type GROUP BY allergytype", "pred_sql": "SELECT AllergyType, COUNT(Allergy) AS NumberOfAllergies FROM Allergy_Type GROUP BY AllergyType", "source_tables": ["allergy_type"], "error_info": ""}, {"sample_id": 454, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT allergytype, COUNT(*) FROM Allergy_type GROUP BY allergytype", "pred_sql": "SELECT AllergyType, COUNT(Allergy) AS AllergyCount FROM Allergy_Type GROUP BY AllergyType", "source_tables": ["allergy_type"], "error_info": ""}, {"sample_id": 455, "db_id": "allergy_1", "score": 0, "gold_sql": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT AllergyType, COUNT(Allergy) AS AllergyCount FROM Allergy_Type GROUP BY AllergyType ORDER BY AllergyCount DESC LIMIT 1", "source_tables": ["allergy_type"], "error_info": "Result not equal"}, {"sample_id": 456, "db_id": "allergy_1", "score": 0, "gold_sql": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT AllergyType, COUNT(*) AS AllergyCount FROM Allergy_Type JOIN Has_Allergy ON Allergy_Type.Allergy = Has_Allergy.Allergy GROUP BY AllergyType ORDER BY AllergyCount DESC LIMIT 1", "source_tables": ["allergy_type"], "error_info": "Result not equal"}, {"sample_id": 457, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY COUNT(*) ASC LIMIT 1", "pred_sql": "SELECT AllergyType FROM Allergy_Type GROUP BY AllergyType ORDER BY COUNT(Allergy) ASC LIMIT 1", "source_tables": ["allergy_type"], "error_info": ""}, {"sample_id": 458, "db_id": "allergy_1", "score": 0, "gold_sql": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY COUNT(*) ASC LIMIT 1", "pred_sql": "SELECT AllergyType, COUNT(*) AS AllergyCount FROM Allergy_Type AS AT JOIN Has_Allergy AS HA ON AT.Allergy = HA.Allergy GROUP BY AllergyType ORDER BY AllergyCount ASC LIMIT 1", "source_tables": ["allergy_type"], "error_info": "Result not equal"}, {"sample_id": 459, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Student", "pred_sql": "SELECT COUNT(*) AS total_students FROM Student", "source_tables": ["student"], "error_info": ""}, {"sample_id": 460, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Student", "pred_sql": "SELECT COUNT(*) AS total_students FROM Student", "source_tables": ["student"], "error_info": ""}, {"sample_id": 461, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT Fname, Lname FROM Student", "pred_sql": "SELECT Fname, LName FROM Student", "source_tables": ["student"], "error_info": ""}, {"sample_id": 462, "db_id": "allergy_1", "score": 0, "gold_sql": "SELECT Fname, Lname FROM Student", "pred_sql": "SELECT Fname || ' ' || LName AS FullName FROM Student", "source_tables": ["student"], "error_info": "Result not equal"}, {"sample_id": 463, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT advisor) FROM Student", "pred_sql": "SELECT COUNT(DISTINCT Advisor) AS DifferentAdvisors FROM Student", "source_tables": ["student"], "error_info": ""}, {"sample_id": 464, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT advisor) FROM Student", "pred_sql": "SELECT COUNT(DISTINCT Advisor) AS NumberOfAdvisors FROM Student", "source_tables": ["student"], "error_info": ""}, {"sample_id": 465, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT DISTINCT Major FROM Student", "pred_sql": "SELECT DISTINCT Major FROM Student", "source_tables": ["student"], "error_info": ""}, {"sample_id": 466, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT DISTINCT Major FROM Student", "pred_sql": "SELECT DISTINCT Major FROM Student", "source_tables": ["student"], "error_info": ""}, {"sample_id": 467, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT DISTINCT city_code FROM Student", "pred_sql": "SELECT DISTINCT city_code FROM Student", "source_tables": ["student"], "error_info": ""}, {"sample_id": 468, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT DISTINCT city_code FROM Student", "pred_sql": "SELECT DISTINCT city_code FROM Student", "source_tables": ["student"], "error_info": ""}, {"sample_id": 469, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT Fname, Lname, Age FROM Student WHERE Sex = 'F'", "pred_sql": "SELECT Fname, LName, Age FROM Student WHERE Sex = 'F'", "source_tables": ["student"], "error_info": ""}, {"sample_id": 470, "db_id": "allergy_1", "score": 0, "gold_sql": "SELECT Fname, Lname, Age FROM Student WHERE Sex = 'F'", "pred_sql": "SELECT Fname || ' ' || LName AS FullName, Age FROM Student WHERE Sex = 'F'", "source_tables": ["student"], "error_info": "Result not equal"}, {"sample_id": 471, "db_id": "allergy_1", "score": 0, "gold_sql": "SELECT StuID FROM Student WHERE Sex = 'M'", "pred_sql": "SELECT StuID FROM Student WHERE Sex = 'Male'", "source_tables": ["student"], "error_info": "Result not equal"}, {"sample_id": 472, "db_id": "allergy_1", "score": 0, "gold_sql": "SELECT StuID FROM Student WHERE Sex = 'M'", "pred_sql": "SELECT StuID FROM Student WHERE Sex = 'male'", "source_tables": ["student"], "error_info": "Result not equal"}, {"sample_id": 473, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Student WHERE age = 18", "pred_sql": "SELECT COUNT(*) AS NumberOfStudents FROM Student WHERE Age = '18'", "source_tables": ["student"], "error_info": ""}, {"sample_id": 474, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Student WHERE age = 18", "pred_sql": "SELECT COUNT(*) AS NumberOfStudents FROM Student WHERE Age = '18'", "source_tables": ["student"], "error_info": ""}, {"sample_id": 475, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT StuID FROM Student WHERE age > 20", "pred_sql": "SELECT StuID FROM Student WHERE Age > '20'", "source_tables": ["student"], "error_info": ""}, {"sample_id": 476, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT StuID FROM Student WHERE age > 20", "pred_sql": "SELECT StuID FROM Student WHERE Age > '20'", "source_tables": ["student"], "error_info": ""}, {"sample_id": 477, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT city_code FROM Student WHERE LName = 'Kim'", "pred_sql": "SELECT city_code FROM Student WHERE LName = 'Kim'", "source_tables": ["student"], "error_info": ""}, {"sample_id": 478, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT city_code FROM Student WHERE LName = 'Kim'", "pred_sql": "SELECT city_code FROM Student WHERE LName = 'Kim'", "source_tables": ["student"], "error_info": ""}, {"sample_id": 479, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT Advisor FROM Student WHERE StuID = 1004", "pred_sql": "SELECT Advisor FROM Student WHERE StuID = '1004'", "source_tables": ["student"], "error_info": ""}, {"sample_id": 480, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT Advisor FROM Student WHERE StuID = 1004", "pred_sql": "SELECT Advisor FROM Student WHERE StuID = '1004'", "source_tables": ["student"], "error_info": ""}, {"sample_id": 481, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Student WHERE city_code = 'HKG' OR city_code = 'CHI'", "pred_sql": "SELECT COUNT(*) AS student_count FROM Student WHERE city_code IN ('HKG', 'CHI')", "source_tables": ["student"], "error_info": ""}, {"sample_id": 482, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Student WHERE city_code = 'HKG' OR city_code = 'CHI'", "pred_sql": "SELECT COUNT(*) AS NumberOfStudents FROM Student WHERE city_code IN ('HKG', 'CHI')", "source_tables": ["student"], "error_info": ""}, {"sample_id": 483, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT MIN(age), AVG(age), MAX(age) FROM Student", "pred_sql": "SELECT MIN(Age) AS Min_Age, AVG(Age) AS Avg_Age, MAX(Age) AS Max_Age FROM Student", "source_tables": ["student"], "error_info": ""}, {"sample_id": 484, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT MIN(age), AVG(age), MAX(age) FROM Student", "pred_sql": "SELECT MIN(Age) AS Min_Age, AVG(Age) AS Mean_Age, MAX(Age) AS Max_Age FROM Student", "source_tables": ["student"], "error_info": ""}, {"sample_id": 485, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT LName FROM Student WHERE age = (SELECT MIN(age) FROM Student)", "pred_sql": "SELECT LName FROM Student ORDER BY Age ASC LIMIT 1", "source_tables": ["student"], "error_info": ""}, {"sample_id": 486, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT LName FROM Student WHERE age = (SELECT MIN(age) FROM Student)", "pred_sql": "SELECT LName FROM Student ORDER BY Age ASC LIMIT 1", "source_tables": ["student"], "error_info": ""}, {"sample_id": 487, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT StuID FROM Student WHERE age = (SELECT MAX(age) FROM Student)", "pred_sql": "SELECT StuID FROM Student ORDER BY Age DESC LIMIT 1", "source_tables": ["student"], "error_info": ""}, {"sample_id": 488, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT StuID FROM Student WHERE age = (SELECT MAX(age) FROM Student)", "pred_sql": "SELECT StuID FROM Student ORDER BY Age DESC LIMIT 1", "source_tables": ["student"], "error_info": ""}, {"sample_id": 489, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT major, COUNT(*) FROM Student GROUP BY major", "pred_sql": "SELECT Major, COUNT(StuID) AS NumberOfStudents FROM Student GROUP BY Major", "source_tables": ["student"], "error_info": ""}, {"sample_id": 490, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT major, COUNT(*) FROM Student GROUP BY major", "pred_sql": "SELECT Major, COUNT(*) AS StudentCount FROM Student GROUP BY Major", "source_tables": ["student"], "error_info": ""}, {"sample_id": 491, "db_id": "allergy_1", "score": 0, "gold_sql": "SELECT major FROM Student GROUP BY major ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Major, COUNT(*) AS StudentCount FROM Student GROUP BY Major ORDER BY StudentCount DESC LIMIT 1", "source_tables": ["student"], "error_info": "Result not equal"}, {"sample_id": 492, "db_id": "allergy_1", "score": 0, "gold_sql": "SELECT major FROM Student GROUP BY major ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Major, COUNT(*) AS MajorCount FROM Student GROUP BY Major ORDER BY MajorCount DESC LIMIT 1", "source_tables": ["student"], "error_info": "Result not equal"}, {"sample_id": 493, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT age, COUNT(*) FROM Student GROUP BY age", "pred_sql": "SELECT Age, COUNT(*) AS NumberOfStudents FROM Student GROUP BY Age", "source_tables": ["student"], "error_info": ""}, {"sample_id": 494, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT age, COUNT(*) FROM Student GROUP BY age", "pred_sql": "SELECT Age, COUNT(*) AS NumberOfStudents FROM Student GROUP BY Age", "source_tables": ["student"], "error_info": ""}, {"sample_id": 495, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT AVG(age), sex FROM Student GROUP BY sex", "pred_sql": "SELECT Sex, AVG(Age) AS Average_Age FROM Student GROUP BY Sex", "source_tables": ["student"], "error_info": ""}, {"sample_id": 496, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT AVG(age), sex FROM Student GROUP BY sex", "pred_sql": "SELECT Sex, AVG(Age) AS Average_Age FROM Student GROUP BY Sex", "source_tables": ["student"], "error_info": ""}, {"sample_id": 497, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT city_code, COUNT(*) FROM Student GROUP BY city_code", "pred_sql": "SELECT city_code, COUNT(StuID) AS number_of_students FROM Student GROUP BY city_code", "source_tables": ["student"], "error_info": ""}, {"sample_id": 498, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT city_code, COUNT(*) FROM Student GROUP BY city_code", "pred_sql": "SELECT city_code, COUNT(*) AS student_count FROM Student GROUP BY city_code", "source_tables": ["student"], "error_info": ""}, {"sample_id": 499, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT advisor, COUNT(*) FROM Student GROUP BY advisor", "pred_sql": "SELECT Advisor, COUNT(StuID) AS NumberOfStudents FROM Student GROUP BY Advisor", "source_tables": ["student"], "error_info": ""}, {"sample_id": 500, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT advisor, COUNT(*) FROM Student GROUP BY advisor", "pred_sql": "SELECT Advisor, COUNT(StuID) AS StudentCount FROM Student GROUP BY Advisor", "source_tables": ["student"], "error_info": ""}, {"sample_id": 501, "db_id": "allergy_1", "score": 0, "gold_sql": "SELECT advisor FROM Student GROUP BY advisor ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Advisor, COUNT(StuID) AS StudentCount FROM Student GROUP BY Advisor ORDER BY StudentCount DESC LIMIT 1", "source_tables": ["student"], "error_info": "Result not equal"}, {"sample_id": 502, "db_id": "allergy_1", "score": 0, "gold_sql": "SELECT advisor FROM Student GROUP BY advisor ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Advisor, COUNT(StuID) AS StudentCount FROM Student GROUP BY Advisor ORDER BY StudentCount DESC LIMIT 1", "source_tables": ["student"], "error_info": "Result not equal"}, {"sample_id": 503, "db_id": "allergy_1", "score": 0, "gold_sql": "SELECT COUNT(*) FROM Has_allergy WHERE Allergy = 'Cat'", "pred_sql": "SELECT COUNT(DISTINCT Has_Allergy.StuID) AS StudentCount FROM Has_Allergy WHERE Allergy = 'cat'", "source_tables": ["has_allergy"], "error_info": "Result not equal"}, {"sample_id": 504, "db_id": "allergy_1", "score": 0, "gold_sql": "SELECT COUNT(*) FROM Has_allergy WHERE Allergy = 'Cat'", "pred_sql": "SELECT COUNT(DISTINCT Has_Allergy.StuID) AS affected_students FROM Has_Allergy WHERE Allergy = 'cat'", "source_tables": ["has_allergy"], "error_info": "Result not equal"}, {"sample_id": 505, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING COUNT(*) >= 2", "pred_sql": "SELECT StuID FROM Has_Allergy GROUP BY StuID HAVING COUNT(Allergy) >= 2", "source_tables": ["has_allergy"], "error_info": ""}, {"sample_id": 506, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING COUNT(*) >= 2", "pred_sql": "SELECT StuID FROM Has_Allergy GROUP BY StuID HAVING COUNT(Allergy) > 1", "source_tables": ["has_allergy"], "error_info": ""}, {"sample_id": 507, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy", "pred_sql": "SELECT StuID FROM Student WHERE NOT StuID IN (SELECT StuID FROM Has_Allergy)", "source_tables": ["has_allergy", "student"], "error_info": ""}, {"sample_id": 508, "db_id": "allergy_1", "score": 0, "gold_sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy", "pred_sql": "SELECT * FROM Student WHERE NOT StuID IN (SELECT StuID FROM Has_Allergy)", "source_tables": ["has_allergy", "student"], "error_info": "Result not equal"}, {"sample_id": 509, "db_id": "allergy_1", "score": 0, "gold_sql": "SELECT COUNT(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.sex = 'F' AND T1.allergy = 'Milk' OR T1.allergy = 'Eggs'", "pred_sql": "SELECT COUNT(DISTINCT Student.StuID) AS FemaleStudentsWithAllergies FROM Student JOIN Has_Allergy ON Student.StuID = Has_Allergy.StuID WHERE Student.Sex = 'Female' AND Has_Allergy.Allergy IN ('Milk', 'Egg')", "source_tables": ["has_allergy", "student"], "error_info": "Result not equal"}, {"sample_id": 510, "db_id": "allergy_1", "score": 0, "gold_sql": "SELECT COUNT(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.sex = 'F' AND T1.allergy = 'Milk' OR T1.allergy = 'Eggs'", "pred_sql": "SELECT COUNT(DISTINCT Student.StuID) AS Female_Allergic_Students FROM Student JOIN Has_Allergy ON Student.StuID = Has_Allergy.StuID WHERE Student.Sex = 'Female' AND Has_Allergy.Allergy IN ('milk', 'eggs')", "source_tables": ["has_allergy", "student"], "error_info": "Result not equal"}, {"sample_id": 511, "db_id": "allergy_1", "score": 0, "gold_sql": "SELECT COUNT(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy WHERE T2.allergytype = 'food'", "pred_sql": "SELECT COUNT(DISTINCT Has_Allergy.StuID) AS StudentCount FROM Has_Allergy JOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy WHERE Allergy_Type.AllergyType = 'Food'", "source_tables": ["has_allergy", "allergy_type"], "error_info": "Result not equal"}, {"sample_id": 512, "db_id": "allergy_1", "score": 0, "gold_sql": "SELECT COUNT(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy WHERE T2.allergytype = 'food'", "pred_sql": "SELECT COUNT(DISTINCT Has_Allergy.StuID) AS affected_students FROM Has_Allergy JOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy WHERE Allergy_Type.AllergyType = 'Food'", "source_tables": ["has_allergy", "allergy_type"], "error_info": "Result not equal"}, {"sample_id": 513, "db_id": "allergy_1", "score": 0, "gold_sql": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Allergy, COUNT(StuID) AS StudentCount FROM Has_Allergy GROUP BY Allergy ORDER BY StudentCount DESC LIMIT 1", "source_tables": ["has_allergy"], "error_info": "Result not equal"}, {"sample_id": 514, "db_id": "allergy_1", "score": 0, "gold_sql": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Allergy, COUNT(*) AS AllergyCount FROM Has_Allergy GROUP BY Allergy ORDER BY AllergyCount DESC LIMIT 1", "source_tables": ["has_allergy"], "error_info": "Result not equal"}, {"sample_id": 515, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT Allergy, COUNT(*) FROM Has_allergy GROUP BY Allergy", "pred_sql": "SELECT Allergy, COUNT(StuID) AS NumberOfStudents FROM Has_Allergy GROUP BY Allergy", "source_tables": ["has_allergy"], "error_info": ""}, {"sample_id": 516, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT Allergy, COUNT(*) FROM Has_allergy GROUP BY Allergy", "pred_sql": "SELECT Allergy, COUNT(StuID) AS StudentCount FROM Has_Allergy GROUP BY Allergy", "source_tables": ["has_allergy"], "error_info": ""}, {"sample_id": 517, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT T2.allergytype, COUNT(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype", "pred_sql": "SELECT at.AllergyType, COUNT(ha.StuID) AS NumberOfStudents FROM Allergy_Type AS at LEFT JOIN Has_Allergy AS ha ON at.Allergy = ha.Allergy GROUP BY at.AllergyType", "source_tables": ["has_allergy", "allergy_type"], "error_info": ""}, {"sample_id": 518, "db_id": "allergy_1", "score": 0, "gold_sql": "SELECT T2.allergytype, COUNT(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype", "pred_sql": "SELECT at.AllergyType, COUNT(s.StuID) AS StudentCount FROM Allergy_Type AS at LEFT JOIN Has_Allergy AS ha ON at.Allergy = ha.Allergy LEFT JOIN Student AS s ON ha.StuID = s.StuID GROUP BY at.AllergyType", "source_tables": ["has_allergy", "allergy_type"], "error_info": "Result not equal"}, {"sample_id": 519, "db_id": "allergy_1", "score": 0, "gold_sql": "SELECT lname, age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = 'Milk' INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy = 'Cat')", "pred_sql": "SELECT S.LName, S.Age FROM Student AS S JOIN Has_Allergy AS HA1 ON S.StuID = HA1.StuID JOIN Has_Allergy AS HA2 ON S.StuID = HA2.StuID WHERE HA1.Allergy = 'milk' AND HA2.Allergy = 'cat'", "source_tables": ["has_allergy", "student"], "error_info": "Result not equal"}, {"sample_id": 520, "db_id": "allergy_1", "score": 0, "gold_sql": "SELECT lname, age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = 'Milk' INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy = 'Cat')", "pred_sql": "SELECT Student.LName, Student.Age FROM Student JOIN Has_Allergy ON Student.StuID = Has_Allergy.StuID WHERE Has_Allergy.Allergy IN ('milk', 'cat') GROUP BY Student.StuID HAVING COUNT(DISTINCT Has_Allergy.Allergy) = 2", "source_tables": ["has_allergy", "student"], "error_info": "Result not equal"}, {"sample_id": 521, "db_id": "allergy_1", "score": 1, "gold_sql": "SELECT T1.Allergy, T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Fname = 'Lisa' ORDER BY T1.Allergy", "pred_sql": "SELECT Allergy_Type.Allergy, Allergy_Type.AllergyType FROM Student JOIN Has_Allergy ON Student.StuID = Has_Allergy.StuID JOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy WHERE Student.Fname = 'Lisa' ORDER BY Allergy_Type.Allergy", "source_tables": ["has_allergy", "allergy_type", "student"], "error_info": ""}, {"sample_id": 522, "db_id": "allergy_1", "score": 0, "gold_sql": "SELECT T1.Allergy, T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Fname = 'Lisa' ORDER BY T1.Allergy", "pred_sql": "SELECT a.Allergy, at.AllergyType FROM Student AS s JOIN Has_Allergy AS ha ON s.StuID = ha.StuID JOIN Allergy_Type AS a ON ha.Allergy = a.Allergy WHERE s.Fname = 'Lisa' AND s.Sex = 'Female' ORDER BY a.Allergy", "source_tables": ["has_allergy", "allergy_type", "student"], "error_info": "Predction Execution Error:no such column: at.AllergyType"}, {"sample_id": 523, "db_id": "allergy_1", "score": 0, "gold_sql": "SELECT fname, sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = 'Milk' EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy = 'Cat')", "pred_sql": "SELECT S.Fname, S.Sex FROM Student AS S JOIN Has_Allergy AS HA1 ON S.StuID = HA1.StuID JOIN Has_Allergy AS HA2 ON S.StuID = HA2.StuID WHERE HA1.Allergy = 'milk' AND HA2.Allergy <> 'cat'", "source_tables": ["has_allergy", "student"], "error_info": "Result not equal"}, {"sample_id": 524, "db_id": "allergy_1", "score": 0, "gold_sql": "SELECT fname, sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = 'Milk' EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy = 'Cat')", "pred_sql": "SELECT S.Fname, S.Sex FROM Student AS S JOIN Has_Allergy AS HA ON S.StuID = HA.StuID WHERE HA.Allergy = 'milk' AND NOT S.StuID IN (SELECT HA2.StuID FROM Has_Allergy AS HA2 WHERE HA2.Allergy = 'cats')", "source_tables": ["has_allergy", "student"], "error_info": "Result not equal"}, {"sample_id": 525, "db_id": "allergy_1", "score": 0, "gold_sql": "SELECT AVG(age) FROM Student WHERE StuID IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = 'food' INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = 'animal')", "pred_sql": "SELECT AVG(CAST(S.age AS INT)) AS average_age FROM Student AS S JOIN Has_Allergy AS HA ON S.StuID = HA.StuID JOIN Allergy_Type AS AT ON HA.Allergy = AT.Allergy WHERE AT.AllergyType IN ('food', 'animal')", "source_tables": ["has_allergy", "allergy_type", "student"], "error_info": "Result not equal"}, {"sample_id": 526, "db_id": "allergy_1", "score": 0, "gold_sql": "SELECT AVG(age) FROM Student WHERE StuID IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = 'food' INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = 'animal')", "pred_sql": "SELECT AVG(CAST(Age AS INT)) AS Average_Age FROM Student JOIN Has_Allergy ON Student.StuID = Has_Allergy.StuID JOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy WHERE Allergy_Type.AllergyType IN ('food', 'animal')", "source_tables": ["has_allergy", "allergy_type", "student"], "error_info": "Result not equal"}, {"sample_id": 527, "db_id": "allergy_1", "score": 0, "gold_sql": "SELECT fname, lname FROM Student WHERE NOT StuID IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = 'food')", "pred_sql": "SELECT S.Fname, S.LName FROM Student AS S WHERE NOT S.StuID IN (SELECT HA.StuID FROM Has_Allergy AS HA JOIN Allergy_Type AS AT ON HA.Allergy = AT.Allergy WHERE AT.AllergyType = 'Food')", "source_tables": ["has_allergy", "allergy_type", "student"], "error_info": "Result not equal"}, {"sample_id": 528, "db_id": "allergy_1", "score": 0, "gold_sql": "SELECT fname, lname FROM Student WHERE NOT StuID IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = 'food')", "pred_sql": "SELECT Fname || ' ' || LName AS FullName FROM Student WHERE NOT StuID IN (SELECT StuID FROM Has_Allergy JOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy WHERE AllergyType = 'Food')", "source_tables": ["has_allergy", "allergy_type", "student"], "error_info": "Result not equal"}, {"sample_id": 529, "db_id": "allergy_1", "score": 0, "gold_sql": "SELECT COUNT(*) FROM Student WHERE sex = 'M' AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = 'food')", "pred_sql": "SELECT COUNT(DISTINCT Student.StuID) AS MaleFoodAllergyCount FROM Student JOIN Has_Allergy ON Student.StuID = Has_Allergy.StuID JOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy WHERE Student.Sex = 'M' AND Allergy_Type.AllergyType = 'Food'", "source_tables": ["has_allergy", "allergy_type", "student"], "error_info": "Result not equal"}, {"sample_id": 530, "db_id": "allergy_1", "score": 0, "gold_sql": "SELECT COUNT(*) FROM Student WHERE sex = 'M' AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = 'food')", "pred_sql": "SELECT COUNT(DISTINCT Student.StuID) AS Male_Food_Allergy_Count FROM Student JOIN Has_Allergy ON Student.StuID = Has_Allergy.StuID JOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy WHERE Student.Sex = 'M' AND Allergy_Type.AllergyType = 'Food'", "source_tables": ["has_allergy", "allergy_type", "student"], "error_info": "Result not equal"}, {"sample_id": 531, "db_id": "allergy_1", "score": 0, "gold_sql": "SELECT DISTINCT T1.fname, T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid = T2.stuid WHERE T2.Allergy = 'Milk' OR T2.Allergy = 'Cat'", "pred_sql": "SELECT DISTINCT Student.Fname, Student.city_code FROM Student JOIN Has_Allergy ON Student.StuID = Has_Allergy.StuID WHERE Has_Allergy.Allergy IN ('milk', 'cat')", "source_tables": ["has_allergy", "student"], "error_info": "Result not equal"}, {"sample_id": 532, "db_id": "allergy_1", "score": 0, "gold_sql": "SELECT DISTINCT T1.fname, T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid = T2.stuid WHERE T2.Allergy = 'Milk' OR T2.Allergy = 'Cat'", "pred_sql": "SELECT DISTINCT Student.Fname, Student.city_code FROM Student JOIN Has_Allergy ON Student.StuID = Has_Allergy.StuID WHERE Has_Allergy.Allergy IN ('milk', 'cat')", "source_tables": ["has_allergy", "student"], "error_info": "Result not equal"}, {"sample_id": 533, "db_id": "allergy_1", "score": 0, "gold_sql": "SELECT COUNT(*) FROM Student WHERE age > 18 AND NOT StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = 'food' OR T2.allergytype = 'animal')", "pred_sql": "SELECT COUNT(DISTINCT s.StuID) AS num_students FROM Student AS s LEFT JOIN Has_Allergy AS ha ON s.StuID = ha.StuID LEFT JOIN Allergy_Type AS at ON ha.Allergy = at.Allergy WHERE s.Age > 18 AND (at.Allergy IS NULL OR NOT at.AllergyType IN ('food', 'animal'))", "source_tables": ["has_allergy", "allergy_type", "student"], "error_info": "Result not equal"}, {"sample_id": 534, "db_id": "allergy_1", "score": 0, "gold_sql": "SELECT COUNT(*) FROM Student WHERE age > 18 AND NOT StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = 'food' OR T2.allergytype = 'animal')", "pred_sql": "SELECT COUNT(DISTINCT Student.StuID) AS StudentCount FROM Student LEFT JOIN Has_Allergy ON Student.StuID = Has_Allergy.StuID LEFT JOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy WHERE Student.Age > 18 AND (Allergy_Type.AllergyType IS NULL OR NOT Allergy_Type.AllergyType IN ('food', 'animal'))", "source_tables": ["has_allergy", "allergy_type", "student"], "error_info": "Result not equal"}, {"sample_id": 535, "db_id": "allergy_1", "score": 0, "gold_sql": "SELECT fname, major FROM Student WHERE NOT StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = 'Soy')", "pred_sql": "SELECT Fname, Major FROM Student WHERE NOT StuID IN (SELECT StuID FROM Has_Allergy WHERE Allergy = 'soy')", "source_tables": ["has_allergy", "student"], "error_info": "Result not equal"}, {"sample_id": 536, "db_id": "allergy_1", "score": 0, "gold_sql": "SELECT fname, major FROM Student WHERE NOT StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = 'Soy')", "pred_sql": "SELECT Student.Fname, Student.Major FROM Student JOIN Has_Allergy ON Student.StuID = Has_Allergy.StuID JOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy WHERE Allergy_Type.AllergyType <> 'Soy'", "source_tables": ["has_allergy", "student"], "error_info": "Result not equal"}, {"sample_id": 537, "db_id": "store_1", "score": 1, "gold_sql": "SELECT billing_country, COUNT(*) FROM invoices GROUP BY billing_country ORDER BY COUNT(*) DESC LIMIT 5", "pred_sql": "SELECT billing_country, COUNT(*) AS number_of_invoices FROM invoices GROUP BY billing_country ORDER BY number_of_invoices DESC LIMIT 5", "source_tables": ["invoices"], "error_info": ""}, {"sample_id": 538, "db_id": "store_1", "score": 1, "gold_sql": "SELECT billing_country, COUNT(*) FROM invoices GROUP BY billing_country ORDER BY COUNT(*) DESC LIMIT 5", "pred_sql": "SELECT billing_country, COUNT(*) AS invoice_count FROM invoices GROUP BY billing_country ORDER BY invoice_count DESC LIMIT 5", "source_tables": ["invoices"], "error_info": ""}, {"sample_id": 539, "db_id": "store_1", "score": 1, "gold_sql": "SELECT billing_country, SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8", "pred_sql": "SELECT billing_country AS country, SUM(total) AS gross_invoice_size FROM invoices GROUP BY billing_country ORDER BY gross_invoice_size DESC LIMIT 8", "source_tables": ["invoices"], "error_info": ""}, {"sample_id": 540, "db_id": "store_1", "score": 1, "gold_sql": "SELECT billing_country, SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8", "pred_sql": "SELECT billing_country, SUM(total) AS total_invoice_size FROM invoices GROUP BY billing_country ORDER BY total_invoice_size DESC LIMIT 8", "source_tables": ["invoices"], "error_info": ""}, {"sample_id": 541, "db_id": "store_1", "score": 1, "gold_sql": "SELECT billing_country, AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10", "pred_sql": "SELECT billing_country, AVG(total) AS average_invoice_size FROM invoices GROUP BY billing_country ORDER BY average_invoice_size DESC LIMIT 10", "source_tables": ["invoices"], "error_info": ""}, {"sample_id": 542, "db_id": "store_1", "score": 0, "gold_sql": "SELECT billing_country, AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10", "pred_sql": "SELECT billing_country, AVG(total) AS average_invoice_size FROM invoices GROUP BY billing_country ORDER BY average_invoice_size DESC", "source_tables": ["invoices"], "error_info": "Result not equal"}, {"sample_id": 543, "db_id": "store_1", "score": 1, "gold_sql": "SELECT T1.first_name, T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id ORDER BY T2.invoice_date DESC LIMIT 5", "pred_sql": "SELECT c.first_name, c.last_name FROM customers AS c JOIN invoices AS i ON c.id = i.customer_id ORDER BY i.invoice_date DESC LIMIT 5", "source_tables": ["customers", "invoices"], "error_info": ""}, {"sample_id": 544, "db_id": "store_1", "score": 1, "gold_sql": "SELECT T1.first_name, T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id ORDER BY T2.invoice_date DESC LIMIT 5", "pred_sql": "SELECT c.first_name, c.last_name FROM customers AS c JOIN invoices AS i ON c.id = i.customer_id ORDER BY i.invoice_date DESC LIMIT 5", "source_tables": ["customers", "invoices"], "error_info": ""}, {"sample_id": 545, "db_id": "store_1", "score": 1, "gold_sql": "SELECT T1.first_name, T1.last_name, COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10", "pred_sql": "SELECT c.first_name, c.last_name, COUNT(i.id) AS total_orders FROM customers AS c JOIN invoices AS i ON c.id = i.customer_id GROUP BY c.id ORDER BY total_orders DESC LIMIT 10", "source_tables": ["customers", "invoices"], "error_info": ""}, {"sample_id": 546, "db_id": "store_1", "score": 1, "gold_sql": "SELECT T1.first_name, T1.last_name, COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10", "pred_sql": "SELECT c.first_name, c.last_name, COUNT(i.id) AS total_orders FROM customers AS c JOIN invoices AS i ON c.id = i.customer_id GROUP BY c.id ORDER BY total_orders DESC LIMIT 10", "source_tables": ["customers", "invoices"], "error_info": ""}, {"sample_id": 547, "db_id": "store_1", "score": 1, "gold_sql": "SELECT T1.first_name, T1.last_name, SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10", "pred_sql": "SELECT c.first_name, c.last_name, SUM(i.total) AS total_gross_sales FROM customers AS c JOIN invoices AS i ON c.id = i.customer_id GROUP BY c.id ORDER BY total_gross_sales DESC LIMIT 10", "source_tables": ["customers", "invoices"], "error_info": ""}, {"sample_id": 548, "db_id": "store_1", "score": 1, "gold_sql": "SELECT T1.first_name, T1.last_name, SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10", "pred_sql": "SELECT c.first_name, c.last_name, SUM(i.total) AS total_sales FROM customers AS c JOIN invoices AS i ON c.id = i.customer_id GROUP BY c.id ORDER BY total_sales DESC LIMIT 10", "source_tables": ["customers", "invoices"], "error_info": ""}, {"sample_id": 549, "db_id": "store_1", "score": 1, "gold_sql": "SELECT T1.name, COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id = T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 5", "pred_sql": "SELECT genres.name, COUNT(tracks.id) AS total_tracks FROM genres LEFT JOIN tracks ON genres.id = tracks.genre_id GROUP BY genres.id ORDER BY total_tracks DESC LIMIT 5", "source_tables": ["tracks", "genres"], "error_info": ""}, {"sample_id": 550, "db_id": "store_1", "score": 1, "gold_sql": "SELECT T1.name, COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id = T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 5", "pred_sql": "SELECT g.name AS genre_name, COUNT(t.id) AS track_count FROM genres AS g LEFT JOIN tracks AS t ON g.id = t.genre_id GROUP BY g.id ORDER BY track_count DESC LIMIT 5", "source_tables": ["tracks", "genres"], "error_info": ""}, {"sample_id": 551, "db_id": "store_1", "score": 1, "gold_sql": "SELECT title FROM albums", "pred_sql": "SELECT title FROM albums", "source_tables": ["albums"], "error_info": ""}, {"sample_id": 552, "db_id": "store_1", "score": 1, "gold_sql": "SELECT title FROM albums", "pred_sql": "SELECT title FROM albums", "source_tables": ["albums"], "error_info": ""}, {"sample_id": 553, "db_id": "store_1", "score": 0, "gold_sql": "SELECT title FROM albums ORDER BY title", "pred_sql": "SELECT * FROM albums ORDER BY title ASC", "source_tables": ["albums"], "error_info": "Result not equal"}, {"sample_id": 554, "db_id": "store_1", "score": 1, "gold_sql": "SELECT title FROM albums ORDER BY title", "pred_sql": "SELECT title FROM albums ORDER BY title ASC", "source_tables": ["albums"], "error_info": ""}, {"sample_id": 555, "db_id": "store_1", "score": 0, "gold_sql": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title", "pred_sql": "SELECT * FROM albums WHERE title LIKE 'A%' ORDER BY title ASC", "source_tables": ["albums"], "error_info": "Result not equal"}, {"sample_id": 556, "db_id": "store_1", "score": 1, "gold_sql": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title", "pred_sql": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title ASC", "source_tables": ["albums"], "error_info": ""}, {"sample_id": 557, "db_id": "store_1", "score": 1, "gold_sql": "SELECT T1.first_name, T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id ORDER BY total LIMIT 10", "pred_sql": "SELECT c.first_name, c.last_name FROM customers AS c JOIN invoices AS i ON c.id = i.customer_id ORDER BY i.total ASC LIMIT 10", "source_tables": ["customers", "invoices"], "error_info": ""}, {"sample_id": 558, "db_id": "store_1", "score": 1, "gold_sql": "SELECT T1.first_name, T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id ORDER BY total LIMIT 10", "pred_sql": "SELECT customers.first_name, customers.last_name FROM customers JOIN invoices ON customers.id = invoices.customer_id ORDER BY invoices.total ASC LIMIT 10", "source_tables": ["customers", "invoices"], "error_info": ""}, {"sample_id": 559, "db_id": "store_1", "score": 1, "gold_sql": "SELECT SUM(total) FROM invoices WHERE billing_city = 'Chicago' AND billing_state = 'IL'", "pred_sql": "SELECT SUM(total) AS total_amount FROM invoices WHERE billing_city = 'Chicago' AND billing_state = 'IL'", "source_tables": ["invoices"], "error_info": ""}, {"sample_id": 560, "db_id": "store_1", "score": 0, "gold_sql": "SELECT SUM(total) FROM invoices WHERE billing_city = 'Chicago' AND billing_state = 'IL'", "pred_sql": "SELECT SUM(total) AS total_amount FROM invoices WHERE billing_city = 'Chicago' AND billing_state = 'Illinois'", "source_tables": ["invoices"], "error_info": "Result not equal"}, {"sample_id": 561, "db_id": "store_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM invoices WHERE billing_city = 'Chicago' AND billing_state = 'IL'", "pred_sql": "SELECT COUNT(*) AS number_of_invoices FROM invoices WHERE billing_city = 'Chicago' AND billing_state = 'IL'", "source_tables": ["invoices"], "error_info": ""}, {"sample_id": 562, "db_id": "store_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM invoices WHERE billing_city = 'Chicago' AND billing_state = 'IL'", "pred_sql": "SELECT COUNT(*) AS invoice_count FROM invoices WHERE billing_city = 'Chicago' AND billing_state = 'IL'", "source_tables": ["invoices"], "error_info": ""}, {"sample_id": 563, "db_id": "store_1", "score": 1, "gold_sql": "SELECT billing_state, COUNT(*) FROM invoices WHERE billing_country = 'USA' GROUP BY billing_state", "pred_sql": "SELECT billing_state, COUNT(*) AS invoice_count FROM invoices WHERE billing_country = 'USA' GROUP BY billing_state", "source_tables": ["invoices"], "error_info": ""}, {"sample_id": 564, "db_id": "store_1", "score": 0, "gold_sql": "SELECT billing_state, COUNT(*) FROM invoices WHERE billing_country = 'USA' GROUP BY billing_state", "pred_sql": "SELECT billing_state, COUNT(*) AS invoice_count FROM invoices GROUP BY billing_state", "source_tables": ["invoices"], "error_info": "Result not equal"}, {"sample_id": 565, "db_id": "store_1", "score": 0, "gold_sql": "SELECT billing_state, COUNT(*) FROM invoices WHERE billing_country = 'USA' GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT billing_state, COUNT(*) AS invoice_count FROM invoices GROUP BY billing_state ORDER BY invoice_count DESC LIMIT 1", "source_tables": ["invoices"], "error_info": "Result not equal"}, {"sample_id": 566, "db_id": "store_1", "score": 0, "gold_sql": "SELECT billing_state, COUNT(*) FROM invoices WHERE billing_country = 'USA' GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT billing_state, COUNT(*) AS invoice_count FROM invoices GROUP BY billing_state ORDER BY invoice_count DESC", "source_tables": ["invoices"], "error_info": "Result not equal"}, {"sample_id": 567, "db_id": "store_1", "score": 0, "gold_sql": "SELECT billing_state, COUNT(*), SUM(total) FROM invoices WHERE billing_state = 'CA'", "pred_sql": "SELECT COUNT(*) AS number_of_invoices, SUM(total) AS invoice_total FROM invoices INNER JOIN customers ON invoices.customer_id = customers.id WHERE customers.state = 'California'", "source_tables": ["invoices"], "error_info": "Result not equal"}, {"sample_id": 568, "db_id": "store_1", "score": 0, "gold_sql": "SELECT billing_state, COUNT(*), SUM(total) FROM invoices WHERE billing_state = 'CA'", "pred_sql": "SELECT COUNT(*) AS number_of_invoices, SUM(total) AS total_billed FROM invoices WHERE billing_state = 'CA'", "source_tables": ["invoices"], "error_info": "Result not equal"}, {"sample_id": 569, "db_id": "store_1", "score": 1, "gold_sql": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id WHERE T2.name = 'Aerosmith'", "pred_sql": "SELECT albums.title FROM albums JOIN artists ON albums.artist_id = artists.id WHERE artists.name = 'Aerosmith'", "source_tables": ["albums", "artists"], "error_info": ""}, {"sample_id": 570, "db_id": "store_1", "score": 1, "gold_sql": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id WHERE T2.name = 'Aerosmith'", "pred_sql": "SELECT title FROM albums WHERE artist_id = (SELECT id FROM artists WHERE name = 'Aerosmith')", "source_tables": ["albums", "artists"], "error_info": ""}, {"sample_id": 571, "db_id": "store_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id WHERE T2.name = 'Billy Cobham'", "pred_sql": "SELECT COUNT(*) AS album_count FROM albums WHERE artist_id = (SELECT id FROM artists WHERE name = 'Billy Cobham')", "source_tables": ["albums", "artists"], "error_info": ""}, {"sample_id": 572, "db_id": "store_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id WHERE T2.name = 'Billy Cobham'", "pred_sql": "SELECT COUNT(*) AS album_count FROM albums WHERE artist_id = (SELECT id FROM artists WHERE name = 'Billy Cobham')", "source_tables": ["albums", "artists"], "error_info": ""}, {"sample_id": 573, "db_id": "store_1", "score": 1, "gold_sql": "SELECT company FROM customers WHERE first_name = 'Eduardo' AND last_name = 'Martins'", "pred_sql": "SELECT company FROM customers WHERE first_name = 'Eduardo' AND last_name = 'Martins'", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 574, "db_id": "store_1", "score": 1, "gold_sql": "SELECT company FROM customers WHERE first_name = 'Eduardo' AND last_name = 'Martins'", "pred_sql": "SELECT company FROM customers WHERE first_name = 'Eduardo' AND last_name = 'Martins'", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 575, "db_id": "store_1", "score": 0, "gold_sql": "SELECT email, phone FROM customers WHERE first_name = 'Astrid' AND last_name = 'Gruber'", "pred_sql": "SELECT email, phone FROM employees WHERE first_name = 'Astrid' AND last_name = 'Gruber'", "source_tables": ["customers"], "error_info": "Result not equal"}, {"sample_id": 576, "db_id": "store_1", "score": 1, "gold_sql": "SELECT email, phone FROM customers WHERE first_name = 'Astrid' AND last_name = 'Gruber'", "pred_sql": "SELECT email, phone FROM customers WHERE first_name = 'Astrid' AND last_name = 'Gruber'", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 577, "db_id": "store_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM customers WHERE city = 'Prague'", "pred_sql": "SELECT COUNT(*) FROM customers WHERE city = 'Prague'", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 578, "db_id": "store_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM customers WHERE city = 'Prague'", "pred_sql": "SELECT COUNT(*) FROM customers WHERE city = 'Prague'", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 579, "db_id": "store_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM customers WHERE state = 'CA'", "pred_sql": "SELECT COUNT(*) AS customer_count FROM customers WHERE state = 'CA'", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 580, "db_id": "store_1", "score": 0, "gold_sql": "SELECT COUNT(*) FROM customers WHERE state = 'CA'", "pred_sql": "SELECT COUNT(*) AS customer_count FROM customers WHERE state = 'California'", "source_tables": ["customers"], "error_info": "Result not equal"}, {"sample_id": 581, "db_id": "store_1", "score": 1, "gold_sql": "SELECT country FROM customers WHERE first_name = 'Roberto' AND last_name = 'Almeida'", "pred_sql": "SELECT country FROM customers WHERE first_name = 'Roberto' AND last_name = 'Almeida'", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 582, "db_id": "store_1", "score": 1, "gold_sql": "SELECT country FROM customers WHERE first_name = 'Roberto' AND last_name = 'Almeida'", "pred_sql": "SELECT country FROM customers WHERE first_name = 'Roberto' AND last_name = 'Almeida'", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 583, "db_id": "store_1", "score": 1, "gold_sql": "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id = T2.artist_id WHERE T1.name LIKE '%Led%'", "pred_sql": "SELECT albums.title FROM albums JOIN artists ON albums.artist_id = artists.id WHERE artists.name LIKE '%Led%'", "source_tables": ["albums", "artists"], "error_info": ""}, {"sample_id": 584, "db_id": "store_1", "score": 1, "gold_sql": "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id = T2.artist_id WHERE T1.name LIKE '%Led%'", "pred_sql": "SELECT albums.title FROM albums JOIN artists ON albums.artist_id = artists.id WHERE artists.name LIKE '%Led%'", "source_tables": ["albums", "artists"], "error_info": ""}, {"sample_id": 585, "db_id": "store_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = 'Steve' AND T1.last_name = 'Johnson'", "pred_sql": "SELECT COUNT(*) AS customer_count FROM customers WHERE support_rep_id = (SELECT id FROM employees WHERE first_name = 'Steve' AND last_name = 'Johnson')", "source_tables": ["employees", "customers"], "error_info": ""}, {"sample_id": 586, "db_id": "store_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = 'Steve' AND T1.last_name = 'Johnson'", "pred_sql": "SELECT COUNT(*) AS customer_count FROM customers WHERE support_rep_id = (SELECT id FROM employees WHERE first_name = 'Steve' AND last_name = 'Johnson')", "source_tables": ["employees", "customers"], "error_info": ""}, {"sample_id": 587, "db_id": "store_1", "score": 0, "gold_sql": "SELECT title, phone, hire_date FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards'", "pred_sql": "SELECT employees.first_name, employees.last_name, employees.hire_date, employees.phone FROM employees WHERE employees.first_name = 'Nancy' AND employees.last_name = 'Edwards'", "source_tables": ["employees"], "error_info": "Result not equal"}, {"sample_id": 588, "db_id": "store_1", "score": 1, "gold_sql": "SELECT title, phone, hire_date FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards'", "pred_sql": "SELECT title, phone, hire_date FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards'", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 589, "db_id": "store_1", "score": 0, "gold_sql": "SELECT T2.first_name, T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = 'Nancy' AND T1.last_name = 'Edwards'", "pred_sql": "SELECT first_name || ' ' || last_name AS full_name FROM employees WHERE reports_to = (SELECT id FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards')", "source_tables": ["employees"], "error_info": "Result not equal"}, {"sample_id": 590, "db_id": "store_1", "score": 1, "gold_sql": "SELECT T2.first_name, T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = 'Nancy' AND T1.last_name = 'Edwards'", "pred_sql": "SELECT first_name, last_name FROM employees WHERE reports_to = (SELECT id FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards')", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 591, "db_id": "store_1", "score": 1, "gold_sql": "SELECT address FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards'", "pred_sql": "SELECT address FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards'", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 592, "db_id": "store_1", "score": 0, "gold_sql": "SELECT address FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards'", "pred_sql": "SELECT address, city, state, country, postal_code FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards'", "source_tables": ["employees"], "error_info": "Result not equal"}, {"sample_id": 593, "db_id": "store_1", "score": 0, "gold_sql": "SELECT T1.first_name, T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT e.first_name || ' ' || e.last_name AS full_name FROM employees AS e JOIN customers AS c ON e.id = c.support_rep_id GROUP BY e.id ORDER BY COUNT(c.id) DESC LIMIT 1", "source_tables": ["employees", "customers"], "error_info": "Result not equal"}, {"sample_id": 594, "db_id": "store_1", "score": 0, "gold_sql": "SELECT T1.first_name, T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT e.first_name || ' ' || e.last_name AS full_name FROM employees AS e JOIN customers AS c ON e.id = c.support_rep_id GROUP BY e.id ORDER BY COUNT(c.id) DESC LIMIT 1", "source_tables": ["employees", "customers"], "error_info": "Result not equal"}, {"sample_id": 595, "db_id": "store_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM employees WHERE country = 'Canada'", "pred_sql": "SELECT COUNT(*) AS employee_count FROM employees WHERE country = 'Canada'", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 596, "db_id": "store_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM employees WHERE country = 'Canada'", "pred_sql": "SELECT COUNT(*) FROM employees WHERE country = 'Canada'", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 597, "db_id": "store_1", "score": 1, "gold_sql": "SELECT phone FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards'", "pred_sql": "SELECT phone FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards'", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 598, "db_id": "store_1", "score": 1, "gold_sql": "SELECT phone FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards'", "pred_sql": "SELECT phone FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards'", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 599, "db_id": "store_1", "score": 1, "gold_sql": "SELECT first_name, last_name FROM employees ORDER BY birth_date DESC LIMIT 1", "pred_sql": "SELECT first_name, last_name FROM employees ORDER BY birth_date DESC LIMIT 1", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 600, "db_id": "store_1", "score": 1, "gold_sql": "SELECT first_name, last_name FROM employees ORDER BY birth_date DESC LIMIT 1", "pred_sql": "SELECT first_name, last_name FROM employees ORDER BY birth_date DESC LIMIT 1", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 601, "db_id": "store_1", "score": 1, "gold_sql": "SELECT first_name, last_name FROM employees ORDER BY hire_date ASC LIMIT 10", "pred_sql": "SELECT first_name, last_name FROM employees ORDER BY hire_date ASC LIMIT 10", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 602, "db_id": "store_1", "score": 1, "gold_sql": "SELECT first_name, last_name FROM employees ORDER BY hire_date ASC LIMIT 10", "pred_sql": "SELECT first_name, last_name FROM employees ORDER BY hire_date ASC LIMIT 10", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 603, "db_id": "store_1", "score": 1, "gold_sql": "SELECT COUNT(*), city FROM employees WHERE title = 'IT Staff' GROUP BY city", "pred_sql": "SELECT city, COUNT(*) AS number_of_employees FROM employees WHERE title = 'IT Staff' GROUP BY city", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 604, "db_id": "store_1", "score": 0, "gold_sql": "SELECT COUNT(*), city FROM employees WHERE title = 'IT Staff' GROUP BY city", "pred_sql": "SELECT city, COUNT(*) AS employee_count FROM employees WHERE title LIKE '%IT%' GROUP BY city", "source_tables": ["employees"], "error_info": "Result not equal"}, {"sample_id": 605, "db_id": "store_1", "score": 1, "gold_sql": "SELECT T2.first_name, T2.last_name, COUNT(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY COUNT(T1.reports_to) DESC LIMIT 1", "pred_sql": "SELECT e.first_name, e.last_name, COUNT(e2.id) AS number_of_reports FROM employees AS e LEFT JOIN employees AS e2 ON e.id = e2.reports_to GROUP BY e.id ORDER BY number_of_reports DESC LIMIT 1", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 606, "db_id": "store_1", "score": 0, "gold_sql": "SELECT T2.first_name, T2.last_name, COUNT(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY COUNT(T1.reports_to) DESC LIMIT 1", "pred_sql": "SELECT e.first_name, e.last_name, COUNT(e2.id) AS reports_count FROM employees AS e LEFT JOIN employees AS e2 ON e.id = e2.reports_to GROUP BY e.id", "source_tables": ["employees"], "error_info": "Result not equal"}, {"sample_id": 607, "db_id": "store_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = 'Lucas' AND T1.last_name = 'Mancini'", "pred_sql": "SELECT COUNT(*) AS order_count FROM invoices WHERE customer_id = (SELECT id FROM customers WHERE first_name = 'Lucas' AND last_name = 'Mancini')", "source_tables": ["customers", "invoices"], "error_info": ""}, {"sample_id": 608, "db_id": "store_1", "score": 0, "gold_sql": "SELECT COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = 'Lucas' AND T1.last_name = 'Mancini'", "pred_sql": "SELECT COUNT(*) AS order_count FROM invoices WHERE customer_id IN (SELECT id FROM customers WHERE first_name = 'Luca' AND last_name = 'Mancini')", "source_tables": ["customers", "invoices"], "error_info": "Result not equal"}, {"sample_id": 609, "db_id": "store_1", "score": 1, "gold_sql": "SELECT SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = 'Lucas' AND T1.last_name = 'Mancini'", "pred_sql": "SELECT SUM(i.total) AS total_spent FROM invoices AS i JOIN customers AS c ON i.customer_id = c.id WHERE c.first_name = 'Lucas' AND c.last_name = 'Mancini'", "source_tables": ["customers", "invoices"], "error_info": ""}, {"sample_id": 610, "db_id": "store_1", "score": 1, "gold_sql": "SELECT SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = 'Lucas' AND T1.last_name = 'Mancini'", "pred_sql": "SELECT SUM(i.total) AS total_spent FROM invoices AS i JOIN customers AS c ON i.customer_id = c.id WHERE c.first_name = 'Lucas' AND c.last_name = 'Mancini'", "source_tables": ["customers", "invoices"], "error_info": ""}, {"sample_id": 611, "db_id": "store_1", "score": 0, "gold_sql": "SELECT name FROM media_types", "pred_sql": "SELECT * FROM media_types", "source_tables": ["media_types"], "error_info": "Result not equal"}, {"sample_id": 612, "db_id": "store_1", "score": 1, "gold_sql": "SELECT name FROM media_types", "pred_sql": "SELECT name FROM media_types", "source_tables": ["media_types"], "error_info": ""}, {"sample_id": 613, "db_id": "store_1", "score": 1, "gold_sql": "SELECT DISTINCT name FROM genres", "pred_sql": "SELECT DISTINCT name FROM genres", "source_tables": ["genres"], "error_info": ""}, {"sample_id": 614, "db_id": "store_1", "score": 1, "gold_sql": "SELECT DISTINCT name FROM genres", "pred_sql": "SELECT DISTINCT name FROM genres", "source_tables": ["genres"], "error_info": ""}, {"sample_id": 615, "db_id": "store_1", "score": 1, "gold_sql": "SELECT name FROM playlists", "pred_sql": "SELECT name FROM playlists", "source_tables": ["playlists"], "error_info": ""}, {"sample_id": 616, "db_id": "store_1", "score": 1, "gold_sql": "SELECT name FROM playlists", "pred_sql": "SELECT name FROM playlists", "source_tables": ["playlists"], "error_info": ""}, {"sample_id": 617, "db_id": "store_1", "score": 1, "gold_sql": "SELECT composer FROM tracks WHERE name = 'Fast As a Shark'", "pred_sql": "SELECT composer FROM tracks WHERE name = 'Fast As a Shark'", "source_tables": ["tracks"], "error_info": ""}, {"sample_id": 618, "db_id": "store_1", "score": 1, "gold_sql": "SELECT composer FROM tracks WHERE name = 'Fast As a Shark'", "pred_sql": "SELECT composer FROM tracks WHERE name = 'Fast As a Shark'", "source_tables": ["tracks"], "error_info": ""}, {"sample_id": 619, "db_id": "store_1", "score": 1, "gold_sql": "SELECT milliseconds FROM tracks WHERE name = 'Fast As a Shark'", "pred_sql": "SELECT milliseconds FROM tracks WHERE name = 'Fast As a Shark'", "source_tables": ["tracks"], "error_info": ""}, {"sample_id": 620, "db_id": "store_1", "score": 1, "gold_sql": "SELECT milliseconds FROM tracks WHERE name = 'Fast As a Shark'", "pred_sql": "SELECT milliseconds FROM tracks WHERE name = 'Fast As a Shark'", "source_tables": ["tracks"], "error_info": ""}, {"sample_id": 621, "db_id": "store_1", "score": 1, "gold_sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = 'Rock'", "pred_sql": "SELECT tracks.name FROM tracks JOIN genres ON tracks.genre_id = genres.id WHERE genres.name = 'Rock'", "source_tables": ["tracks", "genres"], "error_info": ""}, {"sample_id": 622, "db_id": "store_1", "score": 1, "gold_sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = 'Rock'", "pred_sql": "SELECT tracks.name FROM tracks JOIN genres ON tracks.genre_id = genres.id WHERE genres.name = 'Rock'", "source_tables": ["tracks", "genres"], "error_info": ""}, {"sample_id": 623, "db_id": "store_1", "score": 0, "gold_sql": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = 'Balls to the Wall'", "pred_sql": "SELECT albums.title FROM albums JOIN tracks ON albums.id = tracks.album_id WHERE tracks.name = 'Balls to the Wall'", "source_tables": ["albums", "tracks"], "error_info": "Result not equal"}, {"sample_id": 624, "db_id": "store_1", "score": 0, "gold_sql": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = 'Balls to the Wall'", "pred_sql": "SELECT albums.title FROM albums JOIN tracks ON albums.id = tracks.album_id WHERE tracks.name = 'Ball to the Wall'", "source_tables": ["albums", "tracks"], "error_info": "Result not equal"}, {"sample_id": 625, "db_id": "store_1", "score": 0, "gold_sql": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = 'Balls to the Wall'", "pred_sql": "SELECT tracks.name FROM tracks JOIN albums ON tracks.album_id = albums.id WHERE albums.title = 'Balls to the Wall'", "source_tables": ["albums", "tracks"], "error_info": "Result not equal"}, {"sample_id": 626, "db_id": "store_1", "score": 0, "gold_sql": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = 'Balls to the Wall'", "pred_sql": "SELECT tracks.name FROM tracks JOIN albums ON tracks.album_id = albums.id WHERE albums.title = 'Balls to the Wall'", "source_tables": ["albums", "tracks"], "error_info": "Result not equal"}, {"sample_id": 627, "db_id": "store_1", "score": 1, "gold_sql": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING COUNT(T1.id) > 10", "pred_sql": "SELECT albums.title FROM albums JOIN tracks ON albums.id = tracks.album_id GROUP BY albums.id HAVING COUNT(tracks.id) > 10", "source_tables": ["albums", "tracks"], "error_info": ""}, {"sample_id": 628, "db_id": "store_1", "score": 1, "gold_sql": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING COUNT(T1.id) > 10", "pred_sql": "SELECT albums.title FROM albums JOIN tracks ON albums.id = tracks.album_id GROUP BY albums.id HAVING COUNT(tracks.id) > 10", "source_tables": ["albums", "tracks"], "error_info": ""}, {"sample_id": 629, "db_id": "store_1", "score": 1, "gold_sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = 'Rock' AND T3.name = 'MPEG audio file'", "pred_sql": "SELECT tracks.name FROM tracks JOIN media_types ON tracks.media_type_id = media_types.id JOIN genres ON tracks.genre_id = genres.id WHERE genres.name = 'Rock' AND media_types.name = 'MPEG audio file'", "source_tables": ["tracks", "genres", "media_types"], "error_info": ""}, {"sample_id": 630, "db_id": "store_1", "score": 0, "gold_sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = 'Rock' AND T3.name = 'MPEG audio file'", "pred_sql": "SELECT tracks.name FROM tracks JOIN media_types ON tracks.media_type_id = media_types.id JOIN genres ON tracks.genre_id = genres.id WHERE genres.name = 'Rock' AND media_types.name = 'MPEG audio'", "source_tables": ["tracks", "genres", "media_types"], "error_info": "Result not equal"}, {"sample_id": 631, "db_id": "store_1", "score": 1, "gold_sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = 'Rock' OR T3.name = 'MPEG audio file'", "pred_sql": "SELECT tracks.name FROM tracks JOIN genres ON tracks.genre_id = genres.id JOIN media_types ON tracks.media_type_id = media_types.id WHERE genres.name = 'Rock' OR media_types.name = 'MPEG audio file'", "source_tables": ["tracks", "genres", "media_types"], "error_info": ""}, {"sample_id": 632, "db_id": "store_1", "score": 0, "gold_sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = 'Rock' OR T3.name = 'MPEG audio file'", "pred_sql": "SELECT tracks.name FROM tracks JOIN genres ON tracks.genre_id = genres.id JOIN media_types ON tracks.media_type_id = media_types.id WHERE genres.name = 'Rock' AND media_types.name = 'MPEG'", "source_tables": ["tracks", "genres", "media_types"], "error_info": "Result not equal"}, {"sample_id": 633, "db_id": "store_1", "score": 1, "gold_sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = 'Rock' OR T1.name = 'Jazz'", "pred_sql": "SELECT tracks.name FROM tracks JOIN genres ON tracks.genre_id = genres.id WHERE genres.name IN ('Rock', 'Jazz')", "source_tables": ["tracks", "genres"], "error_info": ""}, {"sample_id": 634, "db_id": "store_1", "score": 1, "gold_sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = 'Rock' OR T1.name = 'Jazz'", "pred_sql": "SELECT tracks.name FROM tracks JOIN genres ON tracks.genre_id = genres.id WHERE genres.name IN ('Rock', 'Jazz')", "source_tables": ["tracks", "genres"], "error_info": ""}, {"sample_id": 635, "db_id": "store_1", "score": 1, "gold_sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = 'Movies'", "pred_sql": "SELECT tracks.name FROM tracks JOIN playlist_tracks ON tracks.id = playlist_tracks.track_id JOIN playlists ON playlist_tracks.playlist_id = playlists.id WHERE playlists.name = 'Movies'", "source_tables": ["tracks", "playlists", "playlist_tracks"], "error_info": ""}, {"sample_id": 636, "db_id": "store_1", "score": 1, "gold_sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = 'Movies'", "pred_sql": "SELECT tracks.name FROM tracks JOIN playlist_tracks ON tracks.id = playlist_tracks.track_id JOIN playlists ON playlist_tracks.playlist_id = playlists.id WHERE playlists.name = 'Movies'", "source_tables": ["tracks", "playlists", "playlist_tracks"], "error_info": ""}, {"sample_id": 637, "db_id": "store_1", "score": 1, "gold_sql": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING COUNT(T1.track_id) > 100", "pred_sql": "SELECT playlists.name FROM playlists JOIN playlist_tracks ON playlists.id = playlist_tracks.playlist_id GROUP BY playlists.id HAVING COUNT(playlist_tracks.track_id) > 100", "source_tables": ["playlists", "playlist_tracks"], "error_info": ""}, {"sample_id": 638, "db_id": "store_1", "score": 1, "gold_sql": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING COUNT(T1.track_id) > 100", "pred_sql": "SELECT playlists.name FROM playlists JOIN playlist_tracks ON playlists.id = playlist_tracks.playlist_id GROUP BY playlists.id HAVING COUNT(playlist_tracks.track_id) > 100", "source_tables": ["playlists", "playlist_tracks"], "error_info": ""}, {"sample_id": 639, "db_id": "store_1", "score": 1, "gold_sql": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = 'Daan' AND T4.last_name = 'Peeters'", "pred_sql": "SELECT tracks.name FROM tracks JOIN invoice_lines ON tracks.id = invoice_lines.track_id JOIN invoices ON invoice_lines.invoice_id = invoices.id JOIN customers ON invoices.customer_id = customers.id WHERE customers.first_name = 'Daan' AND customers.last_name = 'Peeters'", "source_tables": ["tracks", "invoice_lines", "customers", "invoices"], "error_info": ""}, {"sample_id": 640, "db_id": "store_1", "score": 0, "gold_sql": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = 'Daan' AND T4.last_name = 'Peeters'", "pred_sql": "SELECT tracks.name FROM tracks JOIN invoice_lines ON tracks.id = invoice_lines.track_id JOIN invoices ON invoice_lines.invoice_id = invoices.id JOIN customers ON invoices.customer_id = customers.id WHERE customers.first_name = 'Dean' AND customers.last_name = 'Peeters'", "source_tables": ["tracks", "invoice_lines", "customers", "invoices"], "error_info": "Result not equal"}, {"sample_id": 641, "db_id": "store_1", "score": 1, "gold_sql": "SELECT unit_price FROM tracks WHERE name = 'Fast As a Shark'", "pred_sql": "SELECT unit_price FROM tracks WHERE name = 'Fast As a Shark'", "source_tables": ["tracks"], "error_info": ""}, {"sample_id": 642, "db_id": "store_1", "score": 1, "gold_sql": "SELECT unit_price FROM tracks WHERE name = 'Fast As a Shark'", "pred_sql": "SELECT unit_price FROM tracks WHERE name = 'Fast As a Shark'", "source_tables": ["tracks"], "error_info": ""}, {"sample_id": 643, "db_id": "store_1", "score": 1, "gold_sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Music'", "pred_sql": "SELECT t.name FROM tracks AS t JOIN playlist_tracks AS pt1 ON t.id = pt1.track_id JOIN playlists AS p1 ON pt1.playlist_id = p1.id WHERE p1.name = 'Movies' AND NOT t.id IN (SELECT t2.id FROM tracks AS t2 JOIN playlist_tracks AS pt2 ON t2.id = pt2.track_id JOIN playlists AS p2 ON pt2.playlist_id = p2.id WHERE p2.name = 'Music')", "source_tables": ["tracks", "playlists", "playlist_tracks"], "error_info": ""}, {"sample_id": 644, "db_id": "store_1", "score": 1, "gold_sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Music'", "pred_sql": "SELECT t.name FROM tracks AS t JOIN playlist_tracks AS pt1 ON t.id = pt1.track_id JOIN playlists AS p1 ON pt1.playlist_id = p1.id LEFT JOIN playlist_tracks AS pt2 ON t.id = pt2.track_id JOIN playlists AS p2 ON pt2.playlist_id = p2.id WHERE p1.name = 'Movies' AND p2.name <> 'Music' OR p2.name IS NULL", "source_tables": ["tracks", "playlists", "playlist_tracks"], "error_info": ""}, {"sample_id": 645, "db_id": "store_1", "score": 1, "gold_sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Music'", "pred_sql": "SELECT DISTINCT t.name FROM tracks AS t JOIN playlist_tracks AS pt ON t.id = pt.track_id JOIN playlists AS p ON pt.playlist_id = p.id WHERE p.name IN ('Movies', 'Music') GROUP BY t.id HAVING COUNT(DISTINCT p.name) = 2", "source_tables": ["tracks", "playlists", "playlist_tracks"], "error_info": ""}, {"sample_id": 646, "db_id": "store_1", "score": 1, "gold_sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Music'", "pred_sql": "SELECT t.name FROM tracks AS t JOIN playlist_tracks AS pt1 ON t.id = pt1.track_id JOIN playlists AS p1 ON pt1.playlist_id = p1.id JOIN playlist_tracks AS pt2 ON t.id = pt2.track_id JOIN playlists AS p2 ON pt2.playlist_id = p2.id WHERE p1.name = 'Movies' AND p2.name = 'music'", "source_tables": ["tracks", "playlists", "playlist_tracks"], "error_info": ""}, {"sample_id": 647, "db_id": "store_1", "score": 1, "gold_sql": "SELECT COUNT(*), T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name", "pred_sql": "SELECT genres.name AS genre_name, COUNT(tracks.id) AS track_count FROM genres LEFT JOIN tracks ON genres.id = tracks.genre_id GROUP BY genres.id", "source_tables": ["tracks", "genres"], "error_info": ""}, {"sample_id": 648, "db_id": "store_1", "score": 1, "gold_sql": "SELECT COUNT(*), T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name", "pred_sql": "SELECT genres.name AS genre_name, COUNT(tracks.id) AS track_count FROM genres LEFT JOIN tracks ON genres.id = tracks.genre_id GROUP BY genres.id", "source_tables": ["tracks", "genres"], "error_info": ""}, {"sample_id": 649, "db_id": "journal_committee", "score": 1, "gold_sql": "SELECT COUNT(*) FROM editor", "pred_sql": "SELECT COUNT(*) AS EditorCount FROM editor", "source_tables": ["editor"], "error_info": ""}, {"sample_id": 650, "db_id": "journal_committee", "score": 1, "gold_sql": "SELECT Name FROM editor ORDER BY Age ASC", "pred_sql": "SELECT Name FROM editor ORDER BY Age ASC", "source_tables": ["editor"], "error_info": ""}, {"sample_id": 651, "db_id": "journal_committee", "score": 1, "gold_sql": "SELECT Name, Age FROM editor", "pred_sql": "SELECT Name, Age FROM editor", "source_tables": ["editor"], "error_info": ""}, {"sample_id": 652, "db_id": "journal_committee", "score": 1, "gold_sql": "SELECT Name FROM editor WHERE Age > 25", "pred_sql": "SELECT Name FROM editor WHERE Age > 25", "source_tables": ["editor"], "error_info": ""}, {"sample_id": 653, "db_id": "journal_committee", "score": 1, "gold_sql": "SELECT Name FROM editor WHERE Age = 24 OR Age = 25", "pred_sql": "SELECT Name FROM editor WHERE Age IN (24, 25)", "source_tables": ["editor"], "error_info": ""}, {"sample_id": 654, "db_id": "journal_committee", "score": 1, "gold_sql": "SELECT Name FROM editor ORDER BY Age ASC LIMIT 1", "pred_sql": "SELECT Name FROM editor ORDER BY Age ASC LIMIT 1", "source_tables": ["editor"], "error_info": ""}, {"sample_id": 655, "db_id": "journal_committee", "score": 1, "gold_sql": "SELECT Age, COUNT(*) FROM editor GROUP BY Age", "pred_sql": "SELECT Age, COUNT(*) AS Number_of_Editors FROM editor GROUP BY Age", "source_tables": ["editor"], "error_info": ""}, {"sample_id": 656, "db_id": "journal_committee", "score": 0, "gold_sql": "SELECT Age FROM editor GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Age, COUNT(*) AS AgeCount FROM editor GROUP BY Age ORDER BY AgeCount DESC LIMIT 1", "source_tables": ["editor"], "error_info": "Result not equal"}, {"sample_id": 657, "db_id": "journal_committee", "score": 1, "gold_sql": "SELECT DISTINCT Theme FROM journal", "pred_sql": "SELECT DISTINCT Theme FROM journal", "source_tables": ["journal"], "error_info": ""}, {"sample_id": 658, "db_id": "journal_committee", "score": 1, "gold_sql": "SELECT T2.Name, T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID", "pred_sql": "SELECT editor.Name, journal.Theme FROM editor JOIN journal_committee ON editor.Editor_ID = journal_committee.Editor_ID JOIN journal ON journal_committee.Journal_ID = journal.Journal_ID", "source_tables": ["journal_committee", "editor", "journal"], "error_info": ""}, {"sample_id": 659, "db_id": "journal_committee", "score": 1, "gold_sql": "SELECT T2.Name, T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID", "pred_sql": "SELECT editor.Name, journal.Theme FROM journal_committee JOIN editor ON journal_committee.Editor_ID = editor.Editor_ID JOIN journal ON journal_committee.Journal_ID = journal.Journal_ID", "source_tables": ["journal_committee", "editor", "journal"], "error_info": ""}, {"sample_id": 660, "db_id": "journal_committee", "score": 1, "gold_sql": "SELECT T2.Name, T2.age, T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID ORDER BY T3.Theme ASC", "pred_sql": "SELECT editor.Name, editor.Age, journal.Theme FROM editor JOIN journal_committee ON editor.Editor_ID = journal_committee.Editor_ID JOIN journal ON journal_committee.Journal_ID = journal.Journal_ID ORDER BY journal.Theme ASC", "source_tables": ["journal_committee", "editor", "journal"], "error_info": ""}, {"sample_id": 661, "db_id": "journal_committee", "score": 1, "gold_sql": "SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000", "pred_sql": "SELECT editor.Name FROM editor JOIN journal_committee ON editor.Editor_ID = journal_committee.Editor_ID JOIN journal ON journal_committee.Journal_ID = journal.Journal_ID WHERE journal.Sales > '3000'", "source_tables": ["journal_committee", "editor", "journal"], "error_info": ""}, {"sample_id": 662, "db_id": "journal_committee", "score": 0, "gold_sql": "SELECT T1.editor_id, T1.Name, COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id", "pred_sql": "SELECT editor.Editor_ID, editor.Name, COUNT(journal_committee.Journal_ID) AS Committee_Count FROM editor LEFT JOIN journal_committee ON editor.Editor_ID = journal_committee.Editor_ID GROUP BY editor.Editor_ID, editor.Name", "source_tables": ["editor", "journal_committee"], "error_info": "Result not equal"}, {"sample_id": 663, "db_id": "journal_committee", "score": 1, "gold_sql": "SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*) >= 2", "pred_sql": "SELECT e.Name FROM editor AS e JOIN journal_committee AS jc ON e.Editor_ID = jc.Editor_ID GROUP BY e.Editor_ID HAVING COUNT(jc.Journal_ID) >= 2", "source_tables": ["editor", "journal_committee"], "error_info": ""}, {"sample_id": 664, "db_id": "journal_committee", "score": 1, "gold_sql": "SELECT Name FROM editor WHERE NOT editor_id IN (SELECT editor_id FROM journal_committee)", "pred_sql": "SELECT Name FROM editor WHERE NOT Editor_ID IN (SELECT Editor_ID FROM journal_committee)", "source_tables": ["editor", "journal_committee"], "error_info": ""}, {"sample_id": 665, "db_id": "journal_committee", "score": 0, "gold_sql": "SELECT date, theme, sales FROM journal EXCEPT SELECT T1.date, T1.theme, T1.sales FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID = T2.journal_ID", "pred_sql": "SELECT j.Date, j.Theme, j.Sales FROM journal AS j WHERE NOT j.Journal_ID IN (SELECT jc.Journal_ID FROM journal_committee AS jc WHERE jc.Editor_ID IN (SELECT e.Editor_ID FROM editor AS e WHERE e.Name IN ('Editor1', 'Editor2', 'Editor3')))", "source_tables": ["journal_committee", "journal"], "error_info": "Result not equal"}, {"sample_id": 666, "db_id": "journal_committee", "score": 1, "gold_sql": "SELECT AVG(T1.sales) FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID = T2.journal_ID WHERE T2.work_type = 'Photo'", "pred_sql": "SELECT AVG(CAST(Sales AS FLOAT)) AS Average_Sales FROM journal JOIN journal_committee ON journal.Journal_ID = journal_committee.Journal_ID JOIN editor ON journal_committee.Editor_ID = editor.Editor_ID WHERE journal_committee.Work_Type = 'Photo'", "source_tables": ["journal_committee", "journal"], "error_info": ""}, {"sample_id": 667, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Accounts", "pred_sql": "SELECT COUNT(*) AS total_accounts FROM Accounts", "source_tables": ["accounts"], "error_info": ""}, {"sample_id": 668, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Accounts", "pred_sql": "SELECT COUNT(*) AS account_count FROM Accounts", "source_tables": ["accounts"], "error_info": ""}, {"sample_id": 669, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT account_id, customer_id, account_name FROM Accounts", "pred_sql": "SELECT account_id, customer_id, account_name FROM Accounts", "source_tables": ["accounts"], "error_info": ""}, {"sample_id": 670, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT account_id, customer_id, account_name FROM Accounts", "pred_sql": "SELECT account_id, customer_id, account_name FROM Accounts", "source_tables": ["accounts"], "error_info": ""}, {"sample_id": 671, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT other_account_details FROM Accounts WHERE account_name = '338'", "pred_sql": "SELECT other_account_details FROM Accounts WHERE account_name = '338'", "source_tables": ["accounts"], "error_info": ""}, {"sample_id": 672, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT other_account_details FROM Accounts WHERE account_name = '338'", "pred_sql": "SELECT other_account_details FROM Accounts WHERE account_name = '338'", "source_tables": ["accounts"], "error_info": ""}, {"sample_id": 673, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT T2.customer_first_name, T2.customer_last_name, T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.account_name = '162'", "pred_sql": "SELECT Customers.customer_first_name, Customers.customer_last_name, Customers.customer_phone FROM Customers JOIN Accounts ON Customers.customer_id = Accounts.customer_id WHERE Accounts.account_name = '162'", "source_tables": ["accounts", "customers"], "error_info": ""}, {"sample_id": 674, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT T2.customer_first_name, T2.customer_last_name, T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.account_name = '162'", "pred_sql": "SELECT Customers.customer_first_name, Customers.customer_last_name, Customers.customer_phone FROM Customers JOIN Accounts ON Customers.customer_id = Accounts.customer_id WHERE Accounts.account_name = '162'", "source_tables": ["accounts", "customers"], "error_info": ""}, {"sample_id": 675, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Art' AND T2.customer_last_name = 'Turcotte'", "pred_sql": "SELECT COUNT(*) AS account_count FROM Accounts WHERE customer_id = (SELECT customer_id FROM Customers WHERE customer_first_name = 'Art' AND customer_last_name = 'Turcotte')", "source_tables": ["accounts", "customers"], "error_info": ""}, {"sample_id": 676, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Art' AND T2.customer_last_name = 'Turcotte'", "pred_sql": "SELECT COUNT(*) AS account_count FROM Accounts WHERE customer_id = (SELECT customer_id FROM Customers WHERE customer_first_name = 'Art' AND customer_last_name = 'Turcotte')", "source_tables": ["accounts", "customers"], "error_info": ""}, {"sample_id": 677, "db_id": "customers_card_transactions", "score": 0, "gold_sql": "SELECT customer_id, COUNT(*) FROM Accounts GROUP BY customer_id", "pred_sql": "SELECT c.customer_id, COUNT(a.account_id) AS account_count FROM Customers AS c LEFT JOIN Accounts AS a ON c.customer_id = a.customer_id GROUP BY c.customer_id", "source_tables": ["accounts"], "error_info": "Result not equal"}, {"sample_id": 678, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT customer_id, COUNT(*) FROM Accounts GROUP BY customer_id", "pred_sql": "SELECT customer_id, COUNT(account_id) AS account_count FROM Accounts GROUP BY customer_id", "source_tables": ["accounts"], "error_info": ""}, {"sample_id": 679, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT customer_id, COUNT(*) FROM Accounts GROUP BY customer_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT customer_id, COUNT(account_id) AS number_of_accounts FROM Accounts GROUP BY customer_id ORDER BY number_of_accounts DESC LIMIT 1", "source_tables": ["accounts"], "error_info": ""}, {"sample_id": 680, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT customer_id, COUNT(*) FROM Accounts GROUP BY customer_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT customer_id, COUNT(account_id) AS account_count FROM Accounts GROUP BY customer_id ORDER BY account_count DESC LIMIT 1", "source_tables": ["accounts"], "error_info": ""}, {"sample_id": 681, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT T2.customer_first_name, T2.customer_last_name, T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) ASC LIMIT 1", "pred_sql": "SELECT c.customer_first_name, c.customer_last_name, c.customer_id FROM Customers AS c JOIN Accounts AS a ON c.customer_id = a.customer_id GROUP BY c.customer_id ORDER BY COUNT(a.account_id) ASC LIMIT 1", "source_tables": ["accounts", "customers"], "error_info": ""}, {"sample_id": 682, "db_id": "customers_card_transactions", "score": 0, "gold_sql": "SELECT T2.customer_first_name, T2.customer_last_name, T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) ASC LIMIT 1", "pred_sql": "SELECT c.customer_id, c.customer_first_name || ' ' || c.customer_last_name AS full_name FROM Customers AS c JOIN Accounts AS a ON c.customer_id = a.customer_id GROUP BY c.customer_id ORDER BY COUNT(a.account_id) ASC LIMIT 1", "source_tables": ["accounts", "customers"], "error_info": "Result not equal"}, {"sample_id": 683, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Customers WHERE NOT customer_id IN (SELECT customer_id FROM Accounts)", "pred_sql": "SELECT COUNT(*) AS number_of_customers_without_account FROM Customers WHERE NOT customer_id IN (SELECT customer_id FROM Accounts)", "source_tables": ["accounts", "customers"], "error_info": ""}, {"sample_id": 684, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Customers WHERE NOT customer_id IN (SELECT customer_id FROM Accounts)", "pred_sql": "SELECT COUNT(*) AS customer_count FROM Customers WHERE NOT customer_id IN (SELECT customer_id FROM Accounts)", "source_tables": ["accounts", "customers"], "error_info": ""}, {"sample_id": 685, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT customer_first_name, customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id", "pred_sql": "SELECT customer_first_name, customer_last_name FROM Customers WHERE NOT customer_id IN (SELECT customer_id FROM Accounts)", "source_tables": ["accounts", "customers"], "error_info": ""}, {"sample_id": 686, "db_id": "customers_card_transactions", "score": 0, "gold_sql": "SELECT customer_first_name, customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id", "pred_sql": "SELECT customer_first_name || ' ' || customer_last_name AS full_name FROM Customers WHERE NOT customer_id IN (SELECT customer_id FROM Accounts)", "source_tables": ["accounts", "customers"], "error_info": "Result not equal"}, {"sample_id": 687, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT DISTINCT T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id", "pred_sql": "SELECT DISTINCT c.customer_first_name, c.customer_last_name FROM Customers AS c JOIN Accounts AS a ON c.customer_id = a.customer_id", "source_tables": ["accounts", "customers"], "error_info": ""}, {"sample_id": 688, "db_id": "customers_card_transactions", "score": 0, "gold_sql": "SELECT DISTINCT T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id", "pred_sql": "SELECT Customers.customer_first_name || ' ' || Customers.customer_last_name AS full_name FROM Customers JOIN Accounts ON Customers.customer_id = Accounts.customer_id", "source_tables": ["accounts", "customers"], "error_info": "Result not equal"}, {"sample_id": 689, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT customer_id) FROM Accounts", "pred_sql": "SELECT COUNT(DISTINCT customer_id) AS customer_count FROM Accounts", "source_tables": ["accounts"], "error_info": ""}, {"sample_id": 690, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT customer_id) FROM Accounts", "pred_sql": "SELECT COUNT(DISTINCT c.customer_id) AS customer_count FROM Customers AS c JOIN Accounts AS a ON c.customer_id = a.customer_id", "source_tables": ["accounts"], "error_info": ""}, {"sample_id": 691, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Customers", "pred_sql": "SELECT COUNT(*) AS total_customers FROM Customers", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 692, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Customers", "pred_sql": "SELECT COUNT(*) AS customer_count FROM Customers", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 693, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT customer_id, customer_first_name, customer_last_name, customer_phone FROM Customers", "pred_sql": "SELECT customer_id, customer_first_name, customer_last_name, customer_phone FROM Customers", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 694, "db_id": "customers_card_transactions", "score": 0, "gold_sql": "SELECT customer_id, customer_first_name, customer_last_name, customer_phone FROM Customers", "pred_sql": "SELECT customer_id, customer_first_name || ' ' || customer_last_name AS full_name, customer_phone FROM Customers", "source_tables": ["customers"], "error_info": "Result not equal"}, {"sample_id": 695, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT customer_phone, customer_email FROM Customers WHERE customer_first_name = 'Aniyah' AND customer_last_name = 'Feest'", "pred_sql": "SELECT customer_phone, customer_email FROM Customers WHERE customer_first_name = 'Aniyah' AND customer_last_name = 'Feest'", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 696, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT customer_phone, customer_email FROM Customers WHERE customer_first_name = 'Aniyah' AND customer_last_name = 'Feest'", "pred_sql": "SELECT customer_phone, customer_email FROM Customers WHERE customer_first_name = 'Aniyah' AND customer_last_name = 'Feest'", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 697, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Customers_cards", "pred_sql": "SELECT COUNT(*) AS number_of_customer_cards FROM Customers_Cards", "source_tables": ["customers_cards"], "error_info": ""}, {"sample_id": 698, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Customers_cards", "pred_sql": "SELECT COUNT(*) AS total_customer_cards FROM Customers_Cards", "source_tables": ["customers_cards"], "error_info": ""}, {"sample_id": 699, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT card_id, customer_id, card_type_code, card_number FROM Customers_cards", "pred_sql": "SELECT card_id, customer_id, card_type_code, card_number FROM Customers_Cards", "source_tables": ["customers_cards"], "error_info": ""}, {"sample_id": 700, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT card_id, customer_id, card_type_code, card_number FROM Customers_cards", "pred_sql": "SELECT card_id, customer_id, card_type_code, card_number FROM Customers_Cards", "source_tables": ["customers_cards"], "error_info": ""}, {"sample_id": 701, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT date_valid_from, date_valid_to FROM Customers_cards WHERE card_number = '4560596484842'", "pred_sql": "SELECT date_valid_from, date_valid_to FROM Customers_Cards WHERE card_number = '4560596484842'", "source_tables": ["customers_cards"], "error_info": ""}, {"sample_id": 702, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT date_valid_from, date_valid_to FROM Customers_cards WHERE card_number = '4560596484842'", "pred_sql": "SELECT date_valid_from, date_valid_to FROM Customers_Cards WHERE card_number = '4560596484842'", "source_tables": ["customers_cards"], "error_info": ""}, {"sample_id": 703, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT T2.customer_first_name, T2.customer_last_name, T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.card_number = '4560596484842'", "pred_sql": "SELECT Customers.customer_first_name, Customers.customer_last_name, Customers.customer_phone FROM Customers JOIN Customers_Cards ON Customers.customer_id = Customers_Cards.customer_id WHERE Customers_Cards.card_number = '4560596484842'", "source_tables": ["customers", "customers_cards"], "error_info": ""}, {"sample_id": 704, "db_id": "customers_card_transactions", "score": 0, "gold_sql": "SELECT T2.customer_first_name, T2.customer_last_name, T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.card_number = '4560596484842'", "pred_sql": "SELECT Customers.customer_first_name || ' ' || Customers.customer_last_name AS full_name, Customers.customer_phone FROM Customers JOIN Customers_Cards ON Customers.customer_id = Customers_Cards.customer_id WHERE Customers_Cards.card_number = '4560596484842'", "source_tables": ["customers", "customers_cards"], "error_info": "Result not equal"}, {"sample_id": 705, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Art' AND T2.customer_last_name = 'Turcotte'", "pred_sql": "SELECT COUNT(*) AS card_count FROM Customers_Cards WHERE customer_id = (SELECT customer_id FROM Customers WHERE customer_first_name = 'Art' AND customer_last_name = 'Turcotte')", "source_tables": ["customers", "customers_cards"], "error_info": ""}, {"sample_id": 706, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Art' AND T2.customer_last_name = 'Turcotte'", "pred_sql": "SELECT COUNT(*) AS card_count FROM Customers_Cards AS cc JOIN Customers AS c ON cc.customer_id = c.customer_id WHERE c.customer_first_name = 'Art' AND c.customer_last_name = 'Turcotte'", "source_tables": ["customers", "customers_cards"], "error_info": ""}, {"sample_id": 707, "db_id": "customers_card_transactions", "score": 0, "gold_sql": "SELECT COUNT(*) FROM Customers_cards WHERE card_type_code = 'Debit'", "pred_sql": "SELECT COUNT(*) AS debit_card_count FROM Customers_Cards WHERE card_type_code = 'debit'", "source_tables": ["customers_cards"], "error_info": "Result not equal"}, {"sample_id": 708, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Customers_cards WHERE card_type_code = 'Debit'", "pred_sql": "SELECT COUNT(*) AS debit_card_count FROM Customers_Cards WHERE card_type_code = 'Debit'", "source_tables": ["customers_cards"], "error_info": ""}, {"sample_id": 709, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Blanche' AND T2.customer_last_name = 'Huels' AND T1.card_type_code = 'Credit'", "pred_sql": "SELECT COUNT(*) AS credit_card_count FROM Customers_Cards WHERE customer_id = (SELECT customer_id FROM Customers WHERE customer_first_name = 'Blanche' AND customer_last_name = 'Huels')", "source_tables": ["customers", "customers_cards"], "error_info": ""}, {"sample_id": 710, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Blanche' AND T2.customer_last_name = 'Huels' AND T1.card_type_code = 'Credit'", "pred_sql": "SELECT COUNT(*) AS credit_card_count FROM Customers_Cards AS cc JOIN Customers AS c ON cc.customer_id = c.customer_id WHERE c.customer_first_name = 'Blanche' AND c.customer_last_name = 'Huels'", "source_tables": ["customers", "customers_cards"], "error_info": ""}, {"sample_id": 711, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT customer_id, COUNT(*) FROM Customers_cards GROUP BY customer_id", "pred_sql": "SELECT customer_id, COUNT(card_id) AS number_of_cards FROM Customers_Cards GROUP BY customer_id", "source_tables": ["customers_cards"], "error_info": ""}, {"sample_id": 712, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT customer_id, COUNT(*) FROM Customers_cards GROUP BY customer_id", "pred_sql": "SELECT customer_id, COUNT(card_id) AS card_count FROM Customers_Cards GROUP BY customer_id", "source_tables": ["customers_cards"], "error_info": ""}, {"sample_id": 713, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT customer_id, COUNT(*) FROM Customers_cards GROUP BY customer_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT customer_id, COUNT(card_id) AS card_count FROM Customers_Cards GROUP BY customer_id ORDER BY card_count DESC LIMIT 1", "source_tables": ["customers_cards"], "error_info": ""}, {"sample_id": 714, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT customer_id, COUNT(*) FROM Customers_cards GROUP BY customer_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT customer_id, COUNT(card_id) AS number_of_cards FROM Customers_Cards GROUP BY customer_id ORDER BY number_of_cards DESC LIMIT 1", "source_tables": ["customers_cards"], "error_info": ""}, {"sample_id": 715, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING COUNT(*) >= 2", "pred_sql": "SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM Customers AS c JOIN Customers_Cards AS cc ON c.customer_id = cc.customer_id GROUP BY c.customer_id HAVING COUNT(cc.card_id) >= 2", "source_tables": ["customers", "customers_cards"], "error_info": ""}, {"sample_id": 716, "db_id": "customers_card_transactions", "score": 0, "gold_sql": "SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING COUNT(*) >= 2", "pred_sql": "SELECT c.customer_id, c.customer_first_name || ' ' || c.customer_last_name AS full_name FROM Customers AS c JOIN Customers_Cards AS cc ON c.customer_id = cc.customer_id GROUP BY c.customer_id HAVING COUNT(cc.card_id) >= 2", "source_tables": ["customers", "customers_cards"], "error_info": "Result not equal"}, {"sample_id": 717, "db_id": "customers_card_transactions", "score": 0, "gold_sql": "SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) ASC LIMIT 1", "pred_sql": "SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM Customers AS c LEFT JOIN Accounts AS a ON c.customer_id = a.customer_id GROUP BY c.customer_id ORDER BY COUNT(a.account_id) ASC LIMIT 1", "source_tables": ["customers", "customers_cards"], "error_info": "Result not equal"}, {"sample_id": 718, "db_id": "customers_card_transactions", "score": 0, "gold_sql": "SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) ASC LIMIT 1", "pred_sql": "SELECT c.customer_id, c.customer_first_name || ' ' || c.customer_last_name AS full_name FROM Customers AS c JOIN Accounts AS a ON c.customer_id = a.customer_id GROUP BY c.customer_id ORDER BY COUNT(a.account_id) ASC LIMIT 1", "source_tables": ["customers", "customers_cards"], "error_info": "Result not equal"}, {"sample_id": 719, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT card_type_code, COUNT(*) FROM Customers_cards GROUP BY card_type_code", "pred_sql": "SELECT card_type_code, COUNT(card_id) AS number_of_cards FROM Customers_Cards GROUP BY card_type_code", "source_tables": ["customers_cards"], "error_info": ""}, {"sample_id": 720, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT card_type_code, COUNT(*) FROM Customers_cards GROUP BY card_type_code", "pred_sql": "SELECT card_type_code, COUNT(card_id) AS card_count FROM Customers_Cards GROUP BY card_type_code", "source_tables": ["customers_cards"], "error_info": ""}, {"sample_id": 721, "db_id": "customers_card_transactions", "score": 0, "gold_sql": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT card_type_code, COUNT(card_id) AS card_count FROM Customers_Cards GROUP BY card_type_code ORDER BY card_count DESC LIMIT 1", "source_tables": ["customers_cards"], "error_info": "Result not equal"}, {"sample_id": 722, "db_id": "customers_card_transactions", "score": 0, "gold_sql": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT card_type_code, COUNT(card_type_code) AS type_count FROM Customers_Cards GROUP BY card_type_code ORDER BY type_count DESC LIMIT 1", "source_tables": ["customers_cards"], "error_info": "Result not equal"}, {"sample_id": 723, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING COUNT(*) >= 5", "pred_sql": "SELECT card_type_code FROM Customers_Cards GROUP BY card_type_code HAVING COUNT(card_id) >= 5", "source_tables": ["customers_cards"], "error_info": ""}, {"sample_id": 724, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING COUNT(*) >= 5", "pred_sql": "SELECT card_type_code FROM Customers_Cards GROUP BY card_type_code HAVING COUNT(card_id) >= 5", "source_tables": ["customers_cards"], "error_info": ""}, {"sample_id": 725, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT card_type_code, COUNT(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code", "pred_sql": "SELECT card_type_code, COUNT(DISTINCT customer_id) AS number_of_customers FROM Customers_Cards GROUP BY card_type_code", "source_tables": ["customers_cards"], "error_info": ""}, {"sample_id": 726, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT card_type_code, COUNT(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code", "pred_sql": "SELECT card_type_code, COUNT(DISTINCT customer_id) AS customer_count FROM Customers_Cards GROUP BY card_type_code", "source_tables": ["customers_cards"], "error_info": ""}, {"sample_id": 727, "db_id": "customers_card_transactions", "score": 0, "gold_sql": "SELECT customer_id, customer_first_name FROM Customers EXCEPT SELECT T1.customer_id, T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE card_type_code = 'Credit'", "pred_sql": "SELECT DISTINCT c.customer_id, c.customer_first_name FROM Customers AS c LEFT JOIN Customers_Cards AS cc ON c.customer_id = cc.customer_id AND cc.card_type_code = 'credit' WHERE cc.card_id IS NULL", "source_tables": ["customers", "customers_cards"], "error_info": "Result not equal"}, {"sample_id": 728, "db_id": "customers_card_transactions", "score": 0, "gold_sql": "SELECT customer_id, customer_first_name FROM Customers EXCEPT SELECT T1.customer_id, T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE card_type_code = 'Credit'", "pred_sql": "SELECT Customers.customer_id, Customers.customer_first_name FROM Customers WHERE NOT Customers.customer_id IN (SELECT Customers_Cards.customer_id FROM Customers_Cards WHERE Customers_Cards.card_type_code = 'credit')", "source_tables": ["customers", "customers_cards"], "error_info": "Result not equal"}, {"sample_id": 729, "db_id": "customers_card_transactions", "score": 0, "gold_sql": "SELECT DISTINCT card_type_code FROM Customers_Cards", "pred_sql": "SELECT card_type_code FROM Customers_Cards", "source_tables": ["customers_cards"], "error_info": "Result not equal"}, {"sample_id": 730, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT DISTINCT card_type_code FROM Customers_Cards", "pred_sql": "SELECT DISTINCT card_type_code FROM Customers_Cards", "source_tables": ["customers_cards"], "error_info": ""}, {"sample_id": 731, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT card_type_code) FROM Customers_Cards", "pred_sql": "SELECT COUNT(DISTINCT card_type_code) AS number_of_card_types FROM Customers_Cards", "source_tables": ["customers_cards"], "error_info": ""}, {"sample_id": 732, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT card_type_code) FROM Customers_Cards", "pred_sql": "SELECT COUNT(DISTINCT card_type_code) AS different_card_types FROM Customers_Cards", "source_tables": ["customers_cards"], "error_info": ""}, {"sample_id": 733, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT DISTINCT transaction_type FROM Financial_Transactions", "pred_sql": "SELECT DISTINCT transaction_type FROM Financial_Transactions", "source_tables": ["financial_transactions"], "error_info": ""}, {"sample_id": 734, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT DISTINCT transaction_type FROM Financial_Transactions", "pred_sql": "SELECT DISTINCT transaction_type FROM Financial_Transactions", "source_tables": ["financial_transactions"], "error_info": ""}, {"sample_id": 735, "db_id": "customers_card_transactions", "score": 0, "gold_sql": "SELECT COUNT(DISTINCT transaction_type) FROM Financial_Transactions", "pred_sql": "SELECT transaction_type, COUNT(*) AS transaction_count FROM Financial_Transactions GROUP BY transaction_type", "source_tables": ["financial_transactions"], "error_info": "Result not equal"}, {"sample_id": 736, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT transaction_type) FROM Financial_Transactions", "pred_sql": "SELECT COUNT(DISTINCT transaction_type) AS different_transaction_types FROM Financial_Transactions", "source_tables": ["financial_transactions"], "error_info": ""}, {"sample_id": 737, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT AVG(transaction_amount), SUM(transaction_amount) FROM Financial_transactions", "pred_sql": "SELECT AVG(transaction_amount) AS average_transaction_amount, SUM(transaction_amount) AS total_transaction_amount FROM Financial_Transactions", "source_tables": ["financial_transactions"], "error_info": ""}, {"sample_id": 738, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT AVG(transaction_amount), SUM(transaction_amount) FROM Financial_transactions", "pred_sql": "SELECT AVG(transaction_amount) AS average_transaction_amount, SUM(transaction_amount) AS total_transaction_amount FROM Financial_Transactions", "source_tables": ["financial_transactions"], "error_info": ""}, {"sample_id": 739, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT T2.card_type_code, COUNT(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id GROUP BY T2.card_type_code", "pred_sql": "SELECT cc.card_type_code, COUNT(ft.transaction_id) AS transaction_count FROM Customers_Cards AS cc LEFT JOIN Financial_Transactions AS ft ON cc.card_id = ft.card_id GROUP BY cc.card_type_code", "source_tables": ["customers_cards", "financial_transactions"], "error_info": ""}, {"sample_id": 740, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT T2.card_type_code, COUNT(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id GROUP BY T2.card_type_code", "pred_sql": "SELECT cc.card_type_code, COUNT(ft.transaction_id) AS transaction_count FROM Customers_Cards AS cc LEFT JOIN Financial_Transactions AS ft ON cc.card_id = ft.card_id GROUP BY cc.card_type_code", "source_tables": ["customers_cards", "financial_transactions"], "error_info": ""}, {"sample_id": 741, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT transaction_type, COUNT(*) FROM Financial_transactions GROUP BY transaction_type", "pred_sql": "SELECT transaction_type, COUNT(*) AS number_of_transactions FROM Financial_Transactions GROUP BY transaction_type", "source_tables": ["financial_transactions"], "error_info": ""}, {"sample_id": 742, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT transaction_type, COUNT(*) FROM Financial_transactions GROUP BY transaction_type", "pred_sql": "SELECT transaction_type, COUNT(*) AS transaction_count FROM Financial_Transactions GROUP BY transaction_type", "source_tables": ["financial_transactions"], "error_info": ""}, {"sample_id": 743, "db_id": "customers_card_transactions", "score": 0, "gold_sql": "SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY SUM(transaction_amount) DESC LIMIT 1", "pred_sql": "SELECT transaction_type, SUM(transaction_amount) AS total_amount FROM Financial_Transactions GROUP BY transaction_type ORDER BY total_amount DESC LIMIT 1", "source_tables": ["financial_transactions"], "error_info": "Result not equal"}, {"sample_id": 744, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY SUM(transaction_amount) DESC LIMIT 1", "pred_sql": "SELECT transaction_type FROM Financial_Transactions GROUP BY transaction_type ORDER BY SUM(transaction_amount) DESC LIMIT 1", "source_tables": ["financial_transactions"], "error_info": ""}, {"sample_id": 745, "db_id": "customers_card_transactions", "score": 0, "gold_sql": "SELECT account_id, COUNT(*) FROM Financial_transactions GROUP BY account_id", "pred_sql": "SELECT Accounts.account_id, COUNT(Financial_Transactions.transaction_id) AS transaction_count FROM Accounts LEFT JOIN Financial_Transactions ON Accounts.account_id = Financial_Transactions.account_id GROUP BY Accounts.account_id", "source_tables": ["financial_transactions"], "error_info": "Result not equal"}, {"sample_id": 746, "db_id": "customers_card_transactions", "score": 1, "gold_sql": "SELECT account_id, COUNT(*) FROM Financial_transactions GROUP BY account_id", "pred_sql": "SELECT account_id, COUNT(transaction_id) AS transaction_count FROM Financial_Transactions GROUP BY account_id", "source_tables": ["financial_transactions"], "error_info": ""}, {"sample_id": 747, "db_id": "race_track", "score": 1, "gold_sql": "SELECT COUNT(*) FROM track", "pred_sql": "SELECT COUNT(*) AS total_tracks FROM track", "source_tables": ["track"], "error_info": ""}, {"sample_id": 748, "db_id": "race_track", "score": 1, "gold_sql": "SELECT COUNT(*) FROM track", "pred_sql": "SELECT COUNT(*) AS track_count FROM track", "source_tables": ["track"], "error_info": ""}, {"sample_id": 749, "db_id": "race_track", "score": 1, "gold_sql": "SELECT name, LOCATION FROM track", "pred_sql": "SELECT Name, Location FROM track", "source_tables": ["track"], "error_info": ""}, {"sample_id": 750, "db_id": "race_track", "score": 1, "gold_sql": "SELECT name, LOCATION FROM track", "pred_sql": "SELECT Name, Location FROM track", "source_tables": ["track"], "error_info": ""}, {"sample_id": 751, "db_id": "race_track", "score": 1, "gold_sql": "SELECT name, seating FROM track WHERE year_opened > 2000 ORDER BY seating", "pred_sql": "SELECT Name, Seating FROM track WHERE Year_Opened > 2000 ORDER BY Seating", "source_tables": ["track"], "error_info": ""}, {"sample_id": 752, "db_id": "race_track", "score": 1, "gold_sql": "SELECT name, seating FROM track WHERE year_opened > 2000 ORDER BY seating", "pred_sql": "SELECT Name, Seating FROM track WHERE Year_Opened > 2000 ORDER BY Seating", "source_tables": ["track"], "error_info": ""}, {"sample_id": 753, "db_id": "race_track", "score": 1, "gold_sql": "SELECT name, LOCATION, seating FROM track ORDER BY year_opened DESC LIMIT 1", "pred_sql": "SELECT Name, Location, Seating FROM track ORDER BY Year_Opened DESC LIMIT 1", "source_tables": ["track"], "error_info": ""}, {"sample_id": 754, "db_id": "race_track", "score": 0, "gold_sql": "SELECT name, LOCATION, seating FROM track ORDER BY year_opened DESC LIMIT 1", "pred_sql": "SELECT Name, Location, Seating FROM track WHERE Year_Opened = (SELECT MAX(Year_Opened) FROM track)", "source_tables": ["track"], "error_info": "Result not equal"}, {"sample_id": 755, "db_id": "race_track", "score": 1, "gold_sql": "SELECT MIN(seating), MAX(seating), AVG(seating) FROM track", "pred_sql": "SELECT MIN(Seating) AS Min_Seating, MAX(Seating) AS Max_Seating, AVG(Seating) AS Avg_Seating FROM track", "source_tables": ["track"], "error_info": ""}, {"sample_id": 756, "db_id": "race_track", "score": 1, "gold_sql": "SELECT MIN(seating), MAX(seating), AVG(seating) FROM track", "pred_sql": "SELECT MIN(Seating) AS Min_Seating, MAX(Seating) AS Max_Seating, AVG(Seating) AS Avg_Seating FROM track", "source_tables": ["track"], "error_info": ""}, {"sample_id": 757, "db_id": "race_track", "score": 1, "gold_sql": "SELECT name, LOCATION, year_opened FROM track WHERE seating > (SELECT AVG(seating) FROM track)", "pred_sql": "SELECT Name, Location, Year_Opened FROM track WHERE Seating > (SELECT AVG(Seating) FROM track)", "source_tables": ["track"], "error_info": ""}, {"sample_id": 758, "db_id": "race_track", "score": 1, "gold_sql": "SELECT name, LOCATION, year_opened FROM track WHERE seating > (SELECT AVG(seating) FROM track)", "pred_sql": "SELECT track.Name, track.Location, track.Year_Opened FROM track WHERE track.Seating > (SELECT AVG(Seating) FROM track)", "source_tables": ["track"], "error_info": ""}, {"sample_id": 759, "db_id": "race_track", "score": 1, "gold_sql": "SELECT DISTINCT LOCATION FROM track", "pred_sql": "SELECT DISTINCT Location FROM track", "source_tables": ["track"], "error_info": ""}, {"sample_id": 760, "db_id": "race_track", "score": 1, "gold_sql": "SELECT DISTINCT LOCATION FROM track", "pred_sql": "SELECT DISTINCT Location FROM track", "source_tables": ["track"], "error_info": ""}, {"sample_id": 761, "db_id": "race_track", "score": 1, "gold_sql": "SELECT COUNT(*) FROM race", "pred_sql": "SELECT COUNT(*) AS total_races FROM race", "source_tables": ["race"], "error_info": ""}, {"sample_id": 762, "db_id": "race_track", "score": 1, "gold_sql": "SELECT COUNT(*) FROM race", "pred_sql": "SELECT COUNT(*) AS NumberOfRaces FROM race", "source_tables": ["race"], "error_info": ""}, {"sample_id": 763, "db_id": "race_track", "score": 1, "gold_sql": "SELECT DISTINCT CLASS FROM race", "pred_sql": "SELECT DISTINCT Class FROM race", "source_tables": ["race"], "error_info": ""}, {"sample_id": 764, "db_id": "race_track", "score": 1, "gold_sql": "SELECT DISTINCT CLASS FROM race", "pred_sql": "SELECT DISTINCT Class FROM race", "source_tables": ["race"], "error_info": ""}, {"sample_id": 765, "db_id": "race_track", "score": 1, "gold_sql": "SELECT name, CLASS, date FROM race", "pred_sql": "SELECT Name, Class, Date FROM race", "source_tables": ["race"], "error_info": ""}, {"sample_id": 766, "db_id": "race_track", "score": 1, "gold_sql": "SELECT name, CLASS, date FROM race", "pred_sql": "SELECT Name, Class, Date FROM race", "source_tables": ["race"], "error_info": ""}, {"sample_id": 767, "db_id": "race_track", "score": 1, "gold_sql": "SELECT CLASS, COUNT(*) FROM race GROUP BY CLASS", "pred_sql": "SELECT Class, COUNT(*) AS Number_of_Races FROM race GROUP BY Class", "source_tables": ["race"], "error_info": ""}, {"sample_id": 768, "db_id": "race_track", "score": 1, "gold_sql": "SELECT CLASS, COUNT(*) FROM race GROUP BY CLASS", "pred_sql": "SELECT Class, COUNT(*) AS Race_Count FROM race GROUP BY Class", "source_tables": ["race"], "error_info": ""}, {"sample_id": 769, "db_id": "race_track", "score": 0, "gold_sql": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Class, COUNT(*) AS Race_Count FROM race GROUP BY Class ORDER BY Race_Count DESC LIMIT 1", "source_tables": ["race"], "error_info": "Result not equal"}, {"sample_id": 770, "db_id": "race_track", "score": 0, "gold_sql": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Class, COUNT(*) AS Count FROM race GROUP BY Class ORDER BY Count DESC LIMIT 1", "source_tables": ["race"], "error_info": "Result not equal"}, {"sample_id": 771, "db_id": "race_track", "score": 1, "gold_sql": "SELECT CLASS FROM race GROUP BY CLASS HAVING COUNT(*) >= 2", "pred_sql": "SELECT Class FROM race GROUP BY Class HAVING COUNT(Race_ID) >= 2", "source_tables": ["race"], "error_info": ""}, {"sample_id": 772, "db_id": "race_track", "score": 1, "gold_sql": "SELECT CLASS FROM race GROUP BY CLASS HAVING COUNT(*) >= 2", "pred_sql": "SELECT Class FROM race GROUP BY Class HAVING COUNT(Race_ID) >= 2", "source_tables": ["race"], "error_info": ""}, {"sample_id": 773, "db_id": "race_track", "score": 1, "gold_sql": "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id WHERE T1.class = 'GT'", "pred_sql": "SELECT track.Name FROM track LEFT JOIN race ON track.Track_ID = race.Track_ID AND race.Class = 'GT' WHERE race.Race_ID IS NULL", "source_tables": ["track", "race"], "error_info": ""}, {"sample_id": 774, "db_id": "race_track", "score": 1, "gold_sql": "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id WHERE T1.class = 'GT'", "pred_sql": "SELECT track.Name FROM track LEFT JOIN race ON track.Track_ID = race.Track_ID AND race.Class = 'GT' WHERE race.Race_ID IS NULL", "source_tables": ["track", "race"], "error_info": ""}, {"sample_id": 775, "db_id": "race_track", "score": 1, "gold_sql": "SELECT name FROM track WHERE NOT track_id IN (SELECT track_id FROM race)", "pred_sql": "SELECT track.Name FROM track LEFT JOIN race ON track.Track_ID = race.Track_ID WHERE race.Race_ID IS NULL", "source_tables": ["track", "race"], "error_info": ""}, {"sample_id": 776, "db_id": "race_track", "score": 1, "gold_sql": "SELECT name FROM track WHERE NOT track_id IN (SELECT track_id FROM race)", "pred_sql": "SELECT track.Name FROM track LEFT JOIN race ON track.Track_ID = race.Track_ID WHERE race.Race_ID IS NULL", "source_tables": ["track", "race"], "error_info": ""}, {"sample_id": 777, "db_id": "race_track", "score": 0, "gold_sql": "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000", "pred_sql": "SELECT DISTINCT Year_Opened FROM track WHERE Seating >= 5000 OR Seating <= 4000", "source_tables": ["track"], "error_info": "Result not equal"}, {"sample_id": 778, "db_id": "race_track", "score": 1, "gold_sql": "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000", "pred_sql": "SELECT Year_Opened FROM track WHERE Seating BETWEEN 4000 AND 5000", "source_tables": ["track"], "error_info": ""}, {"sample_id": 779, "db_id": "race_track", "score": 0, "gold_sql": "SELECT T2.name, COUNT(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id", "pred_sql": "SELECT track.Name, COUNT(race.Race_ID) AS Number_of_Races FROM track LEFT JOIN race ON track.Track_ID = race.Track_ID GROUP BY track.Track_ID", "source_tables": ["track", "race"], "error_info": "Result not equal"}, {"sample_id": 780, "db_id": "race_track", "score": 0, "gold_sql": "SELECT T2.name, COUNT(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id", "pred_sql": "SELECT track.Name, COUNT(race.Race_ID) AS Race_Count FROM track LEFT JOIN race ON track.Track_ID = race.Track_ID GROUP BY track.Name", "source_tables": ["track", "race"], "error_info": "Result not equal"}, {"sample_id": 781, "db_id": "race_track", "score": 1, "gold_sql": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT track.Name FROM track JOIN race ON track.Track_ID = race.Track_ID GROUP BY track.Track_ID ORDER BY COUNT(race.Race_ID) DESC LIMIT 1", "source_tables": ["track", "race"], "error_info": ""}, {"sample_id": 782, "db_id": "race_track", "score": 1, "gold_sql": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT track.Name FROM track JOIN race ON track.Track_ID = race.Track_ID GROUP BY track.Track_ID ORDER BY COUNT(race.Race_ID) DESC LIMIT 1", "source_tables": ["track", "race"], "error_info": ""}, {"sample_id": 783, "db_id": "race_track", "score": 1, "gold_sql": "SELECT T1.name, T1.date, T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id", "pred_sql": "SELECT race.Name AS Race_Name, race.Date AS Race_Date, track.Name AS Track_Name FROM race JOIN track ON race.Track_ID = track.Track_ID", "source_tables": ["track", "race"], "error_info": ""}, {"sample_id": 784, "db_id": "race_track", "score": 1, "gold_sql": "SELECT T1.name, T1.date, T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id", "pred_sql": "SELECT race.Name AS Race_Name, race.Date AS Race_Date, track.Name AS Track_Name FROM race JOIN track ON race.Track_ID = track.Track_ID", "source_tables": ["track", "race"], "error_info": ""}, {"sample_id": 785, "db_id": "race_track", "score": 1, "gold_sql": "SELECT T2.name, T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id HAVING COUNT(*) = 1", "pred_sql": "SELECT track.Name, track.Location FROM track JOIN race ON track.Track_ID = race.Track_ID GROUP BY track.Track_ID HAVING COUNT(race.Race_ID) = 1", "source_tables": ["track", "race"], "error_info": ""}, {"sample_id": 786, "db_id": "race_track", "score": 1, "gold_sql": "SELECT T2.name, T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id HAVING COUNT(*) = 1", "pred_sql": "SELECT track.Name, track.Location FROM track JOIN race ON track.Track_ID = race.Track_ID GROUP BY track.Track_ID HAVING COUNT(race.Race_ID) = 1", "source_tables": ["track", "race"], "error_info": ""}, {"sample_id": 787, "db_id": "race_track", "score": 1, "gold_sql": "SELECT LOCATION FROM track WHERE seating > 90000 INTERSECT SELECT LOCATION FROM track WHERE seating < 70000", "pred_sql": "SELECT DISTINCT t1.Location FROM track AS t1 JOIN track AS t2 ON t1.Location = t2.Location WHERE t1.Seating > 90000 AND t2.Seating < 70000", "source_tables": ["track"], "error_info": ""}, {"sample_id": 788, "db_id": "race_track", "score": 1, "gold_sql": "SELECT LOCATION FROM track WHERE seating > 90000 INTERSECT SELECT LOCATION FROM track WHERE seating < 70000", "pred_sql": "SELECT DISTINCT t1.Location FROM track AS t1 JOIN track AS t2 ON t1.Location = t2.Location WHERE t1.Seating > 90000 AND t2.Seating < 70000", "source_tables": ["track"], "error_info": ""}, {"sample_id": 789, "db_id": "coffee_shop", "score": 0, "gold_sql": "SELECT COUNT(*) FROM member WHERE Membership_card = 'Black'", "pred_sql": "SELECT COUNT(*) AS num_members FROM member WHERE Membership_card = 'black'", "source_tables": ["member"], "error_info": "Result not equal"}, {"sample_id": 790, "db_id": "coffee_shop", "score": 1, "gold_sql": "SELECT COUNT(*), address FROM member GROUP BY address", "pred_sql": "SELECT Address, COUNT(Member_ID) AS Number_of_Members FROM member GROUP BY Address", "source_tables": ["member"], "error_info": ""}, {"sample_id": 791, "db_id": "coffee_shop", "score": 1, "gold_sql": "SELECT name FROM member WHERE address = 'Harford' OR address = 'Waterbury'", "pred_sql": "SELECT Name FROM member WHERE Address IN ('Harford', 'Waterbury')", "source_tables": ["member"], "error_info": ""}, {"sample_id": 792, "db_id": "coffee_shop", "score": 0, "gold_sql": "SELECT name, member_id FROM member WHERE Membership_card = 'Black' OR age < 30", "pred_sql": "SELECT Member_ID, Name FROM member WHERE Age < 30 OR Level_of_membership = 'black'", "source_tables": ["member"], "error_info": "Result not equal"}, {"sample_id": 793, "db_id": "coffee_shop", "score": 1, "gold_sql": "SELECT Time_of_purchase, age, address FROM member ORDER BY Time_of_purchase", "pred_sql": "SELECT Time_of_purchase, Age, Address FROM member ORDER BY Time_of_purchase", "source_tables": ["member"], "error_info": ""}, {"sample_id": 794, "db_id": "coffee_shop", "score": 0, "gold_sql": "SELECT Membership_card FROM member GROUP BY Membership_card HAVING COUNT(*) > 5", "pred_sql": "SELECT Membership_card, COUNT(Member_ID) AS Member_Count FROM member GROUP BY Membership_card HAVING COUNT(Member_ID) > 5", "source_tables": ["member"], "error_info": "Result not equal"}, {"sample_id": 795, "db_id": "coffee_shop", "score": 1, "gold_sql": "SELECT address FROM member WHERE age < 30 INTERSECT SELECT address FROM member WHERE age > 40", "pred_sql": "SELECT DISTINCT m1.Address FROM member AS m1 WHERE m1.Age < 30 AND m1.Address IN (SELECT m2.Address FROM member AS m2 WHERE m2.Age > 40)", "source_tables": ["member"], "error_info": ""}, {"sample_id": 796, "db_id": "coffee_shop", "score": 1, "gold_sql": "SELECT membership_card FROM member WHERE address = 'Hartford' INTERSECT SELECT membership_card FROM member WHERE address = 'Waterbury'", "pred_sql": "SELECT DISTINCT m1.Membership_card FROM member AS m1 JOIN member AS m2 ON m1.Membership_card = m2.Membership_card WHERE m1.Address = 'Hartford' AND m2.Address = 'Waterbury'", "source_tables": ["member"], "error_info": ""}, {"sample_id": 797, "db_id": "coffee_shop", "score": 1, "gold_sql": "SELECT COUNT(*) FROM member WHERE address <> 'Hartford'", "pred_sql": "SELECT COUNT(*) AS num_members_not_in_hartford FROM member WHERE Address <> 'Hartford'", "source_tables": ["member"], "error_info": ""}, {"sample_id": 798, "db_id": "coffee_shop", "score": 0, "gold_sql": "SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card = 'Black'", "pred_sql": "SELECT shop.Address FROM shop LEFT JOIN member ON member.Address = shop.Address WHERE member.Membership_card <> 'black' OR member.Membership_card IS NULL GROUP BY shop.Address HAVING COUNT(member.Member_ID) = 0", "source_tables": ["member"], "error_info": "Result not equal"}, {"sample_id": 799, "db_id": "coffee_shop", "score": 1, "gold_sql": "SELECT address FROM shop ORDER BY open_year", "pred_sql": "SELECT Address FROM shop ORDER BY Open_Year", "source_tables": ["shop"], "error_info": ""}, {"sample_id": 800, "db_id": "coffee_shop", "score": 1, "gold_sql": "SELECT AVG(num_of_staff), AVG(score) FROM shop", "pred_sql": "SELECT AVG(Score) AS Average_Score, AVG(Num_of_staff) AS Average_Staff_Number FROM shop", "source_tables": ["shop"], "error_info": ""}, {"sample_id": 801, "db_id": "coffee_shop", "score": 1, "gold_sql": "SELECT shop_id, address FROM shop WHERE score < (SELECT AVG(score) FROM shop)", "pred_sql": "SELECT Shop_ID, Address FROM shop WHERE Score < (SELECT AVG(Score) FROM shop)", "source_tables": ["shop"], "error_info": ""}, {"sample_id": 802, "db_id": "coffee_shop", "score": 1, "gold_sql": "SELECT address, num_of_staff FROM shop WHERE NOT shop_id IN (SELECT shop_id FROM happy_hour)", "pred_sql": "SELECT Address, Num_of_staff FROM shop WHERE NOT Shop_ID IN (SELECT Shop_ID FROM happy_hour)", "source_tables": ["shop", "happy_hour"], "error_info": ""}, {"sample_id": 803, "db_id": "coffee_shop", "score": 1, "gold_sql": "SELECT t1.address, t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id = t2.shop_id WHERE MONTH = 'May'", "pred_sql": "SELECT shop.Shop_ID, shop.Address FROM shop JOIN happy_hour ON shop.Shop_ID = happy_hour.Shop_ID WHERE happy_hour.Month = 'May'", "source_tables": ["shop", "happy_hour"], "error_info": ""}, {"sample_id": 804, "db_id": "coffee_shop", "score": 1, "gold_sql": "SELECT shop_id, COUNT(*) FROM happy_hour GROUP BY shop_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Shop_ID, COUNT(HH_ID) AS Num_of_Happy_Hours FROM happy_hour GROUP BY Shop_ID ORDER BY Num_of_Happy_Hours DESC LIMIT 1", "source_tables": ["happy_hour"], "error_info": ""}, {"sample_id": 805, "db_id": "coffee_shop", "score": 0, "gold_sql": "SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Month, COUNT(HH_ID) AS Happy_Hour_Count FROM happy_hour GROUP BY Month ORDER BY Happy_Hour_Count DESC LIMIT 1", "source_tables": ["happy_hour"], "error_info": "Result not equal"}, {"sample_id": 806, "db_id": "coffee_shop", "score": 1, "gold_sql": "SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING COUNT(*) > 2", "pred_sql": "SELECT Month FROM happy_hour GROUP BY Month HAVING COUNT(HH_ID) > 2", "source_tables": ["happy_hour"], "error_info": ""}, {"sample_id": 807, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM ALBUM", "pred_sql": "SELECT COUNT(*) AS AlbumCount FROM Album", "source_tables": ["album"], "error_info": ""}, {"sample_id": 808, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM ALBUM", "pred_sql": "SELECT COUNT(*) AS NumberOfAlbums FROM Album", "source_tables": ["album"], "error_info": ""}, {"sample_id": 809, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT Name FROM GENRE", "pred_sql": "SELECT Name FROM Genre", "source_tables": ["genre"], "error_info": ""}, {"sample_id": 810, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT Name FROM GENRE", "pred_sql": "SELECT DISTINCT Name FROM Genre", "source_tables": ["genre"], "error_info": ""}, {"sample_id": 811, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT * FROM CUSTOMER WHERE State = 'NY'", "pred_sql": "SELECT * FROM Customer WHERE State = 'NY'", "source_tables": ["customer"], "error_info": ""}, {"sample_id": 812, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT * FROM CUSTOMER WHERE State = 'NY'", "pred_sql": "SELECT * FROM Customer WHERE State = 'NY'", "source_tables": ["customer"], "error_info": ""}, {"sample_id": 813, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT FirstName, LastName FROM EMPLOYEE WHERE City = 'Calgary'", "pred_sql": "SELECT FirstName, LastName FROM Employee WHERE City = 'Calgary'", "source_tables": ["employee"], "error_info": ""}, {"sample_id": 814, "db_id": "chinook_1", "score": 0, "gold_sql": "SELECT FirstName, LastName FROM EMPLOYEE WHERE City = 'Calgary'", "pred_sql": "SELECT FirstName || ' ' || LastName AS FullName FROM Employee WHERE City = 'Calgary'", "source_tables": ["employee"], "error_info": "Result not equal"}, {"sample_id": 815, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT DISTINCT (BillingCountry) FROM INVOICE", "pred_sql": "SELECT DISTINCT BillingCountry FROM Invoice", "source_tables": ["invoice"], "error_info": ""}, {"sample_id": 816, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT DISTINCT (BillingCountry) FROM INVOICE", "pred_sql": "SELECT DISTINCT BillingCountry FROM Invoice", "source_tables": ["invoice"], "error_info": ""}, {"sample_id": 817, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT Name FROM ARTIST WHERE Name LIKE '%a%'", "pred_sql": "SELECT Name FROM Artist WHERE Name LIKE '%a%'", "source_tables": ["artist"], "error_info": ""}, {"sample_id": 818, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT Name FROM ARTIST WHERE Name LIKE '%a%'", "pred_sql": "SELECT Name FROM Artist WHERE Name LIKE '%a%'", "source_tables": ["artist"], "error_info": ""}, {"sample_id": 819, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = 'AC/DC'", "pred_sql": "SELECT Album.Title FROM Album JOIN Artist ON Album.ArtistId = Artist.ArtistId WHERE Artist.Name = 'AC/DC'", "source_tables": ["artist", "album"], "error_info": ""}, {"sample_id": 820, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = 'AC/DC'", "pred_sql": "SELECT Album.Title FROM Album JOIN Artist ON Album.ArtistId = Artist.ArtistId WHERE Artist.Name = 'AC/DC'", "source_tables": ["artist", "album"], "error_info": ""}, {"sample_id": 821, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = 'Metallica'", "pred_sql": "SELECT COUNT(*) AS AlbumCount FROM Album WHERE ArtistId = (SELECT ArtistId FROM Artist WHERE Name = 'Metallica')", "source_tables": ["artist", "album"], "error_info": ""}, {"sample_id": 822, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = 'Metallica'", "pred_sql": "SELECT COUNT(*) AS AlbumCount FROM Album WHERE ArtistId = (SELECT ArtistId FROM Artist WHERE Name = 'Metallica')", "source_tables": ["artist", "album"], "error_info": ""}, {"sample_id": 823, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T1.Title = 'Balls to the Wall'", "pred_sql": "SELECT Artist.Name FROM Album JOIN Artist ON Album.ArtistId = Artist.ArtistId WHERE Album.Title = 'Balls to the Wall'", "source_tables": ["artist", "album"], "error_info": ""}, {"sample_id": 824, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T1.Title = 'Balls to the Wall'", "pred_sql": "SELECT Artist.Name FROM Artist JOIN Album ON Artist.ArtistId = Album.ArtistId WHERE Album.Title = 'Balls to the Wall'", "source_tables": ["artist", "album"], "error_info": ""}, {"sample_id": 825, "db_id": "chinook_1", "score": 0, "gold_sql": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Artist.Name, COUNT(Album.AlbumId) AS AlbumCount FROM Artist JOIN Album ON Artist.ArtistId = Album.ArtistId GROUP BY Artist.ArtistId ORDER BY AlbumCount DESC LIMIT 1", "source_tables": ["artist", "album"], "error_info": "Result not equal"}, {"sample_id": 826, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Artist.Name FROM Artist JOIN Album ON Artist.ArtistId = Album.ArtistId GROUP BY Artist.ArtistId ORDER BY COUNT(Album.AlbumId) DESC LIMIT 1", "source_tables": ["artist", "album"], "error_info": ""}, {"sample_id": 827, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'", "pred_sql": "SELECT Name FROM Track WHERE Name LIKE '%you%'", "source_tables": ["track"], "error_info": ""}, {"sample_id": 828, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'", "pred_sql": "SELECT Name FROM Track WHERE Name LIKE '%you%'", "source_tables": ["track"], "error_info": ""}, {"sample_id": 829, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT AVG(UnitPrice) FROM TRACK", "pred_sql": "SELECT AVG(UnitPrice) AS AverageUnitPrice FROM Track", "source_tables": ["track"], "error_info": ""}, {"sample_id": 830, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT AVG(UnitPrice) FROM TRACK", "pred_sql": "SELECT AVG(UnitPrice) AS AverageUnitPrice FROM Track", "source_tables": ["track"], "error_info": ""}, {"sample_id": 831, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT MAX(Milliseconds), MIN(Milliseconds) FROM TRACK", "pred_sql": "SELECT MAX(Milliseconds) AS LongestTrackDuration, MIN(Milliseconds) AS ShortestTrackDuration FROM Track", "source_tables": ["track"], "error_info": ""}, {"sample_id": 832, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT MAX(Milliseconds), MIN(Milliseconds) FROM TRACK", "pred_sql": "SELECT MAX(Milliseconds) AS MaxDuration, MIN(Milliseconds) AS MinDuration FROM Track", "source_tables": ["track"], "error_info": ""}, {"sample_id": 833, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT T1.Title, T2.AlbumID, COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId GROUP BY T2.AlbumID", "pred_sql": "SELECT Album.AlbumId, Album.Title, COUNT(Track.TrackId) AS NumberOfTracks FROM Album LEFT JOIN Track ON Album.AlbumId = Track.AlbumId GROUP BY Album.AlbumId, Album.Title", "source_tables": ["track", "album"], "error_info": ""}, {"sample_id": 834, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT T1.Title, T2.AlbumID, COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId GROUP BY T2.AlbumID", "pred_sql": "SELECT Album.AlbumId, Album.Title, COUNT(Track.TrackId) AS TrackCount FROM Album LEFT JOIN Track ON Album.AlbumId = Track.AlbumId GROUP BY Album.AlbumId, Album.Title", "source_tables": ["track", "album"], "error_info": ""}, {"sample_id": 835, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT g.Name FROM Genre AS g JOIN Track AS t ON g.GenreId = t.GenreId GROUP BY g.Name ORDER BY COUNT(t.TrackId) DESC LIMIT 1", "source_tables": ["genre", "track"], "error_info": ""}, {"sample_id": 836, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT g.Name FROM Genre AS g JOIN Track AS t ON g.GenreId = t.GenreId GROUP BY g.GenreId ORDER BY COUNT(t.TrackId) DESC LIMIT 1", "source_tables": ["genre", "track"], "error_info": ""}, {"sample_id": 837, "db_id": "chinook_1", "score": 0, "gold_sql": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1", "pred_sql": "SELECT MediaType.Name, COUNT(Track.TrackId) AS TrackCount FROM Track JOIN MediaType ON Track.MediaTypeId = MediaType.MediaTypeId GROUP BY MediaType.Name ORDER BY TrackCount ASC LIMIT 1", "source_tables": ["mediatype", "track"], "error_info": "Result not equal"}, {"sample_id": 838, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1", "pred_sql": "SELECT MediaType.Name FROM MediaType JOIN Track ON MediaType.MediaTypeId = Track.MediaTypeId GROUP BY MediaType.MediaTypeId ORDER BY COUNT(Track.TrackId) ASC LIMIT 1", "source_tables": ["mediatype", "track"], "error_info": ""}, {"sample_id": 839, "db_id": "chinook_1", "score": 0, "gold_sql": "SELECT T1.Title, T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 GROUP BY T2.AlbumID", "pred_sql": "SELECT Album.AlbumId, Album.Title FROM Album JOIN Track ON Album.AlbumId = Track.AlbumId WHERE Track.UnitPrice > 1", "source_tables": ["track", "album"], "error_info": "Result not equal"}, {"sample_id": 840, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT T1.Title, T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 GROUP BY T2.AlbumID", "pred_sql": "SELECT DISTINCT Album.AlbumId, Album.Title FROM Album JOIN Track ON Album.AlbumId = Track.AlbumId WHERE Track.UnitPrice > 1", "source_tables": ["track", "album"], "error_info": ""}, {"sample_id": 841, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = 'Rock'", "pred_sql": "SELECT COUNT(*) AS TrackCount FROM Track WHERE GenreId = (SELECT GenreId FROM Genre WHERE Name = 'Rock')", "source_tables": ["genre", "track"], "error_info": ""}, {"sample_id": 842, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = 'Rock'", "pred_sql": "SELECT COUNT(*) AS TrackCount FROM Track WHERE GenreId = (SELECT GenreId FROM Genre WHERE Name = 'Rock')", "source_tables": ["genre", "track"], "error_info": ""}, {"sample_id": 843, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = 'Jazz'", "pred_sql": "SELECT AVG(UnitPrice) AS AverageUnitPrice FROM Track WHERE GenreId = (SELECT GenreId FROM Genre WHERE Name = 'Jazz')", "source_tables": ["genre", "track"], "error_info": ""}, {"sample_id": 844, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = 'Jazz'", "pred_sql": "SELECT AVG(UnitPrice) AS AverageUnitPrice FROM Track WHERE GenreId = (SELECT GenreId FROM Genre WHERE Name = 'Jazz')", "source_tables": ["genre", "track"], "error_info": ""}, {"sample_id": 845, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT FirstName, LastName FROM CUSTOMER WHERE Email = 'luisg@embraer.com.br'", "pred_sql": "SELECT FirstName, LastName FROM Customer WHERE Email = 'luisg@embraer.com.br'", "source_tables": ["customer"], "error_info": ""}, {"sample_id": 846, "db_id": "chinook_1", "score": 0, "gold_sql": "SELECT FirstName, LastName FROM CUSTOMER WHERE Email = 'luisg@embraer.com.br'", "pred_sql": "SELECT FirstName || ' ' || LastName AS FullName FROM Customer WHERE Email = 'luisg@embraer.com.br'", "source_tables": ["customer"], "error_info": "Result not equal"}, {"sample_id": 847, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE '%gmail.com%'", "pred_sql": "SELECT COUNT(*) AS CustomerCount FROM Customer WHERE Email LIKE '%gmail.com%'", "source_tables": ["customer"], "error_info": ""}, {"sample_id": 848, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE '%gmail.com%'", "pred_sql": "SELECT COUNT(*) AS CustomerCount FROM Customer WHERE Email LIKE '%gmail.com'", "source_tables": ["customer"], "error_info": ""}, {"sample_id": 849, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT T2.FirstName, T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.FirstName = 'Leonie'", "pred_sql": "SELECT Employee.FirstName, Employee.LastName FROM Customer JOIN Employee ON Customer.SupportRepId = Employee.EmployeeId WHERE Customer.FirstName = 'Leonie'", "source_tables": ["customer", "employee"], "error_info": ""}, {"sample_id": 850, "db_id": "chinook_1", "score": 0, "gold_sql": "SELECT T2.FirstName, T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.FirstName = 'Leonie'", "pred_sql": "SELECT Employee.FirstName || ' ' || Employee.LastName AS FullName FROM Employee JOIN Customer ON Employee.EmployeeId = Customer.SupportRepId WHERE Customer.FirstName = 'Leonie'", "source_tables": ["customer", "employee"], "error_info": "Result not equal"}, {"sample_id": 851, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.PostalCode = '70174'", "pred_sql": "SELECT e.City FROM Employee AS e JOIN Customer AS c ON e.EmployeeId = c.SupportRepId WHERE c.PostalCode = '70174'", "source_tables": ["customer", "employee"], "error_info": ""}, {"sample_id": 852, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.PostalCode = '70174'", "pred_sql": "SELECT DISTINCT Employee.City FROM Employee JOIN Customer ON Employee.EmployeeId = Customer.SupportRepId WHERE Customer.PostalCode = '70174'", "source_tables": ["customer", "employee"], "error_info": ""}, {"sample_id": 853, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT city) FROM EMPLOYEE", "pred_sql": "SELECT COUNT(DISTINCT City) AS DistinctCityCount FROM Employee", "source_tables": ["employee"], "error_info": ""}, {"sample_id": 854, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT city) FROM EMPLOYEE", "pred_sql": "SELECT COUNT(DISTINCT City) AS NumberOfCities FROM Employee", "source_tables": ["employee"], "error_info": ""}, {"sample_id": 855, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.FirstName = 'Astrid' AND LastName = 'Gruber'", "pred_sql": "SELECT Invoice.InvoiceDate FROM Invoice JOIN Customer ON Invoice.CustomerId = Customer.CustomerId WHERE Customer.FirstName = 'Astrid' AND Customer.LastName = 'Gruber'", "source_tables": ["customer", "invoice"], "error_info": ""}, {"sample_id": 856, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.FirstName = 'Astrid' AND LastName = 'Gruber'", "pred_sql": "SELECT Invoice.InvoiceDate FROM Invoice JOIN Customer ON Invoice.CustomerId = Customer.CustomerId WHERE Customer.FirstName = 'Astrid' AND Customer.LastName = 'Gruber'", "source_tables": ["customer", "invoice"], "error_info": ""}, {"sample_id": 857, "db_id": "chinook_1", "score": 0, "gold_sql": "SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId WHERE T2.total > 20", "pred_sql": "SELECT DISTINCT Customer.LastName FROM Customer LEFT JOIN Invoice ON Customer.CustomerId = Invoice.CustomerId GROUP BY Customer.CustomerId HAVING SUM(Invoice.Total) <= 20", "source_tables": ["customer", "invoice"], "error_info": "Result not equal"}, {"sample_id": 858, "db_id": "chinook_1", "score": 0, "gold_sql": "SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId WHERE T2.total > 20", "pred_sql": "SELECT DISTINCT Customer.LastName FROM Customer LEFT JOIN Invoice ON Customer.CustomerId = Invoice.CustomerId GROUP BY Customer.CustomerId HAVING SUM(Invoice.Total) <= 20", "source_tables": ["customer", "invoice"], "error_info": "Result not equal"}, {"sample_id": 859, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.country = 'Brazil'", "pred_sql": "SELECT DISTINCT Customer.FirstName FROM Customer JOIN Invoice ON Customer.CustomerId = Invoice.CustomerId WHERE Customer.Country = 'Brazil'", "source_tables": ["customer", "invoice"], "error_info": ""}, {"sample_id": 860, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.country = 'Brazil'", "pred_sql": "SELECT DISTINCT Customer.FirstName FROM Customer JOIN Invoice ON Customer.CustomerId = Invoice.CustomerId WHERE Customer.Country = 'Brazil'", "source_tables": ["customer", "invoice"], "error_info": ""}, {"sample_id": 861, "db_id": "chinook_1", "score": 0, "gold_sql": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.country = 'Germany'", "pred_sql": "SELECT DISTINCT Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode FROM Customer JOIN Invoice ON Customer.CustomerId = Invoice.CustomerId WHERE Customer.Country = 'Germany'", "source_tables": ["customer", "invoice"], "error_info": "Result not equal"}, {"sample_id": 862, "db_id": "chinook_1", "score": 0, "gold_sql": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.country = 'Germany'", "pred_sql": "SELECT DISTINCT Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode FROM Customer JOIN Invoice ON Customer.CustomerId = Invoice.CustomerId WHERE Customer.Country = 'Germany'", "source_tables": ["customer", "invoice"], "error_info": "Result not equal"}, {"sample_id": 863, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT Phone FROM EMPLOYEE", "pred_sql": "SELECT Phone FROM Employee", "source_tables": ["employee"], "error_info": ""}, {"sample_id": 864, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT Phone FROM EMPLOYEE", "pred_sql": "SELECT Phone FROM Employee", "source_tables": ["employee"], "error_info": ""}, {"sample_id": 865, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId WHERE T1.Name = 'AAC audio file'", "pred_sql": "SELECT COUNT(*) AS TrackCount FROM Track WHERE MediaTypeId = (SELECT MediaTypeId FROM MediaType WHERE Name = 'AAC audio file')", "source_tables": ["mediatype", "track"], "error_info": ""}, {"sample_id": 866, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId WHERE T1.Name = 'AAC audio file'", "pred_sql": "SELECT COUNT(*) AS TrackCount FROM Track INNER JOIN MediaType ON Track.MediaTypeId = MediaType.MediaTypeId WHERE MediaType.Name = 'AAC audio file'", "source_tables": ["mediatype", "track"], "error_info": ""}, {"sample_id": 867, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = 'Latin' OR T1.Name = 'Pop'", "pred_sql": "SELECT AVG(Track.Milliseconds) AS AverageDuration FROM Track JOIN Genre ON Track.GenreId = Genre.GenreId WHERE Genre.Name IN ('Latin', 'Pop')", "source_tables": ["genre", "track"], "error_info": ""}, {"sample_id": 868, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = 'Latin' OR T1.Name = 'Pop'", "pred_sql": "SELECT AVG(Track.Milliseconds) AS AverageLength FROM Track JOIN Genre ON Track.GenreId = Genre.GenreId WHERE Genre.Name IN ('Latin', 'Pop')", "source_tables": ["genre", "track"], "error_info": ""}, {"sample_id": 869, "db_id": "chinook_1", "score": 0, "gold_sql": "SELECT T1.FirstName, T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*) >= 10", "pred_sql": "SELECT e.FirstName, e.EmployeeId FROM Employee AS e JOIN Customer AS c ON e.EmployeeId = c.SupportRepId GROUP BY e.EmployeeId HAVING COUNT(c.CustomerId) >= 10", "source_tables": ["customer", "employee"], "error_info": "Result not equal"}, {"sample_id": 870, "db_id": "chinook_1", "score": 0, "gold_sql": "SELECT T1.FirstName, T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*) >= 10", "pred_sql": "SELECT e.FirstName, e.EmployeeId AS SupportRepId FROM Employee AS e JOIN Customer AS c ON e.EmployeeId = c.SupportRepId GROUP BY e.EmployeeId HAVING COUNT(c.CustomerId) >= 10", "source_tables": ["customer", "employee"], "error_info": "Result not equal"}, {"sample_id": 871, "db_id": "chinook_1", "score": 0, "gold_sql": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*) <= 20", "pred_sql": "SELECT e.LastName FROM Employee AS e JOIN Customer AS c ON e.EmployeeId = c.SupportRepId GROUP BY e.EmployeeId HAVING COUNT(c.CustomerId) <= 20", "source_tables": ["customer", "employee"], "error_info": "Result not equal"}, {"sample_id": 872, "db_id": "chinook_1", "score": 0, "gold_sql": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*) <= 20", "pred_sql": "SELECT e.LastName FROM Employee AS e JOIN Customer AS c ON e.EmployeeId = c.SupportRepId GROUP BY e.EmployeeId HAVING COUNT(c.CustomerId) <= 20", "source_tables": ["customer", "employee"], "error_info": "Result not equal"}, {"sample_id": 873, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT Title FROM ALBUM ORDER BY Title", "pred_sql": "SELECT Title FROM Album ORDER BY Title ASC", "source_tables": ["album"], "error_info": ""}, {"sample_id": 874, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT Title FROM ALBUM ORDER BY Title", "pred_sql": "SELECT Title FROM Album ORDER BY Title ASC", "source_tables": ["album"], "error_info": ""}, {"sample_id": 875, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT T2.Name, T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*) >= 3 ORDER BY T2.Name", "pred_sql": "SELECT a.ArtistId, a.Name FROM Artist AS a JOIN Album AS al ON a.ArtistId = al.ArtistId GROUP BY a.ArtistId, a.Name HAVING COUNT(al.AlbumId) >= 3 ORDER BY a.Name ASC", "source_tables": ["artist", "album"], "error_info": ""}, {"sample_id": 876, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT T2.Name, T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*) >= 3 ORDER BY T2.Name", "pred_sql": "SELECT Artist.Name, Artist.ArtistId FROM Artist JOIN Album ON Artist.ArtistId = Album.ArtistId GROUP BY Artist.ArtistId, Artist.Name HAVING COUNT(Album.AlbumId) >= 3 ORDER BY Artist.Name ASC", "source_tables": ["artist", "album"], "error_info": ""}, {"sample_id": 877, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId", "pred_sql": "SELECT Name FROM Artist WHERE NOT ArtistId IN (SELECT ArtistId FROM Album)", "source_tables": ["artist", "album"], "error_info": ""}, {"sample_id": 878, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId", "pred_sql": "SELECT Name FROM Artist WHERE NOT ArtistId IN (SELECT DISTINCT ArtistId FROM Album)", "source_tables": ["artist", "album"], "error_info": ""}, {"sample_id": 879, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = 'Rock'", "pred_sql": "SELECT AVG(UnitPrice) AS AverageUnitPrice FROM Track WHERE GenreId = (SELECT GenreId FROM Genre WHERE Name = 'Rock')", "source_tables": ["genre", "track"], "error_info": ""}, {"sample_id": 880, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = 'Rock'", "pred_sql": "SELECT AVG(t.UnitPrice) AS AverageUnitPrice FROM Track AS t JOIN Genre AS g ON t.GenreId = g.GenreId WHERE g.Name = 'Rock'", "source_tables": ["genre", "track"], "error_info": ""}, {"sample_id": 881, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT MAX(Milliseconds), MIN(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = 'Pop'", "pred_sql": "SELECT MAX(Milliseconds) AS LongestDuration, MIN(Milliseconds) AS ShortestDuration FROM Track WHERE GenreId = (SELECT GenreId FROM Genre WHERE Name = 'Pop')", "source_tables": ["genre", "track"], "error_info": ""}, {"sample_id": 882, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT MAX(Milliseconds), MIN(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = 'Pop'", "pred_sql": "SELECT MAX(Milliseconds) AS MaxLength, MIN(Milliseconds) AS MinLength FROM Track WHERE GenreId = (SELECT GenreId FROM Genre WHERE Name = 'Pop')", "source_tables": ["genre", "track"], "error_info": ""}, {"sample_id": 883, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT BirthDate FROM EMPLOYEE WHERE City = 'Edmonton'", "pred_sql": "SELECT BirthDate FROM Employee WHERE City = 'Edmonton'", "source_tables": ["employee"], "error_info": ""}, {"sample_id": 884, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT BirthDate FROM EMPLOYEE WHERE City = 'Edmonton'", "pred_sql": "SELECT BirthDate FROM Employee WHERE City = 'Edmonton'", "source_tables": ["employee"], "error_info": ""}, {"sample_id": 885, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT DISTINCT (UnitPrice) FROM TRACK", "pred_sql": "SELECT DISTINCT UnitPrice FROM Track", "source_tables": ["track"], "error_info": ""}, {"sample_id": 886, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT DISTINCT (UnitPrice) FROM TRACK", "pred_sql": "SELECT DISTINCT UnitPrice FROM Track", "source_tables": ["track"], "error_info": ""}, {"sample_id": 887, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM ARTIST WHERE NOT artistid IN (SELECT artistid FROM ALBUM)", "pred_sql": "SELECT COUNT(*) AS ArtistCount FROM Artist WHERE NOT ArtistId IN (SELECT DISTINCT ArtistId FROM Album)", "source_tables": ["artist", "album"], "error_info": ""}, {"sample_id": 888, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM ARTIST WHERE NOT artistid IN (SELECT artistid FROM ALBUM)", "pred_sql": "SELECT COUNT(*) AS NumberOfArtistsWithoutAlbums FROM Artist WHERE NOT ArtistId IN (SELECT DISTINCT ArtistId FROM Album)", "source_tables": ["artist", "album"], "error_info": ""}, {"sample_id": 889, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Rock'", "pred_sql": "SELECT DISTINCT a.Title FROM Album AS a JOIN Track AS t ON a.AlbumId = t.AlbumId JOIN Genre AS g ON t.GenreId = g.GenreId WHERE g.Name IN ('Reggae', 'Rock') GROUP BY a.AlbumId HAVING COUNT(DISTINCT g.Name) = 2", "source_tables": ["genre", "track", "album"], "error_info": ""}, {"sample_id": 890, "db_id": "chinook_1", "score": 1, "gold_sql": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Rock'", "pred_sql": "SELECT DISTINCT a.Title FROM Album AS a JOIN Track AS t ON a.AlbumId = t.AlbumId JOIN Genre AS g ON t.GenreId = g.GenreId WHERE g.Name IN ('Reggae', 'Rock') GROUP BY a.AlbumId HAVING COUNT(DISTINCT g.Name) = 2", "source_tables": ["genre", "track", "album"], "error_info": ""}, {"sample_id": 891, "db_id": "insurance_fnol", "score": 1, "gold_sql": "SELECT customer_phone FROM available_policies", "pred_sql": "SELECT Customer_Phone FROM Available_Policies", "source_tables": ["available_policies"], "error_info": ""}, {"sample_id": 892, "db_id": "insurance_fnol", "score": 1, "gold_sql": "SELECT customer_phone FROM available_policies", "pred_sql": "SELECT Customer_Phone FROM Available_Policies", "source_tables": ["available_policies"], "error_info": ""}, {"sample_id": 893, "db_id": "insurance_fnol", "score": 0, "gold_sql": "SELECT customer_phone FROM available_policies WHERE policy_type_code = 'Life Insurance'", "pred_sql": "SELECT DISTINCT ap.Customer_Phone FROM Available_Policies AS ap JOIN Customers_Policies AS cp ON ap.Policy_ID = cp.Policy_ID JOIN Services AS s ON ap.policy_type_code = s.Service_ID WHERE s.Service_name = 'Life Insurance'", "source_tables": ["available_policies"], "error_info": "Result not equal"}, {"sample_id": 894, "db_id": "insurance_fnol", "score": 0, "gold_sql": "SELECT customer_phone FROM available_policies WHERE policy_type_code = 'Life Insurance'", "pred_sql": "SELECT DISTINCT ap.Customer_Phone FROM Available_Policies AS ap JOIN Customers_Policies AS cp ON ap.Policy_ID = cp.Policy_ID JOIN Services AS s ON ap.policy_type_code = s.Service_ID WHERE s.Service_name = 'Life Insurance'", "source_tables": ["available_policies"], "error_info": "Result not equal"}, {"sample_id": 895, "db_id": "insurance_fnol", "score": 0, "gold_sql": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT policy_type_code, COUNT(*) AS record_count FROM Available_Policies GROUP BY policy_type_code ORDER BY record_count DESC LIMIT 1", "source_tables": ["available_policies"], "error_info": "Result not equal"}, {"sample_id": 896, "db_id": "insurance_fnol", "score": 0, "gold_sql": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT policy_type_code, COUNT(*) AS frequency FROM Available_Policies GROUP BY policy_type_code ORDER BY frequency DESC LIMIT 1", "source_tables": ["available_policies"], "error_info": "Result not equal"}, {"sample_id": 897, "db_id": "insurance_fnol", "score": 0, "gold_sql": "SELECT customer_phone FROM available_policies WHERE policy_type_code = (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY COUNT(*) DESC LIMIT 1)", "pred_sql": "SELECT DISTINCT ap.Customer_Phone FROM Available_Policies AS ap JOIN Customers_Policies AS cp ON ap.Policy_ID = cp.Policy_ID JOIN (SELECT policy_type_code, COUNT(*) AS policy_count FROM Available_Policies JOIN Customers_Policies ON Available_Policies.Policy_ID = Customers_Policies.Policy_ID GROUP BY policy_type_code ORDER BY policy_count DESC LIMIT 1) AS popular_policy ON ap.policy_type_code = popular_policy.policy_type_code", "source_tables": ["available_policies"], "error_info": "Result not equal"}, {"sample_id": 898, "db_id": "insurance_fnol", "score": 0, "gold_sql": "SELECT customer_phone FROM available_policies WHERE policy_type_code = (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY COUNT(*) DESC LIMIT 1)", "pred_sql": "SELECT DISTINCT c.Customer_Phone FROM Customers AS c JOIN Customers_Policies AS cp ON c.Customer_ID = cp.Customer_ID JOIN Available_Policies AS ap ON cp.Policy_ID = ap.Policy_ID WHERE ap.policy_type_code = (SELECT policy_type_code FROM Available_Policies GROUP BY policy_type_code ORDER BY COUNT(*) DESC LIMIT 1)", "source_tables": ["available_policies"], "error_info": "Predction Execution Error:no such column: c.Customer_Phone"}, {"sample_id": 899, "db_id": "insurance_fnol", "score": 0, "gold_sql": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING COUNT(*) > 4", "pred_sql": "SELECT ap.policy_type_code FROM Available_Policies AS ap JOIN Customers_Policies AS cp ON ap.Policy_ID = cp.Policy_ID GROUP BY ap.policy_type_code HAVING COUNT(DISTINCT cp.Customer_ID) > 4", "source_tables": ["available_policies"], "error_info": "Result not equal"}, {"sample_id": 900, "db_id": "insurance_fnol", "score": 0, "gold_sql": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING COUNT(*) > 4", "pred_sql": "SELECT ap.policy_type_code FROM Customers_Policies AS cp JOIN Available_Policies AS ap ON cp.Policy_ID = ap.Policy_ID GROUP BY ap.policy_type_code HAVING COUNT(DISTINCT cp.Customer_ID) > 4", "source_tables": ["available_policies"], "error_info": "Result not equal"}, {"sample_id": 901, "db_id": "insurance_fnol", "score": 1, "gold_sql": "SELECT SUM(settlement_amount), AVG(settlement_amount) FROM settlements", "pred_sql": "SELECT SUM(Settlement_Amount) AS Total_Settlement_Amount, AVG(Settlement_Amount) AS Average_Settlement_Amount FROM Settlements", "source_tables": ["settlements"], "error_info": ""}, {"sample_id": 902, "db_id": "insurance_fnol", "score": 1, "gold_sql": "SELECT SUM(settlement_amount), AVG(settlement_amount) FROM settlements", "pred_sql": "SELECT SUM(Settlement_Amount) AS Total_Settlement_Amount, AVG(Settlement_Amount) AS Average_Settlement_Amount FROM Settlements", "source_tables": ["settlements"], "error_info": ""}, {"sample_id": 903, "db_id": "insurance_fnol", "score": 1, "gold_sql": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id = t2.service_id GROUP BY t1.service_id HAVING COUNT(*) > 2", "pred_sql": "SELECT Services.Service_name FROM First_Notification_of_Loss JOIN Services ON First_Notification_of_Loss.Service_ID = Services.Service_ID GROUP BY Services.Service_name HAVING COUNT(First_Notification_of_Loss.FNOL_ID) > 2", "source_tables": ["services", "first_notification_of_loss"], "error_info": ""}, {"sample_id": 904, "db_id": "insurance_fnol", "score": 1, "gold_sql": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id = t2.service_id GROUP BY t1.service_id HAVING COUNT(*) > 2", "pred_sql": "SELECT Services.Service_name FROM First_Notification_of_Loss JOIN Services ON First_Notification_of_Loss.Service_ID = Services.Service_ID GROUP BY Services.Service_name HAVING COUNT(First_Notification_of_Loss.FNOL_ID) > 2", "source_tables": ["services", "first_notification_of_loss"], "error_info": ""}, {"sample_id": 905, "db_id": "insurance_fnol", "score": 1, "gold_sql": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id = t2.claim_id GROUP BY t1.claim_id ORDER BY SUM(t2.settlement_amount) DESC LIMIT 1", "pred_sql": "SELECT Claims.Effective_Date FROM Claims JOIN Settlements ON Claims.Claim_ID = Settlements.Claim_ID GROUP BY Claims.Claim_ID ORDER BY SUM(Settlements.Settlement_Amount) DESC LIMIT 1", "source_tables": ["claims", "settlements"], "error_info": ""}, {"sample_id": 906, "db_id": "insurance_fnol", "score": 1, "gold_sql": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id = t2.claim_id GROUP BY t1.claim_id ORDER BY SUM(t2.settlement_amount) DESC LIMIT 1", "pred_sql": "SELECT Claims.Effective_Date FROM Claims JOIN Settlements ON Claims.Claim_ID = Settlements.Claim_ID GROUP BY Claims.Claim_ID ORDER BY SUM(Settlements.Settlement_Amount) DESC LIMIT 1", "source_tables": ["claims", "settlements"], "error_info": ""}, {"sample_id": 907, "db_id": "insurance_fnol", "score": 1, "gold_sql": "SELECT COUNT(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = 'Dayana Robel'", "pred_sql": "SELECT COUNT(*) AS Policy_Count FROM Customers_Policies AS CP JOIN Customers AS C ON CP.Customer_ID = C.Customer_ID WHERE C.Customer_name = 'Dayana Robel'", "source_tables": ["customers", "customers_policies"], "error_info": ""}, {"sample_id": 908, "db_id": "insurance_fnol", "score": 1, "gold_sql": "SELECT COUNT(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = 'Dayana Robel'", "pred_sql": "SELECT COUNT(*) AS total_policies FROM Customers AS c JOIN Customers_Policies AS cp ON c.Customer_ID = cp.Customer_ID WHERE c.Customer_name = 'Dayana Robel'", "source_tables": ["customers", "customers_policies"], "error_info": ""}, {"sample_id": 909, "db_id": "insurance_fnol", "score": 1, "gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_name ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT C.Customer_name FROM Customers AS C JOIN Customers_Policies AS CP ON C.Customer_ID = CP.Customer_ID GROUP BY C.Customer_ID ORDER BY COUNT(CP.Policy_ID) DESC LIMIT 1", "source_tables": ["customers", "customers_policies"], "error_info": ""}, {"sample_id": 910, "db_id": "insurance_fnol", "score": 1, "gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_name ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Customers.Customer_name FROM Customers JOIN Customers_Policies ON Customers.Customer_ID = Customers_Policies.Customer_ID GROUP BY Customers.Customer_ID ORDER BY COUNT(Customers_Policies.Policy_ID) DESC LIMIT 1", "source_tables": ["customers", "customers_policies"], "error_info": ""}, {"sample_id": 911, "db_id": "insurance_fnol", "score": 1, "gold_sql": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id WHERE t1.customer_name = 'Dayana Robel'", "pred_sql": "SELECT DISTINCT ap.policy_type_code FROM Customers AS c JOIN Customers_Policies AS cp ON c.Customer_ID = cp.Customer_ID JOIN Available_Policies AS ap ON cp.Policy_ID = ap.Policy_ID WHERE c.Customer_name = 'Dayana Robel'", "source_tables": ["customers", "available_policies", "customers_policies"], "error_info": ""}, {"sample_id": 912, "db_id": "insurance_fnol", "score": 1, "gold_sql": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id WHERE t1.customer_name = 'Dayana Robel'", "pred_sql": "SELECT DISTINCT ap.policy_type_code FROM Customers AS c JOIN Customers_Policies AS cp ON c.Customer_ID = cp.Customer_ID JOIN Available_Policies AS ap ON cp.Policy_ID = ap.Policy_ID WHERE c.Customer_name = 'Dayana Robel'", "source_tables": ["customers", "available_policies", "customers_policies"], "error_info": ""}, {"sample_id": 913, "db_id": "insurance_fnol", "score": 1, "gold_sql": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id WHERE t1.customer_name = (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_name ORDER BY COUNT(*) DESC LIMIT 1)", "pred_sql": "SELECT DISTINCT ap.policy_type_code FROM Available_Policies AS ap JOIN Customers_Policies AS cp ON ap.Policy_ID = cp.Policy_ID WHERE cp.Customer_ID = (SELECT Customer_ID FROM Customers_Policies GROUP BY Customer_ID ORDER BY COUNT(*) DESC LIMIT 1)", "source_tables": ["customers", "available_policies", "customers_policies"], "error_info": ""}, {"sample_id": 914, "db_id": "insurance_fnol", "score": 1, "gold_sql": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id WHERE t1.customer_name = (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_name ORDER BY COUNT(*) DESC LIMIT 1)", "pred_sql": "SELECT DISTINCT ap.policy_type_code FROM Available_Policies AS ap JOIN Customers_Policies AS cp ON ap.Policy_ID = cp.Policy_ID WHERE cp.Customer_ID = (SELECT Customer_ID FROM Customers_Policies GROUP BY Customer_ID ORDER BY COUNT(*) DESC LIMIT 1)", "source_tables": ["customers", "available_policies", "customers_policies"], "error_info": ""}, {"sample_id": 915, "db_id": "insurance_fnol", "score": 1, "gold_sql": "SELECT service_name FROM services ORDER BY service_name", "pred_sql": "SELECT Service_name FROM Services ORDER BY Service_name ASC", "source_tables": ["services"], "error_info": ""}, {"sample_id": 916, "db_id": "insurance_fnol", "score": 1, "gold_sql": "SELECT service_name FROM services ORDER BY service_name", "pred_sql": "SELECT Service_name FROM Services ORDER BY Service_name ASC", "source_tables": ["services"], "error_info": ""}, {"sample_id": 917, "db_id": "insurance_fnol", "score": 1, "gold_sql": "SELECT COUNT(*) FROM services", "pred_sql": "SELECT COUNT(*) AS total_services FROM Services", "source_tables": ["services"], "error_info": ""}, {"sample_id": 918, "db_id": "insurance_fnol", "score": 1, "gold_sql": "SELECT COUNT(*) FROM services", "pred_sql": "SELECT COUNT(*) AS total_services FROM Services", "source_tables": ["services"], "error_info": ""}, {"sample_id": 919, "db_id": "insurance_fnol", "score": 1, "gold_sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id", "pred_sql": "SELECT Customer_name FROM Customers WHERE NOT Customer_ID IN (SELECT DISTINCT Customer_ID FROM First_Notification_of_Loss)", "source_tables": ["customers", "first_notification_of_loss"], "error_info": ""}, {"sample_id": 920, "db_id": "insurance_fnol", "score": 1, "gold_sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id", "pred_sql": "SELECT Customers.Customer_name FROM Customers LEFT JOIN First_Notification_of_Loss ON Customers.Customer_ID = First_Notification_of_Loss.Customer_ID WHERE First_Notification_of_Loss.Customer_ID IS NULL", "source_tables": ["customers", "first_notification_of_loss"], "error_info": ""}, {"sample_id": 921, "db_id": "insurance_fnol", "score": 1, "gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = 'Close a policy' OR t3.service_name = 'Upgrade a policy'", "pred_sql": "SELECT DISTINCT Customers.Customer_name FROM Customers JOIN First_Notification_of_Loss ON Customers.Customer_ID = First_Notification_of_Loss.Customer_ID JOIN Services ON First_Notification_of_Loss.Service_ID = Services.Service_ID WHERE Services.Service_name IN ('Close a policy', 'Upgrade a policy')", "source_tables": ["services", "customers", "first_notification_of_loss"], "error_info": ""}, {"sample_id": 922, "db_id": "insurance_fnol", "score": 1, "gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = 'Close a policy' OR t3.service_name = 'Upgrade a policy'", "pred_sql": "SELECT DISTINCT Customers.Customer_name FROM Customers JOIN Customers_Policies ON Customers.Customer_ID = Customers_Policies.Customer_ID JOIN First_Notification_of_Loss ON Customers_Policies.Customer_ID = First_Notification_of_Loss.Customer_ID JOIN Services ON First_Notification_of_Loss.Service_ID = Services.Service_ID WHERE Services.Service_name IN ('Close a policy', 'Upgrade a policy')", "source_tables": ["services", "customers", "first_notification_of_loss"], "error_info": ""}, {"sample_id": 923, "db_id": "insurance_fnol", "score": 1, "gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = 'Close a policy' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = 'New policy application'", "pred_sql": "SELECT DISTINCT c.Customer_name FROM Customers AS c JOIN First_Notification_of_Loss AS fnol1 ON c.Customer_ID = fnol1.Customer_ID JOIN Services AS s1 ON fnol1.Service_ID = s1.Service_ID JOIN First_Notification_of_Loss AS fnol2 ON c.Customer_ID = fnol2.Customer_ID JOIN Services AS s2 ON fnol2.Service_ID = s2.Service_ID WHERE s1.Service_name = 'Close a policy' AND s2.Service_name = 'New policy application'", "source_tables": ["services", "customers", "first_notification_of_loss"], "error_info": ""}, {"sample_id": 924, "db_id": "insurance_fnol", "score": 1, "gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = 'Close a policy' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = 'New policy application'", "pred_sql": "SELECT DISTINCT c.Customer_name FROM Customers AS c JOIN First_Notification_of_Loss AS fnol1 ON c.Customer_ID = fnol1.Customer_ID JOIN Services AS s1 ON fnol1.Service_ID = s1.Service_ID JOIN First_Notification_of_Loss AS fnol2 ON c.Customer_ID = fnol2.Customer_ID JOIN Services AS s2 ON fnol2.Service_ID = s2.Service_ID WHERE s1.Service_name = 'Close a policy' AND s2.Service_name = 'Upgrade a policy'", "source_tables": ["services", "customers", "first_notification_of_loss"], "error_info": ""}, {"sample_id": 925, "db_id": "insurance_fnol", "score": 1, "gold_sql": "SELECT customer_id FROM customers WHERE customer_name LIKE '%Diana%'", "pred_sql": "SELECT Customer_ID FROM Customers WHERE Customer_name LIKE '%Diana%'", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 926, "db_id": "insurance_fnol", "score": 1, "gold_sql": "SELECT customer_id FROM customers WHERE customer_name LIKE '%Diana%'", "pred_sql": "SELECT Customer_ID FROM Customers WHERE Customer_name LIKE '%Diana%'", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 927, "db_id": "insurance_fnol", "score": 1, "gold_sql": "SELECT MAX(settlement_amount), MIN(settlement_amount) FROM settlements", "pred_sql": "SELECT MAX(Settlement_Amount) AS Max_Settlement, MIN(Settlement_Amount) AS Min_Settlement FROM Settlements", "source_tables": ["settlements"], "error_info": ""}, {"sample_id": 928, "db_id": "insurance_fnol", "score": 1, "gold_sql": "SELECT MAX(settlement_amount), MIN(settlement_amount) FROM settlements", "pred_sql": "SELECT MAX(Settlement_Amount) AS Max_Settlement, MIN(Settlement_Amount) AS Min_Settlement FROM Settlements", "source_tables": ["settlements"], "error_info": ""}, {"sample_id": 929, "db_id": "insurance_fnol", "score": 1, "gold_sql": "SELECT customer_id, customer_name FROM customers ORDER BY customer_id ASC", "pred_sql": "SELECT * FROM Customers ORDER BY Customer_ID ASC", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 930, "db_id": "insurance_fnol", "score": 0, "gold_sql": "SELECT customer_id, customer_name FROM customers ORDER BY customer_id ASC", "pred_sql": "SELECT Customer_ID FROM Customers ORDER BY Customer_ID", "source_tables": ["customers"], "error_info": "Result not equal"}, {"sample_id": 931, "db_id": "insurance_fnol", "score": 1, "gold_sql": "SELECT t2.date_opened, t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name LIKE '%Diana%'", "pred_sql": "SELECT cp.Date_Opened, cp.Date_Closed FROM Customers AS c JOIN Customers_Policies AS cp ON c.Customer_ID = cp.Customer_ID WHERE c.Customer_name LIKE '%Diana%'", "source_tables": ["customers", "customers_policies"], "error_info": ""}, {"sample_id": 932, "db_id": "insurance_fnol", "score": 1, "gold_sql": "SELECT t2.date_opened, t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name LIKE '%Diana%'", "pred_sql": "SELECT cp.Date_Opened, cp.Date_Closed FROM Customers AS c JOIN Customers_Policies AS cp ON c.Customer_ID = cp.Customer_ID WHERE c.Customer_name LIKE '%Diana%'", "source_tables": ["customers", "customers_policies"], "error_info": ""}, {"sample_id": 933, "db_id": "medicine_enzyme_interaction", "score": 1, "gold_sql": "SELECT COUNT(*) FROM enzyme", "pred_sql": "SELECT COUNT(DISTINCT id) AS enzyme_count FROM enzyme", "source_tables": ["enzyme"], "error_info": ""}, {"sample_id": 934, "db_id": "medicine_enzyme_interaction", "score": 1, "gold_sql": "SELECT COUNT(*) FROM enzyme", "pred_sql": "SELECT COUNT(*) AS total_count FROM enzyme", "source_tables": ["enzyme"], "error_info": ""}, {"sample_id": 935, "db_id": "medicine_enzyme_interaction", "score": 1, "gold_sql": "SELECT name FROM enzyme ORDER BY name DESC", "pred_sql": "SELECT name FROM enzyme ORDER BY name DESC", "source_tables": ["enzyme"], "error_info": ""}, {"sample_id": 936, "db_id": "medicine_enzyme_interaction", "score": 1, "gold_sql": "SELECT name FROM enzyme ORDER BY name DESC", "pred_sql": "SELECT name FROM enzyme ORDER BY name DESC", "source_tables": ["enzyme"], "error_info": ""}, {"sample_id": 937, "db_id": "medicine_enzyme_interaction", "score": 1, "gold_sql": "SELECT name, LOCATION FROM enzyme", "pred_sql": "SELECT name, Location FROM enzyme", "source_tables": ["enzyme"], "error_info": ""}, {"sample_id": 938, "db_id": "medicine_enzyme_interaction", "score": 1, "gold_sql": "SELECT name, LOCATION FROM enzyme", "pred_sql": "SELECT name, Location FROM enzyme", "source_tables": ["enzyme"], "error_info": ""}, {"sample_id": 939, "db_id": "medicine_enzyme_interaction", "score": 1, "gold_sql": "SELECT MAX(OMIM) FROM enzyme", "pred_sql": "SELECT MAX(OMIM) AS max_omim_value FROM enzyme", "source_tables": ["enzyme"], "error_info": ""}, {"sample_id": 940, "db_id": "medicine_enzyme_interaction", "score": 1, "gold_sql": "SELECT MAX(OMIM) FROM enzyme", "pred_sql": "SELECT MAX(OMIM) AS max_omim FROM enzyme", "source_tables": ["enzyme"], "error_info": ""}, {"sample_id": 941, "db_id": "medicine_enzyme_interaction", "score": 1, "gold_sql": "SELECT product, chromosome, porphyria FROM enzyme WHERE LOCATION = 'Cytosol'", "pred_sql": "SELECT Product, Chromosome, Porphyria FROM enzyme WHERE Location = 'Cytosol'", "source_tables": ["enzyme"], "error_info": ""}, {"sample_id": 942, "db_id": "medicine_enzyme_interaction", "score": 1, "gold_sql": "SELECT product, chromosome, porphyria FROM enzyme WHERE LOCATION = 'Cytosol'", "pred_sql": "SELECT Product, Chromosome, Porphyria FROM enzyme WHERE Location = 'Cytosol'", "source_tables": ["enzyme"], "error_info": ""}, {"sample_id": 943, "db_id": "medicine_enzyme_interaction", "score": 1, "gold_sql": "SELECT name FROM enzyme WHERE product <> 'Heme'", "pred_sql": "SELECT name FROM enzyme WHERE Product <> 'Heme'", "source_tables": ["enzyme"], "error_info": ""}, {"sample_id": 944, "db_id": "medicine_enzyme_interaction", "score": 1, "gold_sql": "SELECT name FROM enzyme WHERE product <> 'Heme'", "pred_sql": "SELECT name FROM enzyme WHERE Product <> 'Heme'", "source_tables": ["enzyme"], "error_info": ""}, {"sample_id": 945, "db_id": "medicine_enzyme_interaction", "score": 1, "gold_sql": "SELECT name, trade_name FROM medicine WHERE FDA_approved = 'Yes'", "pred_sql": "SELECT name, Trade_Name FROM medicine WHERE FDA_approved = 'Yes'", "source_tables": ["medicine"], "error_info": ""}, {"sample_id": 946, "db_id": "medicine_enzyme_interaction", "score": 0, "gold_sql": "SELECT name, trade_name FROM medicine WHERE FDA_approved = 'Yes'", "pred_sql": "SELECT name, Trade_Name FROM medicine WHERE FDA_approved = 'yes'", "source_tables": ["medicine"], "error_info": "Result not equal"}, {"sample_id": 947, "db_id": "medicine_enzyme_interaction", "score": 1, "gold_sql": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id = T3.id WHERE T3.name = 'Amisulpride' AND T2.interaction_type = 'inhibitor'", "pred_sql": "SELECT enzyme.name FROM enzyme JOIN medicine_enzyme_interaction ON enzyme.id = medicine_enzyme_interaction.enzyme_id JOIN medicine ON medicine.id = medicine_enzyme_interaction.medicine_id WHERE medicine.name = 'Amisulpride' AND medicine_enzyme_interaction.interaction_type = 'inhibitor'", "source_tables": ["enzyme", "medicine", "medicine_enzyme_interaction"], "error_info": ""}, {"sample_id": 948, "db_id": "medicine_enzyme_interaction", "score": 1, "gold_sql": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id = T3.id WHERE T3.name = 'Amisulpride' AND T2.interaction_type = 'inhibitor'", "pred_sql": "SELECT enzyme.name FROM enzyme JOIN medicine_enzyme_interaction ON enzyme.id = medicine_enzyme_interaction.enzyme_id JOIN medicine ON medicine.id = medicine_enzyme_interaction.medicine_id WHERE medicine.name = 'Amisulpride' AND medicine_enzyme_interaction.interaction_type = 'inhibitor'", "source_tables": ["enzyme", "medicine", "medicine_enzyme_interaction"], "error_info": ""}, {"sample_id": 949, "db_id": "medicine_enzyme_interaction", "score": 1, "gold_sql": "SELECT T1.id, T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING COUNT(*) >= 2", "pred_sql": "SELECT m.id, m.name FROM medicine AS m JOIN medicine_enzyme_interaction AS mei ON m.id = mei.medicine_id GROUP BY m.id, m.name HAVING COUNT(mei.enzyme_id) >= 2", "source_tables": ["medicine", "medicine_enzyme_interaction"], "error_info": ""}, {"sample_id": 950, "db_id": "medicine_enzyme_interaction", "score": 1, "gold_sql": "SELECT T1.id, T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING COUNT(*) >= 2", "pred_sql": "SELECT m.id, m.name FROM medicine AS m JOIN medicine_enzyme_interaction AS mei ON m.id = mei.medicine_id GROUP BY m.id, m.name HAVING COUNT(DISTINCT mei.enzyme_id) > 1", "source_tables": ["medicine", "medicine_enzyme_interaction"], "error_info": ""}, {"sample_id": 951, "db_id": "medicine_enzyme_interaction", "score": 0, "gold_sql": "SELECT T1.id, T1.Name, T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC", "pred_sql": "SELECT m.id, m.name, m.FDA_approved FROM medicine AS m JOIN medicine_enzyme_interaction AS mei ON m.id = mei.medicine_id GROUP BY m.id, m.name, m.FDA_approved ORDER BY COUNT(mei.enzyme_id) DESC", "source_tables": ["medicine", "medicine_enzyme_interaction"], "error_info": "Result not equal"}, {"sample_id": 952, "db_id": "medicine_enzyme_interaction", "score": 0, "gold_sql": "SELECT T1.id, T1.Name, T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC", "pred_sql": "SELECT m.id, m.name, m.FDA_approved FROM medicine AS m JOIN medicine_enzyme_interaction AS mei ON m.id = mei.medicine_id GROUP BY m.id, m.name, m.FDA_approved ORDER BY COUNT(mei.enzyme_id) DESC", "source_tables": ["medicine", "medicine_enzyme_interaction"], "error_info": "Result not equal"}, {"sample_id": 953, "db_id": "medicine_enzyme_interaction", "score": 0, "gold_sql": "SELECT T1.id, T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id WHERE T2.interaction_type = 'activitor' GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT e.id, e.name FROM enzyme AS e JOIN medicine_enzyme_interaction AS mei ON e.id = mei.enzyme_id WHERE mei.interaction_type = 'activator' GROUP BY e.id, e.name ORDER BY COUNT(mei.medicine_id) DESC LIMIT 1", "source_tables": ["enzyme", "medicine_enzyme_interaction"], "error_info": "Result not equal"}, {"sample_id": 954, "db_id": "medicine_enzyme_interaction", "score": 0, "gold_sql": "SELECT T1.id, T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id WHERE T2.interaction_type = 'activitor' GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT e.id, e.name FROM enzyme AS e JOIN medicine_enzyme_interaction AS mei ON e.id = mei.enzyme_id WHERE mei.interaction_type = 'activator' GROUP BY e.id, e.name ORDER BY COUNT(mei.medicine_id) DESC LIMIT 1", "source_tables": ["enzyme", "medicine_enzyme_interaction"], "error_info": "Result not equal"}, {"sample_id": 955, "db_id": "medicine_enzyme_interaction", "score": 1, "gold_sql": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id = T2.id JOIN enzyme AS T3 ON T1.enzyme_id = T3.id WHERE T3.name = 'ALA synthase' AND T2.name = 'Aripiprazole'", "pred_sql": "SELECT mei.interaction_type FROM medicine_enzyme_interaction AS mei JOIN enzyme AS e ON mei.enzyme_id = e.id JOIN medicine AS m ON mei.medicine_id = m.id WHERE e.name = 'ALA synthase' AND m.name = 'Aripiprazole'", "source_tables": ["enzyme", "medicine", "medicine_enzyme_interaction"], "error_info": ""}, {"sample_id": 956, "db_id": "medicine_enzyme_interaction", "score": 1, "gold_sql": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id = T2.id JOIN enzyme AS T3 ON T1.enzyme_id = T3.id WHERE T3.name = 'ALA synthase' AND T2.name = 'Aripiprazole'", "pred_sql": "SELECT mei.interaction_type FROM medicine_enzyme_interaction AS mei JOIN enzyme AS e ON mei.enzyme_id = e.id JOIN medicine AS m ON mei.medicine_id = m.id WHERE e.name = 'ALA synthase' AND m.name = 'Aripiprazole'", "source_tables": ["enzyme", "medicine", "medicine_enzyme_interaction"], "error_info": ""}, {"sample_id": 957, "db_id": "medicine_enzyme_interaction", "score": 1, "gold_sql": "SELECT interaction_type, COUNT(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT interaction_type, COUNT(*) AS interaction_count FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY interaction_count DESC LIMIT 1", "source_tables": ["medicine_enzyme_interaction"], "error_info": ""}, {"sample_id": 958, "db_id": "medicine_enzyme_interaction", "score": 0, "gold_sql": "SELECT interaction_type, COUNT(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT interaction_type, COUNT(*) AS interaction_count FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY interaction_count DESC", "source_tables": ["medicine_enzyme_interaction"], "error_info": "Result not equal"}, {"sample_id": 959, "db_id": "medicine_enzyme_interaction", "score": 1, "gold_sql": "SELECT COUNT(*) FROM medicine WHERE FDA_approved = 'No'", "pred_sql": "SELECT COUNT(*) AS count FROM medicine WHERE FDA_approved = 'No'", "source_tables": ["medicine"], "error_info": ""}, {"sample_id": 960, "db_id": "medicine_enzyme_interaction", "score": 1, "gold_sql": "SELECT COUNT(*) FROM medicine WHERE FDA_approved = 'No'", "pred_sql": "SELECT COUNT(*) AS not_approved_count FROM medicine WHERE FDA_approved = 'No'", "source_tables": ["medicine"], "error_info": ""}, {"sample_id": 961, "db_id": "medicine_enzyme_interaction", "score": 1, "gold_sql": "SELECT COUNT(*) FROM enzyme WHERE NOT id IN (SELECT enzyme_id FROM medicine_enzyme_interaction)", "pred_sql": "SELECT COUNT(*) FROM enzyme WHERE NOT id IN (SELECT enzyme_id FROM medicine_enzyme_interaction)", "source_tables": ["enzyme", "medicine_enzyme_interaction"], "error_info": ""}, {"sample_id": 962, "db_id": "medicine_enzyme_interaction", "score": 1, "gold_sql": "SELECT COUNT(*) FROM enzyme WHERE NOT id IN (SELECT enzyme_id FROM medicine_enzyme_interaction)", "pred_sql": "SELECT COUNT(*) FROM enzyme WHERE NOT id IN (SELECT enzyme_id FROM medicine_enzyme_interaction)", "source_tables": ["enzyme", "medicine_enzyme_interaction"], "error_info": ""}, {"sample_id": 963, "db_id": "medicine_enzyme_interaction", "score": 1, "gold_sql": "SELECT T1.id, T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING COUNT(*) >= 3", "pred_sql": "SELECT m.id, m.Trade_Name FROM medicine AS m JOIN medicine_enzyme_interaction AS mei ON m.id = mei.medicine_id GROUP BY m.id, m.Trade_Name HAVING COUNT(mei.enzyme_id) >= 3", "source_tables": ["medicine", "medicine_enzyme_interaction"], "error_info": ""}, {"sample_id": 964, "db_id": "medicine_enzyme_interaction", "score": 1, "gold_sql": "SELECT T1.id, T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING COUNT(*) >= 3", "pred_sql": "SELECT m.id, m.Trade_Name FROM medicine AS m JOIN medicine_enzyme_interaction AS mei ON m.id = mei.medicine_id GROUP BY m.id, m.Trade_Name HAVING COUNT(mei.enzyme_id) >= 3", "source_tables": ["medicine", "medicine_enzyme_interaction"], "error_info": ""}, {"sample_id": 965, "db_id": "medicine_enzyme_interaction", "score": 1, "gold_sql": "SELECT DISTINCT T1.name, T1.location, T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id = T1.id WHERE T2.interaction_type = 'inhibitor'", "pred_sql": "SELECT DISTINCT e.name, e.Location, e.Product FROM enzyme AS e JOIN medicine_enzyme_interaction AS mei ON e.id = mei.enzyme_id WHERE mei.interaction_type = 'inhibitor'", "source_tables": ["enzyme", "medicine_enzyme_interaction"], "error_info": ""}, {"sample_id": 966, "db_id": "medicine_enzyme_interaction", "score": 0, "gold_sql": "SELECT DISTINCT T1.name, T1.location, T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id = T1.id WHERE T2.interaction_type = 'inhibitor'", "pred_sql": "SELECT enzyme.name, enzyme.Location, enzyme.Product FROM enzyme JOIN medicine_enzyme_interaction ON enzyme.id = medicine_enzyme_interaction.enzyme_id WHERE medicine_enzyme_interaction.interaction_type = 'inhibitor'", "source_tables": ["enzyme", "medicine_enzyme_interaction"], "error_info": "Result not equal"}, {"sample_id": 967, "db_id": "medicine_enzyme_interaction", "score": 0, "gold_sql": "SELECT T1.name, T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id WHERE interaction_type = 'inhibitor' INTERSECT SELECT T1.name, T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id WHERE interaction_type = 'activitor'", "pred_sql": "SELECT m.name, m.Trade_Name FROM medicine AS m JOIN medicine_enzyme_interaction AS mei ON m.id = mei.medicine_id WHERE mei.interaction_type IN ('inhibitor', 'activator') GROUP BY m.id HAVING COUNT(DISTINCT mei.interaction_type) = 2", "source_tables": ["medicine", "medicine_enzyme_interaction"], "error_info": "Result not equal"}, {"sample_id": 968, "db_id": "medicine_enzyme_interaction", "score": 0, "gold_sql": "SELECT T1.name, T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id WHERE interaction_type = 'inhibitor' INTERSECT SELECT T1.name, T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id WHERE interaction_type = 'activitor'", "pred_sql": "SELECT m.name, m.Trade_Name FROM medicine AS m JOIN medicine_enzyme_interaction AS mei ON m.id = mei.medicine_id WHERE mei.interaction_type IN ('inhibitor', 'activator')", "source_tables": ["medicine", "medicine_enzyme_interaction"], "error_info": "Result not equal"}, {"sample_id": 969, "db_id": "medicine_enzyme_interaction", "score": 0, "gold_sql": "SELECT name, trade_name FROM medicine EXCEPT SELECT T1.name, T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id JOIN enzyme AS T3 ON T3.id = T2.enzyme_id WHERE T3.product = 'Protoporphyrinogen IX'", "pred_sql": "SELECT m.name, m.Trade_Name FROM medicine AS m WHERE NOT m.id IN (SELECT mei.medicine_id FROM medicine_enzyme_interaction AS mei JOIN enzyme AS e ON mei.enzyme_id = e.id WHERE e.Product = 'Heme')", "source_tables": ["enzyme", "medicine", "medicine_enzyme_interaction"], "error_info": "Result not equal"}, {"sample_id": 970, "db_id": "medicine_enzyme_interaction", "score": 0, "gold_sql": "SELECT name, trade_name FROM medicine EXCEPT SELECT T1.name, T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id JOIN enzyme AS T3 ON T3.id = T2.enzyme_id WHERE T3.product = 'Protoporphyrinogen IX'", "pred_sql": "SELECT m.name, m.Trade_Name FROM medicine AS m WHERE NOT m.id IN (SELECT mei.medicine_id FROM medicine_enzyme_interaction AS mei JOIN enzyme AS e ON mei.enzyme_id = e.id WHERE e.Product = 'Heme')", "source_tables": ["enzyme", "medicine", "medicine_enzyme_interaction"], "error_info": "Result not equal"}, {"sample_id": 971, "db_id": "medicine_enzyme_interaction", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT FDA_approved) FROM medicine", "pred_sql": "SELECT COUNT(DISTINCT FDA_approved) AS distinct_fda_approval_statuses FROM medicine", "source_tables": ["medicine"], "error_info": ""}, {"sample_id": 972, "db_id": "medicine_enzyme_interaction", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT FDA_approved) FROM medicine", "pred_sql": "SELECT COUNT(DISTINCT FDA_approved) AS different_approval_statuses FROM medicine", "source_tables": ["medicine"], "error_info": ""}, {"sample_id": 973, "db_id": "medicine_enzyme_interaction", "score": 1, "gold_sql": "SELECT name FROM enzyme WHERE name LIKE '%ALA%'", "pred_sql": "SELECT name FROM enzyme WHERE name LIKE '%ALA%'", "source_tables": ["enzyme"], "error_info": ""}, {"sample_id": 974, "db_id": "medicine_enzyme_interaction", "score": 1, "gold_sql": "SELECT name FROM enzyme WHERE name LIKE '%ALA%'", "pred_sql": "SELECT name FROM enzyme WHERE name LIKE '%ALA%'", "source_tables": ["enzyme"], "error_info": ""}, {"sample_id": 975, "db_id": "medicine_enzyme_interaction", "score": 1, "gold_sql": "SELECT trade_name, COUNT(*) FROM medicine GROUP BY trade_name", "pred_sql": "SELECT Trade_Name, COUNT(*) AS number_of_medicines FROM medicine GROUP BY Trade_Name", "source_tables": ["medicine"], "error_info": ""}, {"sample_id": 976, "db_id": "medicine_enzyme_interaction", "score": 1, "gold_sql": "SELECT trade_name, COUNT(*) FROM medicine GROUP BY trade_name", "pred_sql": "SELECT Trade_Name, COUNT(*) AS medicine_count FROM medicine GROUP BY Trade_Name", "source_tables": ["medicine"], "error_info": ""}, {"sample_id": 977, "db_id": "university_basketball", "score": 1, "gold_sql": "SELECT school, nickname FROM university ORDER BY founded", "pred_sql": "SELECT university.School, university.Nickname FROM university ORDER BY university.Founded", "source_tables": ["university"], "error_info": ""}, {"sample_id": 978, "db_id": "university_basketball", "score": 1, "gold_sql": "SELECT school, nickname FROM university ORDER BY founded", "pred_sql": "SELECT School, Nickname FROM university ORDER BY Founded", "source_tables": ["university"], "error_info": ""}, {"sample_id": 979, "db_id": "university_basketball", "score": 1, "gold_sql": "SELECT school, LOCATION FROM university WHERE affiliation = 'Public'", "pred_sql": "SELECT School, Location FROM university WHERE Affiliation = 'Public'", "source_tables": ["university"], "error_info": ""}, {"sample_id": 980, "db_id": "university_basketball", "score": 1, "gold_sql": "SELECT school, LOCATION FROM university WHERE affiliation = 'Public'", "pred_sql": "SELECT School, Location FROM university WHERE Affiliation = 'Public'", "source_tables": ["university"], "error_info": ""}, {"sample_id": 981, "db_id": "university_basketball", "score": 1, "gold_sql": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1", "pred_sql": "SELECT Founded FROM university WHERE School_ID = (SELECT School_ID FROM university ORDER BY Enrollment DESC LIMIT 1)", "source_tables": ["university"], "error_info": ""}, {"sample_id": 982, "db_id": "university_basketball", "score": 1, "gold_sql": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1", "pred_sql": "SELECT Founded FROM university WHERE Enrollment = (SELECT MAX(Enrollment) FROM university)", "source_tables": ["university"], "error_info": ""}, {"sample_id": 983, "db_id": "university_basketball", "score": 1, "gold_sql": "SELECT founded FROM university WHERE affiliation <> 'Public' ORDER BY founded DESC LIMIT 1", "pred_sql": "SELECT Founded FROM university WHERE Affiliation <> 'Public' ORDER BY Founded DESC LIMIT 1", "source_tables": ["university"], "error_info": ""}, {"sample_id": 984, "db_id": "university_basketball", "score": 1, "gold_sql": "SELECT founded FROM university WHERE affiliation <> 'Public' ORDER BY founded DESC LIMIT 1", "pred_sql": "SELECT Founded FROM university WHERE Affiliation <> 'Public' ORDER BY Founded DESC LIMIT 1", "source_tables": ["university"], "error_info": ""}, {"sample_id": 985, "db_id": "university_basketball", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT school_id) FROM basketball_match", "pred_sql": "SELECT COUNT(DISTINCT School_ID) AS number_of_schools FROM basketball_match", "source_tables": ["basketball_match"], "error_info": ""}, {"sample_id": 986, "db_id": "university_basketball", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT school_id) FROM basketball_match", "pred_sql": "SELECT COUNT(DISTINCT School_ID) AS number_of_schools FROM basketball_match", "source_tables": ["basketball_match"], "error_info": ""}, {"sample_id": 987, "db_id": "university_basketball", "score": 1, "gold_sql": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1", "pred_sql": "SELECT MAX(ACC_Percent) AS Highest_ACC_Percent FROM basketball_match", "source_tables": ["basketball_match"], "error_info": ""}, {"sample_id": 988, "db_id": "university_basketball", "score": 1, "gold_sql": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1", "pred_sql": "SELECT MAX(ACC_Percent) AS Highest_ACC_Percent FROM basketball_match", "source_tables": ["basketball_match"], "error_info": ""}, {"sample_id": 989, "db_id": "university_basketball", "score": 1, "gold_sql": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id ORDER BY t2.acc_percent LIMIT 1", "pred_sql": "SELECT u.Primary_conference FROM university AS u JOIN basketball_match AS b ON u.School_ID = b.School_ID ORDER BY b.ACC_Percent ASC LIMIT 1", "source_tables": ["basketball_match", "university"], "error_info": ""}, {"sample_id": 990, "db_id": "university_basketball", "score": 1, "gold_sql": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id ORDER BY t2.acc_percent LIMIT 1", "pred_sql": "SELECT u.Primary_conference FROM university AS u JOIN basketball_match AS b ON u.School_ID = b.School_ID ORDER BY b.ACC_Percent ASC LIMIT 1", "source_tables": ["basketball_match", "university"], "error_info": ""}, {"sample_id": 991, "db_id": "university_basketball", "score": 1, "gold_sql": "SELECT t2.team_name, t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id ORDER BY t1.founded LIMIT 1", "pred_sql": "SELECT bm.Team_Name, bm.ACC_Regular_Season FROM basketball_match AS bm JOIN university AS u ON bm.School_ID = u.School_ID ORDER BY u.Founded ASC LIMIT 1", "source_tables": ["basketball_match", "university"], "error_info": ""}, {"sample_id": 992, "db_id": "university_basketball", "score": 1, "gold_sql": "SELECT t2.team_name, t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id ORDER BY t1.founded LIMIT 1", "pred_sql": "SELECT bm.Team_Name, bm.ACC_Regular_Season FROM basketball_match AS bm JOIN university AS u ON bm.School_ID = u.School_ID WHERE u.Founded = (SELECT MIN(Founded) FROM university)", "source_tables": ["basketball_match", "university"], "error_info": ""}, {"sample_id": 993, "db_id": "university_basketball", "score": 1, "gold_sql": "SELECT t2.All_Games, t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE team_name = 'Clemson'", "pred_sql": "SELECT university.Location, basketball_match.All_Games FROM basketball_match JOIN university ON basketball_match.School_ID = university.School_ID WHERE basketball_match.Team_Name = 'Clemson'", "source_tables": ["basketball_match", "university"], "error_info": ""}, {"sample_id": 994, "db_id": "university_basketball", "score": 0, "gold_sql": "SELECT t2.All_Games, t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE team_name = 'Clemson'", "pred_sql": "SELECT bm.All_Games, u.Location FROM basketball_match AS bm JOIN university AS u ON bm.School_ID = u.School_ID WHERE u.School = 'Clemson'", "source_tables": ["basketball_match", "university"], "error_info": "Result not equal"}, {"sample_id": 995, "db_id": "university_basketball", "score": 1, "gold_sql": "SELECT AVG(enrollment) FROM university WHERE founded < 1850", "pred_sql": "SELECT AVG(Enrollment) AS average_enrollment FROM university WHERE Founded < 1850", "source_tables": ["university"], "error_info": ""}, {"sample_id": 996, "db_id": "university_basketball", "score": 1, "gold_sql": "SELECT AVG(enrollment) FROM university WHERE founded < 1850", "pred_sql": "SELECT AVG(Enrollment) AS average_enrollment FROM university WHERE Founded < 1850", "source_tables": ["university"], "error_info": ""}, {"sample_id": 997, "db_id": "university_basketball", "score": 1, "gold_sql": "SELECT enrollment, primary_conference FROM university ORDER BY founded LIMIT 1", "pred_sql": "SELECT Enrollment, Primary_conference FROM university WHERE Founded = (SELECT MIN(Founded) FROM university)", "source_tables": ["university"], "error_info": ""}, {"sample_id": 998, "db_id": "university_basketball", "score": 1, "gold_sql": "SELECT enrollment, primary_conference FROM university ORDER BY founded LIMIT 1", "pred_sql": "SELECT Enrollment, Primary_conference FROM university ORDER BY Founded ASC LIMIT 1", "source_tables": ["university"], "error_info": ""}, {"sample_id": 999, "db_id": "university_basketball", "score": 1, "gold_sql": "SELECT SUM(enrollment), MIN(enrollment) FROM university", "pred_sql": "SELECT SUM(Enrollment) AS Total_Enrollment, MIN(Enrollment) AS Minimum_Enrollment FROM university", "source_tables": ["university"], "error_info": ""}, {"sample_id": 1000, "db_id": "university_basketball", "score": 1, "gold_sql": "SELECT SUM(enrollment), MIN(enrollment) FROM university", "pred_sql": "SELECT SUM(Enrollment) AS Total_Enrollment, MIN(Enrollment) AS Minimum_Enrollment FROM university", "source_tables": ["university"], "error_info": ""}, {"sample_id": 1001, "db_id": "university_basketball", "score": 1, "gold_sql": "SELECT SUM(enrollment), affiliation FROM university GROUP BY affiliation", "pred_sql": "SELECT Affiliation, SUM(Enrollment) AS Total_Enrollment FROM university GROUP BY Affiliation", "source_tables": ["university"], "error_info": ""}, {"sample_id": 1002, "db_id": "university_basketball", "score": 1, "gold_sql": "SELECT SUM(enrollment), affiliation FROM university GROUP BY affiliation", "pred_sql": "SELECT Affiliation, SUM(Enrollment) AS Total_Enrollment FROM university GROUP BY Affiliation", "source_tables": ["university"], "error_info": ""}, {"sample_id": 1003, "db_id": "university_basketball", "score": 1, "gold_sql": "SELECT COUNT(*) FROM university WHERE NOT school_id IN (SELECT school_id FROM basketball_match)", "pred_sql": "SELECT COUNT(*) AS School_Count FROM university WHERE NOT School_ID IN (SELECT DISTINCT School_ID FROM basketball_match)", "source_tables": ["basketball_match", "university"], "error_info": ""}, {"sample_id": 1004, "db_id": "university_basketball", "score": 1, "gold_sql": "SELECT COUNT(*) FROM university WHERE NOT school_id IN (SELECT school_id FROM basketball_match)", "pred_sql": "SELECT COUNT(*) AS University_Count FROM university WHERE NOT School_ID IN (SELECT DISTINCT School_ID FROM basketball_match)", "source_tables": ["basketball_match", "university"], "error_info": ""}, {"sample_id": 1005, "db_id": "university_basketball", "score": 0, "gold_sql": "SELECT school FROM university WHERE founded > 1850 OR affiliation = 'Public'", "pred_sql": "SELECT * FROM university WHERE Founded > 1850 OR Affiliation = 'Public'", "source_tables": ["university"], "error_info": "Result not equal"}, {"sample_id": 1006, "db_id": "university_basketball", "score": 0, "gold_sql": "SELECT school FROM university WHERE founded > 1850 OR affiliation = 'Public'", "pred_sql": "SELECT School FROM university WHERE Founded < 1850 OR Affiliation = 'Public'", "source_tables": ["university"], "error_info": "Result not equal"}, {"sample_id": 1007, "db_id": "university_basketball", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT affiliation) FROM university", "pred_sql": "SELECT COUNT(DISTINCT Affiliation) AS Different_Affiliation_Types FROM university", "source_tables": ["university"], "error_info": ""}, {"sample_id": 1008, "db_id": "university_basketball", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT affiliation) FROM university", "pred_sql": "SELECT COUNT(DISTINCT Affiliation) AS Different_Affiliation_Types FROM university", "source_tables": ["university"], "error_info": ""}, {"sample_id": 1009, "db_id": "university_basketball", "score": 1, "gold_sql": "SELECT COUNT(*) FROM university WHERE LOCATION LIKE '%NY%'", "pred_sql": "SELECT COUNT(*) FROM university WHERE Location LIKE '%NY%'", "source_tables": ["university"], "error_info": ""}, {"sample_id": 1010, "db_id": "university_basketball", "score": 1, "gold_sql": "SELECT COUNT(*) FROM university WHERE LOCATION LIKE '%NY%'", "pred_sql": "SELECT COUNT(*) FROM university WHERE Location LIKE '%NY%'", "source_tables": ["university"], "error_info": ""}, {"sample_id": 1011, "db_id": "university_basketball", "score": 1, "gold_sql": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE enrollment < (SELECT AVG(enrollment) FROM university)", "pred_sql": "SELECT bm.Team_Name FROM basketball_match AS bm JOIN university AS u ON bm.School_ID = u.School_ID WHERE u.Enrollment < (SELECT AVG(Enrollment) FROM university)", "source_tables": ["basketball_match", "university"], "error_info": ""}, {"sample_id": 1012, "db_id": "university_basketball", "score": 1, "gold_sql": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE enrollment < (SELECT AVG(enrollment) FROM university)", "pred_sql": "SELECT bm.Team_Name FROM basketball_match AS bm JOIN university AS u ON bm.School_ID = u.School_ID WHERE u.Enrollment < (SELECT AVG(Enrollment) FROM university)", "source_tables": ["basketball_match", "university"], "error_info": ""}, {"sample_id": 1013, "db_id": "university_basketball", "score": 1, "gold_sql": "SELECT COUNT(*), affiliation FROM university WHERE enrollment > 20000 GROUP BY affiliation", "pred_sql": "SELECT Affiliation, COUNT(*) AS University_Count FROM university WHERE Enrollment > 20000 GROUP BY Affiliation", "source_tables": ["university"], "error_info": ""}, {"sample_id": 1014, "db_id": "university_basketball", "score": 1, "gold_sql": "SELECT COUNT(*), affiliation FROM university WHERE enrollment > 20000 GROUP BY affiliation", "pred_sql": "SELECT Affiliation, COUNT(*) AS School_Count FROM university WHERE Enrollment > 20000 GROUP BY Affiliation", "source_tables": ["university"], "error_info": ""}, {"sample_id": 1015, "db_id": "university_basketball", "score": 1, "gold_sql": "SELECT SUM(Enrollment), affiliation FROM university WHERE founded > 1850 GROUP BY affiliation", "pred_sql": "SELECT Affiliation, SUM(Enrollment) AS Total_Enrollment FROM university WHERE Founded > 1850 GROUP BY Affiliation", "source_tables": ["university"], "error_info": ""}, {"sample_id": 1016, "db_id": "university_basketball", "score": 1, "gold_sql": "SELECT SUM(Enrollment), affiliation FROM university WHERE founded > 1850 GROUP BY affiliation", "pred_sql": "SELECT Affiliation, SUM(Enrollment) AS Total_Enrollment FROM university WHERE Founded > 1850 GROUP BY Affiliation", "source_tables": ["university"], "error_info": ""}, {"sample_id": 1017, "db_id": "university_basketball", "score": 1, "gold_sql": "SELECT MAX(Enrollment) FROM university", "pred_sql": "SELECT MAX(Enrollment) AS Max_Enrollment FROM university", "source_tables": ["university"], "error_info": ""}, {"sample_id": 1018, "db_id": "university_basketball", "score": 1, "gold_sql": "SELECT MAX(Enrollment) FROM university", "pred_sql": "SELECT MAX(Enrollment) AS Max_Enrollment FROM university", "source_tables": ["university"], "error_info": ""}, {"sample_id": 1019, "db_id": "university_basketball", "score": 1, "gold_sql": "SELECT * FROM basketball_match", "pred_sql": "SELECT * FROM basketball_match", "source_tables": ["basketball_match"], "error_info": ""}, {"sample_id": 1020, "db_id": "university_basketball", "score": 1, "gold_sql": "SELECT * FROM basketball_match", "pred_sql": "SELECT * FROM basketball_match", "source_tables": ["basketball_match"], "error_info": ""}, {"sample_id": 1021, "db_id": "university_basketball", "score": 1, "gold_sql": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC", "pred_sql": "SELECT Team_Name FROM basketball_match ORDER BY All_Home DESC", "source_tables": ["basketball_match"], "error_info": ""}, {"sample_id": 1022, "db_id": "university_basketball", "score": 1, "gold_sql": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC", "pred_sql": "SELECT Team_Name FROM basketball_match ORDER BY All_Home DESC", "source_tables": ["basketball_match"], "error_info": ""}, {"sample_id": 1023, "db_id": "phone_1", "score": 1, "gold_sql": "SELECT Model_name FROM chip_model WHERE Launch_year BETWEEN 2002 AND 2004", "pred_sql": "SELECT Model_name FROM chip_model WHERE Launch_year BETWEEN '2002' AND '2004'", "source_tables": ["chip_model"], "error_info": ""}, {"sample_id": 1024, "db_id": "phone_1", "score": 1, "gold_sql": "SELECT Model_name, RAM_MiB FROM chip_model ORDER BY RAM_MiB ASC LIMIT 1", "pred_sql": "SELECT Model_name, RAM_MiB FROM chip_model ORDER BY CAST(RAM_MiB AS INT) ASC LIMIT 1", "source_tables": ["chip_model"], "error_info": ""}, {"sample_id": 1025, "db_id": "phone_1", "score": 0, "gold_sql": "SELECT chip_model, screen_mode FROM phone WHERE Hardware_Model_name = 'LG-P760'", "pred_sql": "SELECT chip_model.Model_name, screen_mode.Graphics_mode FROM phone JOIN chip_model ON phone.chip_model = chip_model.Model_name JOIN screen_mode ON phone.screen_mode = screen_mode.Graphics_mode WHERE phone.Hardware_Model_name = 'LG-P760'", "source_tables": ["phone"], "error_info": "Result not equal"}, {"sample_id": 1026, "db_id": "phone_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM phone WHERE Company_name = 'Nokia Corporation'", "pred_sql": "SELECT COUNT(DISTINCT Hardware_Model_name) AS Number_of_Hardware_Models FROM phone WHERE Company_name = 'Nokia Corporation'", "source_tables": ["phone"], "error_info": ""}, {"sample_id": 1027, "db_id": "phone_1", "score": 1, "gold_sql": "SELECT MAX(T1.RAM_MiB), MIN(T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T2.Company_name = 'Nokia Corporation'", "pred_sql": "SELECT MAX(c.RAM_MiB) AS Max_RAM, MIN(c.RAM_MiB) AS Min_RAM FROM phone AS p JOIN chip_model AS c ON p.chip_model = c.Model_name WHERE p.Company_name = 'Nokia Corporation'", "source_tables": ["phone", "chip_model"], "error_info": ""}, {"sample_id": 1028, "db_id": "phone_1", "score": 1, "gold_sql": "SELECT AVG(T1.ROM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T2.Company_name = 'Nokia Corporation'", "pred_sql": "SELECT AVG(chip_model.ROM_MiB) AS average_ROM_size FROM phone JOIN chip_model ON phone.chip_model = chip_model.Model_name WHERE phone.Company_name = 'Nokia Corporation'", "source_tables": ["phone", "chip_model"], "error_info": ""}, {"sample_id": 1029, "db_id": "phone_1", "score": 1, "gold_sql": "SELECT T2.Hardware_Model_name, T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T1.Launch_year = 2002 OR T1.RAM_MiB > 32", "pred_sql": "SELECT phone.Hardware_Model_name, phone.Company_name FROM phone JOIN chip_model ON phone.chip_model = chip_model.Model_name WHERE chip_model.Launch_year = '2002' OR chip_model.RAM_MiB > '32'", "source_tables": ["phone", "chip_model"], "error_info": ""}, {"sample_id": 1030, "db_id": "phone_1", "score": 1, "gold_sql": "SELECT Hardware_Model_name, Company_name FROM phone WHERE Accreditation_type LIKE 'Full'", "pred_sql": "SELECT Company_name, Hardware_Model_name FROM phone WHERE Accreditation_type LIKE '%Full%'", "source_tables": ["phone"], "error_info": ""}, {"sample_id": 1031, "db_id": "phone_1", "score": 1, "gold_sql": "SELECT T1.Char_cells, T1.Pixels, T1.Hardware_colours FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Hardware_Model_name = 'LG-P760'", "pred_sql": "SELECT sm.Char_cells, sm.Pixels, sm.Hardware_colours FROM phone AS p JOIN screen_mode AS sm ON p.screen_mode = sm.Graphics_mode WHERE p.Hardware_Model_name = 'LG-P760'", "source_tables": ["phone", "screen_mode"], "error_info": ""}, {"sample_id": 1032, "db_id": "phone_1", "score": 1, "gold_sql": "SELECT T2.Hardware_Model_name, T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type = 'Graphics'", "pred_sql": "SELECT phone.Hardware_Model_name, phone.Company_name FROM phone JOIN screen_mode ON phone.screen_mode = screen_mode.Graphics_mode WHERE screen_mode.Type = 'Graphics'", "source_tables": ["phone", "screen_mode"], "error_info": ""}, {"sample_id": 1033, "db_id": "phone_1", "score": 1, "gold_sql": "SELECT Company_name, COUNT(*) FROM phone GROUP BY Company_name ORDER BY COUNT(*) ASC LIMIT 1", "pred_sql": "SELECT Company_name, COUNT(*) AS number_of_models FROM phone GROUP BY Company_name ORDER BY number_of_models ASC LIMIT 1", "source_tables": ["phone"], "error_info": ""}, {"sample_id": 1034, "db_id": "phone_1", "score": 1, "gold_sql": "SELECT Company_name FROM phone GROUP BY Company_name HAVING COUNT(*) > 1", "pred_sql": "SELECT Company_name FROM phone GROUP BY Company_name HAVING COUNT(Hardware_Model_name) > 1", "source_tables": ["phone"], "error_info": ""}, {"sample_id": 1035, "db_id": "phone_1", "score": 1, "gold_sql": "SELECT MAX(used_kb), MIN(used_kb), AVG(used_kb) FROM screen_mode", "pred_sql": "SELECT MAX(used_kb) AS max_used_kb, MIN(used_kb) AS min_used_kb, AVG(used_kb) AS avg_used_kb FROM screen_mode", "source_tables": ["screen_mode"], "error_info": ""}, {"sample_id": 1036, "db_id": "phone_1", "score": 1, "gold_sql": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1", "pred_sql": "SELECT p.Hardware_Model_name FROM phone AS p JOIN chip_model AS c ON p.chip_model = c.Model_name WHERE c.Launch_year = '2002' ORDER BY c.RAM_MiB DESC LIMIT 1", "source_tables": ["phone", "chip_model"], "error_info": ""}, {"sample_id": 1037, "db_id": "phone_1", "score": 1, "gold_sql": "SELECT T1.WiFi, T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = 'LG-P760'", "pred_sql": "SELECT chip_model.WiFi, screen_mode.Type FROM phone JOIN chip_model ON phone.chip_model = chip_model.Model_name JOIN screen_mode ON phone.screen_mode = screen_mode.Graphics_mode WHERE phone.Hardware_Model_name = 'LG-P760'", "source_tables": ["phone", "screen_mode", "chip_model"], "error_info": ""}, {"sample_id": 1038, "db_id": "phone_1", "score": 1, "gold_sql": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T3.Type = 'Text' OR T1.RAM_MiB > 32", "pred_sql": "SELECT Hardware_Model_name FROM phone WHERE screen_mode IN (SELECT Graphics_mode FROM screen_mode WHERE Type = 'Text') OR chip_model IN (SELECT Model_name FROM chip_model WHERE RAM_MiB > '32')", "source_tables": ["phone", "screen_mode", "chip_model"], "error_info": ""}, {"sample_id": 1039, "db_id": "phone_1", "score": 1, "gold_sql": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type = 'Graphics' OR t2.Company_name = 'Nokia Corporation'", "pred_sql": "SELECT Hardware_Model_name FROM phone WHERE Company_name = 'Nokia Corporation' OR screen_mode IN (SELECT Graphics_mode FROM screen_mode WHERE Type = 'Graphics')", "source_tables": ["phone", "screen_mode"], "error_info": ""}, {"sample_id": 1040, "db_id": "phone_1", "score": 1, "gold_sql": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE t2.Company_name = 'Nokia Corporation' AND T1.Type <> 'Text'", "pred_sql": "SELECT Hardware_Model_name FROM phone WHERE Company_name = 'Nokia Corporation' AND NOT screen_mode IN (SELECT Graphics_mode FROM screen_mode WHERE Type = 'Text')", "source_tables": ["phone", "screen_mode"], "error_info": ""}, {"sample_id": 1041, "db_id": "phone_1", "score": 1, "gold_sql": "SELECT DISTINCT T2.Hardware_Model_name, T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.used_kb BETWEEN 10 AND 15", "pred_sql": "SELECT phone.Hardware_Model_name, phone.Company_name FROM phone JOIN screen_mode ON phone.screen_mode = screen_mode.Graphics_mode WHERE screen_mode.used_kb BETWEEN '10' AND '15'", "source_tables": ["phone", "screen_mode"], "error_info": ""}, {"sample_id": 1042, "db_id": "phone_1", "score": 1, "gold_sql": "SELECT Accreditation_type, COUNT(*) FROM phone GROUP BY Accreditation_type", "pred_sql": "SELECT Accreditation_type, COUNT(*) AS number_of_phones FROM phone GROUP BY Accreditation_type", "source_tables": ["phone"], "error_info": ""}, {"sample_id": 1043, "db_id": "phone_1", "score": 1, "gold_sql": "SELECT Accreditation_type, COUNT(*) FROM phone GROUP BY Accreditation_type", "pred_sql": "SELECT Accreditation_type, COUNT(*) AS phone_count FROM phone GROUP BY Accreditation_type", "source_tables": ["phone"], "error_info": ""}, {"sample_id": 1044, "db_id": "phone_1", "score": 1, "gold_sql": "SELECT Accreditation_level FROM phone GROUP BY Accreditation_level HAVING COUNT(*) > 3", "pred_sql": "SELECT Accreditation_level FROM phone GROUP BY Accreditation_level HAVING COUNT(*) > 3", "source_tables": ["phone"], "error_info": ""}, {"sample_id": 1045, "db_id": "phone_1", "score": 1, "gold_sql": "SELECT * FROM chip_model", "pred_sql": "SELECT * FROM chip_model", "source_tables": ["chip_model"], "error_info": ""}, {"sample_id": 1046, "db_id": "phone_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM chip_model WHERE wifi = 'No'", "pred_sql": "SELECT COUNT(*) AS model_count FROM chip_model WHERE WiFi = 'No'", "source_tables": ["chip_model"], "error_info": ""}, {"sample_id": 1047, "db_id": "phone_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM chip_model WHERE wifi = 'No'", "pred_sql": "SELECT COUNT(*) FROM chip_model WHERE WiFi = 'No'", "source_tables": ["chip_model"], "error_info": ""}, {"sample_id": 1048, "db_id": "phone_1", "score": 1, "gold_sql": "SELECT model_name FROM chip_model ORDER BY launch_year", "pred_sql": "SELECT Model_name FROM chip_model ORDER BY Launch_year", "source_tables": ["chip_model"], "error_info": ""}, {"sample_id": 1049, "db_id": "phone_1", "score": 1, "gold_sql": "SELECT AVG(RAM_MiB) FROM chip_model WHERE NOT model_name IN (SELECT chip_model FROM phone)", "pred_sql": "SELECT AVG(CAST(RAM_MiB AS INT)) AS average_ram_mib FROM chip_model WHERE NOT Model_name IN (SELECT DISTINCT chip_model FROM phone)", "source_tables": ["phone", "chip_model"], "error_info": ""}, {"sample_id": 1050, "db_id": "phone_1", "score": 0, "gold_sql": "SELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE Accreditation_type = 'Full'", "pred_sql": "SELECT Model_name FROM chip_model WHERE NOT Model_name IN (SELECT chip_model FROM phone WHERE Accreditation_type = 'full')", "source_tables": ["phone", "chip_model"], "error_info": "Result not equal"}, {"sample_id": 1051, "db_id": "phone_1", "score": 0, "gold_sql": "SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode = t2.screen_mode WHERE t2.Accreditation_type = 'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode = t2.screen_mode WHERE t2.Accreditation_type = 'Full'", "pred_sql": "SELECT DISTINCT sm.Pixels FROM screen_mode AS sm JOIN phone AS p ON sm.Graphics_mode = p.screen_mode WHERE p.Accreditation_type = 'full' OR p.Accreditation_type = 'Provisional'", "source_tables": ["phone", "screen_mode"], "error_info": "Result not equal"}, {"sample_id": 1052, "db_id": "match_season", "score": 1, "gold_sql": "SELECT COUNT(*) FROM country", "pred_sql": "SELECT COUNT(*) AS total_countries FROM country", "source_tables": ["country"], "error_info": ""}, {"sample_id": 1053, "db_id": "match_season", "score": 1, "gold_sql": "SELECT COUNT(*) FROM country", "pred_sql": "SELECT COUNT(*) AS country_count FROM country", "source_tables": ["country"], "error_info": ""}, {"sample_id": 1054, "db_id": "match_season", "score": 1, "gold_sql": "SELECT Country_name, Capital FROM country", "pred_sql": "SELECT Country_name, Capital FROM country", "source_tables": ["country"], "error_info": ""}, {"sample_id": 1055, "db_id": "match_season", "score": 1, "gold_sql": "SELECT Country_name, Capital FROM country", "pred_sql": "SELECT Country_name, Capital FROM country", "source_tables": ["country"], "error_info": ""}, {"sample_id": 1056, "db_id": "match_season", "score": 1, "gold_sql": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE '%English%'", "pred_sql": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE '%English%'", "source_tables": ["country"], "error_info": ""}, {"sample_id": 1057, "db_id": "match_season", "score": 1, "gold_sql": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE '%English%'", "pred_sql": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE '%English%'", "source_tables": ["country"], "error_info": ""}, {"sample_id": 1058, "db_id": "match_season", "score": 1, "gold_sql": "SELECT DISTINCT POSITION FROM match_season", "pred_sql": "SELECT DISTINCT Position FROM match_season", "source_tables": ["match_season"], "error_info": ""}, {"sample_id": 1059, "db_id": "match_season", "score": 1, "gold_sql": "SELECT DISTINCT POSITION FROM match_season", "pred_sql": "SELECT DISTINCT Position FROM match_season", "source_tables": ["match_season"], "error_info": ""}, {"sample_id": 1060, "db_id": "match_season", "score": 0, "gold_sql": "SELECT Player FROM match_season WHERE College = 'UCLA'", "pred_sql": "SELECT Player FROM player WHERE Team IN (SELECT Team_id FROM match_season WHERE College = 'UCLA')", "source_tables": ["match_season"], "error_info": "Predction Execution Error:no such column: Team_id"}, {"sample_id": 1061, "db_id": "match_season", "score": 1, "gold_sql": "SELECT Player FROM match_season WHERE College = 'UCLA'", "pred_sql": "SELECT Player FROM match_season WHERE College = 'UCLA'", "source_tables": ["match_season"], "error_info": ""}, {"sample_id": 1062, "db_id": "match_season", "score": 1, "gold_sql": "SELECT DISTINCT POSITION FROM match_season WHERE College = 'UCLA' OR College = 'Duke'", "pred_sql": "SELECT DISTINCT Position FROM match_season WHERE College IN ('UCLA', 'Duke')", "source_tables": ["match_season"], "error_info": ""}, {"sample_id": 1063, "db_id": "match_season", "score": 1, "gold_sql": "SELECT DISTINCT POSITION FROM match_season WHERE College = 'UCLA' OR College = 'Duke'", "pred_sql": "SELECT DISTINCT Position FROM match_season WHERE College IN ('UCLA', 'Duke')", "source_tables": ["match_season"], "error_info": ""}, {"sample_id": 1064, "db_id": "match_season", "score": 0, "gold_sql": "SELECT Draft_Pick_Number, Draft_Class FROM match_season WHERE POSITION = 'Defender'", "pred_sql": "SELECT Draft_Pick_Number, Draft_Class FROM match_season WHERE Position = 'defender'", "source_tables": ["match_season"], "error_info": "Result not equal"}, {"sample_id": 1065, "db_id": "match_season", "score": 1, "gold_sql": "SELECT Draft_Pick_Number, Draft_Class FROM match_season WHERE POSITION = 'Defender'", "pred_sql": "SELECT Draft_Pick_Number, Draft_Class FROM match_season WHERE Position = 'Defender'", "source_tables": ["match_season"], "error_info": ""}, {"sample_id": 1066, "db_id": "match_season", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT Team) FROM match_season", "pred_sql": "SELECT COUNT(DISTINCT Team) AS Distinct_Teams FROM match_season", "source_tables": ["match_season"], "error_info": ""}, {"sample_id": 1067, "db_id": "match_season", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT Team) FROM match_season", "pred_sql": "SELECT COUNT(DISTINCT Team) AS NumberOfTeams FROM match_season", "source_tables": ["match_season"], "error_info": ""}, {"sample_id": 1068, "db_id": "match_season", "score": 1, "gold_sql": "SELECT Player, Years_Played FROM player", "pred_sql": "SELECT Player, Years_Played FROM player", "source_tables": ["player"], "error_info": ""}, {"sample_id": 1069, "db_id": "match_season", "score": 1, "gold_sql": "SELECT Player, Years_Played FROM player", "pred_sql": "SELECT Player, Years_Played FROM player", "source_tables": ["player"], "error_info": ""}, {"sample_id": 1070, "db_id": "match_season", "score": 1, "gold_sql": "SELECT Name FROM Team", "pred_sql": "SELECT Name FROM team", "source_tables": ["team"], "error_info": ""}, {"sample_id": 1071, "db_id": "match_season", "score": 1, "gold_sql": "SELECT Name FROM Team", "pred_sql": "SELECT Name FROM team", "source_tables": ["team"], "error_info": ""}, {"sample_id": 1072, "db_id": "match_season", "score": 1, "gold_sql": "SELECT T2.Season, T2.Player, T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country", "pred_sql": "SELECT match_season.Season, match_season.Player, country.Country_name FROM match_season JOIN country ON match_season.Country = country.Country_id", "source_tables": ["country", "match_season"], "error_info": ""}, {"sample_id": 1073, "db_id": "match_season", "score": 0, "gold_sql": "SELECT T2.Season, T2.Player, T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country", "pred_sql": "SELECT player.Player, match_season.Season, match_season.Country FROM player JOIN match_season ON player.Player = match_season.Player", "source_tables": ["country", "match_season"], "error_info": "Result not equal"}, {"sample_id": 1074, "db_id": "match_season", "score": 1, "gold_sql": "SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T1.Country_name = 'Indonesia'", "pred_sql": "SELECT Player FROM match_season WHERE Country = (SELECT Country_id FROM country WHERE Country_name = 'Indonesia')", "source_tables": ["country", "match_season"], "error_info": ""}, {"sample_id": 1075, "db_id": "match_season", "score": 1, "gold_sql": "SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T1.Country_name = 'Indonesia'", "pred_sql": "SELECT Player FROM match_season WHERE Country = (SELECT Country_id FROM country WHERE Country_name = 'Indonesia')", "source_tables": ["country", "match_season"], "error_info": ""}, {"sample_id": 1076, "db_id": "match_season", "score": 1, "gold_sql": "SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T1.Capital = 'Dublin'", "pred_sql": "SELECT DISTINCT ms.Position FROM match_season AS ms JOIN country AS c ON ms.Country = c.Country_id WHERE c.Capital = 'Dublin'", "source_tables": ["country", "match_season"], "error_info": ""}, {"sample_id": 1077, "db_id": "match_season", "score": 1, "gold_sql": "SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T1.Capital = 'Dublin'", "pred_sql": "SELECT DISTINCT ms.Position FROM match_season AS ms JOIN country AS c ON ms.Country = c.Country_id WHERE c.Capital = 'Dublin'", "source_tables": ["country", "match_season"], "error_info": ""}, {"sample_id": 1078, "db_id": "match_season", "score": 1, "gold_sql": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.College = 'Maryland' OR T2.College = 'Duke'", "pred_sql": "SELECT DISTINCT c.Official_native_language FROM country AS c JOIN match_season AS ms ON c.Country_id = ms.Country WHERE ms.College IN ('Maryland', 'Duke')", "source_tables": ["country", "match_season"], "error_info": ""}, {"sample_id": 1079, "db_id": "match_season", "score": 1, "gold_sql": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.College = 'Maryland' OR T2.College = 'Duke'", "pred_sql": "SELECT DISTINCT c.Official_native_language FROM country AS c JOIN match_season AS ms ON c.Country_id = ms.Country WHERE ms.College IN ('Maryland', 'Duke')", "source_tables": ["country", "match_season"], "error_info": ""}, {"sample_id": 1080, "db_id": "match_season", "score": 0, "gold_sql": "SELECT COUNT(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = 'Defender'", "pred_sql": "SELECT COUNT(DISTINCT c.Official_native_language) AS distinct_languages FROM match_season AS ms JOIN country AS c ON ms.Country = c.Country_id WHERE ms.Position = 'defender'", "source_tables": ["country", "match_season"], "error_info": "Result not equal"}, {"sample_id": 1081, "db_id": "match_season", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = 'Defender'", "pred_sql": "SELECT COUNT(DISTINCT c.Official_native_language) AS Different_Languages FROM match_season AS ms JOIN country AS c ON ms.Country = c.Country_id WHERE ms.Position = 'Defender'", "source_tables": ["country", "match_season"], "error_info": ""}, {"sample_id": 1082, "db_id": "match_season", "score": 0, "gold_sql": "SELECT T1.Season, T1.Player, T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id", "pred_sql": "SELECT match_season.Season, match_season.Player, match_season.Team FROM match_season", "source_tables": ["team", "match_season"], "error_info": "Result not equal"}, {"sample_id": 1083, "db_id": "match_season", "score": 0, "gold_sql": "SELECT T1.Season, T1.Player, T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id", "pred_sql": "SELECT match_season.Player, match_season.Season, match_season.Team FROM match_season", "source_tables": ["team", "match_season"], "error_info": "Result not equal"}, {"sample_id": 1084, "db_id": "match_season", "score": 1, "gold_sql": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = 'Ryley Goldner'", "pred_sql": "SELECT Position FROM match_season WHERE Team = (SELECT Team_id FROM team WHERE Name = 'Ryley Goldner')", "source_tables": ["team", "match_season"], "error_info": ""}, {"sample_id": 1085, "db_id": "match_season", "score": 1, "gold_sql": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = 'Ryley Goldner'", "pred_sql": "SELECT Position FROM match_season WHERE Team = (SELECT Team_id FROM team WHERE Name = 'Ryley Goldner')", "source_tables": ["team", "match_season"], "error_info": ""}, {"sample_id": 1086, "db_id": "match_season", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = 'Columbus Crew'", "pred_sql": "SELECT COUNT(DISTINCT College) AS distinct_colleges_count FROM match_season WHERE Team = (SELECT Team_id FROM team WHERE Name = 'Columbus Crew')", "source_tables": ["team", "match_season"], "error_info": ""}, {"sample_id": 1087, "db_id": "match_season", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = 'Columbus Crew'", "pred_sql": "SELECT COUNT(DISTINCT College) AS Different_Colleges FROM match_season WHERE Team = (SELECT Team_id FROM team WHERE Name = 'Columbus Crew')", "source_tables": ["team", "match_season"], "error_info": ""}, {"sample_id": 1088, "db_id": "match_season", "score": 1, "gold_sql": "SELECT T1.Player, T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = 'Columbus Crew'", "pred_sql": "SELECT player.Player, player.Years_Played FROM player JOIN team ON player.Team = team.Team_id WHERE team.Name = 'Columbus Crew'", "source_tables": ["team", "player"], "error_info": ""}, {"sample_id": 1089, "db_id": "match_season", "score": 1, "gold_sql": "SELECT T1.Player, T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = 'Columbus Crew'", "pred_sql": "SELECT player.Player, player.Years_Played FROM player JOIN team ON player.Team = team.Team_id WHERE team.Name = 'Columbus Crew'", "source_tables": ["team", "player"], "error_info": ""}, {"sample_id": 1090, "db_id": "match_season", "score": 1, "gold_sql": "SELECT POSITION, COUNT(*) FROM match_season GROUP BY POSITION", "pred_sql": "SELECT Position, COUNT(*) AS Number_of_Players FROM match_season GROUP BY Position", "source_tables": ["match_season"], "error_info": ""}, {"sample_id": 1091, "db_id": "match_season", "score": 1, "gold_sql": "SELECT POSITION, COUNT(*) FROM match_season GROUP BY POSITION", "pred_sql": "SELECT Position, COUNT(*) AS Number_of_Players FROM match_season GROUP BY Position", "source_tables": ["match_season"], "error_info": ""}, {"sample_id": 1092, "db_id": "match_season", "score": 0, "gold_sql": "SELECT Country_name, COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country GROUP BY T1.Country_name", "pred_sql": "SELECT c.Country_name, COUNT(p.Player_ID) AS Number_of_Players FROM country AS c LEFT JOIN match_season AS ms ON c.Country_id = ms.Country LEFT JOIN player AS p ON ms.Player = p.Player GROUP BY c.Country_name", "source_tables": ["country", "match_season"], "error_info": "Result not equal"}, {"sample_id": 1093, "db_id": "match_season", "score": 0, "gold_sql": "SELECT Country_name, COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country GROUP BY T1.Country_name", "pred_sql": "SELECT Country, COUNT(Player) AS Number_of_Players FROM match_season GROUP BY Country", "source_tables": ["country", "match_season"], "error_info": "Result not equal"}, {"sample_id": 1094, "db_id": "match_season", "score": 0, "gold_sql": "SELECT player FROM match_season ORDER BY College ASC", "pred_sql": "SELECT * FROM player ORDER BY College ASC", "source_tables": ["match_season"], "error_info": "Predction Execution Error:no such column: College"}, {"sample_id": 1095, "db_id": "match_season", "score": 1, "gold_sql": "SELECT player FROM match_season ORDER BY College ASC", "pred_sql": "SELECT Player FROM match_season ORDER BY College ASC", "source_tables": ["match_season"], "error_info": ""}, {"sample_id": 1096, "db_id": "match_season", "score": 0, "gold_sql": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Position, COUNT(*) AS Position_Count FROM match_season GROUP BY Position ORDER BY Position_Count DESC LIMIT 1", "source_tables": ["match_season"], "error_info": "Result not equal"}, {"sample_id": 1097, "db_id": "match_season", "score": 0, "gold_sql": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Position, COUNT(*) AS Position_Count FROM match_season GROUP BY Position ORDER BY Position_Count DESC LIMIT 1", "source_tables": ["match_season"], "error_info": "Result not equal"}, {"sample_id": 1098, "db_id": "match_season", "score": 0, "gold_sql": "SELECT College FROM match_season GROUP BY College ORDER BY COUNT(*) DESC LIMIT 3", "pred_sql": "SELECT College, COUNT(*) AS College_Count FROM match_season GROUP BY College ORDER BY College_Count DESC LIMIT 3", "source_tables": ["match_season"], "error_info": "Result not equal"}, {"sample_id": 1099, "db_id": "match_season", "score": 0, "gold_sql": "SELECT College FROM match_season GROUP BY College ORDER BY COUNT(*) DESC LIMIT 3", "pred_sql": "SELECT College, COUNT(*) AS Player_Count FROM match_season GROUP BY College ORDER BY Player_Count DESC LIMIT 3", "source_tables": ["match_season"], "error_info": "Result not equal"}, {"sample_id": 1100, "db_id": "match_season", "score": 1, "gold_sql": "SELECT College FROM match_season GROUP BY College HAVING COUNT(*) >= 2", "pred_sql": "SELECT College FROM match_season GROUP BY College HAVING COUNT(Player) >= 2", "source_tables": ["match_season"], "error_info": ""}, {"sample_id": 1101, "db_id": "match_season", "score": 1, "gold_sql": "SELECT College FROM match_season GROUP BY College HAVING COUNT(*) >= 2", "pred_sql": "SELECT College FROM match_season GROUP BY College HAVING COUNT(Player) >= 2", "source_tables": ["match_season"], "error_info": ""}, {"sample_id": 1102, "db_id": "match_season", "score": 1, "gold_sql": "SELECT College FROM match_season GROUP BY College HAVING COUNT(*) >= 2 ORDER BY College DESC", "pred_sql": "SELECT College FROM match_season GROUP BY College HAVING COUNT(Player) >= 2 ORDER BY College DESC", "source_tables": ["match_season"], "error_info": ""}, {"sample_id": 1103, "db_id": "match_season", "score": 1, "gold_sql": "SELECT College FROM match_season GROUP BY College HAVING COUNT(*) >= 2 ORDER BY College DESC", "pred_sql": "SELECT College FROM match_season GROUP BY College HAVING COUNT(Player) >= 2 ORDER BY College DESC", "source_tables": ["match_season"], "error_info": ""}, {"sample_id": 1104, "db_id": "match_season", "score": 1, "gold_sql": "SELECT Name FROM team WHERE NOT Team_id IN (SELECT Team FROM match_season)", "pred_sql": "SELECT Name FROM team WHERE NOT Team_id IN (SELECT DISTINCT Team FROM match_season)", "source_tables": ["team", "match_season"], "error_info": ""}, {"sample_id": 1105, "db_id": "match_season", "score": 1, "gold_sql": "SELECT Name FROM team WHERE NOT Team_id IN (SELECT Team FROM match_season)", "pred_sql": "SELECT Name FROM team WHERE NOT Team_id IN (SELECT DISTINCT Team FROM match_season)", "source_tables": ["team", "match_season"], "error_info": ""}, {"sample_id": 1106, "db_id": "match_season", "score": 0, "gold_sql": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = 'Forward' INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = 'Defender'", "pred_sql": "SELECT DISTINCT c.Country_name FROM country AS c JOIN match_season AS ms ON c.Country_id = ms.Country WHERE ms.Position IN ('forward', 'defender') GROUP BY c.Country_name HAVING COUNT(DISTINCT ms.Position) = 2", "source_tables": ["country", "match_season"], "error_info": "Result not equal"}, {"sample_id": 1107, "db_id": "match_season", "score": 0, "gold_sql": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = 'Forward' INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = 'Defender'", "pred_sql": "SELECT DISTINCT c.Country_name FROM country AS c JOIN match_season AS ms ON c.Country_id = ms.Country WHERE ms.Position IN ('Forward', 'Defender')", "source_tables": ["country", "match_season"], "error_info": "Result not equal"}, {"sample_id": 1108, "db_id": "match_season", "score": 0, "gold_sql": "SELECT College FROM match_season WHERE POSITION = 'Midfielder' INTERSECT SELECT College FROM match_season WHERE POSITION = 'Defender'", "pred_sql": "SELECT DISTINCT College FROM match_season WHERE College IN (SELECT College FROM match_season WHERE Position = 'midfielder') AND College IN (SELECT College FROM match_season WHERE Position = 'defender')", "source_tables": ["match_season"], "error_info": "Result not equal"}, {"sample_id": 1109, "db_id": "match_season", "score": 0, "gold_sql": "SELECT College FROM match_season WHERE POSITION = 'Midfielder' INTERSECT SELECT College FROM match_season WHERE POSITION = 'Defender'", "pred_sql": "SELECT DISTINCT College FROM match_season WHERE Position IN ('Midfielder', 'Defender')", "source_tables": ["match_season"], "error_info": "Result not equal"}, {"sample_id": 1110, "db_id": "climbing", "score": 1, "gold_sql": "SELECT COUNT(*) FROM climber", "pred_sql": "SELECT COUNT(*) AS NumberOfClimbers FROM climber", "source_tables": ["climber"], "error_info": ""}, {"sample_id": 1111, "db_id": "climbing", "score": 1, "gold_sql": "SELECT COUNT(*) FROM climber", "pred_sql": "SELECT COUNT(*) AS NumberOfClimbers FROM climber", "source_tables": ["climber"], "error_info": ""}, {"sample_id": 1112, "db_id": "climbing", "score": 1, "gold_sql": "SELECT Name FROM climber ORDER BY Points DESC", "pred_sql": "SELECT Name FROM climber ORDER BY Points DESC", "source_tables": ["climber"], "error_info": ""}, {"sample_id": 1113, "db_id": "climbing", "score": 1, "gold_sql": "SELECT Name FROM climber ORDER BY Points DESC", "pred_sql": "SELECT Name FROM climber ORDER BY Points DESC", "source_tables": ["climber"], "error_info": ""}, {"sample_id": 1114, "db_id": "climbing", "score": 1, "gold_sql": "SELECT Name FROM climber WHERE Country <> 'Switzerland'", "pred_sql": "SELECT Name FROM climber WHERE Country <> 'Switzerland'", "source_tables": ["climber"], "error_info": ""}, {"sample_id": 1115, "db_id": "climbing", "score": 1, "gold_sql": "SELECT Name FROM climber WHERE Country <> 'Switzerland'", "pred_sql": "SELECT Name FROM climber WHERE Country <> 'Switzerland'", "source_tables": ["climber"], "error_info": ""}, {"sample_id": 1116, "db_id": "climbing", "score": 1, "gold_sql": "SELECT MAX(Points) FROM climber WHERE Country = 'United Kingdom'", "pred_sql": "SELECT MAX(Points) AS Max_Points FROM climber WHERE Country = 'United Kingdom'", "source_tables": ["climber"], "error_info": ""}, {"sample_id": 1117, "db_id": "climbing", "score": 1, "gold_sql": "SELECT MAX(Points) FROM climber WHERE Country = 'United Kingdom'", "pred_sql": "SELECT MAX(Points) AS Max_Points FROM climber WHERE Country = 'United Kingdom'", "source_tables": ["climber"], "error_info": ""}, {"sample_id": 1118, "db_id": "climbing", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT Country) FROM climber", "pred_sql": "SELECT COUNT(DISTINCT Country) AS Distinct_Countries FROM climber", "source_tables": ["climber"], "error_info": ""}, {"sample_id": 1119, "db_id": "climbing", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT Country) FROM climber", "pred_sql": "SELECT COUNT(DISTINCT Country) AS NumberOfCountries FROM climber", "source_tables": ["climber"], "error_info": ""}, {"sample_id": 1120, "db_id": "climbing", "score": 1, "gold_sql": "SELECT Name FROM mountain ORDER BY Name ASC", "pred_sql": "SELECT Name FROM mountain ORDER BY Name ASC", "source_tables": ["mountain"], "error_info": ""}, {"sample_id": 1121, "db_id": "climbing", "score": 1, "gold_sql": "SELECT Name FROM mountain ORDER BY Name ASC", "pred_sql": "SELECT Name FROM mountain ORDER BY Name ASC", "source_tables": ["mountain"], "error_info": ""}, {"sample_id": 1122, "db_id": "climbing", "score": 0, "gold_sql": "SELECT Country FROM mountain WHERE Height > 5000", "pred_sql": "SELECT DISTINCT Country FROM mountain WHERE Height > '5000'", "source_tables": ["mountain"], "error_info": "Result not equal"}, {"sample_id": 1123, "db_id": "climbing", "score": 0, "gold_sql": "SELECT Country FROM mountain WHERE Height > 5000", "pred_sql": "SELECT DISTINCT Country FROM mountain WHERE Height > '5000'", "source_tables": ["mountain"], "error_info": "Result not equal"}, {"sample_id": 1124, "db_id": "climbing", "score": 1, "gold_sql": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1", "pred_sql": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1", "source_tables": ["mountain"], "error_info": ""}, {"sample_id": 1125, "db_id": "climbing", "score": 1, "gold_sql": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1", "pred_sql": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1", "source_tables": ["mountain"], "error_info": ""}, {"sample_id": 1126, "db_id": "climbing", "score": 1, "gold_sql": "SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3", "pred_sql": "SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3", "source_tables": ["mountain"], "error_info": ""}, {"sample_id": 1127, "db_id": "climbing", "score": 1, "gold_sql": "SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3", "pred_sql": "SELECT DISTINCT Range FROM mountain ORDER BY CAST(Prominence AS INT) DESC LIMIT 3", "source_tables": ["mountain"], "error_info": ""}, {"sample_id": 1128, "db_id": "climbing", "score": 1, "gold_sql": "SELECT T1.Name, T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID", "pred_sql": "SELECT climber.Name AS Climber_Name, mountain.Name AS Mountain_Name FROM climber JOIN mountain ON climber.Mountain_ID = mountain.Mountain_ID", "source_tables": ["mountain", "climber"], "error_info": ""}, {"sample_id": 1129, "db_id": "climbing", "score": 1, "gold_sql": "SELECT T1.Name, T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID", "pred_sql": "SELECT climber.Name AS Climber_Name, mountain.Name AS Mountain_Name FROM climber JOIN mountain ON climber.Mountain_ID = mountain.Mountain_ID", "source_tables": ["mountain", "climber"], "error_info": ""}, {"sample_id": 1130, "db_id": "climbing", "score": 1, "gold_sql": "SELECT T1.Name, T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID", "pred_sql": "SELECT climber.Name AS Climber_Name, mountain.Height AS Mountain_Height FROM climber JOIN mountain ON climber.Mountain_ID = mountain.Mountain_ID", "source_tables": ["mountain", "climber"], "error_info": ""}, {"sample_id": 1131, "db_id": "climbing", "score": 1, "gold_sql": "SELECT T1.Name, T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID", "pred_sql": "SELECT climber.Name AS Climber_Name, mountain.Height AS Mountain_Height FROM climber JOIN mountain ON climber.Mountain_ID = mountain.Mountain_ID", "source_tables": ["mountain", "climber"], "error_info": ""}, {"sample_id": 1132, "db_id": "climbing", "score": 1, "gold_sql": "SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1", "pred_sql": "SELECT mountain.Height FROM mountain JOIN climber ON mountain.Mountain_ID = climber.Mountain_ID WHERE climber.Points = (SELECT MAX(Points) FROM climber)", "source_tables": ["mountain", "climber"], "error_info": ""}, {"sample_id": 1133, "db_id": "climbing", "score": 1, "gold_sql": "SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1", "pred_sql": "SELECT mountain.Height FROM mountain JOIN climber ON mountain.Mountain_ID = climber.Mountain_ID WHERE climber.Points = (SELECT MAX(Points) FROM climber)", "source_tables": ["mountain", "climber"], "error_info": ""}, {"sample_id": 1134, "db_id": "climbing", "score": 1, "gold_sql": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T1.Country = 'West Germany'", "pred_sql": "SELECT DISTINCT mountain.Name FROM mountain JOIN climber ON mountain.Mountain_ID = climber.Mountain_ID WHERE climber.Country = 'West Germany'", "source_tables": ["mountain", "climber"], "error_info": ""}, {"sample_id": 1135, "db_id": "climbing", "score": 1, "gold_sql": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T1.Country = 'West Germany'", "pred_sql": "SELECT DISTINCT mountain.Name FROM mountain JOIN climber ON mountain.Mountain_ID = climber.Mountain_ID WHERE climber.Country = 'West Germany'", "source_tables": ["mountain", "climber"], "error_info": ""}, {"sample_id": 1136, "db_id": "climbing", "score": 1, "gold_sql": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T2.Country = 'Uganda'", "pred_sql": "SELECT climber.Time FROM climber JOIN mountain ON climber.Mountain_ID = mountain.Mountain_ID WHERE mountain.Country = 'Uganda'", "source_tables": ["mountain", "climber"], "error_info": ""}, {"sample_id": 1137, "db_id": "climbing", "score": 1, "gold_sql": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T2.Country = 'Uganda'", "pred_sql": "SELECT climber.Time FROM climber JOIN mountain ON climber.Mountain_ID = mountain.Mountain_ID WHERE mountain.Country = 'Uganda'", "source_tables": ["mountain", "climber"], "error_info": ""}, {"sample_id": 1138, "db_id": "climbing", "score": 1, "gold_sql": "SELECT Country, COUNT(*) FROM climber GROUP BY Country", "pred_sql": "SELECT Country, COUNT(Climber_ID) AS Number_of_Climbers FROM climber GROUP BY Country", "source_tables": ["climber"], "error_info": ""}, {"sample_id": 1139, "db_id": "climbing", "score": 1, "gold_sql": "SELECT Country, COUNT(*) FROM climber GROUP BY Country", "pred_sql": "SELECT Country, COUNT(Climber_ID) AS Number_of_Climbers FROM climber GROUP BY Country", "source_tables": ["climber"], "error_info": ""}, {"sample_id": 1140, "db_id": "climbing", "score": 1, "gold_sql": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*) > 1", "pred_sql": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(Mountain_ID) > 1", "source_tables": ["mountain"], "error_info": ""}, {"sample_id": 1141, "db_id": "climbing", "score": 1, "gold_sql": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*) > 1", "pred_sql": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(Mountain_ID) > 1", "source_tables": ["mountain"], "error_info": ""}, {"sample_id": 1142, "db_id": "climbing", "score": 1, "gold_sql": "SELECT Name FROM mountain WHERE NOT Mountain_ID IN (SELECT Mountain_ID FROM climber)", "pred_sql": "SELECT Name FROM mountain WHERE NOT Mountain_ID IN (SELECT Mountain_ID FROM climber)", "source_tables": ["mountain", "climber"], "error_info": ""}, {"sample_id": 1143, "db_id": "climbing", "score": 1, "gold_sql": "SELECT Name FROM mountain WHERE NOT Mountain_ID IN (SELECT Mountain_ID FROM climber)", "pred_sql": "SELECT Name FROM mountain WHERE NOT Mountain_ID IN (SELECT Mountain_ID FROM climber)", "source_tables": ["mountain", "climber"], "error_info": ""}, {"sample_id": 1144, "db_id": "climbing", "score": 0, "gold_sql": "SELECT Country FROM mountain WHERE Height > 5600 INTERSECT SELECT Country FROM mountain WHERE Height < 5200", "pred_sql": "SELECT DISTINCT Country FROM mountain WHERE Height > '5600' OR Height < '5200'", "source_tables": ["mountain"], "error_info": "Result not equal"}, {"sample_id": 1145, "db_id": "climbing", "score": 0, "gold_sql": "SELECT Country FROM mountain WHERE Height > 5600 INTERSECT SELECT Country FROM mountain WHERE Height < 5200", "pred_sql": "SELECT DISTINCT Country FROM mountain WHERE Height > 5600 OR Height < 5200", "source_tables": ["mountain"], "error_info": "Result not equal"}, {"sample_id": 1146, "db_id": "climbing", "score": 1, "gold_sql": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["mountain"], "error_info": ""}, {"sample_id": 1147, "db_id": "climbing", "score": 0, "gold_sql": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Range, COUNT(*) AS MountainCount FROM mountain GROUP BY Range ORDER BY MountainCount DESC LIMIT 1", "source_tables": ["mountain"], "error_info": "Result not equal"}, {"sample_id": 1148, "db_id": "climbing", "score": 1, "gold_sql": "SELECT Name FROM mountain WHERE Height > 5000 OR Prominence > 1000", "pred_sql": "SELECT Name FROM mountain WHERE Height > 5000 OR Prominence > 1000", "source_tables": ["mountain"], "error_info": ""}, {"sample_id": 1149, "db_id": "climbing", "score": 1, "gold_sql": "SELECT Name FROM mountain WHERE Height > 5000 OR Prominence > 1000", "pred_sql": "SELECT Name FROM mountain WHERE Height > 5000 OR Prominence > 1000", "source_tables": ["mountain"], "error_info": ""}, {"sample_id": 1150, "db_id": "body_builder", "score": 1, "gold_sql": "SELECT COUNT(*) FROM body_builder", "pred_sql": "SELECT COUNT(*) AS NumberOfBodyBuilders FROM body_builder", "source_tables": ["body_builder"], "error_info": ""}, {"sample_id": 1151, "db_id": "body_builder", "score": 1, "gold_sql": "SELECT Total FROM body_builder ORDER BY Total ASC", "pred_sql": "SELECT Total FROM body_builder ORDER BY Total ASC", "source_tables": ["body_builder"], "error_info": ""}, {"sample_id": 1152, "db_id": "body_builder", "score": 1, "gold_sql": "SELECT Snatch, Clean_Jerk FROM body_builder ORDER BY Snatch ASC", "pred_sql": "SELECT Snatch, Clean_Jerk FROM body_builder ORDER BY Snatch ASC", "source_tables": ["body_builder"], "error_info": ""}, {"sample_id": 1153, "db_id": "body_builder", "score": 1, "gold_sql": "SELECT AVG(Snatch) FROM body_builder", "pred_sql": "SELECT AVG(CAST(Snatch AS FLOAT)) AS Average_Snatch FROM body_builder", "source_tables": ["body_builder"], "error_info": ""}, {"sample_id": 1154, "db_id": "body_builder", "score": 1, "gold_sql": "SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1", "pred_sql": "SELECT Clean_Jerk FROM body_builder WHERE Total = (SELECT MAX(Total) FROM body_builder)", "source_tables": ["body_builder"], "error_info": ""}, {"sample_id": 1155, "db_id": "body_builder", "score": 1, "gold_sql": "SELECT Birth_Date FROM People ORDER BY Height ASC", "pred_sql": "SELECT Birth_Date FROM people ORDER BY Height ASC", "source_tables": ["people"], "error_info": ""}, {"sample_id": 1156, "db_id": "body_builder", "score": 1, "gold_sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID", "pred_sql": "SELECT p.Name FROM people AS p JOIN body_builder AS bb ON p.People_ID = bb.People_ID", "source_tables": ["body_builder", "people"], "error_info": ""}, {"sample_id": 1157, "db_id": "body_builder", "score": 1, "gold_sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Total > 300", "pred_sql": "SELECT p.Name FROM body_builder AS bb JOIN people AS p ON bb.People_ID = p.People_ID WHERE bb.Total > '300'", "source_tables": ["body_builder", "people"], "error_info": ""}, {"sample_id": 1158, "db_id": "body_builder", "score": 1, "gold_sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Weight DESC LIMIT 1", "pred_sql": "SELECT p.Name FROM people AS p JOIN body_builder AS bb ON p.People_ID = bb.People_ID ORDER BY p.Weight DESC LIMIT 1", "source_tables": ["body_builder", "people"], "error_info": ""}, {"sample_id": 1159, "db_id": "body_builder", "score": 1, "gold_sql": "SELECT T2.Birth_Date, T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Total DESC LIMIT 1", "pred_sql": "SELECT p.Birth_Date, p.Birth_Place FROM people AS p JOIN body_builder AS bb ON p.People_ID = bb.People_ID WHERE bb.Total = (SELECT MAX(Total) FROM body_builder)", "source_tables": ["body_builder", "people"], "error_info": ""}, {"sample_id": 1160, "db_id": "body_builder", "score": 1, "gold_sql": "SELECT T2.Height FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Total < 315", "pred_sql": "SELECT p.Height FROM people AS p JOIN body_builder AS bb ON p.People_ID = bb.People_ID WHERE bb.Total < '315'", "source_tables": ["body_builder", "people"], "error_info": ""}, {"sample_id": 1161, "db_id": "body_builder", "score": 1, "gold_sql": "SELECT AVG(T1.Total) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200", "pred_sql": "SELECT AVG(Total) AS Average_Total FROM body_builder JOIN people ON body_builder.People_ID = people.People_ID WHERE Height > 200", "source_tables": ["body_builder", "people"], "error_info": ""}, {"sample_id": 1162, "db_id": "body_builder", "score": 1, "gold_sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Total DESC", "pred_sql": "SELECT p.Name FROM body_builder AS bb JOIN people AS p ON bb.People_ID = p.People_ID ORDER BY bb.Total DESC", "source_tables": ["body_builder", "people"], "error_info": ""}, {"sample_id": 1163, "db_id": "body_builder", "score": 1, "gold_sql": "SELECT Birth_Place, COUNT(*) FROM people GROUP BY Birth_Place", "pred_sql": "SELECT Birth_Place, COUNT(*) AS Number_of_People FROM people GROUP BY Birth_Place", "source_tables": ["people"], "error_info": ""}, {"sample_id": 1164, "db_id": "body_builder", "score": 0, "gold_sql": "SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Birth_Place, COUNT(*) AS Count FROM people GROUP BY Birth_Place ORDER BY Count DESC LIMIT 1", "source_tables": ["people"], "error_info": "Result not equal"}, {"sample_id": 1165, "db_id": "body_builder", "score": 1, "gold_sql": "SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*) >= 2", "pred_sql": "SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(People_ID) >= 2", "source_tables": ["people"], "error_info": ""}, {"sample_id": 1166, "db_id": "body_builder", "score": 1, "gold_sql": "SELECT Height, Weight FROM people ORDER BY Height DESC", "pred_sql": "SELECT Height, Weight FROM people ORDER BY Height DESC", "source_tables": ["people"], "error_info": ""}, {"sample_id": 1167, "db_id": "body_builder", "score": 1, "gold_sql": "SELECT * FROM body_builder", "pred_sql": "SELECT * FROM body_builder", "source_tables": ["body_builder"], "error_info": ""}, {"sample_id": 1168, "db_id": "body_builder", "score": 1, "gold_sql": "SELECT Name, birth_place FROM people EXCEPT SELECT T1.Name, T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id = T2.people_id", "pred_sql": "SELECT Name, Birth_Place FROM people WHERE NOT People_ID IN (SELECT People_ID FROM body_builder)", "source_tables": ["body_builder", "people"], "error_info": ""}, {"sample_id": 1169, "db_id": "body_builder", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT Birth_Place) FROM people", "pred_sql": "SELECT COUNT(DISTINCT Birth_Place) AS Distinct_Birth_Places FROM people", "source_tables": ["people"], "error_info": ""}, {"sample_id": 1170, "db_id": "body_builder", "score": 1, "gold_sql": "SELECT COUNT(*) FROM people WHERE NOT people_id IN (SELECT People_ID FROM body_builder)", "pred_sql": "SELECT COUNT(*) AS Non_Body_Builders FROM people WHERE NOT People_ID IN (SELECT People_ID FROM body_builder)", "source_tables": ["body_builder", "people"], "error_info": ""}, {"sample_id": 1171, "db_id": "body_builder", "score": 0, "gold_sql": "SELECT T2.weight FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id = T2.people_id WHERE T1.snatch > 140 OR T2.height > 200", "pred_sql": "SELECT bb.Snatch, p.Height FROM body_builder AS bb JOIN people AS p ON bb.People_ID = p.People_ID WHERE bb.Snatch > 140 OR p.Height > 200", "source_tables": ["body_builder", "people"], "error_info": "Result not equal"}, {"sample_id": 1172, "db_id": "body_builder", "score": 1, "gold_sql": "SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id = T2.people_id WHERE T2.Birth_Date LIKE '%January%'", "pred_sql": "SELECT bb.Total FROM body_builder AS bb JOIN people AS p ON bb.People_ID = p.People_ID WHERE p.Birth_Date LIKE '%January%'", "source_tables": ["body_builder", "people"], "error_info": ""}, {"sample_id": 1173, "db_id": "body_builder", "score": 1, "gold_sql": "SELECT MIN(snatch) FROM body_builder", "pred_sql": "SELECT MIN(Snatch) AS Minimum_Snatch_Score FROM body_builder", "source_tables": ["body_builder"], "error_info": ""}, {"sample_id": 1174, "db_id": "election_representative", "score": 1, "gold_sql": "SELECT COUNT(*) FROM election", "pred_sql": "SELECT COUNT(*) AS Total_Elections FROM election", "source_tables": ["election"], "error_info": ""}, {"sample_id": 1175, "db_id": "election_representative", "score": 1, "gold_sql": "SELECT Votes FROM election ORDER BY Votes DESC", "pred_sql": "SELECT Votes FROM election ORDER BY Votes DESC", "source_tables": ["election"], "error_info": ""}, {"sample_id": 1176, "db_id": "election_representative", "score": 1, "gold_sql": "SELECT Date, Vote_Percent FROM election", "pred_sql": "SELECT Date, Vote_Percent FROM election", "source_tables": ["election"], "error_info": ""}, {"sample_id": 1177, "db_id": "election_representative", "score": 1, "gold_sql": "SELECT MIN(Vote_Percent), MAX(Vote_Percent) FROM election", "pred_sql": "SELECT MIN(Vote_Percent) AS Min_Vote_Percent, MAX(Vote_Percent) AS Max_Vote_Percent FROM election", "source_tables": ["election"], "error_info": ""}, {"sample_id": 1178, "db_id": "election_representative", "score": 1, "gold_sql": "SELECT Name, Party FROM representative", "pred_sql": "SELECT Name, Party FROM representative", "source_tables": ["representative"], "error_info": ""}, {"sample_id": 1179, "db_id": "election_representative", "score": 1, "gold_sql": "SELECT Name FROM Representative WHERE Party <> 'Republican'", "pred_sql": "SELECT Name FROM representative WHERE Party <> 'Republican'", "source_tables": ["representative"], "error_info": ""}, {"sample_id": 1180, "db_id": "election_representative", "score": 1, "gold_sql": "SELECT Lifespan FROM representative WHERE State = 'New York' OR State = 'Indiana'", "pred_sql": "SELECT Lifespan FROM representative WHERE State IN ('New York', 'Indiana')", "source_tables": ["representative"], "error_info": ""}, {"sample_id": 1181, "db_id": "election_representative", "score": 1, "gold_sql": "SELECT T2.Name, T1.Date FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID", "pred_sql": "SELECT representative.Name, election.Date FROM representative JOIN election ON representative.Representative_ID = election.Representative_ID", "source_tables": ["representative", "election"], "error_info": ""}, {"sample_id": 1182, "db_id": "election_representative", "score": 1, "gold_sql": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID WHERE Votes > 10000", "pred_sql": "SELECT r.Name FROM representative AS r JOIN election AS e ON r.Representative_ID = e.Representative_ID WHERE e.Votes > '10000'", "source_tables": ["representative", "election"], "error_info": ""}, {"sample_id": 1183, "db_id": "election_representative", "score": 1, "gold_sql": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY votes DESC", "pred_sql": "SELECT r.Name FROM representative AS r JOIN election AS e ON r.Representative_ID = e.Representative_ID ORDER BY e.Votes DESC", "source_tables": ["representative", "election"], "error_info": ""}, {"sample_id": 1184, "db_id": "election_representative", "score": 1, "gold_sql": "SELECT T2.Party FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY votes ASC LIMIT 1", "pred_sql": "SELECT r.Party FROM election AS e JOIN representative AS r ON e.Representative_ID = r.Representative_ID ORDER BY e.Votes ASC LIMIT 1", "source_tables": ["representative", "election"], "error_info": ""}, {"sample_id": 1185, "db_id": "election_representative", "score": 1, "gold_sql": "SELECT T2.Lifespan FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY Vote_Percent DESC", "pred_sql": "SELECT r.Lifespan FROM representative AS r JOIN election AS e ON r.Representative_ID = e.Representative_ID ORDER BY e.Vote_Percent DESC", "source_tables": ["representative", "election"], "error_info": ""}, {"sample_id": 1186, "db_id": "election_representative", "score": 1, "gold_sql": "SELECT AVG(T1.Votes) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID WHERE T2.Party = 'Republican'", "pred_sql": "SELECT AVG(CAST(e.Votes AS INT)) AS Average_Votes FROM election AS e JOIN representative AS r ON e.Representative_ID = r.Representative_ID WHERE r.Party = 'Republican'", "source_tables": ["representative", "election"], "error_info": ""}, {"sample_id": 1187, "db_id": "election_representative", "score": 1, "gold_sql": "SELECT Party, COUNT(*) FROM representative GROUP BY Party", "pred_sql": "SELECT Party, COUNT(*) AS Number_of_Representatives FROM representative GROUP BY Party", "source_tables": ["representative"], "error_info": ""}, {"sample_id": 1188, "db_id": "election_representative", "score": 0, "gold_sql": "SELECT Party, COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Party FROM representative GROUP BY Party ORDER BY COUNT(Representative_ID) DESC LIMIT 1", "source_tables": ["representative"], "error_info": "Result not equal"}, {"sample_id": 1189, "db_id": "election_representative", "score": 1, "gold_sql": "SELECT Party FROM representative GROUP BY Party HAVING COUNT(*) >= 3", "pred_sql": "SELECT Party FROM representative GROUP BY Party HAVING COUNT(Representative_ID) >= 3", "source_tables": ["representative"], "error_info": ""}, {"sample_id": 1190, "db_id": "election_representative", "score": 1, "gold_sql": "SELECT State FROM representative GROUP BY State HAVING COUNT(*) >= 2", "pred_sql": "SELECT State FROM representative GROUP BY State HAVING COUNT(Representative_ID) >= 2", "source_tables": ["representative"], "error_info": ""}, {"sample_id": 1191, "db_id": "election_representative", "score": 1, "gold_sql": "SELECT Name FROM representative WHERE NOT Representative_ID IN (SELECT Representative_ID FROM election)", "pred_sql": "SELECT r.Name FROM representative AS r WHERE NOT r.Representative_ID IN (SELECT e.Representative_ID FROM election AS e)", "source_tables": ["representative", "election"], "error_info": ""}, {"sample_id": 1192, "db_id": "election_representative", "score": 1, "gold_sql": "SELECT Party FROM representative WHERE State = 'New York' INTERSECT SELECT Party FROM representative WHERE State = 'Pennsylvania'", "pred_sql": "SELECT DISTINCT r1.Party FROM representative AS r1 JOIN representative AS r2 ON r1.Party = r2.Party WHERE r1.State = 'New York' AND r2.State = 'Pennsylvania'", "source_tables": ["representative"], "error_info": ""}, {"sample_id": 1193, "db_id": "election_representative", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT Party) FROM representative", "pred_sql": "SELECT COUNT(DISTINCT Party) AS Distinct_Party_Count FROM representative", "source_tables": ["representative"], "error_info": ""}, {"sample_id": 1194, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Apartment_Bookings", "pred_sql": "SELECT COUNT(*) AS total_bookings FROM Apartment_Bookings", "source_tables": ["apartment_bookings"], "error_info": ""}, {"sample_id": 1195, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Apartment_Bookings", "pred_sql": "SELECT COUNT(*) AS total_bookings FROM Apartment_Bookings", "source_tables": ["apartment_bookings"], "error_info": ""}, {"sample_id": 1196, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT booking_start_date, booking_end_date FROM Apartment_Bookings", "pred_sql": "SELECT booking_start_date, booking_end_date FROM Apartment_Bookings", "source_tables": ["apartment_bookings"], "error_info": ""}, {"sample_id": 1197, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT booking_start_date, booking_end_date FROM Apartment_Bookings", "pred_sql": "SELECT booking_start_date, booking_end_date FROM Apartment_Bookings", "source_tables": ["apartment_bookings"], "error_info": ""}, {"sample_id": 1198, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT DISTINCT building_description FROM Apartment_Buildings", "pred_sql": "SELECT DISTINCT building_description FROM Apartment_Buildings", "source_tables": ["apartment_buildings"], "error_info": ""}, {"sample_id": 1199, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT DISTINCT building_description FROM Apartment_Buildings", "pred_sql": "SELECT DISTINCT building_description FROM Apartment_Buildings", "source_tables": ["apartment_buildings"], "error_info": ""}, {"sample_id": 1200, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT building_short_name FROM Apartment_Buildings WHERE building_manager = 'Emma'", "pred_sql": "SELECT building_short_name FROM Apartment_Buildings WHERE building_manager = 'Emma'", "source_tables": ["apartment_buildings"], "error_info": ""}, {"sample_id": 1201, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT building_short_name FROM Apartment_Buildings WHERE building_manager = 'Emma'", "pred_sql": "SELECT building_short_name FROM Apartment_Buildings WHERE building_manager = 'Emma'", "source_tables": ["apartment_buildings"], "error_info": ""}, {"sample_id": 1202, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT building_address, building_phone FROM Apartment_Buildings WHERE building_manager = 'Brenden'", "pred_sql": "SELECT building_address, building_phone FROM Apartment_Buildings WHERE building_manager = 'Brenden'", "source_tables": ["apartment_buildings"], "error_info": ""}, {"sample_id": 1203, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT building_address, building_phone FROM Apartment_Buildings WHERE building_manager = 'Brenden'", "pred_sql": "SELECT building_address, building_phone FROM Apartment_Buildings WHERE building_manager = 'Brenden'", "source_tables": ["apartment_buildings"], "error_info": ""}, {"sample_id": 1204, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE '%court%'", "pred_sql": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE '%court%'", "source_tables": ["apartment_buildings"], "error_info": ""}, {"sample_id": 1205, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE '%court%'", "pred_sql": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE '%court%'", "source_tables": ["apartment_buildings"], "error_info": ""}, {"sample_id": 1206, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT MIN(bathroom_count), MAX(bathroom_count) FROM Apartments", "pred_sql": "SELECT MIN(bathroom_count) AS min_bathrooms, MAX(bathroom_count) AS max_bathrooms FROM Apartments", "source_tables": ["apartments"], "error_info": ""}, {"sample_id": 1207, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT MIN(bathroom_count), MAX(bathroom_count) FROM Apartments", "pred_sql": "SELECT MIN(bathroom_count) AS min_bathroom_count, MAX(bathroom_count) AS max_bathroom_count FROM Apartments", "source_tables": ["apartments"], "error_info": ""}, {"sample_id": 1208, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT AVG(bedroom_count) FROM Apartments", "pred_sql": "SELECT AVG(bedroom_count) AS average_bedrooms FROM Apartments", "source_tables": ["apartments"], "error_info": ""}, {"sample_id": 1209, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT AVG(bedroom_count) FROM Apartments", "pred_sql": "SELECT AVG(bedroom_count) AS average_bedrooms FROM Apartments", "source_tables": ["apartments"], "error_info": ""}, {"sample_id": 1210, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT apt_number, room_count FROM Apartments", "pred_sql": "SELECT apt_number, room_count FROM Apartments", "source_tables": ["apartments"], "error_info": ""}, {"sample_id": 1211, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT apt_number, room_count FROM Apartments", "pred_sql": "SELECT apt_number, room_count FROM Apartments", "source_tables": ["apartments"], "error_info": ""}, {"sample_id": 1212, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT AVG(room_count) FROM Apartments WHERE apt_type_code = 'Studio'", "pred_sql": "SELECT AVG(room_count) AS average_rooms FROM Apartments WHERE apt_type_code = 'Studio'", "source_tables": ["apartments"], "error_info": ""}, {"sample_id": 1213, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT AVG(room_count) FROM Apartments WHERE apt_type_code = 'Studio'", "pred_sql": "SELECT AVG(room_count) AS average_room_count FROM Apartments WHERE apt_type_code = 'Studio'", "source_tables": ["apartments"], "error_info": ""}, {"sample_id": 1214, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT apt_number FROM Apartments WHERE apt_type_code = 'Flat'", "pred_sql": "SELECT apt_number FROM Apartments WHERE apt_type_code = 'Flat'", "source_tables": ["apartments"], "error_info": ""}, {"sample_id": 1215, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT apt_number FROM Apartments WHERE apt_type_code = 'Flat'", "pred_sql": "SELECT apt_number FROM Apartments WHERE apt_type_code = 'Flat'", "source_tables": ["apartments"], "error_info": ""}, {"sample_id": 1216, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT guest_first_name, guest_last_name FROM Guests", "pred_sql": "SELECT guest_first_name, guest_last_name FROM Guests", "source_tables": ["guests"], "error_info": ""}, {"sample_id": 1217, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT guest_first_name, guest_last_name FROM Guests", "pred_sql": "SELECT guest_first_name, guest_last_name FROM Guests", "source_tables": ["guests"], "error_info": ""}, {"sample_id": 1218, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT date_of_birth FROM Guests WHERE gender_code = 'Male'", "pred_sql": "SELECT date_of_birth FROM Guests WHERE gender_code = 'Male'", "source_tables": ["guests"], "error_info": ""}, {"sample_id": 1219, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT date_of_birth FROM Guests WHERE gender_code = 'Male'", "pred_sql": "SELECT date_of_birth FROM Guests WHERE gender_code = 'Male'", "source_tables": ["guests"], "error_info": ""}, {"sample_id": 1220, "db_id": "apartment_rentals", "score": 0, "gold_sql": "SELECT T2.apt_number, T1.booking_start_date, T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id", "pred_sql": "SELECT Apartments.apt_number, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date FROM Apartment_Bookings JOIN Apartments ON Apartment_Bookings.apt_id = Apartments.apt_id", "source_tables": ["apartment_bookings", "apartments"], "error_info": "Result not equal"}, {"sample_id": 1221, "db_id": "apartment_rentals", "score": 0, "gold_sql": "SELECT T2.apt_number, T1.booking_start_date, T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id", "pred_sql": "SELECT Apartments.apt_number, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date FROM Apartment_Bookings JOIN Apartments ON Apartment_Bookings.apt_id = Apartments.apt_id", "source_tables": ["apartment_bookings", "apartments"], "error_info": "Result not equal"}, {"sample_id": 1222, "db_id": "apartment_rentals", "score": 0, "gold_sql": "SELECT T1.booking_start_date, T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_type_code = 'Duplex'", "pred_sql": "SELECT ab.booking_start_date, ab.booking_end_date FROM Apartment_Bookings AS ab JOIN Apartments AS a ON ab.apt_id = a.apt_id WHERE a.apt_type_code = 'Duplex'", "source_tables": ["apartment_bookings", "apartments"], "error_info": "Result not equal"}, {"sample_id": 1223, "db_id": "apartment_rentals", "score": 0, "gold_sql": "SELECT T1.booking_start_date, T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_type_code = 'Duplex'", "pred_sql": "SELECT ab.booking_start_date, ab.booking_end_date FROM Apartment_Bookings AS ab JOIN Apartments AS a ON ab.apt_id = a.apt_id WHERE a.apt_type_code = 'Duplex'", "source_tables": ["apartment_bookings", "apartments"], "error_info": "Result not equal"}, {"sample_id": 1224, "db_id": "apartment_rentals", "score": 0, "gold_sql": "SELECT T1.booking_start_date, T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 2", "pred_sql": "SELECT Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date FROM Apartments JOIN Apartment_Bookings ON Apartments.apt_id = Apartment_Bookings.apt_id WHERE Apartments.bedroom_count > 2", "source_tables": ["apartment_bookings", "apartments"], "error_info": "Result not equal"}, {"sample_id": 1225, "db_id": "apartment_rentals", "score": 0, "gold_sql": "SELECT T1.booking_start_date, T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 2", "pred_sql": "SELECT Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date FROM Apartments JOIN Apartment_Bookings ON Apartments.apt_id = Apartment_Bookings.apt_id WHERE Apartments.bedroom_count > 2", "source_tables": ["apartment_bookings", "apartments"], "error_info": "Result not equal"}, {"sample_id": 1226, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_number = 'Suite 634'", "pred_sql": "SELECT ab.booking_status_code FROM Apartments AS a JOIN Apartment_Bookings AS ab ON a.apt_id = ab.apt_id WHERE a.apt_number = 'Suite 634'", "source_tables": ["apartment_bookings", "apartments"], "error_info": ""}, {"sample_id": 1227, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_number = 'Suite 634'", "pred_sql": "SELECT ab.booking_status_code FROM Apartments AS a JOIN Apartment_Bookings AS ab ON a.apt_id = ab.apt_id WHERE a.apt_number = 'Suite 634'", "source_tables": ["apartment_bookings", "apartments"], "error_info": ""}, {"sample_id": 1228, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = 'Confirmed'", "pred_sql": "SELECT DISTINCT a.apt_number FROM Apartments AS a JOIN Apartment_Bookings AS ab ON a.apt_id = ab.apt_id WHERE ab.booking_status_code = 'Confirmed'", "source_tables": ["apartment_bookings", "apartments"], "error_info": ""}, {"sample_id": 1229, "db_id": "apartment_rentals", "score": 0, "gold_sql": "SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = 'Confirmed'", "pred_sql": "SELECT a.apt_number FROM Apartments AS a JOIN Apartment_Bookings AS ab ON a.apt_id = ab.apt_id WHERE ab.booking_status_code = 'Confirmed'", "source_tables": ["apartment_bookings", "apartments"], "error_info": "Result not equal"}, {"sample_id": 1230, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT AVG(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = 'Provisional'", "pred_sql": "SELECT AVG(room_count) AS average_room_count FROM Apartments JOIN Apartment_Bookings ON Apartments.apt_id = Apartment_Bookings.apt_id WHERE Apartment_Bookings.booking_status_code = 'Provisional'", "source_tables": ["apartment_bookings", "apartments"], "error_info": ""}, {"sample_id": 1231, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT AVG(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = 'Provisional'", "pred_sql": "SELECT AVG(room_count) AS average_room_count FROM Apartments JOIN Apartment_Bookings ON Apartments.apt_id = Apartment_Bookings.apt_id WHERE Apartment_Bookings.booking_status_code = 'Provisional'", "source_tables": ["apartment_bookings", "apartments"], "error_info": ""}, {"sample_id": 1232, "db_id": "apartment_rentals", "score": 0, "gold_sql": "SELECT T2.guest_first_name, T1.booking_start_date, T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id", "pred_sql": "SELECT Guests.guest_first_name, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date FROM Apartment_Bookings JOIN Guests ON Apartment_Bookings.guest_id = Guests.guest_id", "source_tables": ["apartment_bookings", "guests"], "error_info": "Result not equal"}, {"sample_id": 1233, "db_id": "apartment_rentals", "score": 0, "gold_sql": "SELECT T2.guest_first_name, T1.booking_start_date, T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id", "pred_sql": "SELECT Guests.guest_first_name, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date FROM Apartment_Bookings JOIN Guests ON Apartment_Bookings.guest_id = Guests.guest_id", "source_tables": ["apartment_bookings", "guests"], "error_info": "Result not equal"}, {"sample_id": 1234, "db_id": "apartment_rentals", "score": 0, "gold_sql": "SELECT T1.booking_start_date, T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T2.gender_code = 'Female'", "pred_sql": "SELECT Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date FROM Apartment_Bookings JOIN Guests ON Apartment_Bookings.guest_id = Guests.guest_id WHERE Guests.gender_code = 'Female'", "source_tables": ["apartment_bookings", "guests"], "error_info": "Result not equal"}, {"sample_id": 1235, "db_id": "apartment_rentals", "score": 0, "gold_sql": "SELECT T1.booking_start_date, T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T2.gender_code = 'Female'", "pred_sql": "SELECT Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date FROM Apartment_Bookings JOIN Guests ON Apartment_Bookings.guest_id = Guests.guest_id WHERE Guests.gender_code = 'Female'", "source_tables": ["apartment_bookings", "guests"], "error_info": "Result not equal"}, {"sample_id": 1236, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT T2.guest_first_name, T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T1.booking_status_code = 'Confirmed'", "pred_sql": "SELECT Guests.guest_first_name, Guests.guest_last_name FROM Guests JOIN Apartment_Bookings ON Guests.guest_id = Apartment_Bookings.guest_id WHERE Apartment_Bookings.booking_status_code = 'Confirmed'", "source_tables": ["apartment_bookings", "guests"], "error_info": ""}, {"sample_id": 1237, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT T2.guest_first_name, T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T1.booking_status_code = 'Confirmed'", "pred_sql": "SELECT g.guest_first_name, g.guest_last_name FROM Guests AS g JOIN Apartment_Bookings AS ab ON g.guest_id = ab.guest_id WHERE ab.booking_status_code = 'Confirmed'", "source_tables": ["apartment_bookings", "guests"], "error_info": ""}, {"sample_id": 1238, "db_id": "apartment_rentals", "score": 0, "gold_sql": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 4", "pred_sql": "SELECT DISTINCT af.facility_code FROM Apartment_Facilities AS af JOIN Apartments AS a ON af.apt_id = a.apt_id WHERE a.bedroom_count > 4", "source_tables": ["apartments", "apartment_facilities"], "error_info": "Result not equal"}, {"sample_id": 1239, "db_id": "apartment_rentals", "score": 0, "gold_sql": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 4", "pred_sql": "SELECT DISTINCT af.facility_code FROM Apartment_Facilities AS af JOIN Apartments AS a ON af.apt_id = a.apt_id WHERE a.bedroom_count > 4", "source_tables": ["apartments", "apartment_facilities"], "error_info": "Result not equal"}, {"sample_id": 1240, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT SUM(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.facility_code = 'Gym'", "pred_sql": "SELECT SUM(room_count) AS total_rooms FROM Apartments WHERE apt_id IN (SELECT apt_id FROM Apartment_Facilities WHERE facility_code = 'Gym')", "source_tables": ["apartments", "apartment_facilities"], "error_info": ""}, {"sample_id": 1241, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT SUM(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.facility_code = 'Gym'", "pred_sql": "SELECT SUM(room_count) AS total_rooms FROM Apartments WHERE apt_id IN (SELECT apt_id FROM Apartment_Facilities WHERE facility_code = 'Gym')", "source_tables": ["apartments", "apartment_facilities"], "error_info": ""}, {"sample_id": 1242, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT SUM(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_short_name = 'Columbus Square'", "pred_sql": "SELECT SUM(room_count) AS total_rooms FROM Apartments WHERE building_id = (SELECT building_id FROM Apartment_Buildings WHERE building_short_name = 'Columbus Square')", "source_tables": ["apartments", "apartment_buildings"], "error_info": ""}, {"sample_id": 1243, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT SUM(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_short_name = 'Columbus Square'", "pred_sql": "SELECT SUM(room_count) AS total_rooms FROM Apartments JOIN Apartment_Buildings ON Apartments.building_id = Apartment_Buildings.building_id WHERE building_short_name = 'Columbus Square'", "source_tables": ["apartments", "apartment_buildings"], "error_info": ""}, {"sample_id": 1244, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T2.bathroom_count > 2", "pred_sql": "SELECT DISTINCT ab.building_address FROM Apartment_Buildings AS ab JOIN Apartments AS a ON ab.building_id = a.building_id WHERE a.bathroom_count > 2", "source_tables": ["apartments", "apartment_buildings"], "error_info": ""}, {"sample_id": 1245, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T2.bathroom_count > 2", "pred_sql": "SELECT DISTINCT Apartment_Buildings.building_address FROM Apartment_Buildings JOIN Apartments ON Apartment_Buildings.building_id = Apartments.building_id WHERE Apartments.bathroom_count > 2", "source_tables": ["apartments", "apartment_buildings"], "error_info": ""}, {"sample_id": 1246, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT T2.apt_type_code, T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_manager = 'Kyle'", "pred_sql": "SELECT a.apt_type_code, a.apt_number FROM Apartments AS a JOIN Apartment_Buildings AS b ON a.building_id = b.building_id WHERE b.building_manager = 'Kyle'", "source_tables": ["apartments", "apartment_buildings"], "error_info": ""}, {"sample_id": 1247, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT T2.apt_type_code, T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_manager = 'Kyle'", "pred_sql": "SELECT a.apt_type_code, a.apt_number FROM Apartments AS a JOIN Apartment_Buildings AS b ON a.building_id = b.building_id WHERE b.building_manager = 'Kyle'", "source_tables": ["apartments", "apartment_buildings"], "error_info": ""}, {"sample_id": 1248, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT booking_status_code, COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code", "pred_sql": "SELECT booking_status_code, COUNT(apt_booking_id) AS number_of_bookings FROM Apartment_Bookings GROUP BY booking_status_code", "source_tables": ["apartment_bookings"], "error_info": ""}, {"sample_id": 1249, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT booking_status_code, COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code", "pred_sql": "SELECT booking_status_code, COUNT(*) AS booking_count FROM Apartment_Bookings GROUP BY booking_status_code", "source_tables": ["apartment_bookings"], "error_info": ""}, {"sample_id": 1250, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT apt_number FROM Apartments ORDER BY room_count ASC", "pred_sql": "SELECT apt_number FROM Apartments ORDER BY room_count ASC", "source_tables": ["apartments"], "error_info": ""}, {"sample_id": 1251, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT apt_number FROM Apartments ORDER BY room_count ASC", "pred_sql": "SELECT apt_number FROM Apartments ORDER BY room_count ASC", "source_tables": ["apartments"], "error_info": ""}, {"sample_id": 1252, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1", "pred_sql": "SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1", "source_tables": ["apartments"], "error_info": ""}, {"sample_id": 1253, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1", "pred_sql": "SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1", "source_tables": ["apartments"], "error_info": ""}, {"sample_id": 1254, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT apt_type_code, COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC", "pred_sql": "SELECT apt_type_code, COUNT(*) AS number_of_apartments FROM Apartments GROUP BY apt_type_code ORDER BY number_of_apartments ASC", "source_tables": ["apartments"], "error_info": ""}, {"sample_id": 1255, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT apt_type_code, COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC", "pred_sql": "SELECT apt_type_code, COUNT(*) AS apartment_count FROM Apartments GROUP BY apt_type_code ORDER BY apartment_count ASC", "source_tables": ["apartments"], "error_info": ""}, {"sample_id": 1256, "db_id": "apartment_rentals", "score": 0, "gold_sql": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY AVG(room_count) DESC LIMIT 3", "pred_sql": "SELECT apt_type_code, AVG(room_count) AS average_rooms FROM Apartments GROUP BY apt_type_code ORDER BY average_rooms DESC LIMIT 3", "source_tables": ["apartments"], "error_info": "Result not equal"}, {"sample_id": 1257, "db_id": "apartment_rentals", "score": 0, "gold_sql": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY AVG(room_count) DESC LIMIT 3", "pred_sql": "SELECT apt_type_code, AVG(room_count) AS average_room_count FROM Apartments GROUP BY apt_type_code ORDER BY average_room_count DESC LIMIT 3", "source_tables": ["apartments"], "error_info": "Result not equal"}, {"sample_id": 1258, "db_id": "apartment_rentals", "score": 0, "gold_sql": "SELECT apt_type_code, bathroom_count, bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY SUM(room_count) DESC LIMIT 1", "pred_sql": "SELECT apt_type_code, SUM(room_count) AS total_rooms, SUM(bathroom_count) AS total_bathrooms, SUM(bedroom_count) AS total_bedrooms FROM Apartments GROUP BY apt_type_code ORDER BY total_rooms DESC LIMIT 1", "source_tables": ["apartments"], "error_info": "Result not equal"}, {"sample_id": 1259, "db_id": "apartment_rentals", "score": 0, "gold_sql": "SELECT apt_type_code, bathroom_count, bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY SUM(room_count) DESC LIMIT 1", "pred_sql": "SELECT apt_type_code, SUM(room_count) AS total_rooms, AVG(bathroom_count) AS avg_bathrooms, AVG(bedroom_count) AS avg_bedrooms FROM Apartments GROUP BY apt_type_code ORDER BY total_rooms DESC LIMIT 1", "source_tables": ["apartments"], "error_info": "Result not equal"}, {"sample_id": 1260, "db_id": "apartment_rentals", "score": 0, "gold_sql": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT apt_type_code, COUNT(*) AS count FROM Apartments GROUP BY apt_type_code ORDER BY count DESC LIMIT 1", "source_tables": ["apartments"], "error_info": "Result not equal"}, {"sample_id": 1261, "db_id": "apartment_rentals", "score": 0, "gold_sql": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT apt_type_code, COUNT(*) AS count FROM Apartments GROUP BY apt_type_code ORDER BY count DESC LIMIT 1", "source_tables": ["apartments"], "error_info": "Result not equal"}, {"sample_id": 1262, "db_id": "apartment_rentals", "score": 0, "gold_sql": "SELECT apt_type_code FROM Apartments WHERE bathroom_count > 1 GROUP BY apt_type_code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT apt_type_code, COUNT(*) AS count FROM Apartments WHERE bathroom_count > 1 GROUP BY apt_type_code ORDER BY count DESC LIMIT 1", "source_tables": ["apartments"], "error_info": "Result not equal"}, {"sample_id": 1263, "db_id": "apartment_rentals", "score": 0, "gold_sql": "SELECT apt_type_code FROM Apartments WHERE bathroom_count > 1 GROUP BY apt_type_code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT apt_type_code, COUNT(*) AS count FROM Apartments WHERE bathroom_count > 1 GROUP BY apt_type_code ORDER BY count DESC LIMIT 1", "source_tables": ["apartments"], "error_info": "Result not equal"}, {"sample_id": 1264, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT apt_type_code, MAX(room_count), MIN(room_count) FROM Apartments GROUP BY apt_type_code", "pred_sql": "SELECT apt_type_code, MAX(room_count) AS max_rooms, MIN(room_count) AS min_rooms FROM Apartments GROUP BY apt_type_code", "source_tables": ["apartments"], "error_info": ""}, {"sample_id": 1265, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT apt_type_code, MAX(room_count), MIN(room_count) FROM Apartments GROUP BY apt_type_code", "pred_sql": "SELECT apt_type_code, MAX(room_count) AS max_rooms, MIN(room_count) AS min_rooms FROM Apartments GROUP BY apt_type_code", "source_tables": ["apartments"], "error_info": ""}, {"sample_id": 1266, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT gender_code, COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC", "pred_sql": "SELECT gender_code, COUNT(guest_id) AS guest_count FROM Guests GROUP BY gender_code ORDER BY guest_count DESC", "source_tables": ["guests"], "error_info": ""}, {"sample_id": 1267, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT gender_code, COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC", "pred_sql": "SELECT gender_code, COUNT(guest_id) AS guest_count FROM Guests GROUP BY gender_code ORDER BY guest_count DESC", "source_tables": ["guests"], "error_info": ""}, {"sample_id": 1268, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Apartments WHERE NOT apt_id IN (SELECT apt_id FROM Apartment_Facilities)", "pred_sql": "SELECT COUNT(*) AS apartment_count FROM Apartments WHERE NOT apt_id IN (SELECT apt_id FROM Apartment_Facilities)", "source_tables": ["apartments", "apartment_facilities"], "error_info": ""}, {"sample_id": 1269, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Apartments WHERE NOT apt_id IN (SELECT apt_id FROM Apartment_Facilities)", "pred_sql": "SELECT COUNT(*) AS number_of_apartments_without_facility FROM Apartments WHERE NOT apt_id IN (SELECT apt_id FROM Apartment_Facilities)", "source_tables": ["apartments", "apartment_facilities"], "error_info": ""}, {"sample_id": 1270, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = 'Confirmed' INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = 'Provisional'", "pred_sql": "SELECT DISTINCT a.apt_number FROM Apartments AS a JOIN Apartment_Bookings AS ab ON a.apt_id = ab.apt_id WHERE ab.booking_status_code IN ('Provisional', 'Confirmed') GROUP BY a.apt_number HAVING COUNT(DISTINCT ab.booking_status_code) = 2", "source_tables": ["apartment_bookings", "apartments"], "error_info": ""}, {"sample_id": 1271, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = 'Confirmed' INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = 'Provisional'", "pred_sql": "SELECT DISTINCT a.apt_number FROM Apartments AS a JOIN Apartment_Bookings AS ab ON a.apt_id = ab.apt_id WHERE ab.booking_status_code IN ('Provisional', 'Confirmed') GROUP BY a.apt_number HAVING COUNT(DISTINCT ab.booking_status_code) = 2", "source_tables": ["apartment_bookings", "apartments"], "error_info": ""}, {"sample_id": 1272, "db_id": "apartment_rentals", "score": 0, "gold_sql": "SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id = T2.apt_id WHERE T2.available_yn = 0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id = T2.apt_id WHERE T2.available_yn = 1", "pred_sql": "SELECT a.apt_number FROM Apartments AS a JOIN View_Unit_Status AS vus ON a.apt_id = vus.apt_id WHERE vus.available_yn IN ('0', '1') GROUP BY a.apt_number", "source_tables": ["view_unit_status", "apartments"], "error_info": "Result not equal"}, {"sample_id": 1273, "db_id": "apartment_rentals", "score": 1, "gold_sql": "SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id = T2.apt_id WHERE T2.available_yn = 0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id = T2.apt_id WHERE T2.available_yn = 1", "pred_sql": "SELECT apt_number FROM Apartments AS a JOIN View_Unit_Status AS vus ON a.apt_id = vus.apt_id WHERE vus.available_yn IN ('0', '1') GROUP BY a.apt_number HAVING COUNT(DISTINCT vus.available_yn) = 2", "source_tables": ["view_unit_status", "apartments"], "error_info": ""}, {"sample_id": 1274, "db_id": "game_injury", "score": 1, "gold_sql": "SELECT COUNT(*) FROM game WHERE season > 2007", "pred_sql": "SELECT COUNT(*) AS total_games FROM game WHERE Season > 2007", "source_tables": ["game"], "error_info": ""}, {"sample_id": 1275, "db_id": "game_injury", "score": 0, "gold_sql": "SELECT Date FROM game ORDER BY home_team DESC", "pred_sql": "SELECT Date FROM game WHERE Home_team IN (SELECT id FROM team WHERE name = 'home_team_name') ORDER BY Date DESC", "source_tables": ["game"], "error_info": "Predction Execution Error:no such table: team"}, {"sample_id": 1276, "db_id": "game_injury", "score": 1, "gold_sql": "SELECT season, home_team, away_team FROM game", "pred_sql": "SELECT Season, Home_team, Away_team FROM game", "source_tables": ["game"], "error_info": ""}, {"sample_id": 1277, "db_id": "game_injury", "score": 0, "gold_sql": "SELECT MAX(home_games), MIN(home_games), AVG(home_games) FROM stadium", "pred_sql": "SELECT stadium.name, MAX(stadium.Home_Games) AS Max_Home_Games, MIN(stadium.Home_Games) AS Min_Home_Games, AVG(stadium.Home_Games) AS Avg_Home_Games FROM stadium GROUP BY stadium.name", "source_tables": ["stadium"], "error_info": "Result not equal"}, {"sample_id": 1278, "db_id": "game_injury", "score": 0, "gold_sql": "SELECT average_attendance FROM stadium WHERE capacity_percentage > 100", "pred_sql": "SELECT AVG(Average_Attendance) AS Average_Attendance FROM stadium WHERE Capacity_Percentage > '100'", "source_tables": ["stadium"], "error_info": "Result not equal"}, {"sample_id": 1279, "db_id": "game_injury", "score": 1, "gold_sql": "SELECT player, number_of_matches, SOURCE FROM injury_accident WHERE injury <> 'Knee problem'", "pred_sql": "SELECT Player, Number_of_matches, Source FROM injury_accident WHERE Injury <> 'Knee problem'", "source_tables": ["injury_accident"], "error_info": ""}, {"sample_id": 1280, "db_id": "game_injury", "score": 1, "gold_sql": "SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id WHERE T2.player = 'Walter Samuel'", "pred_sql": "SELECT g.Season FROM injury_accident AS ia JOIN game AS g ON ia.game_id = g.id WHERE ia.Player = 'Walter Samuel'", "source_tables": ["injury_accident", "game"], "error_info": ""}, {"sample_id": 1281, "db_id": "game_injury", "score": 1, "gold_sql": "SELECT T1.id, T1.score, T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id = T1.id GROUP BY T1.id HAVING COUNT(*) >= 2", "pred_sql": "SELECT game.id, game.Score, game.Date FROM game JOIN injury_accident ON game.id = injury_accident.game_id GROUP BY game.id HAVING COUNT(injury_accident.id) >= 2", "source_tables": ["injury_accident", "game"], "error_info": ""}, {"sample_id": 1282, "db_id": "game_injury", "score": 1, "gold_sql": "SELECT T1.id, T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id JOIN injury_accident AS T3 ON T2.id = T3.game_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT stadium.id, stadium.name FROM stadium JOIN game ON stadium.id = game.stadium_id JOIN injury_accident ON game.id = injury_accident.game_id GROUP BY stadium.id, stadium.name ORDER BY COUNT(injury_accident.id) DESC LIMIT 1", "source_tables": ["injury_accident", "game", "stadium"], "error_info": ""}, {"sample_id": 1283, "db_id": "game_injury", "score": 1, "gold_sql": "SELECT T1.id, T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id JOIN injury_accident AS T3 ON T2.id = T3.game_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT stadium.id, stadium.name FROM stadium JOIN game ON stadium.id = game.stadium_id JOIN injury_accident ON game.id = injury_accident.game_id GROUP BY stadium.id, stadium.name ORDER BY COUNT(injury_accident.id) DESC LIMIT 1", "source_tables": ["injury_accident", "game", "stadium"], "error_info": ""}, {"sample_id": 1284, "db_id": "game_injury", "score": 1, "gold_sql": "SELECT T1.season, T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.injury = 'Foot injury' OR T3.injury = 'Knee problem'", "pred_sql": "SELECT g.Season, s.name FROM injury_accident AS ia JOIN game AS g ON ia.game_id = g.id JOIN stadium AS s ON g.stadium_id = s.id WHERE ia.Injury IN ('Foot injury', 'Knee problem')", "source_tables": ["injury_accident", "game", "stadium"], "error_info": ""}, {"sample_id": 1285, "db_id": "game_injury", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT SOURCE) FROM injury_accident", "pred_sql": "SELECT COUNT(DISTINCT Source) AS Different_Sources FROM injury_accident", "source_tables": ["injury_accident"], "error_info": ""}, {"sample_id": 1286, "db_id": "game_injury", "score": 1, "gold_sql": "SELECT COUNT(*) FROM game WHERE NOT id IN (SELECT game_id FROM injury_accident)", "pred_sql": "SELECT COUNT(*) AS Free_Of_Injury_Accidents FROM game WHERE NOT id IN (SELECT game_id FROM injury_accident)", "source_tables": ["injury_accident", "game"], "error_info": ""}, {"sample_id": 1287, "db_id": "game_injury", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id = T2.id WHERE T2.season > 2010", "pred_sql": "SELECT COUNT(DISTINCT Injury) AS distinct_injury_count FROM injury_accident JOIN game ON injury_accident.game_id = game.id WHERE game.Season > 2010", "source_tables": ["injury_accident", "game"], "error_info": ""}, {"sample_id": 1288, "db_id": "game_injury", "score": 1, "gold_sql": "SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.player = 'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.player = 'Thiago Motta'", "pred_sql": "SELECT DISTINCT s.name FROM stadium AS s JOIN game AS g ON s.id = g.stadium_id JOIN injury_accident AS ia ON g.id = ia.game_id WHERE ia.Player IN ('Walter Samuel', 'Thiago Motta') GROUP BY s.name HAVING COUNT(DISTINCT ia.Player) = 2", "source_tables": ["injury_accident", "game", "stadium"], "error_info": ""}, {"sample_id": 1289, "db_id": "game_injury", "score": 0, "gold_sql": "SELECT name, average_attendance, total_attendance FROM stadium EXCEPT SELECT T2.name, T2.average_attendance, T2.total_attendance FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id", "pred_sql": "SELECT s.name, s.Average_Attendance, s.Total_Attendance FROM stadium AS s LEFT JOIN game AS g ON s.id = g.stadium_id LEFT JOIN injury_accident AS ia ON g.id = ia.game_id WHERE ia.id IS NULL", "source_tables": ["injury_accident", "game", "stadium"], "error_info": "Result not equal"}, {"sample_id": 1290, "db_id": "game_injury", "score": 1, "gold_sql": "SELECT name FROM stadium WHERE name LIKE '%Bank%'", "pred_sql": "SELECT name FROM stadium WHERE name LIKE '%Bank%'", "source_tables": ["stadium"], "error_info": ""}, {"sample_id": 1291, "db_id": "game_injury", "score": 0, "gold_sql": "SELECT T1.id, COUNT(*) FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id GROUP BY T1.id", "pred_sql": "SELECT stadium.name, COUNT(game.id) AS total_games FROM stadium LEFT JOIN game ON stadium.id = game.stadium_id GROUP BY stadium.id", "source_tables": ["game", "stadium"], "error_info": "Result not equal"}, {"sample_id": 1292, "db_id": "game_injury", "score": 1, "gold_sql": "SELECT T1.date, T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id ORDER BY T1.season DESC", "pred_sql": "SELECT g.Date, ia.Player FROM injury_accident AS ia JOIN game AS g ON ia.game_id = g.id ORDER BY g.Season DESC", "source_tables": ["injury_accident", "game"], "error_info": ""}, {"sample_id": 1293, "db_id": "soccer_1", "score": 1, "gold_sql": "SELECT T1.name, T2.name FROM Country AS T1 JOIN League AS T2 ON T1.id = T2.country_id", "pred_sql": "SELECT Country.name AS country_name, League.name AS league_name FROM Country JOIN League ON Country.id = League.country_id", "source_tables": ["country", "league"], "error_info": ""}, {"sample_id": 1294, "db_id": "soccer_1", "score": 0, "gold_sql": "SELECT COUNT(*) FROM Country AS T1 JOIN League AS T2 ON T1.id = T2.country_id WHERE T1.name = 'England'", "pred_sql": "SELECT COUNT(*) FROM League WHERE name = 'England'", "source_tables": ["country", "league"], "error_info": "Result not equal"}, {"sample_id": 1295, "db_id": "soccer_1", "score": 1, "gold_sql": "SELECT AVG(weight) FROM Player", "pred_sql": "SELECT AVG(weight) AS average_weight FROM Player", "source_tables": ["player"], "error_info": ""}, {"sample_id": 1296, "db_id": "soccer_1", "score": 0, "gold_sql": "SELECT MAX(weight), MIN(weight) FROM Player", "pred_sql": "SELECT MAX(height) AS max_height, MIN(height) AS min_height FROM Player", "source_tables": ["player"], "error_info": "Result not equal"}, {"sample_id": 1297, "db_id": "soccer_1", "score": 0, "gold_sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating > (SELECT AVG(overall_rating) FROM Player_Attributes)", "pred_sql": "SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE overall_rating > (SELECT AVG(overall_rating) FROM Player_Attributes))", "source_tables": ["player_attributes", "player"], "error_info": "Result not equal"}, {"sample_id": 1298, "db_id": "soccer_1", "score": 0, "gold_sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.dribbling = (SELECT MAX(overall_rating) FROM Player_Attributes)", "pred_sql": "SELECT Player.player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY Player_Attributes.dribbling DESC LIMIT 1", "source_tables": ["player_attributes", "player"], "error_info": "Result not equal"}, {"sample_id": 1299, "db_id": "soccer_1", "score": 0, "gold_sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.crossing > 90 AND T2.preferred_foot = 'right'", "pred_sql": "SELECT Player.player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.crossing > 90 AND Player_Attributes.preferred_foot = 'right'", "source_tables": ["player_attributes", "player"], "error_info": "Result not equal"}, {"sample_id": 1300, "db_id": "soccer_1", "score": 0, "gold_sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.preferred_foot = 'left' AND T2.overall_rating >= 85 AND T2.overall_rating <= 90", "pred_sql": "SELECT Player.player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.preferred_foot = 'left' AND Player_Attributes.overall_rating BETWEEN '85' AND '90'", "source_tables": ["player_attributes", "player"], "error_info": "Result not equal"}, {"sample_id": 1301, "db_id": "soccer_1", "score": 1, "gold_sql": "SELECT preferred_foot, AVG(overall_rating) FROM Player_Attributes GROUP BY preferred_foot", "pred_sql": "SELECT preferred_foot, AVG(overall_rating) AS average_rating FROM Player_Attributes GROUP BY preferred_foot", "source_tables": ["player_attributes"], "error_info": ""}, {"sample_id": 1302, "db_id": "soccer_1", "score": 1, "gold_sql": "SELECT preferred_foot, COUNT(*) FROM Player_Attributes WHERE overall_rating > 80 GROUP BY preferred_foot", "pred_sql": "SELECT preferred_foot, COUNT(*) AS count FROM Player_Attributes WHERE overall_rating > 80 GROUP BY preferred_foot", "source_tables": ["player_attributes"], "error_info": ""}, {"sample_id": 1303, "db_id": "soccer_1", "score": 0, "gold_sql": "SELECT player_api_id FROM Player WHERE height >= 180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating > 85", "pred_sql": "SELECT Player.id FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.height >= 180 AND Player_Attributes.overall_rating > 85", "source_tables": ["player_attributes", "player"], "error_info": "Result not equal"}, {"sample_id": 1304, "db_id": "soccer_1", "score": 0, "gold_sql": "SELECT player_api_id FROM Player WHERE height >= 180 AND height <= 190 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE preferred_foot = 'left'", "pred_sql": "SELECT Player.id FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.height BETWEEN 180 AND 190 AND Player_Attributes.preferred_foot = 'left'", "source_tables": ["player_attributes", "player"], "error_info": "Result not equal"}, {"sample_id": 1305, "db_id": "soccer_1", "score": 0, "gold_sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY overall_rating DESC LIMIT 3", "pred_sql": "SELECT player_name, overall_rating FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY overall_rating DESC LIMIT 3", "source_tables": ["player_attributes", "player"], "error_info": "Result not equal"}, {"sample_id": 1306, "db_id": "soccer_1", "score": 0, "gold_sql": "SELECT DISTINCT T1.player_name, T1.birthday FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY potential DESC LIMIT 5", "pred_sql": "SELECT Player.player_name, Player.birthday FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY Player_Attributes.potential DESC LIMIT 5", "source_tables": ["player_attributes", "player"], "error_info": "Result not equal"}, {"sample_id": 1307, "db_id": "performance_attendance", "score": 1, "gold_sql": "SELECT COUNT(*) FROM performance", "pred_sql": "SELECT COUNT(*) AS Total_Performances FROM performance", "source_tables": ["performance"], "error_info": ""}, {"sample_id": 1308, "db_id": "performance_attendance", "score": 1, "gold_sql": "SELECT HOST FROM performance ORDER BY Attendance ASC", "pred_sql": "SELECT Host FROM performance ORDER BY Attendance ASC", "source_tables": ["performance"], "error_info": ""}, {"sample_id": 1309, "db_id": "performance_attendance", "score": 1, "gold_sql": "SELECT Date, LOCATION FROM performance", "pred_sql": "SELECT Date, Location FROM performance", "source_tables": ["performance"], "error_info": ""}, {"sample_id": 1310, "db_id": "performance_attendance", "score": 0, "gold_sql": "SELECT Attendance FROM performance WHERE LOCATION = 'TD Garden' OR LOCATION = 'Bell Centre'", "pred_sql": "SELECT m.Name, p.Date, p.Host, p.Location, p.Attendance, ma.Num_of_Pieces FROM member AS m JOIN member_attendance AS ma ON m.Member_ID = ma.Member_ID JOIN performance AS p ON ma.Performance_ID = p.Performance_ID WHERE p.Location IN ('TD Garden', 'Bell Centre')", "source_tables": ["performance"], "error_info": "Result not equal"}, {"sample_id": 1311, "db_id": "performance_attendance", "score": 1, "gold_sql": "SELECT AVG(Attendance) FROM performance", "pred_sql": "SELECT AVG(CAST(Attendance AS INT)) AS Average_Attendance FROM performance", "source_tables": ["performance"], "error_info": ""}, {"sample_id": 1312, "db_id": "performance_attendance", "score": 1, "gold_sql": "SELECT Date FROM performance ORDER BY Attendance DESC LIMIT 1", "pred_sql": "SELECT Date FROM performance ORDER BY Attendance DESC LIMIT 1", "source_tables": ["performance"], "error_info": ""}, {"sample_id": 1313, "db_id": "performance_attendance", "score": 1, "gold_sql": "SELECT LOCATION, COUNT(*) FROM performance GROUP BY LOCATION", "pred_sql": "SELECT Location, COUNT(*) AS Number_of_Performances FROM performance GROUP BY Location", "source_tables": ["performance"], "error_info": ""}, {"sample_id": 1314, "db_id": "performance_attendance", "score": 0, "gold_sql": "SELECT LOCATION FROM performance GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Location, COUNT(*) AS Performance_Count FROM performance GROUP BY Location ORDER BY Performance_Count DESC LIMIT 1", "source_tables": ["performance"], "error_info": "Result not equal"}, {"sample_id": 1315, "db_id": "performance_attendance", "score": 1, "gold_sql": "SELECT LOCATION FROM performance GROUP BY LOCATION HAVING COUNT(*) >= 2", "pred_sql": "SELECT Location FROM performance GROUP BY Location HAVING COUNT(Performance_ID) >= 2", "source_tables": ["performance"], "error_info": ""}, {"sample_id": 1316, "db_id": "performance_attendance", "score": 1, "gold_sql": "SELECT LOCATION FROM performance WHERE Attendance > 2000 INTERSECT SELECT LOCATION FROM performance WHERE Attendance < 1000", "pred_sql": "SELECT Location FROM performance WHERE Attendance > 2000 OR Attendance < 1000 GROUP BY Location HAVING COUNT(CASE WHEN Attendance > 2000 THEN 1 END) > 0 AND COUNT(CASE WHEN Attendance < 1000 THEN 1 END) > 0", "source_tables": ["performance"], "error_info": ""}, {"sample_id": 1317, "db_id": "performance_attendance", "score": 1, "gold_sql": "SELECT T2.Name, T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID", "pred_sql": "SELECT member.Name, performance.Location FROM member JOIN member_attendance ON member.Member_ID = member_attendance.Member_ID JOIN performance ON member_attendance.Performance_ID = performance.Performance_ID", "source_tables": ["member_attendance", "member", "performance"], "error_info": ""}, {"sample_id": 1318, "db_id": "performance_attendance", "score": 1, "gold_sql": "SELECT T2.Name, T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID ORDER BY T2.Name ASC", "pred_sql": "SELECT member.Name, performance.Location FROM member JOIN member_attendance ON member.Member_ID = member_attendance.Member_ID JOIN performance ON member_attendance.Performance_ID = performance.Performance_ID ORDER BY member.Name ASC", "source_tables": ["member_attendance", "member", "performance"], "error_info": ""}, {"sample_id": 1319, "db_id": "performance_attendance", "score": 1, "gold_sql": "SELECT T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID WHERE T2.Role = 'Violin'", "pred_sql": "SELECT performance.Date FROM performance JOIN member_attendance ON performance.Performance_ID = member_attendance.Performance_ID JOIN member ON member_attendance.Member_ID = member.Member_ID WHERE member.Role = 'Violin'", "source_tables": ["member_attendance", "member", "performance"], "error_info": ""}, {"sample_id": 1320, "db_id": "performance_attendance", "score": 1, "gold_sql": "SELECT T2.Name, T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID ORDER BY T3.Attendance DESC", "pred_sql": "SELECT m.Name, p.Date FROM member AS m JOIN member_attendance AS ma ON m.Member_ID = ma.Member_ID JOIN performance AS p ON ma.Performance_ID = p.Performance_ID ORDER BY p.Attendance DESC", "source_tables": ["member_attendance", "member", "performance"], "error_info": ""}, {"sample_id": 1321, "db_id": "performance_attendance", "score": 1, "gold_sql": "SELECT Name FROM member WHERE NOT Member_ID IN (SELECT Member_ID FROM member_attendance)", "pred_sql": "SELECT Name FROM member WHERE NOT Member_ID IN (SELECT Member_ID FROM member_attendance)", "source_tables": ["member_attendance", "member"], "error_info": ""}, {"sample_id": 1322, "db_id": "college_2", "score": 1, "gold_sql": "SELECT DISTINCT building FROM classroom WHERE capacity > 50", "pred_sql": "SELECT DISTINCT building FROM classroom WHERE capacity > '50'", "source_tables": ["classroom"], "error_info": ""}, {"sample_id": 1323, "db_id": "college_2", "score": 1, "gold_sql": "SELECT DISTINCT building FROM classroom WHERE capacity > 50", "pred_sql": "SELECT DISTINCT building FROM classroom WHERE capacity > '50'", "source_tables": ["classroom"], "error_info": ""}, {"sample_id": 1324, "db_id": "college_2", "score": 1, "gold_sql": "SELECT COUNT(*) FROM classroom WHERE building <> 'Lamberton'", "pred_sql": "SELECT COUNT(*) FROM classroom WHERE building <> 'Lamberton'", "source_tables": ["classroom"], "error_info": ""}, {"sample_id": 1325, "db_id": "college_2", "score": 1, "gold_sql": "SELECT COUNT(*) FROM classroom WHERE building <> 'Lamberton'", "pred_sql": "SELECT COUNT(*) AS num_classrooms_not_in_lamberton FROM classroom WHERE building <> 'Lamberton'", "source_tables": ["classroom"], "error_info": ""}, {"sample_id": 1326, "db_id": "college_2", "score": 1, "gold_sql": "SELECT dept_name, building FROM department WHERE budget > (SELECT AVG(budget) FROM department)", "pred_sql": "SELECT dept_name, building FROM department WHERE budget > (SELECT AVG(budget) FROM department)", "source_tables": ["department"], "error_info": ""}, {"sample_id": 1327, "db_id": "college_2", "score": 1, "gold_sql": "SELECT dept_name, building FROM department WHERE budget > (SELECT AVG(budget) FROM department)", "pred_sql": "SELECT dept_name, building FROM department WHERE budget > (SELECT AVG(budget) FROM department)", "source_tables": ["department"], "error_info": ""}, {"sample_id": 1328, "db_id": "college_2", "score": 1, "gold_sql": "SELECT building, room_number FROM classroom WHERE capacity BETWEEN 50 AND 100", "pred_sql": "SELECT room_number, building FROM classroom WHERE capacity BETWEEN '50' AND '100'", "source_tables": ["classroom"], "error_info": ""}, {"sample_id": 1329, "db_id": "college_2", "score": 1, "gold_sql": "SELECT building, room_number FROM classroom WHERE capacity BETWEEN 50 AND 100", "pred_sql": "SELECT room_number, building FROM classroom WHERE capacity BETWEEN '50' AND '100'", "source_tables": ["classroom"], "error_info": ""}, {"sample_id": 1330, "db_id": "college_2", "score": 1, "gold_sql": "SELECT dept_name, building FROM department ORDER BY budget DESC LIMIT 1", "pred_sql": "SELECT dept_name, building FROM department WHERE budget = (SELECT MAX(budget) FROM department)", "source_tables": ["department"], "error_info": ""}, {"sample_id": 1331, "db_id": "college_2", "score": 1, "gold_sql": "SELECT dept_name, building FROM department ORDER BY budget DESC LIMIT 1", "pred_sql": "SELECT dept_name, building FROM department WHERE budget = (SELECT MAX(budget) FROM department)", "source_tables": ["department"], "error_info": ""}, {"sample_id": 1332, "db_id": "college_2", "score": 1, "gold_sql": "SELECT name FROM student WHERE dept_name = 'History' ORDER BY tot_cred DESC LIMIT 1", "pred_sql": "SELECT name FROM student WHERE dept_name = 'History' ORDER BY tot_cred DESC LIMIT 1", "source_tables": ["student"], "error_info": ""}, {"sample_id": 1333, "db_id": "college_2", "score": 1, "gold_sql": "SELECT name FROM student WHERE dept_name = 'History' ORDER BY tot_cred DESC LIMIT 1", "pred_sql": "SELECT name FROM student WHERE dept_name = 'History' ORDER BY tot_cred DESC LIMIT 1", "source_tables": ["student"], "error_info": ""}, {"sample_id": 1334, "db_id": "college_2", "score": 1, "gold_sql": "SELECT COUNT(*) FROM classroom WHERE building = 'Lamberton'", "pred_sql": "SELECT COUNT(*) FROM classroom WHERE building = 'Lamberton'", "source_tables": ["classroom"], "error_info": ""}, {"sample_id": 1335, "db_id": "college_2", "score": 1, "gold_sql": "SELECT COUNT(*) FROM classroom WHERE building = 'Lamberton'", "pred_sql": "SELECT COUNT(*) FROM classroom WHERE building = 'Lamberton'", "source_tables": ["classroom"], "error_info": ""}, {"sample_id": 1336, "db_id": "college_2", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT s_id) FROM advisor", "pred_sql": "SELECT COUNT(DISTINCT advisor.s_ID) AS student_count FROM advisor", "source_tables": ["advisor"], "error_info": ""}, {"sample_id": 1337, "db_id": "college_2", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT s_id) FROM advisor", "pred_sql": "SELECT COUNT(DISTINCT advisor.s_ID) AS student_count FROM advisor", "source_tables": ["advisor"], "error_info": ""}, {"sample_id": 1338, "db_id": "college_2", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT dept_name) FROM course", "pred_sql": "SELECT COUNT(DISTINCT dept_name) AS department_count FROM course", "source_tables": ["course"], "error_info": ""}, {"sample_id": 1339, "db_id": "college_2", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT dept_name) FROM course", "pred_sql": "SELECT COUNT(DISTINCT dept_name) AS department_count FROM course", "source_tables": ["course"], "error_info": ""}, {"sample_id": 1340, "db_id": "college_2", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT course_id) FROM course WHERE dept_name = 'Physics'", "pred_sql": "SELECT COUNT(DISTINCT course_id) AS num_courses FROM course WHERE dept_name = 'Physics'", "source_tables": ["course"], "error_info": ""}, {"sample_id": 1341, "db_id": "college_2", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT course_id) FROM course WHERE dept_name = 'Physics'", "pred_sql": "SELECT COUNT(*) AS course_count FROM course WHERE dept_name = 'Physics'", "source_tables": ["course"], "error_info": ""}, {"sample_id": 1342, "db_id": "college_2", "score": 1, "gold_sql": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING COUNT(*) = 2", "pred_sql": "SELECT c.title FROM course AS c JOIN prereq AS p ON c.course_id = p.course_id GROUP BY c.course_id HAVING COUNT(p.prereq_id) = 2", "source_tables": ["course", "prereq"], "error_info": ""}, {"sample_id": 1343, "db_id": "college_2", "score": 1, "gold_sql": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING COUNT(*) = 2", "pred_sql": "SELECT c.title FROM course AS c JOIN prereq AS p ON c.course_id = p.course_id GROUP BY c.course_id HAVING COUNT(p.prereq_id) = 2", "source_tables": ["course", "prereq"], "error_info": ""}, {"sample_id": 1344, "db_id": "college_2", "score": 1, "gold_sql": "SELECT T1.title, T1.credits, T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING COUNT(*) > 1", "pred_sql": "SELECT c.title, c.credits, c.dept_name FROM course AS c JOIN prereq AS p ON c.course_id = p.course_id GROUP BY c.course_id HAVING COUNT(p.prereq_id) > 1", "source_tables": ["course", "prereq"], "error_info": ""}, {"sample_id": 1345, "db_id": "college_2", "score": 1, "gold_sql": "SELECT T1.title, T1.credits, T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING COUNT(*) > 1", "pred_sql": "SELECT c.title, c.credits, c.dept_name FROM course AS c JOIN prereq AS p ON c.course_id = p.course_id GROUP BY c.course_id HAVING COUNT(p.prereq_id) > 1", "source_tables": ["course", "prereq"], "error_info": ""}, {"sample_id": 1346, "db_id": "college_2", "score": 1, "gold_sql": "SELECT COUNT(*) FROM course WHERE NOT course_id IN (SELECT course_id FROM prereq)", "pred_sql": "SELECT COUNT(*) AS num_courses FROM course WHERE NOT course_id IN (SELECT course_id FROM prereq)", "source_tables": ["course", "prereq"], "error_info": ""}, {"sample_id": 1347, "db_id": "college_2", "score": 1, "gold_sql": "SELECT COUNT(*) FROM course WHERE NOT course_id IN (SELECT course_id FROM prereq)", "pred_sql": "SELECT COUNT(*) AS course_count FROM course WHERE NOT course_id IN (SELECT course_id FROM prereq)", "source_tables": ["course", "prereq"], "error_info": ""}, {"sample_id": 1348, "db_id": "college_2", "score": 1, "gold_sql": "SELECT title FROM course WHERE NOT course_id IN (SELECT course_id FROM prereq)", "pred_sql": "SELECT title FROM course WHERE NOT course_id IN (SELECT course_id FROM prereq)", "source_tables": ["course", "prereq"], "error_info": ""}, {"sample_id": 1349, "db_id": "college_2", "score": 1, "gold_sql": "SELECT title FROM course WHERE NOT course_id IN (SELECT course_id FROM prereq)", "pred_sql": "SELECT title FROM course WHERE NOT course_id IN (SELECT course_id FROM prereq)", "source_tables": ["course", "prereq"], "error_info": ""}, {"sample_id": 1350, "db_id": "college_2", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT id) FROM teaches", "pred_sql": "SELECT COUNT(DISTINCT ID) AS different_instructors FROM teaches", "source_tables": ["teaches"], "error_info": ""}, {"sample_id": 1351, "db_id": "college_2", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT id) FROM teaches", "pred_sql": "SELECT COUNT(DISTINCT ID) AS distinct_instructors_count FROM teaches", "source_tables": ["teaches"], "error_info": ""}, {"sample_id": 1352, "db_id": "college_2", "score": 1, "gold_sql": "SELECT SUM(budget) FROM department WHERE dept_name = 'Marketing' OR dept_name = 'Finance'", "pred_sql": "SELECT SUM(budget) AS total_budget FROM department WHERE dept_name IN ('Marketing', 'Finance')", "source_tables": ["department"], "error_info": ""}, {"sample_id": 1353, "db_id": "college_2", "score": 1, "gold_sql": "SELECT SUM(budget) FROM department WHERE dept_name = 'Marketing' OR dept_name = 'Finance'", "pred_sql": "SELECT SUM(budget) AS total_budget FROM department WHERE dept_name IN ('Marketing', 'Finance')", "source_tables": ["department"], "error_info": ""}, {"sample_id": 1354, "db_id": "college_2", "score": 1, "gold_sql": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'", "pred_sql": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'", "source_tables": ["instructor"], "error_info": ""}, {"sample_id": 1355, "db_id": "college_2", "score": 0, "gold_sql": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'", "pred_sql": "SELECT department.dept_name FROM department JOIN instructor ON department.dept_name = instructor.dept_name WHERE instructor.name LIKE 'Soisalon'", "source_tables": ["instructor"], "error_info": "Result not equal"}, {"sample_id": 1356, "db_id": "college_2", "score": 1, "gold_sql": "SELECT COUNT(*) FROM classroom WHERE building = 'Lamberton' AND capacity < 50", "pred_sql": "SELECT COUNT(*) FROM classroom WHERE building = 'Lamberton' AND capacity < '50'", "source_tables": ["classroom"], "error_info": ""}, {"sample_id": 1357, "db_id": "college_2", "score": 1, "gold_sql": "SELECT COUNT(*) FROM classroom WHERE building = 'Lamberton' AND capacity < 50", "pred_sql": "SELECT COUNT(*) FROM classroom WHERE building = 'Lamberton' AND capacity < '50'", "source_tables": ["classroom"], "error_info": ""}, {"sample_id": 1358, "db_id": "college_2", "score": 1, "gold_sql": "SELECT dept_name, budget FROM department WHERE budget > (SELECT AVG(budget) FROM department)", "pred_sql": "SELECT dept_name, budget FROM department WHERE budget > (SELECT AVG(budget) FROM department)", "source_tables": ["department"], "error_info": ""}, {"sample_id": 1359, "db_id": "college_2", "score": 1, "gold_sql": "SELECT dept_name, budget FROM department WHERE budget > (SELECT AVG(budget) FROM department)", "pred_sql": "SELECT dept_name, budget FROM department WHERE budget > (SELECT AVG(budget) FROM department)", "source_tables": ["department"], "error_info": ""}, {"sample_id": 1360, "db_id": "college_2", "score": 1, "gold_sql": "SELECT name FROM instructor WHERE dept_name = 'Statistics' ORDER BY salary LIMIT 1", "pred_sql": "SELECT name FROM instructor WHERE dept_name = 'Statistics' ORDER BY salary ASC LIMIT 1", "source_tables": ["instructor"], "error_info": ""}, {"sample_id": 1361, "db_id": "college_2", "score": 1, "gold_sql": "SELECT name FROM instructor WHERE dept_name = 'Statistics' ORDER BY salary LIMIT 1", "pred_sql": "SELECT name FROM instructor WHERE dept_name = 'Statistics' ORDER BY salary ASC LIMIT 1", "source_tables": ["instructor"], "error_info": ""}, {"sample_id": 1362, "db_id": "college_2", "score": 1, "gold_sql": "SELECT title FROM course WHERE dept_name = 'Statistics' INTERSECT SELECT title FROM course WHERE dept_name = 'Psychology'", "pred_sql": "SELECT c.title FROM course AS c WHERE c.dept_name IN ('Statistics', 'Psychology') GROUP BY c.title HAVING COUNT(DISTINCT c.dept_name) = 2", "source_tables": ["course"], "error_info": ""}, {"sample_id": 1363, "db_id": "college_2", "score": 1, "gold_sql": "SELECT title FROM course WHERE dept_name = 'Statistics' INTERSECT SELECT title FROM course WHERE dept_name = 'Psychology'", "pred_sql": "SELECT title FROM course WHERE dept_name IN ('Statistics', 'Psychology') GROUP BY title HAVING COUNT(DISTINCT dept_name) = 2", "source_tables": ["course"], "error_info": ""}, {"sample_id": 1364, "db_id": "college_2", "score": 0, "gold_sql": "SELECT title FROM course WHERE dept_name = 'Statistics' EXCEPT SELECT title FROM course WHERE dept_name = 'Psychology'", "pred_sql": "SELECT title FROM course WHERE dept_name = 'Statistics' AND dept_name <> 'Psychology'", "source_tables": ["course"], "error_info": "Result not equal"}, {"sample_id": 1365, "db_id": "college_2", "score": 0, "gold_sql": "SELECT title FROM course WHERE dept_name = 'Statistics' EXCEPT SELECT title FROM course WHERE dept_name = 'Psychology'", "pred_sql": "SELECT title FROM course WHERE dept_name = 'Statistics' AND dept_name <> 'Psychology'", "source_tables": ["course"], "error_info": "Result not equal"}, {"sample_id": 1366, "db_id": "college_2", "score": 1, "gold_sql": "SELECT id FROM teaches WHERE semester = 'Fall' AND YEAR = 2009 EXCEPT SELECT id FROM teaches WHERE semester = 'Spring' AND YEAR = 2010", "pred_sql": "SELECT DISTINCT t1.ID FROM teaches AS t1 WHERE t1.semester = 'Fall' AND t1.year = '2009' AND NOT t1.ID IN (SELECT t2.ID FROM teaches AS t2 WHERE t2.semester = 'Spring' AND t2.year = '2010')", "source_tables": ["teaches"], "error_info": ""}, {"sample_id": 1367, "db_id": "college_2", "score": 1, "gold_sql": "SELECT id FROM teaches WHERE semester = 'Fall' AND YEAR = 2009 EXCEPT SELECT id FROM teaches WHERE semester = 'Spring' AND YEAR = 2010", "pred_sql": "SELECT DISTINCT teaches.ID FROM teaches WHERE teaches.semester = 'Fall' AND teaches.year = '2009' AND NOT teaches.ID IN (SELECT teaches.ID FROM teaches WHERE teaches.semester = 'Spring' AND teaches.year = '2010')", "source_tables": ["teaches"], "error_info": ""}, {"sample_id": 1368, "db_id": "college_2", "score": 1, "gold_sql": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id = T2.id WHERE YEAR = 2009 OR YEAR = 2010", "pred_sql": "SELECT DISTINCT student.name FROM student JOIN takes ON student.ID = takes.ID WHERE takes.year IN ('2009', '2010')", "source_tables": ["student", "takes"], "error_info": ""}, {"sample_id": 1369, "db_id": "college_2", "score": 1, "gold_sql": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id = T2.id WHERE YEAR = 2009 OR YEAR = 2010", "pred_sql": "SELECT DISTINCT student.name FROM student JOIN takes ON student.ID = takes.ID WHERE takes.year IN ('2009', '2010')", "source_tables": ["student", "takes"], "error_info": ""}, {"sample_id": 1370, "db_id": "college_2", "score": 1, "gold_sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY COUNT(*) DESC LIMIT 3", "pred_sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY COUNT(course_id) DESC LIMIT 3", "source_tables": ["course"], "error_info": ""}, {"sample_id": 1371, "db_id": "college_2", "score": 1, "gold_sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY COUNT(*) DESC LIMIT 3", "pred_sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY COUNT(course_id) DESC LIMIT 3", "source_tables": ["course"], "error_info": ""}, {"sample_id": 1372, "db_id": "college_2", "score": 1, "gold_sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY SUM(credits) DESC LIMIT 1", "pred_sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY SUM(credits) DESC LIMIT 1", "source_tables": ["course"], "error_info": ""}, {"sample_id": 1373, "db_id": "college_2", "score": 1, "gold_sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY SUM(credits) DESC LIMIT 1", "pred_sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY SUM(credits) DESC LIMIT 1", "source_tables": ["course"], "error_info": ""}, {"sample_id": 1374, "db_id": "college_2", "score": 1, "gold_sql": "SELECT title FROM course ORDER BY title, credits", "pred_sql": "SELECT title FROM course ORDER BY title, credits", "source_tables": ["course"], "error_info": ""}, {"sample_id": 1375, "db_id": "college_2", "score": 0, "gold_sql": "SELECT title FROM course ORDER BY title, credits", "pred_sql": "SELECT title, credits FROM course ORDER BY title, credits", "source_tables": ["course"], "error_info": "Result not equal"}, {"sample_id": 1376, "db_id": "college_2", "score": 1, "gold_sql": "SELECT dept_name FROM department ORDER BY budget LIMIT 1", "pred_sql": "SELECT dept_name FROM department ORDER BY budget ASC LIMIT 1", "source_tables": ["department"], "error_info": ""}, {"sample_id": 1377, "db_id": "college_2", "score": 1, "gold_sql": "SELECT dept_name FROM department ORDER BY budget LIMIT 1", "pred_sql": "SELECT dept_name FROM department ORDER BY budget ASC LIMIT 1", "source_tables": ["department"], "error_info": ""}, {"sample_id": 1378, "db_id": "college_2", "score": 1, "gold_sql": "SELECT dept_name, building FROM department ORDER BY budget DESC", "pred_sql": "SELECT dept_name, building FROM department ORDER BY budget DESC", "source_tables": ["department"], "error_info": ""}, {"sample_id": 1379, "db_id": "college_2", "score": 1, "gold_sql": "SELECT dept_name, building FROM department ORDER BY budget DESC", "pred_sql": "SELECT dept_name, building FROM department ORDER BY budget DESC", "source_tables": ["department"], "error_info": ""}, {"sample_id": 1380, "db_id": "college_2", "score": 1, "gold_sql": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1", "pred_sql": "SELECT name FROM instructor WHERE salary = (SELECT MAX(salary) FROM instructor)", "source_tables": ["instructor"], "error_info": ""}, {"sample_id": 1381, "db_id": "college_2", "score": 1, "gold_sql": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1", "pred_sql": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1", "source_tables": ["instructor"], "error_info": ""}, {"sample_id": 1382, "db_id": "college_2", "score": 1, "gold_sql": "SELECT * FROM instructor ORDER BY salary", "pred_sql": "SELECT * FROM instructor ORDER BY salary ASC", "source_tables": ["instructor"], "error_info": ""}, {"sample_id": 1383, "db_id": "college_2", "score": 1, "gold_sql": "SELECT * FROM instructor ORDER BY salary", "pred_sql": "SELECT * FROM instructor ORDER BY salary ASC", "source_tables": ["instructor"], "error_info": ""}, {"sample_id": 1384, "db_id": "college_2", "score": 1, "gold_sql": "SELECT name, dept_name FROM student ORDER BY tot_cred", "pred_sql": "SELECT name, dept_name FROM student ORDER BY tot_cred ASC", "source_tables": ["student"], "error_info": ""}, {"sample_id": 1385, "db_id": "college_2", "score": 1, "gold_sql": "SELECT name, dept_name FROM student ORDER BY tot_cred", "pred_sql": "SELECT name, dept_name FROM student ORDER BY tot_cred ASC", "source_tables": ["student"], "error_info": ""}, {"sample_id": 1386, "db_id": "college_2", "score": 1, "gold_sql": "SELECT T1.title, T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 ORDER BY T1.title", "pred_sql": "SELECT course.title, instructor.name FROM course JOIN teaches ON course.course_id = teaches.course_id JOIN instructor ON teaches.ID = instructor.ID WHERE teaches.year = '2008' ORDER BY course.title", "source_tables": ["course", "teaches", "instructor"], "error_info": ""}, {"sample_id": 1387, "db_id": "college_2", "score": 1, "gold_sql": "SELECT T1.title, T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 ORDER BY T1.title", "pred_sql": "SELECT course.title, instructor.name FROM course JOIN teaches ON course.course_id = teaches.course_id JOIN instructor ON teaches.ID = instructor.ID WHERE teaches.year = '2008' ORDER BY course.title ASC", "source_tables": ["course", "teaches", "instructor"], "error_info": ""}, {"sample_id": 1388, "db_id": "college_2", "score": 1, "gold_sql": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id = T2.i_id GROUP BY T2.i_id HAVING COUNT(*) > 1", "pred_sql": "SELECT instructor.name FROM instructor JOIN advisor ON instructor.ID = advisor.i_ID GROUP BY instructor.ID HAVING COUNT(advisor.s_ID) > 1", "source_tables": ["instructor", "advisor"], "error_info": ""}, {"sample_id": 1389, "db_id": "college_2", "score": 1, "gold_sql": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id = T2.i_id GROUP BY T2.i_id HAVING COUNT(*) > 1", "pred_sql": "SELECT instructor.name FROM instructor JOIN advisor ON instructor.ID = advisor.i_ID GROUP BY instructor.ID HAVING COUNT(advisor.s_ID) > 1", "source_tables": ["instructor", "advisor"], "error_info": ""}, {"sample_id": 1390, "db_id": "college_2", "score": 1, "gold_sql": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id = T2.s_id GROUP BY T2.s_id HAVING COUNT(*) > 1", "pred_sql": "SELECT s.name FROM student AS s JOIN advisor AS a ON s.ID = a.s_ID GROUP BY s.ID HAVING COUNT(a.i_ID) > 1", "source_tables": ["advisor", "student"], "error_info": ""}, {"sample_id": 1391, "db_id": "college_2", "score": 1, "gold_sql": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id = T2.s_id GROUP BY T2.s_id HAVING COUNT(*) > 1", "pred_sql": "SELECT student.name FROM student JOIN advisor ON student.ID = advisor.s_ID GROUP BY student.ID HAVING COUNT(advisor.i_ID) > 1", "source_tables": ["advisor", "student"], "error_info": ""}, {"sample_id": 1392, "db_id": "college_2", "score": 1, "gold_sql": "SELECT COUNT(*), building FROM classroom WHERE capacity > 50 GROUP BY building", "pred_sql": "SELECT building, COUNT(*) AS room_count FROM classroom WHERE capacity > '50' GROUP BY building", "source_tables": ["classroom"], "error_info": ""}, {"sample_id": 1393, "db_id": "college_2", "score": 1, "gold_sql": "SELECT COUNT(*), building FROM classroom WHERE capacity > 50 GROUP BY building", "pred_sql": "SELECT building, COUNT(*) AS room_count FROM classroom WHERE capacity > '50' GROUP BY building", "source_tables": ["classroom"], "error_info": ""}, {"sample_id": 1394, "db_id": "college_2", "score": 1, "gold_sql": "SELECT MAX(capacity), AVG(capacity), building FROM classroom GROUP BY building", "pred_sql": "SELECT building, MAX(capacity) AS max_capacity, AVG(capacity) AS avg_capacity FROM classroom GROUP BY building", "source_tables": ["classroom"], "error_info": ""}, {"sample_id": 1395, "db_id": "college_2", "score": 1, "gold_sql": "SELECT MAX(capacity), AVG(capacity), building FROM classroom GROUP BY building", "pred_sql": "SELECT building, MAX(capacity) AS greatest_capacity, AVG(capacity) AS average_capacity FROM classroom GROUP BY building", "source_tables": ["classroom"], "error_info": ""}, {"sample_id": 1396, "db_id": "college_2", "score": 1, "gold_sql": "SELECT title FROM course GROUP BY title HAVING COUNT(*) > 1", "pred_sql": "SELECT DISTINCT c.title FROM course AS c JOIN department AS d ON c.dept_name = d.dept_name GROUP BY c.title HAVING COUNT(DISTINCT d.dept_name) > 1", "source_tables": ["course"], "error_info": ""}, {"sample_id": 1397, "db_id": "college_2", "score": 1, "gold_sql": "SELECT title FROM course GROUP BY title HAVING COUNT(*) > 1", "pred_sql": "SELECT DISTINCT c.title FROM course AS c JOIN department AS d ON c.dept_name = d.dept_name GROUP BY c.title HAVING COUNT(DISTINCT d.dept_name) > 1", "source_tables": ["course"], "error_info": ""}, {"sample_id": 1398, "db_id": "college_2", "score": 1, "gold_sql": "SELECT SUM(credits), dept_name FROM course GROUP BY dept_name", "pred_sql": "SELECT SUM(c.credits) AS total_credits, c.dept_name FROM course AS c GROUP BY c.dept_name", "source_tables": ["course"], "error_info": ""}, {"sample_id": 1399, "db_id": "college_2", "score": 1, "gold_sql": "SELECT SUM(credits), dept_name FROM course GROUP BY dept_name", "pred_sql": "SELECT dept_name, SUM(credits) AS total_credits FROM course GROUP BY dept_name", "source_tables": ["course"], "error_info": ""}, {"sample_id": 1400, "db_id": "college_2", "score": 0, "gold_sql": "SELECT MIN(salary), dept_name FROM instructor GROUP BY dept_name HAVING AVG(salary) > (SELECT AVG(salary) FROM instructor)", "pred_sql": "SELECT MIN(i.salary) AS min_salary FROM instructor AS i WHERE i.dept_name IN (SELECT dept_name FROM instructor GROUP BY dept_name HAVING AVG(salary) > (SELECT AVG(salary) FROM instructor))", "source_tables": ["instructor"], "error_info": "Result not equal"}, {"sample_id": 1401, "db_id": "college_2", "score": 0, "gold_sql": "SELECT MIN(salary), dept_name FROM instructor GROUP BY dept_name HAVING AVG(salary) > (SELECT AVG(salary) FROM instructor)", "pred_sql": "SELECT MIN(salary) FROM instructor WHERE dept_name IN (SELECT dept_name FROM instructor GROUP BY dept_name HAVING AVG(salary) > (SELECT AVG(salary) FROM instructor))", "source_tables": ["instructor"], "error_info": "Result not equal"}, {"sample_id": 1402, "db_id": "college_2", "score": 1, "gold_sql": "SELECT COUNT(*), semester, YEAR FROM SECTION GROUP BY semester, YEAR", "pred_sql": "SELECT semester, year, COUNT(course_id) AS number_of_courses FROM section GROUP BY semester, year", "source_tables": ["section"], "error_info": ""}, {"sample_id": 1403, "db_id": "college_2", "score": 1, "gold_sql": "SELECT COUNT(*), semester, YEAR FROM SECTION GROUP BY semester, YEAR", "pred_sql": "SELECT semester, year, COUNT(course_id) AS course_count FROM section GROUP BY semester, year", "source_tables": ["section"], "error_info": ""}, {"sample_id": 1404, "db_id": "college_2", "score": 0, "gold_sql": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT year, COUNT(course_id) AS course_count FROM section GROUP BY year ORDER BY course_count DESC LIMIT 1", "source_tables": ["section"], "error_info": "Result not equal"}, {"sample_id": 1405, "db_id": "college_2", "score": 0, "gold_sql": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT year, COUNT(course_id) AS course_count FROM section GROUP BY year ORDER BY course_count DESC LIMIT 1", "source_tables": ["section"], "error_info": "Result not equal"}, {"sample_id": 1406, "db_id": "college_2", "score": 0, "gold_sql": "SELECT semester, YEAR FROM SECTION GROUP BY semester, YEAR ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT year, semester, COUNT(course_id) AS course_count FROM section GROUP BY year, semester ORDER BY course_count DESC LIMIT 1", "source_tables": ["section"], "error_info": "Result not equal"}, {"sample_id": 1407, "db_id": "college_2", "score": 0, "gold_sql": "SELECT semester, YEAR FROM SECTION GROUP BY semester, YEAR ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT year, semester, COUNT(course_id) AS course_count FROM section GROUP BY year, semester ORDER BY course_count DESC LIMIT 1", "source_tables": ["section"], "error_info": "Result not equal"}, {"sample_id": 1408, "db_id": "college_2", "score": 1, "gold_sql": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT dept_name FROM department WHERE dept_name = (SELECT dept_name FROM student GROUP BY dept_name ORDER BY COUNT(ID) DESC LIMIT 1)", "source_tables": ["student"], "error_info": ""}, {"sample_id": 1409, "db_id": "college_2", "score": 1, "gold_sql": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT d.dept_name FROM department AS d JOIN (SELECT s.dept_name, COUNT(t.ID) AS enrollment_count FROM student AS s JOIN takes AS t ON s.ID = t.ID GROUP BY s.dept_name) AS enrollments ON d.dept_name = enrollments.dept_name ORDER BY enrollment_count DESC LIMIT 1", "source_tables": ["student"], "error_info": ""}, {"sample_id": 1410, "db_id": "college_2", "score": 1, "gold_sql": "SELECT COUNT(*), dept_name FROM student GROUP BY dept_name", "pred_sql": "SELECT dept_name, COUNT(ID) AS total_students FROM student GROUP BY dept_name", "source_tables": ["student"], "error_info": ""}, {"sample_id": 1411, "db_id": "college_2", "score": 1, "gold_sql": "SELECT COUNT(*), dept_name FROM student GROUP BY dept_name", "pred_sql": "SELECT dept_name, COUNT(ID) AS student_count FROM student GROUP BY dept_name", "source_tables": ["student"], "error_info": ""}, {"sample_id": 1412, "db_id": "college_2", "score": 1, "gold_sql": "SELECT semester, YEAR FROM takes GROUP BY semester, YEAR ORDER BY COUNT(*) LIMIT 1", "pred_sql": "SELECT semester, year FROM takes GROUP BY semester, year ORDER BY COUNT(ID) ASC LIMIT 1", "source_tables": ["takes"], "error_info": ""}, {"sample_id": 1413, "db_id": "college_2", "score": 0, "gold_sql": "SELECT semester, YEAR FROM takes GROUP BY semester, YEAR ORDER BY COUNT(*) LIMIT 1", "pred_sql": "SELECT semester, year, COUNT(DISTINCT ID) AS student_count FROM takes GROUP BY semester, year ORDER BY student_count ASC LIMIT 1", "source_tables": ["takes"], "error_info": "Result not equal"}, {"sample_id": 1414, "db_id": "college_2", "score": 1, "gold_sql": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id = T2.id WHERE T2.dept_name = 'History'", "pred_sql": "SELECT advisor.i_ID FROM advisor JOIN student ON advisor.s_ID = student.ID WHERE student.dept_name = 'History'", "source_tables": ["student", "advisor"], "error_info": ""}, {"sample_id": 1415, "db_id": "college_2", "score": 1, "gold_sql": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id = T2.id WHERE T2.dept_name = 'History'", "pred_sql": "SELECT advisor.i_ID FROM advisor JOIN student ON advisor.s_ID = student.ID JOIN department ON student.dept_name = department.dept_name WHERE department.dept_name = 'History'", "source_tables": ["student", "advisor"], "error_info": ""}, {"sample_id": 1416, "db_id": "college_2", "score": 1, "gold_sql": "SELECT T2.name, T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE T3.dept_name = 'History'", "pred_sql": "SELECT instructor.name, instructor.salary FROM instructor JOIN advisor ON instructor.ID = advisor.i_ID JOIN student ON advisor.s_ID = student.ID WHERE student.dept_name = 'History'", "source_tables": ["instructor", "student", "advisor"], "error_info": ""}, {"sample_id": 1417, "db_id": "college_2", "score": 1, "gold_sql": "SELECT T2.name, T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE T3.dept_name = 'History'", "pred_sql": "SELECT instructor.name, instructor.salary FROM instructor JOIN advisor ON instructor.ID = advisor.i_ID JOIN student ON advisor.s_ID = student.ID WHERE student.dept_name = 'History'", "source_tables": ["instructor", "student", "advisor"], "error_info": ""}, {"sample_id": 1418, "db_id": "college_2", "score": 1, "gold_sql": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq", "pred_sql": "SELECT course_id FROM course WHERE NOT course_id IN (SELECT course_id FROM prereq)", "source_tables": ["course", "prereq"], "error_info": ""}, {"sample_id": 1419, "db_id": "college_2", "score": 1, "gold_sql": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq", "pred_sql": "SELECT course_id FROM course WHERE NOT course_id IN (SELECT course_id FROM prereq)", "source_tables": ["course", "prereq"], "error_info": ""}, {"sample_id": 1420, "db_id": "college_2", "score": 1, "gold_sql": "SELECT title FROM course WHERE NOT course_id IN (SELECT course_id FROM prereq)", "pred_sql": "SELECT title FROM course WHERE NOT course_id IN (SELECT course_id FROM prereq)", "source_tables": ["course", "prereq"], "error_info": ""}, {"sample_id": 1421, "db_id": "college_2", "score": 1, "gold_sql": "SELECT title FROM course WHERE NOT course_id IN (SELECT course_id FROM prereq)", "pred_sql": "SELECT title FROM course WHERE NOT course_id IN (SELECT course_id FROM prereq)", "source_tables": ["course", "prereq"], "error_info": ""}, {"sample_id": 1422, "db_id": "college_2", "score": 0, "gold_sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.title = 'International Finance')", "pred_sql": "SELECT p.prereq_id FROM course AS c JOIN prereq AS p ON c.course_id = p.course_id WHERE c.title = 'International Finance'", "source_tables": ["course", "prereq"], "error_info": "Result not equal"}, {"sample_id": 1423, "db_id": "college_2", "score": 1, "gold_sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.title = 'International Finance')", "pred_sql": "SELECT p.title FROM course AS c JOIN prereq AS pr ON c.course_id = pr.course_id JOIN course AS p ON pr.prereq_id = p.course_id WHERE c.title = 'International Finance'", "source_tables": ["course", "prereq"], "error_info": ""}, {"sample_id": 1424, "db_id": "college_2", "score": 0, "gold_sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id = T2.course_id WHERE T2.title = 'Differential Geometry')", "pred_sql": "SELECT c.title FROM course AS c JOIN prereq AS p ON c.course_id = p.course_id WHERE p.prereq_id = (SELECT course_id FROM course WHERE title = 'Differential Geometry')", "source_tables": ["course", "prereq"], "error_info": "Result not equal"}, {"sample_id": 1425, "db_id": "college_2", "score": 0, "gold_sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id = T2.course_id WHERE T2.title = 'Differential Geometry')", "pred_sql": "SELECT c.title FROM course AS c JOIN prereq AS p ON c.course_id = p.course_id WHERE p.prereq_id = (SELECT course_id FROM course WHERE title = 'Differential Geometry')", "source_tables": ["course", "prereq"], "error_info": "Result not equal"}, {"sample_id": 1426, "db_id": "college_2", "score": 0, "gold_sql": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester = 'Fall' AND YEAR = 2003)", "pred_sql": "SELECT DISTINCT student.name FROM student JOIN takes ON student.ID = takes.ID WHERE takes.semester = 'Fall' AND takes.year = '2003'", "source_tables": ["student", "takes"], "error_info": "Result not equal"}, {"sample_id": 1427, "db_id": "college_2", "score": 0, "gold_sql": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester = 'Fall' AND YEAR = 2003)", "pred_sql": "SELECT DISTINCT student.name FROM student JOIN takes ON student.ID = takes.ID WHERE takes.semester = 'Fall' AND takes.year = '2003'", "source_tables": ["student", "takes"], "error_info": "Result not equal"}, {"sample_id": 1428, "db_id": "college_2", "score": 1, "gold_sql": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE building = 'Chandler' AND semester = 'Fall' AND YEAR = 2010", "pred_sql": "SELECT title FROM course AS c JOIN section AS s ON c.course_id = s.course_id WHERE s.building = 'Chandler' AND s.semester = 'Fall' AND s.year = '2010'", "source_tables": ["course", "section"], "error_info": ""}, {"sample_id": 1429, "db_id": "college_2", "score": 1, "gold_sql": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE building = 'Chandler' AND semester = 'Fall' AND YEAR = 2010", "pred_sql": "SELECT title FROM course AS c JOIN section AS s ON c.course_id = s.course_id WHERE s.building = 'Chandler' AND s.semester = 'Fall' AND s.year = '2010'", "source_tables": ["course", "section"], "error_info": ""}, {"sample_id": 1430, "db_id": "college_2", "score": 1, "gold_sql": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id = T2.id JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.title = 'C Programming'", "pred_sql": "SELECT DISTINCT instructor.name FROM instructor JOIN teaches ON instructor.ID = teaches.ID JOIN course ON teaches.course_id = course.course_id WHERE course.title = 'C Programming'", "source_tables": ["instructor", "course", "teaches"], "error_info": ""}, {"sample_id": 1431, "db_id": "college_2", "score": 1, "gold_sql": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id = T2.id JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.title = 'C Programming'", "pred_sql": "SELECT DISTINCT instructor.name FROM instructor JOIN teaches ON instructor.ID = teaches.ID JOIN course ON teaches.course_id = course.course_id WHERE course.title = 'C Programming'", "source_tables": ["instructor", "course", "teaches"], "error_info": ""}, {"sample_id": 1432, "db_id": "college_2", "score": 1, "gold_sql": "SELECT T2.name, T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE T3.dept_name = 'Math'", "pred_sql": "SELECT instructor.name, instructor.salary FROM instructor JOIN advisor ON instructor.ID = advisor.i_ID JOIN student ON advisor.s_ID = student.ID WHERE student.dept_name = 'Math'", "source_tables": ["instructor", "student", "advisor"], "error_info": ""}, {"sample_id": 1433, "db_id": "college_2", "score": 1, "gold_sql": "SELECT T2.name, T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE T3.dept_name = 'Math'", "pred_sql": "SELECT instructor.name, instructor.salary FROM instructor JOIN advisor ON instructor.ID = advisor.i_ID JOIN student ON advisor.s_ID = student.ID WHERE student.dept_name = 'Math'", "source_tables": ["instructor", "student", "advisor"], "error_info": ""}, {"sample_id": 1434, "db_id": "college_2", "score": 1, "gold_sql": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE T3.dept_name = 'Math' ORDER BY T3.tot_cred", "pred_sql": "SELECT instructor.name FROM instructor JOIN advisor ON instructor.ID = advisor.i_ID JOIN student ON advisor.s_ID = student.ID WHERE student.dept_name = 'Math' ORDER BY student.tot_cred", "source_tables": ["instructor", "student", "advisor"], "error_info": ""}, {"sample_id": 1435, "db_id": "college_2", "score": 0, "gold_sql": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE T3.dept_name = 'Math' ORDER BY T3.tot_cred", "pred_sql": "SELECT instructor.name FROM instructor JOIN advisor ON instructor.ID = advisor.i_ID JOIN student ON advisor.s_ID = student.ID WHERE student.dept_name = 'math' ORDER BY student.tot_cred", "source_tables": ["instructor", "student", "advisor"], "error_info": "Result not equal"}, {"sample_id": 1436, "db_id": "college_2", "score": 0, "gold_sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.title = 'Mobile Computing')", "pred_sql": "SELECT c.title FROM course AS c JOIN prereq AS p ON c.course_id = p.prereq_id WHERE p.course_id = (SELECT course_id FROM course WHERE title = 'Mobile Computing')", "source_tables": ["course", "prereq"], "error_info": "Result not equal"}, {"sample_id": 1437, "db_id": "college_2", "score": 0, "gold_sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.title = 'Mobile Computing')", "pred_sql": "SELECT c.title FROM course AS c JOIN prereq AS p ON c.course_id = p.prereq_id WHERE p.course_id = (SELECT course_id FROM course WHERE title = 'Mobile Computing')", "source_tables": ["course", "prereq"], "error_info": "Result not equal"}, {"sample_id": 1438, "db_id": "college_2", "score": 0, "gold_sql": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id ORDER BY T3.tot_cred DESC LIMIT 1", "pred_sql": "SELECT instructor.name FROM instructor JOIN advisor ON instructor.ID = advisor.i_ID JOIN student ON advisor.s_ID = student.ID WHERE student.tot_cred = (SELECT MAX(tot_cred) FROM student)", "source_tables": ["instructor", "student", "advisor"], "error_info": "Result not equal"}, {"sample_id": 1439, "db_id": "college_2", "score": 0, "gold_sql": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id ORDER BY T3.tot_cred DESC LIMIT 1", "pred_sql": "SELECT instructor.name FROM instructor JOIN advisor ON instructor.ID = advisor.i_ID JOIN student ON advisor.s_ID = student.ID WHERE student.tot_cred = (SELECT MAX(tot_cred) FROM student)", "source_tables": ["instructor", "student", "advisor"], "error_info": "Result not equal"}, {"sample_id": 1440, "db_id": "college_2", "score": 1, "gold_sql": "SELECT name FROM instructor WHERE NOT id IN (SELECT id FROM teaches)", "pred_sql": "SELECT name FROM instructor WHERE NOT ID IN (SELECT DISTINCT ID FROM teaches)", "source_tables": ["instructor", "teaches"], "error_info": ""}, {"sample_id": 1441, "db_id": "college_2", "score": 1, "gold_sql": "SELECT name FROM instructor WHERE NOT id IN (SELECT id FROM teaches)", "pred_sql": "SELECT name FROM instructor WHERE NOT ID IN (SELECT DISTINCT ID FROM teaches)", "source_tables": ["instructor", "teaches"], "error_info": ""}, {"sample_id": 1442, "db_id": "college_2", "score": 1, "gold_sql": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches", "pred_sql": "SELECT ID FROM instructor WHERE NOT ID IN (SELECT DISTINCT teaches.ID FROM teaches)", "source_tables": ["instructor", "teaches"], "error_info": ""}, {"sample_id": 1443, "db_id": "college_2", "score": 1, "gold_sql": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches", "pred_sql": "SELECT ID FROM instructor WHERE NOT ID IN (SELECT DISTINCT teaches.ID FROM teaches)", "source_tables": ["instructor", "teaches"], "error_info": ""}, {"sample_id": 1444, "db_id": "college_2", "score": 1, "gold_sql": "SELECT name FROM instructor WHERE NOT id IN (SELECT id FROM teaches WHERE semester = 'Spring')", "pred_sql": "SELECT name FROM instructor WHERE NOT ID IN (SELECT DISTINCT teaches.ID FROM teaches WHERE semester = 'Spring')", "source_tables": ["instructor", "teaches"], "error_info": ""}, {"sample_id": 1445, "db_id": "college_2", "score": 1, "gold_sql": "SELECT name FROM instructor WHERE NOT id IN (SELECT id FROM teaches WHERE semester = 'Spring')", "pred_sql": "SELECT name FROM instructor WHERE NOT ID IN (SELECT DISTINCT teaches.ID FROM teaches WHERE semester = 'Spring')", "source_tables": ["instructor", "teaches"], "error_info": ""}, {"sample_id": 1446, "db_id": "college_2", "score": 1, "gold_sql": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC LIMIT 1", "pred_sql": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC LIMIT 1", "source_tables": ["instructor"], "error_info": ""}, {"sample_id": 1447, "db_id": "college_2", "score": 1, "gold_sql": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC LIMIT 1", "pred_sql": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC LIMIT 1", "source_tables": ["instructor"], "error_info": ""}, {"sample_id": 1448, "db_id": "college_2", "score": 0, "gold_sql": "SELECT AVG(T1.salary), COUNT(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name = T2.dept_name ORDER BY T2.budget DESC LIMIT 1", "pred_sql": "SELECT COUNT(ID) AS number_of_instructors, AVG(salary) AS average_salary FROM instructor WHERE dept_name = (SELECT dept_name FROM department ORDER BY budget DESC LIMIT 1)", "source_tables": ["instructor", "department"], "error_info": "Result not equal"}, {"sample_id": 1449, "db_id": "college_2", "score": 0, "gold_sql": "SELECT AVG(T1.salary), COUNT(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name = T2.dept_name ORDER BY T2.budget DESC LIMIT 1", "pred_sql": "SELECT COUNT(i.ID) AS instructor_count, AVG(i.salary) AS average_salary FROM instructor AS i JOIN department AS d ON i.dept_name = d.dept_name WHERE d.budget = (SELECT MAX(budget) FROM department)", "source_tables": ["instructor", "department"], "error_info": "Result not equal"}, {"sample_id": 1450, "db_id": "college_2", "score": 1, "gold_sql": "SELECT T3.title, T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building = T2.building AND T1.room_number = T2.room_number JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.capacity = (SELECT MAX(capacity) FROM classroom)", "pred_sql": "SELECT c.title, c.credits FROM course AS c JOIN section AS s ON c.course_id = s.course_id JOIN classroom AS cl ON s.building = cl.building AND s.room_number = cl.room_number WHERE cl.capacity = (SELECT MAX(capacity) FROM classroom)", "source_tables": ["section", "classroom", "course"], "error_info": ""}, {"sample_id": 1451, "db_id": "college_2", "score": 1, "gold_sql": "SELECT T3.title, T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building = T2.building AND T1.room_number = T2.room_number JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.capacity = (SELECT MAX(capacity) FROM classroom)", "pred_sql": "SELECT c.title, c.credits FROM course AS c JOIN section AS s ON c.course_id = s.course_id JOIN classroom AS cl ON s.building = cl.building AND s.room_number = cl.room_number WHERE cl.capacity = (SELECT MAX(capacity) FROM classroom)", "source_tables": ["section", "classroom", "course"], "error_info": ""}, {"sample_id": 1452, "db_id": "college_2", "score": 0, "gold_sql": "SELECT name FROM student WHERE NOT id IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.dept_name = 'Biology')", "pred_sql": "SELECT name FROM student WHERE dept_name <> 'Biology' AND NOT ID IN (SELECT ID FROM takes WHERE course_id IN (SELECT course_id FROM course WHERE dept_name = 'Biology'))", "source_tables": ["course", "student", "takes"], "error_info": "Result not equal"}, {"sample_id": 1453, "db_id": "college_2", "score": 0, "gold_sql": "SELECT name FROM student WHERE NOT id IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.dept_name = 'Biology')", "pred_sql": "SELECT name FROM student WHERE NOT ID IN (SELECT ID FROM takes WHERE course_id IN (SELECT course_id FROM course WHERE title LIKE '%Biology%'))", "source_tables": ["course", "student", "takes"], "error_info": "Result not equal"}, {"sample_id": 1454, "db_id": "college_2", "score": 0, "gold_sql": "SELECT COUNT(DISTINCT T2.id), COUNT(DISTINCT T3.id), T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name JOIN instructor AS T3 ON T1.dept_name = T3.dept_name GROUP BY T3.dept_name", "pred_sql": "SELECT d.dept_name, COUNT(DISTINCT s.ID) AS total_students, COUNT(DISTINCT i.ID) AS total_instructors FROM department AS d LEFT JOIN student AS s ON d.dept_name = s.dept_name LEFT JOIN instructor AS i ON d.dept_name = i.dept_name GROUP BY d.dept_name", "source_tables": ["instructor", "department", "student"], "error_info": "Result not equal"}, {"sample_id": 1455, "db_id": "college_2", "score": 0, "gold_sql": "SELECT COUNT(DISTINCT T2.id), COUNT(DISTINCT T3.id), T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name JOIN instructor AS T3 ON T1.dept_name = T3.dept_name GROUP BY T3.dept_name", "pred_sql": "SELECT d.dept_name, COUNT(DISTINCT s.ID) AS student_count, COUNT(DISTINCT i.ID) AS instructor_count FROM department AS d LEFT JOIN student AS s ON d.dept_name = s.dept_name LEFT JOIN instructor AS i ON d.dept_name = i.dept_name GROUP BY d.dept_name", "source_tables": ["instructor", "department", "student"], "error_info": "Result not equal"}, {"sample_id": 1456, "db_id": "college_2", "score": 1, "gold_sql": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id = T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id = T4.course_id WHERE T3.title = 'International Finance')", "pred_sql": "SELECT DISTINCT student.name FROM student JOIN takes ON student.ID = takes.ID JOIN section ON takes.course_id = section.course_id AND takes.sec_id = section.sec_id AND takes.semester = section.semester AND takes.year = section.year JOIN course ON section.course_id = course.course_id JOIN prereq ON course.course_id = prereq.course_id WHERE prereq.prereq_id IN (SELECT course_id FROM course WHERE title = 'International Finance')", "source_tables": ["course", "prereq", "student", "takes"], "error_info": ""}, {"sample_id": 1457, "db_id": "college_2", "score": 1, "gold_sql": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id = T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id = T4.course_id WHERE T3.title = 'International Finance')", "pred_sql": "SELECT DISTINCT student.name FROM student JOIN takes ON student.ID = takes.ID JOIN prereq ON takes.course_id = prereq.course_id JOIN course ON prereq.prereq_id = course.course_id WHERE course.title = 'International Finance'", "source_tables": ["course", "prereq", "student", "takes"], "error_info": ""}, {"sample_id": 1458, "db_id": "college_2", "score": 0, "gold_sql": "SELECT name, salary FROM instructor WHERE salary < (SELECT AVG(salary) FROM instructor WHERE dept_name = 'Physics')", "pred_sql": "SELECT name, salary FROM instructor WHERE dept_name = 'Physics' AND salary < (SELECT AVG(salary) FROM instructor WHERE dept_name = 'Physics')", "source_tables": ["instructor"], "error_info": "Result not equal"}, {"sample_id": 1459, "db_id": "college_2", "score": 1, "gold_sql": "SELECT name, salary FROM instructor WHERE salary < (SELECT AVG(salary) FROM instructor WHERE dept_name = 'Physics')", "pred_sql": "SELECT name, salary FROM instructor WHERE salary < (SELECT AVG(salary) FROM instructor WHERE dept_name = 'Physics')", "source_tables": ["instructor"], "error_info": ""}, {"sample_id": 1460, "db_id": "college_2", "score": 1, "gold_sql": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id = T2.course_id JOIN student AS T3 ON T2.id = T3.id WHERE T1.dept_name = 'Statistics'", "pred_sql": "SELECT student.name FROM student JOIN takes ON student.ID = takes.ID JOIN course ON takes.course_id = course.course_id WHERE course.dept_name = 'Statistics'", "source_tables": ["course", "student", "takes"], "error_info": ""}, {"sample_id": 1461, "db_id": "college_2", "score": 0, "gold_sql": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id = T2.course_id JOIN student AS T3 ON T2.id = T3.id WHERE T1.dept_name = 'Statistics'", "pred_sql": "SELECT DISTINCT student.name FROM student JOIN takes ON student.ID = takes.ID JOIN course ON takes.course_id = course.course_id WHERE course.title LIKE '%Statistics%'", "source_tables": ["course", "student", "takes"], "error_info": "Result not equal"}, {"sample_id": 1462, "db_id": "college_2", "score": 1, "gold_sql": "SELECT T2.building, T2.room_number, T2.semester, T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' ORDER BY T1.title", "pred_sql": "SELECT section.building, section.room_number, section.semester, section.year FROM section JOIN course ON section.course_id = course.course_id WHERE course.dept_name = 'Psychology' ORDER BY course.title", "source_tables": ["course", "section"], "error_info": ""}, {"sample_id": 1463, "db_id": "college_2", "score": 1, "gold_sql": "SELECT T2.building, T2.room_number, T2.semester, T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' ORDER BY T1.title", "pred_sql": "SELECT section.building, section.room_number, section.semester, section.year FROM section JOIN course ON section.course_id = course.course_id WHERE course.dept_name = 'Psychology' ORDER BY course.title", "source_tables": ["course", "section"], "error_info": ""}, {"sample_id": 1464, "db_id": "college_2", "score": 0, "gold_sql": "SELECT name FROM instructor WHERE dept_name = 'Comp. Sci.'", "pred_sql": "SELECT name FROM instructor WHERE dept_name = 'computer science'", "source_tables": ["instructor"], "error_info": "Result not equal"}, {"sample_id": 1465, "db_id": "college_2", "score": 1, "gold_sql": "SELECT name FROM instructor WHERE dept_name = 'Comp. Sci.'", "pred_sql": "SELECT name FROM instructor WHERE dept_name = 'Comp. Sci.'", "source_tables": ["instructor"], "error_info": ""}, {"sample_id": 1466, "db_id": "college_2", "score": 1, "gold_sql": "SELECT name FROM instructor WHERE dept_name = 'Comp. Sci.' AND salary > 80000", "pred_sql": "SELECT name FROM instructor WHERE dept_name = 'Comp. Sci.' AND salary > 80000", "source_tables": ["instructor"], "error_info": ""}, {"sample_id": 1467, "db_id": "college_2", "score": 1, "gold_sql": "SELECT name FROM instructor WHERE dept_name = 'Comp. Sci.' AND salary > 80000", "pred_sql": "SELECT name FROM instructor WHERE dept_name = 'Comp. Sci.' AND salary > 80000", "source_tables": ["instructor"], "error_info": ""}, {"sample_id": 1468, "db_id": "college_2", "score": 1, "gold_sql": "SELECT name, course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID", "pred_sql": "SELECT instructor.name, teaches.course_id FROM instructor JOIN teaches ON instructor.ID = teaches.ID", "source_tables": ["instructor", "teaches"], "error_info": ""}, {"sample_id": 1469, "db_id": "college_2", "score": 1, "gold_sql": "SELECT name, course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID", "pred_sql": "SELECT instructor.name, teaches.course_id FROM instructor JOIN teaches ON instructor.ID = teaches.ID", "source_tables": ["instructor", "teaches"], "error_info": ""}, {"sample_id": 1470, "db_id": "college_2", "score": 1, "gold_sql": "SELECT name, course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID WHERE T1.dept_name = 'Art'", "pred_sql": "SELECT instructor.name, teaches.course_id FROM instructor JOIN teaches ON instructor.ID = teaches.ID WHERE instructor.dept_name = 'Art'", "source_tables": ["instructor", "teaches"], "error_info": ""}, {"sample_id": 1471, "db_id": "college_2", "score": 1, "gold_sql": "SELECT name, course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID WHERE T1.dept_name = 'Art'", "pred_sql": "SELECT instructor.name, teaches.course_id FROM instructor JOIN teaches ON instructor.ID = teaches.ID JOIN course ON teaches.course_id = course.course_id WHERE instructor.dept_name = 'Art'", "source_tables": ["instructor", "teaches"], "error_info": ""}, {"sample_id": 1472, "db_id": "college_2", "score": 1, "gold_sql": "SELECT name FROM instructor WHERE name LIKE '%dar%'", "pred_sql": "SELECT name FROM instructor WHERE name LIKE '%dar%'", "source_tables": ["instructor"], "error_info": ""}, {"sample_id": 1473, "db_id": "college_2", "score": 1, "gold_sql": "SELECT name FROM instructor WHERE name LIKE '%dar%'", "pred_sql": "SELECT name FROM instructor WHERE name LIKE '%dar%'", "source_tables": ["instructor"], "error_info": ""}, {"sample_id": 1474, "db_id": "college_2", "score": 1, "gold_sql": "SELECT DISTINCT name FROM instructor ORDER BY name", "pred_sql": "SELECT DISTINCT name FROM instructor ORDER BY name", "source_tables": ["instructor"], "error_info": ""}, {"sample_id": 1475, "db_id": "college_2", "score": 1, "gold_sql": "SELECT DISTINCT name FROM instructor ORDER BY name", "pred_sql": "SELECT DISTINCT name FROM instructor ORDER BY name", "source_tables": ["instructor"], "error_info": ""}, {"sample_id": 1476, "db_id": "college_2", "score": 0, "gold_sql": "SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 UNION SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010", "pred_sql": "SELECT * FROM course WHERE course_id IN (SELECT course_id FROM section WHERE (semester = 'Fall' AND year = '2009') OR (semester = 'Spring' AND year = '2010'))", "source_tables": ["section"], "error_info": "Result not equal"}, {"sample_id": 1477, "db_id": "college_2", "score": 1, "gold_sql": "SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 UNION SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010", "pred_sql": "SELECT course_id FROM section WHERE (semester = 'Fall' AND year = '2009') OR (semester = 'Spring' AND year = '2010')", "source_tables": ["section"], "error_info": ""}, {"sample_id": 1478, "db_id": "college_2", "score": 0, "gold_sql": "SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 INTERSECT SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010", "pred_sql": "SELECT DISTINCT c.title FROM course AS c JOIN section AS s ON c.course_id = s.course_id WHERE (s.semester = 'Fall' AND s.year = '2009') OR (s.semester = 'Spring' AND s.year = '2010')", "source_tables": ["section"], "error_info": "Result not equal"}, {"sample_id": 1479, "db_id": "college_2", "score": 1, "gold_sql": "SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 INTERSECT SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010", "pred_sql": "SELECT DISTINCT s1.course_id FROM section AS s1 JOIN section AS s2 ON s1.course_id = s2.course_id WHERE (s1.semester = 'Fall' AND s1.year = '2009') AND (s2.semester = 'Spring' AND s2.year = '2010')", "source_tables": ["section"], "error_info": ""}, {"sample_id": 1480, "db_id": "college_2", "score": 0, "gold_sql": "SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 EXCEPT SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010", "pred_sql": "SELECT DISTINCT c.title FROM course AS c JOIN section AS s1 ON c.course_id = s1.course_id WHERE s1.semester = 'Fall' AND s1.year = '2009' AND NOT c.course_id IN (SELECT s2.course_id FROM section AS s2 WHERE s2.semester = 'Spring' AND s2.year = '2010')", "source_tables": ["section"], "error_info": "Result not equal"}, {"sample_id": 1481, "db_id": "college_2", "score": 1, "gold_sql": "SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 EXCEPT SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010", "pred_sql": "SELECT DISTINCT s.course_id FROM section AS s WHERE s.semester = 'Fall' AND s.year = '2009' AND NOT s.course_id IN (SELECT course_id FROM section WHERE semester = 'Spring' AND year = '2010')", "source_tables": ["section"], "error_info": ""}, {"sample_id": 1482, "db_id": "college_2", "score": 1, "gold_sql": "SELECT DISTINCT salary FROM instructor WHERE salary < (SELECT MAX(salary) FROM instructor)", "pred_sql": "SELECT DISTINCT salary FROM instructor WHERE salary < (SELECT MAX(salary) FROM instructor)", "source_tables": ["instructor"], "error_info": ""}, {"sample_id": 1483, "db_id": "college_2", "score": 1, "gold_sql": "SELECT DISTINCT salary FROM instructor WHERE salary < (SELECT MAX(salary) FROM instructor)", "pred_sql": "SELECT DISTINCT salary FROM instructor WHERE salary < (SELECT MAX(salary) FROM instructor)", "source_tables": ["instructor"], "error_info": ""}, {"sample_id": 1484, "db_id": "college_2", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT ID) FROM teaches WHERE semester = 'Spring' AND YEAR = 2010", "pred_sql": "SELECT COUNT(DISTINCT teaches.ID) AS total_instructors FROM teaches WHERE teaches.semester = 'Spring' AND teaches.year = '2010'", "source_tables": ["teaches"], "error_info": ""}, {"sample_id": 1485, "db_id": "college_2", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT ID) FROM teaches WHERE semester = 'Spring' AND YEAR = 2010", "pred_sql": "SELECT COUNT(DISTINCT teaches.ID) AS instructor_count FROM teaches JOIN section ON teaches.course_id = section.course_id AND teaches.sec_id = section.sec_id AND teaches.semester = section.semester AND teaches.year = section.year WHERE section.semester = 'Spring' AND section.year = '2010'", "source_tables": ["teaches"], "error_info": ""}, {"sample_id": 1486, "db_id": "college_2", "score": 1, "gold_sql": "SELECT dept_name, AVG(salary) FROM instructor GROUP BY dept_name HAVING AVG(salary) > 42000", "pred_sql": "SELECT department.dept_name, AVG(instructor.salary) AS average_salary FROM department JOIN instructor ON department.dept_name = instructor.dept_name GROUP BY department.dept_name HAVING AVG(instructor.salary) > 42000", "source_tables": ["instructor"], "error_info": ""}, {"sample_id": 1487, "db_id": "college_2", "score": 1, "gold_sql": "SELECT dept_name, AVG(salary) FROM instructor GROUP BY dept_name HAVING AVG(salary) > 42000", "pred_sql": "SELECT department.dept_name, AVG(instructor.salary) AS average_salary FROM department JOIN instructor ON department.dept_name = instructor.dept_name GROUP BY department.dept_name HAVING AVG(instructor.salary) > 42000", "source_tables": ["instructor"], "error_info": ""}, {"sample_id": 1488, "db_id": "college_2", "score": 1, "gold_sql": "SELECT name FROM instructor WHERE salary > (SELECT MIN(salary) FROM instructor WHERE dept_name = 'Biology')", "pred_sql": "SELECT name FROM instructor WHERE salary > (SELECT MIN(salary) FROM instructor WHERE dept_name = 'Biology')", "source_tables": ["instructor"], "error_info": ""}, {"sample_id": 1489, "db_id": "college_2", "score": 0, "gold_sql": "SELECT name FROM instructor WHERE salary > (SELECT MIN(salary) FROM instructor WHERE dept_name = 'Biology')", "pred_sql": "SELECT DISTINCT i1.name FROM instructor AS i1 WHERE i1.salary > (SELECT MAX(i2.salary) FROM instructor AS i2 WHERE i2.dept_name = 'Biology')", "source_tables": ["instructor"], "error_info": "Result not equal"}, {"sample_id": 1490, "db_id": "college_2", "score": 1, "gold_sql": "SELECT name FROM instructor WHERE salary > (SELECT MAX(salary) FROM instructor WHERE dept_name = 'Biology')", "pred_sql": "SELECT name FROM instructor WHERE salary > (SELECT MAX(salary) FROM instructor WHERE dept_name = 'Biology')", "source_tables": ["instructor"], "error_info": ""}, {"sample_id": 1491, "db_id": "college_2", "score": 1, "gold_sql": "SELECT name FROM instructor WHERE salary > (SELECT MAX(salary) FROM instructor WHERE dept_name = 'Biology')", "pred_sql": "SELECT name FROM instructor WHERE salary > (SELECT MAX(salary) FROM instructor WHERE dept_name = 'Biology')", "source_tables": ["instructor"], "error_info": ""}, {"sample_id": 1492, "db_id": "debate", "score": 1, "gold_sql": "SELECT COUNT(*) FROM debate", "pred_sql": "SELECT COUNT(*) AS total_debates FROM debate", "source_tables": ["debate"], "error_info": ""}, {"sample_id": 1493, "db_id": "debate", "score": 1, "gold_sql": "SELECT Venue FROM debate ORDER BY Num_of_Audience ASC", "pred_sql": "SELECT Venue FROM debate ORDER BY Num_of_Audience ASC", "source_tables": ["debate"], "error_info": ""}, {"sample_id": 1494, "db_id": "debate", "score": 1, "gold_sql": "SELECT Date, Venue FROM debate", "pred_sql": "SELECT Date, Venue FROM debate", "source_tables": ["debate"], "error_info": ""}, {"sample_id": 1495, "db_id": "debate", "score": 1, "gold_sql": "SELECT Date FROM debate WHERE Num_of_Audience > 150", "pred_sql": "SELECT Date FROM debate WHERE Num_of_Audience > 150", "source_tables": ["debate"], "error_info": ""}, {"sample_id": 1496, "db_id": "debate", "score": 1, "gold_sql": "SELECT Name FROM people WHERE Age = 35 OR Age = 36", "pred_sql": "SELECT Name FROM people WHERE Age IN ('35', '36')", "source_tables": ["people"], "error_info": ""}, {"sample_id": 1497, "db_id": "debate", "score": 1, "gold_sql": "SELECT Party FROM people ORDER BY Age ASC LIMIT 1", "pred_sql": "SELECT Party FROM people WHERE Age = (SELECT MIN(Age) FROM people)", "source_tables": ["people"], "error_info": ""}, {"sample_id": 1498, "db_id": "debate", "score": 1, "gold_sql": "SELECT Party, COUNT(*) FROM people GROUP BY Party", "pred_sql": "SELECT Party, COUNT(*) AS Number_of_People FROM people GROUP BY Party", "source_tables": ["people"], "error_info": ""}, {"sample_id": 1499, "db_id": "debate", "score": 0, "gold_sql": "SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Party, COUNT(*) AS PartyCount FROM people GROUP BY Party ORDER BY PartyCount DESC LIMIT 1", "source_tables": ["people"], "error_info": "Result not equal"}, {"sample_id": 1500, "db_id": "debate", "score": 1, "gold_sql": "SELECT DISTINCT Venue FROM debate", "pred_sql": "SELECT DISTINCT Venue FROM debate", "source_tables": ["debate"], "error_info": ""}, {"sample_id": 1501, "db_id": "debate", "score": 1, "gold_sql": "SELECT T3.Name, T2.Date, T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Affirmative = T3.People_ID", "pred_sql": "SELECT people.Name, debate.Date, debate.Venue FROM debate_people JOIN people ON debate_people.Affirmative = people.People_ID JOIN debate ON debate_people.Debate_ID = debate.Debate_ID", "source_tables": ["debate", "debate_people", "people"], "error_info": ""}, {"sample_id": 1502, "db_id": "debate", "score": 1, "gold_sql": "SELECT T3.Name, T2.Date, T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Negative = T3.People_ID ORDER BY T3.Name ASC", "pred_sql": "SELECT people.Name, debate.Date, debate.Venue FROM debate_people JOIN people ON debate_people.Negative = people.People_ID JOIN debate ON debate_people.Debate_ID = debate.Debate_ID ORDER BY people.Name ASC", "source_tables": ["debate", "debate_people", "people"], "error_info": ""}, {"sample_id": 1503, "db_id": "debate", "score": 1, "gold_sql": "SELECT T3.Name FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Affirmative = T3.People_ID WHERE T2.Num_of_Audience > 200", "pred_sql": "SELECT p.Name FROM people AS p JOIN debate_people AS dp ON p.People_ID = dp.Affirmative JOIN debate AS d ON dp.Debate_ID = d.Debate_ID WHERE d.Num_of_Audience > 200", "source_tables": ["debate", "debate_people", "people"], "error_info": ""}, {"sample_id": 1504, "db_id": "debate", "score": 1, "gold_sql": "SELECT T2.Name, COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative = T2.People_ID GROUP BY T2.Name", "pred_sql": "SELECT p.Name, COUNT(dp.Affirmative) AS Affirmative_Count FROM people AS p JOIN debate_people AS dp ON p.People_ID = dp.Affirmative GROUP BY p.Name", "source_tables": ["debate_people", "people"], "error_info": ""}, {"sample_id": 1505, "db_id": "debate", "score": 1, "gold_sql": "SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative = T2.People_ID GROUP BY T2.Name HAVING COUNT(*) >= 2", "pred_sql": "SELECT p.Name FROM people AS p JOIN debate_people AS dp ON p.People_ID = dp.Negative GROUP BY p.People_ID HAVING COUNT(dp.Debate_ID) >= 2", "source_tables": ["debate_people", "people"], "error_info": ""}, {"sample_id": 1506, "db_id": "debate", "score": 1, "gold_sql": "SELECT Name FROM people WHERE NOT People_id IN (SELECT Affirmative FROM debate_people)", "pred_sql": "SELECT Name FROM people WHERE NOT People_ID IN (SELECT Affirmative FROM debate_people)", "source_tables": ["debate_people", "people"], "error_info": ""}, {"sample_id": 1507, "db_id": "insurance_and_eClaims", "score": 1, "gold_sql": "SELECT customer_details FROM customers ORDER BY customer_details", "pred_sql": "SELECT Customer_Details FROM Customers ORDER BY Customer_Details ASC", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 1508, "db_id": "insurance_and_eClaims", "score": 1, "gold_sql": "SELECT customer_details FROM customers ORDER BY customer_details", "pred_sql": "SELECT Customer_Details FROM Customers ORDER BY Customer_Details ASC", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 1509, "db_id": "insurance_and_eClaims", "score": 1, "gold_sql": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.customer_details = 'Dayana Robel'", "pred_sql": "SELECT Policies.Policy_Type_Code FROM Policies JOIN Customers ON Policies.Customer_ID = Customers.Customer_ID WHERE Customers.Customer_Details = 'Dayana Robel'", "source_tables": ["policies", "customers"], "error_info": ""}, {"sample_id": 1510, "db_id": "insurance_and_eClaims", "score": 1, "gold_sql": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.customer_details = 'Dayana Robel'", "pred_sql": "SELECT Policies.Policy_Type_Code FROM Policies JOIN Customers ON Policies.Customer_ID = Customers.Customer_ID WHERE Customers.Customer_Details = 'Dayana Robel'", "source_tables": ["policies", "customers"], "error_info": ""}, {"sample_id": 1511, "db_id": "insurance_and_eClaims", "score": 0, "gold_sql": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Policy_Type_Code, COUNT(*) AS Frequency FROM Policies GROUP BY Policy_Type_Code ORDER BY Frequency DESC LIMIT 1", "source_tables": ["policies"], "error_info": "Result not equal"}, {"sample_id": 1512, "db_id": "insurance_and_eClaims", "score": 1, "gold_sql": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Policy_Type_Code FROM Policies GROUP BY Policy_Type_Code ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["policies"], "error_info": ""}, {"sample_id": 1513, "db_id": "insurance_and_eClaims", "score": 0, "gold_sql": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING COUNT(*) > 2", "pred_sql": "SELECT Policy_Type_Code FROM Policies WHERE Customer_ID IN (SELECT Customer_ID FROM Customers GROUP BY Customer_ID HAVING COUNT(Customer_ID) > 2) GROUP BY Policy_Type_Code", "source_tables": ["policies"], "error_info": "Result not equal"}, {"sample_id": 1514, "db_id": "insurance_and_eClaims", "score": 1, "gold_sql": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING COUNT(*) > 2", "pred_sql": "SELECT Policy_Type_Code FROM Policies WHERE Customer_ID IN (SELECT Customer_ID FROM Policies GROUP BY Customer_ID HAVING COUNT(Customer_ID) > 2) GROUP BY Policy_Type_Code", "source_tables": ["policies"], "error_info": ""}, {"sample_id": 1515, "db_id": "insurance_and_eClaims", "score": 0, "gold_sql": "SELECT SUM(amount_piad), AVG(amount_piad) FROM claim_headers", "pred_sql": "SELECT SUM(Amount_Paid) AS Total_Amount_Paid, AVG(Amount_Paid) AS Average_Amount_Paid FROM Claim_Headers", "source_tables": ["claim_headers"], "error_info": "Predction Execution Error:no such column: Amount_Paid"}, {"sample_id": 1516, "db_id": "insurance_and_eClaims", "score": 0, "gold_sql": "SELECT SUM(amount_piad), AVG(amount_piad) FROM claim_headers", "pred_sql": "SELECT SUM(Amount_Paid) AS Total_Amount_Paid, AVG(Amount_Paid) AS Average_Amount_Paid FROM Claim_Headers", "source_tables": ["claim_headers"], "error_info": "Predction Execution Error:no such column: Amount_Paid"}, {"sample_id": 1517, "db_id": "insurance_and_eClaims", "score": 0, "gold_sql": "SELECT SUM(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id = t2.claim_id WHERE t2.created_date = (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)", "pred_sql": "SELECT SUM(ch.Amount_Claimed) AS Total_Amount_Claimed FROM Claim_Headers AS ch JOIN Claims_Documents AS cd ON ch.Claim_Header_ID = cd.Claim_ID WHERE cd.Created_Date = (SELECT MAX(Created_Date) FROM Claims_Documents)", "source_tables": ["claims_documents", "claim_headers"], "error_info": "Result not equal"}, {"sample_id": 1518, "db_id": "insurance_and_eClaims", "score": 0, "gold_sql": "SELECT SUM(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id = t2.claim_id WHERE t2.created_date = (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)", "pred_sql": "SELECT SUM(ch.Amount_Claimed) AS Total_Claimed_Amount FROM Claim_Headers AS ch JOIN Claims_Documents AS cd ON ch.Claim_Header_ID = cd.Claim_ID WHERE cd.Created_Date = (SELECT MAX(Created_Date) FROM Claims_Documents)", "source_tables": ["claims_documents", "claim_headers"], "error_info": "Result not equal"}, {"sample_id": 1519, "db_id": "insurance_and_eClaims", "score": 0, "gold_sql": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id = t2.policy_id JOIN customers AS t3 ON t2.customer_id = t3.customer_id WHERE t1.amount_claimed = (SELECT MAX(amount_claimed) FROM claim_headers)", "pred_sql": "SELECT c.Customer_Details FROM Customers AS c JOIN Claim_Headers AS ch ON c.Customer_ID = (SELECT p.Customer_ID FROM Policies AS p JOIN Claim_Headers AS ch2 ON p.Policy_ID = ch2.Policy_ID ORDER BY ch2.Amount_Claimed DESC LIMIT 1)", "source_tables": ["policies", "customers", "claim_headers"], "error_info": "Result not equal"}, {"sample_id": 1520, "db_id": "insurance_and_eClaims", "score": 1, "gold_sql": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id = t2.policy_id JOIN customers AS t3 ON t2.customer_id = t3.customer_id WHERE t1.amount_claimed = (SELECT MAX(amount_claimed) FROM claim_headers)", "pred_sql": "SELECT c.Customer_Details FROM Customers AS c JOIN Policies AS p ON c.Customer_ID = p.Customer_ID JOIN Claim_Headers AS ch ON p.Policy_ID = ch.Policy_ID ORDER BY ch.Amount_Claimed DESC LIMIT 1", "source_tables": ["policies", "customers", "claim_headers"], "error_info": ""}, {"sample_id": 1521, "db_id": "insurance_and_eClaims", "score": 0, "gold_sql": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id = t2.policy_id JOIN customers AS t3 ON t2.customer_id = t3.customer_id WHERE t1.amount_piad = (SELECT MIN(amount_piad) FROM claim_headers)", "pred_sql": "SELECT c.Customer_Details FROM Customers AS c JOIN Policies AS p ON c.Customer_ID = p.Customer_ID JOIN Claim_Headers AS ch ON p.Policy_ID = ch.Policy_ID ORDER BY ch.Amount_Claimed ASC LIMIT 1", "source_tables": ["policies", "customers", "claim_headers"], "error_info": "Result not equal"}, {"sample_id": 1522, "db_id": "insurance_and_eClaims", "score": 0, "gold_sql": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id = t2.policy_id JOIN customers AS t3 ON t2.customer_id = t3.customer_id WHERE t1.amount_piad = (SELECT MIN(amount_piad) FROM claim_headers)", "pred_sql": "SELECT c.Customer_Details FROM Customers AS c JOIN Policies AS p ON c.Customer_ID = p.Customer_ID JOIN Claim_Headers AS ch ON p.Policy_ID = ch.Policy_ID ORDER BY ch.Amount_Claimed ASC LIMIT 1", "source_tables": ["policies", "customers", "claim_headers"], "error_info": "Result not equal"}, {"sample_id": 1523, "db_id": "insurance_and_eClaims", "score": 1, "gold_sql": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id", "pred_sql": "SELECT Customers.Customer_Details FROM Customers LEFT JOIN Policies ON Customers.Customer_ID = Policies.Customer_ID WHERE Policies.Customer_ID IS NULL", "source_tables": ["policies", "customers"], "error_info": ""}, {"sample_id": 1524, "db_id": "insurance_and_eClaims", "score": 1, "gold_sql": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id", "pred_sql": "SELECT Customer_Details FROM Customers WHERE NOT Customer_ID IN (SELECT Customer_ID FROM Policies)", "source_tables": ["policies", "customers"], "error_info": ""}, {"sample_id": 1525, "db_id": "insurance_and_eClaims", "score": 1, "gold_sql": "SELECT COUNT(*) FROM claims_processing_stages", "pred_sql": "SELECT COUNT(*) AS Total_Claim_Processing_Stages FROM Claims_Processing_Stages", "source_tables": ["claims_processing_stages"], "error_info": ""}, {"sample_id": 1526, "db_id": "insurance_and_eClaims", "score": 1, "gold_sql": "SELECT COUNT(*) FROM claims_processing_stages", "pred_sql": "SELECT COUNT(DISTINCT Claim_Stage_ID) AS Distinct_Stages FROM Claims_Processing_Stages", "source_tables": ["claims_processing_stages"], "error_info": ""}, {"sample_id": 1527, "db_id": "insurance_and_eClaims", "score": 0, "gold_sql": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id = t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT cps.Claim_Status_Name, COUNT(*) AS Claim_Count FROM Claims_Processing AS cp JOIN Claims_Processing_Stages AS cps ON cp.Claim_Stage_ID = cps.Claim_Stage_ID GROUP BY cps.Claim_Status_Name ORDER BY Claim_Count DESC LIMIT 1", "source_tables": ["claims_processing", "claims_processing_stages"], "error_info": "Result not equal"}, {"sample_id": 1528, "db_id": "insurance_and_eClaims", "score": 0, "gold_sql": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id = t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT cps.Claim_Status_Name, COUNT(cp.Claim_ID) AS Claim_Count FROM Claims_Processing AS cp JOIN Claims_Processing_Stages AS cps ON cp.Claim_Stage_ID = cps.Claim_Stage_ID GROUP BY cps.Claim_Status_Name ORDER BY Claim_Count DESC LIMIT 1", "source_tables": ["claims_processing", "claims_processing_stages"], "error_info": "Result not equal"}, {"sample_id": 1529, "db_id": "insurance_and_eClaims", "score": 1, "gold_sql": "SELECT customer_details FROM customers WHERE customer_details LIKE '%Diana%'", "pred_sql": "SELECT Customer_Details FROM Customers WHERE Customer_Details LIKE '%Diana%'", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 1530, "db_id": "insurance_and_eClaims", "score": 1, "gold_sql": "SELECT customer_details FROM customers WHERE customer_details LIKE '%Diana%'", "pred_sql": "SELECT Customer_Details FROM Customers WHERE Customer_Details LIKE '%Diana%'", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 1531, "db_id": "insurance_and_eClaims", "score": 0, "gold_sql": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.policy_type_code = 'Deputy'", "pred_sql": "SELECT DISTINCT Customers.Customer_Details FROM Customers JOIN Policies ON Customers.Customer_ID = Policies.Customer_ID WHERE Policies.Policy_Type_Code = 'deputy'", "source_tables": ["policies", "customers"], "error_info": "Result not equal"}, {"sample_id": 1532, "db_id": "insurance_and_eClaims", "score": 1, "gold_sql": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.policy_type_code = 'Deputy'", "pred_sql": "SELECT Customers.Customer_Details FROM Customers JOIN Policies ON Customers.Customer_ID = Policies.Customer_ID WHERE Policies.Policy_Type_Code = 'Deputy'", "source_tables": ["policies", "customers"], "error_info": ""}, {"sample_id": 1533, "db_id": "insurance_and_eClaims", "score": 0, "gold_sql": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.policy_type_code = 'Deputy' OR t1.policy_type_code = 'Uniform'", "pred_sql": "SELECT DISTINCT c.Customer_Details FROM Customers AS c JOIN Policies AS p ON c.Customer_ID = p.Customer_ID WHERE p.Policy_Type_Code IN ('deputy', 'uniformed')", "source_tables": ["policies", "customers"], "error_info": "Result not equal"}, {"sample_id": 1534, "db_id": "insurance_and_eClaims", "score": 1, "gold_sql": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.policy_type_code = 'Deputy' OR t1.policy_type_code = 'Uniform'", "pred_sql": "SELECT Customers.Customer_Details FROM Customers JOIN Policies ON Customers.Customer_ID = Policies.Customer_ID WHERE Policies.Policy_Type_Code IN ('Deputy', 'Uniform')", "source_tables": ["policies", "customers"], "error_info": ""}, {"sample_id": 1535, "db_id": "insurance_and_eClaims", "score": 0, "gold_sql": "SELECT customer_details FROM customers UNION SELECT staff_details FROM staff", "pred_sql": "SELECT Customers.Customer_Details AS Customer_Name, Staff.Staff_Details AS Staff_Name FROM Customers, Staff", "source_tables": ["staff", "customers"], "error_info": "Result not equal"}, {"sample_id": 1536, "db_id": "insurance_and_eClaims", "score": 0, "gold_sql": "SELECT customer_details FROM customers UNION SELECT staff_details FROM staff", "pred_sql": "SELECT Customers.Customer_Details AS Customer_Name, Staff.Staff_Details AS Staff_Name FROM Customers, Staff", "source_tables": ["staff", "customers"], "error_info": "Result not equal"}, {"sample_id": 1537, "db_id": "insurance_and_eClaims", "score": 1, "gold_sql": "SELECT policy_type_code, COUNT(*) FROM policies GROUP BY policy_type_code", "pred_sql": "SELECT Policy_Type_Code, COUNT(*) AS Number_of_Records FROM Policies GROUP BY Policy_Type_Code", "source_tables": ["policies"], "error_info": ""}, {"sample_id": 1538, "db_id": "insurance_and_eClaims", "score": 1, "gold_sql": "SELECT policy_type_code, COUNT(*) FROM policies GROUP BY policy_type_code", "pred_sql": "SELECT Policy_Type_Code, COUNT(*) AS Policy_Count FROM Policies GROUP BY Policy_Type_Code", "source_tables": ["policies"], "error_info": ""}, {"sample_id": 1539, "db_id": "insurance_and_eClaims", "score": 1, "gold_sql": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t2.customer_details ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Customers.Customer_Details FROM Customers JOIN Policies ON Customers.Customer_ID = Policies.Customer_ID GROUP BY Customers.Customer_ID ORDER BY COUNT(Policies.Policy_ID) DESC LIMIT 1", "source_tables": ["policies", "customers"], "error_info": ""}, {"sample_id": 1540, "db_id": "insurance_and_eClaims", "score": 1, "gold_sql": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t2.customer_details ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Customers.Customer_Details FROM Customers JOIN Policies ON Customers.Customer_ID = Policies.Customer_ID GROUP BY Customers.Customer_ID ORDER BY COUNT(Policies.Policy_ID) DESC LIMIT 1", "source_tables": ["policies", "customers"], "error_info": ""}, {"sample_id": 1541, "db_id": "insurance_and_eClaims", "score": 1, "gold_sql": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name = 'Open'", "pred_sql": "SELECT Claim_Status_Description FROM Claims_Processing_Stages WHERE Claim_Status_Name = 'Open'", "source_tables": ["claims_processing_stages"], "error_info": ""}, {"sample_id": 1542, "db_id": "insurance_and_eClaims", "score": 1, "gold_sql": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name = 'Open'", "pred_sql": "SELECT Claim_Status_Description FROM Claims_Processing_Stages WHERE Claim_Status_Name = 'Open'", "source_tables": ["claims_processing_stages"], "error_info": ""}, {"sample_id": 1543, "db_id": "insurance_and_eClaims", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT claim_outcome_code) FROM claims_processing", "pred_sql": "SELECT COUNT(DISTINCT Claim_Outcome_Code) AS Distinct_Claim_Outcome_Codes FROM Claims_Processing", "source_tables": ["claims_processing"], "error_info": ""}, {"sample_id": 1544, "db_id": "insurance_and_eClaims", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT claim_outcome_code) FROM claims_processing", "pred_sql": "SELECT COUNT(DISTINCT Claim_Outcome_Code) AS Distinct_Claim_Outcome_Count FROM Claims_Processing", "source_tables": ["claims_processing"], "error_info": ""}, {"sample_id": 1545, "db_id": "insurance_and_eClaims", "score": 0, "gold_sql": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.start_date = (SELECT MAX(start_date) FROM policies)", "pred_sql": "SELECT Customers.Customer_ID, Customers.Customer_Details FROM Customers JOIN Policies ON Customers.Customer_ID = Policies.Customer_ID WHERE Policies.Start_Date = (SELECT MAX(Start_Date) FROM Policies)", "source_tables": ["policies", "customers"], "error_info": "Result not equal"}, {"sample_id": 1546, "db_id": "insurance_and_eClaims", "score": 0, "gold_sql": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.start_date = (SELECT MAX(start_date) FROM policies)", "pred_sql": "SELECT Customers.Customer_ID, Customers.Customer_Details, Policies.Start_Date FROM Customers JOIN Policies ON Customers.Customer_ID = Policies.Customer_ID ORDER BY Policies.Start_Date DESC LIMIT 1", "source_tables": ["policies", "customers"], "error_info": "Result not equal"}, {"sample_id": 1547, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Accounts", "pred_sql": "SELECT COUNT(*) AS number_of_accounts FROM Accounts", "source_tables": ["accounts"], "error_info": ""}, {"sample_id": 1548, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Accounts", "pred_sql": "SELECT COUNT(*) AS total_accounts FROM Accounts", "source_tables": ["accounts"], "error_info": ""}, {"sample_id": 1549, "db_id": "customers_and_invoices", "score": 0, "gold_sql": "SELECT COUNT(DISTINCT customer_id) FROM Accounts", "pred_sql": "SELECT COUNT(*) AS number_of_customers FROM Accounts", "source_tables": ["accounts"], "error_info": "Result not equal"}, {"sample_id": 1550, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT customer_id) FROM Accounts", "pred_sql": "SELECT COUNT(DISTINCT Customers.customer_id) AS customer_count FROM Customers JOIN Accounts ON Customers.customer_id = Accounts.customer_id", "source_tables": ["accounts"], "error_info": ""}, {"sample_id": 1551, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT account_id, date_account_opened, account_name, other_account_details FROM Accounts", "pred_sql": "SELECT account_id, date_account_opened, account_name, other_account_details FROM Accounts", "source_tables": ["accounts"], "error_info": ""}, {"sample_id": 1552, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT account_id, date_account_opened, account_name, other_account_details FROM Accounts", "pred_sql": "SELECT account_id, date_account_opened, account_name, other_account_details FROM Accounts", "source_tables": ["accounts"], "error_info": ""}, {"sample_id": 1553, "db_id": "customers_and_invoices", "score": 0, "gold_sql": "SELECT T1.account_id, T1.date_account_opened, T1.account_name, T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Meaghan'", "pred_sql": "SELECT Accounts.account_id, Accounts.account_name, Accounts.other_account_details FROM Accounts JOIN Customers ON Accounts.customer_id = Customers.customer_id WHERE Customers.customer_first_name = 'Meaghan'", "source_tables": ["accounts", "customers"], "error_info": "Result not equal"}, {"sample_id": 1554, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT T1.account_id, T1.date_account_opened, T1.account_name, T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Meaghan'", "pred_sql": "SELECT Accounts.account_id, Accounts.account_name, Accounts.date_account_opened, Accounts.other_account_details FROM Accounts JOIN Customers ON Accounts.customer_id = Customers.customer_id WHERE Customers.customer_first_name = 'Meaghan'", "source_tables": ["accounts", "customers"], "error_info": ""}, {"sample_id": 1555, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT T1.account_name, T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Meaghan' AND T2.customer_last_name = 'Keeling'", "pred_sql": "SELECT account_name, other_account_details FROM Accounts WHERE customer_id IN (SELECT customer_id FROM Customers WHERE customer_first_name = 'Meaghan' AND customer_last_name = 'Keeling')", "source_tables": ["accounts", "customers"], "error_info": ""}, {"sample_id": 1556, "db_id": "customers_and_invoices", "score": 0, "gold_sql": "SELECT T1.account_name, T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Meaghan' AND T2.customer_last_name = 'Keeling'", "pred_sql": "SELECT a.account_id, a.date_account_opened, a.account_name, a.other_account_details FROM Accounts AS a JOIN Customers AS c ON a.customer_id = c.customer_id WHERE c.customer_first_name = 'Meaghan' AND c.customer_last_name = 'Keeling'", "source_tables": ["accounts", "customers"], "error_info": "Result not equal"}, {"sample_id": 1557, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT T2.customer_first_name, T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.account_name = '900'", "pred_sql": "SELECT customer_first_name, customer_last_name FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id WHERE Accounts.account_name = '900'", "source_tables": ["accounts", "customers"], "error_info": ""}, {"sample_id": 1558, "db_id": "customers_and_invoices", "score": 0, "gold_sql": "SELECT T2.customer_first_name, T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.account_name = '900'", "pred_sql": "SELECT customer_first_name || ' ' || customer_last_name AS full_name FROM Customers INNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id WHERE Accounts.account_name = '900'", "source_tables": ["accounts", "customers"], "error_info": "Result not equal"}, {"sample_id": 1559, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Customers WHERE NOT customer_id IN (SELECT customer_id FROM Accounts)", "pred_sql": "SELECT COUNT(*) AS customer_count FROM Customers WHERE NOT customer_id IN (SELECT customer_id FROM Accounts)", "source_tables": ["accounts", "customers"], "error_info": ""}, {"sample_id": 1560, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Customers WHERE NOT customer_id IN (SELECT customer_id FROM Accounts)", "pred_sql": "SELECT COUNT(*) AS customer_count FROM Customers WHERE NOT customer_id IN (SELECT customer_id FROM Accounts)", "source_tables": ["accounts", "customers"], "error_info": ""}, {"sample_id": 1561, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT DISTINCT T1.customer_first_name, T1.customer_last_name, T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id", "pred_sql": "SELECT DISTINCT customer_first_name, customer_last_name, phone_number FROM Customers WHERE customer_id IN (SELECT customer_id FROM Accounts)", "source_tables": ["accounts", "customers"], "error_info": ""}, {"sample_id": 1562, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT DISTINCT T1.customer_first_name, T1.customer_last_name, T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id", "pred_sql": "SELECT DISTINCT c.customer_first_name, c.customer_last_name, c.phone_number FROM Customers AS c JOIN Accounts AS a ON c.customer_id = a.customer_id", "source_tables": ["accounts", "customers"], "error_info": ""}, {"sample_id": 1563, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts", "pred_sql": "SELECT customer_id FROM Customers WHERE NOT customer_id IN (SELECT customer_id FROM Accounts)", "source_tables": ["accounts", "customers"], "error_info": ""}, {"sample_id": 1564, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts", "pred_sql": "SELECT customer_id FROM Customers WHERE NOT customer_id IN (SELECT customer_id FROM Accounts)", "source_tables": ["accounts", "customers"], "error_info": ""}, {"sample_id": 1565, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT COUNT(*), customer_id FROM Accounts GROUP BY customer_id", "pred_sql": "SELECT customer_id, COUNT(account_id) AS account_count FROM Accounts GROUP BY customer_id", "source_tables": ["accounts"], "error_info": ""}, {"sample_id": 1566, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT COUNT(*), customer_id FROM Accounts GROUP BY customer_id", "pred_sql": "SELECT customer_id, COUNT(account_id) AS account_count FROM Accounts GROUP BY customer_id", "source_tables": ["accounts"], "error_info": ""}, {"sample_id": 1567, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT customer_id, customer_first_name, customer_last_name FROM Customers WHERE customer_id IN (SELECT customer_id FROM Accounts GROUP BY customer_id ORDER BY COUNT(account_id) DESC LIMIT 1)", "source_tables": ["accounts", "customers"], "error_info": ""}, {"sample_id": 1568, "db_id": "customers_and_invoices", "score": 0, "gold_sql": "SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT c.customer_id, c.customer_first_name || ' ' || c.customer_middle_initial || ' ' || c.customer_last_name AS full_name FROM Customers AS c JOIN Accounts AS a ON c.customer_id = a.customer_id GROUP BY c.customer_id ORDER BY COUNT(a.account_id) DESC LIMIT 1", "source_tables": ["accounts", "customers"], "error_info": "Result not equal"}, {"sample_id": 1569, "db_id": "customers_and_invoices", "score": 0, "gold_sql": "SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name, COUNT(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id", "pred_sql": "SELECT Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, COUNT(Accounts.account_id) AS number_of_accounts FROM Customers LEFT JOIN Accounts ON Customers.customer_id = Accounts.customer_id GROUP BY Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name", "source_tables": ["accounts", "customers"], "error_info": "Result not equal"}, {"sample_id": 1570, "db_id": "customers_and_invoices", "score": 0, "gold_sql": "SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name, COUNT(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id", "pred_sql": "SELECT c.customer_id, c.customer_first_name || ' ' || c.customer_last_name AS full_name, COUNT(a.account_id) AS account_count FROM Customers AS c LEFT JOIN Accounts AS a ON c.customer_id = a.customer_id GROUP BY c.customer_id, c.customer_first_name, c.customer_last_name", "source_tables": ["accounts", "customers"], "error_info": "Result not equal"}, {"sample_id": 1571, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT T2.customer_first_name, T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING COUNT(*) >= 2", "pred_sql": "SELECT c.customer_first_name, c.customer_id FROM Customers AS c JOIN Accounts AS a ON c.customer_id = a.customer_id GROUP BY c.customer_id HAVING COUNT(a.account_id) >= 2", "source_tables": ["accounts", "customers"], "error_info": ""}, {"sample_id": 1572, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT T2.customer_first_name, T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING COUNT(*) >= 2", "pred_sql": "SELECT customer_first_name, customer_id FROM Customers WHERE customer_id IN (SELECT customer_id FROM Accounts GROUP BY customer_id HAVING COUNT(account_id) >= 2)", "source_tables": ["accounts", "customers"], "error_info": ""}, {"sample_id": 1573, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Customers", "pred_sql": "SELECT COUNT(*) AS number_of_customers FROM Customers", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 1574, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Customers", "pred_sql": "SELECT COUNT(*) AS customer_count FROM Customers", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 1575, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT gender, COUNT(*) FROM Customers GROUP BY gender", "pred_sql": "SELECT gender, COUNT(customer_id) AS number_of_customers FROM Customers GROUP BY gender", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 1576, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT gender, COUNT(*) FROM Customers GROUP BY gender", "pred_sql": "SELECT gender, COUNT(*) AS customer_count FROM Customers GROUP BY gender", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 1577, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Financial_transactions", "pred_sql": "SELECT COUNT(*) AS transaction_count FROM Financial_Transactions", "source_tables": ["financial_transactions"], "error_info": ""}, {"sample_id": 1578, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Financial_transactions", "pred_sql": "SELECT COUNT(*) AS transaction_count FROM Financial_Transactions", "source_tables": ["financial_transactions"], "error_info": ""}, {"sample_id": 1579, "db_id": "customers_and_invoices", "score": 0, "gold_sql": "SELECT COUNT(*), account_id FROM Financial_transactions", "pred_sql": "SELECT account_id, COUNT(transaction_id) AS transaction_count FROM Financial_Transactions GROUP BY account_id", "source_tables": ["financial_transactions"], "error_info": "Result not equal"}, {"sample_id": 1580, "db_id": "customers_and_invoices", "score": 0, "gold_sql": "SELECT COUNT(*), account_id FROM Financial_transactions", "pred_sql": "SELECT account_id, COUNT(transaction_id) AS transaction_count FROM Financial_Transactions GROUP BY account_id", "source_tables": ["financial_transactions"], "error_info": "Result not equal"}, {"sample_id": 1581, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id WHERE T2.account_name = '337'", "pred_sql": "SELECT COUNT(*) AS transaction_count FROM Financial_Transactions WHERE account_id IN (SELECT account_id FROM Accounts WHERE account_name = '337')", "source_tables": ["accounts", "financial_transactions"], "error_info": ""}, {"sample_id": 1582, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id WHERE T2.account_name = '337'", "pred_sql": "SELECT COUNT(*) AS transaction_count FROM Financial_Transactions AS ft JOIN Accounts AS a ON ft.account_id = a.account_id WHERE a.account_name = '337'", "source_tables": ["accounts", "financial_transactions"], "error_info": ""}, {"sample_id": 1583, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT AVG(transaction_amount), MIN(transaction_amount), MAX(transaction_amount), SUM(transaction_amount) FROM Financial_transactions", "pred_sql": "SELECT AVG(transaction_amount) AS average_transaction_amount, MIN(transaction_amount) AS minimum_transaction_amount, MAX(transaction_amount) AS maximum_transaction_amount, SUM(transaction_amount) AS total_transaction_amount FROM Financial_Transactions", "source_tables": ["financial_transactions"], "error_info": ""}, {"sample_id": 1584, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT AVG(transaction_amount), MIN(transaction_amount), MAX(transaction_amount), SUM(transaction_amount) FROM Financial_transactions", "pred_sql": "SELECT AVG(transaction_amount) AS average_amount, MIN(transaction_amount) AS minimum_amount, MAX(transaction_amount) AS maximum_amount, SUM(transaction_amount) AS total_amount FROM Financial_Transactions", "source_tables": ["financial_transactions"], "error_info": ""}, {"sample_id": 1585, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount > (SELECT AVG(transaction_amount) FROM Financial_transactions)", "pred_sql": "SELECT transaction_id FROM Financial_Transactions WHERE transaction_amount > (SELECT AVG(transaction_amount) FROM Financial_Transactions)", "source_tables": ["financial_transactions"], "error_info": ""}, {"sample_id": 1586, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount > (SELECT AVG(transaction_amount) FROM Financial_transactions)", "pred_sql": "SELECT transaction_id FROM Financial_Transactions WHERE transaction_amount > (SELECT AVG(transaction_amount) FROM Financial_Transactions)", "source_tables": ["financial_transactions"], "error_info": ""}, {"sample_id": 1587, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT transaction_type, SUM(transaction_amount) FROM Financial_transactions GROUP BY transaction_type", "pred_sql": "SELECT transaction_type, SUM(transaction_amount) AS total_amount FROM Financial_Transactions GROUP BY transaction_type", "source_tables": ["financial_transactions"], "error_info": ""}, {"sample_id": 1588, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT transaction_type, SUM(transaction_amount) FROM Financial_transactions GROUP BY transaction_type", "pred_sql": "SELECT transaction_type, SUM(transaction_amount) AS total_amount FROM Financial_Transactions GROUP BY transaction_type", "source_tables": ["financial_transactions"], "error_info": ""}, {"sample_id": 1589, "db_id": "customers_and_invoices", "score": 0, "gold_sql": "SELECT T2.account_name, T1.account_id, COUNT(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id", "pred_sql": "SELECT a.account_name, a.account_id, COUNT(ft.transaction_id) AS number_of_transactions FROM Accounts AS a LEFT JOIN Financial_Transactions AS ft ON a.account_id = ft.account_id GROUP BY a.account_id, a.account_name", "source_tables": ["accounts", "financial_transactions"], "error_info": "Result not equal"}, {"sample_id": 1590, "db_id": "customers_and_invoices", "score": 0, "gold_sql": "SELECT T2.account_name, T1.account_id, COUNT(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id", "pred_sql": "SELECT Accounts.account_id, Accounts.account_name, COUNT(Financial_Transactions.transaction_id) AS transaction_count FROM Accounts LEFT JOIN Financial_Transactions ON Accounts.account_id = Financial_Transactions.account_id GROUP BY Accounts.account_id, Accounts.account_name", "source_tables": ["accounts", "financial_transactions"], "error_info": "Result not equal"}, {"sample_id": 1591, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT account_id FROM Financial_Transactions GROUP BY account_id ORDER BY COUNT(transaction_id) DESC LIMIT 1", "source_tables": ["financial_transactions"], "error_info": ""}, {"sample_id": 1592, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT account_id FROM Financial_Transactions GROUP BY account_id ORDER BY COUNT(transaction_id) DESC LIMIT 1", "source_tables": ["financial_transactions"], "error_info": ""}, {"sample_id": 1593, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT T1.account_id, T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id HAVING COUNT(*) >= 4", "pred_sql": "SELECT a.account_id, a.account_name FROM Accounts AS a JOIN Financial_Transactions AS ft ON a.account_id = ft.account_id GROUP BY a.account_id, a.account_name HAVING COUNT(ft.transaction_id) >= 4", "source_tables": ["accounts", "financial_transactions"], "error_info": ""}, {"sample_id": 1594, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT T1.account_id, T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id HAVING COUNT(*) >= 4", "pred_sql": "SELECT a.account_id, a.account_name FROM Accounts AS a JOIN Financial_Transactions AS ft ON a.account_id = ft.account_id GROUP BY a.account_id, a.account_name HAVING COUNT(ft.transaction_id) >= 4", "source_tables": ["accounts", "financial_transactions"], "error_info": ""}, {"sample_id": 1595, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT DISTINCT product_size FROM Products", "pred_sql": "SELECT DISTINCT product_size FROM Products", "source_tables": ["products"], "error_info": ""}, {"sample_id": 1596, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT DISTINCT product_size FROM Products", "pred_sql": "SELECT DISTINCT product_size FROM Products", "source_tables": ["products"], "error_info": ""}, {"sample_id": 1597, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT DISTINCT product_color FROM Products", "pred_sql": "SELECT DISTINCT product_color FROM Products", "source_tables": ["products"], "error_info": ""}, {"sample_id": 1598, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT DISTINCT product_color FROM Products", "pred_sql": "SELECT DISTINCT product_color FROM Products", "source_tables": ["products"], "error_info": ""}, {"sample_id": 1599, "db_id": "customers_and_invoices", "score": 0, "gold_sql": "SELECT invoice_number, COUNT(*) FROM Financial_transactions GROUP BY invoice_number", "pred_sql": "SELECT Invoices.invoice_number, COUNT(Financial_Transactions.transaction_id) AS number_of_transactions FROM Invoices LEFT JOIN Financial_Transactions ON Invoices.invoice_number = Financial_Transactions.invoice_number GROUP BY Invoices.invoice_number", "source_tables": ["financial_transactions"], "error_info": "Result not equal"}, {"sample_id": 1600, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT invoice_number, COUNT(*) FROM Financial_transactions GROUP BY invoice_number", "pred_sql": "SELECT invoice_number, COUNT(transaction_id) AS transaction_count FROM Financial_Transactions GROUP BY invoice_number", "source_tables": ["financial_transactions"], "error_info": ""}, {"sample_id": 1601, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT T2.invoice_number, T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number = T2.invoice_number GROUP BY T1.invoice_number ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT i.invoice_number, i.invoice_date FROM Invoices AS i JOIN Financial_Transactions AS ft ON i.invoice_number = ft.invoice_number GROUP BY i.invoice_number, i.invoice_date ORDER BY COUNT(ft.transaction_id) DESC LIMIT 1", "source_tables": ["invoices", "financial_transactions"], "error_info": ""}, {"sample_id": 1602, "db_id": "customers_and_invoices", "score": 0, "gold_sql": "SELECT T2.invoice_number, T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number = T2.invoice_number GROUP BY T1.invoice_number ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT invoice_number, invoice_date FROM Invoices WHERE order_id = (SELECT order_id FROM Financial_Transactions GROUP BY order_id ORDER BY COUNT(transaction_id) DESC LIMIT 1)", "source_tables": ["invoices", "financial_transactions"], "error_info": "Predction Execution Error:no such column: order_id"}, {"sample_id": 1603, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Invoices", "pred_sql": "SELECT COUNT(*) AS total_invoices FROM Invoices", "source_tables": ["invoices"], "error_info": ""}, {"sample_id": 1604, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Invoices", "pred_sql": "SELECT COUNT(*) AS invoice_count FROM Invoices", "source_tables": ["invoices"], "error_info": ""}, {"sample_id": 1605, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT T1.invoice_date, T1.order_id, T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id", "pred_sql": "SELECT Invoices.invoice_date, Orders.order_id, Orders.order_details FROM Invoices JOIN Orders ON Invoices.order_id = Orders.order_id", "source_tables": ["orders", "invoices"], "error_info": ""}, {"sample_id": 1606, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT T1.invoice_date, T1.order_id, T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id", "pred_sql": "SELECT Invoices.invoice_date, Orders.order_id, Orders.order_details FROM Invoices JOIN Orders ON Invoices.order_id = Orders.order_id", "source_tables": ["orders", "invoices"], "error_info": ""}, {"sample_id": 1607, "db_id": "customers_and_invoices", "score": 0, "gold_sql": "SELECT order_id, COUNT(*) FROM Invoices GROUP BY order_id", "pred_sql": "SELECT Orders.order_id, COUNT(Invoices.invoice_number) AS number_of_invoices FROM Orders LEFT JOIN Invoices ON Orders.order_id = Invoices.order_id GROUP BY Orders.order_id", "source_tables": ["invoices"], "error_info": "Result not equal"}, {"sample_id": 1608, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT order_id, COUNT(*) FROM Invoices GROUP BY order_id", "pred_sql": "SELECT order_id, COUNT(invoice_number) AS invoice_count FROM Invoices GROUP BY order_id", "source_tables": ["invoices"], "error_info": ""}, {"sample_id": 1609, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT T2.order_id, T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id GROUP BY T2.order_id HAVING COUNT(*) > 2", "pred_sql": "SELECT Orders.order_id, Orders.order_details FROM Orders JOIN Invoices ON Orders.order_id = Invoices.order_id GROUP BY Orders.order_id, Orders.order_details HAVING COUNT(Invoices.invoice_number) > 2", "source_tables": ["orders", "invoices"], "error_info": ""}, {"sample_id": 1610, "db_id": "customers_and_invoices", "score": 0, "gold_sql": "SELECT T2.order_id, T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id GROUP BY T2.order_id HAVING COUNT(*) > 2", "pred_sql": "SELECT o.order_id, o.order_details FROM Orders AS o JOIN Invoices AS i ON o.order_id = i.order_id GROUP BY o.order_id HAVING COUNT(i.invoice_number) >= 2", "source_tables": ["orders", "invoices"], "error_info": "Result not equal"}, {"sample_id": 1611, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT T2.customer_last_name, T1.customer_id, T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT c.customer_last_name, c.customer_id, c.phone_number FROM Customers AS c JOIN Orders AS o ON c.customer_id = o.customer_id GROUP BY c.customer_id ORDER BY COUNT(o.order_id) DESC LIMIT 1", "source_tables": ["orders", "customers"], "error_info": ""}, {"sample_id": 1612, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT T2.customer_last_name, T1.customer_id, T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT c.customer_last_name, c.customer_id, c.phone_number FROM Customers AS c JOIN Orders AS o ON c.customer_id = o.customer_id GROUP BY c.customer_id ORDER BY COUNT(o.order_id) DESC LIMIT 1", "source_tables": ["orders", "customers"], "error_info": ""}, {"sample_id": 1613, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id = T2.product_id", "pred_sql": "SELECT product_name FROM Products WHERE NOT product_id IN (SELECT product_id FROM Order_Items)", "source_tables": ["products", "order_items"], "error_info": ""}, {"sample_id": 1614, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id = T2.product_id", "pred_sql": "SELECT product_name FROM Products WHERE NOT product_id IN (SELECT product_id FROM Order_Items)", "source_tables": ["products", "order_items"], "error_info": ""}, {"sample_id": 1615, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT T2.product_name, SUM(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name", "pred_sql": "SELECT Products.product_name, SUM(Order_Items.product_quantity) AS total_quantity_ordered FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY Products.product_name", "source_tables": ["products", "order_items"], "error_info": ""}, {"sample_id": 1616, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT T2.product_name, SUM(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name", "pred_sql": "SELECT p.product_name, SUM(oi.product_quantity) AS total_quantity_ordered FROM Products AS p JOIN Order_Items AS oi ON p.product_id = oi.product_id GROUP BY p.product_name", "source_tables": ["products", "order_items"], "error_info": ""}, {"sample_id": 1617, "db_id": "customers_and_invoices", "score": 0, "gold_sql": "SELECT order_id, COUNT(*) FROM Order_items GROUP BY order_id", "pred_sql": "SELECT Orders.order_id, COUNT(Order_Items.order_item_id) AS number_of_items FROM Orders LEFT JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Orders.order_id", "source_tables": ["order_items"], "error_info": "Result not equal"}, {"sample_id": 1618, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT order_id, COUNT(*) FROM Order_items GROUP BY order_id", "pred_sql": "SELECT order_id, COUNT(order_item_id) AS order_item_count FROM Order_Items GROUP BY order_id", "source_tables": ["order_items"], "error_info": ""}, {"sample_id": 1619, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT product_id, COUNT(DISTINCT order_id) FROM Order_items GROUP BY product_id", "pred_sql": "SELECT oi.product_id, COUNT(DISTINCT o.order_id) AS unique_order_count FROM Order_Items AS oi JOIN Orders AS o ON oi.order_id = o.order_id GROUP BY oi.product_id", "source_tables": ["order_items"], "error_info": ""}, {"sample_id": 1620, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT product_id, COUNT(DISTINCT order_id) FROM Order_items GROUP BY product_id", "pred_sql": "SELECT product_id, COUNT(DISTINCT order_id) AS distinct_order_count FROM Order_Items GROUP BY product_id", "source_tables": ["order_items"], "error_info": ""}, {"sample_id": 1621, "db_id": "customers_and_invoices", "score": 0, "gold_sql": "SELECT T2.product_name, COUNT(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id JOIN Orders AS T3 ON T3.order_id = T1.order_id GROUP BY T2.product_name", "pred_sql": "SELECT Products.product_name, COUNT(DISTINCT Customers.customer_id) AS customer_count FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id JOIN Orders ON Order_Items.order_id = Orders.order_id JOIN Customers ON Orders.customer_id = Customers.customer_id GROUP BY Products.product_name", "source_tables": ["orders", "products", "order_items"], "error_info": "Result not equal"}, {"sample_id": 1622, "db_id": "customers_and_invoices", "score": 0, "gold_sql": "SELECT T2.product_name, COUNT(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id JOIN Orders AS T3 ON T3.order_id = T1.order_id GROUP BY T2.product_name", "pred_sql": "SELECT Products.product_name, COUNT(DISTINCT Orders.customer_id) AS customer_count FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id JOIN Orders ON Order_Items.order_id = Orders.order_id GROUP BY Products.product_name", "source_tables": ["orders", "products", "order_items"], "error_info": "Result not equal"}, {"sample_id": 1623, "db_id": "customers_and_invoices", "score": 0, "gold_sql": "SELECT order_id, COUNT(DISTINCT product_id) FROM Order_items GROUP BY order_id", "pred_sql": "SELECT Orders.order_id, COUNT(Order_Items.product_id) AS number_of_products FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Orders.order_id", "source_tables": ["order_items"], "error_info": "Result not equal"}, {"sample_id": 1624, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT order_id, COUNT(DISTINCT product_id) FROM Order_items GROUP BY order_id", "pred_sql": "SELECT order_id, COUNT(DISTINCT product_id) AS different_product_count FROM Order_Items GROUP BY order_id", "source_tables": ["order_items"], "error_info": ""}, {"sample_id": 1625, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT order_id, SUM(product_quantity) FROM Order_items GROUP BY order_id", "pred_sql": "SELECT Orders.order_id, SUM(Order_Items.product_quantity) AS total_quantity FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Orders.order_id", "source_tables": ["order_items"], "error_info": ""}, {"sample_id": 1626, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT order_id, SUM(product_quantity) FROM Order_items GROUP BY order_id", "pred_sql": "SELECT Orders.order_id, SUM(Order_Items.product_quantity) AS total_product_quantity FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Orders.order_id", "source_tables": ["order_items"], "error_info": ""}, {"sample_id": 1627, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT COUNT(*) FROM products WHERE NOT product_id IN (SELECT product_id FROM Order_items)", "pred_sql": "SELECT COUNT(*) AS products_not_in_orders FROM Products WHERE NOT product_id IN (SELECT product_id FROM Order_Items)", "source_tables": ["products", "order_items"], "error_info": ""}, {"sample_id": 1628, "db_id": "customers_and_invoices", "score": 1, "gold_sql": "SELECT COUNT(*) FROM products WHERE NOT product_id IN (SELECT product_id FROM Order_items)", "pred_sql": "SELECT COUNT(*) AS never_ordered_count FROM Products WHERE NOT product_id IN (SELECT product_id FROM Order_Items)", "source_tables": ["products", "order_items"], "error_info": ""}, {"sample_id": 1629, "db_id": "wedding", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Church WHERE Open_Date < 1850", "pred_sql": "SELECT COUNT(*) AS Church_Count FROM church WHERE Open_Date < 1850", "source_tables": ["church"], "error_info": ""}, {"sample_id": 1630, "db_id": "wedding", "score": 1, "gold_sql": "SELECT name, open_date, organized_by FROM Church", "pred_sql": "SELECT Name, Open_Date, Organized_by FROM church", "source_tables": ["church"], "error_info": ""}, {"sample_id": 1631, "db_id": "wedding", "score": 1, "gold_sql": "SELECT name FROM church ORDER BY open_date DESC", "pred_sql": "SELECT Name FROM church ORDER BY Open_Date DESC", "source_tables": ["church"], "error_info": ""}, {"sample_id": 1632, "db_id": "wedding", "score": 1, "gold_sql": "SELECT open_date FROM church GROUP BY open_date HAVING COUNT(*) >= 2", "pred_sql": "SELECT Open_Date FROM church GROUP BY Open_Date HAVING COUNT(Church_ID) >= 2", "source_tables": ["church"], "error_info": ""}, {"sample_id": 1633, "db_id": "wedding", "score": 1, "gold_sql": "SELECT organized_by, name FROM church WHERE open_date BETWEEN 1830 AND 1840", "pred_sql": "SELECT Organized_by, Name FROM church WHERE Open_Date BETWEEN 1830 AND 1840", "source_tables": ["church"], "error_info": ""}, {"sample_id": 1634, "db_id": "wedding", "score": 1, "gold_sql": "SELECT open_date, COUNT(*) FROM church GROUP BY open_date", "pred_sql": "SELECT Open_Date, COUNT(Church_ID) AS Number_of_Churches FROM church GROUP BY Open_Date", "source_tables": ["church"], "error_info": ""}, {"sample_id": 1635, "db_id": "wedding", "score": 1, "gold_sql": "SELECT name, open_date FROM church ORDER BY open_date DESC LIMIT 3", "pred_sql": "SELECT Name, Open_Date FROM church ORDER BY Open_Date DESC LIMIT 3", "source_tables": ["church"], "error_info": ""}, {"sample_id": 1636, "db_id": "wedding", "score": 0, "gold_sql": "SELECT COUNT(*) FROM people WHERE is_male = 'F' AND age > 30", "pred_sql": "SELECT COUNT(*) FROM people WHERE Is_Male = 'no' AND Age > '30'", "source_tables": ["people"], "error_info": "Result not equal"}, {"sample_id": 1637, "db_id": "wedding", "score": 0, "gold_sql": "SELECT country FROM people WHERE age < 25 INTERSECT SELECT country FROM people WHERE age > 30", "pred_sql": "SELECT DISTINCT Country FROM people WHERE Age > 30 OR Age < 25", "source_tables": ["people"], "error_info": "Result not equal"}, {"sample_id": 1638, "db_id": "wedding", "score": 1, "gold_sql": "SELECT MIN(age), MAX(age), AVG(age) FROM people", "pred_sql": "SELECT MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age, AVG(Age) AS Average_Age FROM people", "source_tables": ["people"], "error_info": ""}, {"sample_id": 1639, "db_id": "wedding", "score": 1, "gold_sql": "SELECT name, country FROM people WHERE age < (SELECT AVG(age) FROM people)", "pred_sql": "SELECT Name, Country FROM people WHERE Age < (SELECT AVG(Age) FROM people)", "source_tables": ["people"], "error_info": ""}, {"sample_id": 1640, "db_id": "wedding", "score": 1, "gold_sql": "SELECT T2.name, T3.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id = T2.people_id JOIN people AS T3 ON T1.female_id = T3.people_id WHERE T1.year > 2014", "pred_sql": "SELECT p1.Name AS Male_Name, p2.Name AS Female_Name FROM wedding AS w JOIN people AS p1 ON w.Male_ID = p1.People_ID JOIN people AS p2 ON w.Female_ID = p2.People_ID WHERE w.Year > '2014'", "source_tables": ["wedding", "people"], "error_info": ""}, {"sample_id": 1641, "db_id": "wedding", "score": 0, "gold_sql": "SELECT name, age FROM people WHERE is_male = 'T' AND NOT people_id IN (SELECT male_id FROM wedding)", "pred_sql": "SELECT Name, Age FROM people WHERE Is_Male = 'yes' AND NOT People_ID IN (SELECT Male_ID FROM wedding UNION SELECT Female_ID FROM wedding)", "source_tables": ["wedding", "people"], "error_info": "Result not equal"}, {"sample_id": 1642, "db_id": "wedding", "score": 0, "gold_sql": "SELECT name FROM church EXCEPT SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id = T2.church_id WHERE T2.year = 2015", "pred_sql": "SELECT Name FROM church WHERE NOT Church_ID IN (SELECT Church_ID FROM wedding WHERE Year = '2015')", "source_tables": ["wedding", "church"], "error_info": "Result not equal"}, {"sample_id": 1643, "db_id": "wedding", "score": 1, "gold_sql": "SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id = T2.church_id GROUP BY T1.church_id HAVING COUNT(*) >= 2", "pred_sql": "SELECT church.Name FROM church JOIN wedding ON church.Church_ID = wedding.Church_ID GROUP BY church.Church_ID HAVING COUNT(wedding.Church_ID) >= 2", "source_tables": ["wedding", "church"], "error_info": ""}, {"sample_id": 1644, "db_id": "wedding", "score": 1, "gold_sql": "SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id = T2.people_id WHERE T1.year = 2016 AND T2.is_male = 'F' AND T2.country = 'Canada'", "pred_sql": "SELECT p.Name FROM people AS p JOIN wedding AS w ON p.People_ID = w.Female_ID WHERE p.Country = 'Canada' AND w.Year = '2016'", "source_tables": ["wedding", "people"], "error_info": ""}, {"sample_id": 1645, "db_id": "wedding", "score": 1, "gold_sql": "SELECT COUNT(*) FROM wedding WHERE YEAR = 2016", "pred_sql": "SELECT COUNT(*) AS Total_Weddings FROM wedding WHERE Year = '2016'", "source_tables": ["wedding"], "error_info": ""}, {"sample_id": 1646, "db_id": "wedding", "score": 1, "gold_sql": "SELECT T4.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id = T2.people_id JOIN people AS T3 ON T1.female_id = T3.people_id JOIN church AS T4 ON T4.church_id = T1.church_id WHERE T2.age > 30 OR T3.age > 30", "pred_sql": "SELECT DISTINCT church.Name FROM church JOIN wedding ON church.Church_ID = wedding.Church_ID JOIN people ON wedding.Male_ID = people.People_ID OR wedding.Female_ID = people.People_ID WHERE people.Age > '30'", "source_tables": ["wedding", "church", "people"], "error_info": ""}, {"sample_id": 1647, "db_id": "wedding", "score": 1, "gold_sql": "SELECT country, COUNT(*) FROM people GROUP BY country", "pred_sql": "SELECT Country, COUNT(*) AS Number_of_People FROM people GROUP BY Country", "source_tables": ["people"], "error_info": ""}, {"sample_id": 1648, "db_id": "wedding", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT church_id) FROM wedding WHERE YEAR = 2016", "pred_sql": "SELECT COUNT(DISTINCT Church_ID) AS Number_of_Churches FROM wedding WHERE Year = '2016'", "source_tables": ["wedding"], "error_info": ""}, {"sample_id": 1649, "db_id": "theme_gallery", "score": 1, "gold_sql": "SELECT COUNT(*) FROM artist", "pred_sql": "SELECT COUNT(*) AS total_artists FROM artist", "source_tables": ["artist"], "error_info": ""}, {"sample_id": 1650, "db_id": "theme_gallery", "score": 1, "gold_sql": "SELECT COUNT(*) FROM artist", "pred_sql": "SELECT COUNT(*) AS Number_of_Artists FROM artist", "source_tables": ["artist"], "error_info": ""}, {"sample_id": 1651, "db_id": "theme_gallery", "score": 1, "gold_sql": "SELECT name, age, country FROM artist ORDER BY Year_Join", "pred_sql": "SELECT Name, Age, Country FROM artist ORDER BY Year_Join", "source_tables": ["artist"], "error_info": ""}, {"sample_id": 1652, "db_id": "theme_gallery", "score": 1, "gold_sql": "SELECT name, age, country FROM artist ORDER BY Year_Join", "pred_sql": "SELECT Name, Age, Country FROM artist ORDER BY Year_Join", "source_tables": ["artist"], "error_info": ""}, {"sample_id": 1653, "db_id": "theme_gallery", "score": 1, "gold_sql": "SELECT DISTINCT country FROM artist", "pred_sql": "SELECT DISTINCT Country FROM artist", "source_tables": ["artist"], "error_info": ""}, {"sample_id": 1654, "db_id": "theme_gallery", "score": 1, "gold_sql": "SELECT DISTINCT country FROM artist", "pred_sql": "SELECT DISTINCT Country FROM artist", "source_tables": ["artist"], "error_info": ""}, {"sample_id": 1655, "db_id": "theme_gallery", "score": 1, "gold_sql": "SELECT name, year_join FROM artist WHERE country <> 'United States'", "pred_sql": "SELECT Name, Year_Join FROM artist WHERE Country <> 'United States'", "source_tables": ["artist"], "error_info": ""}, {"sample_id": 1656, "db_id": "theme_gallery", "score": 1, "gold_sql": "SELECT name, year_join FROM artist WHERE country <> 'United States'", "pred_sql": "SELECT Name, Year_Join FROM artist WHERE Country <> 'United States'", "source_tables": ["artist"], "error_info": ""}, {"sample_id": 1657, "db_id": "theme_gallery", "score": 1, "gold_sql": "SELECT COUNT(*) FROM artist WHERE age > 46 AND year_join > 1990", "pred_sql": "SELECT COUNT(*) AS Artist_Count FROM artist WHERE Age > '46' AND Year_Join > '1990'", "source_tables": ["artist"], "error_info": ""}, {"sample_id": 1658, "db_id": "theme_gallery", "score": 1, "gold_sql": "SELECT COUNT(*) FROM artist WHERE age > 46 AND year_join > 1990", "pred_sql": "SELECT COUNT(*) FROM artist WHERE Age > '46' AND Year_Join > '1990'", "source_tables": ["artist"], "error_info": ""}, {"sample_id": 1659, "db_id": "theme_gallery", "score": 1, "gold_sql": "SELECT AVG(age), MIN(age) FROM artist WHERE country = 'United States'", "pred_sql": "SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age FROM artist WHERE Country = 'United States'", "source_tables": ["artist"], "error_info": ""}, {"sample_id": 1660, "db_id": "theme_gallery", "score": 1, "gold_sql": "SELECT AVG(age), MIN(age) FROM artist WHERE country = 'United States'", "pred_sql": "SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age FROM artist WHERE Country = 'United States'", "source_tables": ["artist"], "error_info": ""}, {"sample_id": 1661, "db_id": "theme_gallery", "score": 1, "gold_sql": "SELECT name FROM artist ORDER BY year_join DESC LIMIT 1", "pred_sql": "SELECT Name FROM artist ORDER BY Year_Join DESC LIMIT 1", "source_tables": ["artist"], "error_info": ""}, {"sample_id": 1662, "db_id": "theme_gallery", "score": 1, "gold_sql": "SELECT name FROM artist ORDER BY year_join DESC LIMIT 1", "pred_sql": "SELECT Name FROM artist ORDER BY Year_Join DESC LIMIT 1", "source_tables": ["artist"], "error_info": ""}, {"sample_id": 1663, "db_id": "theme_gallery", "score": 1, "gold_sql": "SELECT COUNT(*) FROM exhibition WHERE YEAR >= 2005", "pred_sql": "SELECT COUNT(*) AS Exhibition_Count FROM exhibition WHERE Year >= 2005", "source_tables": ["exhibition"], "error_info": ""}, {"sample_id": 1664, "db_id": "theme_gallery", "score": 1, "gold_sql": "SELECT COUNT(*) FROM exhibition WHERE YEAR >= 2005", "pred_sql": "SELECT COUNT(*) AS Exhibition_Count FROM exhibition WHERE Year >= 2005", "source_tables": ["exhibition"], "error_info": ""}, {"sample_id": 1665, "db_id": "theme_gallery", "score": 1, "gold_sql": "SELECT theme, YEAR FROM exhibition WHERE ticket_price < 15", "pred_sql": "SELECT Theme, Year FROM exhibition WHERE Ticket_Price < 15", "source_tables": ["exhibition"], "error_info": ""}, {"sample_id": 1666, "db_id": "theme_gallery", "score": 1, "gold_sql": "SELECT theme, YEAR FROM exhibition WHERE ticket_price < 15", "pred_sql": "SELECT Theme, Year FROM exhibition WHERE Ticket_Price < 15", "source_tables": ["exhibition"], "error_info": ""}, {"sample_id": 1667, "db_id": "theme_gallery", "score": 0, "gold_sql": "SELECT T2.name, COUNT(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id", "pred_sql": "SELECT artist.Name, COUNT(exhibition.Exhibition_ID) AS Number_of_Exhibitions FROM artist LEFT JOIN exhibition ON artist.Artist_ID = exhibition.Artist_ID GROUP BY artist.Artist_ID", "source_tables": ["artist", "exhibition"], "error_info": "Result not equal"}, {"sample_id": 1668, "db_id": "theme_gallery", "score": 0, "gold_sql": "SELECT T2.name, COUNT(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id", "pred_sql": "SELECT artist.Name, COUNT(exhibition.Exhibition_ID) AS Exhibition_Count FROM artist LEFT JOIN exhibition ON artist.Artist_ID = exhibition.Artist_ID GROUP BY artist.Artist_ID", "source_tables": ["artist", "exhibition"], "error_info": "Result not equal"}, {"sample_id": 1669, "db_id": "theme_gallery", "score": 1, "gold_sql": "SELECT T2.name, T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT a.Name, a.Country FROM artist AS a JOIN exhibition AS e ON a.Artist_ID = e.Artist_ID GROUP BY a.Artist_ID ORDER BY COUNT(e.Exhibition_ID) DESC LIMIT 1", "source_tables": ["artist", "exhibition"], "error_info": ""}, {"sample_id": 1670, "db_id": "theme_gallery", "score": 1, "gold_sql": "SELECT T2.name, T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT a.Name, a.Country FROM artist AS a JOIN exhibition AS e ON a.Artist_ID = e.Artist_ID GROUP BY a.Artist_ID ORDER BY COUNT(e.Exhibition_ID) DESC LIMIT 1", "source_tables": ["artist", "exhibition"], "error_info": ""}, {"sample_id": 1671, "db_id": "theme_gallery", "score": 1, "gold_sql": "SELECT name FROM artist WHERE NOT artist_id IN (SELECT artist_id FROM exhibition)", "pred_sql": "SELECT Name FROM artist WHERE NOT Artist_ID IN (SELECT Artist_ID FROM exhibition)", "source_tables": ["exhibition", "artist"], "error_info": ""}, {"sample_id": 1672, "db_id": "theme_gallery", "score": 1, "gold_sql": "SELECT name FROM artist WHERE NOT artist_id IN (SELECT artist_id FROM exhibition)", "pred_sql": "SELECT Name FROM artist WHERE NOT Artist_ID IN (SELECT Artist_ID FROM exhibition)", "source_tables": ["exhibition", "artist"], "error_info": ""}, {"sample_id": 1673, "db_id": "theme_gallery", "score": 1, "gold_sql": "SELECT T1.theme, T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id WHERE T1.ticket_price > (SELECT AVG(ticket_price) FROM exhibition)", "pred_sql": "SELECT e.Theme, a.Name FROM exhibition AS e JOIN artist AS a ON e.Artist_ID = a.Artist_ID WHERE e.Ticket_Price > (SELECT AVG(Ticket_Price) FROM exhibition)", "source_tables": ["artist", "exhibition"], "error_info": ""}, {"sample_id": 1674, "db_id": "theme_gallery", "score": 1, "gold_sql": "SELECT T1.theme, T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id WHERE T1.ticket_price > (SELECT AVG(ticket_price) FROM exhibition)", "pred_sql": "SELECT a.Name, e.Theme FROM artist AS a JOIN exhibition AS e ON a.Artist_ID = e.Artist_ID WHERE e.Ticket_Price > (SELECT AVG(Ticket_Price) FROM exhibition)", "source_tables": ["artist", "exhibition"], "error_info": ""}, {"sample_id": 1675, "db_id": "theme_gallery", "score": 1, "gold_sql": "SELECT AVG(ticket_price), MIN(ticket_price), MAX(ticket_price) FROM exhibition WHERE YEAR < 2009", "pred_sql": "SELECT AVG(Ticket_Price) AS Average_Ticket_Price, MIN(Ticket_Price) AS Minimum_Ticket_Price, MAX(Ticket_Price) AS Maximum_Ticket_Price FROM exhibition WHERE Year < 2009", "source_tables": ["exhibition"], "error_info": ""}, {"sample_id": 1676, "db_id": "theme_gallery", "score": 1, "gold_sql": "SELECT AVG(ticket_price), MIN(ticket_price), MAX(ticket_price) FROM exhibition WHERE YEAR < 2009", "pred_sql": "SELECT AVG(Ticket_Price) AS Average_Ticket_Price, MIN(Ticket_Price) AS Minimum_Ticket_Price, MAX(Ticket_Price) AS Maximum_Ticket_Price FROM exhibition WHERE Year < 2009", "source_tables": ["exhibition"], "error_info": ""}, {"sample_id": 1677, "db_id": "theme_gallery", "score": 1, "gold_sql": "SELECT theme, YEAR FROM exhibition ORDER BY ticket_price DESC", "pred_sql": "SELECT Theme, Year FROM exhibition ORDER BY Ticket_Price DESC", "source_tables": ["exhibition"], "error_info": ""}, {"sample_id": 1678, "db_id": "theme_gallery", "score": 1, "gold_sql": "SELECT theme, YEAR FROM exhibition ORDER BY ticket_price DESC", "pred_sql": "SELECT Theme, Year FROM exhibition ORDER BY Ticket_Price DESC", "source_tables": ["exhibition"], "error_info": ""}, {"sample_id": 1679, "db_id": "theme_gallery", "score": 1, "gold_sql": "SELECT T2.theme, T1.date, T1.attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T2.year = 2004", "pred_sql": "SELECT exhibition.Theme, exhibition_record.Date, exhibition_record.Attendance FROM exhibition JOIN exhibition_record ON exhibition.Exhibition_ID = exhibition_record.Exhibition_ID WHERE exhibition.Year = 2004", "source_tables": ["exhibition", "exhibition_record"], "error_info": ""}, {"sample_id": 1680, "db_id": "theme_gallery", "score": 1, "gold_sql": "SELECT T2.theme, T1.date, T1.attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T2.year = 2004", "pred_sql": "SELECT exhibition.Theme, exhibition_record.Date, exhibition_record.Attendance FROM exhibition JOIN exhibition_record ON exhibition.Exhibition_ID = exhibition_record.Exhibition_ID WHERE exhibition.Year = 2004", "source_tables": ["exhibition", "exhibition_record"], "error_info": ""}, {"sample_id": 1681, "db_id": "theme_gallery", "score": 1, "gold_sql": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id WHERE T1.year = 2004", "pred_sql": "SELECT Name FROM artist WHERE NOT Artist_ID IN (SELECT Artist_ID FROM exhibition WHERE Year = 2004)", "source_tables": ["exhibition", "artist"], "error_info": ""}, {"sample_id": 1682, "db_id": "theme_gallery", "score": 1, "gold_sql": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id WHERE T1.year = 2004", "pred_sql": "SELECT Name FROM artist WHERE NOT Artist_ID IN (SELECT Artist_ID FROM exhibition WHERE Year = 2004)", "source_tables": ["exhibition", "artist"], "error_info": ""}, {"sample_id": 1683, "db_id": "theme_gallery", "score": 0, "gold_sql": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance < 100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance > 500", "pred_sql": "SELECT DISTINCT e.Theme FROM exhibition AS e JOIN exhibition_record AS er ON e.Exhibition_ID = er.Exhibition_ID WHERE er.Attendance < 100 OR er.Attendance > 500", "source_tables": ["exhibition", "exhibition_record"], "error_info": "Result not equal"}, {"sample_id": 1684, "db_id": "theme_gallery", "score": 1, "gold_sql": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance < 100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance > 500", "pred_sql": "SELECT DISTINCT e.Theme FROM exhibition AS e JOIN exhibition_record AS er ON e.Exhibition_ID = er.Exhibition_ID WHERE er.Attendance < 100 OR er.Attendance > 500 GROUP BY e.Theme HAVING COUNT(CASE WHEN er.Attendance < 100 THEN 1 END) > 0 AND COUNT(CASE WHEN er.Attendance > 500 THEN 1 END) > 0", "source_tables": ["exhibition", "exhibition_record"], "error_info": ""}, {"sample_id": 1685, "db_id": "theme_gallery", "score": 1, "gold_sql": "SELECT COUNT(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance > 100 OR T2.ticket_price < 10", "pred_sql": "SELECT COUNT(*) FROM exhibition AS e JOIN exhibition_record AS er ON e.Exhibition_ID = er.Exhibition_ID WHERE er.Attendance > 100 OR e.Ticket_Price < 10", "source_tables": ["exhibition", "exhibition_record"], "error_info": ""}, {"sample_id": 1686, "db_id": "theme_gallery", "score": 1, "gold_sql": "SELECT COUNT(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance > 100 OR T2.ticket_price < 10", "pred_sql": "SELECT COUNT(*) FROM exhibition AS e JOIN exhibition_record AS er ON e.Exhibition_ID = er.Exhibition_ID WHERE er.Attendance > 100 OR e.Ticket_Price < 10", "source_tables": ["exhibition", "exhibition_record"], "error_info": ""}, {"sample_id": 1687, "db_id": "theme_gallery", "score": 1, "gold_sql": "SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id JOIN artist AS T3 ON T3.artist_id = T2.artist_id GROUP BY T3.artist_id HAVING AVG(T1.attendance) > 200", "pred_sql": "SELECT a.Name FROM artist AS a JOIN exhibition AS e ON a.Artist_ID = e.Artist_ID JOIN exhibition_record AS er ON e.Exhibition_ID = er.Exhibition_ID GROUP BY a.Artist_ID HAVING AVG(er.Attendance) > 200", "source_tables": ["artist", "exhibition", "exhibition_record"], "error_info": ""}, {"sample_id": 1688, "db_id": "theme_gallery", "score": 1, "gold_sql": "SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id JOIN artist AS T3 ON T3.artist_id = T2.artist_id GROUP BY T3.artist_id HAVING AVG(T1.attendance) > 200", "pred_sql": "SELECT a.Name FROM artist AS a JOIN exhibition AS e ON a.Artist_ID = e.Artist_ID JOIN exhibition_record AS er ON e.Exhibition_ID = er.Exhibition_ID GROUP BY a.Artist_ID HAVING AVG(er.Attendance) > 200", "source_tables": ["artist", "exhibition", "exhibition_record"], "error_info": ""}, {"sample_id": 1689, "db_id": "epinions_1", "score": 1, "gold_sql": "SELECT i_id FROM item WHERE title = 'orange'", "pred_sql": "SELECT i_id FROM item WHERE title = 'orange'", "source_tables": ["item"], "error_info": ""}, {"sample_id": 1690, "db_id": "epinions_1", "score": 1, "gold_sql": "SELECT * FROM item", "pred_sql": "SELECT * FROM item", "source_tables": ["item"], "error_info": ""}, {"sample_id": 1691, "db_id": "epinions_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM review", "pred_sql": "SELECT COUNT(*) AS number_of_reviews FROM review", "source_tables": ["review"], "error_info": ""}, {"sample_id": 1692, "db_id": "epinions_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM useracct", "pred_sql": "SELECT COUNT(*) AS user_count FROM useracct", "source_tables": ["useracct"], "error_info": ""}, {"sample_id": 1693, "db_id": "epinions_1", "score": 1, "gold_sql": "SELECT AVG(rating), MAX(rating) FROM review", "pred_sql": "SELECT AVG(rating) AS average_rating, MAX(rating) AS maximum_rating FROM review", "source_tables": ["review"], "error_info": ""}, {"sample_id": 1694, "db_id": "epinions_1", "score": 0, "gold_sql": "SELECT MIN(rank) FROM review", "pred_sql": "SELECT MAX(rank) AS highest_rank FROM review", "source_tables": ["review"], "error_info": "Result not equal"}, {"sample_id": 1695, "db_id": "epinions_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT u_id) FROM review", "pred_sql": "SELECT COUNT(DISTINCT u_id) AS different_users FROM review", "source_tables": ["review"], "error_info": ""}, {"sample_id": 1696, "db_id": "epinions_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT i_id) FROM review", "pred_sql": "SELECT COUNT(DISTINCT i_id) AS different_items_reviewed FROM review", "source_tables": ["review"], "error_info": ""}, {"sample_id": 1697, "db_id": "epinions_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM item WHERE NOT i_id IN (SELECT i_id FROM review)", "pred_sql": "SELECT COUNT(*) AS num_items_without_reviews FROM item WHERE NOT i_id IN (SELECT i_id FROM review)", "source_tables": ["review", "item"], "error_info": ""}, {"sample_id": 1698, "db_id": "epinions_1", "score": 1, "gold_sql": "SELECT name FROM useracct WHERE NOT u_id IN (SELECT u_id FROM review)", "pred_sql": "SELECT name FROM useracct WHERE NOT u_id IN (SELECT u_id FROM review)", "source_tables": ["useracct", "review"], "error_info": ""}, {"sample_id": 1699, "db_id": "epinions_1", "score": 1, "gold_sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating = 10", "pred_sql": "SELECT item.title FROM item JOIN review ON item.i_id = review.i_id WHERE review.rating = 10", "source_tables": ["review", "item"], "error_info": ""}, {"sample_id": 1700, "db_id": "epinions_1", "score": 1, "gold_sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating > (SELECT AVG(rating) FROM review)", "pred_sql": "SELECT item.title FROM item JOIN review ON item.i_id = review.i_id WHERE review.rating > (SELECT AVG(rating) FROM review)", "source_tables": ["review", "item"], "error_info": ""}, {"sample_id": 1701, "db_id": "epinions_1", "score": 1, "gold_sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating < 5", "pred_sql": "SELECT item.title FROM item JOIN review ON item.i_id = review.i_id WHERE review.rating < 5", "source_tables": ["review", "item"], "error_info": ""}, {"sample_id": 1702, "db_id": "epinions_1", "score": 0, "gold_sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating > 8 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating < 5", "pred_sql": "SELECT DISTINCT item.title FROM item JOIN review ON item.i_id = review.i_id WHERE review.rating > 8 OR review.rating < 5", "source_tables": ["review", "item"], "error_info": "Result not equal"}, {"sample_id": 1703, "db_id": "epinions_1", "score": 1, "gold_sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rank > 3 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id HAVING AVG(T2.rating) > 5", "pred_sql": "SELECT item.title FROM item JOIN review ON item.i_id = review.i_id GROUP BY item.i_id HAVING AVG(review.rating) > 5 AND MAX(review.rank) > 3", "source_tables": ["review", "item"], "error_info": ""}, {"sample_id": 1704, "db_id": "epinions_1", "score": 1, "gold_sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id ORDER BY AVG(T2.rating) LIMIT 1", "pred_sql": "SELECT item.title FROM item JOIN review ON item.i_id = review.i_id GROUP BY item.i_id ORDER BY AVG(review.rating) ASC LIMIT 1", "source_tables": ["review", "item"], "error_info": ""}, {"sample_id": 1705, "db_id": "epinions_1", "score": 1, "gold_sql": "SELECT title FROM item ORDER BY title", "pred_sql": "SELECT title FROM item ORDER BY title ASC", "source_tables": ["item"], "error_info": ""}, {"sample_id": 1706, "db_id": "epinions_1", "score": 1, "gold_sql": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT u.name FROM useracct AS u JOIN review AS r ON u.u_id = r.u_id GROUP BY u.u_id ORDER BY COUNT(r.a_id) DESC LIMIT 1", "source_tables": ["useracct", "review"], "error_info": ""}, {"sample_id": 1707, "db_id": "epinions_1", "score": 1, "gold_sql": "SELECT T1.title, T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id ORDER BY AVG(T2.rating) DESC LIMIT 1", "pred_sql": "SELECT item.title, item.i_id FROM item JOIN review ON item.i_id = review.i_id GROUP BY item.i_id ORDER BY AVG(review.rating) DESC LIMIT 1", "source_tables": ["review", "item"], "error_info": ""}, {"sample_id": 1708, "db_id": "epinions_1", "score": 1, "gold_sql": "SELECT T1.title, T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id ORDER BY AVG(T2.rank) DESC LIMIT 1", "pred_sql": "SELECT item.title, item.i_id FROM item JOIN review ON item.i_id = review.i_id GROUP BY item.i_id ORDER BY AVG(review.rank) DESC LIMIT 1", "source_tables": ["review", "item"], "error_info": ""}, {"sample_id": 1709, "db_id": "epinions_1", "score": 1, "gold_sql": "SELECT T1.name, AVG(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id", "pred_sql": "SELECT u.name, AVG(r.rating) AS average_rating FROM useracct AS u JOIN review AS r ON u.u_id = r.u_id GROUP BY u.u_id", "source_tables": ["useracct", "review"], "error_info": ""}, {"sample_id": 1710, "db_id": "epinions_1", "score": 0, "gold_sql": "SELECT T1.name, COUNT(*) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id", "pred_sql": "SELECT useracct.name, COUNT(review.a_id) AS review_count FROM useracct LEFT JOIN review ON useracct.u_id = review.u_id GROUP BY useracct.u_id", "source_tables": ["useracct", "review"], "error_info": "Result not equal"}, {"sample_id": 1711, "db_id": "epinions_1", "score": 0, "gold_sql": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id ORDER BY T2.rating DESC LIMIT 1", "pred_sql": "SELECT u.name FROM useracct AS u JOIN review AS r ON u.u_id = r.u_id WHERE r.rating = (SELECT MAX(rating) FROM review)", "source_tables": ["useracct", "review"], "error_info": "Result not equal"}, {"sample_id": 1712, "db_id": "epinions_1", "score": 1, "gold_sql": "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.source_u_id GROUP BY T2.source_u_id ORDER BY AVG(trust) DESC LIMIT 1", "pred_sql": "SELECT ua.name FROM useracct AS ua JOIN (SELECT source_u_id, AVG(trust) AS avg_trust FROM trust GROUP BY source_u_id) AS avg_trusts ON ua.u_id = avg_trusts.source_u_id ORDER BY avg_trust DESC LIMIT 1", "source_tables": ["trust", "useracct"], "error_info": ""}, {"sample_id": 1713, "db_id": "epinions_1", "score": 1, "gold_sql": "SELECT T1.name, AVG(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id GROUP BY T2.target_u_id", "pred_sql": "SELECT u.name, AVG(t.trust) AS average_trust_score FROM useracct AS u JOIN trust AS t ON u.u_id = t.target_u_id GROUP BY u.u_id", "source_tables": ["trust", "useracct"], "error_info": ""}, {"sample_id": 1714, "db_id": "epinions_1", "score": 1, "gold_sql": "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id ORDER BY trust LIMIT 1", "pred_sql": "SELECT u.name FROM useracct AS u JOIN trust AS t ON u.u_id = t.target_u_id ORDER BY t.trust ASC LIMIT 1", "source_tables": ["trust", "useracct"], "error_info": ""}, {"sample_id": 1715, "db_id": "epinions_1", "score": 1, "gold_sql": "SELECT title FROM item WHERE NOT i_id IN (SELECT i_id FROM review)", "pred_sql": "SELECT title FROM item WHERE NOT i_id IN (SELECT i_id FROM review)", "source_tables": ["review", "item"], "error_info": ""}, {"sample_id": 1716, "db_id": "epinions_1", "score": 1, "gold_sql": "SELECT name FROM useracct WHERE NOT u_id IN (SELECT u_id FROM review)", "pred_sql": "SELECT name FROM useracct WHERE NOT u_id IN (SELECT u_id FROM review)", "source_tables": ["useracct", "review"], "error_info": ""}, {"sample_id": 1717, "db_id": "epinions_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM useracct WHERE NOT u_id IN (SELECT u_id FROM review)", "pred_sql": "SELECT COUNT(*) AS num_users_without_reviews FROM useracct WHERE NOT u_id IN (SELECT DISTINCT u_id FROM review)", "source_tables": ["useracct", "review"], "error_info": ""}, {"sample_id": 1718, "db_id": "epinions_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM item WHERE NOT i_id IN (SELECT i_id FROM review)", "pred_sql": "SELECT COUNT(*) AS num_items_without_reviews FROM item WHERE NOT i_id IN (SELECT DISTINCT i_id FROM review)", "source_tables": ["review", "item"], "error_info": ""}, {"sample_id": 1719, "db_id": "riding_club", "score": 1, "gold_sql": "SELECT COUNT(*) FROM player", "pred_sql": "SELECT COUNT(*) AS player_count FROM player", "source_tables": ["player"], "error_info": ""}, {"sample_id": 1720, "db_id": "riding_club", "score": 1, "gold_sql": "SELECT Player_name FROM player ORDER BY Votes ASC", "pred_sql": "SELECT Player_name FROM player ORDER BY Votes ASC", "source_tables": ["player"], "error_info": ""}, {"sample_id": 1721, "db_id": "riding_club", "score": 1, "gold_sql": "SELECT Gender, Occupation FROM player", "pred_sql": "SELECT Gender, Occupation FROM player", "source_tables": ["player"], "error_info": ""}, {"sample_id": 1722, "db_id": "riding_club", "score": 1, "gold_sql": "SELECT Player_name, residence FROM player WHERE Occupation <> 'Researcher'", "pred_sql": "SELECT Player_name, Residence FROM player WHERE Occupation <> 'Researcher'", "source_tables": ["player"], "error_info": ""}, {"sample_id": 1723, "db_id": "riding_club", "score": 1, "gold_sql": "SELECT Sponsor_name FROM player WHERE Residence = 'Brandon' OR Residence = 'Birtle'", "pred_sql": "SELECT Sponsor_name FROM player WHERE Residence IN ('Brandon', 'Birtle')", "source_tables": ["player"], "error_info": ""}, {"sample_id": 1724, "db_id": "riding_club", "score": 1, "gold_sql": "SELECT Player_name FROM player ORDER BY Votes DESC LIMIT 1", "pred_sql": "SELECT Player_name FROM player ORDER BY Votes DESC LIMIT 1", "source_tables": ["player"], "error_info": ""}, {"sample_id": 1725, "db_id": "riding_club", "score": 1, "gold_sql": "SELECT Occupation, COUNT(*) FROM player GROUP BY Occupation", "pred_sql": "SELECT Occupation, COUNT(Player_ID) AS Number_of_Players FROM player GROUP BY Occupation", "source_tables": ["player"], "error_info": ""}, {"sample_id": 1726, "db_id": "riding_club", "score": 0, "gold_sql": "SELECT Occupation FROM player GROUP BY Occupation ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Occupation, COUNT(*) AS Count FROM player GROUP BY Occupation ORDER BY Count DESC LIMIT 1", "source_tables": ["player"], "error_info": "Result not equal"}, {"sample_id": 1727, "db_id": "riding_club", "score": 1, "gold_sql": "SELECT Residence FROM player GROUP BY Residence HAVING COUNT(*) >= 2", "pred_sql": "SELECT Residence FROM player GROUP BY Residence HAVING COUNT(Player_ID) >= 2", "source_tables": ["player"], "error_info": ""}, {"sample_id": 1728, "db_id": "riding_club", "score": 1, "gold_sql": "SELECT T3.Player_name, T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID", "pred_sql": "SELECT player.Player_name, coach.Coach_name FROM player JOIN player_coach ON player.Player_ID = player_coach.Player_ID JOIN coach ON player_coach.Coach_ID = coach.Coach_ID", "source_tables": ["player_coach", "coach", "player"], "error_info": ""}, {"sample_id": 1729, "db_id": "riding_club", "score": 1, "gold_sql": "SELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID WHERE T2.Rank = 1", "pred_sql": "SELECT player.Player_name FROM player JOIN player_coach ON player.Player_ID = player_coach.Player_ID JOIN coach ON player_coach.Coach_ID = coach.Coach_ID WHERE coach.Rank = '1'", "source_tables": ["player_coach", "coach", "player"], "error_info": ""}, {"sample_id": 1730, "db_id": "riding_club", "score": 1, "gold_sql": "SELECT T3.Player_name, T3.gender FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID WHERE T1.Starting_year > 2011", "pred_sql": "SELECT player.Player_name, player.Gender FROM player JOIN player_coach ON player.Player_ID = player_coach.Player_ID JOIN coach ON player_coach.Coach_ID = coach.Coach_ID WHERE player_coach.Starting_year > '2011'", "source_tables": ["player_coach", "coach", "player"], "error_info": ""}, {"sample_id": 1731, "db_id": "riding_club", "score": 1, "gold_sql": "SELECT T3.Player_name, T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID ORDER BY T3.Votes DESC", "pred_sql": "SELECT player.Player_name, coach.Coach_name FROM player JOIN player_coach ON player.Player_ID = player_coach.Player_ID JOIN coach ON player_coach.Coach_ID = coach.Coach_ID ORDER BY player.Votes DESC", "source_tables": ["player_coach", "coach", "player"], "error_info": ""}, {"sample_id": 1732, "db_id": "riding_club", "score": 1, "gold_sql": "SELECT Player_name FROM player WHERE NOT Player_ID IN (SELECT Player_ID FROM player_coach)", "pred_sql": "SELECT Player_name FROM player WHERE NOT Player_ID IN (SELECT Player_ID FROM player_coach)", "source_tables": ["player_coach", "player"], "error_info": ""}, {"sample_id": 1733, "db_id": "riding_club", "score": 1, "gold_sql": "SELECT Residence FROM player WHERE gender = 'M' INTERSECT SELECT Residence FROM player WHERE gender = 'F'", "pred_sql": "SELECT DISTINCT p1.Residence FROM player AS p1, player AS p2 WHERE p1.Gender = 'M' AND p2.Gender = 'F' AND p1.Residence = p2.Residence", "source_tables": ["player"], "error_info": ""}, {"sample_id": 1734, "db_id": "riding_club", "score": 0, "gold_sql": "SELECT T1.club_id, T1.club_name, COUNT(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id = T2.club_id GROUP BY T1.club_id", "pred_sql": "SELECT club.Club_ID, club.Club_name, COUNT(coach.Coach_ID) AS Number_of_Coaches FROM club LEFT JOIN coach ON club.Club_ID = coach.Club_ID GROUP BY club.Club_ID, club.Club_name", "source_tables": ["coach", "club"], "error_info": "Result not equal"}, {"sample_id": 1735, "db_id": "riding_club", "score": 0, "gold_sql": "SELECT T1.club_id, T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id = T2.club_id GROUP BY T1.club_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT SUM(mr.Gold) AS Total_Gold_Medals FROM match_result AS mr JOIN club AS c ON mr.Club_ID = c.Club_ID WHERE c.Club_ID = (SELECT pc.Club_ID FROM player_coach AS pc GROUP BY pc.Club_ID ORDER BY COUNT(pc.Coach_ID) DESC LIMIT 1)", "source_tables": ["match_result", "coach"], "error_info": "Predction Execution Error:no such column: pc.Club_ID"}, {"sample_id": 1736, "db_id": "gymnast", "score": 1, "gold_sql": "SELECT COUNT(*) FROM gymnast", "pred_sql": "SELECT COUNT(*) AS NumberOfGymnasts FROM gymnast", "source_tables": ["gymnast"], "error_info": ""}, {"sample_id": 1737, "db_id": "gymnast", "score": 1, "gold_sql": "SELECT COUNT(*) FROM gymnast", "pred_sql": "SELECT COUNT(*) AS NumberOfGymnasts FROM gymnast", "source_tables": ["gymnast"], "error_info": ""}, {"sample_id": 1738, "db_id": "gymnast", "score": 1, "gold_sql": "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC", "pred_sql": "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC", "source_tables": ["gymnast"], "error_info": ""}, {"sample_id": 1739, "db_id": "gymnast", "score": 1, "gold_sql": "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC", "pred_sql": "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC", "source_tables": ["gymnast"], "error_info": ""}, {"sample_id": 1740, "db_id": "gymnast", "score": 1, "gold_sql": "SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC", "pred_sql": "SELECT gymnast.Total_Points FROM gymnast ORDER BY gymnast.Floor_Exercise_Points DESC", "source_tables": ["gymnast"], "error_info": ""}, {"sample_id": 1741, "db_id": "gymnast", "score": 1, "gold_sql": "SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC", "pred_sql": "SELECT gymnast.Total_Points FROM gymnast ORDER BY gymnast.Floor_Exercise_Points DESC", "source_tables": ["gymnast"], "error_info": ""}, {"sample_id": 1742, "db_id": "gymnast", "score": 1, "gold_sql": "SELECT AVG(Horizontal_Bar_Points) FROM gymnast", "pred_sql": "SELECT AVG(Horizontal_Bar_Points) AS Average_Horizontal_Bar_Points FROM gymnast", "source_tables": ["gymnast"], "error_info": ""}, {"sample_id": 1743, "db_id": "gymnast", "score": 1, "gold_sql": "SELECT AVG(Horizontal_Bar_Points) FROM gymnast", "pred_sql": "SELECT AVG(Horizontal_Bar_Points) AS Average_Horizontal_Bar_Points FROM gymnast", "source_tables": ["gymnast"], "error_info": ""}, {"sample_id": 1744, "db_id": "gymnast", "score": 1, "gold_sql": "SELECT Name FROM People ORDER BY Name ASC", "pred_sql": "SELECT Name FROM people ORDER BY Name ASC", "source_tables": ["people"], "error_info": ""}, {"sample_id": 1745, "db_id": "gymnast", "score": 1, "gold_sql": "SELECT Name FROM People ORDER BY Name ASC", "pred_sql": "SELECT Name FROM people ORDER BY Name ASC", "source_tables": ["people"], "error_info": ""}, {"sample_id": 1746, "db_id": "gymnast", "score": 1, "gold_sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID", "pred_sql": "SELECT p.Name FROM people AS p JOIN gymnast AS g ON p.People_ID = g.Gymnast_ID", "source_tables": ["gymnast", "people"], "error_info": ""}, {"sample_id": 1747, "db_id": "gymnast", "score": 1, "gold_sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID", "pred_sql": "SELECT Name FROM people INNER JOIN gymnast ON gymnast.Gymnast_ID = people.People_ID", "source_tables": ["gymnast", "people"], "error_info": ""}, {"sample_id": 1748, "db_id": "gymnast", "score": 1, "gold_sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T2.Hometown <> 'Santo Domingo'", "pred_sql": "SELECT p.Name FROM people AS p JOIN gymnast AS g ON p.People_ID = g.Gymnast_ID WHERE p.Hometown <> 'Santo Domingo'", "source_tables": ["gymnast", "people"], "error_info": ""}, {"sample_id": 1749, "db_id": "gymnast", "score": 0, "gold_sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T2.Hometown <> 'Santo Domingo'", "pred_sql": "SELECT Name FROM people WHERE NOT People_ID IN (SELECT Gymnast_ID FROM gymnast WHERE Gymnast_ID IN (SELECT People_ID FROM people WHERE Hometown = 'Santo Domingo'))", "source_tables": ["gymnast", "people"], "error_info": "Result not equal"}, {"sample_id": 1750, "db_id": "gymnast", "score": 1, "gold_sql": "SELECT Age FROM people ORDER BY Height DESC LIMIT 1", "pred_sql": "SELECT Age FROM people WHERE Height = (SELECT MAX(Height) FROM people)", "source_tables": ["people"], "error_info": ""}, {"sample_id": 1751, "db_id": "gymnast", "score": 1, "gold_sql": "SELECT Age FROM people ORDER BY Height DESC LIMIT 1", "pred_sql": "SELECT Age FROM people WHERE Height = (SELECT MAX(Height) FROM people)", "source_tables": ["people"], "error_info": ""}, {"sample_id": 1752, "db_id": "gymnast", "score": 1, "gold_sql": "SELECT Name FROM People ORDER BY Age DESC LIMIT 5", "pred_sql": "SELECT Name FROM people ORDER BY Age DESC LIMIT 5", "source_tables": ["people"], "error_info": ""}, {"sample_id": 1753, "db_id": "gymnast", "score": 1, "gold_sql": "SELECT Name FROM People ORDER BY Age DESC LIMIT 5", "pred_sql": "SELECT Name FROM people ORDER BY Age DESC LIMIT 5", "source_tables": ["people"], "error_info": ""}, {"sample_id": 1754, "db_id": "gymnast", "score": 0, "gold_sql": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T2.Age ASC LIMIT 1", "pred_sql": "SELECT Total_Points FROM gymnast WHERE Gymnast_ID = (SELECT People_ID FROM people ORDER BY Age ASC LIMIT 1)", "source_tables": ["gymnast", "people"], "error_info": "Result not equal"}, {"sample_id": 1755, "db_id": "gymnast", "score": 0, "gold_sql": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T2.Age ASC LIMIT 1", "pred_sql": "SELECT Total_Points FROM gymnast JOIN people ON gymnast.Gymnast_ID = people.People_ID WHERE Age = (SELECT MIN(Age) FROM people)", "source_tables": ["gymnast", "people"], "error_info": "Result not equal"}, {"sample_id": 1756, "db_id": "gymnast", "score": 1, "gold_sql": "SELECT AVG(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID", "pred_sql": "SELECT AVG(Age) AS Average_Age FROM people WHERE People_ID IN (SELECT Gymnast_ID FROM gymnast)", "source_tables": ["gymnast", "people"], "error_info": ""}, {"sample_id": 1757, "db_id": "gymnast", "score": 1, "gold_sql": "SELECT AVG(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID", "pred_sql": "SELECT AVG(Age) AS Average_Age FROM people WHERE People_ID IN (SELECT Gymnast_ID FROM gymnast)", "source_tables": ["gymnast", "people"], "error_info": ""}, {"sample_id": 1758, "db_id": "gymnast", "score": 1, "gold_sql": "SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T1.Total_Points > 57.5", "pred_sql": "SELECT DISTINCT p.Hometown FROM gymnast AS g JOIN people AS p ON g.Gymnast_ID = p.People_ID WHERE g.Total_Points > '57.5'", "source_tables": ["gymnast", "people"], "error_info": ""}, {"sample_id": 1759, "db_id": "gymnast", "score": 1, "gold_sql": "SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T1.Total_Points > 57.5", "pred_sql": "SELECT DISTINCT p.Hometown FROM gymnast AS g JOIN people AS p ON g.Gymnast_ID = p.People_ID WHERE g.Total_Points > '57.5'", "source_tables": ["gymnast", "people"], "error_info": ""}, {"sample_id": 1760, "db_id": "gymnast", "score": 1, "gold_sql": "SELECT T2.Hometown, COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown", "pred_sql": "SELECT p.Hometown, COUNT(g.Gymnast_ID) AS Number_of_Gymnasts FROM gymnast AS g JOIN people AS p ON g.Gymnast_ID = p.People_ID GROUP BY p.Hometown", "source_tables": ["gymnast", "people"], "error_info": ""}, {"sample_id": 1761, "db_id": "gymnast", "score": 1, "gold_sql": "SELECT T2.Hometown, COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown", "pred_sql": "SELECT p.Hometown, COUNT(g.Gymnast_ID) AS Number_of_Gymnasts FROM people AS p JOIN gymnast AS g ON p.People_ID = g.Gymnast_ID GROUP BY p.Hometown", "source_tables": ["gymnast", "people"], "error_info": ""}, {"sample_id": 1762, "db_id": "gymnast", "score": 0, "gold_sql": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Hometown, COUNT(*) AS Count FROM people INNER JOIN gymnast ON people.People_ID = gymnast.Gymnast_ID GROUP BY Hometown ORDER BY Count DESC LIMIT 1", "source_tables": ["gymnast", "people"], "error_info": "Result not equal"}, {"sample_id": 1763, "db_id": "gymnast", "score": 1, "gold_sql": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Hometown FROM people WHERE People_ID IN (SELECT Gymnast_ID FROM gymnast) GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["gymnast", "people"], "error_info": ""}, {"sample_id": 1764, "db_id": "gymnast", "score": 0, "gold_sql": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*) >= 2", "pred_sql": "SELECT hometown FROM people WHERE People_ID IN (SELECT Gymnast_ID FROM gymnast) GROUP BY hometown HAVING COUNT(Gymnast_ID) >= 2", "source_tables": ["gymnast", "people"], "error_info": "Predction Execution Error:no such column: Gymnast_ID"}, {"sample_id": 1765, "db_id": "gymnast", "score": 0, "gold_sql": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*) >= 2", "pred_sql": "SELECT hometown FROM people WHERE People_ID IN (SELECT Gymnast_ID FROM gymnast) GROUP BY hometown HAVING COUNT(Gymnast_ID) >= 2", "source_tables": ["gymnast", "people"], "error_info": "Predction Execution Error:no such column: Gymnast_ID"}, {"sample_id": 1766, "db_id": "gymnast", "score": 1, "gold_sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T2.Height ASC", "pred_sql": "SELECT p.Name FROM people AS p JOIN gymnast AS g ON p.People_ID = g.Gymnast_ID ORDER BY p.Height ASC", "source_tables": ["gymnast", "people"], "error_info": ""}, {"sample_id": 1767, "db_id": "gymnast", "score": 1, "gold_sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T2.Height ASC", "pred_sql": "SELECT p.Name FROM people AS p JOIN gymnast AS g ON p.People_ID = g.Gymnast_ID ORDER BY p.Height ASC", "source_tables": ["gymnast", "people"], "error_info": ""}, {"sample_id": 1768, "db_id": "gymnast", "score": 0, "gold_sql": "SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID", "pred_sql": "SELECT DISTINCT Hometown FROM people WHERE NOT People_ID IN (SELECT Gymnast_ID FROM gymnast)", "source_tables": ["gymnast", "people"], "error_info": "Result not equal"}, {"sample_id": 1769, "db_id": "gymnast", "score": 0, "gold_sql": "SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID", "pred_sql": "SELECT DISTINCT hometown FROM people WHERE NOT People_ID IN (SELECT Gymnast_ID FROM gymnast)", "source_tables": ["gymnast", "people"], "error_info": "Result not equal"}, {"sample_id": 1770, "db_id": "gymnast", "score": 0, "gold_sql": "SELECT Hometown FROM people WHERE Age > 23 INTERSECT SELECT Hometown FROM people WHERE Age < 20", "pred_sql": "SELECT DISTINCT p.Hometown FROM people AS p WHERE p.Age > 23 OR p.Age < 20", "source_tables": ["people"], "error_info": "Result not equal"}, {"sample_id": 1771, "db_id": "gymnast", "score": 0, "gold_sql": "SELECT Hometown FROM people WHERE Age > 23 INTERSECT SELECT Hometown FROM people WHERE Age < 20", "pred_sql": "SELECT DISTINCT p.Hometown FROM people AS p WHERE p.Age > 23 OR p.Age < 20", "source_tables": ["people"], "error_info": "Result not equal"}, {"sample_id": 1772, "db_id": "gymnast", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT Hometown) FROM people", "pred_sql": "SELECT COUNT(DISTINCT Hometown) AS Distinct_Hometowns FROM people", "source_tables": ["people"], "error_info": ""}, {"sample_id": 1773, "db_id": "gymnast", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT Hometown) FROM people", "pred_sql": "SELECT COUNT(DISTINCT Hometown) AS NumberOfDifferentHometowns FROM people", "source_tables": ["people"], "error_info": ""}, {"sample_id": 1774, "db_id": "gymnast", "score": 1, "gold_sql": "SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T1.Total_Points DESC", "pred_sql": "SELECT p.Age FROM gymnast AS g JOIN people AS p ON g.Gymnast_ID = p.People_ID ORDER BY g.Total_Points DESC", "source_tables": ["gymnast", "people"], "error_info": ""}, {"sample_id": 1775, "db_id": "gymnast", "score": 1, "gold_sql": "SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T1.Total_Points DESC", "pred_sql": "SELECT p.Age FROM gymnast AS g JOIN people AS p ON g.Gymnast_ID = p.People_ID ORDER BY g.Total_Points DESC", "source_tables": ["gymnast", "people"], "error_info": ""}, {"sample_id": 1776, "db_id": "small_bank_1", "score": 1, "gold_sql": "SELECT SUM(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid WHERE T1.name <> 'Brown'", "pred_sql": "SELECT SUM(S.balance) AS total_savings_balance FROM SAVINGS AS S JOIN ACCOUNTS AS A ON S.custid = A.custid WHERE A.name <> 'Brown'", "source_tables": ["accounts", "savings"], "error_info": ""}, {"sample_id": 1777, "db_id": "small_bank_1", "score": 1, "gold_sql": "SELECT SUM(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid WHERE T1.name <> 'Brown'", "pred_sql": "SELECT SUM(S.balance) AS total_savings_balance FROM SAVINGS AS S JOIN ACCOUNTS AS A ON S.custid = A.custid WHERE A.name <> 'Brown'", "source_tables": ["accounts", "savings"], "error_info": ""}, {"sample_id": 1778, "db_id": "small_bank_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM accounts", "pred_sql": "SELECT COUNT(*) AS total_accounts FROM ACCOUNTS", "source_tables": ["accounts"], "error_info": ""}, {"sample_id": 1779, "db_id": "small_bank_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM accounts", "pred_sql": "SELECT COUNT(*) AS account_count FROM ACCOUNTS", "source_tables": ["accounts"], "error_info": ""}, {"sample_id": 1780, "db_id": "small_bank_1", "score": 1, "gold_sql": "SELECT SUM(balance) FROM checking", "pred_sql": "SELECT SUM(balance) AS total_checking_balance FROM CHECKING", "source_tables": ["checking"], "error_info": ""}, {"sample_id": 1781, "db_id": "small_bank_1", "score": 1, "gold_sql": "SELECT SUM(balance) FROM checking", "pred_sql": "SELECT SUM(balance) AS total_checking_balance FROM CHECKING", "source_tables": ["checking"], "error_info": ""}, {"sample_id": 1782, "db_id": "small_bank_1", "score": 1, "gold_sql": "SELECT AVG(balance) FROM checking", "pred_sql": "SELECT AVG(balance) AS average_checking_balance FROM CHECKING", "source_tables": ["checking"], "error_info": ""}, {"sample_id": 1783, "db_id": "small_bank_1", "score": 1, "gold_sql": "SELECT AVG(balance) FROM checking", "pred_sql": "SELECT AVG(balance) AS average_checking_balance FROM CHECKING", "source_tables": ["checking"], "error_info": ""}, {"sample_id": 1784, "db_id": "small_bank_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM savings WHERE balance > (SELECT AVG(balance) FROM savings)", "pred_sql": "SELECT COUNT(*) FROM SAVINGS WHERE balance > (SELECT AVG(balance) FROM SAVINGS)", "source_tables": ["savings"], "error_info": ""}, {"sample_id": 1785, "db_id": "small_bank_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM savings WHERE balance > (SELECT AVG(balance) FROM savings)", "pred_sql": "SELECT COUNT(*) AS account_count FROM SAVINGS WHERE balance > (SELECT AVG(balance) FROM SAVINGS)", "source_tables": ["savings"], "error_info": ""}, {"sample_id": 1786, "db_id": "small_bank_1", "score": 1, "gold_sql": "SELECT T1.custid, T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T2.balance < (SELECT MAX(balance) FROM checking)", "pred_sql": "SELECT A.name, A.custid FROM ACCOUNTS AS A JOIN CHECKING AS C ON A.custid = C.custid WHERE C.balance < (SELECT MAX(balance) FROM CHECKING)", "source_tables": ["accounts", "checking"], "error_info": ""}, {"sample_id": 1787, "db_id": "small_bank_1", "score": 1, "gold_sql": "SELECT T1.custid, T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T2.balance < (SELECT MAX(balance) FROM checking)", "pred_sql": "SELECT A.custid, A.name FROM ACCOUNTS AS A JOIN CHECKING AS C ON A.custid = C.custid WHERE C.balance < (SELECT MAX(balance) FROM CHECKING)", "source_tables": ["accounts", "checking"], "error_info": ""}, {"sample_id": 1788, "db_id": "small_bank_1", "score": 1, "gold_sql": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE '%ee%'", "pred_sql": "SELECT CHECKING.balance FROM CHECKING JOIN ACCOUNTS ON CHECKING.custid = ACCOUNTS.custid WHERE ACCOUNTS.name LIKE '%ee%'", "source_tables": ["accounts", "checking"], "error_info": ""}, {"sample_id": 1789, "db_id": "small_bank_1", "score": 1, "gold_sql": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE '%ee%'", "pred_sql": "SELECT CHECKING.balance FROM CHECKING JOIN ACCOUNTS ON CHECKING.custid = ACCOUNTS.custid WHERE ACCOUNTS.name LIKE '%ee%'", "source_tables": ["accounts", "checking"], "error_info": ""}, {"sample_id": 1790, "db_id": "small_bank_1", "score": 0, "gold_sql": "SELECT T2.balance, T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T1.name = 'Brown'", "pred_sql": "SELECT A.name, S.balance AS savings_balance, C.balance AS checking_balance FROM ACCOUNTS AS A JOIN SAVINGS AS S ON A.custid = S.custid JOIN CHECKING AS C ON A.custid = C.custid WHERE A.name = 'Brown'", "source_tables": ["accounts", "checking", "savings"], "error_info": "Result not equal"}, {"sample_id": 1791, "db_id": "small_bank_1", "score": 0, "gold_sql": "SELECT T2.balance, T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T1.name = 'Brown'", "pred_sql": "SELECT A.name, S.balance AS savings_balance, C.balance AS checking_balance FROM ACCOUNTS AS A JOIN SAVINGS AS S ON A.custid = S.custid JOIN CHECKING AS C ON A.custid = C.custid WHERE A.name LIKE '%Brown%'", "source_tables": ["accounts", "checking", "savings"], "error_info": "Result not equal"}, {"sample_id": 1792, "db_id": "small_bank_1", "score": 1, "gold_sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T2.balance > (SELECT AVG(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid WHERE T2.balance < (SELECT AVG(balance) FROM savings)", "pred_sql": "SELECT A.name FROM ACCOUNTS AS A JOIN CHECKING AS C ON A.custid = C.custid JOIN SAVINGS AS S ON A.custid = S.custid WHERE C.balance > (SELECT AVG(balance) FROM CHECKING) AND S.balance < (SELECT AVG(balance) FROM SAVINGS)", "source_tables": ["accounts", "checking", "savings"], "error_info": ""}, {"sample_id": 1793, "db_id": "small_bank_1", "score": 1, "gold_sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T2.balance > (SELECT AVG(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid WHERE T2.balance < (SELECT AVG(balance) FROM savings)", "pred_sql": "SELECT A.name FROM ACCOUNTS AS A JOIN CHECKING AS C ON A.custid = C.custid JOIN SAVINGS AS S ON A.custid = S.custid WHERE C.balance > (SELECT AVG(balance) FROM CHECKING) AND S.balance < (SELECT AVG(balance) FROM SAVINGS)", "source_tables": ["accounts", "checking", "savings"], "error_info": ""}, {"sample_id": 1794, "db_id": "small_bank_1", "score": 1, "gold_sql": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid WHERE T2.balance > (SELECT AVG(balance) FROM savings))", "pred_sql": "SELECT CHECKING.balance FROM CHECKING JOIN SAVINGS ON CHECKING.custid = SAVINGS.custid WHERE SAVINGS.balance > (SELECT AVG(balance) FROM SAVINGS)", "source_tables": ["accounts", "checking", "savings"], "error_info": ""}, {"sample_id": 1795, "db_id": "small_bank_1", "score": 1, "gold_sql": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid WHERE T2.balance > (SELECT AVG(balance) FROM savings))", "pred_sql": "SELECT CHECKING.balance FROM CHECKING JOIN SAVINGS ON CHECKING.custid = SAVINGS.custid WHERE SAVINGS.balance > (SELECT AVG(balance) FROM SAVINGS)", "source_tables": ["accounts", "checking", "savings"], "error_info": ""}, {"sample_id": 1796, "db_id": "small_bank_1", "score": 1, "gold_sql": "SELECT name FROM accounts ORDER BY name", "pred_sql": "SELECT name FROM ACCOUNTS ORDER BY name ASC", "source_tables": ["accounts"], "error_info": ""}, {"sample_id": 1797, "db_id": "small_bank_1", "score": 1, "gold_sql": "SELECT name FROM accounts ORDER BY name", "pred_sql": "SELECT name FROM ACCOUNTS ORDER BY name ASC", "source_tables": ["accounts"], "error_info": ""}, {"sample_id": 1798, "db_id": "small_bank_1", "score": 1, "gold_sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T2.balance + T3.balance LIMIT 1", "pred_sql": "SELECT A.name FROM ACCOUNTS AS A JOIN SAVINGS AS S ON A.custid = S.custid JOIN CHECKING AS C ON A.custid = C.custid ORDER BY (S.balance + C.balance) ASC LIMIT 1", "source_tables": ["accounts", "checking", "savings"], "error_info": ""}, {"sample_id": 1799, "db_id": "small_bank_1", "score": 1, "gold_sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T2.balance + T3.balance LIMIT 1", "pred_sql": "SELECT A.name FROM ACCOUNTS AS A JOIN SAVINGS AS S ON A.custid = S.custid JOIN CHECKING AS C ON A.custid = C.custid ORDER BY (S.balance + C.balance) ASC LIMIT 1", "source_tables": ["accounts", "checking", "savings"], "error_info": ""}, {"sample_id": 1800, "db_id": "small_bank_1", "score": 1, "gold_sql": "SELECT T1.name, T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T3.balance > (SELECT AVG(balance) FROM savings)", "pred_sql": "SELECT A.name, COALESCE(S.balance, 0) + COALESCE(C.balance, 0) AS total_balance FROM ACCOUNTS AS A LEFT JOIN SAVINGS AS S ON A.custid = S.custid LEFT JOIN CHECKING AS C ON A.custid = C.custid WHERE S.balance > (SELECT AVG(balance) FROM SAVINGS)", "source_tables": ["accounts", "checking", "savings"], "error_info": ""}, {"sample_id": 1801, "db_id": "small_bank_1", "score": 1, "gold_sql": "SELECT T1.name, T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T3.balance > (SELECT AVG(balance) FROM savings)", "pred_sql": "SELECT A.name, SUM(S.balance + C.balance) AS total_balance FROM ACCOUNTS AS A JOIN SAVINGS AS S ON A.custid = S.custid JOIN CHECKING AS C ON A.custid = C.custid WHERE S.balance > (SELECT AVG(balance) FROM SAVINGS) GROUP BY A.name", "source_tables": ["accounts", "checking", "savings"], "error_info": ""}, {"sample_id": 1802, "db_id": "small_bank_1", "score": 1, "gold_sql": "SELECT T1.name, T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T3.balance LIMIT 1", "pred_sql": "SELECT A.name, C.balance FROM ACCOUNTS AS A JOIN SAVINGS AS S ON A.custid = S.custid JOIN CHECKING AS C ON A.custid = C.custid WHERE S.balance = (SELECT MIN(balance) FROM SAVINGS)", "source_tables": ["accounts", "checking", "savings"], "error_info": ""}, {"sample_id": 1803, "db_id": "small_bank_1", "score": 1, "gold_sql": "SELECT T1.name, T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T3.balance LIMIT 1", "pred_sql": "SELECT A.name, C.balance FROM ACCOUNTS AS A JOIN CHECKING AS C ON A.custid = C.custid WHERE A.custid = (SELECT S.custid FROM SAVINGS AS S ORDER BY S.balance ASC LIMIT 1)", "source_tables": ["accounts", "checking", "savings"], "error_info": ""}, {"sample_id": 1804, "db_id": "small_bank_1", "score": 1, "gold_sql": "SELECT COUNT(*), T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid GROUP BY T1.name", "pred_sql": "SELECT A.name, COUNT(C.custid) AS checking_account_count FROM ACCOUNTS AS A LEFT JOIN CHECKING AS C ON A.custid = C.custid GROUP BY A.name", "source_tables": ["accounts", "checking"], "error_info": ""}, {"sample_id": 1805, "db_id": "small_bank_1", "score": 1, "gold_sql": "SELECT COUNT(*), T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid GROUP BY T1.name", "pred_sql": "SELECT A.name, COUNT(C.custid) AS checking_account_count FROM ACCOUNTS AS A LEFT JOIN CHECKING AS C ON A.custid = C.custid GROUP BY A.custid, A.name", "source_tables": ["accounts", "checking"], "error_info": ""}, {"sample_id": 1806, "db_id": "small_bank_1", "score": 1, "gold_sql": "SELECT SUM(T2.balance), T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid GROUP BY T1.name", "pred_sql": "SELECT A.name, SUM(S.balance) AS total_savings_balance FROM ACCOUNTS AS A JOIN SAVINGS AS S ON A.custid = S.custid GROUP BY A.name", "source_tables": ["accounts", "savings"], "error_info": ""}, {"sample_id": 1807, "db_id": "small_bank_1", "score": 1, "gold_sql": "SELECT SUM(T2.balance), T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid GROUP BY T1.name", "pred_sql": "SELECT A.name, SUM(S.balance) AS total_savings_balance FROM ACCOUNTS AS A JOIN SAVINGS AS S ON A.custid = S.custid GROUP BY A.name", "source_tables": ["accounts", "savings"], "error_info": ""}, {"sample_id": 1808, "db_id": "small_bank_1", "score": 1, "gold_sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T2.balance < (SELECT AVG(balance) FROM checking)", "pred_sql": "SELECT A.name FROM ACCOUNTS AS A JOIN CHECKING AS C ON A.custid = C.custid WHERE C.balance < (SELECT AVG(C2.balance) FROM CHECKING AS C2)", "source_tables": ["accounts", "checking"], "error_info": ""}, {"sample_id": 1809, "db_id": "small_bank_1", "score": 1, "gold_sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T2.balance < (SELECT AVG(balance) FROM checking)", "pred_sql": "SELECT A.name FROM ACCOUNTS AS A JOIN CHECKING AS C ON A.custid = C.custid WHERE C.balance < (SELECT AVG(C2.balance) FROM CHECKING AS C2)", "source_tables": ["accounts", "checking"], "error_info": ""}, {"sample_id": 1810, "db_id": "small_bank_1", "score": 0, "gold_sql": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T2.balance DESC LIMIT 1", "pred_sql": "SELECT S.balance FROM SAVINGS AS S JOIN CHECKING AS C ON S.custid = C.custid WHERE C.balance = (SELECT MAX(balance) FROM CHECKING)", "source_tables": ["accounts", "checking", "savings"], "error_info": "Result not equal"}, {"sample_id": 1811, "db_id": "small_bank_1", "score": 0, "gold_sql": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T2.balance DESC LIMIT 1", "pred_sql": "SELECT S.balance FROM SAVINGS AS S JOIN CHECKING AS C ON S.custid = C.custid WHERE C.balance = (SELECT MAX(balance) FROM CHECKING)", "source_tables": ["accounts", "checking", "savings"], "error_info": "Result not equal"}, {"sample_id": 1812, "db_id": "small_bank_1", "score": 0, "gold_sql": "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid = T2.custid ORDER BY T1.balance + T2.balance", "pred_sql": "SELECT A.custid, A.name, (COALESCE(S.balance, 0) + COALESCE(C.balance, 0)) AS total_balance FROM ACCOUNTS AS A LEFT JOIN SAVINGS AS S ON A.custid = S.custid LEFT JOIN CHECKING AS C ON A.custid = C.custid ORDER BY total_balance ASC", "source_tables": ["savings", "checking"], "error_info": "Result not equal"}, {"sample_id": 1813, "db_id": "small_bank_1", "score": 0, "gold_sql": "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid = T2.custid ORDER BY T1.balance + T2.balance", "pred_sql": "SELECT A.name, (COALESCE(S.balance, 0) + COALESCE(C.balance, 0)) AS total_balance FROM ACCOUNTS AS A LEFT JOIN SAVINGS AS S ON A.custid = S.custid LEFT JOIN CHECKING AS C ON A.custid = C.custid ORDER BY total_balance DESC", "source_tables": ["savings", "checking"], "error_info": "Result not equal"}, {"sample_id": 1814, "db_id": "small_bank_1", "score": 1, "gold_sql": "SELECT T2.balance, T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T3.balance LIMIT 1", "pred_sql": "SELECT A.name, C.balance FROM ACCOUNTS AS A JOIN SAVINGS AS S ON A.custid = S.custid JOIN CHECKING AS C ON A.custid = C.custid WHERE S.balance = (SELECT MIN(balance) FROM SAVINGS)", "source_tables": ["accounts", "checking", "savings"], "error_info": ""}, {"sample_id": 1815, "db_id": "small_bank_1", "score": 1, "gold_sql": "SELECT T2.balance, T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T3.balance LIMIT 1", "pred_sql": "SELECT A.name, C.balance FROM ACCOUNTS AS A JOIN SAVINGS AS S ON A.custid = S.custid JOIN CHECKING AS C ON A.custid = C.custid WHERE S.balance = (SELECT MIN(balance) FROM SAVINGS)", "source_tables": ["accounts", "checking", "savings"], "error_info": ""}, {"sample_id": 1816, "db_id": "small_bank_1", "score": 1, "gold_sql": "SELECT T2.balance, T3.balance, T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid", "pred_sql": "SELECT A.name, C.balance AS checking_balance, S.balance AS savings_balance FROM ACCOUNTS AS A JOIN CHECKING AS C ON A.custid = C.custid JOIN SAVINGS AS S ON A.custid = S.custid", "source_tables": ["accounts", "checking", "savings"], "error_info": ""}, {"sample_id": 1817, "db_id": "small_bank_1", "score": 1, "gold_sql": "SELECT T2.balance, T3.balance, T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid", "pred_sql": "SELECT A.name, C.balance AS checking_balance, S.balance AS savings_balance FROM ACCOUNTS AS A JOIN CHECKING AS C ON A.custid = C.custid JOIN SAVINGS AS S ON A.custid = S.custid", "source_tables": ["accounts", "checking", "savings"], "error_info": ""}, {"sample_id": 1818, "db_id": "small_bank_1", "score": 1, "gold_sql": "SELECT T2.balance, T3.balance, T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T2.balance + T3.balance DESC", "pred_sql": "SELECT A.name, C.balance AS checking_balance, S.balance AS savings_balance FROM ACCOUNTS AS A JOIN CHECKING AS C ON A.custid = C.custid JOIN SAVINGS AS S ON A.custid = S.custid ORDER BY (C.balance + S.balance) DESC", "source_tables": ["accounts", "checking", "savings"], "error_info": ""}, {"sample_id": 1819, "db_id": "small_bank_1", "score": 1, "gold_sql": "SELECT T2.balance, T3.balance, T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T2.balance + T3.balance DESC", "pred_sql": "SELECT A.name, C.balance AS checking_balance, S.balance AS savings_balance FROM ACCOUNTS AS A JOIN CHECKING AS C ON A.custid = C.custid JOIN SAVINGS AS S ON A.custid = S.custid ORDER BY (C.balance + S.balance) DESC", "source_tables": ["accounts", "checking", "savings"], "error_info": ""}, {"sample_id": 1820, "db_id": "small_bank_1", "score": 1, "gold_sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T2.balance > T3.balance", "pred_sql": "SELECT A.name FROM ACCOUNTS AS A JOIN CHECKING AS C ON A.custid = C.custid JOIN SAVINGS AS S ON A.custid = S.custid WHERE C.balance > S.balance", "source_tables": ["accounts", "checking", "savings"], "error_info": ""}, {"sample_id": 1821, "db_id": "small_bank_1", "score": 1, "gold_sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T2.balance > T3.balance", "pred_sql": "SELECT A.name FROM ACCOUNTS AS A JOIN CHECKING AS C ON A.custid = C.custid JOIN SAVINGS AS S ON A.custid = S.custid WHERE C.balance > S.balance", "source_tables": ["accounts", "checking", "savings"], "error_info": ""}, {"sample_id": 1822, "db_id": "small_bank_1", "score": 1, "gold_sql": "SELECT T1.name, T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T3.balance < T2.balance", "pred_sql": "SELECT A.name, (S.balance + C.balance) AS total_balance FROM ACCOUNTS AS A JOIN SAVINGS AS S ON A.custid = S.custid JOIN CHECKING AS C ON A.custid = C.custid WHERE S.balance < C.balance", "source_tables": ["accounts", "checking", "savings"], "error_info": ""}, {"sample_id": 1823, "db_id": "small_bank_1", "score": 1, "gold_sql": "SELECT T1.name, T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T3.balance < T2.balance", "pred_sql": "SELECT A.name, (S.balance + C.balance) AS total_balance FROM ACCOUNTS AS A JOIN SAVINGS AS S ON A.custid = S.custid JOIN CHECKING AS C ON A.custid = C.custid WHERE S.balance < C.balance", "source_tables": ["accounts", "checking", "savings"], "error_info": ""}, {"sample_id": 1824, "db_id": "small_bank_1", "score": 1, "gold_sql": "SELECT T1.name, T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid ORDER BY T2.balance DESC LIMIT 3", "pred_sql": "SELECT A.name, S.balance FROM ACCOUNTS AS A JOIN SAVINGS AS S ON A.custid = S.custid ORDER BY S.balance DESC LIMIT 3", "source_tables": ["accounts", "savings"], "error_info": ""}, {"sample_id": 1825, "db_id": "small_bank_1", "score": 1, "gold_sql": "SELECT T1.name, T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid ORDER BY T2.balance DESC LIMIT 3", "pred_sql": "SELECT A.name, S.balance FROM ACCOUNTS AS A JOIN SAVINGS AS S ON A.custid = S.custid ORDER BY S.balance DESC LIMIT 3", "source_tables": ["accounts", "savings"], "error_info": ""}, {"sample_id": 1826, "db_id": "browser_web", "score": 1, "gold_sql": "SELECT COUNT(*) FROM browser WHERE market_share >= 5", "pred_sql": "SELECT COUNT(*) AS browser_count FROM browser WHERE market_share >= 5", "source_tables": ["browser"], "error_info": ""}, {"sample_id": 1827, "db_id": "browser_web", "score": 1, "gold_sql": "SELECT name FROM browser ORDER BY market_share DESC", "pred_sql": "SELECT name FROM browser ORDER BY market_share DESC", "source_tables": ["browser"], "error_info": ""}, {"sample_id": 1828, "db_id": "browser_web", "score": 1, "gold_sql": "SELECT id, name, market_share FROM browser", "pred_sql": "SELECT id, name, market_share FROM browser", "source_tables": ["browser"], "error_info": ""}, {"sample_id": 1829, "db_id": "browser_web", "score": 1, "gold_sql": "SELECT MAX(market_share), MIN(market_share), AVG(market_share) FROM browser", "pred_sql": "SELECT MAX(market_share) AS max_market_share, MIN(market_share) AS min_market_share, AVG(market_share) AS avg_market_share FROM browser", "source_tables": ["browser"], "error_info": ""}, {"sample_id": 1830, "db_id": "browser_web", "score": 1, "gold_sql": "SELECT id, market_share FROM browser WHERE name = 'Safari'", "pred_sql": "SELECT id, market_share FROM browser WHERE name = 'Safari'", "source_tables": ["browser"], "error_info": ""}, {"sample_id": 1831, "db_id": "browser_web", "score": 0, "gold_sql": "SELECT name, operating_system FROM web_client_accelerator WHERE CONNECTION <> 'Broadband'", "pred_sql": "SELECT name, Operating_system FROM Web_client_accelerator WHERE NOT id IN (SELECT accelerator_id FROM accelerator_compatible_browser WHERE browser_id IN (SELECT id FROM browser WHERE market_share = 100))", "source_tables": ["web_client_accelerator"], "error_info": "Result not equal"}, {"sample_id": 1832, "db_id": "browser_web", "score": 1, "gold_sql": "SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id = T3.id WHERE T3.name = 'CProxy' AND T2.compatible_since_year > 1998", "pred_sql": "SELECT b.name FROM browser AS b JOIN accelerator_compatible_browser AS acb ON b.id = acb.browser_id JOIN Web_client_accelerator AS wca ON acb.accelerator_id = wca.id WHERE wca.name = 'CProxy' AND acb.compatible_since_year > '1998'", "source_tables": ["browser", "accelerator_compatible_browser", "web_client_accelerator"], "error_info": ""}, {"sample_id": 1833, "db_id": "browser_web", "score": 1, "gold_sql": "SELECT T1.id, T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id GROUP BY T1.id HAVING COUNT(*) >= 2", "pred_sql": "SELECT wca.id, wca.name FROM Web_client_accelerator AS wca JOIN accelerator_compatible_browser AS acb ON wca.id = acb.accelerator_id GROUP BY wca.id, wca.name HAVING COUNT(acb.browser_id) >= 2", "source_tables": ["accelerator_compatible_browser", "web_client_accelerator"], "error_info": ""}, {"sample_id": 1834, "db_id": "browser_web", "score": 1, "gold_sql": "SELECT T1.id, T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT b.id, b.name FROM browser AS b JOIN accelerator_compatible_browser AS acb ON b.id = acb.browser_id GROUP BY b.id, b.name ORDER BY COUNT(acb.accelerator_id) DESC LIMIT 1", "source_tables": ["browser", "accelerator_compatible_browser"], "error_info": ""}, {"sample_id": 1835, "db_id": "browser_web", "score": 1, "gold_sql": "SELECT T1.compatible_since_year FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id WHERE T3.name = 'CACHEbox' AND T2.name = 'Internet Explorer'", "pred_sql": "SELECT compatible_since_year FROM accelerator_compatible_browser AS acb JOIN Web_client_accelerator AS wca ON acb.accelerator_id = wca.id JOIN browser AS b ON acb.browser_id = b.id WHERE wca.name = 'CACHEbox' AND b.name = 'Internet Explorer'", "source_tables": ["browser", "accelerator_compatible_browser", "web_client_accelerator"], "error_info": ""}, {"sample_id": 1836, "db_id": "browser_web", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT client) FROM web_client_accelerator", "pred_sql": "SELECT COUNT(DISTINCT Client) AS different_clients FROM Web_client_accelerator", "source_tables": ["web_client_accelerator"], "error_info": ""}, {"sample_id": 1837, "db_id": "browser_web", "score": 1, "gold_sql": "SELECT COUNT(*) FROM web_client_accelerator WHERE NOT id IN (SELECT accelerator_id FROM accelerator_compatible_browser)", "pred_sql": "SELECT COUNT(*) AS incompatible_accelerators_count FROM Web_client_accelerator WHERE NOT id IN (SELECT accelerator_id FROM accelerator_compatible_browser)", "source_tables": ["accelerator_compatible_browser", "web_client_accelerator"], "error_info": ""}, {"sample_id": 1838, "db_id": "browser_web", "score": 1, "gold_sql": "SELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T3.market_share > 15", "pred_sql": "SELECT DISTINCT wca.name FROM Web_client_accelerator AS wca JOIN accelerator_compatible_browser AS acb ON wca.id = acb.accelerator_id JOIN browser AS b ON acb.browser_id = b.id WHERE b.market_share > 15", "source_tables": ["browser", "accelerator_compatible_browser", "web_client_accelerator"], "error_info": ""}, {"sample_id": 1839, "db_id": "browser_web", "score": 1, "gold_sql": "SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T1.name = 'CACHEbox' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T1.name = 'Fasterfox'", "pred_sql": "SELECT b.name FROM browser AS b JOIN accelerator_compatible_browser AS acb1 ON b.id = acb1.browser_id JOIN Web_client_accelerator AS wca1 ON acb1.accelerator_id = wca1.id JOIN accelerator_compatible_browser AS acb2 ON b.id = acb2.browser_id JOIN Web_client_accelerator AS wca2 ON acb2.accelerator_id = wca2.id WHERE wca1.name = 'CACHEbox' AND wca2.name = 'Fasterfox'", "source_tables": ["browser", "accelerator_compatible_browser", "web_client_accelerator"], "error_info": ""}, {"sample_id": 1840, "db_id": "browser_web", "score": 1, "gold_sql": "SELECT name, operating_system FROM web_client_accelerator EXCEPT SELECT T1.name, T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T3.name = 'Opera'", "pred_sql": "SELECT wca.name, wca.Operating_system FROM Web_client_accelerator AS wca WHERE NOT wca.id IN (SELECT acb.accelerator_id FROM accelerator_compatible_browser AS acb JOIN browser AS b ON acb.browser_id = b.id WHERE b.name = 'Opera')", "source_tables": ["browser", "accelerator_compatible_browser", "web_client_accelerator"], "error_info": ""}, {"sample_id": 1841, "db_id": "browser_web", "score": 1, "gold_sql": "SELECT name FROM web_client_accelerator WHERE name LIKE '%Opera%'", "pred_sql": "SELECT name FROM Web_client_accelerator WHERE name LIKE '%Opera%'", "source_tables": ["web_client_accelerator"], "error_info": ""}, {"sample_id": 1842, "db_id": "browser_web", "score": 1, "gold_sql": "SELECT Operating_system, COUNT(*) FROM web_client_accelerator GROUP BY Operating_system", "pred_sql": "SELECT Operating_system, COUNT(*) AS number_of_accelerators FROM Web_client_accelerator GROUP BY Operating_system", "source_tables": ["web_client_accelerator"], "error_info": ""}, {"sample_id": 1843, "db_id": "browser_web", "score": 0, "gold_sql": "SELECT T2.name, T3.name FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id ORDER BY T1.compatible_since_year DESC", "pred_sql": "SELECT b.name AS browser_name, wca.name AS accelerator_name, acb.compatible_since_year FROM accelerator_compatible_browser AS acb JOIN browser AS b ON acb.browser_id = b.id JOIN Web_client_accelerator AS wca ON acb.accelerator_id = wca.id ORDER BY acb.compatible_since_year DESC", "source_tables": ["browser", "accelerator_compatible_browser", "web_client_accelerator"], "error_info": "Result not equal"}, {"sample_id": 1844, "db_id": "wrestler", "score": 1, "gold_sql": "SELECT COUNT(*) FROM wrestler", "pred_sql": "SELECT COUNT(*) AS total_wrestlers FROM wrestler", "source_tables": ["wrestler"], "error_info": ""}, {"sample_id": 1845, "db_id": "wrestler", "score": 1, "gold_sql": "SELECT COUNT(*) FROM wrestler", "pred_sql": "SELECT COUNT(*) AS NumberOfWrestlers FROM wrestler", "source_tables": ["wrestler"], "error_info": ""}, {"sample_id": 1846, "db_id": "wrestler", "score": 1, "gold_sql": "SELECT Name FROM wrestler ORDER BY Days_held DESC", "pred_sql": "SELECT Name FROM wrestler ORDER BY Days_held DESC", "source_tables": ["wrestler"], "error_info": ""}, {"sample_id": 1847, "db_id": "wrestler", "score": 1, "gold_sql": "SELECT Name FROM wrestler ORDER BY Days_held DESC", "pred_sql": "SELECT Name FROM wrestler ORDER BY Days_held DESC", "source_tables": ["wrestler"], "error_info": ""}, {"sample_id": 1848, "db_id": "wrestler", "score": 1, "gold_sql": "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1", "pred_sql": "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1", "source_tables": ["wrestler"], "error_info": ""}, {"sample_id": 1849, "db_id": "wrestler", "score": 1, "gold_sql": "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1", "pred_sql": "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1", "source_tables": ["wrestler"], "error_info": ""}, {"sample_id": 1850, "db_id": "wrestler", "score": 1, "gold_sql": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION <> 'Tokyo , Japan'", "pred_sql": "SELECT DISTINCT Reign FROM wrestler WHERE Location <> 'Tokyo,Japan'", "source_tables": ["wrestler"], "error_info": ""}, {"sample_id": 1851, "db_id": "wrestler", "score": 1, "gold_sql": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION <> 'Tokyo , Japan'", "pred_sql": "SELECT DISTINCT Reign FROM wrestler WHERE Location <> 'Tokyo, Japan'", "source_tables": ["wrestler"], "error_info": ""}, {"sample_id": 1852, "db_id": "wrestler", "score": 1, "gold_sql": "SELECT Name, LOCATION FROM wrestler", "pred_sql": "SELECT Name, Location FROM wrestler", "source_tables": ["wrestler"], "error_info": ""}, {"sample_id": 1853, "db_id": "wrestler", "score": 1, "gold_sql": "SELECT Name, LOCATION FROM wrestler", "pred_sql": "SELECT Name, Location FROM wrestler", "source_tables": ["wrestler"], "error_info": ""}, {"sample_id": 1854, "db_id": "wrestler", "score": 1, "gold_sql": "SELECT Elimination_Move FROM Elimination WHERE Team = 'Team Orton'", "pred_sql": "SELECT e.Elimination_Move FROM Elimination AS e JOIN wrestler AS w ON e.Wrestler_ID = w.Wrestler_ID WHERE e.Team = (SELECT Team FROM Elimination WHERE Team = 'Team Orton')", "source_tables": ["elimination"], "error_info": ""}, {"sample_id": 1855, "db_id": "wrestler", "score": 0, "gold_sql": "SELECT Elimination_Move FROM Elimination WHERE Team = 'Team Orton'", "pred_sql": "SELECT e.Elimination_Move FROM Elimination AS e JOIN wrestler AS w ON e.Wrestler_ID = w.Wrestler_ID WHERE e.Team = (SELECT Team FROM Elimination WHERE Wrestler_ID = (SELECT Wrestler_ID FROM wrestler WHERE Name = 'Orton'))", "source_tables": ["elimination"], "error_info": "Result not equal"}, {"sample_id": 1856, "db_id": "wrestler", "score": 1, "gold_sql": "SELECT T2.Name, T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID", "pred_sql": "SELECT wrestler.Name, Elimination.Elimination_Move FROM wrestler JOIN Elimination ON wrestler.Wrestler_ID = Elimination.Wrestler_ID", "source_tables": ["elimination", "wrestler"], "error_info": ""}, {"sample_id": 1857, "db_id": "wrestler", "score": 1, "gold_sql": "SELECT T2.Name, T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID", "pred_sql": "SELECT wrestler.Name, Elimination.Elimination_Move FROM wrestler JOIN Elimination ON wrestler.Wrestler_ID = Elimination.Wrestler_ID", "source_tables": ["elimination", "wrestler"], "error_info": ""}, {"sample_id": 1858, "db_id": "wrestler", "score": 1, "gold_sql": "SELECT T2.Name, T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID ORDER BY T2.Days_held DESC", "pred_sql": "SELECT w.Name, e.Team FROM wrestler AS w JOIN Elimination AS e ON w.Wrestler_ID = e.Wrestler_ID ORDER BY w.Days_held DESC", "source_tables": ["elimination", "wrestler"], "error_info": ""}, {"sample_id": 1859, "db_id": "wrestler", "score": 1, "gold_sql": "SELECT T2.Name, T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID ORDER BY T2.Days_held DESC", "pred_sql": "SELECT w.Name, e.Team FROM wrestler AS w JOIN Elimination AS e ON w.Wrestler_ID = e.Wrestler_ID ORDER BY w.Days_held DESC", "source_tables": ["elimination", "wrestler"], "error_info": ""}, {"sample_id": 1860, "db_id": "wrestler", "score": 0, "gold_sql": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1", "pred_sql": "SELECT e.Time FROM Elimination AS e JOIN wrestler AS w ON e.Wrestler_ID = w.Wrestler_ID WHERE w.Days_held = (SELECT MAX(Days_held) FROM wrestler)", "source_tables": ["elimination", "wrestler"], "error_info": "Result not equal"}, {"sample_id": 1861, "db_id": "wrestler", "score": 0, "gold_sql": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1", "pred_sql": "SELECT e.Time FROM Elimination AS e JOIN wrestler AS w ON e.Wrestler_ID = w.Wrestler_ID WHERE w.Days_held = (SELECT MAX(Days_held) FROM wrestler)", "source_tables": ["elimination", "wrestler"], "error_info": "Result not equal"}, {"sample_id": 1862, "db_id": "wrestler", "score": 1, "gold_sql": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T2.Days_held > 50", "pred_sql": "SELECT e.Time FROM Elimination AS e JOIN wrestler AS w ON e.Wrestler_ID = w.Wrestler_ID WHERE w.Days_held > '50'", "source_tables": ["elimination", "wrestler"], "error_info": ""}, {"sample_id": 1863, "db_id": "wrestler", "score": 1, "gold_sql": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T2.Days_held > 50", "pred_sql": "SELECT e.Time FROM Elimination AS e JOIN wrestler AS w ON e.Wrestler_ID = w.Wrestler_ID WHERE w.Days_held > '50'", "source_tables": ["elimination", "wrestler"], "error_info": ""}, {"sample_id": 1864, "db_id": "wrestler", "score": 1, "gold_sql": "SELECT Team, COUNT(*) FROM elimination GROUP BY Team", "pred_sql": "SELECT Team, COUNT(*) AS Number_of_Eliminations FROM Elimination GROUP BY Team", "source_tables": ["elimination"], "error_info": ""}, {"sample_id": 1865, "db_id": "wrestler", "score": 1, "gold_sql": "SELECT Team, COUNT(*) FROM elimination GROUP BY Team", "pred_sql": "SELECT Team, COUNT(*) AS Total_Eliminations FROM Elimination GROUP BY Team", "source_tables": ["elimination"], "error_info": ""}, {"sample_id": 1866, "db_id": "wrestler", "score": 0, "gold_sql": "SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*) > 3", "pred_sql": "SELECT Team, COUNT(*) AS Elimination_Count FROM Elimination GROUP BY Team HAVING COUNT(*) > 3", "source_tables": ["elimination"], "error_info": "Result not equal"}, {"sample_id": 1867, "db_id": "wrestler", "score": 0, "gold_sql": "SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*) > 3", "pred_sql": "SELECT Team, COUNT(*) AS Elimination_Count FROM Elimination GROUP BY Team HAVING COUNT(*) > 3", "source_tables": ["elimination"], "error_info": "Result not equal"}, {"sample_id": 1868, "db_id": "wrestler", "score": 1, "gold_sql": "SELECT Reign, Days_held FROM wrestler", "pred_sql": "SELECT Reign, Days_held FROM wrestler", "source_tables": ["wrestler"], "error_info": ""}, {"sample_id": 1869, "db_id": "wrestler", "score": 1, "gold_sql": "SELECT Reign, Days_held FROM wrestler", "pred_sql": "SELECT Reign, Days_held FROM wrestler", "source_tables": ["wrestler"], "error_info": ""}, {"sample_id": 1870, "db_id": "wrestler", "score": 1, "gold_sql": "SELECT Name FROM wrestler WHERE Days_held < 100", "pred_sql": "SELECT Name FROM wrestler WHERE Days_held < '100'", "source_tables": ["wrestler"], "error_info": ""}, {"sample_id": 1871, "db_id": "wrestler", "score": 1, "gold_sql": "SELECT Name FROM wrestler WHERE Days_held < 100", "pred_sql": "SELECT Name FROM wrestler WHERE Days_held < '100'", "source_tables": ["wrestler"], "error_info": ""}, {"sample_id": 1872, "db_id": "wrestler", "score": 0, "gold_sql": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Reign, COUNT(*) AS Reign_Count FROM wrestler GROUP BY Reign ORDER BY Reign_Count DESC", "source_tables": ["wrestler"], "error_info": "Result not equal"}, {"sample_id": 1873, "db_id": "wrestler", "score": 0, "gold_sql": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Reign, COUNT(*) AS Reign_Count FROM wrestler GROUP BY Reign ORDER BY Reign_Count DESC LIMIT 1", "source_tables": ["wrestler"], "error_info": "Result not equal"}, {"sample_id": 1874, "db_id": "wrestler", "score": 1, "gold_sql": "SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*) > 2", "pred_sql": "SELECT Location FROM wrestler GROUP BY Location HAVING COUNT(Wrestler_ID) > 2", "source_tables": ["wrestler"], "error_info": ""}, {"sample_id": 1875, "db_id": "wrestler", "score": 1, "gold_sql": "SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*) > 2", "pred_sql": "SELECT Location FROM wrestler GROUP BY Location HAVING COUNT(DISTINCT Wrestler_ID) > 2", "source_tables": ["wrestler"], "error_info": ""}, {"sample_id": 1876, "db_id": "wrestler", "score": 1, "gold_sql": "SELECT Name FROM wrestler WHERE NOT Wrestler_ID IN (SELECT Wrestler_ID FROM elimination)", "pred_sql": "SELECT Name FROM wrestler WHERE NOT Wrestler_ID IN (SELECT Wrestler_ID FROM Elimination)", "source_tables": ["elimination", "wrestler"], "error_info": ""}, {"sample_id": 1877, "db_id": "wrestler", "score": 1, "gold_sql": "SELECT Name FROM wrestler WHERE NOT Wrestler_ID IN (SELECT Wrestler_ID FROM elimination)", "pred_sql": "SELECT Name FROM wrestler WHERE NOT Wrestler_ID IN (SELECT Wrestler_ID FROM Elimination)", "source_tables": ["elimination", "wrestler"], "error_info": ""}, {"sample_id": 1878, "db_id": "wrestler", "score": 0, "gold_sql": "SELECT Team FROM Elimination WHERE Eliminated_By = 'Orton' INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By = 'Benjamin'", "pred_sql": "SELECT DISTINCT e1.Team FROM Elimination AS e1 JOIN Elimination AS e2 ON e1.Team = e2.Team WHERE e1.Eliminated_By = (SELECT Wrestler_ID FROM wrestler WHERE Name = 'Orton') AND e2.Eliminated_By = (SELECT Wrestler_ID FROM wrestler WHERE Name = 'Benjamin')", "source_tables": ["elimination"], "error_info": "Result not equal"}, {"sample_id": 1879, "db_id": "wrestler", "score": 0, "gold_sql": "SELECT Team FROM Elimination WHERE Eliminated_By = 'Orton' INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By = 'Benjamin'", "pred_sql": "SELECT DISTINCT e1.Team FROM Elimination AS e1 JOIN Elimination AS e2 ON e1.Team = e2.Team WHERE e1.Eliminated_By = (SELECT Wrestler_ID FROM wrestler WHERE Name = 'Orton') AND e2.Eliminated_By = (SELECT Wrestler_ID FROM wrestler WHERE Name = 'Benjamin')", "source_tables": ["elimination"], "error_info": "Result not equal"}, {"sample_id": 1880, "db_id": "wrestler", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT team) FROM elimination", "pred_sql": "SELECT COUNT(DISTINCT Team) AS Distinct_Teams_Eliminated FROM Elimination", "source_tables": ["elimination"], "error_info": ""}, {"sample_id": 1881, "db_id": "wrestler", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT team) FROM elimination", "pred_sql": "SELECT COUNT(DISTINCT Team) AS Different_Teams FROM Elimination", "source_tables": ["elimination"], "error_info": ""}, {"sample_id": 1882, "db_id": "wrestler", "score": 0, "gold_sql": "SELECT TIME FROM elimination WHERE Eliminated_By = 'Punk' OR Eliminated_By = 'Orton'", "pred_sql": "SELECT e.Time FROM Elimination AS e JOIN wrestler AS w ON e.Wrestler_ID = w.Wrestler_ID WHERE w.Name IN ('Punk', 'Orton')", "source_tables": ["elimination"], "error_info": "Result not equal"}, {"sample_id": 1883, "db_id": "wrestler", "score": 0, "gold_sql": "SELECT TIME FROM elimination WHERE Eliminated_By = 'Punk' OR Eliminated_By = 'Orton'", "pred_sql": "SELECT Time FROM Elimination WHERE Eliminated_By IN (SELECT Wrestler_ID FROM wrestler WHERE Name IN ('Punk', 'Orton'))", "source_tables": ["elimination"], "error_info": "Result not equal"}, {"sample_id": 1884, "db_id": "school_finance", "score": 1, "gold_sql": "SELECT COUNT(*) FROM school", "pred_sql": "SELECT COUNT(*) AS total_schools FROM School", "source_tables": ["school"], "error_info": ""}, {"sample_id": 1885, "db_id": "school_finance", "score": 1, "gold_sql": "SELECT COUNT(*) FROM school", "pred_sql": "SELECT COUNT(*) AS number_of_schools FROM School", "source_tables": ["school"], "error_info": ""}, {"sample_id": 1886, "db_id": "school_finance", "score": 1, "gold_sql": "SELECT school_name FROM school ORDER BY school_name", "pred_sql": "SELECT School_name FROM School ORDER BY School_name ASC", "source_tables": ["school"], "error_info": ""}, {"sample_id": 1887, "db_id": "school_finance", "score": 1, "gold_sql": "SELECT school_name, LOCATION, mascot FROM school", "pred_sql": "SELECT School_name, Location, Mascot FROM School", "source_tables": ["school"], "error_info": ""}, {"sample_id": 1888, "db_id": "school_finance", "score": 1, "gold_sql": "SELECT SUM(enrollment), AVG(enrollment) FROM school", "pred_sql": "SELECT SUM(Enrollment) AS total_enrollment, AVG(Enrollment) AS average_enrollment FROM School", "source_tables": ["school"], "error_info": ""}, {"sample_id": 1889, "db_id": "school_finance", "score": 1, "gold_sql": "SELECT mascot FROM school WHERE enrollment > (SELECT AVG(enrollment) FROM school)", "pred_sql": "SELECT Mascot FROM School WHERE Enrollment > (SELECT AVG(Enrollment) FROM School)", "source_tables": ["school"], "error_info": ""}, {"sample_id": 1890, "db_id": "school_finance", "score": 1, "gold_sql": "SELECT school_name FROM school ORDER BY enrollment LIMIT 1", "pred_sql": "SELECT School_name FROM School ORDER BY Enrollment ASC LIMIT 1", "source_tables": ["school"], "error_info": ""}, {"sample_id": 1891, "db_id": "school_finance", "score": 1, "gold_sql": "SELECT AVG(enrollment), MAX(enrollment), MIN(enrollment) FROM school", "pred_sql": "SELECT AVG(Enrollment) AS average_enrollment, MAX(Enrollment) AS maximum_enrollment, MIN(Enrollment) AS minimum_enrollment FROM School", "source_tables": ["school"], "error_info": ""}, {"sample_id": 1892, "db_id": "school_finance", "score": 1, "gold_sql": "SELECT county, COUNT(*), SUM(enrollment) FROM school GROUP BY county", "pred_sql": "SELECT County, COUNT(School_id) AS Number_of_Schools, SUM(Enrollment) AS Total_Enrollment FROM School GROUP BY County", "source_tables": ["school"], "error_info": ""}, {"sample_id": 1893, "db_id": "school_finance", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT T1.donator_name) FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T2.school_name = 'Glenn'", "pred_sql": "SELECT COUNT(DISTINCT e.donator_name) AS donor_count FROM endowment AS e JOIN School AS s ON e.School_id = s.School_id WHERE s.School_name = 'Glenn'", "source_tables": ["endowment", "school"], "error_info": ""}, {"sample_id": 1894, "db_id": "school_finance", "score": 1, "gold_sql": "SELECT donator_name, SUM(amount) FROM endowment GROUP BY donator_name ORDER BY SUM(amount) DESC", "pred_sql": "SELECT donator_name, amount FROM endowment ORDER BY amount DESC", "source_tables": ["endowment"], "error_info": ""}, {"sample_id": 1895, "db_id": "school_finance", "score": 1, "gold_sql": "SELECT school_name FROM school WHERE NOT school_id IN (SELECT school_id FROM endowment)", "pred_sql": "SELECT School_name FROM School WHERE NOT School_id IN (SELECT School_id FROM endowment)", "source_tables": ["endowment", "school"], "error_info": ""}, {"sample_id": 1896, "db_id": "school_finance", "score": 0, "gold_sql": "SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T1.school_id HAVING SUM(T1.amount) <= 10", "pred_sql": "SELECT School_name FROM School JOIN endowment ON School.School_id = endowment.School_id WHERE amount <= 10", "source_tables": ["endowment", "school"], "error_info": "Result not equal"}, {"sample_id": 1897, "db_id": "school_finance", "score": 1, "gold_sql": "SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T2.school_name = 'Glenn' INTERSECT SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T2.school_name = 'Triton'", "pred_sql": "SELECT DISTINCT e1.donator_name FROM endowment AS e1 JOIN School AS s1 ON e1.School_id = s1.School_id WHERE s1.School_name = 'Glenn' INTERSECT SELECT DISTINCT e2.donator_name FROM endowment AS e2 JOIN School AS s2 ON e2.School_id = s2.School_id WHERE s2.School_name = 'Triton'", "source_tables": ["endowment", "school"], "error_info": ""}, {"sample_id": 1898, "db_id": "school_finance", "score": 1, "gold_sql": "SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount < 9", "pred_sql": "SELECT donator_name FROM endowment WHERE amount >= 9", "source_tables": ["endowment"], "error_info": ""}, {"sample_id": 1899, "db_id": "school_finance", "score": 1, "gold_sql": "SELECT amount, donator_name FROM endowment ORDER BY amount DESC LIMIT 1", "pred_sql": "SELECT donator_name, amount FROM endowment WHERE amount = (SELECT MAX(amount) FROM endowment)", "source_tables": ["endowment"], "error_info": ""}, {"sample_id": 1900, "db_id": "school_finance", "score": 1, "gold_sql": "SELECT COUNT(*) FROM budget WHERE budgeted > 3000 AND YEAR <= 2001", "pred_sql": "SELECT COUNT(*) FROM budget WHERE Budgeted > 3000 AND Year <= '2001'", "source_tables": ["budget"], "error_info": ""}, {"sample_id": 1901, "db_id": "school_finance", "score": 1, "gold_sql": "SELECT COUNT(*) FROM budget WHERE budgeted > 3000 AND YEAR <= 2001", "pred_sql": "SELECT COUNT(*) FROM budget WHERE Year <= '2001' AND Budgeted > '3000'", "source_tables": ["budget"], "error_info": ""}, {"sample_id": 1902, "db_id": "school_finance", "score": 1, "gold_sql": "SELECT T2.school_name, T1.budgeted, T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T1.year >= 2002", "pred_sql": "SELECT School.School_name, budget.Budgeted, budget.Invested FROM School JOIN budget ON School.School_id = budget.School_id WHERE budget.Year >= '2002'", "source_tables": ["budget", "school"], "error_info": ""}, {"sample_id": 1903, "db_id": "school_finance", "score": 1, "gold_sql": "SELECT DISTINCT donator_name FROM endowment", "pred_sql": "SELECT donator_name FROM endowment", "source_tables": ["endowment"], "error_info": ""}, {"sample_id": 1904, "db_id": "school_finance", "score": 1, "gold_sql": "SELECT COUNT(*) FROM budget WHERE budgeted < invested", "pred_sql": "SELECT COUNT(*) AS budget_records_count FROM budget WHERE Budgeted < Invested", "source_tables": ["budget"], "error_info": ""}, {"sample_id": 1905, "db_id": "school_finance", "score": 1, "gold_sql": "SELECT SUM(T1.budgeted) FROM budget AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T2.school_name = 'Glenn'", "pred_sql": "SELECT SUM(budgeted) AS total_budget_amount FROM budget JOIN School ON budget.School_id = School.School_id WHERE School_name = 'Glenn'", "source_tables": ["budget", "school"], "error_info": ""}, {"sample_id": 1906, "db_id": "school_finance", "score": 0, "gold_sql": "SELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id JOIN endowment AS T3 ON T2.school_id = T3.school_id GROUP BY T2.school_name HAVING SUM(T1.budgeted) > 100 OR SUM(T3.amount) > 10", "pred_sql": "SELECT School.School_name FROM School JOIN budget ON School.School_id = budget.School_id JOIN endowment ON School.School_id = endowment.School_id WHERE budget.Budgeted > 100 OR endowment.amount > 10", "source_tables": ["budget", "school", "endowment"], "error_info": "Result not equal"}, {"sample_id": 1907, "db_id": "school_finance", "score": 1, "gold_sql": "SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T1.amount > 8.5 GROUP BY T1.school_id HAVING COUNT(*) > 1", "pred_sql": "SELECT School.School_name FROM School JOIN endowment ON School.School_id = endowment.School_id WHERE endowment.amount > 8.5 GROUP BY School.School_id HAVING COUNT(endowment.donator_name) > 1", "source_tables": ["endowment", "school"], "error_info": ""}, {"sample_id": 1908, "db_id": "school_finance", "score": 0, "gold_sql": "SELECT COUNT(*) FROM (SELECT * FROM endowment WHERE amount > 8.5 GROUP BY school_id HAVING COUNT(*) > 1)", "pred_sql": "SELECT COUNT(DISTINCT e.School_id) AS number_of_schools FROM endowment AS e WHERE e.amount < 8.5 GROUP BY e.School_id HAVING COUNT(e.donator_name) > 1", "source_tables": ["endowment"], "error_info": "Result not equal"}, {"sample_id": 1909, "db_id": "school_finance", "score": 1, "gold_sql": "SELECT T1.School_name, T1.Mascot, T1.IHSAA_Football_Class FROM school AS T1 JOIN budget AS T2 ON T1.school_id = T2.school_id WHERE Budgeted > 6000 OR YEAR < 2003 ORDER BY T2.total_budget_percent_invested, T2.total_budget_percent_budgeted", "pred_sql": "SELECT School.School_name, School.IHSAA_Football_Class, School.Mascot FROM School JOIN budget ON School.School_id = budget.School_id WHERE (CAST(budget.Budgeted AS INT) > 6000 OR School.School_id IN (SELECT School_id FROM endowment WHERE endowment.amount > 0)) ORDER BY CAST(budget.total_budget_percent_invested AS FLOAT), CAST(budget.total_budget_percent_budgeted AS FLOAT)", "source_tables": ["budget", "school"], "error_info": ""}, {"sample_id": 1910, "db_id": "protein_institute", "score": 1, "gold_sql": "SELECT COUNT(*) FROM building", "pred_sql": "SELECT COUNT(*) AS total_buildings FROM building", "source_tables": ["building"], "error_info": ""}, {"sample_id": 1911, "db_id": "protein_institute", "score": 1, "gold_sql": "SELECT name, street_address, floors FROM building ORDER BY floors", "pred_sql": "SELECT Name, Street_address, Floors FROM building ORDER BY Floors", "source_tables": ["building"], "error_info": ""}, {"sample_id": 1912, "db_id": "protein_institute", "score": 1, "gold_sql": "SELECT name FROM building ORDER BY height_feet DESC LIMIT 1", "pred_sql": "SELECT Name FROM building ORDER BY Height_feet DESC LIMIT 1", "source_tables": ["building"], "error_info": ""}, {"sample_id": 1913, "db_id": "protein_institute", "score": 1, "gold_sql": "SELECT AVG(floors), MAX(floors), MIN(floors) FROM building", "pred_sql": "SELECT AVG(Floors) AS average_floors, MAX(Floors) AS max_floors, MIN(Floors) AS min_floors FROM building", "source_tables": ["building"], "error_info": ""}, {"sample_id": 1914, "db_id": "protein_institute", "score": 1, "gold_sql": "SELECT COUNT(*) FROM building WHERE height_feet > (SELECT AVG(height_feet) FROM building) OR floors > (SELECT AVG(floors) FROM building)", "pred_sql": "SELECT COUNT(*) AS building_count FROM building WHERE Height_feet > (SELECT AVG(Height_feet) FROM building) OR Floors > (SELECT AVG(Floors) FROM building)", "source_tables": ["building"], "error_info": ""}, {"sample_id": 1915, "db_id": "protein_institute", "score": 1, "gold_sql": "SELECT name FROM building WHERE height_feet >= 200 AND floors >= 20", "pred_sql": "SELECT Name FROM building WHERE Height_feet >= '200' AND Floors >= '20'", "source_tables": ["building"], "error_info": ""}, {"sample_id": 1916, "db_id": "protein_institute", "score": 1, "gold_sql": "SELECT institution, LOCATION FROM institution WHERE founded > 1990 AND TYPE = 'Private'", "pred_sql": "SELECT Institution, Location FROM Institution WHERE Founded > '1990' AND Type = 'Private'", "source_tables": ["institution"], "error_info": ""}, {"sample_id": 1917, "db_id": "protein_institute", "score": 1, "gold_sql": "SELECT TYPE, COUNT(*), SUM(enrollment) FROM institution GROUP BY TYPE", "pred_sql": "SELECT Type, COUNT(*) AS Number_of_Institutions, SUM(Enrollment) AS Total_Enrollment FROM Institution GROUP BY Type", "source_tables": ["institution"], "error_info": ""}, {"sample_id": 1918, "db_id": "protein_institute", "score": 0, "gold_sql": "SELECT TYPE FROM institution GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Type, COUNT(*) AS institution_count FROM Institution GROUP BY Type ORDER BY institution_count DESC LIMIT 1", "source_tables": ["institution"], "error_info": "Result not equal"}, {"sample_id": 1919, "db_id": "protein_institute", "score": 1, "gold_sql": "SELECT TYPE FROM institution WHERE founded > 1990 AND enrollment >= 1000", "pred_sql": "SELECT Type FROM Institution WHERE Founded > '1990' AND Enrollment >= '1000'", "source_tables": ["institution"], "error_info": ""}, {"sample_id": 1920, "db_id": "protein_institute", "score": 1, "gold_sql": "SELECT name FROM building WHERE NOT building_id IN (SELECT building_id FROM institution)", "pred_sql": "SELECT Name FROM building WHERE NOT building_id IN (SELECT building_id FROM Institution)", "source_tables": ["building", "institution"], "error_info": ""}, {"sample_id": 1921, "db_id": "protein_institute", "score": 1, "gold_sql": "SELECT name FROM building EXCEPT SELECT T1.name FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id WHERE T2.founded = 2003", "pred_sql": "SELECT Name FROM building WHERE NOT building_id IN (SELECT building_id FROM Institution WHERE Founded = '2003')", "source_tables": ["building", "institution"], "error_info": ""}, {"sample_id": 1922, "db_id": "protein_institute", "score": 0, "gold_sql": "SELECT T1.name, COUNT(*) FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id GROUP BY T1.building_id", "pred_sql": "SELECT b.Name, COUNT(i.Institution_id) AS number_of_institutions FROM building AS b LEFT JOIN Institution AS i ON b.building_id = i.building_id GROUP BY b.building_id, b.Name", "source_tables": ["building", "institution"], "error_info": "Result not equal"}, {"sample_id": 1923, "db_id": "protein_institute", "score": 1, "gold_sql": "SELECT T1.name, T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id WHERE T2.founded > 1880 GROUP BY T1.building_id HAVING COUNT(*) >= 2", "pred_sql": "SELECT b.Name, b.Height_feet FROM building AS b JOIN Institution AS i ON b.building_id = i.building_id WHERE i.Founded > 1880 GROUP BY b.building_id HAVING COUNT(i.Institution_id) >= 2", "source_tables": ["building", "institution"], "error_info": ""}, {"sample_id": 1924, "db_id": "protein_institute", "score": 1, "gold_sql": "SELECT DISTINCT TYPE FROM institution", "pred_sql": "SELECT DISTINCT Type FROM Institution", "source_tables": ["institution"], "error_info": ""}, {"sample_id": 1925, "db_id": "protein_institute", "score": 0, "gold_sql": "SELECT T1.institution, COUNT(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id GROUP BY T1.institution_id", "pred_sql": "SELECT Institution.Institution, COUNT(protein.common_name) AS protein_count FROM Institution LEFT JOIN protein ON Institution.Institution_id = protein.Institution_id GROUP BY Institution.Institution", "source_tables": ["protein", "institution"], "error_info": "Result not equal"}, {"sample_id": 1926, "db_id": "protein_institute", "score": 1, "gold_sql": "SELECT COUNT(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id WHERE T1.founded > 1880 OR T1.type = 'Private'", "pred_sql": "SELECT COUNT(*) FROM protein AS p JOIN Institution AS i ON p.Institution_id = i.Institution_id WHERE i.Founded > '1880' OR i.Type = 'Private'", "source_tables": ["protein", "institution"], "error_info": ""}, {"sample_id": 1927, "db_id": "protein_institute", "score": 1, "gold_sql": "SELECT T2.protein_name, T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id", "pred_sql": "SELECT protein.protein_name, Institution.Institution FROM protein JOIN Institution ON protein.Institution_id = Institution.Institution_id", "source_tables": ["protein", "institution"], "error_info": ""}, {"sample_id": 1928, "db_id": "protein_institute", "score": 1, "gold_sql": "SELECT COUNT(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id JOIN building AS T3 ON T3.building_id = T1.building_id WHERE T3.floors >= 20", "pred_sql": "SELECT COUNT(*) AS protein_count FROM protein AS p JOIN Institution AS i ON p.Institution_id = i.Institution_id JOIN building AS b ON i.building_id = b.building_id WHERE b.Floors >= '20'", "source_tables": ["protein", "building", "institution"], "error_info": ""}, {"sample_id": 1929, "db_id": "protein_institute", "score": 1, "gold_sql": "SELECT COUNT(*) FROM institution WHERE NOT institution_id IN (SELECT institution_id FROM protein)", "pred_sql": "SELECT COUNT(*) FROM Institution WHERE NOT Institution_id IN (SELECT Institution_id FROM protein)", "source_tables": ["protein", "institution"], "error_info": ""}, {"sample_id": 1930, "db_id": "cinema", "score": 0, "gold_sql": "SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity > 800", "pred_sql": "SELECT Location FROM cinema WHERE Capacity <= 800", "source_tables": ["cinema"], "error_info": "Result not equal"}, {"sample_id": 1931, "db_id": "cinema", "score": 1, "gold_sql": "SELECT LOCATION FROM cinema WHERE openning_year = 2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year = 2011", "pred_sql": "SELECT DISTINCT Location FROM cinema WHERE Openning_year IN (2010, 2011) GROUP BY Location HAVING COUNT(DISTINCT Openning_year) = 2", "source_tables": ["cinema"], "error_info": ""}, {"sample_id": 1932, "db_id": "cinema", "score": 1, "gold_sql": "SELECT COUNT(*) FROM cinema", "pred_sql": "SELECT COUNT(*) AS total_cinemas FROM cinema", "source_tables": ["cinema"], "error_info": ""}, {"sample_id": 1933, "db_id": "cinema", "score": 1, "gold_sql": "SELECT COUNT(*) FROM cinema", "pred_sql": "SELECT COUNT(*) AS Number_of_Cinemas FROM cinema", "source_tables": ["cinema"], "error_info": ""}, {"sample_id": 1934, "db_id": "cinema", "score": 1, "gold_sql": "SELECT name, openning_year, capacity FROM cinema", "pred_sql": "SELECT Name, Openning_year, Capacity FROM cinema", "source_tables": ["cinema"], "error_info": ""}, {"sample_id": 1935, "db_id": "cinema", "score": 1, "gold_sql": "SELECT name, LOCATION FROM cinema WHERE capacity > (SELECT AVG(capacity) FROM cinema)", "pred_sql": "SELECT Name, Location FROM cinema WHERE Capacity > (SELECT AVG(Capacity) FROM cinema)", "source_tables": ["cinema"], "error_info": ""}, {"sample_id": 1936, "db_id": "cinema", "score": 1, "gold_sql": "SELECT DISTINCT LOCATION FROM cinema", "pred_sql": "SELECT DISTINCT Location FROM cinema", "source_tables": ["cinema"], "error_info": ""}, {"sample_id": 1937, "db_id": "cinema", "score": 1, "gold_sql": "SELECT DISTINCT LOCATION FROM cinema", "pred_sql": "SELECT DISTINCT Location FROM cinema", "source_tables": ["cinema"], "error_info": ""}, {"sample_id": 1938, "db_id": "cinema", "score": 1, "gold_sql": "SELECT name, openning_year FROM cinema ORDER BY openning_year DESC", "pred_sql": "SELECT Name, Openning_year FROM cinema ORDER BY Openning_year DESC", "source_tables": ["cinema"], "error_info": ""}, {"sample_id": 1939, "db_id": "cinema", "score": 1, "gold_sql": "SELECT name, LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1", "pred_sql": "SELECT Name, Location FROM cinema WHERE Capacity = (SELECT MAX(Capacity) FROM cinema)", "source_tables": ["cinema"], "error_info": ""}, {"sample_id": 1940, "db_id": "cinema", "score": 1, "gold_sql": "SELECT AVG(capacity), MIN(capacity), MAX(capacity) FROM cinema WHERE openning_year >= 2011", "pred_sql": "SELECT AVG(Capacity) AS Average_Capacity, MIN(Capacity) AS Minimum_Capacity, MAX(Capacity) AS Maximum_Capacity FROM cinema WHERE Openning_year >= 2011", "source_tables": ["cinema"], "error_info": ""}, {"sample_id": 1941, "db_id": "cinema", "score": 1, "gold_sql": "SELECT LOCATION, COUNT(*) FROM cinema GROUP BY LOCATION", "pred_sql": "SELECT Location, COUNT(Cinema_ID) AS Number_of_Cinemas FROM cinema GROUP BY Location", "source_tables": ["cinema"], "error_info": ""}, {"sample_id": 1942, "db_id": "cinema", "score": 0, "gold_sql": "SELECT LOCATION FROM cinema WHERE openning_year >= 2010 GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Location, COUNT(*) AS Number_of_Cinemas FROM cinema WHERE Openning_year >= 2010 GROUP BY Location ORDER BY Number_of_Cinemas DESC LIMIT 1", "source_tables": ["cinema"], "error_info": "Result not equal"}, {"sample_id": 1943, "db_id": "cinema", "score": 1, "gold_sql": "SELECT LOCATION FROM cinema WHERE capacity > 300 GROUP BY LOCATION HAVING COUNT(*) >= 2", "pred_sql": "SELECT Location FROM cinema WHERE Capacity > 300 GROUP BY Location HAVING COUNT(Cinema_ID) >= 2", "source_tables": ["cinema"], "error_info": ""}, {"sample_id": 1944, "db_id": "cinema", "score": 1, "gold_sql": "SELECT LOCATION FROM cinema WHERE capacity > 300 GROUP BY LOCATION HAVING COUNT(*) >= 2", "pred_sql": "SELECT Location FROM cinema WHERE Capacity > 300 GROUP BY Location HAVING COUNT(Cinema_ID) >= 2", "source_tables": ["cinema"], "error_info": ""}, {"sample_id": 1945, "db_id": "cinema", "score": 1, "gold_sql": "SELECT title, directed_by FROM film", "pred_sql": "SELECT Title, Directed_by FROM film", "source_tables": ["film"], "error_info": ""}, {"sample_id": 1946, "db_id": "cinema", "score": 1, "gold_sql": "SELECT title, directed_by FROM film", "pred_sql": "SELECT Title, Directed_by FROM film", "source_tables": ["film"], "error_info": ""}, {"sample_id": 1947, "db_id": "cinema", "score": 1, "gold_sql": "SELECT DISTINCT directed_by FROM film", "pred_sql": "SELECT DISTINCT Directed_by FROM film", "source_tables": ["film"], "error_info": ""}, {"sample_id": 1948, "db_id": "cinema", "score": 1, "gold_sql": "SELECT DISTINCT directed_by FROM film", "pred_sql": "SELECT DISTINCT Directed_by FROM film", "source_tables": ["film"], "error_info": ""}, {"sample_id": 1949, "db_id": "cinema", "score": 1, "gold_sql": "SELECT directed_by, COUNT(*) FROM film GROUP BY directed_by", "pred_sql": "SELECT Directed_by, COUNT(*) AS Number_of_Films FROM film GROUP BY Directed_by", "source_tables": ["film"], "error_info": ""}, {"sample_id": 1950, "db_id": "cinema", "score": 1, "gold_sql": "SELECT T2.name, SUM(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id = T2.cinema_id GROUP BY T1.cinema_id", "pred_sql": "SELECT cinema.Name, SUM(schedule.Show_times_per_day) AS Total_Show_Times_Per_Day FROM cinema JOIN schedule ON cinema.Cinema_ID = schedule.Cinema_ID GROUP BY cinema.Cinema_ID", "source_tables": ["schedule", "cinema"], "error_info": ""}, {"sample_id": 1951, "db_id": "cinema", "score": 1, "gold_sql": "SELECT T2.title, MAX(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T1.film_id", "pred_sql": "SELECT Title, MAX(Price) AS Max_Price FROM film JOIN schedule ON film.Film_ID = schedule.Film_ID GROUP BY Title", "source_tables": ["schedule", "film"], "error_info": ""}, {"sample_id": 1952, "db_id": "cinema", "score": 1, "gold_sql": "SELECT T2.title, MAX(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T1.film_id", "pred_sql": "SELECT Title, MAX(Price) AS Highest_Price FROM film JOIN schedule ON film.Film_ID = schedule.Film_ID GROUP BY Title", "source_tables": ["schedule", "film"], "error_info": ""}, {"sample_id": 1953, "db_id": "cinema", "score": 1, "gold_sql": "SELECT T3.name, T2.title, T1.date, T1.price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id", "pred_sql": "SELECT cinema.Name, film.Title, schedule.Date, schedule.Price FROM schedule JOIN cinema ON schedule.Cinema_ID = cinema.Cinema_ID JOIN film ON schedule.Film_ID = film.Film_ID", "source_tables": ["schedule", "film", "cinema"], "error_info": ""}, {"sample_id": 1954, "db_id": "cinema", "score": 1, "gold_sql": "SELECT title, directed_by FROM film WHERE NOT film_id IN (SELECT film_id FROM schedule)", "pred_sql": "SELECT Title, Directed_by FROM film WHERE NOT Film_ID IN (SELECT Film_ID FROM schedule)", "source_tables": ["schedule", "film"], "error_info": ""}, {"sample_id": 1955, "db_id": "cinema", "score": 0, "gold_sql": "SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T2.directed_by ORDER BY SUM(T1.show_times_per_day) DESC LIMIT 1", "pred_sql": "SELECT Directed_by, SUM(Show_times_per_day) AS Total_Show_Times FROM film JOIN schedule ON film.Film_ID = schedule.Film_ID GROUP BY Directed_by ORDER BY Total_Show_Times DESC LIMIT 1", "source_tables": ["schedule", "film"], "error_info": "Result not equal"}, {"sample_id": 1956, "db_id": "cinema", "score": 1, "gold_sql": "SELECT LOCATION FROM cinema WHERE capacity > 300 GROUP BY LOCATION HAVING COUNT(*) > 1", "pred_sql": "SELECT Location FROM cinema WHERE Capacity > 300 GROUP BY Location HAVING COUNT(Cinema_ID) > 1", "source_tables": ["cinema"], "error_info": ""}, {"sample_id": 1957, "db_id": "cinema", "score": 1, "gold_sql": "SELECT LOCATION FROM cinema WHERE capacity > 300 GROUP BY LOCATION HAVING COUNT(*) > 1", "pred_sql": "SELECT Location FROM cinema WHERE Capacity > 300 GROUP BY Location HAVING COUNT(Cinema_ID) > 1", "source_tables": ["cinema"], "error_info": ""}, {"sample_id": 1958, "db_id": "cinema", "score": 1, "gold_sql": "SELECT COUNT(*) FROM film WHERE title LIKE '%Dummy%'", "pred_sql": "SELECT COUNT(*) AS film_count FROM film WHERE Title LIKE '%Dummy%'", "source_tables": ["film"], "error_info": ""}, {"sample_id": 1959, "db_id": "cinema", "score": 1, "gold_sql": "SELECT COUNT(*) FROM film WHERE title LIKE '%Dummy%'", "pred_sql": "SELECT COUNT(*) FROM film WHERE Title LIKE '%Dummy%'", "source_tables": ["film"], "error_info": ""}, {"sample_id": 1960, "db_id": "products_for_hire", "score": 0, "gold_sql": "SELECT T1.good_or_bad_customer FROM customers AS T1 JOIN discount_coupons AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.coupon_amount = 500", "pred_sql": "SELECT good_or_bad_customer, COUNT(*) AS customer_count FROM Customers JOIN Discount_Coupons ON Customers.coupon_id = Discount_Coupons.coupon_id WHERE Discount_Coupons.coupon_amount = '500' GROUP BY good_or_bad_customer", "source_tables": ["discount_coupons", "customers"], "error_info": "Result not equal"}, {"sample_id": 1961, "db_id": "products_for_hire", "score": 0, "gold_sql": "SELECT T1.customer_id, T1.first_name, COUNT(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id", "pred_sql": "SELECT Customers.customer_id, Customers.first_name, COUNT(Bookings.booking_id) AS booking_count FROM Customers LEFT JOIN Bookings ON Customers.customer_id = Bookings.customer_id GROUP BY Customers.customer_id, Customers.first_name", "source_tables": ["customers", "bookings"], "error_info": "Result not equal"}, {"sample_id": 1962, "db_id": "products_for_hire", "score": 0, "gold_sql": "SELECT customer_id, SUM(amount_paid) FROM Payments GROUP BY customer_id ORDER BY SUM(amount_paid) DESC LIMIT 1", "pred_sql": "SELECT customer_id, MAX(amount_paid) AS max_amount_paid FROM Payments GROUP BY customer_id", "source_tables": ["payments"], "error_info": "Result not equal"}, {"sample_id": 1963, "db_id": "products_for_hire", "score": 0, "gold_sql": "SELECT T1.booking_id, T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id = T2.booking_id GROUP BY T1.booking_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT b.booking_id, SUM(p.amount_paid) AS total_refund FROM Payments AS p JOIN Bookings AS b ON p.booking_id = b.booking_id GROUP BY b.booking_id ORDER BY COUNT(p.payment_id) DESC LIMIT 1", "source_tables": ["payments", "bookings"], "error_info": "Result not equal"}, {"sample_id": 1964, "db_id": "products_for_hire", "score": 0, "gold_sql": "SELECT product_id FROM products_booked GROUP BY product_id HAVING COUNT(*) = 3", "pred_sql": "SELECT product_id FROM Products_Booked WHERE booked_count = 3", "source_tables": ["products_booked"], "error_info": "Result not equal"}, {"sample_id": 1965, "db_id": "products_for_hire", "score": 1, "gold_sql": "SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id = T2.product_id WHERE T1.booked_amount = 102.76", "pred_sql": "SELECT pfh.product_description FROM Products_for_Hire AS pfh JOIN Products_Booked AS pb ON pfh.product_id = pb.product_id WHERE pb.booked_amount = 102.76", "source_tables": ["products_booked", "products_for_hire"], "error_info": ""}, {"sample_id": 1966, "db_id": "products_for_hire", "score": 1, "gold_sql": "SELECT T3.booking_start_date, T3.booking_end_date FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id = T2.product_id JOIN bookings AS T3 ON T2.booking_id = T3.booking_id WHERE T1.product_name = 'Book collection A'", "pred_sql": "SELECT B.booking_start_date, B.booking_end_date FROM Bookings AS B JOIN Products_Booked AS PB ON B.booking_id = PB.booking_id JOIN Products_for_Hire AS P ON PB.product_id = P.product_id WHERE P.product_name = 'Book collection A'", "source_tables": ["products_booked", "products_for_hire", "bookings"], "error_info": ""}, {"sample_id": 1967, "db_id": "products_for_hire", "score": 1, "gold_sql": "SELECT T2.product_name FROM view_product_availability AS T1 JOIN products_for_hire AS T2 ON T1.product_id = T2.product_id WHERE T1.available_yn = 1", "pred_sql": "SELECT product_name FROM Products_for_Hire WHERE product_id IN (SELECT product_id FROM View_Product_Availability WHERE available_yn = '1')", "source_tables": ["products_for_hire", "view_product_availability"], "error_info": ""}, {"sample_id": 1968, "db_id": "products_for_hire", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT product_type_code) FROM products_for_hire", "pred_sql": "SELECT COUNT(DISTINCT product_type_code) AS different_product_types FROM Products_for_Hire", "source_tables": ["products_for_hire"], "error_info": ""}, {"sample_id": 1969, "db_id": "products_for_hire", "score": 0, "gold_sql": "SELECT first_name, last_name, gender_mf FROM customers WHERE good_or_bad_customer = 'good' ORDER BY last_name", "pred_sql": "SELECT first_name, last_name, gender_mf FROM Customers WHERE good_or_bad_customer = 1 ORDER BY last_name", "source_tables": ["customers"], "error_info": "Result not equal"}, {"sample_id": 1970, "db_id": "products_for_hire", "score": 1, "gold_sql": "SELECT AVG(amount_due) FROM payments", "pred_sql": "SELECT AVG(amount_due) AS average_amount_due FROM Payments", "source_tables": ["payments"], "error_info": ""}, {"sample_id": 1971, "db_id": "products_for_hire", "score": 1, "gold_sql": "SELECT MAX(booked_count), MIN(booked_count), AVG(booked_count) FROM products_booked", "pred_sql": "SELECT MAX(booked_count) AS max_booked_count, MIN(booked_count) AS min_booked_count, AVG(booked_count) AS avg_booked_count FROM Products_Booked", "source_tables": ["products_booked"], "error_info": ""}, {"sample_id": 1972, "db_id": "products_for_hire", "score": 1, "gold_sql": "SELECT DISTINCT payment_type_code FROM payments", "pred_sql": "SELECT DISTINCT payment_type_code FROM Payments", "source_tables": ["payments"], "error_info": ""}, {"sample_id": 1973, "db_id": "products_for_hire", "score": 1, "gold_sql": "SELECT daily_hire_cost FROM Products_for_hire WHERE product_name LIKE '%Book%'", "pred_sql": "SELECT daily_hire_cost FROM Products_for_Hire WHERE product_name LIKE '%Book%'", "source_tables": ["products_for_hire"], "error_info": ""}, {"sample_id": 1974, "db_id": "products_for_hire", "score": 0, "gold_sql": "SELECT COUNT(*) FROM Products_for_hire WHERE NOT product_id IN (SELECT product_id FROM products_booked WHERE booked_amount > 200)", "pred_sql": "SELECT COUNT(DISTINCT p.product_id) AS never_booked_high_amount FROM Products_for_Hire AS p LEFT JOIN Products_Booked AS pb ON p.product_id = pb.product_id LEFT JOIN Bookings AS b ON pb.booking_id = b.booking_id WHERE pb.booking_id IS NULL OR (b.amount_payable <= 200)", "source_tables": ["products_booked", "products_for_hire"], "error_info": "Result not equal"}, {"sample_id": 1975, "db_id": "products_for_hire", "score": 0, "gold_sql": "SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.good_or_bad_customer = 'good' INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.good_or_bad_customer = 'bad'", "pred_sql": "SELECT DISTINCT dc.coupon_amount FROM Discount_Coupons AS dc JOIN Customers AS c ON dc.coupon_id = c.coupon_id WHERE c.good_or_bad_customer IN (0, 1)", "source_tables": ["discount_coupons", "customers"], "error_info": "Result not equal"}, {"sample_id": 1976, "db_id": "products_for_hire", "score": 1, "gold_sql": "SELECT payment_date FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check'", "pred_sql": "SELECT payment_date FROM Payments WHERE amount_paid > 300 OR payment_type_code = 'Check'", "source_tables": ["payments"], "error_info": ""}, {"sample_id": 1977, "db_id": "products_for_hire", "score": 1, "gold_sql": "SELECT product_name, product_description FROM products_for_hire WHERE product_type_code = 'Cutlery' AND daily_hire_cost < 20", "pred_sql": "SELECT product_name, product_description FROM Products_for_Hire WHERE product_type_code = 'Cutlery' AND daily_hire_cost < 20", "source_tables": ["products_for_hire"], "error_info": ""}, {"sample_id": 1978, "db_id": "phone_market", "score": 1, "gold_sql": "SELECT COUNT(*) FROM phone", "pred_sql": "SELECT COUNT(*) AS total_phones FROM phone", "source_tables": ["phone"], "error_info": ""}, {"sample_id": 1979, "db_id": "phone_market", "score": 1, "gold_sql": "SELECT Name FROM phone ORDER BY Price ASC", "pred_sql": "SELECT Name FROM phone ORDER BY Price ASC", "source_tables": ["phone"], "error_info": ""}, {"sample_id": 1980, "db_id": "phone_market", "score": 1, "gold_sql": "SELECT Memory_in_G, Carrier FROM phone", "pred_sql": "SELECT Memory_in_G, Carrier FROM phone", "source_tables": ["phone"], "error_info": ""}, {"sample_id": 1981, "db_id": "phone_market", "score": 1, "gold_sql": "SELECT DISTINCT Carrier FROM phone WHERE Memory_in_G > 32", "pred_sql": "SELECT DISTINCT Carrier FROM phone WHERE Memory_in_G > '32'", "source_tables": ["phone"], "error_info": ""}, {"sample_id": 1982, "db_id": "phone_market", "score": 1, "gold_sql": "SELECT Name FROM phone WHERE Carrier = 'Sprint' OR Carrier = 'TMobile'", "pred_sql": "SELECT Name FROM phone WHERE Carrier IN ('Sprint', 'TMobile')", "source_tables": ["phone"], "error_info": ""}, {"sample_id": 1983, "db_id": "phone_market", "score": 1, "gold_sql": "SELECT Carrier FROM phone ORDER BY Price DESC LIMIT 1", "pred_sql": "SELECT Carrier FROM phone WHERE Price = (SELECT MAX(Price) FROM phone)", "source_tables": ["phone"], "error_info": ""}, {"sample_id": 1984, "db_id": "phone_market", "score": 1, "gold_sql": "SELECT Carrier, COUNT(*) FROM phone GROUP BY Carrier", "pred_sql": "SELECT Carrier, COUNT(*) AS Number_of_Phones FROM phone GROUP BY Carrier", "source_tables": ["phone"], "error_info": ""}, {"sample_id": 1985, "db_id": "phone_market", "score": 0, "gold_sql": "SELECT Carrier FROM phone GROUP BY Carrier ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Carrier, COUNT(*) AS Frequency FROM phone GROUP BY Carrier ORDER BY Frequency DESC LIMIT 1", "source_tables": ["phone"], "error_info": "Result not equal"}, {"sample_id": 1986, "db_id": "phone_market", "score": 1, "gold_sql": "SELECT Carrier FROM phone WHERE Memory_in_G < 32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G > 64", "pred_sql": "SELECT DISTINCT p1.Carrier FROM phone AS p1 JOIN phone_market AS pm1 ON p1.Phone_ID = pm1.Phone_ID WHERE p1.Memory_in_G < '32' AND p1.Carrier IN (SELECT p2.Carrier FROM phone AS p2 JOIN phone_market AS pm2 ON p2.Phone_ID = pm2.Phone_ID WHERE p2.Memory_in_G > '64')", "source_tables": ["phone"], "error_info": ""}, {"sample_id": 1987, "db_id": "phone_market", "score": 1, "gold_sql": "SELECT T3.Name, T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID", "pred_sql": "SELECT phone.Name, market.District FROM phone JOIN phone_market ON phone.Phone_ID = phone_market.Phone_ID JOIN market ON phone_market.Market_ID = market.Market_ID", "source_tables": ["phone", "market", "phone_market"], "error_info": ""}, {"sample_id": 1988, "db_id": "phone_market", "score": 1, "gold_sql": "SELECT T3.Name, T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID ORDER BY T2.Ranking", "pred_sql": "SELECT phone.Name, market.District FROM phone_market JOIN phone ON phone_market.Phone_ID = phone.Phone_ID JOIN market ON phone_market.Market_ID = market.Market_ID ORDER BY market.Ranking ASC", "source_tables": ["phone", "market", "phone_market"], "error_info": ""}, {"sample_id": 1989, "db_id": "phone_market", "score": 1, "gold_sql": "SELECT T3.Name FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID WHERE T2.Num_of_shops > 50", "pred_sql": "SELECT phone.Name FROM phone INNER JOIN phone_market ON phone.Phone_ID = phone_market.Phone_ID INNER JOIN market ON phone_market.Market_ID = market.Market_ID WHERE market.Num_of_shops > 50", "source_tables": ["phone", "market", "phone_market"], "error_info": ""}, {"sample_id": 1990, "db_id": "phone_market", "score": 1, "gold_sql": "SELECT T2.Name, SUM(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID GROUP BY T2.Name", "pred_sql": "SELECT phone.Name, SUM(phone_market.Num_of_stock) AS Total_Stock FROM phone JOIN phone_market ON phone.Phone_ID = phone_market.Phone_ID GROUP BY phone.Name", "source_tables": ["phone", "phone_market"], "error_info": ""}, {"sample_id": 1991, "db_id": "phone_market", "score": 1, "gold_sql": "SELECT T2.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID GROUP BY T2.Name HAVING SUM(T1.Num_of_stock) >= 2000 ORDER BY SUM(T1.Num_of_stock) DESC", "pred_sql": "SELECT p.Name FROM phone AS p JOIN phone_market AS pm ON p.Phone_ID = pm.Phone_ID GROUP BY p.Name HAVING SUM(pm.Num_of_stock) > 2000 ORDER BY SUM(pm.Num_of_stock) DESC", "source_tables": ["phone", "phone_market"], "error_info": ""}, {"sample_id": 1992, "db_id": "phone_market", "score": 1, "gold_sql": "SELECT Name FROM phone WHERE NOT Phone_id IN (SELECT Phone_ID FROM phone_market)", "pred_sql": "SELECT Name FROM phone WHERE NOT Phone_ID IN (SELECT Phone_ID FROM phone_market)", "source_tables": ["phone", "phone_market"], "error_info": ""}, {"sample_id": 1993, "db_id": "gas_company", "score": 0, "gold_sql": "SELECT COUNT(*) FROM company", "pred_sql": "SELECT COUNT(DISTINCT Company_ID) AS Number_of_Gas_Companies FROM station_company", "source_tables": ["company"], "error_info": "Result not equal"}, {"sample_id": 1994, "db_id": "gas_company", "score": 1, "gold_sql": "SELECT COUNT(*) FROM company", "pred_sql": "SELECT COUNT(*) AS total_companies FROM company", "source_tables": ["company"], "error_info": ""}, {"sample_id": 1995, "db_id": "gas_company", "score": 1, "gold_sql": "SELECT company, rank FROM company ORDER BY Sales_billion DESC", "pred_sql": "SELECT Company, Rank FROM company ORDER BY Sales_billion DESC", "source_tables": ["company"], "error_info": ""}, {"sample_id": 1996, "db_id": "gas_company", "score": 1, "gold_sql": "SELECT company, rank FROM company ORDER BY Sales_billion DESC", "pred_sql": "SELECT Company, Rank FROM company ORDER BY Sales_billion DESC", "source_tables": ["company"], "error_info": ""}, {"sample_id": 1997, "db_id": "gas_company", "score": 1, "gold_sql": "SELECT company, main_industry FROM company WHERE headquarters <> 'USA'", "pred_sql": "SELECT Company, Main_Industry FROM company WHERE Headquarters <> 'USA'", "source_tables": ["company"], "error_info": ""}, {"sample_id": 1998, "db_id": "gas_company", "score": 0, "gold_sql": "SELECT company, main_industry FROM company WHERE headquarters <> 'USA'", "pred_sql": "SELECT Company, Main_Industry FROM company WHERE Headquarters <> 'United States'", "source_tables": ["company"], "error_info": "Result not equal"}, {"sample_id": 1999, "db_id": "gas_company", "score": 1, "gold_sql": "SELECT company, headquarters FROM company ORDER BY market_value DESC", "pred_sql": "SELECT Company, Headquarters FROM company ORDER BY Market_Value DESC", "source_tables": ["company"], "error_info": ""}, {"sample_id": 2000, "db_id": "gas_company", "score": 1, "gold_sql": "SELECT company, headquarters FROM company ORDER BY market_value DESC", "pred_sql": "SELECT Company, Headquarters FROM company ORDER BY Market_Value DESC", "source_tables": ["company"], "error_info": ""}, {"sample_id": 2001, "db_id": "gas_company", "score": 1, "gold_sql": "SELECT MIN(market_value), MAX(market_value), AVG(market_value) FROM company", "pred_sql": "SELECT MIN(Market_Value) AS Minimum_Market_Value, MAX(Market_Value) AS Maximum_Market_Value, AVG(Market_Value) AS Average_Market_Value FROM company", "source_tables": ["company"], "error_info": ""}, {"sample_id": 2002, "db_id": "gas_company", "score": 1, "gold_sql": "SELECT MIN(market_value), MAX(market_value), AVG(market_value) FROM company", "pred_sql": "SELECT MIN(Market_Value) AS Min_Market_Value, MAX(Market_Value) AS Max_Market_Value, AVG(Market_Value) AS Avg_Market_Value FROM company", "source_tables": ["company"], "error_info": ""}, {"sample_id": 2003, "db_id": "gas_company", "score": 1, "gold_sql": "SELECT DISTINCT main_industry FROM company", "pred_sql": "SELECT DISTINCT Main_Industry FROM company", "source_tables": ["company"], "error_info": ""}, {"sample_id": 2004, "db_id": "gas_company", "score": 1, "gold_sql": "SELECT DISTINCT main_industry FROM company", "pred_sql": "SELECT DISTINCT Main_Industry FROM company", "source_tables": ["company"], "error_info": ""}, {"sample_id": 2005, "db_id": "gas_company", "score": 1, "gold_sql": "SELECT headquarters, COUNT(*) FROM company GROUP BY headquarters", "pred_sql": "SELECT Headquarters, COUNT(Company_ID) AS Number_of_Companies FROM company GROUP BY Headquarters", "source_tables": ["company"], "error_info": ""}, {"sample_id": 2006, "db_id": "gas_company", "score": 1, "gold_sql": "SELECT headquarters, COUNT(*) FROM company GROUP BY headquarters", "pred_sql": "SELECT Headquarters, COUNT(Company_ID) AS Company_Count FROM company GROUP BY Headquarters", "source_tables": ["company"], "error_info": ""}, {"sample_id": 2007, "db_id": "gas_company", "score": 1, "gold_sql": "SELECT main_industry, SUM(market_value) FROM company GROUP BY main_industry", "pred_sql": "SELECT Main_Industry, SUM(Market_Value) AS Total_Market_Value FROM company GROUP BY Main_Industry", "source_tables": ["company"], "error_info": ""}, {"sample_id": 2008, "db_id": "gas_company", "score": 1, "gold_sql": "SELECT main_industry, SUM(market_value) FROM company GROUP BY main_industry", "pred_sql": "SELECT Main_Industry, SUM(Market_Value) AS Total_Market_Value FROM company GROUP BY Main_Industry", "source_tables": ["company"], "error_info": ""}, {"sample_id": 2009, "db_id": "gas_company", "score": 1, "gold_sql": "SELECT main_industry, COUNT(*) FROM company GROUP BY main_industry ORDER BY SUM(market_value) DESC LIMIT 1", "pred_sql": "SELECT Main_Industry, COUNT(Company_ID) AS Number_of_Companies FROM company GROUP BY Main_Industry ORDER BY SUM(Market_Value) DESC LIMIT 1", "source_tables": ["company"], "error_info": ""}, {"sample_id": 2010, "db_id": "gas_company", "score": 0, "gold_sql": "SELECT main_industry, COUNT(*) FROM company GROUP BY main_industry ORDER BY SUM(market_value) DESC LIMIT 1", "pred_sql": "SELECT Main_Industry, COUNT(Company_ID) AS Total_Companies FROM company WHERE Market_Value = (SELECT MAX(Market_Value) FROM company) GROUP BY Main_Industry", "source_tables": ["company"], "error_info": "Result not equal"}, {"sample_id": 2011, "db_id": "gas_company", "score": 1, "gold_sql": "SELECT headquarters FROM company WHERE main_industry = 'Banking' GROUP BY headquarters HAVING COUNT(*) >= 2", "pred_sql": "SELECT Headquarters FROM company WHERE Main_Industry = 'Banking' GROUP BY Headquarters HAVING COUNT(Company_ID) >= 2", "source_tables": ["company"], "error_info": ""}, {"sample_id": 2012, "db_id": "gas_company", "score": 1, "gold_sql": "SELECT headquarters FROM company WHERE main_industry = 'Banking' GROUP BY headquarters HAVING COUNT(*) >= 2", "pred_sql": "SELECT Headquarters FROM company WHERE Main_Industry = 'Banking' GROUP BY Headquarters HAVING COUNT(Company_ID) >= 2", "source_tables": ["company"], "error_info": ""}, {"sample_id": 2013, "db_id": "gas_company", "score": 1, "gold_sql": "SELECT station_id, LOCATION, manager_name FROM gas_station ORDER BY open_year", "pred_sql": "SELECT Station_ID, Location, Manager_Name FROM gas_station ORDER BY Open_Year", "source_tables": ["gas_station"], "error_info": ""}, {"sample_id": 2014, "db_id": "gas_company", "score": 1, "gold_sql": "SELECT station_id, LOCATION, manager_name FROM gas_station ORDER BY open_year", "pred_sql": "SELECT Station_ID, Location, Manager_Name FROM gas_station ORDER BY Open_Year", "source_tables": ["gas_station"], "error_info": ""}, {"sample_id": 2015, "db_id": "gas_company", "score": 1, "gold_sql": "SELECT COUNT(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005", "pred_sql": "SELECT COUNT(*) AS Number_of_Gas_Stations FROM gas_station WHERE Open_Year BETWEEN 2000 AND 2005", "source_tables": ["gas_station"], "error_info": ""}, {"sample_id": 2016, "db_id": "gas_company", "score": 1, "gold_sql": "SELECT COUNT(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005", "pred_sql": "SELECT COUNT(*) AS Total_Gas_Stations FROM gas_station WHERE Open_Year BETWEEN 2000 AND 2005", "source_tables": ["gas_station"], "error_info": ""}, {"sample_id": 2017, "db_id": "gas_company", "score": 1, "gold_sql": "SELECT LOCATION, COUNT(*) FROM gas_station GROUP BY LOCATION ORDER BY COUNT(*)", "pred_sql": "SELECT Location, COUNT(*) AS Number_of_Stations FROM gas_station GROUP BY Location ORDER BY Number_of_Stations", "source_tables": ["gas_station"], "error_info": ""}, {"sample_id": 2018, "db_id": "gas_company", "score": 1, "gold_sql": "SELECT LOCATION, COUNT(*) FROM gas_station GROUP BY LOCATION ORDER BY COUNT(*)", "pred_sql": "SELECT Location, COUNT(*) AS Number_of_Stations FROM gas_station GROUP BY Location ORDER BY Number_of_Stations", "source_tables": ["gas_station"], "error_info": ""}, {"sample_id": 2019, "db_id": "gas_company", "score": 0, "gold_sql": "SELECT headquarters FROM company WHERE main_industry = 'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry = 'Oil and gas'", "pred_sql": "SELECT DISTINCT c.Headquarters FROM company AS c WHERE c.Main_Industry IN ('Banking', 'Oil and Gas') GROUP BY c.Headquarters HAVING COUNT(DISTINCT c.Main_Industry) = 2", "source_tables": ["company"], "error_info": "Result not equal"}, {"sample_id": 2020, "db_id": "gas_company", "score": 0, "gold_sql": "SELECT headquarters FROM company WHERE main_industry = 'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry = 'Oil and gas'", "pred_sql": "SELECT DISTINCT c.Headquarters FROM company AS c WHERE c.Main_Industry IN ('banking', 'oil and gas') AND c.Company_ID IN (SELECT sc.Company_ID FROM station_company AS sc JOIN gas_station AS gs ON sc.Station_ID = gs.Station_ID)", "source_tables": ["company"], "error_info": "Result not equal"}, {"sample_id": 2021, "db_id": "gas_company", "score": 0, "gold_sql": "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry = 'Banking'", "pred_sql": "SELECT DISTINCT gas_station.Location FROM gas_station LEFT JOIN station_company ON gas_station.Station_ID = station_company.Station_ID LEFT JOIN company ON station_company.Company_ID = company.Company_ID WHERE company.Main_Industry <> 'banking' OR company.Main_Industry IS NULL", "source_tables": ["company"], "error_info": "Result not equal"}, {"sample_id": 2022, "db_id": "gas_company", "score": 0, "gold_sql": "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry = 'Banking'", "pred_sql": "SELECT DISTINCT gas_station.Location FROM gas_station LEFT JOIN station_company ON gas_station.Station_ID = station_company.Station_ID LEFT JOIN company ON station_company.Company_ID = company.Company_ID WHERE company.Main_Industry <> 'Banking' OR company.Company_ID IS NULL", "source_tables": ["company"], "error_info": "Result not equal"}, {"sample_id": 2023, "db_id": "gas_company", "score": 1, "gold_sql": "SELECT T2.company, COUNT(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id", "pred_sql": "SELECT c.Company, COUNT(sc.Station_ID) AS Number_of_Gas_Stations FROM company AS c JOIN station_company AS sc ON c.Company_ID = sc.Company_ID GROUP BY c.Company", "source_tables": ["station_company", "company"], "error_info": ""}, {"sample_id": 2024, "db_id": "gas_company", "score": 0, "gold_sql": "SELECT T2.company, COUNT(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id", "pred_sql": "SELECT c.Company_ID, c.Company, COUNT(sc.Station_ID) AS Number_of_Gas_Stations FROM company AS c LEFT JOIN station_company AS sc ON c.Company_ID = sc.Company_ID GROUP BY c.Company_ID, c.Company", "source_tables": ["station_company", "company"], "error_info": "Result not equal"}, {"sample_id": 2025, "db_id": "gas_company", "score": 1, "gold_sql": "SELECT company, main_industry FROM company WHERE NOT company_id IN (SELECT company_id FROM station_company)", "pred_sql": "SELECT Company, Main_Industry FROM company WHERE NOT Company_ID IN (SELECT Company_ID FROM station_company)", "source_tables": ["station_company", "company"], "error_info": ""}, {"sample_id": 2026, "db_id": "gas_company", "score": 1, "gold_sql": "SELECT company, main_industry FROM company WHERE NOT company_id IN (SELECT company_id FROM station_company)", "pred_sql": "SELECT DISTINCT c.Main_Industry, c.Company FROM company AS c LEFT JOIN station_company AS sc ON c.Company_ID = sc.Company_ID WHERE sc.Station_ID IS NULL", "source_tables": ["station_company", "company"], "error_info": ""}, {"sample_id": 2027, "db_id": "gas_company", "score": 1, "gold_sql": "SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id WHERE T2.company = 'ExxonMobil'", "pred_sql": "SELECT gs.Manager_Name FROM gas_station AS gs JOIN station_company AS sc ON gs.Station_ID = sc.Station_ID JOIN company AS c ON sc.Company_ID = c.Company_ID WHERE c.Company = 'ExxonMobil'", "source_tables": ["gas_station", "station_company", "company"], "error_info": ""}, {"sample_id": 2028, "db_id": "gas_company", "score": 1, "gold_sql": "SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id WHERE T2.company = 'ExxonMobil'", "pred_sql": "SELECT gs.Manager_Name FROM gas_station AS gs JOIN station_company AS sc ON gs.Station_ID = sc.Station_ID JOIN company AS c ON sc.Company_ID = c.Company_ID WHERE c.Company = 'ExxonMobil'", "source_tables": ["gas_station", "station_company", "company"], "error_info": ""}, {"sample_id": 2029, "db_id": "gas_company", "score": 1, "gold_sql": "SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id WHERE T2.market_value > 100", "pred_sql": "SELECT gas_station.Location FROM gas_station JOIN station_company ON gas_station.Station_ID = station_company.Station_ID JOIN company ON station_company.Company_ID = company.Company_ID WHERE company.Market_Value > 100", "source_tables": ["gas_station", "station_company", "company"], "error_info": ""}, {"sample_id": 2030, "db_id": "gas_company", "score": 1, "gold_sql": "SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id WHERE T2.market_value > 100", "pred_sql": "SELECT DISTINCT gs.Location FROM gas_station AS gs JOIN station_company AS sc ON gs.Station_ID = sc.Station_ID JOIN company AS c ON sc.Company_ID = c.Company_ID WHERE c.Market_Value > 100", "source_tables": ["gas_station", "station_company", "company"], "error_info": ""}, {"sample_id": 2031, "db_id": "gas_company", "score": 0, "gold_sql": "SELECT manager_name FROM gas_station WHERE open_year > 2000 GROUP BY manager_name ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Manager_Name, COUNT(*) AS NumberOfStations FROM gas_station WHERE Open_Year > 2000 GROUP BY Manager_Name ORDER BY NumberOfStations DESC LIMIT 1", "source_tables": ["gas_station"], "error_info": "Result not equal"}, {"sample_id": 2032, "db_id": "gas_company", "score": 0, "gold_sql": "SELECT manager_name FROM gas_station WHERE open_year > 2000 GROUP BY manager_name ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Manager_Name, COUNT(*) AS Station_Count FROM gas_station WHERE Open_Year > 2000 GROUP BY Manager_Name ORDER BY Station_Count DESC LIMIT 1", "source_tables": ["gas_station"], "error_info": "Result not equal"}, {"sample_id": 2033, "db_id": "gas_company", "score": 1, "gold_sql": "SELECT LOCATION FROM gas_station ORDER BY open_year", "pred_sql": "SELECT Location FROM gas_station ORDER BY Open_Year", "source_tables": ["gas_station"], "error_info": ""}, {"sample_id": 2034, "db_id": "gas_company", "score": 1, "gold_sql": "SELECT LOCATION FROM gas_station ORDER BY open_year", "pred_sql": "SELECT Location FROM gas_station ORDER BY Open_Year", "source_tables": ["gas_station"], "error_info": ""}, {"sample_id": 2035, "db_id": "gas_company", "score": 1, "gold_sql": "SELECT rank, company, market_value FROM company WHERE main_industry = 'Banking' ORDER BY sales_billion, profits_billion", "pred_sql": "SELECT c.Rank, c.Company, c.Market_Value FROM company AS c WHERE c.Main_Industry = 'Banking' ORDER BY c.Sales_billion, c.Profits_billion", "source_tables": ["company"], "error_info": ""}, {"sample_id": 2036, "db_id": "gas_company", "score": 0, "gold_sql": "SELECT rank, company, market_value FROM company WHERE main_industry = 'Banking' ORDER BY sales_billion, profits_billion", "pred_sql": "SELECT Rank, Company, Market_Value FROM company WHERE Main_Industry = 'Banking' ORDER BY Sales_billion DESC, Profits_billion DESC", "source_tables": ["company"], "error_info": "Result not equal"}, {"sample_id": 2037, "db_id": "gas_company", "score": 1, "gold_sql": "SELECT T3.location, T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3", "pred_sql": "SELECT gs.Location, gs.Representative_Name FROM gas_station AS gs JOIN station_company AS sc ON gs.Station_ID = sc.Station_ID JOIN company AS c ON sc.Company_ID = c.Company_ID ORDER BY c.Assets_billion DESC LIMIT 3", "source_tables": ["gas_station", "station_company", "company"], "error_info": ""}, {"sample_id": 2038, "db_id": "gas_company", "score": 0, "gold_sql": "SELECT T3.location, T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3", "pred_sql": "SELECT gs.Location, gs.Representative_Name FROM gas_station AS gs JOIN station_company AS sc ON gs.Station_ID = sc.Station_ID JOIN company AS c ON sc.Company_ID = c.Company_ID WHERE c.Company_ID IN (SELECT Company_ID FROM company ORDER BY Assets_billion DESC LIMIT 3)", "source_tables": ["gas_station", "station_company", "company"], "error_info": "Result not equal"}, {"sample_id": 2039, "db_id": "party_people", "score": 1, "gold_sql": "SELECT COUNT(*) FROM region", "pred_sql": "SELECT COUNT(*) AS total_regions FROM region", "source_tables": ["region"], "error_info": ""}, {"sample_id": 2040, "db_id": "party_people", "score": 1, "gold_sql": "SELECT COUNT(*) FROM region", "pred_sql": "SELECT COUNT(*) AS region_count FROM region", "source_tables": ["region"], "error_info": ""}, {"sample_id": 2041, "db_id": "party_people", "score": 1, "gold_sql": "SELECT DISTINCT region_name FROM region ORDER BY Label", "pred_sql": "SELECT DISTINCT Region_name FROM region ORDER BY Label", "source_tables": ["region"], "error_info": ""}, {"sample_id": 2042, "db_id": "party_people", "score": 1, "gold_sql": "SELECT DISTINCT region_name FROM region ORDER BY Label", "pred_sql": "SELECT DISTINCT Region_name FROM region ORDER BY Label", "source_tables": ["region"], "error_info": ""}, {"sample_id": 2043, "db_id": "party_people", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT party_name) FROM party", "pred_sql": "SELECT COUNT(*) AS total_parties FROM party", "source_tables": ["party"], "error_info": ""}, {"sample_id": 2044, "db_id": "party_people", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT party_name) FROM party", "pred_sql": "SELECT COUNT(DISTINCT Party_ID) AS Number_of_Parties FROM party", "source_tables": ["party"], "error_info": ""}, {"sample_id": 2045, "db_id": "party_people", "score": 1, "gold_sql": "SELECT minister, took_office, left_office FROM party ORDER BY left_office", "pred_sql": "SELECT Minister, Took_office, Left_office FROM party ORDER BY Left_office", "source_tables": ["party"], "error_info": ""}, {"sample_id": 2046, "db_id": "party_people", "score": 1, "gold_sql": "SELECT minister, took_office, left_office FROM party ORDER BY left_office", "pred_sql": "SELECT Minister, Took_office, Left_office FROM party ORDER BY Left_office", "source_tables": ["party"], "error_info": ""}, {"sample_id": 2047, "db_id": "party_people", "score": 1, "gold_sql": "SELECT minister FROM party WHERE took_office > 1961 OR took_office < 1959", "pred_sql": "SELECT Minister FROM party WHERE Took_office > 1961 OR Took_office < 1959", "source_tables": ["party"], "error_info": ""}, {"sample_id": 2048, "db_id": "party_people", "score": 1, "gold_sql": "SELECT minister FROM party WHERE took_office > 1961 OR took_office < 1959", "pred_sql": "SELECT DISTINCT Minister FROM party WHERE Took_office > 1961 OR Took_office < 1959", "source_tables": ["party"], "error_info": ""}, {"sample_id": 2049, "db_id": "party_people", "score": 0, "gold_sql": "SELECT minister FROM party WHERE party_name <> 'Progress Party'", "pred_sql": "SELECT DISTINCT p.Minister FROM party AS p WHERE p.Party_name <> 'Progress Party'", "source_tables": ["party"], "error_info": "Result not equal"}, {"sample_id": 2050, "db_id": "party_people", "score": 0, "gold_sql": "SELECT minister FROM party WHERE party_name <> 'Progress Party'", "pred_sql": "SELECT DISTINCT m.Member_Name FROM member AS m JOIN party AS p ON m.Party_ID = p.Party_ID WHERE p.Party_name <> 'Progress Party'", "source_tables": ["party"], "error_info": "Result not equal"}, {"sample_id": 2051, "db_id": "party_people", "score": 1, "gold_sql": "SELECT minister, party_name FROM party ORDER BY took_office DESC", "pred_sql": "SELECT p.Minister, p.Party_name FROM party AS p ORDER BY p.Took_office DESC", "source_tables": ["party"], "error_info": ""}, {"sample_id": 2052, "db_id": "party_people", "score": 1, "gold_sql": "SELECT minister, party_name FROM party ORDER BY took_office DESC", "pred_sql": "SELECT p.Minister, p.Party_name FROM party AS p ORDER BY p.Took_office DESC", "source_tables": ["party"], "error_info": ""}, {"sample_id": 2053, "db_id": "party_people", "score": 1, "gold_sql": "SELECT minister FROM party ORDER BY left_office DESC LIMIT 1", "pred_sql": "SELECT Minister FROM party WHERE Left_office = (SELECT MAX(Left_office) FROM party)", "source_tables": ["party"], "error_info": ""}, {"sample_id": 2054, "db_id": "party_people", "score": 1, "gold_sql": "SELECT minister FROM party ORDER BY left_office DESC LIMIT 1", "pred_sql": "SELECT Minister FROM party ORDER BY Left_office DESC LIMIT 1", "source_tables": ["party"], "error_info": ""}, {"sample_id": 2055, "db_id": "party_people", "score": 1, "gold_sql": "SELECT T1.member_name, T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id", "pred_sql": "SELECT member.Member_Name, party.Party_name FROM member JOIN party ON member.Party_ID = party.Party_ID", "source_tables": ["party", "member"], "error_info": ""}, {"sample_id": 2056, "db_id": "party_people", "score": 1, "gold_sql": "SELECT T1.member_name, T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id", "pred_sql": "SELECT member.Member_Name, party.Party_name FROM member JOIN party ON member.Party_ID = party.Party_ID", "source_tables": ["party", "member"], "error_info": ""}, {"sample_id": 2057, "db_id": "party_people", "score": 0, "gold_sql": "SELECT T2.party_name, COUNT(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id", "pred_sql": "SELECT party.Party_name, COUNT(member.Member_ID) AS Number_of_Members FROM party LEFT JOIN member ON party.Party_ID = member.Party_ID GROUP BY party.Party_name", "source_tables": ["party", "member"], "error_info": "Result not equal"}, {"sample_id": 2058, "db_id": "party_people", "score": 0, "gold_sql": "SELECT T2.party_name, COUNT(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id", "pred_sql": "SELECT party.Party_name, COUNT(member.Member_ID) AS Member_Count FROM party LEFT JOIN member ON party.Party_ID = member.Party_ID GROUP BY party.Party_name", "source_tables": ["party", "member"], "error_info": "Result not equal"}, {"sample_id": 2059, "db_id": "party_people", "score": 1, "gold_sql": "SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT p.Party_name FROM party AS p JOIN member AS m ON p.Party_ID = m.Party_ID GROUP BY p.Party_ID ORDER BY COUNT(m.Member_ID) DESC LIMIT 1", "source_tables": ["party", "member"], "error_info": ""}, {"sample_id": 2060, "db_id": "party_people", "score": 1, "gold_sql": "SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT p.Party_name FROM party AS p JOIN member AS m ON p.Party_ID = m.Party_ID GROUP BY p.Party_ID ORDER BY COUNT(m.Member_ID) DESC LIMIT 1", "source_tables": ["party", "member"], "error_info": ""}, {"sample_id": 2061, "db_id": "party_people", "score": 1, "gold_sql": "SELECT T1.party_name, T2.region_name FROM party AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id", "pred_sql": "SELECT party.Party_name, region.Region_name FROM party JOIN region ON party.Region_ID = region.Region_ID", "source_tables": ["party", "region"], "error_info": ""}, {"sample_id": 2062, "db_id": "party_people", "score": 1, "gold_sql": "SELECT T1.party_name, T2.region_name FROM party AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id", "pred_sql": "SELECT party.Party_name, region.Region_name FROM party JOIN region ON party.Region_ID = region.Region_ID", "source_tables": ["party", "region"], "error_info": ""}, {"sample_id": 2063, "db_id": "party_people", "score": 1, "gold_sql": "SELECT party_name FROM party WHERE NOT party_id IN (SELECT party_id FROM Member)", "pred_sql": "SELECT Party_name FROM party WHERE NOT Party_ID IN (SELECT DISTINCT Party_ID FROM member)", "source_tables": ["party", "member"], "error_info": ""}, {"sample_id": 2064, "db_id": "party_people", "score": 1, "gold_sql": "SELECT party_name FROM party WHERE NOT party_id IN (SELECT party_id FROM Member)", "pred_sql": "SELECT Party_name FROM party WHERE NOT Party_ID IN (SELECT DISTINCT Party_ID FROM member)", "source_tables": ["party", "member"], "error_info": ""}, {"sample_id": 2065, "db_id": "party_people", "score": 1, "gold_sql": "SELECT member_name FROM member WHERE party_id = 3 INTERSECT SELECT member_name FROM member WHERE party_id = 1", "pred_sql": "SELECT m.Member_Name FROM member AS m JOIN party AS p1 ON m.Party_ID = p1.Party_ID JOIN party AS p2 ON m.Party_ID = p2.Party_ID WHERE p1.Party_ID = 3 AND p2.Party_ID = 1", "source_tables": ["member"], "error_info": ""}, {"sample_id": 2066, "db_id": "party_people", "score": 1, "gold_sql": "SELECT member_name FROM member WHERE party_id = 3 INTERSECT SELECT member_name FROM member WHERE party_id = 1", "pred_sql": "SELECT m1.Member_Name FROM member AS m1 JOIN member AS m2 ON m1.Member_Name = m2.Member_Name WHERE m1.Party_ID = '3' AND m2.Party_ID = '1'", "source_tables": ["member"], "error_info": ""}, {"sample_id": 2067, "db_id": "party_people", "score": 1, "gold_sql": "SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id WHERE T2.Party_name <> 'Progress Party'", "pred_sql": "SELECT Member_Name FROM member WHERE NOT Party_ID IN (SELECT Party_ID FROM party WHERE Party_name = 'Progress Party')", "source_tables": ["party", "member"], "error_info": ""}, {"sample_id": 2068, "db_id": "party_people", "score": 1, "gold_sql": "SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id WHERE T2.Party_name <> 'Progress Party'", "pred_sql": "SELECT member.Member_Name FROM member JOIN party ON member.Party_ID = party.Party_ID WHERE party.Party_name <> 'Progress Party'", "source_tables": ["party", "member"], "error_info": ""}, {"sample_id": 2069, "db_id": "party_people", "score": 1, "gold_sql": "SELECT COUNT(*) FROM party_events", "pred_sql": "SELECT COUNT(*) AS total_events FROM party_events", "source_tables": ["party_events"], "error_info": ""}, {"sample_id": 2070, "db_id": "party_people", "score": 1, "gold_sql": "SELECT COUNT(*) FROM party_events", "pred_sql": "SELECT COUNT(*) AS Number_of_Party_Events FROM party_events", "source_tables": ["party_events"], "error_info": ""}, {"sample_id": 2071, "db_id": "party_people", "score": 0, "gold_sql": "SELECT T2.party_name, COUNT(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id", "pred_sql": "SELECT party.Party_name, COUNT(party_events.Event_ID) AS Number_of_Events FROM party LEFT JOIN party_events ON party.Party_ID = party_events.Party_ID GROUP BY party.Party_name", "source_tables": ["party", "party_events"], "error_info": "Result not equal"}, {"sample_id": 2072, "db_id": "party_people", "score": 0, "gold_sql": "SELECT T2.party_name, COUNT(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id", "pred_sql": "SELECT party.Party_name, COUNT(party_events.Event_ID) AS Event_Count FROM party LEFT JOIN party_events ON party.Party_ID = party_events.Party_ID GROUP BY party.Party_name", "source_tables": ["party", "party_events"], "error_info": "Result not equal"}, {"sample_id": 2073, "db_id": "party_people", "score": 1, "gold_sql": "SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id = T2.member_in_charge_id", "pred_sql": "SELECT Member_Name FROM member WHERE NOT Member_ID IN (SELECT Member_in_charge_ID FROM party_events)", "source_tables": ["member", "party_events"], "error_info": ""}, {"sample_id": 2074, "db_id": "party_people", "score": 1, "gold_sql": "SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id = T2.member_in_charge_id", "pred_sql": "SELECT Member_Name FROM member WHERE NOT Member_ID IN (SELECT Member_in_charge_ID FROM party_events)", "source_tables": ["member", "party_events"], "error_info": ""}, {"sample_id": 2075, "db_id": "party_people", "score": 1, "gold_sql": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id HAVING COUNT(*) >= 2", "pred_sql": "SELECT p.Party_name FROM party AS p JOIN party_events AS pe ON p.Party_ID = pe.Party_ID GROUP BY p.Party_ID HAVING COUNT(pe.Event_ID) >= 2", "source_tables": ["party", "party_events"], "error_info": ""}, {"sample_id": 2076, "db_id": "party_people", "score": 1, "gold_sql": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id HAVING COUNT(*) >= 2", "pred_sql": "SELECT p.Party_name FROM party AS p JOIN party_events AS pe ON p.Party_ID = pe.Party_ID GROUP BY p.Party_ID HAVING COUNT(pe.Event_ID) >= 2", "source_tables": ["party", "party_events"], "error_info": ""}, {"sample_id": 2077, "db_id": "party_people", "score": 1, "gold_sql": "SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id = T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT m.Member_Name FROM member AS m JOIN party_events AS pe ON m.Member_ID = pe.Member_in_charge_ID GROUP BY m.Member_ID ORDER BY COUNT(pe.Event_ID) DESC LIMIT 1", "source_tables": ["member", "party_events"], "error_info": ""}, {"sample_id": 2078, "db_id": "party_people", "score": 1, "gold_sql": "SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id = T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT m.Member_Name FROM member AS m JOIN party_events AS pe ON m.Member_ID = pe.Member_in_charge_ID GROUP BY m.Member_ID ORDER BY COUNT(pe.Event_ID) DESC LIMIT 1", "source_tables": ["member", "party_events"], "error_info": ""}, {"sample_id": 2079, "db_id": "party_people", "score": 1, "gold_sql": "SELECT event_name FROM party_events GROUP BY event_name HAVING COUNT(*) > 2", "pred_sql": "SELECT Event_Name FROM party_events GROUP BY Event_Name HAVING COUNT(Event_ID) > 2", "source_tables": ["party_events"], "error_info": ""}, {"sample_id": 2080, "db_id": "party_people", "score": 1, "gold_sql": "SELECT event_name FROM party_events GROUP BY event_name HAVING COUNT(*) > 2", "pred_sql": "SELECT Event_Name FROM party_events GROUP BY Event_Name HAVING COUNT(Event_Name) > 2", "source_tables": ["party_events"], "error_info": ""}, {"sample_id": 2081, "db_id": "party_people", "score": 0, "gold_sql": "SELECT COUNT(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id = t2.region_id JOIN party_events AS t3 ON t2.party_id = t3.party_id WHERE t1.region_name = 'United Kingdom' AND t3.Event_Name = 'Annaual Meeting'", "pred_sql": "SELECT COUNT(*) AS Annual_Meeting_Count FROM party_events AS pe JOIN party AS p ON pe.Party_ID = p.Party_ID JOIN region AS r ON p.Region_ID = r.Region_ID WHERE pe.Event_Name = 'Annual Meeting' AND r.Region_name = 'United Kingdom'", "source_tables": ["party", "party_events", "region"], "error_info": "Result not equal"}, {"sample_id": 2082, "db_id": "party_people", "score": 0, "gold_sql": "SELECT COUNT(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id = t2.region_id JOIN party_events AS t3 ON t2.party_id = t3.party_id WHERE t1.region_name = 'United Kingdom' AND t3.Event_Name = 'Annaual Meeting'", "pred_sql": "SELECT COUNT(*) AS Annual_Meeting_Count FROM party_events AS pe JOIN party AS p ON pe.Party_ID = p.Party_ID JOIN region AS r ON p.Region_ID = r.Region_ID WHERE pe.Event_Name = 'Annual Meeting' AND r.Region_name = 'United Kingdom'", "source_tables": ["party", "party_events", "region"], "error_info": "Result not equal"}, {"sample_id": 2083, "db_id": "pilot_record", "score": 1, "gold_sql": "SELECT COUNT(*) FROM pilot", "pred_sql": "SELECT COUNT(*) AS Total_Pilots FROM pilot", "source_tables": ["pilot"], "error_info": ""}, {"sample_id": 2084, "db_id": "pilot_record", "score": 1, "gold_sql": "SELECT Pilot_name FROM pilot ORDER BY Rank ASC", "pred_sql": "SELECT Pilot_name FROM pilot ORDER BY Rank ASC", "source_tables": ["pilot"], "error_info": ""}, {"sample_id": 2085, "db_id": "pilot_record", "score": 1, "gold_sql": "SELECT POSITION, Team FROM pilot", "pred_sql": "SELECT Position, Team FROM pilot", "source_tables": ["pilot"], "error_info": ""}, {"sample_id": 2086, "db_id": "pilot_record", "score": 1, "gold_sql": "SELECT DISTINCT POSITION FROM pilot WHERE Age > 30", "pred_sql": "SELECT DISTINCT Position FROM pilot WHERE Age > 30", "source_tables": ["pilot"], "error_info": ""}, {"sample_id": 2087, "db_id": "pilot_record", "score": 1, "gold_sql": "SELECT Pilot_name FROM pilot WHERE Team = 'Bradley' OR Team = 'Fordham'", "pred_sql": "SELECT Pilot_name FROM pilot WHERE Team IN ('Bradley', 'Fordham')", "source_tables": ["pilot"], "error_info": ""}, {"sample_id": 2088, "db_id": "pilot_record", "score": 0, "gold_sql": "SELECT Join_Year FROM pilot ORDER BY Rank ASC LIMIT 1", "pred_sql": "SELECT Join_Year FROM pilot WHERE Rank = (SELECT MAX(Rank) FROM pilot)", "source_tables": ["pilot"], "error_info": "Result not equal"}, {"sample_id": 2089, "db_id": "pilot_record", "score": 1, "gold_sql": "SELECT Nationality, COUNT(*) FROM pilot GROUP BY Nationality", "pred_sql": "SELECT Nationality, COUNT(Pilot_ID) AS Number_of_Pilots FROM pilot GROUP BY Nationality", "source_tables": ["pilot"], "error_info": ""}, {"sample_id": 2090, "db_id": "pilot_record", "score": 0, "gold_sql": "SELECT Nationality FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Nationality, COUNT(*) AS Count FROM pilot GROUP BY Nationality ORDER BY Count DESC LIMIT 1", "source_tables": ["pilot"], "error_info": "Result not equal"}, {"sample_id": 2091, "db_id": "pilot_record", "score": 0, "gold_sql": "SELECT POSITION FROM pilot WHERE Join_Year < 2000 INTERSECT SELECT POSITION FROM pilot WHERE Join_Year > 2005", "pred_sql": "SELECT DISTINCT Position FROM pilot WHERE Join_Year > 2005 OR Join_Year < 2000", "source_tables": ["pilot"], "error_info": "Result not equal"}, {"sample_id": 2092, "db_id": "pilot_record", "score": 1, "gold_sql": "SELECT T3.Pilot_name, T2.Model FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID = T3.Pilot_ID", "pred_sql": "SELECT pilot.Pilot_name, aircraft.Model FROM pilot JOIN pilot_record ON pilot.Pilot_ID = pilot_record.Pilot_ID JOIN aircraft ON pilot_record.Aircraft_ID = aircraft.Aircraft_ID", "source_tables": ["aircraft", "pilot", "pilot_record"], "error_info": ""}, {"sample_id": 2093, "db_id": "pilot_record", "score": 1, "gold_sql": "SELECT T3.Pilot_name, T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID = T3.Pilot_ID ORDER BY T3.Rank", "pred_sql": "SELECT pilot.Pilot_name, aircraft.Fleet_Series FROM pilot JOIN pilot_record ON pilot.Pilot_ID = pilot_record.Pilot_ID JOIN aircraft ON pilot_record.Aircraft_ID = aircraft.Aircraft_ID ORDER BY pilot.Rank ASC", "source_tables": ["aircraft", "pilot", "pilot_record"], "error_info": ""}, {"sample_id": 2094, "db_id": "pilot_record", "score": 1, "gold_sql": "SELECT T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID = T3.Pilot_ID WHERE T3.Age < 34", "pred_sql": "SELECT DISTINCT aircraft.Fleet_Series FROM aircraft JOIN pilot_record ON aircraft.Aircraft_ID = pilot_record.Aircraft_ID JOIN pilot ON pilot_record.Pilot_ID = pilot.Pilot_ID WHERE pilot.Age < 34", "source_tables": ["aircraft", "pilot", "pilot_record"], "error_info": ""}, {"sample_id": 2095, "db_id": "pilot_record", "score": 0, "gold_sql": "SELECT T2.Pilot_name, COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID = T2.pilot_ID GROUP BY T2.Pilot_name", "pred_sql": "SELECT pilot.Pilot_name, COUNT(pilot_record.Record_ID) AS Record_Count FROM pilot LEFT JOIN pilot_record ON pilot.Pilot_ID = pilot_record.Pilot_ID GROUP BY pilot.Pilot_ID", "source_tables": ["pilot", "pilot_record"], "error_info": "Result not equal"}, {"sample_id": 2096, "db_id": "pilot_record", "score": 0, "gold_sql": "SELECT T2.Pilot_name, COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID = T2.pilot_ID GROUP BY T2.Pilot_name HAVING COUNT(*) > 1", "pred_sql": "SELECT p.Pilot_name FROM pilot AS p JOIN pilot_record AS pr ON p.Pilot_ID = pr.Pilot_ID GROUP BY p.Pilot_ID HAVING COUNT(pr.Record_ID) > 1", "source_tables": ["pilot", "pilot_record"], "error_info": "Result not equal"}, {"sample_id": 2097, "db_id": "pilot_record", "score": 1, "gold_sql": "SELECT Pilot_name FROM pilot WHERE NOT Pilot_ID IN (SELECT Pilot_ID FROM pilot_record)", "pred_sql": "SELECT Pilot_name FROM pilot WHERE NOT Pilot_ID IN (SELECT Pilot_ID FROM pilot_record)", "source_tables": ["pilot", "pilot_record"], "error_info": ""}, {"sample_id": 2098, "db_id": "cre_Doc_Control_Systems", "score": 1, "gold_sql": "SELECT document_status_code FROM Ref_Document_Status", "pred_sql": "SELECT document_status_code FROM Ref_Document_Status", "source_tables": ["ref_document_status"], "error_info": ""}, {"sample_id": 2099, "db_id": "cre_Doc_Control_Systems", "score": 1, "gold_sql": "SELECT document_status_description FROM Ref_Document_Status WHERE document_status_code = 'working'", "pred_sql": "SELECT document_status_description FROM Ref_Document_Status WHERE document_status_code = 'working'", "source_tables": ["ref_document_status"], "error_info": ""}, {"sample_id": 2100, "db_id": "cre_Doc_Control_Systems", "score": 1, "gold_sql": "SELECT document_type_code FROM Ref_Document_Types", "pred_sql": "SELECT document_type_code FROM Ref_Document_Types", "source_tables": ["ref_document_types"], "error_info": ""}, {"sample_id": 2101, "db_id": "cre_Doc_Control_Systems", "score": 1, "gold_sql": "SELECT document_type_description FROM Ref_Document_Types WHERE document_type_code = 'Paper'", "pred_sql": "SELECT document_type_description FROM Ref_Document_Types WHERE document_type_code = 'Paper'", "source_tables": ["ref_document_types"], "error_info": ""}, {"sample_id": 2102, "db_id": "cre_Doc_Control_Systems", "score": 1, "gold_sql": "SELECT shipping_agent_name FROM Ref_Shipping_Agents", "pred_sql": "SELECT shipping_agent_name FROM Ref_Shipping_Agents", "source_tables": ["ref_shipping_agents"], "error_info": ""}, {"sample_id": 2103, "db_id": "cre_Doc_Control_Systems", "score": 1, "gold_sql": "SELECT shipping_agent_code FROM Ref_Shipping_Agents WHERE shipping_agent_name = 'UPS'", "pred_sql": "SELECT shipping_agent_code FROM Ref_Shipping_Agents WHERE shipping_agent_name = 'UPS'", "source_tables": ["ref_shipping_agents"], "error_info": ""}, {"sample_id": 2104, "db_id": "cre_Doc_Control_Systems", "score": 1, "gold_sql": "SELECT role_code FROM ROLES", "pred_sql": "SELECT role_code FROM Roles", "source_tables": ["roles"], "error_info": ""}, {"sample_id": 2105, "db_id": "cre_Doc_Control_Systems", "score": 1, "gold_sql": "SELECT role_description FROM ROLES WHERE role_code = 'ED'", "pred_sql": "SELECT role_description FROM Roles WHERE role_code = 'ED'", "source_tables": ["roles"], "error_info": ""}, {"sample_id": 2106, "db_id": "cre_Doc_Control_Systems", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Employees", "pred_sql": "SELECT COUNT(*) AS employee_count FROM Employees", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 2107, "db_id": "cre_Doc_Control_Systems", "score": 1, "gold_sql": "SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = 'Koby'", "pred_sql": "SELECT r.role_description FROM Employees AS e JOIN Roles AS r ON e.role_code = r.role_code WHERE e.employee_name = 'Koby'", "source_tables": ["roles", "employees"], "error_info": ""}, {"sample_id": 2108, "db_id": "cre_Doc_Control_Systems", "score": 1, "gold_sql": "SELECT document_id, receipt_date FROM Documents", "pred_sql": "SELECT document_id, receipt_date FROM Documents", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 2109, "db_id": "cre_Doc_Control_Systems", "score": 1, "gold_sql": "SELECT T1.role_description, T2.role_code, COUNT(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code", "pred_sql": "SELECT Roles.role_description, Roles.role_code, COUNT(Employees.employee_id) AS number_of_employees FROM Roles LEFT JOIN Employees ON Roles.role_code = Employees.role_code GROUP BY Roles.role_code, Roles.role_description", "source_tables": ["roles", "employees"], "error_info": ""}, {"sample_id": 2110, "db_id": "cre_Doc_Control_Systems", "score": 1, "gold_sql": "SELECT Roles.role_description, COUNT(Employees.employee_id) FROM ROLES JOIN Employees ON Employees.role_code = Roles.role_code GROUP BY Employees.role_code HAVING COUNT(Employees.employee_id) > 1", "pred_sql": "SELECT r.role_description, COUNT(e.employee_id) AS number_of_employees FROM Roles AS r JOIN Employees AS e ON r.role_code = e.role_code GROUP BY r.role_description HAVING COUNT(e.employee_id) > 1", "source_tables": ["roles", "employees"], "error_info": ""}, {"sample_id": 2111, "db_id": "cre_Doc_Control_Systems", "score": 1, "gold_sql": "SELECT Ref_Document_Status.document_status_description FROM Ref_Document_Status JOIN Documents ON Documents.document_status_code = Ref_Document_Status.document_status_code WHERE Documents.document_id = 1", "pred_sql": "SELECT Ref_Document_Status.document_status_description FROM Documents JOIN Ref_Document_Status ON Documents.document_status_code = Ref_Document_Status.document_status_code WHERE Documents.document_id = 1", "source_tables": ["ref_document_status", "documents"], "error_info": ""}, {"sample_id": 2112, "db_id": "cre_Doc_Control_Systems", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Documents WHERE document_status_code = 'done'", "pred_sql": "SELECT COUNT(*) AS document_count FROM Documents WHERE document_status_code = 'done'", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 2113, "db_id": "cre_Doc_Control_Systems", "score": 1, "gold_sql": "SELECT document_type_code FROM Documents WHERE document_id = 2", "pred_sql": "SELECT document_type_code FROM Documents WHERE document_id = 2", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 2114, "db_id": "cre_Doc_Control_Systems", "score": 0, "gold_sql": "SELECT document_id FROM Documents WHERE document_status_code = 'done' AND document_type_code = 'Paper'", "pred_sql": "SELECT document_id FROM Documents WHERE document_status_code = (SELECT document_status_code FROM Ref_Document_Status WHERE document_status_description = 'done') AND document_type_code = (SELECT document_type_code FROM Ref_Document_Types WHERE document_type_description = 'paper')", "source_tables": ["documents"], "error_info": "Result not equal"}, {"sample_id": 2115, "db_id": "cre_Doc_Control_Systems", "score": 1, "gold_sql": "SELECT Ref_Shipping_Agents.shipping_agent_name FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Documents.document_id = 2", "pred_sql": "SELECT Ref_Shipping_Agents.shipping_agent_name FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Documents.document_id = 2", "source_tables": ["ref_shipping_agents", "documents"], "error_info": ""}, {"sample_id": 2116, "db_id": "cre_Doc_Control_Systems", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = 'USPS'", "pred_sql": "SELECT COUNT(*) AS total_documents FROM Documents WHERE shipping_agent_code = (SELECT shipping_agent_code FROM Ref_Shipping_Agents WHERE shipping_agent_name = 'USPS')", "source_tables": ["ref_shipping_agents", "documents"], "error_info": ""}, {"sample_id": 2117, "db_id": "cre_Doc_Control_Systems", "score": 1, "gold_sql": "SELECT Ref_Shipping_Agents.shipping_agent_name, COUNT(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY COUNT(Documents.document_id) DESC LIMIT 1", "pred_sql": "SELECT sa.shipping_agent_name, COUNT(d.document_id) AS document_count FROM Ref_Shipping_Agents AS sa JOIN Documents AS d ON sa.shipping_agent_code = d.shipping_agent_code GROUP BY sa.shipping_agent_name ORDER BY document_count DESC LIMIT 1", "source_tables": ["ref_shipping_agents", "documents"], "error_info": ""}, {"sample_id": 2118, "db_id": "cre_Doc_Control_Systems", "score": 1, "gold_sql": "SELECT receipt_date FROM Documents WHERE document_id = 3", "pred_sql": "SELECT receipt_date FROM Documents WHERE document_id = 3", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 2119, "db_id": "cre_Doc_Control_Systems", "score": 1, "gold_sql": "SELECT Addresses.address_details FROM Addresses JOIN Documents_Mailed ON Documents_Mailed.mailed_to_address_id = Addresses.address_id WHERE document_id = 4", "pred_sql": "SELECT Addresses.address_details FROM Documents_Mailed JOIN Addresses ON Documents_Mailed.mailed_to_address_id = Addresses.address_id WHERE Documents_Mailed.document_id = '4'", "source_tables": ["addresses", "documents_mailed"], "error_info": ""}, {"sample_id": 2120, "db_id": "cre_Doc_Control_Systems", "score": 1, "gold_sql": "SELECT mailing_date FROM Documents_Mailed WHERE document_id = 7", "pred_sql": "SELECT mailing_date FROM Documents_Mailed WHERE document_id = '7'", "source_tables": ["documents_mailed"], "error_info": ""}, {"sample_id": 2121, "db_id": "cre_Doc_Control_Systems", "score": 0, "gold_sql": "SELECT document_id FROM Documents WHERE document_status_code = 'done' AND document_type_code = 'Paper' EXCEPT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = 'USPS'", "pred_sql": "SELECT d.document_id FROM Documents AS d JOIN Ref_Document_Status AS ds ON d.document_status_code = ds.document_status_code JOIN Ref_Document_Types AS dt ON d.document_type_code = dt.document_type_code JOIN Ref_Shipping_Agents AS sa ON d.shipping_agent_code = sa.shipping_agent_code WHERE ds.document_status_description = 'done' AND dt.document_type_description = 'Paper' AND sa.shipping_agent_name <> 'USPS'", "source_tables": ["ref_shipping_agents", "documents"], "error_info": "Result not equal"}, {"sample_id": 2122, "db_id": "cre_Doc_Control_Systems", "score": 0, "gold_sql": "SELECT document_id FROM Documents WHERE document_status_code = 'done' AND document_type_code = 'Paper' INTERSECT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = 'USPS'", "pred_sql": "SELECT d.document_id FROM Documents AS d JOIN Ref_Document_Status AS ds ON d.document_status_code = ds.document_status_code JOIN Ref_Document_Types AS dt ON d.document_type_code = dt.document_type_code JOIN Ref_Shipping_Agents AS sa ON d.shipping_agent_code = sa.shipping_agent_code WHERE ds.document_status_description = 'done' AND dt.document_type_description = 'Paper' AND sa.shipping_agent_name = 'USPS'", "source_tables": ["ref_shipping_agents", "documents"], "error_info": "Result not equal"}, {"sample_id": 2123, "db_id": "cre_Doc_Control_Systems", "score": 1, "gold_sql": "SELECT draft_details FROM Document_Drafts WHERE document_id = 7", "pred_sql": "SELECT draft_details FROM Document_Drafts WHERE document_id = '7'", "source_tables": ["document_drafts"], "error_info": ""}, {"sample_id": 2124, "db_id": "cre_Doc_Control_Systems", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Draft_Copies WHERE document_id = 2", "pred_sql": "SELECT COUNT(*) AS draft_copy_count FROM Draft_Copies WHERE document_id = '2'", "source_tables": ["draft_copies"], "error_info": ""}, {"sample_id": 2125, "db_id": "cre_Doc_Control_Systems", "score": 1, "gold_sql": "SELECT document_id, COUNT(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY COUNT(copy_number) DESC LIMIT 1", "pred_sql": "SELECT dc.document_id, COUNT(dc.copy_number) AS number_of_draft_copies FROM Draft_Copies AS dc GROUP BY dc.document_id ORDER BY number_of_draft_copies DESC LIMIT 1", "source_tables": ["draft_copies"], "error_info": ""}, {"sample_id": 2126, "db_id": "cre_Doc_Control_Systems", "score": 1, "gold_sql": "SELECT document_id, COUNT(*) FROM Draft_Copies GROUP BY document_id HAVING COUNT(*) > 1", "pred_sql": "SELECT document_id, COUNT(copy_number) AS number_of_draft_copies FROM Draft_Copies GROUP BY document_id HAVING COUNT(copy_number) > 1", "source_tables": ["draft_copies"], "error_info": ""}, {"sample_id": 2127, "db_id": "cre_Doc_Control_Systems", "score": 1, "gold_sql": "SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = 1", "pred_sql": "SELECT Employees.employee_name FROM Circulation_History JOIN Employees ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = '1'", "source_tables": ["employees", "circulation_history"], "error_info": ""}, {"sample_id": 2128, "db_id": "cre_Doc_Control_Systems", "score": 1, "gold_sql": "SELECT employee_name FROM Employees EXCEPT SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id", "pred_sql": "SELECT employee_name FROM Employees WHERE NOT employee_id IN (SELECT employee_id FROM Circulation_History)", "source_tables": ["employees", "circulation_history"], "error_info": ""}, {"sample_id": 2129, "db_id": "cre_Doc_Control_Systems", "score": 0, "gold_sql": "SELECT Employees.employee_name, COUNT(*) FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id GROUP BY Circulation_History.document_id, Circulation_History.draft_number, Circulation_History.copy_number ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT e.employee_name, COUNT(ch.draft_number) AS total_drafts_and_copies FROM Employees AS e JOIN Circulation_History AS ch ON e.employee_id = ch.employee_id GROUP BY e.employee_id ORDER BY total_drafts_and_copies DESC LIMIT 1", "source_tables": ["employees", "circulation_history"], "error_info": "Result not equal"}, {"sample_id": 2130, "db_id": "cre_Doc_Control_Systems", "score": 1, "gold_sql": "SELECT document_id, COUNT(DISTINCT employee_id) FROM Circulation_History GROUP BY document_id", "pred_sql": "SELECT ch.document_id, COUNT(DISTINCT ch.employee_id) AS employee_count FROM Circulation_History AS ch GROUP BY ch.document_id", "source_tables": ["circulation_history"], "error_info": ""}, {"sample_id": 2131, "db_id": "company_1", "score": 1, "gold_sql": "SELECT dname FROM department ORDER BY mgr_start_date", "pred_sql": "SELECT Dname FROM department ORDER BY Mgr_start_date", "source_tables": ["department"], "error_info": ""}, {"sample_id": 2132, "db_id": "company_1", "score": 0, "gold_sql": "SELECT Dependent_name FROM dependent WHERE relationship = 'Spouse'", "pred_sql": "SELECT Dependent_name FROM dependent WHERE Relationship = 'spouse'", "source_tables": ["dependent"], "error_info": "Result not equal"}, {"sample_id": 2133, "db_id": "company_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM dependent WHERE sex = 'F'", "pred_sql": "SELECT COUNT(*) AS Female_Dependents_Count FROM dependent WHERE Sex = 'F'", "source_tables": ["dependent"], "error_info": ""}, {"sample_id": 2134, "db_id": "company_1", "score": 1, "gold_sql": "SELECT t1.dname FROM department AS t1 JOIN dept_locations AS t2 ON t1.dnumber = t2.dnumber WHERE t2.dlocation = 'Houston'", "pred_sql": "SELECT Dname FROM department AS d JOIN dept_locations AS dl ON d.Dnumber = dl.Dnumber WHERE dl.Dlocation = 'Houston'", "source_tables": ["department", "dept_locations"], "error_info": ""}, {"sample_id": 2135, "db_id": "company_1", "score": 1, "gold_sql": "SELECT fname, lname FROM employee WHERE salary > 30000", "pred_sql": "SELECT Fname, Lname FROM employee WHERE Salary > 30000", "source_tables": ["employee"], "error_info": ""}, {"sample_id": 2136, "db_id": "company_1", "score": 1, "gold_sql": "SELECT COUNT(*), sex FROM employee WHERE salary < 50000 GROUP BY sex", "pred_sql": "SELECT Sex, COUNT(*) AS Number_of_Employees FROM employee WHERE Salary < 50000 GROUP BY Sex", "source_tables": ["employee"], "error_info": ""}, {"sample_id": 2137, "db_id": "company_1", "score": 1, "gold_sql": "SELECT fname, lname, address FROM employee ORDER BY Bdate", "pred_sql": "SELECT Fname, Lname, Address FROM employee ORDER BY Bdate ASC", "source_tables": ["employee"], "error_info": ""}, {"sample_id": 2138, "db_id": "local_govt_in_alabama", "score": 1, "gold_sql": "SELECT T1.event_details FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID = T2.Service_ID WHERE T2.Service_Type_Code = 'Marriage'", "pred_sql": "SELECT Events.Event_Details FROM Events JOIN Services ON Events.Service_ID = Services.Service_ID WHERE Services.Service_Type_Code = 'Marriage'", "source_tables": ["services", "events"], "error_info": ""}, {"sample_id": 2139, "db_id": "local_govt_in_alabama", "score": 1, "gold_sql": "SELECT T1.event_id, T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY T1.Event_ID HAVING COUNT(*) > 1", "pred_sql": "SELECT Events.Event_ID, Events.Event_Details FROM Events JOIN Participants_in_Events ON Events.Event_ID = Participants_in_Events.Event_ID GROUP BY Events.Event_ID HAVING COUNT(Participants_in_Events.Participant_ID) > 1", "source_tables": ["participants_in_events", "events"], "error_info": ""}, {"sample_id": 2140, "db_id": "local_govt_in_alabama", "score": 0, "gold_sql": "SELECT T1.Participant_ID, T1.Participant_Type_Code, COUNT(*) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_ID", "pred_sql": "SELECT p.Participant_ID, p.Participant_Type_Code, COUNT(pie.Event_ID) AS Event_Count FROM Participants AS p LEFT JOIN Participants_in_Events AS pie ON p.Participant_ID = pie.Participant_ID GROUP BY p.Participant_ID, p.Participant_Type_Code", "source_tables": ["participants", "participants_in_events"], "error_info": "Result not equal"}, {"sample_id": 2141, "db_id": "local_govt_in_alabama", "score": 1, "gold_sql": "SELECT Participant_ID, Participant_Type_Code, Participant_Details FROM Participants", "pred_sql": "SELECT Participant_ID, Participant_Type_Code, Participant_Details FROM Participants", "source_tables": ["participants"], "error_info": ""}, {"sample_id": 2142, "db_id": "local_govt_in_alabama", "score": 1, "gold_sql": "SELECT COUNT(*) FROM participants WHERE participant_type_code = 'Organizer'", "pred_sql": "SELECT COUNT(*) AS Participant_Count FROM Participants WHERE Participant_Type_Code = 'Organizer'", "source_tables": ["participants"], "error_info": ""}, {"sample_id": 2143, "db_id": "local_govt_in_alabama", "score": 1, "gold_sql": "SELECT service_type_code FROM services ORDER BY service_type_code", "pred_sql": "SELECT DISTINCT Service_Type_Code FROM Services ORDER BY Service_Type_Code ASC", "source_tables": ["services"], "error_info": ""}, {"sample_id": 2144, "db_id": "local_govt_in_alabama", "score": 1, "gold_sql": "SELECT service_id, event_details FROM EVENTS", "pred_sql": "SELECT Events.Service_ID, Events.Event_Details FROM Events", "source_tables": ["events"], "error_info": ""}, {"sample_id": 2145, "db_id": "local_govt_in_alabama", "score": 1, "gold_sql": "SELECT COUNT(*) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID WHERE T1.participant_details LIKE '%Dr.%'", "pred_sql": "SELECT COUNT(DISTINCT Events.Event_ID) AS Event_Count FROM Events JOIN Participants_in_Events ON Events.Event_ID = Participants_in_Events.Event_ID JOIN Participants ON Participants_in_Events.Participant_ID = Participants.Participant_ID WHERE Participants.Participant_Details LIKE '%Dr.%'", "source_tables": ["participants", "participants_in_events"], "error_info": ""}, {"sample_id": 2146, "db_id": "local_govt_in_alabama", "score": 0, "gold_sql": "SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Participant_Type_Code, COUNT(*) AS Count FROM Participants GROUP BY Participant_Type_Code ORDER BY Count DESC LIMIT 1", "source_tables": ["participants"], "error_info": "Result not equal"}, {"sample_id": 2147, "db_id": "local_govt_in_alabama", "score": 1, "gold_sql": "SELECT T3.service_id, T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID = T3.Event_ID JOIN services AS T4 ON T3.service_id = T4.service_id GROUP BY T3.service_id ORDER BY COUNT(*) ASC LIMIT 1", "pred_sql": "SELECT S.Service_ID, S.Service_Type_Code FROM Services AS S LEFT JOIN Events AS E ON S.Service_ID = E.Service_ID LEFT JOIN Participants_in_Events AS P ON E.Event_ID = P.Event_ID GROUP BY S.Service_ID, S.Service_Type_Code ORDER BY COUNT(P.Participant_ID) ASC LIMIT 1", "source_tables": ["services", "participants", "events", "participants_in_events"], "error_info": ""}, {"sample_id": 2148, "db_id": "local_govt_in_alabama", "score": 1, "gold_sql": "SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY COUNT(Participant_ID) DESC LIMIT 1", "source_tables": ["participants_in_events"], "error_info": ""}, {"sample_id": 2149, "db_id": "local_govt_in_alabama", "score": 0, "gold_sql": "SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID = T2.Participant_ID WHERE Participant_Details = 'Kenyatta Kuhn'", "pred_sql": "SELECT Events.Event_ID FROM Events LEFT JOIN Participants_in_Events ON Events.Event_ID = Participants_in_Events.Event_ID LEFT JOIN Participants ON Participants_in_Events.Participant_ID = Participants.Participant_ID WHERE Participants.Participant_Details <> 'Kenyatta Kuhn' OR Participants.Participant_ID IS NULL GROUP BY Events.Event_ID HAVING COUNT(Participants.Participant_ID) = 0", "source_tables": ["participants_in_events", "participants", "events"], "error_info": "Result not equal"}, {"sample_id": 2150, "db_id": "local_govt_in_alabama", "score": 0, "gold_sql": "SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id = T2.service_id WHERE T2.event_details = 'Success' INTERSECT SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id = T2.service_id WHERE T2.event_details = 'Fail'", "pred_sql": "SELECT DISTINCT S.Service_Type_Code FROM Services AS S JOIN Events AS E ON S.Service_ID = E.Service_ID WHERE E.Event_Details IN ('successful', 'failure') GROUP BY S.Service_Type_Code HAVING COUNT(DISTINCT E.Event_Details) = 2", "source_tables": ["services", "events"], "error_info": "Result not equal"}, {"sample_id": 2151, "db_id": "local_govt_in_alabama", "score": 1, "gold_sql": "SELECT COUNT(*) FROM EVENTS WHERE NOT event_id IN (SELECT event_id FROM Participants_in_Events)", "pred_sql": "SELECT COUNT(*) AS No_Participants FROM Events WHERE NOT Event_ID IN (SELECT Event_ID FROM Participants_in_Events)", "source_tables": ["participants_in_events", "events"], "error_info": ""}, {"sample_id": 2152, "db_id": "local_govt_in_alabama", "score": 0, "gold_sql": "SELECT COUNT(DISTINCT participant_id) FROM participants_in_Events", "pred_sql": "SELECT DISTINCT Participant_ID FROM Participants_in_Events", "source_tables": ["participants_in_events"], "error_info": "Result not equal"}, {"sample_id": 2153, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT name FROM races ORDER BY date DESC LIMIT 1", "pred_sql": "SELECT name FROM races ORDER BY date DESC LIMIT 1", "source_tables": ["races"], "error_info": ""}, {"sample_id": 2154, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT name FROM races ORDER BY date DESC LIMIT 1", "pred_sql": "SELECT name FROM races ORDER BY date DESC LIMIT 1", "source_tables": ["races"], "error_info": ""}, {"sample_id": 2155, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT name, date FROM races ORDER BY date DESC LIMIT 1", "pred_sql": "SELECT name, date FROM races ORDER BY date DESC LIMIT 1", "source_tables": ["races"], "error_info": ""}, {"sample_id": 2156, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT name, date FROM races ORDER BY date DESC LIMIT 1", "pred_sql": "SELECT name, date FROM races ORDER BY date DESC LIMIT 1", "source_tables": ["races"], "error_info": ""}, {"sample_id": 2157, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT name FROM races WHERE YEAR = 2017", "pred_sql": "SELECT name FROM races WHERE year = 2017", "source_tables": ["races"], "error_info": ""}, {"sample_id": 2158, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT name FROM races WHERE YEAR = 2017", "pred_sql": "SELECT name FROM races WHERE year = 2017", "source_tables": ["races"], "error_info": ""}, {"sample_id": 2159, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017", "pred_sql": "SELECT DISTINCT name FROM races WHERE year BETWEEN 2014 AND 2017", "source_tables": ["races"], "error_info": ""}, {"sample_id": 2160, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017", "pred_sql": "SELECT DISTINCT name FROM races WHERE year BETWEEN 2014 AND 2017", "source_tables": ["races"], "error_info": ""}, {"sample_id": 2161, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT DISTINCT T1.forename, T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000", "pred_sql": "SELECT DISTINCT d.forename, d.surname FROM drivers AS d JOIN lapTimes AS lt ON d.driverId = lt.driverId WHERE lt.time < 93000", "source_tables": ["laptimes", "drivers"], "error_info": ""}, {"sample_id": 2162, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT DISTINCT T1.forename, T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000", "pred_sql": "SELECT DISTINCT d.forename, d.surname FROM drivers AS d JOIN lapTimes AS l ON d.driverId = l.driverId WHERE l.time < 93000", "source_tables": ["laptimes", "drivers"], "error_info": ""}, {"sample_id": 2163, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT DISTINCT T1.driverid, T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds > 100000", "pred_sql": "SELECT DISTINCT drivers.driverId, drivers.nationality FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE lapTimes.time > 100000", "source_tables": ["laptimes", "drivers"], "error_info": ""}, {"sample_id": 2164, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT DISTINCT T1.driverid, T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds > 100000", "pred_sql": "SELECT DISTINCT drivers.driverId, drivers.nationality FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE lapTimes.time > 100000", "source_tables": ["laptimes", "drivers"], "error_info": ""}, {"sample_id": 2165, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT T1.forename, T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1", "pred_sql": "SELECT d.forename, d.surname FROM drivers AS d JOIN lapTimes AS lt ON d.driverId = lt.driverId ORDER BY lt.time ASC LIMIT 1", "source_tables": ["laptimes", "drivers"], "error_info": ""}, {"sample_id": 2166, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT T1.forename, T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1", "pred_sql": "SELECT d.forename, d.surname FROM drivers AS d JOIN lapTimes AS lt ON d.driverId = lt.driverId WHERE lt.time = (SELECT MIN(time) FROM lapTimes)", "source_tables": ["laptimes", "drivers"], "error_info": ""}, {"sample_id": 2167, "db_id": "formula_1", "score": 0, "gold_sql": "SELECT T1.driverid, T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1", "pred_sql": "SELECT driverId, surname FROM results JOIN drivers ON results.driverId = drivers.driverId ORDER BY time DESC LIMIT 1", "source_tables": ["laptimes", "drivers"], "error_info": "Predction Execution Error:ambiguous column name: driverId"}, {"sample_id": 2168, "db_id": "formula_1", "score": 0, "gold_sql": "SELECT T1.driverid, T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1", "pred_sql": "SELECT driverId, surname FROM results JOIN drivers ON results.driverId = drivers.driverId ORDER BY time DESC LIMIT 1", "source_tables": ["laptimes", "drivers"], "error_info": "Predction Execution Error:ambiguous column name: driverId"}, {"sample_id": 2169, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT T1.driverid, T1.forename, T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION = '1' GROUP BY T1.driverid HAVING COUNT(*) >= 2", "pred_sql": "SELECT d.driverId, d.forename, d.surname FROM drivers AS d JOIN lapTimes AS lt ON d.driverId = lt.driverId JOIN (SELECT driverId, COUNT(*) AS lapCount FROM lapTimes WHERE position = 1 GROUP BY driverId HAVING lapCount >= 2) AS firstPositionDrivers ON d.driverId = firstPositionDrivers.driverId", "source_tables": ["laptimes", "drivers"], "error_info": ""}, {"sample_id": 2170, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT T1.driverid, T1.forename, T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION = '1' GROUP BY T1.driverid HAVING COUNT(*) >= 2", "pred_sql": "SELECT d.driverId, d.forename, d.surname FROM drivers AS d JOIN lapTimes AS lt ON d.driverId = lt.driverId WHERE lt.position = 1 GROUP BY d.driverId HAVING COUNT(lt.lap) >= 2", "source_tables": ["laptimes", "drivers"], "error_info": ""}, {"sample_id": 2171, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = 'Australian Grand Prix' AND YEAR = 2009", "pred_sql": "SELECT COUNT(DISTINCT results.driverId) AS driver_count FROM results JOIN races ON results.raceId = races.raceId WHERE races.name = 'Australian Grand Prix' AND races.year = 2009", "source_tables": ["results", "races"], "error_info": ""}, {"sample_id": 2172, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = 'Australian Grand Prix' AND YEAR = 2009", "pred_sql": "SELECT COUNT(DISTINCT results.driverId) AS driver_count FROM races JOIN results ON races.raceId = results.raceId WHERE races.year = 2009 AND races.name = 'Australian Grand Prix'", "source_tables": ["results", "races"], "error_info": ""}, {"sample_id": 2173, "db_id": "formula_1", "score": 0, "gold_sql": "SELECT COUNT(DISTINCT driverId) FROM results WHERE NOT raceId IN (SELECT raceId FROM races WHERE YEAR <> 2009)", "pred_sql": "SELECT COUNT(DISTINCT d.driverId) AS drivers_not_participated FROM drivers AS d WHERE NOT d.driverId IN (SELECT r.driverId FROM results AS r JOIN races AS ra ON r.raceId = ra.raceId WHERE ra.year = 2009)", "source_tables": ["results", "races"], "error_info": "Result not equal"}, {"sample_id": 2174, "db_id": "formula_1", "score": 0, "gold_sql": "SELECT COUNT(DISTINCT driverId) FROM results WHERE NOT raceId IN (SELECT raceId FROM races WHERE YEAR <> 2009)", "pred_sql": "SELECT COUNT(DISTINCT driverId) AS drivers_not_raced_in_2009 FROM drivers WHERE NOT driverId IN (SELECT DISTINCT driverId FROM results WHERE raceId IN (SELECT raceId FROM races WHERE year = 2009))", "source_tables": ["results", "races"], "error_info": "Result not equal"}, {"sample_id": 2175, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT T2.name, T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = 'Lewis'", "pred_sql": "SELECT races.name, races.year FROM races JOIN results ON races.raceId = results.raceId JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis'", "source_tables": ["results", "drivers", "races"], "error_info": ""}, {"sample_id": 2176, "db_id": "formula_1", "score": 0, "gold_sql": "SELECT T2.name, T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = 'Lewis'", "pred_sql": "SELECT races.name, races.year FROM races JOIN results ON races.raceId = results.raceId JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.surname = 'Lewis'", "source_tables": ["results", "drivers", "races"], "error_info": "Result not equal"}, {"sample_id": 2177, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT forename, surname FROM drivers WHERE nationality = 'German'", "pred_sql": "SELECT forename, surname FROM drivers WHERE nationality = 'German'", "source_tables": ["drivers"], "error_info": ""}, {"sample_id": 2178, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT forename, surname FROM drivers WHERE nationality = 'German'", "pred_sql": "SELECT forename, surname FROM drivers WHERE nationality = 'German'", "source_tables": ["drivers"], "error_info": ""}, {"sample_id": 2179, "db_id": "formula_1", "score": 0, "gold_sql": "SELECT T2.driverid, T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = 'Australian Grand Prix' INTERSECT SELECT T2.driverid, T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = 'Chinese Grand Prix'", "pred_sql": "SELECT d.driverId, d.forename FROM drivers AS d JOIN results AS r1 ON d.driverId = r1.driverId JOIN races AS ra ON r1.raceId = ra.raceId WHERE ra.name = 'Australian Grand Prix' AND d.driverId IN (SELECT r2.driverId FROM results AS r2 JOIN races AS rb ON r2.raceId = rb.raceId WHERE rb.name = 'Chinese Grand Prix')", "source_tables": ["races", "drivers", "results"], "error_info": "Result not equal"}, {"sample_id": 2180, "db_id": "formula_1", "score": 0, "gold_sql": "SELECT T2.driverid, T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = 'Australian Grand Prix' INTERSECT SELECT T2.driverid, T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = 'Chinese Grand Prix'", "pred_sql": "SELECT d.driverId, d.forename FROM drivers AS d JOIN results AS r ON d.driverId = r.driverId JOIN races AS ra ON r.raceId = ra.raceId WHERE ra.name IN ('Australian Grand Prix', 'Chinese Grand Prix') GROUP BY d.driverId, d.forename", "source_tables": ["races", "drivers", "results"], "error_info": "Result not equal"}, {"sample_id": 2181, "db_id": "formula_1", "score": 0, "gold_sql": "SELECT T3.forename, T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = 'Australian Grand Prix' EXCEPT SELECT T3.forename, T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = 'Chinese Grand Prix'", "pred_sql": "SELECT d.forename, d.surname FROM drivers AS d JOIN results AS r ON d.driverId = r.driverId JOIN races AS ra ON r.raceId = ra.raceId WHERE ra.name = 'Australian Grand Prix' AND NOT d.driverId IN (SELECT r2.driverId FROM results AS r2 JOIN races AS rb ON r2.raceId = rb.raceId WHERE rb.name = 'Chinese Grand Prix')", "source_tables": ["races", "drivers", "results"], "error_info": "Result not equal"}, {"sample_id": 2182, "db_id": "formula_1", "score": 0, "gold_sql": "SELECT T3.forename, T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = 'Australian Grand Prix' EXCEPT SELECT T3.forename, T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = 'Chinese Grand Prix'", "pred_sql": "SELECT d.forename, d.surname FROM drivers AS d JOIN results AS r1 ON d.driverId = r1.driverId JOIN races AS ra ON r1.raceId = ra.raceId WHERE ra.name = 'Australian Grand Prix' AND NOT d.driverId IN (SELECT d2.driverId FROM drivers AS d2 JOIN results AS r2 ON d2.driverId = r2.driverId JOIN races AS rb ON r2.raceId = rb.raceId WHERE rb.name = 'Chinese Grand Prix')", "source_tables": ["races", "drivers", "results"], "error_info": "Result not equal"}, {"sample_id": 2183, "db_id": "formula_1", "score": 0, "gold_sql": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1", "pred_sql": "SELECT DISTINCT d.forename FROM drivers AS d JOIN driverStandings AS ds ON d.driverId = ds.driverId WHERE ds.position = 1 AND ds.wins > 0", "source_tables": ["drivers", "driverstandings"], "error_info": "Result not equal"}, {"sample_id": 2184, "db_id": "formula_1", "score": 0, "gold_sql": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1", "pred_sql": "SELECT DISTINCT d.forename FROM drivers AS d JOIN driverStandings AS ds ON d.driverId = ds.driverId WHERE ds.position = 1", "source_tables": ["drivers", "driverstandings"], "error_info": "Result not equal"}, {"sample_id": 2185, "db_id": "formula_1", "score": 0, "gold_sql": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20", "pred_sql": "SELECT DISTINCT d.forename FROM drivers AS d JOIN driverStandings AS ds ON d.driverId = ds.driverId WHERE ds.position = 1 AND ds.points > 20", "source_tables": ["drivers", "driverstandings"], "error_info": "Result not equal"}, {"sample_id": 2186, "db_id": "formula_1", "score": 0, "gold_sql": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20", "pred_sql": "SELECT DISTINCT d.forename FROM drivers AS d JOIN driverStandings AS ds ON d.driverId = ds.driverId WHERE ds.position = 1 AND ds.points > 20", "source_tables": ["drivers", "driverstandings"], "error_info": "Result not equal"}, {"sample_id": 2187, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT COUNT(*), nationality FROM constructors GROUP BY nationality", "pred_sql": "SELECT nationality, COUNT(constructorId) AS constructor_count FROM constructors GROUP BY nationality", "source_tables": ["constructors"], "error_info": ""}, {"sample_id": 2188, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT COUNT(*), nationality FROM constructors GROUP BY nationality", "pred_sql": "SELECT nationality, COUNT(DISTINCT constructorId) AS constructor_count FROM constructors GROUP BY nationality", "source_tables": ["constructors"], "error_info": ""}, {"sample_id": 2189, "db_id": "formula_1", "score": 0, "gold_sql": "SELECT COUNT(*), constructorid FROM constructorStandings GROUP BY constructorid", "pred_sql": "SELECT constructorId, COUNT(raceId) AS number_of_races FROM constructorResults GROUP BY constructorId", "source_tables": ["constructorstandings"], "error_info": "Result not equal"}, {"sample_id": 2190, "db_id": "formula_1", "score": 0, "gold_sql": "SELECT COUNT(*), constructorid FROM constructorStandings GROUP BY constructorid", "pred_sql": "SELECT constructorId, COUNT(raceId) AS race_count FROM constructorResults GROUP BY constructorId", "source_tables": ["constructorstandings"], "error_info": "Result not equal"}, {"sample_id": 2191, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = 'Spain' AND T1.year > 2017", "pred_sql": "SELECT races.name FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year > 2017 AND circuits.country = 'Spain'", "source_tables": ["races", "circuits"], "error_info": ""}, {"sample_id": 2192, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = 'Spain' AND T1.year > 2017", "pred_sql": "SELECT races.name FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year > 2017 AND circuits.country = 'Spain'", "source_tables": ["races", "circuits"], "error_info": ""}, {"sample_id": 2193, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = 'Spain' AND T1.year > 2000", "pred_sql": "SELECT DISTINCT races.name FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year > 2000 AND circuits.country = 'Spain'", "source_tables": ["races", "circuits"], "error_info": ""}, {"sample_id": 2194, "db_id": "formula_1", "score": 0, "gold_sql": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = 'Spain' AND T1.year > 2000", "pred_sql": "SELECT races.name FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year > 2000 AND circuits.country = 'Spain'", "source_tables": ["races", "circuits"], "error_info": "Result not equal"}, {"sample_id": 2195, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT DISTINCT driverid, STOP FROM pitstops WHERE duration < (SELECT MAX(duration) FROM pitstops WHERE raceid = 841)", "pred_sql": "SELECT DISTINCT p.driverId, p.stop FROM pitStops AS p WHERE p.duration < (SELECT MIN(p2.duration) FROM pitStops AS p2 WHERE p2.raceId = 841)", "source_tables": ["pitstops"], "error_info": ""}, {"sample_id": 2196, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT DISTINCT driverid, STOP FROM pitstops WHERE duration < (SELECT MAX(duration) FROM pitstops WHERE raceid = 841)", "pred_sql": "SELECT p.driverId, p.stop FROM pitStops AS p JOIN (SELECT driverId, MIN(duration) AS min_duration FROM pitStops WHERE raceId = 841 GROUP BY driverId) AS ref ON p.driverId = ref.driverId WHERE p.duration < ref.min_duration", "source_tables": ["pitstops"], "error_info": ""}, {"sample_id": 2197, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT DISTINCT driverid, STOP FROM pitstops WHERE duration > (SELECT MIN(duration) FROM pitstops WHERE raceid = 841)", "pred_sql": "SELECT DISTINCT p1.driverId FROM pitStops AS p1 WHERE p1.duration > (SELECT MAX(p2.duration) FROM pitStops AS p2 WHERE p2.raceId = 841)", "source_tables": ["pitstops"], "error_info": ""}, {"sample_id": 2198, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT DISTINCT driverid, STOP FROM pitstops WHERE duration > (SELECT MIN(duration) FROM pitstops WHERE raceid = 841)", "pred_sql": "SELECT p.driverId, p.duration FROM pitStops AS p WHERE p.duration > (SELECT duration FROM pitStops WHERE raceId = 841)", "source_tables": ["pitstops"], "error_info": ""}, {"sample_id": 2199, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC", "pred_sql": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC", "source_tables": ["drivers"], "error_info": ""}, {"sample_id": 2200, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC", "pred_sql": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC", "source_tables": ["drivers"], "error_info": ""}, {"sample_id": 2201, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT DISTINCT name FROM races ORDER BY name DESC", "pred_sql": "SELECT DISTINCT name FROM races ORDER BY name DESC", "source_tables": ["races"], "error_info": ""}, {"sample_id": 2202, "db_id": "formula_1", "score": 0, "gold_sql": "SELECT DISTINCT name FROM races ORDER BY name DESC", "pred_sql": "SELECT name FROM races ORDER BY name DESC", "source_tables": ["races"], "error_info": "Result not equal"}, {"sample_id": 2203, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011", "pred_sql": "SELECT name FROM races WHERE year BETWEEN 2009 AND 2011", "source_tables": ["races"], "error_info": ""}, {"sample_id": 2204, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011", "pred_sql": "SELECT name FROM races WHERE year BETWEEN 2009 AND 2011", "source_tables": ["races"], "error_info": ""}, {"sample_id": 2205, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT name FROM races WHERE TIME > '12:00:00' OR TIME < '09:00:00'", "pred_sql": "SELECT name FROM races WHERE time > '12:00:00' OR time < '09:00:00'", "source_tables": ["races"], "error_info": ""}, {"sample_id": 2206, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT name FROM races WHERE TIME > '12:00:00' OR TIME < '09:00:00'", "pred_sql": "SELECT name FROM races WHERE time > '12:00:00' OR time < '09:00:00'", "source_tables": ["races"], "error_info": ""}, {"sample_id": 2207, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT T1.forename, T1.surname, T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING COUNT(*) > 8 UNION SELECT T1.forename, T1.surname, T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING COUNT(*) > 5", "pred_sql": "SELECT DISTINCT d.driverId, d.forename, d.surname FROM drivers AS d LEFT JOIN pitStops AS p ON d.driverId = p.driverId LEFT JOIN results AS r ON d.driverId = r.driverId GROUP BY d.driverId HAVING COUNT(DISTINCT p.stop) > 8 OR COUNT(DISTINCT r.resultId) > 5", "source_tables": ["results", "drivers", "pitstops"], "error_info": ""}, {"sample_id": 2208, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT T1.forename, T1.surname, T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING COUNT(*) > 8 UNION SELECT T1.forename, T1.surname, T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING COUNT(*) > 5", "pred_sql": "SELECT d.forename, d.surname, d.driverId FROM drivers AS d JOIN (SELECT p.driverId FROM pitStops AS p GROUP BY p.driverId HAVING COUNT(p.stop) > 8) AS stops ON d.driverId = stops.driverId UNION SELECT d.forename, d.surname, d.driverId FROM drivers AS d JOIN (SELECT r.driverId FROM results AS r GROUP BY r.driverId HAVING COUNT(r.raceId) > 5) AS races ON d.driverId = races.driverId", "source_tables": ["results", "drivers", "pitstops"], "error_info": ""}, {"sample_id": 2209, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT T1.surname, T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING COUNT(*) = 11 INTERSECT SELECT T1.surname, T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING COUNT(*) > 5", "pred_sql": "SELECT d.surname, d.driverId FROM drivers AS d JOIN pitStops AS p ON d.driverId = p.driverId JOIN results AS r ON d.driverId = r.driverId GROUP BY d.driverId HAVING COUNT(DISTINCT p.stop) = 11 AND COUNT(DISTINCT r.raceId) > 5", "source_tables": ["results", "drivers", "pitstops"], "error_info": ""}, {"sample_id": 2210, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT T1.surname, T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING COUNT(*) = 11 INTERSECT SELECT T1.surname, T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING COUNT(*) > 5", "pred_sql": "SELECT d.surname, d.driverId FROM drivers AS d JOIN pitStops AS p ON d.driverId = p.driverId JOIN results AS r ON d.driverId = r.driverId GROUP BY d.driverId HAVING COUNT(DISTINCT p.raceId) = 11 AND COUNT(DISTINCT r.raceId) > 5", "source_tables": ["results", "drivers", "pitstops"], "error_info": ""}, {"sample_id": 2211, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT T1.driverid, T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT d.driverId, d.surname FROM drivers AS d JOIN results AS r ON d.driverId = r.driverId JOIN races AS ra ON r.raceId = ra.raceId WHERE ra.year > 2010 GROUP BY d.driverId ORDER BY COUNT(r.raceId) DESC LIMIT 1", "source_tables": ["results", "drivers", "races"], "error_info": ""}, {"sample_id": 2212, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT T1.driverid, T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT d.driverId, d.surname FROM drivers AS d JOIN results AS r ON d.driverId = r.driverId JOIN races AS ra ON r.raceId = ra.raceId WHERE ra.year > 2010 GROUP BY d.driverId ORDER BY COUNT(r.raceId) DESC LIMIT 1", "source_tables": ["results", "drivers", "races"], "error_info": ""}, {"sample_id": 2213, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT name FROM circuits WHERE country = 'UK' OR country = 'Malaysia'", "pred_sql": "SELECT name FROM circuits WHERE country IN ('UK', 'Malaysia')", "source_tables": ["circuits"], "error_info": ""}, {"sample_id": 2214, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT name FROM circuits WHERE country = 'UK' OR country = 'Malaysia'", "pred_sql": "SELECT name FROM circuits WHERE country IN ('UK', 'Malaysia')", "source_tables": ["circuits"], "error_info": ""}, {"sample_id": 2215, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT circuitid, LOCATION FROM circuits WHERE country = 'France' OR country = 'Belgium'", "pred_sql": "SELECT circuitId, location FROM circuits WHERE country IN ('France', 'Belgium')", "source_tables": ["circuits"], "error_info": ""}, {"sample_id": 2216, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT circuitid, LOCATION FROM circuits WHERE country = 'France' OR country = 'Belgium'", "pred_sql": "SELECT circuitId, location FROM circuits WHERE country IN ('France', 'Belgium')", "source_tables": ["circuits"], "error_info": ""}, {"sample_id": 2217, "db_id": "formula_1", "score": 0, "gold_sql": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = 'Japanese' AND T2.points > 5", "pred_sql": "SELECT DISTINCT c.name FROM constructors AS c JOIN constructorResults AS cr ON c.constructorId = cr.constructorId WHERE c.nationality = 'Japanese' AND cr.points > 5", "source_tables": ["constructorstandings", "constructors"], "error_info": "Result not equal"}, {"sample_id": 2218, "db_id": "formula_1", "score": 0, "gold_sql": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = 'Japanese' AND T2.points > 5", "pred_sql": "SELECT name FROM constructors WHERE nationality = 'Japanese' AND constructorId IN (SELECT constructorId FROM constructorResults GROUP BY constructorId HAVING SUM(points) > 5)", "source_tables": ["constructorstandings", "constructors"], "error_info": "Result not equal"}, {"sample_id": 2219, "db_id": "formula_1", "score": 0, "gold_sql": "SELECT AVG(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = 'Monaco Grand Prix'", "pred_sql": "SELECT AVG(lapTimes.fastestLapSpeed) AS average_fastest_lap_speed FROM races JOIN lapTimes ON races.raceId = lapTimes.raceId WHERE races.name = 'Monaco Grand Prix' AND races.year = 2008", "source_tables": ["races", "results"], "error_info": "Predction Execution Error:no such column: lapTimes.fastestLapSpeed"}, {"sample_id": 2220, "db_id": "formula_1", "score": 0, "gold_sql": "SELECT AVG(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = 'Monaco Grand Prix'", "pred_sql": "SELECT AVG(lapTimes.fastestLapSpeed) AS average_fastest_lap_speed FROM races JOIN lapTimes ON races.raceId = lapTimes.raceId JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Monaco Grand Prix' AND races.year = 2008", "source_tables": ["races", "results"], "error_info": "Predction Execution Error:no such column: lapTimes.fastestLapSpeed"}, {"sample_id": 2221, "db_id": "formula_1", "score": 0, "gold_sql": "SELECT MAX(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = 'Monaco Grand Prix'", "pred_sql": "SELECT MAX(lapTimes.fastestLapSpeed) AS max_fastest_lap_speed FROM races JOIN lapTimes ON races.raceId = lapTimes.raceId WHERE races.name = 'Monaco Grand Prix' AND races.year = 2008", "source_tables": ["races", "results"], "error_info": "Predction Execution Error:no such column: lapTimes.fastestLapSpeed"}, {"sample_id": 2222, "db_id": "formula_1", "score": 0, "gold_sql": "SELECT MAX(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = 'Monaco Grand Prix'", "pred_sql": "SELECT MAX(fastestLapSpeed) AS max_fastest_lap_speed FROM lapTimes JOIN races ON lapTimes.raceId = races.raceId JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Monaco Grand Prix' AND races.year = 2008", "source_tables": ["races", "results"], "error_info": "Predction Execution Error:no such column: fastestLapSpeed"}, {"sample_id": 2223, "db_id": "formula_1", "score": 0, "gold_sql": "SELECT MAX(T2.fastestlapspeed), T1.name, T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year", "pred_sql": "SELECT r.name AS race_name, MAX(l.fastestLapSpeed) AS max_fastest_lap_speed FROM races AS r JOIN lapTimes AS l ON r.raceId = l.raceId WHERE r.year > 2004 GROUP BY r.name ORDER BY r.year", "source_tables": ["races", "results"], "error_info": "Predction Execution Error:no such column: l.fastestLapSpeed"}, {"sample_id": 2224, "db_id": "formula_1", "score": 0, "gold_sql": "SELECT MAX(T2.fastestlapspeed), T1.name, T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year", "pred_sql": "SELECT r.name AS race_name, MAX(l.fastestLapSpeed) AS max_fastest_lap_speed FROM races AS r JOIN results AS res ON r.raceId = res.raceId JOIN lapTimes AS l ON res.raceId = l.raceId AND res.driverId = l.driverId WHERE r.year > 2004 GROUP BY r.name ORDER BY r.year", "source_tables": ["races", "results"], "error_info": "Predction Execution Error:no such column: l.fastestLapSpeed"}, {"sample_id": 2225, "db_id": "formula_1", "score": 0, "gold_sql": "SELECT AVG(T2.fastestlapspeed), T1.name, T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year", "pred_sql": "SELECT r.name AS race_name, AVG(l.fastestLapSpeed) AS average_fastest_lap_speed FROM races AS r JOIN lapTimes AS l ON r.raceId = l.raceId WHERE r.year > 2004 GROUP BY r.name ORDER BY r.year", "source_tables": ["races", "results"], "error_info": "Predction Execution Error:no such column: l.fastestLapSpeed"}, {"sample_id": 2226, "db_id": "formula_1", "score": 0, "gold_sql": "SELECT AVG(T2.fastestlapspeed), T1.name, T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year", "pred_sql": "SELECT r.year, AVG(l.fastestLapSpeed) AS average_fastest_lap_speed FROM races AS r JOIN lapTimes AS l ON r.raceId = l.raceId WHERE r.year > 2004 GROUP BY r.year ORDER BY r.year", "source_tables": ["races", "results"], "error_info": "Predction Execution Error:no such column: l.fastestLapSpeed"}, {"sample_id": 2227, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT T1.driverid, T1.forename, COUNT(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING COUNT(*) >= 2", "pred_sql": "SELECT d.driverId, d.forename, COUNT(r.raceId) AS number_of_races FROM drivers AS d JOIN results AS res ON d.driverId = res.driverId JOIN races AS r ON res.raceId = r.raceId GROUP BY d.driverId, d.forename HAVING COUNT(r.raceId) >= 2", "source_tables": ["results", "drivers", "races"], "error_info": ""}, {"sample_id": 2228, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT T1.driverid, T1.forename, COUNT(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING COUNT(*) >= 2", "pred_sql": "SELECT d.driverId, d.forename, COUNT(r.raceId) AS number_of_races FROM drivers AS d JOIN results AS res ON d.driverId = res.driverId JOIN races AS r ON res.raceId = r.raceId GROUP BY d.driverId, d.forename HAVING COUNT(r.raceId) >= 2", "source_tables": ["results", "drivers", "races"], "error_info": ""}, {"sample_id": 2229, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT T1.driverid, COUNT(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING COUNT(*) <= 30", "pred_sql": "SELECT driverId, COUNT(raceId) AS number_of_races FROM results GROUP BY driverId HAVING COUNT(raceId) <= 30", "source_tables": ["results", "drivers", "races"], "error_info": ""}, {"sample_id": 2230, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT T1.driverid, COUNT(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING COUNT(*) <= 30", "pred_sql": "SELECT driverId, COUNT(raceId) AS race_count FROM results GROUP BY driverId HAVING COUNT(raceId) <= 30", "source_tables": ["results", "drivers", "races"], "error_info": ""}, {"sample_id": 2231, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT T1.driverid, T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT driverId, surname FROM drivers WHERE driverId = (SELECT driverId FROM results GROUP BY driverId ORDER BY COUNT(raceId) DESC LIMIT 1)", "source_tables": ["results", "drivers", "races"], "error_info": ""}, {"sample_id": 2232, "db_id": "formula_1", "score": 1, "gold_sql": "SELECT T1.driverid, T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT driverId, surname FROM drivers WHERE driverId IN (SELECT driverId FROM results GROUP BY driverId ORDER BY COUNT(raceId) DESC LIMIT 1)", "source_tables": ["results", "drivers", "races"], "error_info": ""}, {"sample_id": 2233, "db_id": "machine_repair", "score": 1, "gold_sql": "SELECT COUNT(*) FROM technician", "pred_sql": "SELECT COUNT(*) AS technician_count FROM technician", "source_tables": ["technician"], "error_info": ""}, {"sample_id": 2234, "db_id": "machine_repair", "score": 1, "gold_sql": "SELECT COUNT(*) FROM technician", "pred_sql": "SELECT COUNT(*) AS number_of_technicians FROM technician", "source_tables": ["technician"], "error_info": ""}, {"sample_id": 2235, "db_id": "machine_repair", "score": 1, "gold_sql": "SELECT Name FROM technician ORDER BY Age ASC", "pred_sql": "SELECT Name FROM technician ORDER BY Age ASC", "source_tables": ["technician"], "error_info": ""}, {"sample_id": 2236, "db_id": "machine_repair", "score": 1, "gold_sql": "SELECT Name FROM technician ORDER BY Age ASC", "pred_sql": "SELECT Name FROM technician ORDER BY Age ASC", "source_tables": ["technician"], "error_info": ""}, {"sample_id": 2237, "db_id": "machine_repair", "score": 1, "gold_sql": "SELECT Team, Starting_Year FROM technician", "pred_sql": "SELECT Team, Starting_Year FROM technician", "source_tables": ["technician"], "error_info": ""}, {"sample_id": 2238, "db_id": "machine_repair", "score": 1, "gold_sql": "SELECT Team, Starting_Year FROM technician", "pred_sql": "SELECT Team, Starting_Year FROM technician", "source_tables": ["technician"], "error_info": ""}, {"sample_id": 2239, "db_id": "machine_repair", "score": 1, "gold_sql": "SELECT Name FROM technician WHERE Team <> 'NYY'", "pred_sql": "SELECT Name FROM technician WHERE Team <> 'NYY'", "source_tables": ["technician"], "error_info": ""}, {"sample_id": 2240, "db_id": "machine_repair", "score": 1, "gold_sql": "SELECT Name FROM technician WHERE Team <> 'NYY'", "pred_sql": "SELECT Name FROM technician WHERE Team <> 'NYY'", "source_tables": ["technician"], "error_info": ""}, {"sample_id": 2241, "db_id": "machine_repair", "score": 1, "gold_sql": "SELECT Name FROM technician WHERE Age = 36 OR Age = 37", "pred_sql": "SELECT Name FROM technician WHERE Age IN ('36', '37')", "source_tables": ["technician"], "error_info": ""}, {"sample_id": 2242, "db_id": "machine_repair", "score": 1, "gold_sql": "SELECT Name FROM technician WHERE Age = 36 OR Age = 37", "pred_sql": "SELECT Name FROM technician WHERE Age IN ('36', '37')", "source_tables": ["technician"], "error_info": ""}, {"sample_id": 2243, "db_id": "machine_repair", "score": 0, "gold_sql": "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1", "pred_sql": "SELECT MIN(Starting_Year) AS Oldest_Technician_Starting_Year FROM technician", "source_tables": ["technician"], "error_info": "Result not equal"}, {"sample_id": 2244, "db_id": "machine_repair", "score": 0, "gold_sql": "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1", "pred_sql": "SELECT MIN(Starting_Year) AS Oldest_Technician_Starting_Year FROM technician", "source_tables": ["technician"], "error_info": "Result not equal"}, {"sample_id": 2245, "db_id": "machine_repair", "score": 1, "gold_sql": "SELECT Team, COUNT(*) FROM technician GROUP BY Team", "pred_sql": "SELECT Team, COUNT(*) AS Number_of_Technicians FROM technician GROUP BY Team", "source_tables": ["technician"], "error_info": ""}, {"sample_id": 2246, "db_id": "machine_repair", "score": 1, "gold_sql": "SELECT Team, COUNT(*) FROM technician GROUP BY Team", "pred_sql": "SELECT Team, COUNT(technician_id) AS technician_count FROM technician GROUP BY Team", "source_tables": ["technician"], "error_info": ""}, {"sample_id": 2247, "db_id": "machine_repair", "score": 0, "gold_sql": "SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Team, COUNT(*) AS technician_count FROM technician GROUP BY Team ORDER BY technician_count DESC LIMIT 1", "source_tables": ["technician"], "error_info": "Result not equal"}, {"sample_id": 2248, "db_id": "machine_repair", "score": 0, "gold_sql": "SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Team, COUNT(technician_id) AS technician_count FROM technician GROUP BY Team ORDER BY technician_count DESC", "source_tables": ["technician"], "error_info": "Result not equal"}, {"sample_id": 2249, "db_id": "machine_repair", "score": 1, "gold_sql": "SELECT Team FROM technician GROUP BY Team HAVING COUNT(*) >= 2", "pred_sql": "SELECT Team FROM technician GROUP BY Team HAVING COUNT(technician_id) >= 2", "source_tables": ["technician"], "error_info": ""}, {"sample_id": 2250, "db_id": "machine_repair", "score": 1, "gold_sql": "SELECT Team FROM technician GROUP BY Team HAVING COUNT(*) >= 2", "pred_sql": "SELECT Team FROM technician GROUP BY Team HAVING COUNT(technician_id) >= 2", "source_tables": ["technician"], "error_info": ""}, {"sample_id": 2251, "db_id": "machine_repair", "score": 1, "gold_sql": "SELECT T3.Name, T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID", "pred_sql": "SELECT technician.Name, machine.Machine_series FROM technician JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id JOIN machine ON repair_assignment.Machine_ID = machine.Machine_ID", "source_tables": ["machine", "repair_assignment", "technician"], "error_info": ""}, {"sample_id": 2252, "db_id": "machine_repair", "score": 1, "gold_sql": "SELECT T3.Name, T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID", "pred_sql": "SELECT technician.Name, machine.Machine_series FROM technician JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id JOIN machine ON repair_assignment.Machine_ID = machine.Machine_ID", "source_tables": ["machine", "repair_assignment", "technician"], "error_info": ""}, {"sample_id": 2253, "db_id": "machine_repair", "score": 1, "gold_sql": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID ORDER BY T2.quality_rank", "pred_sql": "SELECT technician.Name FROM technician JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id JOIN machine ON repair_assignment.Machine_ID = machine.Machine_ID ORDER BY machine.quality_rank ASC", "source_tables": ["machine", "repair_assignment", "technician"], "error_info": ""}, {"sample_id": 2254, "db_id": "machine_repair", "score": 1, "gold_sql": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID ORDER BY T2.quality_rank", "pred_sql": "SELECT technician.Name FROM technician JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id JOIN machine ON repair_assignment.Machine_ID = machine.Machine_ID ORDER BY machine.quality_rank ASC", "source_tables": ["machine", "repair_assignment", "technician"], "error_info": ""}, {"sample_id": 2255, "db_id": "machine_repair", "score": 1, "gold_sql": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID WHERE T2.value_points > 70", "pred_sql": "SELECT technician.Name FROM technician JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id JOIN machine ON repair_assignment.Machine_ID = machine.Machine_ID WHERE machine.value_points > 70", "source_tables": ["machine", "repair_assignment", "technician"], "error_info": ""}, {"sample_id": 2256, "db_id": "machine_repair", "score": 0, "gold_sql": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID WHERE T2.value_points > 70", "pred_sql": "SELECT DISTINCT technician.Name FROM technician JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id JOIN machine ON repair_assignment.Machine_ID = machine.Machine_ID WHERE machine.value_points > 70", "source_tables": ["machine", "repair_assignment", "technician"], "error_info": "Result not equal"}, {"sample_id": 2257, "db_id": "machine_repair", "score": 0, "gold_sql": "SELECT T2.Name, COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID = T2.technician_ID GROUP BY T2.Name", "pred_sql": "SELECT technician.Name, COUNT(repair_assignment.Machine_ID) AS machine_count FROM technician LEFT JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id GROUP BY technician.technician_id", "source_tables": ["repair_assignment", "technician"], "error_info": "Result not equal"}, {"sample_id": 2258, "db_id": "machine_repair", "score": 0, "gold_sql": "SELECT T2.Name, COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID = T2.technician_ID GROUP BY T2.Name", "pred_sql": "SELECT technician.Name, COUNT(repair_assignment.Machine_ID) AS machine_count FROM technician LEFT JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id GROUP BY technician.Name", "source_tables": ["repair_assignment", "technician"], "error_info": "Result not equal"}, {"sample_id": 2259, "db_id": "machine_repair", "score": 1, "gold_sql": "SELECT Name FROM technician WHERE NOT technician_id IN (SELECT technician_id FROM repair_assignment)", "pred_sql": "SELECT Name FROM technician WHERE NOT technician_id IN (SELECT technician_id FROM repair_assignment)", "source_tables": ["technician", "repair_assignment"], "error_info": ""}, {"sample_id": 2260, "db_id": "machine_repair", "score": 1, "gold_sql": "SELECT Name FROM technician WHERE NOT technician_id IN (SELECT technician_id FROM repair_assignment)", "pred_sql": "SELECT Name FROM technician WHERE NOT technician_id IN (SELECT technician_id FROM repair_assignment)", "source_tables": ["technician", "repair_assignment"], "error_info": ""}, {"sample_id": 2261, "db_id": "machine_repair", "score": 1, "gold_sql": "SELECT Starting_Year FROM technician WHERE Team = 'CLE' INTERSECT SELECT Starting_Year FROM technician WHERE Team = 'CWS'", "pred_sql": "SELECT DISTINCT t1.Starting_Year FROM technician AS t1 JOIN technician AS t2 ON t1.Starting_Year = t2.Starting_Year WHERE t1.Team = 'CLE' AND t2.Team = 'CWS'", "source_tables": ["technician"], "error_info": ""}, {"sample_id": 2262, "db_id": "machine_repair", "score": 0, "gold_sql": "SELECT Starting_Year FROM technician WHERE Team = 'CLE' INTERSECT SELECT Starting_Year FROM technician WHERE Team = 'CWS'", "pred_sql": "SELECT DISTINCT Starting_Year FROM technician WHERE Team IN ('CLE', 'CWS')", "source_tables": ["technician"], "error_info": "Result not equal"}, {"sample_id": 2263, "db_id": "entrepreneur", "score": 1, "gold_sql": "SELECT COUNT(*) FROM entrepreneur", "pred_sql": "SELECT COUNT(*) AS Entrepreneur_Count FROM entrepreneur", "source_tables": ["entrepreneur"], "error_info": ""}, {"sample_id": 2264, "db_id": "entrepreneur", "score": 1, "gold_sql": "SELECT COUNT(*) FROM entrepreneur", "pred_sql": "SELECT COUNT(*) AS NumberOfEntrepreneurs FROM entrepreneur", "source_tables": ["entrepreneur"], "error_info": ""}, {"sample_id": 2265, "db_id": "entrepreneur", "score": 1, "gold_sql": "SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC", "pred_sql": "SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC", "source_tables": ["entrepreneur"], "error_info": ""}, {"sample_id": 2266, "db_id": "entrepreneur", "score": 1, "gold_sql": "SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC", "pred_sql": "SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC", "source_tables": ["entrepreneur"], "error_info": ""}, {"sample_id": 2267, "db_id": "entrepreneur", "score": 1, "gold_sql": "SELECT Company, Investor FROM entrepreneur", "pred_sql": "SELECT Company, Investor FROM entrepreneur", "source_tables": ["entrepreneur"], "error_info": ""}, {"sample_id": 2268, "db_id": "entrepreneur", "score": 1, "gold_sql": "SELECT Company, Investor FROM entrepreneur", "pred_sql": "SELECT Company, Investor FROM entrepreneur", "source_tables": ["entrepreneur"], "error_info": ""}, {"sample_id": 2269, "db_id": "entrepreneur", "score": 1, "gold_sql": "SELECT AVG(Money_Requested) FROM entrepreneur", "pred_sql": "SELECT AVG(Money_Requested) AS Average_Money_Requested FROM entrepreneur", "source_tables": ["entrepreneur"], "error_info": ""}, {"sample_id": 2270, "db_id": "entrepreneur", "score": 1, "gold_sql": "SELECT AVG(Money_Requested) FROM entrepreneur", "pred_sql": "SELECT AVG(Money_Requested) AS Average_Money_Requested FROM entrepreneur", "source_tables": ["entrepreneur"], "error_info": ""}, {"sample_id": 2271, "db_id": "entrepreneur", "score": 1, "gold_sql": "SELECT Name FROM People ORDER BY Weight ASC", "pred_sql": "SELECT Name FROM people ORDER BY Weight ASC", "source_tables": ["people"], "error_info": ""}, {"sample_id": 2272, "db_id": "entrepreneur", "score": 1, "gold_sql": "SELECT Name FROM People ORDER BY Weight ASC", "pred_sql": "SELECT Name FROM people ORDER BY Weight ASC", "source_tables": ["people"], "error_info": ""}, {"sample_id": 2273, "db_id": "entrepreneur", "score": 1, "gold_sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID", "pred_sql": "SELECT Name FROM people INNER JOIN entrepreneur ON people.People_ID = entrepreneur.People_ID", "source_tables": ["entrepreneur", "people"], "error_info": ""}, {"sample_id": 2274, "db_id": "entrepreneur", "score": 1, "gold_sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID", "pred_sql": "SELECT Name FROM people INNER JOIN entrepreneur ON people.People_ID = entrepreneur.People_ID", "source_tables": ["entrepreneur", "people"], "error_info": ""}, {"sample_id": 2275, "db_id": "entrepreneur", "score": 1, "gold_sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor <> 'Rachel Elnaugh'", "pred_sql": "SELECT p.Name FROM entrepreneur AS e JOIN people AS p ON e.People_ID = p.People_ID WHERE e.Investor <> 'Rachel Elnaugh'", "source_tables": ["entrepreneur", "people"], "error_info": ""}, {"sample_id": 2276, "db_id": "entrepreneur", "score": 1, "gold_sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor <> 'Rachel Elnaugh'", "pred_sql": "SELECT p.Name FROM people AS p JOIN entrepreneur AS e ON p.People_ID = e.People_ID WHERE e.Investor <> 'Rachel Elnaugh'", "source_tables": ["entrepreneur", "people"], "error_info": ""}, {"sample_id": 2277, "db_id": "entrepreneur", "score": 1, "gold_sql": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1", "pred_sql": "SELECT Weight FROM people WHERE Height = (SELECT MIN(Height) FROM people)", "source_tables": ["people"], "error_info": ""}, {"sample_id": 2278, "db_id": "entrepreneur", "score": 1, "gold_sql": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1", "pred_sql": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1", "source_tables": ["people"], "error_info": ""}, {"sample_id": 2279, "db_id": "entrepreneur", "score": 0, "gold_sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Weight DESC LIMIT 1", "pred_sql": "SELECT e.Company, p.Name FROM entrepreneur AS e JOIN people AS p ON e.People_ID = p.People_ID ORDER BY p.Weight DESC LIMIT 1", "source_tables": ["entrepreneur", "people"], "error_info": "Result not equal"}, {"sample_id": 2280, "db_id": "entrepreneur", "score": 1, "gold_sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Weight DESC LIMIT 1", "pred_sql": "SELECT p.Name FROM people AS p JOIN entrepreneur AS e ON p.People_ID = e.People_ID ORDER BY p.Weight DESC LIMIT 1", "source_tables": ["entrepreneur", "people"], "error_info": ""}, {"sample_id": 2281, "db_id": "entrepreneur", "score": 0, "gold_sql": "SELECT SUM(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 1.85", "pred_sql": "SELECT SUM(Money_Requested) AS Total_Money_Requested FROM entrepreneur INNER JOIN people ON entrepreneur.People_ID = people.People_ID WHERE Height > 185", "source_tables": ["entrepreneur", "people"], "error_info": "Result not equal"}, {"sample_id": 2282, "db_id": "entrepreneur", "score": 0, "gold_sql": "SELECT SUM(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 1.85", "pred_sql": "SELECT SUM(Money_Requested) AS Total_Money_Requested FROM entrepreneur JOIN people ON entrepreneur.People_ID = people.People_ID WHERE Height > 185", "source_tables": ["entrepreneur", "people"], "error_info": "Result not equal"}, {"sample_id": 2283, "db_id": "entrepreneur", "score": 1, "gold_sql": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor = 'Simon Woodroffe' OR T1.Investor = 'Peter Jones'", "pred_sql": "SELECT p.Date_of_Birth FROM people AS p JOIN entrepreneur AS e ON p.People_ID = e.People_ID WHERE e.Investor IN ('Simon Woodroffe', 'Peter Jones')", "source_tables": ["entrepreneur", "people"], "error_info": ""}, {"sample_id": 2284, "db_id": "entrepreneur", "score": 1, "gold_sql": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor = 'Simon Woodroffe' OR T1.Investor = 'Peter Jones'", "pred_sql": "SELECT p.Date_of_Birth FROM people AS p JOIN entrepreneur AS e ON p.People_ID = e.People_ID WHERE e.Investor IN ('Simon Woodroffe', 'Peter Jones')", "source_tables": ["entrepreneur", "people"], "error_info": ""}, {"sample_id": 2285, "db_id": "entrepreneur", "score": 1, "gold_sql": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Money_Requested DESC", "pred_sql": "SELECT p.Weight FROM entrepreneur AS e JOIN people AS p ON e.People_ID = p.People_ID ORDER BY e.Money_Requested DESC", "source_tables": ["entrepreneur", "people"], "error_info": ""}, {"sample_id": 2286, "db_id": "entrepreneur", "score": 1, "gold_sql": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Money_Requested DESC", "pred_sql": "SELECT p.Weight FROM entrepreneur AS e JOIN people AS p ON e.People_ID = p.People_ID ORDER BY e.Money_Requested DESC", "source_tables": ["entrepreneur", "people"], "error_info": ""}, {"sample_id": 2287, "db_id": "entrepreneur", "score": 1, "gold_sql": "SELECT Investor, COUNT(*) FROM entrepreneur GROUP BY Investor", "pred_sql": "SELECT Investor, COUNT(Entrepreneur_ID) AS Number_of_Entrepreneurs FROM entrepreneur GROUP BY Investor", "source_tables": ["entrepreneur"], "error_info": ""}, {"sample_id": 2288, "db_id": "entrepreneur", "score": 1, "gold_sql": "SELECT Investor, COUNT(*) FROM entrepreneur GROUP BY Investor", "pred_sql": "SELECT Investor, COUNT(Entrepreneur_ID) AS Entrepreneur_Count FROM entrepreneur GROUP BY Investor", "source_tables": ["entrepreneur"], "error_info": ""}, {"sample_id": 2289, "db_id": "entrepreneur", "score": 1, "gold_sql": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(Entrepreneur_ID) DESC LIMIT 1", "source_tables": ["entrepreneur"], "error_info": ""}, {"sample_id": 2290, "db_id": "entrepreneur", "score": 1, "gold_sql": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(Entrepreneur_ID) DESC LIMIT 1", "source_tables": ["entrepreneur"], "error_info": ""}, {"sample_id": 2291, "db_id": "entrepreneur", "score": 1, "gold_sql": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*) >= 2", "pred_sql": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(DISTINCT Entrepreneur_ID) >= 2", "source_tables": ["entrepreneur"], "error_info": ""}, {"sample_id": 2292, "db_id": "entrepreneur", "score": 1, "gold_sql": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*) >= 2", "pred_sql": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(DISTINCT Entrepreneur_ID) >= 2", "source_tables": ["entrepreneur"], "error_info": ""}, {"sample_id": 2293, "db_id": "entrepreneur", "score": 0, "gold_sql": "SELECT T2.Name, T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Money_Requested", "pred_sql": "SELECT p.Name, e.Company FROM entrepreneur AS e JOIN people AS p ON e.People_ID = p.People_ID ORDER BY e.Money_Requested DESC", "source_tables": ["entrepreneur", "people"], "error_info": "Result not equal"}, {"sample_id": 2294, "db_id": "entrepreneur", "score": 0, "gold_sql": "SELECT T2.Name, T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Money_Requested", "pred_sql": "SELECT p.Name AS Entrepreneur_Name, e.Investor FROM entrepreneur AS e JOIN people AS p ON e.People_ID = p.People_ID ORDER BY e.Money_Requested DESC", "source_tables": ["entrepreneur", "people"], "error_info": "Result not equal"}, {"sample_id": 2295, "db_id": "entrepreneur", "score": 1, "gold_sql": "SELECT Name FROM people WHERE NOT People_ID IN (SELECT People_ID FROM entrepreneur)", "pred_sql": "SELECT Name FROM people WHERE NOT People_ID IN (SELECT People_ID FROM entrepreneur)", "source_tables": ["entrepreneur", "people"], "error_info": ""}, {"sample_id": 2296, "db_id": "entrepreneur", "score": 1, "gold_sql": "SELECT Name FROM people WHERE NOT People_ID IN (SELECT People_ID FROM entrepreneur)", "pred_sql": "SELECT Name FROM people WHERE NOT People_ID IN (SELECT People_ID FROM entrepreneur)", "source_tables": ["entrepreneur", "people"], "error_info": ""}, {"sample_id": 2297, "db_id": "entrepreneur", "score": 1, "gold_sql": "SELECT Investor FROM entrepreneur WHERE Money_Requested > 140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested < 120000", "pred_sql": "SELECT DISTINCT e1.Investor FROM entrepreneur AS e1 JOIN entrepreneur AS e2 ON e1.Investor = e2.Investor WHERE e1.Money_Requested > '140000' AND e2.Money_Requested < '120000'", "source_tables": ["entrepreneur"], "error_info": ""}, {"sample_id": 2298, "db_id": "entrepreneur", "score": 1, "gold_sql": "SELECT Investor FROM entrepreneur WHERE Money_Requested > 140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested < 120000", "pred_sql": "SELECT DISTINCT e1.Investor FROM entrepreneur AS e1 JOIN entrepreneur AS e2 ON e1.Investor = e2.Investor WHERE e1.Money_Requested > '140000' AND e2.Money_Requested < '120000'", "source_tables": ["entrepreneur"], "error_info": ""}, {"sample_id": 2299, "db_id": "entrepreneur", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT Company) FROM entrepreneur", "pred_sql": "SELECT COUNT(DISTINCT Company) AS Distinct_Companies FROM entrepreneur", "source_tables": ["entrepreneur"], "error_info": ""}, {"sample_id": 2300, "db_id": "entrepreneur", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT Company) FROM entrepreneur", "pred_sql": "SELECT COUNT(DISTINCT Company) AS NumberOfDifferentCompanies FROM entrepreneur", "source_tables": ["entrepreneur"], "error_info": ""}, {"sample_id": 2301, "db_id": "entrepreneur", "score": 1, "gold_sql": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height DESC LIMIT 1", "pred_sql": "SELECT Company FROM entrepreneur JOIN people ON entrepreneur.People_ID = people.People_ID ORDER BY Height DESC LIMIT 1", "source_tables": ["entrepreneur", "people"], "error_info": ""}, {"sample_id": 2302, "db_id": "entrepreneur", "score": 1, "gold_sql": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height DESC LIMIT 1", "pred_sql": "SELECT e.Company FROM entrepreneur AS e JOIN people AS p ON e.People_ID = p.People_ID WHERE p.Height = (SELECT MAX(Height) FROM people)", "source_tables": ["entrepreneur", "people"], "error_info": ""}, {"sample_id": 2303, "db_id": "perpetrator", "score": 1, "gold_sql": "SELECT COUNT(*) FROM perpetrator", "pred_sql": "SELECT COUNT(*) AS Total_Perpetrators FROM perpetrator", "source_tables": ["perpetrator"], "error_info": ""}, {"sample_id": 2304, "db_id": "perpetrator", "score": 1, "gold_sql": "SELECT Date FROM perpetrator ORDER BY Killed DESC", "pred_sql": "SELECT Date FROM perpetrator ORDER BY Killed DESC", "source_tables": ["perpetrator"], "error_info": ""}, {"sample_id": 2305, "db_id": "perpetrator", "score": 1, "gold_sql": "SELECT Injured FROM perpetrator ORDER BY Injured ASC", "pred_sql": "SELECT SUM(Injured) AS Total_Injured FROM perpetrator GROUP BY People_ID ORDER BY Total_Injured ASC", "source_tables": ["perpetrator"], "error_info": ""}, {"sample_id": 2306, "db_id": "perpetrator", "score": 1, "gold_sql": "SELECT AVG(Injured) FROM perpetrator", "pred_sql": "SELECT AVG(CAST(Injured AS INT)) AS Average_Injured FROM perpetrator", "source_tables": ["perpetrator"], "error_info": ""}, {"sample_id": 2307, "db_id": "perpetrator", "score": 1, "gold_sql": "SELECT LOCATION FROM perpetrator ORDER BY Killed DESC LIMIT 1", "pred_sql": "SELECT Location FROM perpetrator ORDER BY Killed DESC LIMIT 1", "source_tables": ["perpetrator"], "error_info": ""}, {"sample_id": 2308, "db_id": "perpetrator", "score": 1, "gold_sql": "SELECT Name FROM People ORDER BY Height ASC", "pred_sql": "SELECT Name FROM people ORDER BY Height ASC", "source_tables": ["people"], "error_info": ""}, {"sample_id": 2309, "db_id": "perpetrator", "score": 1, "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID", "pred_sql": "SELECT DISTINCT people.Name FROM perpetrator JOIN people ON perpetrator.People_ID = people.People_ID", "source_tables": ["perpetrator", "people"], "error_info": ""}, {"sample_id": 2310, "db_id": "perpetrator", "score": 1, "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Country <> 'China'", "pred_sql": "SELECT DISTINCT people.Name FROM perpetrator JOIN people ON perpetrator.People_ID = people.People_ID WHERE perpetrator.Country <> 'China'", "source_tables": ["perpetrator", "people"], "error_info": ""}, {"sample_id": 2311, "db_id": "perpetrator", "score": 1, "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Weight DESC LIMIT 1", "pred_sql": "SELECT p.Name FROM people AS p JOIN perpetrator AS pr ON p.People_ID = pr.People_ID ORDER BY p.Weight DESC LIMIT 1", "source_tables": ["perpetrator", "people"], "error_info": ""}, {"sample_id": 2312, "db_id": "perpetrator", "score": 0, "gold_sql": "SELECT SUM(T2.Killed) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 1.84", "pred_sql": "SELECT SUM(Killed) AS Total_Kills FROM perpetrator JOIN people ON perpetrator.People_ID = people.People_ID WHERE Height > 184", "source_tables": ["perpetrator", "people"], "error_info": "Result not equal"}, {"sample_id": 2313, "db_id": "perpetrator", "score": 1, "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Country = 'China' OR T2.Country = 'Japan'", "pred_sql": "SELECT DISTINCT p.Name FROM perpetrator AS pr JOIN people AS p ON pr.People_ID = p.People_ID WHERE pr.Country IN ('China', 'Japan')", "source_tables": ["perpetrator", "people"], "error_info": ""}, {"sample_id": 2314, "db_id": "perpetrator", "score": 1, "gold_sql": "SELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Injured DESC", "pred_sql": "SELECT p.Height FROM perpetrator AS pr JOIN people AS p ON pr.People_ID = p.People_ID ORDER BY pr.Injured DESC", "source_tables": ["perpetrator", "people"], "error_info": ""}, {"sample_id": 2315, "db_id": "perpetrator", "score": 1, "gold_sql": "SELECT Country, COUNT(*) FROM perpetrator GROUP BY Country", "pred_sql": "SELECT Country, COUNT(Perpetrator_ID) AS Number_of_Perpetrators FROM perpetrator GROUP BY Country", "source_tables": ["perpetrator"], "error_info": ""}, {"sample_id": 2316, "db_id": "perpetrator", "score": 1, "gold_sql": "SELECT Country, COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Country, COUNT(*) AS Perpetrator_Count FROM perpetrator GROUP BY Country ORDER BY Perpetrator_Count DESC LIMIT 1", "source_tables": ["perpetrator"], "error_info": ""}, {"sample_id": 2317, "db_id": "perpetrator", "score": 0, "gold_sql": "SELECT Country, COUNT(*) FROM perpetrator GROUP BY Country HAVING COUNT(*) >= 2", "pred_sql": "SELECT Country FROM perpetrator GROUP BY Country HAVING COUNT(Perpetrator_ID) >= 2", "source_tables": ["perpetrator"], "error_info": "Result not equal"}, {"sample_id": 2318, "db_id": "perpetrator", "score": 1, "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Year DESC", "pred_sql": "SELECT people.Name FROM perpetrator JOIN people ON perpetrator.People_ID = people.People_ID ORDER BY perpetrator.Year DESC", "source_tables": ["perpetrator", "people"], "error_info": ""}, {"sample_id": 2319, "db_id": "perpetrator", "score": 1, "gold_sql": "SELECT Name FROM people WHERE NOT People_ID IN (SELECT People_ID FROM perpetrator)", "pred_sql": "SELECT Name FROM people WHERE NOT People_ID IN (SELECT People_ID FROM perpetrator)", "source_tables": ["perpetrator", "people"], "error_info": ""}, {"sample_id": 2320, "db_id": "perpetrator", "score": 1, "gold_sql": "SELECT Country FROM perpetrator WHERE Injured > 50 INTERSECT SELECT Country FROM perpetrator WHERE Injured < 20", "pred_sql": "SELECT DISTINCT p.Country FROM perpetrator AS p WHERE p.Injured > 50 AND p.Country IN (SELECT p2.Country FROM perpetrator AS p2 WHERE p2.Injured < 20)", "source_tables": ["perpetrator"], "error_info": ""}, {"sample_id": 2321, "db_id": "perpetrator", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT LOCATION) FROM perpetrator", "pred_sql": "SELECT COUNT(DISTINCT Location) AS distinct_locations FROM perpetrator", "source_tables": ["perpetrator"], "error_info": ""}, {"sample_id": 2322, "db_id": "perpetrator", "score": 1, "gold_sql": "SELECT T2.Date FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "pred_sql": "SELECT p.Date FROM perpetrator AS p JOIN people AS pe ON p.People_ID = pe.People_ID ORDER BY pe.Height DESC LIMIT 1", "source_tables": ["perpetrator", "people"], "error_info": ""}, {"sample_id": 2323, "db_id": "perpetrator", "score": 1, "gold_sql": "SELECT MAX(YEAR) FROM perpetrator", "pred_sql": "SELECT Year FROM perpetrator ORDER BY Date DESC LIMIT 1", "source_tables": ["perpetrator"], "error_info": ""}, {"sample_id": 2324, "db_id": "csu_1", "score": 1, "gold_sql": "SELECT campus FROM campuses WHERE county = 'Los Angeles'", "pred_sql": "SELECT Campus FROM Campuses WHERE County = 'Los Angeles'", "source_tables": ["campuses"], "error_info": ""}, {"sample_id": 2325, "db_id": "csu_1", "score": 0, "gold_sql": "SELECT campus FROM campuses WHERE county = 'Los Angeles'", "pred_sql": "SELECT * FROM Campuses WHERE County = 'Los Angeles'", "source_tables": ["campuses"], "error_info": "Result not equal"}, {"sample_id": 2326, "db_id": "csu_1", "score": 1, "gold_sql": "SELECT campus FROM campuses WHERE LOCATION = 'Chico'", "pred_sql": "SELECT Campus FROM Campuses WHERE Location = 'Chico'", "source_tables": ["campuses"], "error_info": ""}, {"sample_id": 2327, "db_id": "csu_1", "score": 0, "gold_sql": "SELECT campus FROM campuses WHERE LOCATION = 'Chico'", "pred_sql": "SELECT * FROM Campuses WHERE Location = 'Chico'", "source_tables": ["campuses"], "error_info": "Result not equal"}, {"sample_id": 2328, "db_id": "csu_1", "score": 0, "gold_sql": "SELECT campus FROM campuses WHERE YEAR = 1958", "pred_sql": "SELECT * FROM Campuses WHERE Year = '1958'", "source_tables": ["campuses"], "error_info": "Result not equal"}, {"sample_id": 2329, "db_id": "csu_1", "score": 1, "gold_sql": "SELECT campus FROM campuses WHERE YEAR = 1958", "pred_sql": "SELECT Campus FROM Campuses WHERE Year = '1958'", "source_tables": ["campuses"], "error_info": ""}, {"sample_id": 2330, "db_id": "csu_1", "score": 1, "gold_sql": "SELECT campus FROM campuses WHERE YEAR < 1800", "pred_sql": "SELECT Campus FROM Campuses WHERE Year < '1800'", "source_tables": ["campuses"], "error_info": ""}, {"sample_id": 2331, "db_id": "csu_1", "score": 1, "gold_sql": "SELECT campus FROM campuses WHERE YEAR < 1800", "pred_sql": "SELECT Campus FROM Campuses WHERE Year < '1800'", "source_tables": ["campuses"], "error_info": ""}, {"sample_id": 2332, "db_id": "csu_1", "score": 1, "gold_sql": "SELECT campus FROM campuses WHERE YEAR >= 1935 AND YEAR <= 1939", "pred_sql": "SELECT Campus FROM Campuses WHERE Year BETWEEN '1935' AND '1939'", "source_tables": ["campuses"], "error_info": ""}, {"sample_id": 2333, "db_id": "csu_1", "score": 1, "gold_sql": "SELECT campus FROM campuses WHERE YEAR >= 1935 AND YEAR <= 1939", "pred_sql": "SELECT Campus FROM Campuses WHERE Year BETWEEN '1935' AND '1939'", "source_tables": ["campuses"], "error_info": ""}, {"sample_id": 2334, "db_id": "csu_1", "score": 0, "gold_sql": "SELECT campus FROM campuses WHERE LOCATION = 'Northridge' AND county = 'Los Angeles' UNION SELECT campus FROM campuses WHERE LOCATION = 'San Francisco' AND county = 'San Francisco'", "pred_sql": "SELECT Campus FROM Campuses WHERE (Location = 'Northridge, Los Angeles' OR Location = 'San Francisco, San Francisco')", "source_tables": ["campuses"], "error_info": "Result not equal"}, {"sample_id": 2335, "db_id": "csu_1", "score": 0, "gold_sql": "SELECT campus FROM campuses WHERE LOCATION = 'Northridge' AND county = 'Los Angeles' UNION SELECT campus FROM campuses WHERE LOCATION = 'San Francisco' AND county = 'San Francisco'", "pred_sql": "SELECT * FROM Campuses WHERE Location IN ('Northridge, Los Angeles', 'San Francisco, San Francisco')", "source_tables": ["campuses"], "error_info": "Result not equal"}, {"sample_id": 2336, "db_id": "csu_1", "score": 1, "gold_sql": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id = t2.campus WHERE t1.campus = 'San Jose State University' AND T2.year = 1996", "pred_sql": "SELECT csu_fees.CampusFee FROM csu_fees JOIN Campuses ON csu_fees.Campus = Campuses.Id WHERE Campuses.Campus = 'San Jose State University' AND csu_fees.Year = 1996", "source_tables": ["csu_fees", "campuses"], "error_info": ""}, {"sample_id": 2337, "db_id": "csu_1", "score": 1, "gold_sql": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id = t2.campus WHERE t1.campus = 'San Jose State University' AND T2.year = 1996", "pred_sql": "SELECT CampusFee FROM csu_fees WHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'San Jose State University') AND Year = 1996", "source_tables": ["csu_fees", "campuses"], "error_info": ""}, {"sample_id": 2338, "db_id": "csu_1", "score": 1, "gold_sql": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id = t2.campus WHERE t1.campus = 'San Francisco State University' AND T2.year = 1996", "pred_sql": "SELECT csu_fees.CampusFee FROM csu_fees JOIN Campuses ON csu_fees.Campus = Campuses.Id WHERE Campuses.Campus = 'San Francisco State University' AND csu_fees.Year = 1996", "source_tables": ["csu_fees", "campuses"], "error_info": ""}, {"sample_id": 2339, "db_id": "csu_1", "score": 1, "gold_sql": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id = t2.campus WHERE t1.campus = 'San Francisco State University' AND T2.year = 1996", "pred_sql": "SELECT CampusFee FROM csu_fees WHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'San Francisco State University') AND Year = 1996", "source_tables": ["csu_fees", "campuses"], "error_info": ""}, {"sample_id": 2340, "db_id": "csu_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM csu_fees WHERE campusfee > (SELECT AVG(campusfee) FROM csu_fees)", "pred_sql": "SELECT COUNT(DISTINCT c.Id) AS UniversityCount FROM Campuses AS c JOIN csu_fees AS f ON c.Id = f.Campus WHERE f.CampusFee > (SELECT AVG(CampusFee) FROM csu_fees)", "source_tables": ["csu_fees"], "error_info": ""}, {"sample_id": 2341, "db_id": "csu_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM csu_fees WHERE campusfee > (SELECT AVG(campusfee) FROM csu_fees)", "pred_sql": "SELECT COUNT(DISTINCT c.Id) AS UniversityCount FROM Campuses AS c JOIN csu_fees AS f ON c.Id = f.Campus WHERE f.CampusFee > (SELECT AVG(CampusFee) FROM csu_fees)", "source_tables": ["csu_fees"], "error_info": ""}, {"sample_id": 2342, "db_id": "csu_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM csu_fees WHERE campusfee > (SELECT AVG(campusfee) FROM csu_fees)", "pred_sql": "SELECT COUNT(DISTINCT c.Id) AS UniversityCount FROM Campuses AS c JOIN csu_fees AS f ON c.Id = f.Campus WHERE f.CampusFee > (SELECT AVG(CampusFee) FROM csu_fees)", "source_tables": ["csu_fees"], "error_info": ""}, {"sample_id": 2343, "db_id": "csu_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM csu_fees WHERE campusfee > (SELECT AVG(campusfee) FROM csu_fees)", "pred_sql": "SELECT COUNT(DISTINCT Campus) AS UniversityCount FROM csu_fees WHERE CampusFee > (SELECT AVG(CampusFee) FROM csu_fees)", "source_tables": ["csu_fees"], "error_info": ""}, {"sample_id": 2344, "db_id": "csu_1", "score": 1, "gold_sql": "SELECT campus FROM campuses WHERE county = 'Los Angeles' AND YEAR > 1950", "pred_sql": "SELECT Campus FROM Campuses WHERE County = 'Los Angeles' AND Year > '1950'", "source_tables": ["campuses"], "error_info": ""}, {"sample_id": 2345, "db_id": "csu_1", "score": 1, "gold_sql": "SELECT campus FROM campuses WHERE county = 'Los Angeles' AND YEAR > 1950", "pred_sql": "SELECT Campus FROM Campuses WHERE County = 'Los Angeles' AND Year > '1950'", "source_tables": ["campuses"], "error_info": ""}, {"sample_id": 2346, "db_id": "csu_1", "score": 0, "gold_sql": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY SUM(degrees) DESC LIMIT 1", "pred_sql": "SELECT Year, COUNT(Degrees) AS DegreesCount FROM degrees GROUP BY Year ORDER BY DegreesCount DESC LIMIT 1", "source_tables": ["degrees"], "error_info": "Result not equal"}, {"sample_id": 2347, "db_id": "csu_1", "score": 0, "gold_sql": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY SUM(degrees) DESC LIMIT 1", "pred_sql": "SELECT Year FROM degrees GROUP BY Year ORDER BY COUNT(Degrees) DESC LIMIT 1", "source_tables": ["degrees"], "error_info": "Result not equal"}, {"sample_id": 2348, "db_id": "csu_1", "score": 0, "gold_sql": "SELECT campus FROM degrees GROUP BY campus ORDER BY SUM(degrees) DESC LIMIT 1", "pred_sql": "SELECT Campus, COUNT(Degrees) AS TotalDegrees FROM degrees GROUP BY Campus ORDER BY TotalDegrees DESC LIMIT 1", "source_tables": ["degrees"], "error_info": "Result not equal"}, {"sample_id": 2349, "db_id": "csu_1", "score": 0, "gold_sql": "SELECT campus FROM degrees GROUP BY campus ORDER BY SUM(degrees) DESC LIMIT 1", "pred_sql": "SELECT Campus, COUNT(Degrees) AS TotalDegrees FROM degrees GROUP BY Campus ORDER BY TotalDegrees DESC LIMIT 1", "source_tables": ["degrees"], "error_info": "Result not equal"}, {"sample_id": 2350, "db_id": "csu_1", "score": 0, "gold_sql": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2003 ORDER BY T2.faculty DESC LIMIT 1", "pred_sql": "SELECT Campus, Faculty FROM faculty WHERE Year = 2003 ORDER BY Faculty DESC LIMIT 1", "source_tables": ["faculty", "campuses"], "error_info": "Result not equal"}, {"sample_id": 2351, "db_id": "csu_1", "score": 0, "gold_sql": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2003 ORDER BY T2.faculty DESC LIMIT 1", "pred_sql": "SELECT Campus, Faculty FROM faculty WHERE Year = 2003 ORDER BY Faculty DESC LIMIT 1", "source_tables": ["faculty", "campuses"], "error_info": "Result not equal"}, {"sample_id": 2352, "db_id": "csu_1", "score": 1, "gold_sql": "SELECT AVG(campusfee) FROM csu_fees WHERE YEAR = 1996", "pred_sql": "SELECT AVG(CampusFee) AS AverageFee FROM csu_fees WHERE Year = 1996", "source_tables": ["csu_fees"], "error_info": ""}, {"sample_id": 2353, "db_id": "csu_1", "score": 1, "gold_sql": "SELECT AVG(campusfee) FROM csu_fees WHERE YEAR = 1996", "pred_sql": "SELECT AVG(CampusFee) AS AverageFee FROM csu_fees WHERE Year = 1996", "source_tables": ["csu_fees"], "error_info": ""}, {"sample_id": 2354, "db_id": "csu_1", "score": 1, "gold_sql": "SELECT AVG(campusfee) FROM csu_fees WHERE YEAR = 2005", "pred_sql": "SELECT AVG(CampusFee) AS AverageFee FROM csu_fees WHERE Year = 2005", "source_tables": ["csu_fees"], "error_info": ""}, {"sample_id": 2355, "db_id": "csu_1", "score": 1, "gold_sql": "SELECT AVG(campusfee) FROM csu_fees WHERE YEAR = 2005", "pred_sql": "SELECT AVG(CampusFee) AS AverageFee FROM csu_fees WHERE Year = 2005", "source_tables": ["csu_fees"], "error_info": ""}, {"sample_id": 2356, "db_id": "csu_1", "score": 0, "gold_sql": "SELECT T1.campus, SUM(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id = T2.campus WHERE T2.year >= 1998 AND T2.year <= 2002 GROUP BY T1.campus", "pred_sql": "SELECT COUNT(*) AS TotalDegrees FROM degrees WHERE Year BETWEEN '1998' AND '2002'", "source_tables": ["degrees", "campuses"], "error_info": "Result not equal"}, {"sample_id": 2357, "db_id": "csu_1", "score": 0, "gold_sql": "SELECT T1.campus, SUM(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id = T2.campus WHERE T2.year >= 1998 AND T2.year <= 2002 GROUP BY T1.campus", "pred_sql": "SELECT COUNT(*) AS TotalDegrees FROM degrees WHERE Year BETWEEN '1998' AND '2002'", "source_tables": ["degrees", "campuses"], "error_info": "Result not equal"}, {"sample_id": 2358, "db_id": "csu_1", "score": 0, "gold_sql": "SELECT T1.campus, SUM(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id = T2.campus WHERE T1.county = 'Orange' AND T2.year >= 2000 GROUP BY T1.campus", "pred_sql": "SELECT Campuses.Campus, COUNT(degrees.Degrees) AS DegreesGranted FROM Campuses JOIN degrees ON Campuses.Id = degrees.Campus WHERE Campuses.County = 'Orange' AND degrees.Year > '2000' GROUP BY Campuses.Campus", "source_tables": ["degrees", "campuses"], "error_info": "Result not equal"}, {"sample_id": 2359, "db_id": "csu_1", "score": 0, "gold_sql": "SELECT T1.campus, SUM(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id = T2.campus WHERE T1.county = 'Orange' AND T2.year >= 2000 GROUP BY T1.campus", "pred_sql": "SELECT Campuses.Campus, COUNT(degrees.Degrees) AS TotalDegrees FROM Campuses JOIN degrees ON Campuses.Id = degrees.Campus WHERE Campuses.County = 'Orange' AND degrees.Year > '2000' GROUP BY Campuses.Campus", "source_tables": ["degrees", "campuses"], "error_info": "Result not equal"}, {"sample_id": 2360, "db_id": "csu_1", "score": 1, "gold_sql": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2002 AND faculty > (SELECT MAX(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2002 AND T1.county = 'Orange')", "pred_sql": "SELECT c.Campus FROM Campuses AS c JOIN faculty AS f ON c.Id = f.Campus WHERE f.Year = 2002 AND f.Faculty > (SELECT MAX(f2.Faculty) FROM Campuses AS c2 JOIN faculty AS f2 ON c2.Id = f2.Campus WHERE c2.County = 'Orange' AND f2.Year = 2002)", "source_tables": ["faculty", "campuses"], "error_info": ""}, {"sample_id": 2361, "db_id": "csu_1", "score": 1, "gold_sql": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2002 AND faculty > (SELECT MAX(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2002 AND T1.county = 'Orange')", "pred_sql": "SELECT c.Campus FROM Campuses AS c JOIN faculty AS f ON c.Id = f.Campus WHERE f.Year = 2002 AND f.Faculty > (SELECT MAX(f2.Faculty) FROM faculty AS f2 JOIN Campuses AS c2 ON f2.Campus = c2.Id WHERE c2.County = 'Orange')", "source_tables": ["faculty", "campuses"], "error_info": ""}, {"sample_id": 2362, "db_id": "csu_1", "score": 0, "gold_sql": "SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id = t2.campus WHERE t2.year = 1956 AND totalenrollment_ay > 400 AND FTE_AY > 200", "pred_sql": "SELECT Campus FROM enrollments JOIN faculty ON enrollments.Campus = faculty.Campus WHERE enrollments.Year = '1956' AND enrollments.TotalEnrollment_AY > '400' AND faculty.FTE_AY > '200'", "source_tables": ["enrollments", "campuses"], "error_info": "Predction Execution Error:ambiguous column name: Campus"}, {"sample_id": 2363, "db_id": "csu_1", "score": 0, "gold_sql": "SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id = t2.campus WHERE t2.year = 1956 AND totalenrollment_ay > 400 AND FTE_AY > 200", "pred_sql": "SELECT Campus FROM Campuses AS c JOIN enrollments AS e ON c.Id = e.Campus WHERE c.Year = '1956' AND e.FTE_AY > '200' AND e.TotalEnrollment_AY > '400'", "source_tables": ["enrollments", "campuses"], "error_info": "Predction Execution Error:ambiguous column name: Campus"}, {"sample_id": 2364, "db_id": "csu_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM campuses WHERE county = 'Los Angeles'", "pred_sql": "SELECT COUNT(*) AS CampusCount FROM Campuses WHERE County = 'Los Angeles'", "source_tables": ["campuses"], "error_info": ""}, {"sample_id": 2365, "db_id": "csu_1", "score": 0, "gold_sql": "SELECT COUNT(*) FROM campuses WHERE county = 'Los Angeles'", "pred_sql": "SELECT COUNT(*) AS CampusCount FROM Campuses WHERE County = 'LA'", "source_tables": ["campuses"], "error_info": "Result not equal"}, {"sample_id": 2366, "db_id": "csu_1", "score": 0, "gold_sql": "SELECT campus FROM campuses WHERE county = 'Los Angeles'", "pred_sql": "SELECT * FROM Campuses WHERE County = 'Los Angeles'", "source_tables": ["campuses"], "error_info": "Result not equal"}, {"sample_id": 2367, "db_id": "csu_1", "score": 0, "gold_sql": "SELECT campus FROM campuses WHERE county = 'Los Angeles'", "pred_sql": "SELECT * FROM Campuses WHERE County = 'Los Angeles'", "source_tables": ["campuses"], "error_info": "Result not equal"}, {"sample_id": 2368, "db_id": "csu_1", "score": 0, "gold_sql": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id = t2.campus WHERE t1.campus = 'San Jose State University' AND t2.year = 2000", "pred_sql": "SELECT COUNT(Degrees) AS TotalDegrees FROM degrees WHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'San Jose State University') AND Year = '2000'", "source_tables": ["degrees", "campuses"], "error_info": "Result not equal"}, {"sample_id": 2369, "db_id": "csu_1", "score": 0, "gold_sql": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id = t2.campus WHERE t1.campus = 'San Jose State University' AND t2.year = 2000", "pred_sql": "SELECT SUM(CASE WHEN Degrees = 'Bachelor' THEN 1 ELSE 0 END) AS BachelorDegrees, SUM(CASE WHEN Degrees = 'Master' THEN 1 ELSE 0 END) AS MasterDegrees, SUM(CASE WHEN Degrees = 'Doctorate' THEN 1 ELSE 0 END) AS DoctorateDegrees FROM degrees WHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'San Jose State University') AND Year = '2000'", "source_tables": ["degrees", "campuses"], "error_info": "Result not equal"}, {"sample_id": 2370, "db_id": "csu_1", "score": 1, "gold_sql": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id = t2.campus WHERE t1.campus = 'San Francisco State University' AND t2.year = 2001", "pred_sql": "SELECT Degrees FROM degrees WHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'San Francisco State University') AND Year = '2001'", "source_tables": ["degrees", "campuses"], "error_info": ""}, {"sample_id": 2371, "db_id": "csu_1", "score": 1, "gold_sql": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id = t2.campus WHERE t1.campus = 'San Francisco State University' AND t2.year = 2001", "pred_sql": "SELECT Degrees FROM degrees WHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'San Francisco State University') AND Year = '2001'", "source_tables": ["degrees", "campuses"], "error_info": ""}, {"sample_id": 2372, "db_id": "csu_1", "score": 1, "gold_sql": "SELECT SUM(faculty) FROM faculty WHERE YEAR = 2002", "pred_sql": "SELECT SUM(Faculty) AS TotalFaculty FROM faculty WHERE Year = 2002", "source_tables": ["faculty"], "error_info": ""}, {"sample_id": 2373, "db_id": "csu_1", "score": 1, "gold_sql": "SELECT SUM(faculty) FROM faculty WHERE YEAR = 2002", "pred_sql": "SELECT SUM(Faculty) AS TotalFaculty FROM faculty WHERE Year = 2002", "source_tables": ["faculty"], "error_info": ""}, {"sample_id": 2374, "db_id": "csu_1", "score": 0, "gold_sql": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus = T2.id WHERE T1.year = 2002 AND T2.campus = 'Long Beach State University'", "pred_sql": "SELECT COUNT(*) FROM faculty WHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'Long Beach State University') AND Year = 2002", "source_tables": ["faculty", "campuses"], "error_info": "Result not equal"}, {"sample_id": 2375, "db_id": "csu_1", "score": 1, "gold_sql": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus = T2.id WHERE T1.year = 2002 AND T2.campus = 'Long Beach State University'", "pred_sql": "SELECT Faculty FROM faculty WHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'Long Beach State University') AND Year = 2002", "source_tables": ["faculty", "campuses"], "error_info": ""}, {"sample_id": 2376, "db_id": "csu_1", "score": 0, "gold_sql": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus = T2.id WHERE T1.year = 2004 AND T2.campus = 'San Francisco State University'", "pred_sql": "SELECT COUNT(*) FROM faculty WHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'San Francisco State University') AND Year = 2004", "source_tables": ["faculty", "campuses"], "error_info": "Result not equal"}, {"sample_id": 2377, "db_id": "csu_1", "score": 0, "gold_sql": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus = T2.id WHERE T1.year = 2004 AND T2.campus = 'San Francisco State University'", "pred_sql": "SELECT COUNT(*) AS FacultyLines FROM faculty WHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'San Francisco State University') AND Year = 2004", "source_tables": ["faculty", "campuses"], "error_info": "Result not equal"}, {"sample_id": 2378, "db_id": "csu_1", "score": 0, "gold_sql": "SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id = t2.campus WHERE t2.faculty >= 600 AND t2.faculty <= 1000 AND T1.year = 2004", "pred_sql": "SELECT Campuses.Campus FROM Campuses JOIN faculty ON Campuses.Id = faculty.Campus WHERE faculty.Year = 2004 AND faculty.Faculty BETWEEN 600 AND 1000", "source_tables": ["faculty", "campuses"], "error_info": "Result not equal"}, {"sample_id": 2379, "db_id": "csu_1", "score": 0, "gold_sql": "SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id = t2.campus WHERE t2.faculty >= 600 AND t2.faculty <= 1000 AND T1.year = 2004", "pred_sql": "SELECT Campuses.Campus FROM Campuses JOIN faculty ON Campuses.Id = faculty.Campus WHERE faculty.Year = 2004 AND faculty.Faculty BETWEEN 600 AND 1000", "source_tables": ["faculty", "campuses"], "error_info": "Result not equal"}, {"sample_id": 2380, "db_id": "csu_1", "score": 0, "gold_sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = t2.campus JOIN degrees AS T3 ON T1.id = t3.campus AND t2.year = t3.year WHERE t2.year = 2002 ORDER BY t3.degrees DESC LIMIT 1", "pred_sql": "SELECT COUNT(*) AS FacultyCount FROM faculty WHERE Campus = (SELECT Campus FROM degrees WHERE Year = '2002' GROUP BY Campus ORDER BY COUNT(Degrees) DESC LIMIT 1)", "source_tables": ["faculty", "degrees", "campuses"], "error_info": "Result not equal"}, {"sample_id": 2381, "db_id": "csu_1", "score": 0, "gold_sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = t2.campus JOIN degrees AS T3 ON T1.id = t3.campus AND t2.year = t3.year WHERE t2.year = 2002 ORDER BY t3.degrees DESC LIMIT 1", "pred_sql": "SELECT f.Faculty FROM faculty AS f JOIN degrees AS d ON f.Campus = d.Campus WHERE d.Year = '2002' AND d.Campus = (SELECT Campus FROM degrees WHERE Year = '2002' GROUP BY Campus ORDER BY COUNT(Degrees) DESC LIMIT 1)", "source_tables": ["faculty", "degrees", "campuses"], "error_info": "Result not equal"}, {"sample_id": 2382, "db_id": "csu_1", "score": 0, "gold_sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = t2.campus JOIN degrees AS T3 ON T1.id = t3.campus AND t2.year = t3.year WHERE t2.year = 2001 ORDER BY t3.degrees LIMIT 1", "pred_sql": "SELECT COUNT(*) AS FacultyCount FROM faculty WHERE Campus = (SELECT Campus FROM degrees WHERE Year = '2001' GROUP BY Campus ORDER BY COUNT(Degrees) ASC LIMIT 1)", "source_tables": ["faculty", "degrees", "campuses"], "error_info": "Result not equal"}, {"sample_id": 2383, "db_id": "csu_1", "score": 0, "gold_sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = t2.campus JOIN degrees AS T3 ON T1.id = t3.campus AND t2.year = t3.year WHERE t2.year = 2001 ORDER BY t3.degrees LIMIT 1", "pred_sql": "SELECT f.Faculty FROM faculty AS f JOIN degrees AS d ON f.Campus = d.Campus WHERE d.Year = '2001' ORDER BY d.Campus LIMIT 1", "source_tables": ["faculty", "degrees", "campuses"], "error_info": "Result not equal"}, {"sample_id": 2384, "db_id": "csu_1", "score": 1, "gold_sql": "SELECT SUM(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t1.year = 2004 AND t2.campus = 'San Jose State University'", "pred_sql": "SELECT SUM(Undergraduate) AS TotalUndergraduates FROM discipline_enrollments WHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'San Jose State University') AND Year = '2004'", "source_tables": ["discipline_enrollments", "campuses"], "error_info": ""}, {"sample_id": 2385, "db_id": "csu_1", "score": 0, "gold_sql": "SELECT SUM(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t1.year = 2004 AND t2.campus = 'San Jose State University'", "pred_sql": "SELECT SUM(Undergraduate) AS TotalUndergraduates FROM discipline_enrollments WHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'San Jose State')", "source_tables": ["discipline_enrollments", "campuses"], "error_info": "Result not equal"}, {"sample_id": 2386, "db_id": "csu_1", "score": 1, "gold_sql": "SELECT SUM(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t1.year = 2004 AND t2.campus = 'San Francisco State University'", "pred_sql": "SELECT SUM(Graduate) AS TotalGraduates FROM discipline_enrollments WHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'San Francisco State University') AND Year = '2004'", "source_tables": ["discipline_enrollments", "campuses"], "error_info": ""}, {"sample_id": 2387, "db_id": "csu_1", "score": 0, "gold_sql": "SELECT SUM(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t1.year = 2004 AND t2.campus = 'San Francisco State University'", "pred_sql": "SELECT COUNT(*) AS Graduates FROM degrees WHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'San Francisco State University') AND Year = '2004'", "source_tables": ["discipline_enrollments", "campuses"], "error_info": "Result not equal"}, {"sample_id": 2388, "db_id": "csu_1", "score": 1, "gold_sql": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t2.campus = 'San Francisco State University' AND t1.year = 2000", "pred_sql": "SELECT csu_fees.CampusFee FROM csu_fees JOIN Campuses ON csu_fees.Campus = Campuses.Id WHERE Campuses.Campus = 'San Francisco State University' AND csu_fees.Year = 2000", "source_tables": ["csu_fees", "campuses"], "error_info": ""}, {"sample_id": 2389, "db_id": "csu_1", "score": 1, "gold_sql": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t2.campus = 'San Francisco State University' AND t1.year = 2000", "pred_sql": "SELECT CampusFee FROM csu_fees WHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'San Francisco State University') AND Year = 2000", "source_tables": ["csu_fees", "campuses"], "error_info": ""}, {"sample_id": 2390, "db_id": "csu_1", "score": 1, "gold_sql": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t2.campus = 'San Jose State University' AND t1.year = 2000", "pred_sql": "SELECT csu_fees.CampusFee FROM csu_fees JOIN Campuses ON csu_fees.Campus = Campuses.Id WHERE Campuses.Campus = 'San Jose State University' AND csu_fees.Year = 2000", "source_tables": ["csu_fees", "campuses"], "error_info": ""}, {"sample_id": 2391, "db_id": "csu_1", "score": 1, "gold_sql": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t2.campus = 'San Jose State University' AND t1.year = 2000", "pred_sql": "SELECT CampusFee FROM csu_fees WHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'San Jose State University') AND Year = 2000", "source_tables": ["csu_fees", "campuses"], "error_info": ""}, {"sample_id": 2392, "db_id": "csu_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM campuses", "pred_sql": "SELECT COUNT(*) AS CampusCount FROM Campuses", "source_tables": ["campuses"], "error_info": ""}, {"sample_id": 2393, "db_id": "csu_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM campuses", "pred_sql": "SELECT COUNT(*) AS TotalCampuses FROM Campuses", "source_tables": ["campuses"], "error_info": ""}, {"sample_id": 2394, "db_id": "candidate_poll", "score": 1, "gold_sql": "SELECT COUNT(*) FROM candidate", "pred_sql": "SELECT COUNT(*) AS candidate_count FROM candidate", "source_tables": ["candidate"], "error_info": ""}, {"sample_id": 2395, "db_id": "candidate_poll", "score": 1, "gold_sql": "SELECT COUNT(*) FROM candidate", "pred_sql": "SELECT COUNT(*) AS candidate_count FROM candidate", "source_tables": ["candidate"], "error_info": ""}, {"sample_id": 2396, "db_id": "candidate_poll", "score": 0, "gold_sql": "SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Poll_Source, COUNT(*) AS Candidate_Count FROM candidate GROUP BY Poll_Source ORDER BY Candidate_Count DESC LIMIT 1", "source_tables": ["candidate"], "error_info": "Result not equal"}, {"sample_id": 2397, "db_id": "candidate_poll", "score": 0, "gold_sql": "SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Poll_Source, COUNT(*) AS Candidate_Count FROM candidate GROUP BY Poll_Source ORDER BY Candidate_Count DESC LIMIT 1", "source_tables": ["candidate"], "error_info": "Result not equal"}, {"sample_id": 2398, "db_id": "candidate_poll", "score": 0, "gold_sql": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3", "pred_sql": "SELECT Candidate_ID, Support_rate FROM candidate ORDER BY Support_rate DESC LIMIT 3", "source_tables": ["candidate"], "error_info": "Result not equal"}, {"sample_id": 2399, "db_id": "candidate_poll", "score": 1, "gold_sql": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3", "pred_sql": "SELECT Support_rate FROM candidate ORDER BY Support_rate DESC LIMIT 3", "source_tables": ["candidate"], "error_info": ""}, {"sample_id": 2400, "db_id": "candidate_poll", "score": 1, "gold_sql": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1", "pred_sql": "SELECT Candidate_ID FROM candidate ORDER BY Oppose_rate ASC LIMIT 1", "source_tables": ["candidate"], "error_info": ""}, {"sample_id": 2401, "db_id": "candidate_poll", "score": 1, "gold_sql": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1", "pred_sql": "SELECT Candidate_ID FROM candidate ORDER BY Oppose_rate ASC LIMIT 1", "source_tables": ["candidate"], "error_info": ""}, {"sample_id": 2402, "db_id": "candidate_poll", "score": 0, "gold_sql": "SELECT Support_rate, Consider_rate, Oppose_rate FROM candidate ORDER BY unsure_rate", "pred_sql": "SELECT c.Support_rate, c.Consider_rate, c.Oppose_rate, c.Unsure_rate FROM candidate AS c ORDER BY c.Unsure_rate ASC", "source_tables": ["candidate"], "error_info": "Result not equal"}, {"sample_id": 2403, "db_id": "candidate_poll", "score": 0, "gold_sql": "SELECT Support_rate, Consider_rate, Oppose_rate FROM candidate ORDER BY unsure_rate", "pred_sql": "SELECT Candidate_ID, Support_rate, Consider_rate, Oppose_rate, Unsure_rate FROM candidate ORDER BY Unsure_rate ASC", "source_tables": ["candidate"], "error_info": "Result not equal"}, {"sample_id": 2404, "db_id": "candidate_poll", "score": 1, "gold_sql": "SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1", "pred_sql": "SELECT Poll_Source FROM candidate ORDER BY Oppose_rate DESC LIMIT 1", "source_tables": ["candidate"], "error_info": ""}, {"sample_id": 2405, "db_id": "candidate_poll", "score": 0, "gold_sql": "SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1", "pred_sql": "SELECT Poll_Source FROM candidate WHERE NOT Oppose_rate IS NULL", "source_tables": ["candidate"], "error_info": "Result not equal"}, {"sample_id": 2406, "db_id": "candidate_poll", "score": 1, "gold_sql": "SELECT name FROM people ORDER BY date_of_birth", "pred_sql": "SELECT Name FROM people ORDER BY Date_of_Birth ASC", "source_tables": ["people"], "error_info": ""}, {"sample_id": 2407, "db_id": "candidate_poll", "score": 1, "gold_sql": "SELECT name FROM people ORDER BY date_of_birth", "pred_sql": "SELECT Name FROM people ORDER BY Date_of_Birth", "source_tables": ["people"], "error_info": ""}, {"sample_id": 2408, "db_id": "candidate_poll", "score": 1, "gold_sql": "SELECT AVG(height), AVG(weight) FROM people WHERE sex = 'M'", "pred_sql": "SELECT AVG(Height) AS Average_Height, AVG(Weight) AS Average_Weight FROM people WHERE Sex = 'M'", "source_tables": ["people"], "error_info": ""}, {"sample_id": 2409, "db_id": "candidate_poll", "score": 1, "gold_sql": "SELECT AVG(height), AVG(weight) FROM people WHERE sex = 'M'", "pred_sql": "SELECT AVG(Height) AS Average_Height, AVG(Weight) AS Average_Weight FROM people WHERE Sex = 'M'", "source_tables": ["people"], "error_info": ""}, {"sample_id": 2410, "db_id": "candidate_poll", "score": 1, "gold_sql": "SELECT name FROM people WHERE height > 200 OR height < 190", "pred_sql": "SELECT Name FROM people WHERE Height > 200 OR Height < 190", "source_tables": ["people"], "error_info": ""}, {"sample_id": 2411, "db_id": "candidate_poll", "score": 1, "gold_sql": "SELECT name FROM people WHERE height > 200 OR height < 190", "pred_sql": "SELECT Name FROM people WHERE Height > 200 OR Height < 190", "source_tables": ["people"], "error_info": ""}, {"sample_id": 2412, "db_id": "candidate_poll", "score": 1, "gold_sql": "SELECT AVG(weight), MIN(weight), sex FROM people GROUP BY sex", "pred_sql": "SELECT p.Sex, AVG(p.Weight) AS Average_Weight, MIN(p.Weight) AS Minimum_Weight FROM people AS p GROUP BY p.Sex", "source_tables": ["people"], "error_info": ""}, {"sample_id": 2413, "db_id": "candidate_poll", "score": 1, "gold_sql": "SELECT AVG(weight), MIN(weight), sex FROM people GROUP BY sex", "pred_sql": "SELECT Sex, AVG(Weight) AS Average_Weight, MIN(Weight) AS Minimum_Weight FROM people GROUP BY Sex", "source_tables": ["people"], "error_info": ""}, {"sample_id": 2414, "db_id": "candidate_poll", "score": 1, "gold_sql": "SELECT t1.name, t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id ORDER BY t2.support_rate DESC LIMIT 1", "pred_sql": "SELECT p.Name, p.Sex FROM candidate AS c JOIN people AS p ON c.People_ID = p.People_ID ORDER BY c.Support_rate DESC LIMIT 1", "source_tables": ["candidate", "people"], "error_info": ""}, {"sample_id": 2415, "db_id": "candidate_poll", "score": 1, "gold_sql": "SELECT t1.name, t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id ORDER BY t2.support_rate DESC LIMIT 1", "pred_sql": "SELECT p.Name, p.Sex FROM candidate AS c JOIN people AS p ON c.People_ID = p.People_ID ORDER BY c.Support_rate DESC LIMIT 1", "source_tables": ["candidate", "people"], "error_info": ""}, {"sample_id": 2416, "db_id": "candidate_poll", "score": 1, "gold_sql": "SELECT t1.name, t1.sex, MIN(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id GROUP BY t1.sex", "pred_sql": "SELECT p.Name, MIN(c.Oppose_rate) AS Lowest_Oppose_Rate, p.Sex FROM candidate AS c JOIN people AS p ON c.People_ID = p.People_ID GROUP BY p.Sex", "source_tables": ["candidate", "people"], "error_info": ""}, {"sample_id": 2417, "db_id": "candidate_poll", "score": 0, "gold_sql": "SELECT t1.name, t1.sex, MIN(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id GROUP BY t1.sex", "pred_sql": "SELECT p.Name, p.Sex, c.Oppose_rate FROM candidate AS c JOIN people AS p ON c.People_ID = p.People_ID WHERE c.Oppose_rate = (SELECT MAX(Oppose_rate) FROM candidate AS c2 JOIN people AS p2 ON c2.People_ID = p2.People_ID WHERE p2.Sex = p.Sex)", "source_tables": ["candidate", "people"], "error_info": "Result not equal"}, {"sample_id": 2418, "db_id": "candidate_poll", "score": 0, "gold_sql": "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id GROUP BY t1.sex ORDER BY AVG(t2.unsure_rate) DESC LIMIT 1", "pred_sql": "SELECT p.Sex, AVG(c.Unsure_rate) AS Average_Unsure_Rate FROM candidate AS c JOIN people AS p ON c.People_ID = p.People_ID GROUP BY p.Sex ORDER BY Average_Unsure_Rate DESC LIMIT 1", "source_tables": ["candidate", "people"], "error_info": "Result not equal"}, {"sample_id": 2419, "db_id": "candidate_poll", "score": 1, "gold_sql": "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id GROUP BY t1.sex ORDER BY AVG(t2.unsure_rate) DESC LIMIT 1", "pred_sql": "SELECT p.Sex FROM candidate AS c JOIN people AS p ON c.People_ID = p.People_ID WHERE c.Unsure_rate = (SELECT MAX(Unsure_rate) FROM candidate)", "source_tables": ["candidate", "people"], "error_info": ""}, {"sample_id": 2420, "db_id": "candidate_poll", "score": 1, "gold_sql": "SELECT name FROM people WHERE NOT people_id IN (SELECT people_id FROM candidate)", "pred_sql": "SELECT Name FROM people WHERE NOT People_ID IN (SELECT People_ID FROM candidate)", "source_tables": ["candidate", "people"], "error_info": ""}, {"sample_id": 2421, "db_id": "candidate_poll", "score": 1, "gold_sql": "SELECT name FROM people WHERE NOT people_id IN (SELECT people_id FROM candidate)", "pred_sql": "SELECT Name FROM people WHERE NOT People_ID IN (SELECT People_ID FROM candidate)", "source_tables": ["candidate", "people"], "error_info": ""}, {"sample_id": 2422, "db_id": "candidate_poll", "score": 1, "gold_sql": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t2.support_rate < t2.oppose_rate", "pred_sql": "SELECT p.Name FROM candidate AS c JOIN people AS p ON c.People_ID = p.People_ID WHERE c.Support_rate < c.Oppose_rate", "source_tables": ["candidate", "people"], "error_info": ""}, {"sample_id": 2423, "db_id": "candidate_poll", "score": 1, "gold_sql": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t2.support_rate < t2.oppose_rate", "pred_sql": "SELECT p.Name FROM candidate AS c JOIN people AS p ON c.People_ID = p.People_ID WHERE c.Support_rate < c.Oppose_rate", "source_tables": ["candidate", "people"], "error_info": ""}, {"sample_id": 2424, "db_id": "candidate_poll", "score": 1, "gold_sql": "SELECT COUNT(*), sex FROM people WHERE weight > 85 GROUP BY sex", "pred_sql": "SELECT Sex, COUNT(*) AS Number_of_People FROM people WHERE Weight > 85 GROUP BY Sex", "source_tables": ["people"], "error_info": ""}, {"sample_id": 2425, "db_id": "candidate_poll", "score": 1, "gold_sql": "SELECT COUNT(*), sex FROM people WHERE weight > 85 GROUP BY sex", "pred_sql": "SELECT Sex, COUNT(*) AS Number_of_People FROM people WHERE Weight > 85 GROUP BY Sex", "source_tables": ["people"], "error_info": ""}, {"sample_id": 2426, "db_id": "candidate_poll", "score": 1, "gold_sql": "SELECT MAX(support_rate), MIN(consider_rate), MIN(oppose_rate) FROM candidate", "pred_sql": "SELECT MAX(Support_rate) AS Highest_Support, MIN(Consider_rate) AS Lowest_Consider, MIN(Oppose_rate) AS Lowest_Oppose FROM candidate", "source_tables": ["candidate"], "error_info": ""}, {"sample_id": 2427, "db_id": "candidate_poll", "score": 1, "gold_sql": "SELECT MAX(support_rate), MIN(consider_rate), MIN(oppose_rate) FROM candidate", "pred_sql": "SELECT MAX(Support_rate) AS Max_Support_Rate, MIN(Consider_rate) AS Min_Consider_Rate, MIN(Oppose_rate) AS Min_Oppose_Rate FROM candidate", "source_tables": ["candidate"], "error_info": ""}, {"sample_id": 2428, "db_id": "candidate_poll", "score": 1, "gold_sql": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t1.sex = 'F' ORDER BY t1.name", "pred_sql": "SELECT p.Name FROM people AS p JOIN candidate AS c ON p.People_ID = c.People_ID WHERE p.Sex = 'F' ORDER BY p.Name ASC", "source_tables": ["candidate", "people"], "error_info": ""}, {"sample_id": 2429, "db_id": "candidate_poll", "score": 1, "gold_sql": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t1.sex = 'F' ORDER BY t1.name", "pred_sql": "SELECT p.Name FROM people AS p JOIN candidate AS c ON p.People_ID = c.People_ID WHERE p.Sex = 'F' ORDER BY p.Name ASC", "source_tables": ["candidate", "people"], "error_info": ""}, {"sample_id": 2430, "db_id": "candidate_poll", "score": 1, "gold_sql": "SELECT name FROM people WHERE height < (SELECT AVG(height) FROM people)", "pred_sql": "SELECT Name FROM people WHERE Height < (SELECT AVG(Height) FROM people)", "source_tables": ["people"], "error_info": ""}, {"sample_id": 2431, "db_id": "candidate_poll", "score": 1, "gold_sql": "SELECT name FROM people WHERE height < (SELECT AVG(height) FROM people)", "pred_sql": "SELECT Name FROM people WHERE Height < (SELECT AVG(Height) FROM people)", "source_tables": ["people"], "error_info": ""}, {"sample_id": 2432, "db_id": "candidate_poll", "score": 1, "gold_sql": "SELECT * FROM people", "pred_sql": "SELECT * FROM people", "source_tables": ["people"], "error_info": ""}, {"sample_id": 2433, "db_id": "candidate_poll", "score": 1, "gold_sql": "SELECT * FROM people", "pred_sql": "SELECT * FROM people", "source_tables": ["people"], "error_info": ""}, {"sample_id": 2434, "db_id": "movie_1", "score": 0, "gold_sql": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'", "pred_sql": "SELECT title FROM Movie WHERE director = 'steven spielberg'", "source_tables": ["movie"], "error_info": "Result not equal"}, {"sample_id": 2435, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'", "pred_sql": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'", "source_tables": ["movie"], "error_info": ""}, {"sample_id": 2436, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR > 2000", "pred_sql": "SELECT title FROM Movie WHERE year > '2000' AND director = 'James Cameron'", "source_tables": ["movie"], "error_info": ""}, {"sample_id": 2437, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR > 2000", "pred_sql": "SELECT title FROM Movie WHERE director = 'James Cameron' AND year > '2000'", "source_tables": ["movie"], "error_info": ""}, {"sample_id": 2438, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Movie WHERE YEAR < 2000", "pred_sql": "SELECT COUNT(*) AS movie_count FROM Movie WHERE year < '2000'", "source_tables": ["movie"], "error_info": ""}, {"sample_id": 2439, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Movie WHERE YEAR < 2000", "pred_sql": "SELECT COUNT(*) AS movie_count FROM Movie WHERE year < '2000'", "source_tables": ["movie"], "error_info": ""}, {"sample_id": 2440, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT director FROM Movie WHERE title = 'Avatar'", "pred_sql": "SELECT director FROM Movie WHERE title = 'Avatar'", "source_tables": ["movie"], "error_info": ""}, {"sample_id": 2441, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT director FROM Movie WHERE title = 'Avatar'", "pred_sql": "SELECT director FROM Movie WHERE title = 'Avatar'", "source_tables": ["movie"], "error_info": ""}, {"sample_id": 2442, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Reviewer", "pred_sql": "SELECT COUNT(*) AS reviewer_count FROM Reviewer", "source_tables": ["reviewer"], "error_info": ""}, {"sample_id": 2443, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Reviewer", "pred_sql": "SELECT COUNT(*) AS reviewer_count FROM Reviewer", "source_tables": ["reviewer"], "error_info": ""}, {"sample_id": 2444, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT rID FROM Reviewer WHERE name LIKE '%Mike%'", "pred_sql": "SELECT rID FROM Reviewer WHERE name LIKE '%Mike%'", "source_tables": ["reviewer"], "error_info": ""}, {"sample_id": 2445, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT rID FROM Reviewer WHERE name LIKE '%Mike%'", "pred_sql": "SELECT rID FROM Reviewer WHERE name LIKE '%Mike%'", "source_tables": ["reviewer"], "error_info": ""}, {"sample_id": 2446, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT rID FROM Reviewer WHERE name = 'Daniel Lewis'", "pred_sql": "SELECT rID FROM Reviewer WHERE name = 'Daniel Lewis'", "source_tables": ["reviewer"], "error_info": ""}, {"sample_id": 2447, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT rID FROM Reviewer WHERE name = 'Daniel Lewis'", "pred_sql": "SELECT rID FROM Reviewer WHERE name = 'Daniel Lewis'", "source_tables": ["reviewer"], "error_info": ""}, {"sample_id": 2448, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Rating WHERE stars > 3", "pred_sql": "SELECT COUNT(*) AS total_ratings FROM Rating WHERE stars > '3'", "source_tables": ["rating"], "error_info": ""}, {"sample_id": 2449, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Rating WHERE stars > 3", "pred_sql": "SELECT COUNT(*) AS rating_count FROM Rating WHERE stars > '3'", "source_tables": ["rating"], "error_info": ""}, {"sample_id": 2450, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT MAX(stars), MIN(stars) FROM Rating", "pred_sql": "SELECT MIN(stars) AS lowest_rating, MAX(stars) AS highest_rating FROM Rating", "source_tables": ["rating"], "error_info": ""}, {"sample_id": 2451, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT MAX(stars), MIN(stars) FROM Rating", "pred_sql": "SELECT MAX(stars) AS max_stars, MIN(stars) AS min_stars FROM Rating", "source_tables": ["rating"], "error_info": ""}, {"sample_id": 2452, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars >= 4 ORDER BY T1.year", "pred_sql": "SELECT DISTINCT Movie.year FROM Movie JOIN Rating ON Movie.mID = Rating.mID WHERE Rating.stars IN ('4', '5') ORDER BY Movie.year ASC", "source_tables": ["rating", "movie"], "error_info": ""}, {"sample_id": 2453, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars >= 4 ORDER BY T1.year", "pred_sql": "SELECT DISTINCT Movie.year FROM Movie JOIN Rating ON Movie.mID = Rating.mID WHERE Rating.stars IN ('4', '5') ORDER BY Movie.year ASC", "source_tables": ["rating", "movie"], "error_info": ""}, {"sample_id": 2454, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT T1.director, T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars = 5", "pred_sql": "SELECT DISTINCT Movie.director, Movie.title FROM Movie JOIN Rating ON Movie.mID = Rating.mID WHERE Rating.stars = '5'", "source_tables": ["rating", "movie"], "error_info": ""}, {"sample_id": 2455, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT T1.director, T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars = 5", "pred_sql": "SELECT DISTINCT Movie.director, Movie.title FROM Movie JOIN Rating ON Movie.mID = Rating.mID WHERE Rating.stars = '5'", "source_tables": ["rating", "movie"], "error_info": ""}, {"sample_id": 2456, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT T2.name, AVG(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY T2.name", "pred_sql": "SELECT Reviewer.name, AVG(CAST(Rating.stars AS FLOAT)) AS average_rating FROM Reviewer JOIN Rating ON Reviewer.rID = Rating.rID GROUP BY Reviewer.rID", "source_tables": ["rating", "reviewer"], "error_info": ""}, {"sample_id": 2457, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT T2.name, AVG(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY T2.name", "pred_sql": "SELECT Reviewer.name, AVG(Rating.stars) AS average_stars FROM Rating JOIN Reviewer ON Rating.rID = Reviewer.rID GROUP BY Reviewer.rID", "source_tables": ["rating", "reviewer"], "error_info": ""}, {"sample_id": 2458, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT title FROM Movie WHERE NOT mID IN (SELECT mID FROM Rating)", "pred_sql": "SELECT title FROM Movie WHERE NOT mID IN (SELECT mID FROM Rating)", "source_tables": ["rating", "movie"], "error_info": ""}, {"sample_id": 2459, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT title FROM Movie WHERE NOT mID IN (SELECT mID FROM Rating)", "pred_sql": "SELECT title FROM Movie WHERE NOT mID IN (SELECT mID FROM Rating)", "source_tables": ["rating", "movie"], "error_info": ""}, {"sample_id": 2460, "db_id": "movie_1", "score": 0, "gold_sql": "SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE ratingDate = 'null'", "pred_sql": "SELECT Reviewer.name FROM Reviewer JOIN Rating ON Reviewer.rID = Rating.rID WHERE Rating.ratingDate IS NULL", "source_tables": ["rating", "reviewer"], "error_info": "Result not equal"}, {"sample_id": 2461, "db_id": "movie_1", "score": 0, "gold_sql": "SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE ratingDate = 'null'", "pred_sql": "SELECT DISTINCT Reviewer.name FROM Reviewer JOIN Rating ON Reviewer.rID = Rating.rID WHERE Rating.ratingDate IS NULL", "source_tables": ["rating", "reviewer"], "error_info": "Result not equal"}, {"sample_id": 2462, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT AVG(T1.stars), T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.year = (SELECT MIN(YEAR) FROM Movie)", "pred_sql": "SELECT title, AVG(stars) AS average_rating FROM Movie JOIN Rating ON Movie.mID = Rating.mID WHERE year = (SELECT MIN(year) FROM Movie) GROUP BY title", "source_tables": ["rating", "movie"], "error_info": ""}, {"sample_id": 2463, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT AVG(T1.stars), T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.year = (SELECT MIN(YEAR) FROM Movie)", "pred_sql": "SELECT title, AVG(stars) AS average_rating FROM Movie JOIN Rating ON Movie.mID = Rating.mID WHERE year = (SELECT MIN(year) FROM Movie) GROUP BY title", "source_tables": ["rating", "movie"], "error_info": ""}, {"sample_id": 2464, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT title FROM Movie WHERE YEAR = (SELECT MAX(YEAR) FROM Movie)", "pred_sql": "SELECT title FROM Movie ORDER BY year DESC LIMIT 1", "source_tables": ["movie"], "error_info": ""}, {"sample_id": 2465, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT title FROM Movie WHERE YEAR = (SELECT MAX(YEAR) FROM Movie)", "pred_sql": "SELECT title FROM Movie ORDER BY year DESC LIMIT 1", "source_tables": ["movie"], "error_info": ""}, {"sample_id": 2466, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT MAX(T1.stars), T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.year = (SELECT MAX(YEAR) FROM Movie)", "pred_sql": "SELECT MAX(R.stars) AS max_stars, M.year FROM Movie AS M JOIN Rating AS R ON M.mID = R.mID WHERE M.year = (SELECT MAX(year) FROM Movie)", "source_tables": ["rating", "movie"], "error_info": ""}, {"sample_id": 2467, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT MAX(T1.stars), T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.year = (SELECT MAX(YEAR) FROM Movie)", "pred_sql": "SELECT MAX(R.stars) AS highest_rating, M.year FROM Movie AS M JOIN Rating AS R ON M.mID = R.mID WHERE M.year = (SELECT MAX(year) FROM Movie)", "source_tables": ["rating", "movie"], "error_info": ""}, {"sample_id": 2468, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT title FROM Movie WHERE YEAR > (SELECT MAX(YEAR) FROM Movie WHERE director = 'Steven Spielberg')", "pred_sql": "SELECT title FROM Movie WHERE year > (SELECT MAX(year) FROM Movie WHERE director = 'Steven Spielberg')", "source_tables": ["movie"], "error_info": ""}, {"sample_id": 2469, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT title FROM Movie WHERE YEAR > (SELECT MAX(YEAR) FROM Movie WHERE director = 'Steven Spielberg')", "pred_sql": "SELECT title FROM Movie WHERE year > (SELECT MAX(year) FROM Movie WHERE director = 'Steven Spielberg')", "source_tables": ["movie"], "error_info": ""}, {"sample_id": 2470, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT T2.title, T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars > (SELECT AVG(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.director = 'James Cameron')", "pred_sql": "SELECT title, director FROM Movie WHERE mID IN (SELECT mID FROM Rating WHERE stars > (SELECT AVG(stars) FROM Rating WHERE mID IN (SELECT mID FROM Movie WHERE director = 'James Cameron')))", "source_tables": ["rating", "movie"], "error_info": ""}, {"sample_id": 2471, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT T2.title, T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars > (SELECT AVG(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.director = 'James Cameron')", "pred_sql": "SELECT title, director FROM Movie WHERE mID IN (SELECT mID FROM Rating WHERE stars > (SELECT AVG(stars) FROM Rating JOIN Movie ON Rating.mID = Movie.mID WHERE director = 'James Cameron'))", "source_tables": ["rating", "movie"], "error_info": ""}, {"sample_id": 2472, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT T3.name, T2.title, T1.stars, T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID ORDER BY T3.name, T2.title, T1.stars", "pred_sql": "SELECT Reviewer.name, Movie.title, Rating.stars, Rating.ratingDate FROM Rating JOIN Reviewer ON Rating.rID = Reviewer.rID JOIN Movie ON Rating.mID = Movie.mID ORDER BY Reviewer.name, Movie.title, Rating.stars", "source_tables": ["rating", "movie", "reviewer"], "error_info": ""}, {"sample_id": 2473, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT T3.name, T2.title, T1.stars, T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID ORDER BY T3.name, T2.title, T1.stars", "pred_sql": "SELECT Reviewer.name, Movie.title, Rating.stars, Rating.ratingDate FROM Rating JOIN Reviewer ON Rating.rID = Reviewer.rID JOIN Movie ON Rating.mID = Movie.mID ORDER BY Reviewer.name, Movie.title, Rating.stars", "source_tables": ["rating", "movie", "reviewer"], "error_info": ""}, {"sample_id": 2474, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY T1.rID HAVING COUNT(*) >= 3", "pred_sql": "SELECT Reviewer.name FROM Reviewer JOIN Rating ON Reviewer.rID = Rating.rID GROUP BY Reviewer.rID HAVING COUNT(Rating.mID) >= 3", "source_tables": ["rating", "reviewer"], "error_info": ""}, {"sample_id": 2475, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY T1.rID HAVING COUNT(*) >= 3", "pred_sql": "SELECT Reviewer.name FROM Reviewer JOIN Rating ON Reviewer.rID = Rating.rID GROUP BY Reviewer.rID HAVING COUNT(Rating.mID) >= 3", "source_tables": ["rating", "reviewer"], "error_info": ""}, {"sample_id": 2476, "db_id": "movie_1", "score": 0, "gold_sql": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T2.title = 'Gone with the Wind'", "pred_sql": "SELECT Reviewer.name FROM Reviewer JOIN Rating ON Reviewer.rID = Rating.rID JOIN Movie ON Rating.mID = Movie.mID WHERE Movie.title = 'Gone with the Wind'", "source_tables": ["rating", "movie", "reviewer"], "error_info": "Result not equal"}, {"sample_id": 2477, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T2.title = 'Gone with the Wind'", "pred_sql": "SELECT DISTINCT Reviewer.name FROM Reviewer JOIN Rating ON Reviewer.rID = Rating.rID JOIN Movie ON Rating.mID = Movie.mID WHERE Movie.title = 'Gone with the Wind'", "source_tables": ["rating", "movie", "reviewer"], "error_info": ""}, {"sample_id": 2478, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Sarah Martinez'", "pred_sql": "SELECT DISTINCT Movie.director FROM Movie JOIN Rating ON Movie.mID = Rating.mID JOIN Reviewer ON Rating.rID = Reviewer.rID WHERE Reviewer.name = 'Sarah Martinez'", "source_tables": ["rating", "movie", "reviewer"], "error_info": ""}, {"sample_id": 2479, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Sarah Martinez'", "pred_sql": "SELECT DISTINCT Movie.director FROM Movie JOIN Rating ON Movie.mID = Rating.mID JOIN Reviewer ON Rating.rID = Reviewer.rID WHERE Reviewer.name = 'Sarah Martinez'", "source_tables": ["rating", "movie", "reviewer"], "error_info": ""}, {"sample_id": 2480, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT DISTINCT T3.name, T2.title, T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T2.director = T3.name", "pred_sql": "SELECT Reviewer.name, Movie.title, Rating.stars FROM Rating JOIN Reviewer ON Rating.rID = Reviewer.rID JOIN Movie ON Rating.mID = Movie.mID WHERE Reviewer.name = Movie.director", "source_tables": ["rating", "movie", "reviewer"], "error_info": ""}, {"sample_id": 2481, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT DISTINCT T3.name, T2.title, T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T2.director = T3.name", "pred_sql": "SELECT Reviewer.name, Movie.title, Rating.stars FROM Reviewer JOIN Rating ON Reviewer.rID = Rating.rID JOIN Movie ON Rating.mID = Movie.mID WHERE Reviewer.name = Movie.director", "source_tables": ["rating", "movie", "reviewer"], "error_info": ""}, {"sample_id": 2482, "db_id": "movie_1", "score": 0, "gold_sql": "SELECT name FROM Reviewer UNION SELECT title FROM Movie", "pred_sql": "SELECT Reviewer.name, Movie.title FROM Reviewer JOIN Rating ON Reviewer.rID = Rating.rID JOIN Movie ON Rating.mID = Movie.mID", "source_tables": ["movie", "reviewer"], "error_info": "Result not equal"}, {"sample_id": 2483, "db_id": "movie_1", "score": 0, "gold_sql": "SELECT name FROM Reviewer UNION SELECT title FROM Movie", "pred_sql": "SELECT Reviewer.name, Movie.title FROM Reviewer JOIN Rating ON Reviewer.rID = Rating.rID JOIN Movie ON Rating.mID = Movie.mID", "source_tables": ["movie", "reviewer"], "error_info": "Result not equal"}, {"sample_id": 2484, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Chris Jackson'", "pred_sql": "SELECT title FROM Movie WHERE NOT mID IN (SELECT mID FROM Rating WHERE rID IN (SELECT rID FROM Reviewer WHERE name = 'Chris Jackson'))", "source_tables": ["rating", "movie", "reviewer"], "error_info": ""}, {"sample_id": 2485, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Chris Jackson'", "pred_sql": "SELECT title FROM Movie WHERE NOT mID IN (SELECT mID FROM Rating WHERE rID = (SELECT rID FROM Reviewer WHERE name = 'Chris Jackson'))", "source_tables": ["rating", "movie", "reviewer"], "error_info": ""}, {"sample_id": 2486, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT T1.title, T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director = T2.director WHERE T1.title <> T2.title ORDER BY T1.director, T1.title", "pred_sql": "SELECT M.title, M.director FROM Movie AS M WHERE M.director IN (SELECT director FROM Movie GROUP BY director HAVING COUNT(mID) > 1) ORDER BY M.director, M.title", "source_tables": ["movie"], "error_info": ""}, {"sample_id": 2487, "db_id": "movie_1", "score": 0, "gold_sql": "SELECT T1.title, T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director = T2.director WHERE T1.title <> T2.title ORDER BY T1.director, T1.title", "pred_sql": "SELECT Movie.title, Movie.director FROM Movie WHERE Movie.director IN (SELECT director FROM Movie GROUP BY director HAVING COUNT(mID) > 1)", "source_tables": ["movie"], "error_info": "Result not equal"}, {"sample_id": 2488, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT T1.title, T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director = T2.director WHERE T1.title <> T2.title", "pred_sql": "SELECT title, year FROM Movie WHERE director IN (SELECT director FROM Movie GROUP BY director HAVING COUNT(mID) > 1)", "source_tables": ["movie"], "error_info": ""}, {"sample_id": 2489, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT T1.title, T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director = T2.director WHERE T1.title <> T2.title", "pred_sql": "SELECT title, year FROM Movie WHERE director IN (SELECT director FROM Movie GROUP BY director HAVING COUNT(mID) > 1)", "source_tables": ["movie"], "error_info": ""}, {"sample_id": 2490, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT director FROM Movie GROUP BY director HAVING COUNT(*) = 1", "pred_sql": "SELECT director FROM Movie GROUP BY director HAVING COUNT(mID) = 1", "source_tables": ["movie"], "error_info": ""}, {"sample_id": 2491, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT director FROM Movie GROUP BY director HAVING COUNT(*) = 1", "pred_sql": "SELECT director FROM Movie GROUP BY director HAVING COUNT(mID) = 1", "source_tables": ["movie"], "error_info": ""}, {"sample_id": 2492, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT director FROM Movie WHERE director <> 'null' GROUP BY director HAVING COUNT(*) = 1", "pred_sql": "SELECT director FROM Movie WHERE NOT director IS NULL GROUP BY director HAVING COUNT(mID) = 1", "source_tables": ["movie"], "error_info": ""}, {"sample_id": 2493, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT director FROM Movie WHERE director <> 'null' GROUP BY director HAVING COUNT(*) = 1", "pred_sql": "SELECT director FROM Movie GROUP BY director HAVING COUNT(mID) = 1 AND NOT director IS NULL", "source_tables": ["movie"], "error_info": ""}, {"sample_id": 2494, "db_id": "movie_1", "score": 0, "gold_sql": "SELECT COUNT(*), T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.director", "pred_sql": "SELECT Movie.director, COUNT(Rating.mID) AS review_count FROM Movie LEFT JOIN Rating ON Movie.mID = Rating.mID GROUP BY Movie.director", "source_tables": ["rating", "movie"], "error_info": "Result not equal"}, {"sample_id": 2495, "db_id": "movie_1", "score": 0, "gold_sql": "SELECT COUNT(*), T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.director", "pred_sql": "SELECT Movie.director, COUNT(Rating.rID) AS review_count FROM Movie LEFT JOIN Rating ON Movie.mID = Rating.mID GROUP BY Movie.director", "source_tables": ["rating", "movie"], "error_info": "Result not equal"}, {"sample_id": 2496, "db_id": "movie_1", "score": 0, "gold_sql": "SELECT T2.title, AVG(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID ORDER BY AVG(T1.stars) DESC LIMIT 1", "pred_sql": "SELECT Movie.title, AVG(Rating.stars) AS average_rating FROM Movie JOIN Rating ON Movie.mID = Rating.mID GROUP BY Movie.mID ORDER BY average_rating DESC", "source_tables": ["rating", "movie"], "error_info": "Result not equal"}, {"sample_id": 2497, "db_id": "movie_1", "score": 0, "gold_sql": "SELECT T2.title, AVG(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID ORDER BY AVG(T1.stars) DESC LIMIT 1", "pred_sql": "SELECT Movie.title, AVG(Rating.stars) AS average_rating FROM Movie JOIN Rating ON Movie.mID = Rating.mID GROUP BY Movie.mID ORDER BY average_rating DESC", "source_tables": ["rating", "movie"], "error_info": "Result not equal"}, {"sample_id": 2498, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT T2.title, AVG(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID ORDER BY AVG(T1.stars) LIMIT 1", "pred_sql": "SELECT Movie.title, AVG(Rating.stars) AS average_rating FROM Movie JOIN Rating ON Movie.mID = Rating.mID GROUP BY Movie.mID ORDER BY average_rating ASC LIMIT 1", "source_tables": ["rating", "movie"], "error_info": ""}, {"sample_id": 2499, "db_id": "movie_1", "score": 0, "gold_sql": "SELECT T2.title, AVG(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID ORDER BY AVG(T1.stars) LIMIT 1", "pred_sql": "SELECT title, AVG(stars) AS average_rating FROM Movie JOIN Rating ON Movie.mID = Rating.mID GROUP BY Movie.mID HAVING AVG(stars) = (SELECT MIN(avg_rating) FROM (SELECT AVG(stars) AS avg_rating FROM Rating GROUP BY mID) AS avg_ratings)", "source_tables": ["rating", "movie"], "error_info": "Result not equal"}, {"sample_id": 2500, "db_id": "movie_1", "score": 0, "gold_sql": "SELECT T2.title, T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY T1.stars DESC LIMIT 3", "pred_sql": "SELECT Movie.title, Movie.year FROM Movie JOIN Rating ON Movie.mID = Rating.mID GROUP BY Movie.mID ORDER BY AVG(Rating.stars) DESC LIMIT 3", "source_tables": ["rating", "movie"], "error_info": "Result not equal"}, {"sample_id": 2501, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT T2.title, T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY T1.stars DESC LIMIT 3", "pred_sql": "SELECT Movie.title, Movie.year FROM Movie JOIN Rating ON Movie.mID = Rating.mID ORDER BY Rating.stars DESC LIMIT 3", "source_tables": ["rating", "movie"], "error_info": ""}, {"sample_id": 2502, "db_id": "movie_1", "score": 0, "gold_sql": "SELECT T2.title, T1.stars, T2.director, MAX(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director <> 'null' GROUP BY director", "pred_sql": "SELECT m.director, m.title, MAX(r.stars) AS highest_rating FROM Movie AS m JOIN Rating AS r ON m.mID = r.mID WHERE NOT m.director IS NULL GROUP BY m.director, m.title HAVING r.stars = (SELECT MAX(stars) FROM Rating WHERE mID = m.mID)", "source_tables": ["rating", "movie"], "error_info": "Result not equal"}, {"sample_id": 2503, "db_id": "movie_1", "score": 0, "gold_sql": "SELECT T2.title, T1.stars, T2.director, MAX(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director <> 'null' GROUP BY director", "pred_sql": "SELECT Movie.director, Movie.title, Rating.stars FROM Movie JOIN Rating ON Movie.mID = Rating.mID JOIN Reviewer ON Rating.rID = Reviewer.rID ORDER BY Movie.director", "source_tables": ["rating", "movie"], "error_info": "Result not equal"}, {"sample_id": 2504, "db_id": "movie_1", "score": 0, "gold_sql": "SELECT T2.title, T1.rID, T1.stars, MIN(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.rID", "pred_sql": "SELECT Movie.title, Rating.stars FROM Rating JOIN Movie ON Rating.mID = Movie.mID WHERE (Rating.rID, Rating.stars) IN (SELECT Rating.rID, MIN(Rating.stars) FROM Rating GROUP BY Rating.rID)", "source_tables": ["rating", "movie"], "error_info": "Result not equal"}, {"sample_id": 2505, "db_id": "movie_1", "score": 0, "gold_sql": "SELECT T2.title, T1.rID, T1.stars, MIN(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.rID", "pred_sql": "SELECT r.rID, m.title, r2.stars FROM Reviewer AS r JOIN Rating AS r2 ON r.rID = r2.rID JOIN Movie AS m ON r2.mID = m.mID WHERE r2.stars = (SELECT MIN(stars) FROM Rating WHERE rID = r.rID)", "source_tables": ["rating", "movie"], "error_info": "Result not equal"}, {"sample_id": 2506, "db_id": "movie_1", "score": 0, "gold_sql": "SELECT T2.title, T1.stars, T2.director, MIN(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T2.director", "pred_sql": "SELECT M.title, MIN(R.stars) AS lowest_rating FROM Movie AS M JOIN Rating AS R ON M.mID = R.mID GROUP BY M.director", "source_tables": ["rating", "movie"], "error_info": "Result not equal"}, {"sample_id": 2507, "db_id": "movie_1", "score": 0, "gold_sql": "SELECT T2.title, T1.stars, T2.director, MIN(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T2.director", "pred_sql": "SELECT M.director, M.title, R.stars FROM Movie AS M JOIN Rating AS R ON M.mID = R.mID WHERE (M.director, R.stars) IN (SELECT M2.director, MIN(R2.stars) FROM Movie AS M2 JOIN Rating AS R2 ON M2.mID = R2.mID GROUP BY M2.director) ORDER BY M.director", "source_tables": ["rating", "movie"], "error_info": "Result not equal"}, {"sample_id": 2508, "db_id": "movie_1", "score": 0, "gold_sql": "SELECT T2.title, T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT title FROM Movie WHERE mID = (SELECT mID FROM Rating GROUP BY mID ORDER BY COUNT(*) DESC LIMIT 1)", "source_tables": ["rating", "movie"], "error_info": "Result not equal"}, {"sample_id": 2509, "db_id": "movie_1", "score": 0, "gold_sql": "SELECT T2.title, T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT title FROM Movie WHERE mID = (SELECT mID FROM Rating GROUP BY mID ORDER BY COUNT(*) DESC LIMIT 1)", "source_tables": ["rating", "movie"], "error_info": "Result not equal"}, {"sample_id": 2510, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars BETWEEN 3 AND 5", "pred_sql": "SELECT Movie.title FROM Movie JOIN Rating ON Movie.mID = Rating.mID WHERE Rating.stars BETWEEN '3' AND '5'", "source_tables": ["rating", "movie"], "error_info": ""}, {"sample_id": 2511, "db_id": "movie_1", "score": 0, "gold_sql": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars BETWEEN 3 AND 5", "pred_sql": "SELECT DISTINCT Movie.title FROM Movie JOIN Rating ON Movie.mID = Rating.mID WHERE Rating.stars BETWEEN '3' AND '5'", "source_tables": ["rating", "movie"], "error_info": "Result not equal"}, {"sample_id": 2512, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars > 3", "pred_sql": "SELECT Reviewer.name FROM Reviewer JOIN Rating ON Reviewer.rID = Rating.rID WHERE Rating.stars > '3'", "source_tables": ["rating", "reviewer"], "error_info": ""}, {"sample_id": 2513, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars > 3", "pred_sql": "SELECT DISTINCT Reviewer.name FROM Reviewer JOIN Rating ON Reviewer.rID = Rating.rID WHERE Rating.stars > '3'", "source_tables": ["rating", "reviewer"], "error_info": ""}, {"sample_id": 2514, "db_id": "movie_1", "score": 0, "gold_sql": "SELECT mID, AVG(stars) FROM Rating WHERE NOT mID IN (SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T2.name = 'Brittany Harris') GROUP BY mID", "pred_sql": "SELECT Movie.title, AVG(Rating.stars) AS average_rating FROM Movie LEFT JOIN Rating ON Movie.mID = Rating.mID WHERE NOT Movie.mID IN (SELECT Rating.mID FROM Rating JOIN Reviewer ON Rating.rID = Reviewer.rID WHERE Reviewer.name = 'Brittany Harris') GROUP BY Movie.title", "source_tables": ["rating", "reviewer"], "error_info": "Result not equal"}, {"sample_id": 2515, "db_id": "movie_1", "score": 0, "gold_sql": "SELECT mID, AVG(stars) FROM Rating WHERE NOT mID IN (SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T2.name = 'Brittany Harris') GROUP BY mID", "pred_sql": "SELECT Movie.title, AVG(Rating.stars) AS average_rating FROM Movie LEFT JOIN Rating ON Movie.mID = Rating.mID WHERE NOT Movie.mID IN (SELECT Rating.mID FROM Rating JOIN Reviewer ON Rating.rID = Reviewer.rID WHERE Reviewer.name = 'Brittany Harris') GROUP BY Movie.mID", "source_tables": ["rating", "reviewer"], "error_info": "Result not equal"}, {"sample_id": 2516, "db_id": "movie_1", "score": 0, "gold_sql": "SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T2.name = 'Brittany Harris'", "pred_sql": "SELECT m.mID FROM Movie AS m WHERE NOT m.mID IN (SELECT r.mID FROM Rating AS r JOIN Reviewer AS rev ON r.rID = rev.rID WHERE rev.name = 'Brittany Harris')", "source_tables": ["rating", "reviewer"], "error_info": "Result not equal"}, {"sample_id": 2517, "db_id": "movie_1", "score": 0, "gold_sql": "SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T2.name = 'Brittany Harris'", "pred_sql": "SELECT m.mID FROM Movie AS m WHERE NOT m.mID IN (SELECT r.mID FROM Rating AS r JOIN Reviewer AS rev ON r.rID = rev.rID WHERE rev.name = 'Britanny Harris')", "source_tables": ["rating", "reviewer"], "error_info": "Result not equal"}, {"sample_id": 2518, "db_id": "movie_1", "score": 0, "gold_sql": "SELECT mID, AVG(stars) FROM Rating GROUP BY mID HAVING COUNT(*) >= 2", "pred_sql": "SELECT Movie.title, AVG(Rating.stars) AS average_rating FROM Movie JOIN Rating ON Movie.mID = Rating.mID GROUP BY Movie.mID HAVING COUNT(Rating.rID) >= 2", "source_tables": ["rating"], "error_info": "Result not equal"}, {"sample_id": 2519, "db_id": "movie_1", "score": 0, "gold_sql": "SELECT mID, AVG(stars) FROM Rating GROUP BY mID HAVING COUNT(*) >= 2", "pred_sql": "SELECT Movie.title, AVG(Rating.stars) AS average_rating FROM Movie JOIN Rating ON Movie.mID = Rating.mID GROUP BY Movie.mID HAVING COUNT(Rating.rID) > 3", "source_tables": ["rating"], "error_info": "Result not equal"}, {"sample_id": 2520, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars = 4", "pred_sql": "SELECT DISTINCT rID FROM Reviewer WHERE NOT rID IN (SELECT rID FROM Rating WHERE stars = '4')", "source_tables": ["rating"], "error_info": ""}, {"sample_id": 2521, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars = 4", "pred_sql": "SELECT DISTINCT rID FROM Reviewer WHERE NOT rID IN (SELECT rID FROM Rating WHERE stars = '4')", "source_tables": ["rating"], "error_info": ""}, {"sample_id": 2522, "db_id": "movie_1", "score": 0, "gold_sql": "SELECT rID FROM Rating WHERE stars <> 4", "pred_sql": "SELECT DISTINCT rID FROM Rating WHERE NOT rID IN (SELECT rID FROM Rating WHERE stars = '4')", "source_tables": ["rating"], "error_info": "Result not equal"}, {"sample_id": 2523, "db_id": "movie_1", "score": 0, "gold_sql": "SELECT rID FROM Rating WHERE stars <> 4", "pred_sql": "SELECT rID FROM Reviewer WHERE NOT rID IN (SELECT rID FROM Rating WHERE stars = '4')", "source_tables": ["rating"], "error_info": "Result not equal"}, {"sample_id": 2524, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Brittany Harris' OR T2.year > 2000", "pred_sql": "SELECT DISTINCT Movie.title FROM Movie LEFT JOIN Rating ON Movie.mID = Rating.mID LEFT JOIN Reviewer ON Rating.rID = Reviewer.rID WHERE Movie.year > '2000' OR Reviewer.name = 'Brittany Harris'", "source_tables": ["rating", "movie", "reviewer"], "error_info": ""}, {"sample_id": 2525, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Brittany Harris' OR T2.year > 2000", "pred_sql": "SELECT DISTINCT Movie.title FROM Movie LEFT JOIN Rating ON Movie.mID = Rating.mID LEFT JOIN Reviewer ON Rating.rID = Reviewer.rID WHERE Movie.year > '2000' OR Reviewer.name = 'Brittany Harris'", "source_tables": ["rating", "movie", "reviewer"], "error_info": ""}, {"sample_id": 2526, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT title FROM Movie WHERE director = 'James Cameron' OR YEAR < 1980", "pred_sql": "SELECT title FROM Movie WHERE year < '1980' OR director = 'James Cameron'", "source_tables": ["movie"], "error_info": ""}, {"sample_id": 2527, "db_id": "movie_1", "score": 1, "gold_sql": "SELECT title FROM Movie WHERE director = 'James Cameron' OR YEAR < 1980", "pred_sql": "SELECT title FROM Movie WHERE year < '1980' OR director = 'James Cameron'", "source_tables": ["movie"], "error_info": ""}, {"sample_id": 2528, "db_id": "movie_1", "score": 0, "gold_sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars = 3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars = 4", "pred_sql": "SELECT DISTINCT Reviewer.name FROM Reviewer JOIN Rating ON Reviewer.rID = Rating.rID WHERE Rating.stars IN ('3', '4')", "source_tables": ["rating", "reviewer"], "error_info": "Result not equal"}, {"sample_id": 2529, "db_id": "movie_1", "score": 0, "gold_sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars = 3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars = 4", "pred_sql": "SELECT DISTINCT Reviewer.name FROM Reviewer JOIN Rating ON Reviewer.rID = Rating.rID WHERE Rating.stars IN ('3', '4')", "source_tables": ["rating", "reviewer"], "error_info": "Result not equal"}, {"sample_id": 2530, "db_id": "movie_1", "score": 0, "gold_sql": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars = 3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars = 4", "pred_sql": "SELECT DISTINCT Movie.title FROM Movie JOIN Rating ON Movie.mID = Rating.mID WHERE Rating.stars IN ('3', '4')", "source_tables": ["rating", "movie"], "error_info": "Result not equal"}, {"sample_id": 2531, "db_id": "movie_1", "score": 0, "gold_sql": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars = 3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars = 4", "pred_sql": "SELECT DISTINCT Movie.title FROM Movie JOIN Rating ON Movie.mID = Rating.mID WHERE Rating.stars IN ('3', '4')", "source_tables": ["rating", "movie"], "error_info": "Result not equal"}, {"sample_id": 2532, "db_id": "county_public_safety", "score": 1, "gold_sql": "SELECT COUNT(*) FROM county_public_safety", "pred_sql": "SELECT COUNT(*) AS total_counties FROM county_public_safety", "source_tables": ["county_public_safety"], "error_info": ""}, {"sample_id": 2533, "db_id": "county_public_safety", "score": 1, "gold_sql": "SELECT COUNT(*) FROM county_public_safety", "pred_sql": "SELECT COUNT(DISTINCT Name) AS Number_of_Countries FROM county_public_safety", "source_tables": ["county_public_safety"], "error_info": ""}, {"sample_id": 2534, "db_id": "county_public_safety", "score": 1, "gold_sql": "SELECT Name FROM county_public_safety ORDER BY Population DESC", "pred_sql": "SELECT Name FROM county_public_safety ORDER BY Population DESC", "source_tables": ["county_public_safety"], "error_info": ""}, {"sample_id": 2535, "db_id": "county_public_safety", "score": 1, "gold_sql": "SELECT Name FROM county_public_safety ORDER BY Population DESC", "pred_sql": "SELECT Name FROM county_public_safety ORDER BY Population DESC", "source_tables": ["county_public_safety"], "error_info": ""}, {"sample_id": 2536, "db_id": "county_public_safety", "score": 1, "gold_sql": "SELECT DISTINCT Police_force FROM county_public_safety WHERE LOCATION <> 'East'", "pred_sql": "SELECT DISTINCT Police_force FROM county_public_safety WHERE NOT Location LIKE '%east%'", "source_tables": ["county_public_safety"], "error_info": ""}, {"sample_id": 2537, "db_id": "county_public_safety", "score": 1, "gold_sql": "SELECT DISTINCT Police_force FROM county_public_safety WHERE LOCATION <> 'East'", "pred_sql": "SELECT DISTINCT Police_force FROM county_public_safety WHERE NOT Location LIKE '%East%'", "source_tables": ["county_public_safety"], "error_info": ""}, {"sample_id": 2538, "db_id": "county_public_safety", "score": 1, "gold_sql": "SELECT MIN(Crime_rate), MAX(Crime_rate) FROM county_public_safety", "pred_sql": "SELECT MIN(Crime_rate) AS Min_Crime_Rate, MAX(Crime_rate) AS Max_Crime_Rate FROM county_public_safety", "source_tables": ["county_public_safety"], "error_info": ""}, {"sample_id": 2539, "db_id": "county_public_safety", "score": 1, "gold_sql": "SELECT MIN(Crime_rate), MAX(Crime_rate) FROM county_public_safety", "pred_sql": "SELECT MIN(Crime_rate) AS Min_Crime_Rate, MAX(Crime_rate) AS Max_Crime_Rate FROM county_public_safety", "source_tables": ["county_public_safety"], "error_info": ""}, {"sample_id": 2540, "db_id": "county_public_safety", "score": 1, "gold_sql": "SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC", "pred_sql": "SELECT cps.Crime_rate FROM county_public_safety AS cps ORDER BY cps.Police_officers ASC", "source_tables": ["county_public_safety"], "error_info": ""}, {"sample_id": 2541, "db_id": "county_public_safety", "score": 0, "gold_sql": "SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC", "pred_sql": "SELECT Name, Crime_rate FROM county_public_safety ORDER BY Police_officers ASC", "source_tables": ["county_public_safety"], "error_info": "Result not equal"}, {"sample_id": 2542, "db_id": "county_public_safety", "score": 1, "gold_sql": "SELECT Name FROM city ORDER BY Name ASC", "pred_sql": "SELECT Name FROM city ORDER BY Name ASC", "source_tables": ["city"], "error_info": ""}, {"sample_id": 2543, "db_id": "county_public_safety", "score": 1, "gold_sql": "SELECT Name FROM city ORDER BY Name ASC", "pred_sql": "SELECT Name FROM city ORDER BY Name ASC", "source_tables": ["city"], "error_info": ""}, {"sample_id": 2544, "db_id": "county_public_safety", "score": 0, "gold_sql": "SELECT Hispanic FROM city WHERE Black > 10", "pred_sql": "SELECT City.Name, (Hispanic * 100.0 / NULLIF((White + Black + Amerindian + Asian + Multiracial + Hispanic), 0)) AS Hispanic_Percentage FROM city WHERE (Black * 100.0 / NULLIF((White + Black + Amerindian + Asian + Multiracial + Hispanic), 0)) > 10", "source_tables": ["city"], "error_info": "Result not equal"}, {"sample_id": 2545, "db_id": "county_public_safety", "score": 0, "gold_sql": "SELECT Hispanic FROM city WHERE Black > 10", "pred_sql": "SELECT City.Name, (Hispanic * 100.0 / NULLIF((White + Black + Amerindian + Asian + Multiracial + Hispanic), 0)) AS Hispanic_Percentage FROM city WHERE (Black * 100.0 / NULLIF((White + Black + Amerindian + Asian + Multiracial + Hispanic), 0)) > 10", "source_tables": ["city"], "error_info": "Result not equal"}, {"sample_id": 2546, "db_id": "county_public_safety", "score": 1, "gold_sql": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1", "pred_sql": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1", "source_tables": ["county_public_safety"], "error_info": ""}, {"sample_id": 2547, "db_id": "county_public_safety", "score": 1, "gold_sql": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1", "pred_sql": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1", "source_tables": ["county_public_safety"], "error_info": ""}, {"sample_id": 2548, "db_id": "county_public_safety", "score": 1, "gold_sql": "SELECT Name FROM city ORDER BY White DESC LIMIT 5", "pred_sql": "SELECT Name FROM city ORDER BY (White * 1.0 / NULLIF((White + Black + Amerindian + Asian + Multiracial + Hispanic), 0)) DESC LIMIT 5", "source_tables": ["city"], "error_info": ""}, {"sample_id": 2549, "db_id": "county_public_safety", "score": 1, "gold_sql": "SELECT Name FROM city ORDER BY White DESC LIMIT 5", "pred_sql": "SELECT Name FROM city ORDER BY White / NULLIF((White + Black + Amerindian + Asian + Multiracial + Hispanic), 0) DESC LIMIT 5", "source_tables": ["city"], "error_info": ""}, {"sample_id": 2550, "db_id": "county_public_safety", "score": 1, "gold_sql": "SELECT T1.Name, T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID", "pred_sql": "SELECT city.Name AS City_Name, county_public_safety.Name AS County_Name FROM city JOIN county_public_safety ON city.County_ID = county_public_safety.County_ID", "source_tables": ["county_public_safety", "city"], "error_info": ""}, {"sample_id": 2551, "db_id": "county_public_safety", "score": 1, "gold_sql": "SELECT T1.Name, T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID", "pred_sql": "SELECT city.Name AS City_Name, county_public_safety.Name AS County_Name FROM city JOIN county_public_safety ON city.County_ID = county_public_safety.County_ID", "source_tables": ["county_public_safety", "city"], "error_info": ""}, {"sample_id": 2552, "db_id": "county_public_safety", "score": 0, "gold_sql": "SELECT T1.White, T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID", "pred_sql": "SELECT c.Name AS City_Name, (c.White * 100.0 / NULLIF((c.White + c.Black + c.Amerindian + c.Asian + c.Multiracial + c.Hispanic), 0)) AS White_Percentage, cps.Crime_rate FROM city AS c JOIN county_public_safety AS cps ON c.County_ID = cps.County_ID", "source_tables": ["county_public_safety", "city"], "error_info": "Result not equal"}, {"sample_id": 2553, "db_id": "county_public_safety", "score": 0, "gold_sql": "SELECT T1.White, T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID", "pred_sql": "SELECT c.Name AS City_Name, (c.White * 100.0 / NULLIF((c.White + c.Black + c.Amerindian + c.Asian + c.Multiracial + c.Hispanic), 0)) AS White_Percentage, cps.Crime_rate FROM city AS c JOIN county_public_safety AS cps ON c.County_ID = cps.County_ID", "source_tables": ["county_public_safety", "city"], "error_info": "Result not equal"}, {"sample_id": 2554, "db_id": "county_public_safety", "score": 1, "gold_sql": "SELECT name FROM city WHERE county_ID = (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)", "pred_sql": "SELECT c.Name FROM city AS c JOIN county_public_safety AS cps ON c.County_ID = cps.County_ID WHERE cps.Police_officers = (SELECT MAX(Police_officers) FROM county_public_safety)", "source_tables": ["county_public_safety", "city"], "error_info": ""}, {"sample_id": 2555, "db_id": "county_public_safety", "score": 1, "gold_sql": "SELECT name FROM city WHERE county_ID = (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)", "pred_sql": "SELECT city.Name FROM city JOIN county_public_safety ON city.County_ID = county_public_safety.County_ID WHERE county_public_safety.Police_officers = (SELECT MAX(Police_officers) FROM county_public_safety)", "source_tables": ["county_public_safety", "city"], "error_info": ""}, {"sample_id": 2556, "db_id": "county_public_safety", "score": 1, "gold_sql": "SELECT COUNT(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population > 20000)", "pred_sql": "SELECT COUNT(c.City_ID) AS Number_of_Cities FROM city AS c JOIN county_public_safety AS cps ON c.County_ID = cps.County_ID WHERE cps.Population > '20000'", "source_tables": ["county_public_safety", "city"], "error_info": ""}, {"sample_id": 2557, "db_id": "county_public_safety", "score": 1, "gold_sql": "SELECT COUNT(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population > 20000)", "pred_sql": "SELECT COUNT(*) AS city_count FROM city WHERE County_ID IN (SELECT County_ID FROM county_public_safety WHERE Population > '20000')", "source_tables": ["county_public_safety", "city"], "error_info": ""}, {"sample_id": 2558, "db_id": "county_public_safety", "score": 0, "gold_sql": "SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID WHERE T1.White > 90", "pred_sql": "SELECT cps.Crime_rate FROM county_public_safety AS cps JOIN city AS c ON cps.County_ID = c.County_ID WHERE (c.White / NULLIF((c.White + c.Black + c.Amerindian + c.Asian + c.Multiracial + c.Hispanic), 0)) > 0.90", "source_tables": ["county_public_safety", "city"], "error_info": "Result not equal"}, {"sample_id": 2559, "db_id": "county_public_safety", "score": 0, "gold_sql": "SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID WHERE T1.White > 90", "pred_sql": "SELECT cps.Crime_rate FROM county_public_safety AS cps JOIN city AS c ON cps.County_ID = c.County_ID WHERE (c.White / NULLIF((c.White + c.Black + c.Amerindian + c.Asian + c.Multiracial + c.Hispanic), 0)) > 0.90 GROUP BY cps.County_ID", "source_tables": ["county_public_safety", "city"], "error_info": "Result not equal"}, {"sample_id": 2560, "db_id": "county_public_safety", "score": 1, "gold_sql": "SELECT Police_force, COUNT(*) FROM county_public_safety GROUP BY Police_force", "pred_sql": "SELECT Police_force, COUNT(*) AS Number_of_Counties FROM county_public_safety GROUP BY Police_force", "source_tables": ["county_public_safety"], "error_info": ""}, {"sample_id": 2561, "db_id": "county_public_safety", "score": 1, "gold_sql": "SELECT Police_force, COUNT(*) FROM county_public_safety GROUP BY Police_force", "pred_sql": "SELECT Police_force, COUNT(*) AS County_Count FROM county_public_safety GROUP BY Police_force", "source_tables": ["county_public_safety"], "error_info": ""}, {"sample_id": 2562, "db_id": "county_public_safety", "score": 0, "gold_sql": "SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Location, COUNT(*) AS CountyCount FROM county_public_safety GROUP BY Location ORDER BY CountyCount DESC LIMIT 1", "source_tables": ["county_public_safety"], "error_info": "Result not equal"}, {"sample_id": 2563, "db_id": "county_public_safety", "score": 0, "gold_sql": "SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Location, COUNT(*) AS County_Count FROM county_public_safety GROUP BY Location ORDER BY County_Count DESC LIMIT 1", "source_tables": ["county_public_safety"], "error_info": "Result not equal"}, {"sample_id": 2564, "db_id": "county_public_safety", "score": 1, "gold_sql": "SELECT Name FROM county_public_safety WHERE NOT County_ID IN (SELECT County_ID FROM city)", "pred_sql": "SELECT cps.Name FROM county_public_safety AS cps LEFT JOIN city AS c ON cps.County_ID = c.County_ID WHERE c.City_ID IS NULL", "source_tables": ["county_public_safety", "city"], "error_info": ""}, {"sample_id": 2565, "db_id": "county_public_safety", "score": 1, "gold_sql": "SELECT Name FROM county_public_safety WHERE NOT County_ID IN (SELECT County_ID FROM city)", "pred_sql": "SELECT cps.Name FROM county_public_safety AS cps LEFT JOIN city AS c ON cps.County_ID = c.County_ID WHERE c.City_ID IS NULL", "source_tables": ["county_public_safety", "city"], "error_info": ""}, {"sample_id": 2566, "db_id": "county_public_safety", "score": 0, "gold_sql": "SELECT Police_force FROM county_public_safety WHERE LOCATION = 'East' INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION = 'West'", "pred_sql": "SELECT Name, Police_force, Location FROM county_public_safety WHERE Location IN ('east', 'west')", "source_tables": ["county_public_safety"], "error_info": "Result not equal"}, {"sample_id": 2567, "db_id": "county_public_safety", "score": 0, "gold_sql": "SELECT Police_force FROM county_public_safety WHERE LOCATION = 'East' INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION = 'West'", "pred_sql": "SELECT DISTINCT cps.Police_force FROM county_public_safety AS cps WHERE cps.Location IN ('East', 'West') AND cps.County_ID IN (SELECT DISTINCT c.County_ID FROM city AS c WHERE c.County_ID = cps.County_ID)", "source_tables": ["county_public_safety"], "error_info": "Result not equal"}, {"sample_id": 2568, "db_id": "county_public_safety", "score": 1, "gold_sql": "SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate < 100)", "pred_sql": "SELECT city.Name FROM city JOIN county_public_safety ON city.County_ID = county_public_safety.County_ID WHERE county_public_safety.Crime_rate < 100", "source_tables": ["county_public_safety", "city"], "error_info": ""}, {"sample_id": 2569, "db_id": "county_public_safety", "score": 1, "gold_sql": "SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate < 100)", "pred_sql": "SELECT city.Name FROM city JOIN county_public_safety ON city.County_ID = county_public_safety.County_ID WHERE county_public_safety.Crime_rate < 100", "source_tables": ["county_public_safety", "city"], "error_info": ""}, {"sample_id": 2570, "db_id": "county_public_safety", "score": 0, "gold_sql": "SELECT Case_burden FROM county_public_safety ORDER BY Population DESC", "pred_sql": "SELECT cps.County_ID, cps.Name, cps.Case_burden FROM county_public_safety AS cps ORDER BY cps.Population DESC", "source_tables": ["county_public_safety"], "error_info": "Result not equal"}, {"sample_id": 2571, "db_id": "county_public_safety", "score": 1, "gold_sql": "SELECT Case_burden FROM county_public_safety ORDER BY Population DESC", "pred_sql": "SELECT cps.Case_burden FROM county_public_safety AS cps ORDER BY cps.Population DESC", "source_tables": ["county_public_safety"], "error_info": ""}, {"sample_id": 2572, "db_id": "inn_1", "score": 1, "gold_sql": "SELECT roomName FROM Rooms WHERE basePrice < 160 AND beds = 2 AND decor = 'modern'", "pred_sql": "SELECT roomName FROM Rooms WHERE basePrice < '160' AND beds = '2' AND decor LIKE '%modern%'", "source_tables": ["rooms"], "error_info": ""}, {"sample_id": 2573, "db_id": "inn_1", "score": 1, "gold_sql": "SELECT roomName FROM Rooms WHERE basePrice < 160 AND beds = 2 AND decor = 'modern'", "pred_sql": "SELECT roomName FROM Rooms WHERE basePrice < '160' AND beds = '2' AND decor LIKE '%modern%'", "source_tables": ["rooms"], "error_info": ""}, {"sample_id": 2574, "db_id": "inn_1", "score": 1, "gold_sql": "SELECT roomName, RoomId FROM Rooms WHERE basePrice > 160 AND maxOccupancy > 2", "pred_sql": "SELECT RoomId, roomName FROM Rooms WHERE basePrice > 160 AND maxOccupancy > 2", "source_tables": ["rooms"], "error_info": ""}, {"sample_id": 2575, "db_id": "inn_1", "score": 1, "gold_sql": "SELECT roomName, RoomId FROM Rooms WHERE basePrice > 160 AND maxOccupancy > 2", "pred_sql": "SELECT roomName, RoomId FROM Rooms WHERE basePrice > '160' AND maxOccupancy > '2'", "source_tables": ["rooms"], "error_info": ""}, {"sample_id": 2576, "db_id": "inn_1", "score": 0, "gold_sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Rooms.roomName, COUNT(Reservations.Code) AS reservation_count FROM Rooms JOIN Reservations ON Rooms.RoomId = Reservations.Room GROUP BY Rooms.RoomId ORDER BY reservation_count DESC LIMIT 1", "source_tables": ["rooms", "reservations"], "error_info": "Result not equal"}, {"sample_id": 2577, "db_id": "inn_1", "score": 0, "gold_sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Rooms.roomName, COUNT(Reservations.Code) AS reservation_count FROM Rooms LEFT JOIN Reservations ON Rooms.RoomId = Reservations.Room GROUP BY Rooms.RoomId ORDER BY reservation_count DESC LIMIT 1", "source_tables": ["rooms", "reservations"], "error_info": "Result not equal"}, {"sample_id": 2578, "db_id": "inn_1", "score": 0, "gold_sql": "SELECT kids FROM Reservations WHERE FirstName = 'ROY' AND LastName = 'SWEAZY'", "pred_sql": "SELECT SUM(Kids) AS TotalKids FROM Reservations WHERE FirstName = 'ROY' AND LastName = 'SWEAZY'", "source_tables": ["reservations"], "error_info": "Result not equal"}, {"sample_id": 2579, "db_id": "inn_1", "score": 0, "gold_sql": "SELECT kids FROM Reservations WHERE FirstName = 'ROY' AND LastName = 'SWEAZY'", "pred_sql": "SELECT SUM(Kids) AS TotalKids FROM Reservations WHERE FirstName = 'ROY' AND LastName = 'SWEAZ'", "source_tables": ["reservations"], "error_info": "Result not equal"}, {"sample_id": 2580, "db_id": "inn_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Reservations WHERE FirstName = 'ROY' AND LastName = 'SWEAZY'", "pred_sql": "SELECT COUNT(*) AS reservation_count FROM Reservations WHERE FirstName = 'ROY' AND LastName = 'SWEAZY'", "source_tables": ["reservations"], "error_info": ""}, {"sample_id": 2581, "db_id": "inn_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Reservations WHERE FirstName = 'ROY' AND LastName = 'SWEAZY'", "pred_sql": "SELECT COUNT(*) AS reservation_count FROM Reservations WHERE FirstName = 'ROY' AND LastName = 'SWEAZY'", "source_tables": ["reservations"], "error_info": ""}, {"sample_id": 2582, "db_id": "inn_1", "score": 0, "gold_sql": "SELECT T2.roomName, T1.Rate, T1.CheckIn, T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1", "pred_sql": "SELECT Rooms.roomName, Reservations.Rate, Reservations.CheckIn, Reservations.CheckOut FROM Rooms JOIN Reservations ON Rooms.RoomId = Reservations.Room ORDER BY Reservations.Rate DESC LIMIT 1", "source_tables": ["rooms", "reservations"], "error_info": "Result not equal"}, {"sample_id": 2583, "db_id": "inn_1", "score": 0, "gold_sql": "SELECT T2.roomName, T1.Rate, T1.CheckIn, T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1", "pred_sql": "SELECT r.roomName, res.Rate, res.CheckIn, res.CheckOut FROM Rooms AS r JOIN Reservations AS res ON r.RoomId = res.Room ORDER BY res.Rate DESC LIMIT 1", "source_tables": ["rooms", "reservations"], "error_info": "Result not equal"}, {"sample_id": 2584, "db_id": "inn_1", "score": 1, "gold_sql": "SELECT Adults FROM Reservations WHERE CheckIn = '2010-10-23' AND FirstName = 'CONRAD' AND LastName = 'SELBIG'", "pred_sql": "SELECT Adults FROM Reservations WHERE LastName = 'SELBIG' AND FirstName = 'CONRAD' AND CheckIn = '2010-10-23'", "source_tables": ["reservations"], "error_info": ""}, {"sample_id": 2585, "db_id": "inn_1", "score": 1, "gold_sql": "SELECT Adults FROM Reservations WHERE CheckIn = '2010-10-23' AND FirstName = 'CONRAD' AND LastName = 'SELBIG'", "pred_sql": "SELECT Adults FROM Reservations WHERE FirstName = 'CONRAD' AND LastName = 'SELBIG' AND CheckIn = '2010-10-23'", "source_tables": ["reservations"], "error_info": ""}, {"sample_id": 2586, "db_id": "inn_1", "score": 1, "gold_sql": "SELECT Kids FROM Reservations WHERE CheckIn = '2010-09-21' AND FirstName = 'DAMIEN' AND LastName = 'TRACHSEL'", "pred_sql": "SELECT Kids FROM Reservations WHERE LastName = 'TRACHSEL' AND FirstName = 'DAMIEN' AND CheckIn = '2010-09-21'", "source_tables": ["reservations"], "error_info": ""}, {"sample_id": 2587, "db_id": "inn_1", "score": 1, "gold_sql": "SELECT Kids FROM Reservations WHERE CheckIn = '2010-09-21' AND FirstName = 'DAMIEN' AND LastName = 'TRACHSEL'", "pred_sql": "SELECT Kids FROM Reservations WHERE FirstName = 'DAMIEN' AND LastName = 'TRACHSEL' AND CheckIn = '2010-09-21'", "source_tables": ["reservations"], "error_info": ""}, {"sample_id": 2588, "db_id": "inn_1", "score": 0, "gold_sql": "SELECT SUM(beds) FROM Rooms WHERE bedtype = 'King'", "pred_sql": "SELECT COUNT(*) AS KingBedCount FROM Rooms WHERE bedType = 'king'", "source_tables": ["rooms"], "error_info": "Result not equal"}, {"sample_id": 2589, "db_id": "inn_1", "score": 0, "gold_sql": "SELECT SUM(beds) FROM Rooms WHERE bedtype = 'King'", "pred_sql": "SELECT SUM(CASE WHEN bedType = 'king' THEN beds ELSE 0 END) AS total_king_beds FROM Rooms", "source_tables": ["rooms"], "error_info": "Result not equal"}, {"sample_id": 2590, "db_id": "inn_1", "score": 0, "gold_sql": "SELECT roomName, decor FROM Rooms WHERE bedtype = 'King' ORDER BY basePrice", "pred_sql": "SELECT roomName, decor FROM Rooms WHERE bedType = 'king' ORDER BY basePrice", "source_tables": ["rooms"], "error_info": "Result not equal"}, {"sample_id": 2591, "db_id": "inn_1", "score": 0, "gold_sql": "SELECT roomName, decor FROM Rooms WHERE bedtype = 'King' ORDER BY basePrice", "pred_sql": "SELECT roomName, decor FROM Rooms WHERE bedType = 'king' ORDER BY basePrice", "source_tables": ["rooms"], "error_info": "Result not equal"}, {"sample_id": 2592, "db_id": "inn_1", "score": 1, "gold_sql": "SELECT roomName, basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1", "pred_sql": "SELECT roomName, basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1", "source_tables": ["rooms"], "error_info": ""}, {"sample_id": 2593, "db_id": "inn_1", "score": 1, "gold_sql": "SELECT roomName, basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1", "pred_sql": "SELECT roomName, basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1", "source_tables": ["rooms"], "error_info": ""}, {"sample_id": 2594, "db_id": "inn_1", "score": 0, "gold_sql": "SELECT decor FROM Rooms WHERE roomName = 'Recluse and defiance'", "pred_sql": "SELECT decor FROM Rooms WHERE roomName IN ('Recluse', 'defiance')", "source_tables": ["rooms"], "error_info": "Result not equal"}, {"sample_id": 2595, "db_id": "inn_1", "score": 1, "gold_sql": "SELECT decor FROM Rooms WHERE roomName = 'Recluse and defiance'", "pred_sql": "SELECT decor FROM Rooms WHERE roomName = 'Recluse and defiance'", "source_tables": ["rooms"], "error_info": ""}, {"sample_id": 2596, "db_id": "inn_1", "score": 1, "gold_sql": "SELECT bedType, AVG(basePrice) FROM Rooms GROUP BY bedType", "pred_sql": "SELECT bedType, AVG(basePrice) AS average_base_price FROM Rooms GROUP BY bedType", "source_tables": ["rooms"], "error_info": ""}, {"sample_id": 2597, "db_id": "inn_1", "score": 1, "gold_sql": "SELECT bedType, AVG(basePrice) FROM Rooms GROUP BY bedType", "pred_sql": "SELECT bedType, AVG(basePrice) AS averageBasePrice FROM Rooms GROUP BY bedType", "source_tables": ["rooms"], "error_info": ""}, {"sample_id": 2598, "db_id": "inn_1", "score": 1, "gold_sql": "SELECT SUM(maxOccupancy) FROM Rooms WHERE decor = 'modern'", "pred_sql": "SELECT SUM(maxOccupancy) AS TotalOccupancy FROM Rooms WHERE decor LIKE '%modern%'", "source_tables": ["rooms"], "error_info": ""}, {"sample_id": 2599, "db_id": "inn_1", "score": 1, "gold_sql": "SELECT SUM(maxOccupancy) FROM Rooms WHERE decor = 'modern'", "pred_sql": "SELECT SUM(maxOccupancy) AS TotalOccupancy FROM Rooms WHERE decor LIKE '%modern%'", "source_tables": ["rooms"], "error_info": ""}, {"sample_id": 2600, "db_id": "inn_1", "score": 0, "gold_sql": "SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T2.decor ORDER BY COUNT(T2.decor) ASC LIMIT 1", "pred_sql": "SELECT decor, COUNT(Reservations.Code) AS reservation_count FROM Rooms LEFT JOIN Reservations ON Rooms.RoomId = Reservations.Room GROUP BY decor ORDER BY reservation_count ASC LIMIT 1", "source_tables": ["rooms", "reservations"], "error_info": "Result not equal"}, {"sample_id": 2601, "db_id": "inn_1", "score": 0, "gold_sql": "SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T2.decor ORDER BY COUNT(T2.decor) ASC LIMIT 1", "pred_sql": "SELECT decor, COUNT(*) AS reservation_count FROM Rooms JOIN Reservations ON Rooms.RoomId = Reservations.Room GROUP BY decor ORDER BY reservation_count ASC LIMIT 1", "source_tables": ["rooms", "reservations"], "error_info": "Result not equal"}, {"sample_id": 2602, "db_id": "inn_1", "score": 0, "gold_sql": "SELECT COUNT(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE T2.maxOccupancy = T1.Adults + T1.Kids", "pred_sql": "SELECT Rooms.roomName, COUNT(*) AS times_max_occupancy_reached FROM Reservations JOIN Rooms ON Reservations.Room = Rooms.RoomId WHERE (CAST(Reservations.Adults AS INT) + CAST(Reservations.Kids AS INT)) >= CAST(Rooms.maxOccupancy AS INT) GROUP BY Rooms.roomName", "source_tables": ["rooms", "reservations"], "error_info": "Result not equal"}, {"sample_id": 2603, "db_id": "inn_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE T2.maxOccupancy = T1.Adults + T1.Kids", "pred_sql": "SELECT COUNT(*) AS CapacityReachedCount FROM Reservations AS r JOIN Rooms AS rm ON r.Room = rm.RoomId WHERE (CAST(r.Adults AS INT) + CAST(r.Kids AS INT)) >= CAST(rm.maxOccupancy AS INT)", "source_tables": ["rooms", "reservations"], "error_info": ""}, {"sample_id": 2604, "db_id": "inn_1", "score": 0, "gold_sql": "SELECT T1.firstname, T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE T1.Rate - T2.basePrice > 0", "pred_sql": "SELECT DISTINCT r.FirstName, r.LastName FROM Reservations AS r JOIN Rooms AS rm ON r.Room = rm.RoomId WHERE r.Rate > rm.basePrice", "source_tables": ["rooms", "reservations"], "error_info": "Result not equal"}, {"sample_id": 2605, "db_id": "inn_1", "score": 0, "gold_sql": "SELECT T1.firstname, T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE T1.Rate - T2.basePrice > 0", "pred_sql": "SELECT DISTINCT r.FirstName, r.LastName FROM Reservations AS r JOIN Rooms AS rm ON r.Room = rm.RoomId WHERE r.Rate > rm.basePrice", "source_tables": ["rooms", "reservations"], "error_info": "Result not equal"}, {"sample_id": 2606, "db_id": "inn_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Rooms", "pred_sql": "SELECT COUNT(*) AS TotalRooms FROM Rooms", "source_tables": ["rooms"], "error_info": ""}, {"sample_id": 2607, "db_id": "inn_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Rooms", "pred_sql": "SELECT COUNT(*) AS TotalRooms FROM Rooms", "source_tables": ["rooms"], "error_info": ""}, {"sample_id": 2608, "db_id": "inn_1", "score": 0, "gold_sql": "SELECT COUNT(*) FROM Rooms WHERE bedType = 'King'", "pred_sql": "SELECT COUNT(*) AS NumberOfRooms FROM Rooms WHERE bedType = 'king'", "source_tables": ["rooms"], "error_info": "Result not equal"}, {"sample_id": 2609, "db_id": "inn_1", "score": 0, "gold_sql": "SELECT COUNT(*) FROM Rooms WHERE bedType = 'King'", "pred_sql": "SELECT COUNT(*) AS NumberOfRooms FROM Rooms WHERE bedType = 'king'", "source_tables": ["rooms"], "error_info": "Result not equal"}, {"sample_id": 2610, "db_id": "inn_1", "score": 1, "gold_sql": "SELECT bedType, COUNT(*) FROM Rooms GROUP BY bedType", "pred_sql": "SELECT bedType, COUNT(*) AS numberOfRooms FROM Rooms GROUP BY bedType", "source_tables": ["rooms"], "error_info": ""}, {"sample_id": 2611, "db_id": "inn_1", "score": 1, "gold_sql": "SELECT bedType, COUNT(*) FROM Rooms GROUP BY bedType", "pred_sql": "SELECT bedType, COUNT(*) AS numberOfRooms FROM Rooms GROUP BY bedType", "source_tables": ["rooms"], "error_info": ""}, {"sample_id": 2612, "db_id": "inn_1", "score": 0, "gold_sql": "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1", "pred_sql": "SELECT roomName FROM Rooms WHERE maxOccupancy = (SELECT MAX(maxOccupancy) FROM Rooms)", "source_tables": ["rooms"], "error_info": "Result not equal"}, {"sample_id": 2613, "db_id": "inn_1", "score": 1, "gold_sql": "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1", "pred_sql": "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1", "source_tables": ["rooms"], "error_info": ""}, {"sample_id": 2614, "db_id": "inn_1", "score": 1, "gold_sql": "SELECT RoomId, roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1", "pred_sql": "SELECT RoomId, roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1", "source_tables": ["rooms"], "error_info": ""}, {"sample_id": 2615, "db_id": "inn_1", "score": 0, "gold_sql": "SELECT RoomId, roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1", "pred_sql": "SELECT roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1", "source_tables": ["rooms"], "error_info": "Result not equal"}, {"sample_id": 2616, "db_id": "inn_1", "score": 1, "gold_sql": "SELECT roomName, bedType FROM Rooms WHERE decor = 'traditional'", "pred_sql": "SELECT bedType, roomName FROM Rooms WHERE decor LIKE '%traditional%'", "source_tables": ["rooms"], "error_info": ""}, {"sample_id": 2617, "db_id": "inn_1", "score": 1, "gold_sql": "SELECT roomName, bedType FROM Rooms WHERE decor = 'traditional'", "pred_sql": "SELECT bedType, roomName FROM Rooms WHERE decor = 'traditional'", "source_tables": ["rooms"], "error_info": ""}, {"sample_id": 2618, "db_id": "inn_1", "score": 0, "gold_sql": "SELECT decor, COUNT(*) FROM Rooms WHERE bedType = 'King' GROUP BY decor", "pred_sql": "SELECT decor, COUNT(*) AS number_of_rooms FROM Rooms WHERE bedType = 'king' GROUP BY decor", "source_tables": ["rooms"], "error_info": "Result not equal"}, {"sample_id": 2619, "db_id": "inn_1", "score": 0, "gold_sql": "SELECT decor, COUNT(*) FROM Rooms WHERE bedType = 'King' GROUP BY decor", "pred_sql": "SELECT decor, COUNT(*) AS room_count FROM Rooms WHERE bedType = 'king' GROUP BY decor", "source_tables": ["rooms"], "error_info": "Result not equal"}, {"sample_id": 2620, "db_id": "inn_1", "score": 1, "gold_sql": "SELECT decor, AVG(basePrice), MIN(basePrice) FROM Rooms GROUP BY decor", "pred_sql": "SELECT decor, AVG(basePrice) AS average_price, MIN(basePrice) AS minimum_price FROM Rooms GROUP BY decor", "source_tables": ["rooms"], "error_info": ""}, {"sample_id": 2621, "db_id": "inn_1", "score": 0, "gold_sql": "SELECT decor, AVG(basePrice), MIN(basePrice) FROM Rooms GROUP BY decor", "pred_sql": "SELECT decor, AVG(CAST(basePrice AS FLOAT)) AS average_price FROM Rooms GROUP BY decor", "source_tables": ["rooms"], "error_info": "Result not equal"}, {"sample_id": 2622, "db_id": "inn_1", "score": 1, "gold_sql": "SELECT roomName FROM Rooms ORDER BY basePrice", "pred_sql": "SELECT roomName FROM Rooms ORDER BY basePrice", "source_tables": ["rooms"], "error_info": ""}, {"sample_id": 2623, "db_id": "inn_1", "score": 1, "gold_sql": "SELECT roomName FROM Rooms ORDER BY basePrice", "pred_sql": "SELECT roomName FROM Rooms ORDER BY basePrice ASC", "source_tables": ["rooms"], "error_info": ""}, {"sample_id": 2624, "db_id": "inn_1", "score": 1, "gold_sql": "SELECT decor, COUNT(*) FROM Rooms WHERE basePrice > 120 GROUP BY decor", "pred_sql": "SELECT decor, COUNT(*) AS number_of_rooms FROM Rooms WHERE basePrice > '120' GROUP BY decor", "source_tables": ["rooms"], "error_info": ""}, {"sample_id": 2625, "db_id": "inn_1", "score": 1, "gold_sql": "SELECT decor, COUNT(*) FROM Rooms WHERE basePrice > 120 GROUP BY decor", "pred_sql": "SELECT decor, COUNT(*) AS room_count FROM Rooms WHERE basePrice > '120' GROUP BY decor", "source_tables": ["rooms"], "error_info": ""}, {"sample_id": 2626, "db_id": "inn_1", "score": 1, "gold_sql": "SELECT bedType, AVG(basePrice) FROM Rooms GROUP BY bedType", "pred_sql": "SELECT bedType, AVG(basePrice) AS averagePrice FROM Rooms GROUP BY bedType", "source_tables": ["rooms"], "error_info": ""}, {"sample_id": 2627, "db_id": "inn_1", "score": 1, "gold_sql": "SELECT bedType, AVG(basePrice) FROM Rooms GROUP BY bedType", "pred_sql": "SELECT bedType, AVG(basePrice) AS average_base_price FROM Rooms GROUP BY bedType", "source_tables": ["rooms"], "error_info": ""}, {"sample_id": 2628, "db_id": "inn_1", "score": 0, "gold_sql": "SELECT roomName FROM Rooms WHERE bedType = 'King' OR bedType = 'Queen'", "pred_sql": "SELECT roomName FROM Rooms WHERE bedType IN ('king', 'queen')", "source_tables": ["rooms"], "error_info": "Result not equal"}, {"sample_id": 2629, "db_id": "inn_1", "score": 0, "gold_sql": "SELECT roomName FROM Rooms WHERE bedType = 'King' OR bedType = 'Queen'", "pred_sql": "SELECT roomName FROM Rooms WHERE bedType IN ('king', 'queen')", "source_tables": ["rooms"], "error_info": "Result not equal"}, {"sample_id": 2630, "db_id": "inn_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT bedType) FROM Rooms", "pred_sql": "SELECT COUNT(DISTINCT bedType) AS DifferentBedTypes FROM Rooms", "source_tables": ["rooms"], "error_info": ""}, {"sample_id": 2631, "db_id": "inn_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT bedType) FROM Rooms", "pred_sql": "SELECT COUNT(DISTINCT bedType) AS distinct_bed_types FROM Rooms", "source_tables": ["rooms"], "error_info": ""}, {"sample_id": 2632, "db_id": "inn_1", "score": 1, "gold_sql": "SELECT RoomId, roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3", "pred_sql": "SELECT roomName, RoomId FROM Rooms ORDER BY basePrice DESC LIMIT 3", "source_tables": ["rooms"], "error_info": ""}, {"sample_id": 2633, "db_id": "inn_1", "score": 1, "gold_sql": "SELECT RoomId, roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3", "pred_sql": "SELECT roomName, RoomId FROM Rooms ORDER BY basePrice DESC LIMIT 3", "source_tables": ["rooms"], "error_info": ""}, {"sample_id": 2634, "db_id": "inn_1", "score": 1, "gold_sql": "SELECT roomName FROM Rooms WHERE basePrice > (SELECT AVG(basePrice) FROM Rooms)", "pred_sql": "SELECT roomName FROM Rooms WHERE basePrice > (SELECT AVG(basePrice) FROM Rooms)", "source_tables": ["rooms"], "error_info": ""}, {"sample_id": 2635, "db_id": "inn_1", "score": 1, "gold_sql": "SELECT roomName FROM Rooms WHERE basePrice > (SELECT AVG(basePrice) FROM Rooms)", "pred_sql": "SELECT roomName FROM Rooms WHERE basePrice > (SELECT AVG(basePrice) FROM Rooms)", "source_tables": ["rooms"], "error_info": ""}, {"sample_id": 2636, "db_id": "inn_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM rooms WHERE NOT roomid IN (SELECT DISTINCT room FROM reservations)", "pred_sql": "SELECT COUNT(*) AS NumberOfAvailableRooms FROM Rooms WHERE NOT RoomId IN (SELECT Room FROM Reservations)", "source_tables": ["rooms", "reservations"], "error_info": ""}, {"sample_id": 2637, "db_id": "inn_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM rooms WHERE NOT roomid IN (SELECT DISTINCT room FROM reservations)", "pred_sql": "SELECT COUNT(*) AS UnreservedRooms FROM Rooms WHERE NOT RoomId IN (SELECT Room FROM Reservations)", "source_tables": ["rooms", "reservations"], "error_info": ""}, {"sample_id": 2638, "db_id": "inn_1", "score": 0, "gold_sql": "SELECT T2.roomName, COUNT(*), T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room", "pred_sql": "SELECT Rooms.roomName, COUNT(Reservations.Code) AS numberOfReservations FROM Rooms LEFT JOIN Reservations ON Rooms.RoomId = Reservations.Room GROUP BY Rooms.roomName", "source_tables": ["rooms", "reservations"], "error_info": "Result not equal"}, {"sample_id": 2639, "db_id": "inn_1", "score": 0, "gold_sql": "SELECT T2.roomName, COUNT(*), T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room", "pred_sql": "SELECT Rooms.roomName, COUNT(Reservations.Code) AS reservation_count FROM Rooms LEFT JOIN Reservations ON Rooms.RoomId = Reservations.Room GROUP BY Rooms.RoomId, Rooms.roomName", "source_tables": ["rooms", "reservations"], "error_info": "Result not equal"}, {"sample_id": 2640, "db_id": "inn_1", "score": 1, "gold_sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room HAVING COUNT(*) > 60", "pred_sql": "SELECT r.roomName FROM Rooms AS r JOIN Reservations AS res ON r.RoomId = res.Room GROUP BY r.RoomId HAVING COUNT(res.Code) > 60", "source_tables": ["rooms", "reservations"], "error_info": ""}, {"sample_id": 2641, "db_id": "inn_1", "score": 1, "gold_sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room HAVING COUNT(*) > 60", "pred_sql": "SELECT r.roomName FROM Rooms AS r JOIN Reservations AS res ON r.RoomId = res.Room GROUP BY r.RoomId HAVING COUNT(res.Code) > 60", "source_tables": ["rooms", "reservations"], "error_info": ""}, {"sample_id": 2642, "db_id": "inn_1", "score": 1, "gold_sql": "SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150", "pred_sql": "SELECT roomName FROM Rooms WHERE basePrice BETWEEN '120' AND '150'", "source_tables": ["rooms"], "error_info": ""}, {"sample_id": 2643, "db_id": "inn_1", "score": 1, "gold_sql": "SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150", "pred_sql": "SELECT roomName FROM Rooms WHERE basePrice BETWEEN '120' AND '150'", "source_tables": ["rooms"], "error_info": ""}, {"sample_id": 2644, "db_id": "inn_1", "score": 1, "gold_sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE firstname LIKE '%ROY%'", "pred_sql": "SELECT Rooms.roomName FROM Rooms JOIN Reservations ON Rooms.RoomId = Reservations.Room WHERE Reservations.FirstName LIKE '%ROY%'", "source_tables": ["rooms", "reservations"], "error_info": ""}, {"sample_id": 2645, "db_id": "inn_1", "score": 1, "gold_sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE firstname LIKE '%ROY%'", "pred_sql": "SELECT Rooms.roomName FROM Rooms JOIN Reservations ON Rooms.RoomId = Reservations.Room WHERE Reservations.FirstName LIKE '%ROY%'", "source_tables": ["rooms", "reservations"], "error_info": ""}, {"sample_id": 2646, "db_id": "local_govt_mdm", "score": 0, "gold_sql": "SELECT T1.cmi_details FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id = T2.master_customer_id WHERE T2.source_system_code = 'Tax'", "pred_sql": "SELECT Customer_Master_Index.* FROM Customer_Master_Index JOIN CMI_Cross_References ON Customer_Master_Index.master_customer_id = CMI_Cross_References.master_customer_id WHERE CMI_Cross_References.source_system_code = 'Tax'", "source_tables": ["cmi_cross_references", "customer_master_index"], "error_info": "Result not equal"}, {"sample_id": 2647, "db_id": "local_govt_mdm", "score": 1, "gold_sql": "SELECT T1.cmi_cross_ref_id, T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING COUNT(*) >= 1", "pred_sql": "SELECT CMI_Cross_References.cmi_cross_ref_id, CMI_Cross_References.source_system_code FROM CMI_Cross_References JOIN Council_Tax ON CMI_Cross_References.cmi_cross_ref_id = Council_Tax.cmi_cross_ref_id GROUP BY CMI_Cross_References.cmi_cross_ref_id, CMI_Cross_References.source_system_code", "source_tables": ["cmi_cross_references", "council_tax"], "error_info": ""}, {"sample_id": 2648, "db_id": "local_govt_mdm", "score": 0, "gold_sql": "SELECT T2.cmi_cross_ref_id, T2.master_customer_id, COUNT(*) FROM Business_Rates AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id GROUP BY T2.cmi_cross_ref_id", "pred_sql": "SELECT CMI_Cross_References.cmi_cross_ref_id, CMI_Cross_References.master_customer_id, COUNT(Business_Rates.business_rates_id) AS n FROM CMI_Cross_References LEFT JOIN Business_Rates ON CMI_Cross_References.cmi_cross_ref_id = Business_Rates.cmi_cross_ref_id GROUP BY CMI_Cross_References.cmi_cross_ref_id, CMI_Cross_References.master_customer_id", "source_tables": ["cmi_cross_references", "business_rates"], "error_info": "Result not equal"}, {"sample_id": 2649, "db_id": "local_govt_mdm", "score": 1, "gold_sql": "SELECT T1.source_system_code, T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Benefits_Overpayments AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id ORDER BY T2.council_tax_id", "pred_sql": "SELECT CMI_Cross_References.source_system_code, Benefits_Overpayments.council_tax_id FROM Benefits_Overpayments JOIN CMI_Cross_References ON Benefits_Overpayments.cmi_cross_ref_id = CMI_Cross_References.cmi_cross_ref_id ORDER BY Benefits_Overpayments.council_tax_id", "source_tables": ["cmi_cross_references", "benefits_overpayments"], "error_info": ""}, {"sample_id": 2650, "db_id": "local_govt_mdm", "score": 0, "gold_sql": "SELECT T1.source_system_code, T1.master_customer_id, T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Parking_Fines AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id", "pred_sql": "SELECT CMI_Cross_References.source_system_code, CMI_Cross_References.master_customer_id FROM Parking_Fines JOIN CMI_Cross_References ON Parking_Fines.cmi_cross_ref_id = CMI_Cross_References.cmi_cross_ref_id JOIN Council_Tax ON Parking_Fines.council_tax_id = Council_Tax.council_tax_id", "source_tables": ["cmi_cross_references", "parking_fines"], "error_info": "Result not equal"}, {"sample_id": 2651, "db_id": "local_govt_mdm", "score": 0, "gold_sql": "SELECT T1.council_tax_id FROM Rent_Arrears AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id JOIN Customer_Master_Index AS T3 ON T3.master_customer_id = T2.master_customer_id WHERE T3.cmi_details <> 'Schmidt ,  Kertzmann and Lubowitz'", "pred_sql": "SELECT Rent_Arrears.council_tax_id FROM Rent_Arrears JOIN CMI_Cross_References ON Rent_Arrears.cmi_cross_ref_id = CMI_Cross_References.cmi_cross_ref_id JOIN Customer_Master_Index ON CMI_Cross_References.master_customer_id = Customer_Master_Index.master_customer_id WHERE Customer_Master_Index.cmi_details <> 'Schmidt, Kertzmann and Lubowitz'", "source_tables": ["rent_arrears", "cmi_cross_references", "customer_master_index"], "error_info": "Result not equal"}, {"sample_id": 2652, "db_id": "local_govt_mdm", "score": 1, "gold_sql": "SELECT T1.electoral_register_id FROM Electoral_Register AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id WHERE T2.source_system_code = 'Electoral' OR T2.source_system_code = 'Tax'", "pred_sql": "SELECT Electoral_Register.electoral_register_id FROM Electoral_Register JOIN CMI_Cross_References ON Electoral_Register.cmi_cross_ref_id = CMI_Cross_References.cmi_cross_ref_id WHERE CMI_Cross_References.source_system_code IN ('Electoral', 'Tax')", "source_tables": ["cmi_cross_references", "electoral_register"], "error_info": ""}, {"sample_id": 2653, "db_id": "local_govt_mdm", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT source_system_code) FROM CMI_cross_references", "pred_sql": "SELECT COUNT(DISTINCT source_system_code) AS different_source_system_codes FROM CMI_Cross_References", "source_tables": ["cmi_cross_references"], "error_info": ""}, {"sample_id": 2654, "db_id": "local_govt_mdm", "score": 1, "gold_sql": "SELECT * FROM customer_master_index ORDER BY cmi_details DESC", "pred_sql": "SELECT * FROM Customer_Master_Index ORDER BY cmi_details DESC", "source_tables": ["customer_master_index"], "error_info": ""}, {"sample_id": 2655, "db_id": "local_govt_mdm", "score": 1, "gold_sql": "SELECT council_tax_id, cmi_cross_ref_id FROM parking_fines", "pred_sql": "SELECT Parking_Fines.council_tax_id, Parking_Fines.cmi_cross_ref_id FROM Parking_Fines", "source_tables": ["parking_fines"], "error_info": ""}, {"sample_id": 2656, "db_id": "local_govt_mdm", "score": 0, "gold_sql": "SELECT COUNT(*) FROM rent_arrears", "pred_sql": "SELECT COUNT(DISTINCT Council_Tax.council_tax_id) AS total_council_taxes FROM Rent_Arrears JOIN Council_Tax ON Rent_Arrears.council_tax_id = Council_Tax.council_tax_id", "source_tables": ["rent_arrears"], "error_info": "Result not equal"}, {"sample_id": 2657, "db_id": "local_govt_mdm", "score": 0, "gold_sql": "SELECT DISTINCT T2.source_system_code FROM customer_master_index AS T1 JOIN cmi_cross_references AS T2 ON T1.master_customer_id = T2.master_customer_id WHERE T1.cmi_details = 'Gottlieb ,  Becker and Wyman'", "pred_sql": "SELECT DISTINCT CMI_Cross_References.source_system_code FROM CMI_Cross_References JOIN Customer_Master_Index ON CMI_Cross_References.master_customer_id = Customer_Master_Index.master_customer_id WHERE Customer_Master_Index.cmi_details = 'Gottlieb, Becker and Wyman'", "source_tables": ["cmi_cross_references", "customer_master_index"], "error_info": "Result not equal"}, {"sample_id": 2658, "db_id": "local_govt_mdm", "score": 1, "gold_sql": "SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines", "pred_sql": "SELECT cmi_cross_ref_id FROM CMI_Cross_References WHERE NOT cmi_cross_ref_id IN (SELECT cmi_cross_ref_id FROM Parking_Fines)", "source_tables": ["cmi_cross_references", "parking_fines"], "error_info": ""}, {"sample_id": 2659, "db_id": "local_govt_mdm", "score": 1, "gold_sql": "SELECT DISTINCT source_system_code FROM cmi_cross_references WHERE source_system_code LIKE '%en%'", "pred_sql": "SELECT DISTINCT source_system_code FROM CMI_Cross_References WHERE source_system_code LIKE '%en%'", "source_tables": ["cmi_cross_references"], "error_info": ""}, {"sample_id": 2660, "db_id": "party_host", "score": 1, "gold_sql": "SELECT COUNT(*) FROM party", "pred_sql": "SELECT COUNT(*) AS total_parties FROM party", "source_tables": ["party"], "error_info": ""}, {"sample_id": 2661, "db_id": "party_host", "score": 1, "gold_sql": "SELECT COUNT(*) FROM party", "pred_sql": "SELECT COUNT(*) AS Number_of_Parties FROM party", "source_tables": ["party"], "error_info": ""}, {"sample_id": 2662, "db_id": "party_host", "score": 1, "gold_sql": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC", "pred_sql": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC", "source_tables": ["party"], "error_info": ""}, {"sample_id": 2663, "db_id": "party_host", "score": 1, "gold_sql": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC", "pred_sql": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC", "source_tables": ["party"], "error_info": ""}, {"sample_id": 2664, "db_id": "party_host", "score": 1, "gold_sql": "SELECT Party_Theme, LOCATION FROM party", "pred_sql": "SELECT Party_Theme, Location FROM party", "source_tables": ["party"], "error_info": ""}, {"sample_id": 2665, "db_id": "party_host", "score": 1, "gold_sql": "SELECT Party_Theme, LOCATION FROM party", "pred_sql": "SELECT Party_Theme, Location FROM party", "source_tables": ["party"], "error_info": ""}, {"sample_id": 2666, "db_id": "party_host", "score": 1, "gold_sql": "SELECT First_year, Last_year FROM party WHERE Party_Theme = 'Spring' OR Party_Theme = 'Teqnology'", "pred_sql": "SELECT First_year, Last_year FROM party WHERE Party_Theme = 'Spring' OR Party_Theme = 'Teqnology'", "source_tables": ["party"], "error_info": ""}, {"sample_id": 2667, "db_id": "party_host", "score": 1, "gold_sql": "SELECT First_year, Last_year FROM party WHERE Party_Theme = 'Spring' OR Party_Theme = 'Teqnology'", "pred_sql": "SELECT First_year, Last_year FROM party WHERE Party_Theme IN ('Spring', 'Teqnology')", "source_tables": ["party"], "error_info": ""}, {"sample_id": 2668, "db_id": "party_host", "score": 1, "gold_sql": "SELECT AVG(Number_of_hosts) FROM party", "pred_sql": "SELECT AVG(Number_of_hosts) AS Average_Hosts FROM party", "source_tables": ["party"], "error_info": ""}, {"sample_id": 2669, "db_id": "party_host", "score": 1, "gold_sql": "SELECT AVG(Number_of_hosts) FROM party", "pred_sql": "SELECT AVG(Number_of_hosts) AS Average_Hosts FROM party", "source_tables": ["party"], "error_info": ""}, {"sample_id": 2670, "db_id": "party_host", "score": 1, "gold_sql": "SELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1", "pred_sql": "SELECT Location FROM party WHERE Party_ID = (SELECT Party_ID FROM party ORDER BY Number_of_hosts DESC LIMIT 1)", "source_tables": ["party"], "error_info": ""}, {"sample_id": 2671, "db_id": "party_host", "score": 0, "gold_sql": "SELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1", "pred_sql": "SELECT p.Location FROM party AS p JOIN party_host AS ph ON p.Party_ID = ph.Party_ID GROUP BY p.Party_ID ORDER BY COUNT(ph.Host_ID) DESC LIMIT 1", "source_tables": ["party"], "error_info": "Result not equal"}, {"sample_id": 2672, "db_id": "party_host", "score": 1, "gold_sql": "SELECT Nationality, COUNT(*) FROM HOST GROUP BY Nationality", "pred_sql": "SELECT Nationality, COUNT(*) AS Number_of_Hosts FROM host GROUP BY Nationality", "source_tables": ["host"], "error_info": ""}, {"sample_id": 2673, "db_id": "party_host", "score": 1, "gold_sql": "SELECT Nationality, COUNT(*) FROM HOST GROUP BY Nationality", "pred_sql": "SELECT h.Nationality, COUNT(h.Host_ID) AS Host_Count FROM host AS h GROUP BY h.Nationality", "source_tables": ["host"], "error_info": ""}, {"sample_id": 2674, "db_id": "party_host", "score": 0, "gold_sql": "SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Nationality, COUNT(*) AS Count FROM host GROUP BY Nationality ORDER BY Count DESC LIMIT 1", "source_tables": ["host"], "error_info": "Result not equal"}, {"sample_id": 2675, "db_id": "party_host", "score": 0, "gold_sql": "SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Nationality, COUNT(*) AS Host_Count FROM host GROUP BY Nationality ORDER BY Host_Count DESC LIMIT 1", "source_tables": ["host"], "error_info": "Result not equal"}, {"sample_id": 2676, "db_id": "party_host", "score": 0, "gold_sql": "SELECT Nationality FROM HOST WHERE Age > 45 INTERSECT SELECT Nationality FROM HOST WHERE Age < 35", "pred_sql": "SELECT DISTINCT h1.Nationality FROM host AS h1 JOIN party_host AS ph1 ON h1.Host_ID = ph1.Host_ID JOIN party AS p1 ON ph1.Party_ID = p1.Party_ID WHERE h1.Age > 45 AND h1.Nationality IN (SELECT h2.Nationality FROM host AS h2 JOIN party_host AS ph2 ON h2.Host_ID = ph2.Host_ID JOIN party AS p2 ON ph2.Party_ID = p2.Party_ID WHERE h2.Age < 35)", "source_tables": ["host"], "error_info": "Result not equal"}, {"sample_id": 2677, "db_id": "party_host", "score": 1, "gold_sql": "SELECT Nationality FROM HOST WHERE Age > 45 INTERSECT SELECT Nationality FROM HOST WHERE Age < 35", "pred_sql": "SELECT DISTINCT h1.Nationality FROM host AS h1 JOIN party_host AS ph1 ON h1.Host_ID = ph1.Host_ID JOIN party AS p1 ON ph1.Party_ID = p1.Party_ID WHERE h1.Age > 45 AND p1.Party_ID IN (SELECT ph2.Party_ID FROM party_host AS ph2 JOIN host AS h2 ON ph2.Host_ID = h2.Host_ID WHERE h2.Age < 35)", "source_tables": ["host"], "error_info": ""}, {"sample_id": 2678, "db_id": "party_host", "score": 1, "gold_sql": "SELECT T3.Party_Theme, T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID", "pred_sql": "SELECT party.Party_Theme, host.Name FROM party JOIN party_host ON party.Party_ID = party_host.Party_ID JOIN host ON party_host.Host_ID = host.Host_ID", "source_tables": ["party", "party_host", "host"], "error_info": ""}, {"sample_id": 2679, "db_id": "party_host", "score": 1, "gold_sql": "SELECT T3.Party_Theme, T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID", "pred_sql": "SELECT party.Party_Theme, host.Name FROM party JOIN party_host ON party.Party_ID = party_host.Party_ID JOIN host ON party_host.Host_ID = host.Host_ID", "source_tables": ["party", "party_host", "host"], "error_info": ""}, {"sample_id": 2680, "db_id": "party_host", "score": 1, "gold_sql": "SELECT T3.Location, T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID ORDER BY T2.Age", "pred_sql": "SELECT party.Location, host.Name FROM party JOIN party_host ON party.Party_ID = party_host.Party_ID JOIN host ON party_host.Host_ID = host.Host_ID ORDER BY host.Age ASC", "source_tables": ["party", "party_host", "host"], "error_info": ""}, {"sample_id": 2681, "db_id": "party_host", "score": 1, "gold_sql": "SELECT T3.Location, T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID ORDER BY T2.Age", "pred_sql": "SELECT p.Location, h.Name FROM party AS p JOIN party_host AS ph ON p.Party_ID = ph.Party_ID JOIN host AS h ON ph.Host_ID = h.Host_ID ORDER BY h.Age ASC", "source_tables": ["party", "party_host", "host"], "error_info": ""}, {"sample_id": 2682, "db_id": "party_host", "score": 1, "gold_sql": "SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID WHERE T2.Age > 50", "pred_sql": "SELECT DISTINCT party.Location FROM party JOIN party_host ON party.Party_ID = party_host.Party_ID JOIN host ON party_host.Host_ID = host.Host_ID WHERE host.Age > 50", "source_tables": ["party", "party_host", "host"], "error_info": ""}, {"sample_id": 2683, "db_id": "party_host", "score": 1, "gold_sql": "SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID WHERE T2.Age > 50", "pred_sql": "SELECT DISTINCT party.Location FROM party JOIN party_host ON party.Party_ID = party_host.Party_ID JOIN host ON party_host.Host_ID = host.Host_ID WHERE host.Age > 50", "source_tables": ["party", "party_host", "host"], "error_info": ""}, {"sample_id": 2684, "db_id": "party_host", "score": 1, "gold_sql": "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID WHERE T3.Number_of_hosts > 20", "pred_sql": "SELECT h.Name FROM host AS h JOIN party_host AS ph ON h.Host_ID = ph.Host_ID JOIN party AS p ON ph.Party_ID = p.Party_ID WHERE p.Number_of_hosts > '20'", "source_tables": ["party", "party_host", "host"], "error_info": ""}, {"sample_id": 2685, "db_id": "party_host", "score": 1, "gold_sql": "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID WHERE T3.Number_of_hosts > 20", "pred_sql": "SELECT h.Name FROM party AS p JOIN party_host AS ph ON p.Party_ID = ph.Party_ID JOIN host AS h ON ph.Host_ID = h.Host_ID WHERE p.Number_of_hosts > '20'", "source_tables": ["party", "party_host", "host"], "error_info": ""}, {"sample_id": 2686, "db_id": "party_host", "score": 1, "gold_sql": "SELECT Name, Nationality FROM HOST ORDER BY Age DESC LIMIT 1", "pred_sql": "SELECT Name, Nationality FROM host ORDER BY Age DESC LIMIT 1", "source_tables": ["host"], "error_info": ""}, {"sample_id": 2687, "db_id": "party_host", "score": 1, "gold_sql": "SELECT Name, Nationality FROM HOST ORDER BY Age DESC LIMIT 1", "pred_sql": "SELECT Name, Nationality FROM host WHERE Age = (SELECT MAX(Age) FROM host)", "source_tables": ["host"], "error_info": ""}, {"sample_id": 2688, "db_id": "party_host", "score": 1, "gold_sql": "SELECT Name FROM HOST WHERE NOT Host_ID IN (SELECT Host_ID FROM party_host)", "pred_sql": "SELECT Name FROM host WHERE NOT Host_ID IN (SELECT Host_ID FROM party_host)", "source_tables": ["host", "party_host"], "error_info": ""}, {"sample_id": 2689, "db_id": "party_host", "score": 1, "gold_sql": "SELECT Name FROM HOST WHERE NOT Host_ID IN (SELECT Host_ID FROM party_host)", "pred_sql": "SELECT Name FROM host WHERE NOT Host_ID IN (SELECT Host_ID FROM party_host)", "source_tables": ["host", "party_host"], "error_info": ""}, {"sample_id": 2690, "db_id": "storm_record", "score": 1, "gold_sql": "SELECT COUNT(*) FROM region", "pred_sql": "SELECT COUNT(*) AS Number_of_Regions FROM region", "source_tables": ["region"], "error_info": ""}, {"sample_id": 2691, "db_id": "storm_record", "score": 1, "gold_sql": "SELECT COUNT(*) FROM region", "pred_sql": "SELECT COUNT(*) AS Number_of_Regions FROM region", "source_tables": ["region"], "error_info": ""}, {"sample_id": 2692, "db_id": "storm_record", "score": 1, "gold_sql": "SELECT region_code, region_name FROM region ORDER BY region_code", "pred_sql": "SELECT Region_code, Region_name FROM region ORDER BY Region_code", "source_tables": ["region"], "error_info": ""}, {"sample_id": 2693, "db_id": "storm_record", "score": 1, "gold_sql": "SELECT region_code, region_name FROM region ORDER BY region_code", "pred_sql": "SELECT Region_code, Region_name FROM region ORDER BY Region_code", "source_tables": ["region"], "error_info": ""}, {"sample_id": 2694, "db_id": "storm_record", "score": 1, "gold_sql": "SELECT region_name FROM region ORDER BY region_name", "pred_sql": "SELECT Region_name FROM region ORDER BY Region_name ASC", "source_tables": ["region"], "error_info": ""}, {"sample_id": 2695, "db_id": "storm_record", "score": 1, "gold_sql": "SELECT region_name FROM region ORDER BY region_name", "pred_sql": "SELECT Region_name FROM region ORDER BY Region_name ASC", "source_tables": ["region"], "error_info": ""}, {"sample_id": 2696, "db_id": "storm_record", "score": 1, "gold_sql": "SELECT region_name FROM region WHERE region_name <> 'Denmark'", "pred_sql": "SELECT Region_name FROM region WHERE Region_name <> 'Denmark'", "source_tables": ["region"], "error_info": ""}, {"sample_id": 2697, "db_id": "storm_record", "score": 1, "gold_sql": "SELECT region_name FROM region WHERE region_name <> 'Denmark'", "pred_sql": "SELECT Region_name FROM region WHERE Region_name <> 'Denmark'", "source_tables": ["region"], "error_info": ""}, {"sample_id": 2698, "db_id": "storm_record", "score": 1, "gold_sql": "SELECT COUNT(*) FROM storm WHERE Number_Deaths > 0", "pred_sql": "SELECT COUNT(*) AS Number_of_Storms_With_Deaths FROM storm WHERE NOT Number_Deaths IS NULL AND Number_Deaths <> '0'", "source_tables": ["storm"], "error_info": ""}, {"sample_id": 2699, "db_id": "storm_record", "score": 1, "gold_sql": "SELECT COUNT(*) FROM storm WHERE Number_Deaths > 0", "pred_sql": "SELECT COUNT(*) AS Number_of_Storms FROM storm WHERE Number_Deaths > '0'", "source_tables": ["storm"], "error_info": ""}, {"sample_id": 2700, "db_id": "storm_record", "score": 1, "gold_sql": "SELECT name, dates_active, number_deaths FROM storm WHERE number_deaths >= 1", "pred_sql": "SELECT Name, Dates_active, Number_Deaths FROM storm WHERE Number_Deaths > 0", "source_tables": ["storm"], "error_info": ""}, {"sample_id": 2701, "db_id": "storm_record", "score": 1, "gold_sql": "SELECT name, dates_active, number_deaths FROM storm WHERE number_deaths >= 1", "pred_sql": "SELECT Name, Dates_active, Number_Deaths FROM storm WHERE Number_Deaths >= 1", "source_tables": ["storm"], "error_info": ""}, {"sample_id": 2702, "db_id": "storm_record", "score": 1, "gold_sql": "SELECT AVG(damage_millions_USD), MAX(damage_millions_USD) FROM storm WHERE max_speed > 1000", "pred_sql": "SELECT AVG(Damage_millions_USD) AS average_damage, MAX(Damage_millions_USD) AS maximum_damage FROM storm WHERE Max_speed > '1000'", "source_tables": ["storm"], "error_info": ""}, {"sample_id": 2703, "db_id": "storm_record", "score": 1, "gold_sql": "SELECT AVG(damage_millions_USD), MAX(damage_millions_USD) FROM storm WHERE max_speed > 1000", "pred_sql": "SELECT AVG(Damage_millions_USD) AS average_damage, MAX(Damage_millions_USD) AS maximum_damage FROM storm WHERE Max_speed > '1000'", "source_tables": ["storm"], "error_info": ""}, {"sample_id": 2704, "db_id": "storm_record", "score": 1, "gold_sql": "SELECT SUM(number_deaths), SUM(damage_millions_USD) FROM storm WHERE max_speed > (SELECT AVG(max_speed) FROM storm)", "pred_sql": "SELECT SUM(Number_Deaths) AS Total_Deaths, SUM(Damage_millions_USD) AS Total_Damage FROM storm WHERE Max_speed > (SELECT AVG(Max_speed) FROM storm)", "source_tables": ["storm"], "error_info": ""}, {"sample_id": 2705, "db_id": "storm_record", "score": 1, "gold_sql": "SELECT SUM(number_deaths), SUM(damage_millions_USD) FROM storm WHERE max_speed > (SELECT AVG(max_speed) FROM storm)", "pred_sql": "SELECT SUM(storm.Number_Deaths) AS Total_Deaths, SUM(storm.Damage_millions_USD) AS Total_Damage FROM storm WHERE storm.Max_speed > (SELECT AVG(Max_speed) FROM storm)", "source_tables": ["storm"], "error_info": ""}, {"sample_id": 2706, "db_id": "storm_record", "score": 1, "gold_sql": "SELECT name, damage_millions_USD FROM storm ORDER BY max_speed DESC", "pred_sql": "SELECT Name, Damage_millions_USD FROM storm ORDER BY Max_speed DESC", "source_tables": ["storm"], "error_info": ""}, {"sample_id": 2707, "db_id": "storm_record", "score": 1, "gold_sql": "SELECT name, damage_millions_USD FROM storm ORDER BY max_speed DESC", "pred_sql": "SELECT Name, Damage_millions_USD FROM storm ORDER BY Max_speed DESC", "source_tables": ["storm"], "error_info": ""}, {"sample_id": 2708, "db_id": "storm_record", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT region_id) FROM affected_region", "pred_sql": "SELECT COUNT(DISTINCT Region_id) AS Number_of_Affected_Regions FROM affected_region", "source_tables": ["affected_region"], "error_info": ""}, {"sample_id": 2709, "db_id": "storm_record", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT region_id) FROM affected_region", "pred_sql": "SELECT COUNT(DISTINCT Region_id) AS Number_of_Affected_Regions FROM affected_region", "source_tables": ["affected_region"], "error_info": ""}, {"sample_id": 2710, "db_id": "storm_record", "score": 1, "gold_sql": "SELECT region_name FROM region WHERE NOT region_id IN (SELECT region_id FROM affected_region)", "pred_sql": "SELECT region.Region_name FROM region WHERE NOT region.Region_id IN (SELECT affected_region.Region_id FROM affected_region)", "source_tables": ["region", "affected_region"], "error_info": ""}, {"sample_id": 2711, "db_id": "storm_record", "score": 1, "gold_sql": "SELECT region_name FROM region WHERE NOT region_id IN (SELECT region_id FROM affected_region)", "pred_sql": "SELECT region.Region_name FROM region LEFT JOIN affected_region ON region.Region_id = affected_region.Region_id WHERE affected_region.Region_id IS NULL", "source_tables": ["region", "affected_region"], "error_info": ""}, {"sample_id": 2712, "db_id": "storm_record", "score": 0, "gold_sql": "SELECT T1.region_name, COUNT(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id", "pred_sql": "SELECT r.Region_name, COUNT(a.Storm_ID) AS Number_of_Storms FROM region AS r LEFT JOIN affected_region AS a ON r.Region_id = a.Region_id GROUP BY r.Region_id, r.Region_name", "source_tables": ["region", "affected_region"], "error_info": "Result not equal"}, {"sample_id": 2713, "db_id": "storm_record", "score": 0, "gold_sql": "SELECT T1.region_name, COUNT(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id", "pred_sql": "SELECT region.Region_name, COUNT(storm.Storm_ID) AS Number_of_Storms FROM region LEFT JOIN affected_region ON region.Region_id = affected_region.Region_id LEFT JOIN storm ON affected_region.Storm_ID = storm.Storm_ID GROUP BY region.Region_name", "source_tables": ["region", "affected_region"], "error_info": "Result not equal"}, {"sample_id": 2714, "db_id": "storm_record", "score": 0, "gold_sql": "SELECT T1.name, COUNT(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id", "pred_sql": "SELECT storm.Name, COUNT(affected_region.Region_id) AS Number_of_Affected_Regions FROM storm LEFT JOIN affected_region ON storm.Storm_ID = affected_region.Storm_ID GROUP BY storm.Storm_ID", "source_tables": ["storm", "affected_region"], "error_info": "Result not equal"}, {"sample_id": 2715, "db_id": "storm_record", "score": 1, "gold_sql": "SELECT T1.name, COUNT(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id", "pred_sql": "SELECT storm.Name, COUNT(DISTINCT affected_region.Region_id) AS Number_of_Regions_Affected FROM storm JOIN affected_region ON storm.Storm_ID = affected_region.Storm_ID GROUP BY storm.Storm_ID", "source_tables": ["storm", "affected_region"], "error_info": ""}, {"sample_id": 2716, "db_id": "storm_record", "score": 1, "gold_sql": "SELECT T1.name, T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT s.Name, s.Max_speed FROM storm AS s JOIN affected_region AS ar ON s.Storm_ID = ar.Storm_ID GROUP BY s.Storm_ID ORDER BY COUNT(ar.Region_id) DESC LIMIT 1", "source_tables": ["storm", "affected_region"], "error_info": ""}, {"sample_id": 2717, "db_id": "storm_record", "score": 1, "gold_sql": "SELECT T1.name, T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT s.Name, s.Max_speed FROM storm AS s JOIN affected_region AS ar ON s.Storm_ID = ar.Storm_ID GROUP BY s.Storm_ID ORDER BY COUNT(ar.Region_id) DESC LIMIT 1", "source_tables": ["storm", "affected_region"], "error_info": ""}, {"sample_id": 2718, "db_id": "storm_record", "score": 1, "gold_sql": "SELECT name FROM storm WHERE NOT storm_id IN (SELECT storm_id FROM affected_region)", "pred_sql": "SELECT Name FROM storm WHERE NOT Storm_ID IN (SELECT Storm_ID FROM affected_region)", "source_tables": ["storm", "affected_region"], "error_info": ""}, {"sample_id": 2719, "db_id": "storm_record", "score": 1, "gold_sql": "SELECT name FROM storm WHERE NOT storm_id IN (SELECT storm_id FROM affected_region)", "pred_sql": "SELECT Name FROM storm WHERE NOT Storm_ID IN (SELECT Storm_ID FROM affected_region)", "source_tables": ["storm", "affected_region"], "error_info": ""}, {"sample_id": 2720, "db_id": "storm_record", "score": 1, "gold_sql": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING COUNT(*) >= 2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING SUM(T2.number_city_affected) >= 10", "pred_sql": "SELECT s.Name FROM storm AS s JOIN affected_region AS ar ON s.Storm_ID = ar.Storm_ID GROUP BY s.Storm_ID HAVING COUNT(DISTINCT ar.Region_id) >= 2 AND SUM(ar.Number_city_affected) >= 10", "source_tables": ["storm", "affected_region"], "error_info": ""}, {"sample_id": 2721, "db_id": "storm_record", "score": 1, "gold_sql": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING COUNT(*) >= 2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING SUM(T2.number_city_affected) >= 10", "pred_sql": "SELECT s.Name FROM storm AS s JOIN affected_region AS ar ON s.Storm_ID = ar.Storm_ID GROUP BY s.Storm_ID HAVING COUNT(DISTINCT ar.Region_id) >= 2 AND SUM(ar.Number_city_affected) >= 10", "source_tables": ["storm", "affected_region"], "error_info": ""}, {"sample_id": 2722, "db_id": "storm_record", "score": 1, "gold_sql": "SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING COUNT(*) >= 2", "pred_sql": "SELECT Name FROM storm WHERE NOT Storm_ID IN (SELECT Storm_ID FROM affected_region GROUP BY Storm_ID HAVING COUNT(Region_id) >= 2)", "source_tables": ["storm", "affected_region"], "error_info": ""}, {"sample_id": 2723, "db_id": "storm_record", "score": 1, "gold_sql": "SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING COUNT(*) >= 2", "pred_sql": "SELECT Name FROM storm WHERE NOT Storm_ID IN (SELECT Storm_ID FROM affected_region GROUP BY Storm_ID HAVING COUNT(DISTINCT Region_id) >= 2)", "source_tables": ["storm", "affected_region"], "error_info": ""}, {"sample_id": 2724, "db_id": "storm_record", "score": 1, "gold_sql": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T3.number_deaths >= 10", "pred_sql": "SELECT DISTINCT region.Region_name FROM region JOIN affected_region ON region.Region_id = affected_region.Region_id JOIN storm ON affected_region.Storm_ID = storm.Storm_ID WHERE storm.Number_Deaths >= 10", "source_tables": ["storm", "region", "affected_region"], "error_info": ""}, {"sample_id": 2725, "db_id": "storm_record", "score": 1, "gold_sql": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T3.number_deaths >= 10", "pred_sql": "SELECT DISTINCT region.Region_name FROM region JOIN affected_region ON region.Region_id = affected_region.Region_id JOIN storm ON affected_region.Storm_ID = storm.Storm_ID WHERE storm.Number_Deaths >= 10", "source_tables": ["storm", "region", "affected_region"], "error_info": ""}, {"sample_id": 2726, "db_id": "storm_record", "score": 1, "gold_sql": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.region_name = 'Denmark'", "pred_sql": "SELECT storm.Name FROM storm JOIN affected_region ON storm.Storm_ID = affected_region.Storm_ID JOIN region ON affected_region.Region_id = region.Region_id WHERE region.Region_name = 'Denmark'", "source_tables": ["storm", "region", "affected_region"], "error_info": ""}, {"sample_id": 2727, "db_id": "storm_record", "score": 1, "gold_sql": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.region_name = 'Denmark'", "pred_sql": "SELECT storm.Name FROM storm JOIN affected_region ON storm.Storm_ID = affected_region.Storm_ID JOIN region ON affected_region.Region_id = region.Region_id WHERE region.Region_name = 'Denmark'", "source_tables": ["storm", "region", "affected_region"], "error_info": ""}, {"sample_id": 2728, "db_id": "storm_record", "score": 1, "gold_sql": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING COUNT(*) >= 2", "pred_sql": "SELECT r.Region_name FROM region AS r JOIN affected_region AS ar ON r.Region_id = ar.Region_id JOIN storm AS s ON ar.Storm_ID = s.Storm_ID GROUP BY r.Region_name HAVING COUNT(s.Storm_ID) >= 2", "source_tables": ["region", "affected_region"], "error_info": ""}, {"sample_id": 2729, "db_id": "storm_record", "score": 1, "gold_sql": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING COUNT(*) >= 2", "pred_sql": "SELECT r.Region_name FROM region AS r JOIN affected_region AS ar ON r.Region_id = ar.Region_id JOIN storm AS s ON ar.Storm_ID = s.Storm_ID GROUP BY r.Region_name HAVING COUNT(s.Storm_ID) >= 2", "source_tables": ["region", "affected_region"], "error_info": ""}, {"sample_id": 2730, "db_id": "storm_record", "score": 0, "gold_sql": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1", "pred_sql": "SELECT r.Region_name FROM region AS r JOIN affected_region AS ar ON r.Region_id = ar.Region_id JOIN storm AS s ON ar.Storm_ID = s.Storm_ID WHERE s.Number_Deaths = (SELECT MAX(Number_Deaths) FROM storm)", "source_tables": ["storm", "region", "affected_region"], "error_info": "Result not equal"}, {"sample_id": 2731, "db_id": "storm_record", "score": 0, "gold_sql": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1", "pred_sql": "SELECT r.Region_name FROM region AS r JOIN affected_region AS ar ON r.Region_id = ar.Region_id JOIN storm AS s ON ar.Storm_ID = s.Storm_ID WHERE s.Number_Deaths = (SELECT MAX(Number_Deaths) FROM storm)", "source_tables": ["storm", "region", "affected_region"], "error_info": "Result not equal"}, {"sample_id": 2732, "db_id": "storm_record", "score": 1, "gold_sql": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.Region_name = 'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.Region_name = 'Albania'", "pred_sql": "SELECT s.Name FROM storm AS s JOIN affected_region AS ar ON s.Storm_ID = ar.Storm_ID JOIN region AS r ON ar.Region_id = r.Region_id WHERE r.Region_name IN ('Afghanistan', 'Albania') GROUP BY s.Storm_ID HAVING COUNT(DISTINCT r.Region_name) = 2", "source_tables": ["storm", "region", "affected_region"], "error_info": ""}, {"sample_id": 2733, "db_id": "storm_record", "score": 1, "gold_sql": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.Region_name = 'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.Region_name = 'Albania'", "pred_sql": "SELECT DISTINCT s.Name FROM storm AS s JOIN affected_region AS ar1 ON s.Storm_ID = ar1.Storm_ID JOIN region AS r1 ON ar1.Region_id = r1.Region_id JOIN affected_region AS ar2 ON s.Storm_ID = ar2.Storm_ID JOIN region AS r2 ON ar2.Region_id = r2.Region_id WHERE r1.Region_name = 'Afghanistan' AND r2.Region_name = 'Albania'", "source_tables": ["storm", "region", "affected_region"], "error_info": ""}, {"sample_id": 2734, "db_id": "election", "score": 1, "gold_sql": "SELECT COUNT(*) FROM county", "pred_sql": "SELECT COUNT(*) AS total_counties FROM county", "source_tables": ["county"], "error_info": ""}, {"sample_id": 2735, "db_id": "election", "score": 1, "gold_sql": "SELECT COUNT(*) FROM county", "pred_sql": "SELECT COUNT(*) AS total_counties FROM county", "source_tables": ["county"], "error_info": ""}, {"sample_id": 2736, "db_id": "election", "score": 1, "gold_sql": "SELECT County_name, Population FROM county", "pred_sql": "SELECT County_name, Population FROM county", "source_tables": ["county"], "error_info": ""}, {"sample_id": 2737, "db_id": "election", "score": 1, "gold_sql": "SELECT County_name, Population FROM county", "pred_sql": "SELECT County_name, Population FROM county", "source_tables": ["county"], "error_info": ""}, {"sample_id": 2738, "db_id": "election", "score": 1, "gold_sql": "SELECT AVG(Population) FROM county", "pred_sql": "SELECT AVG(Population) AS Average_Population FROM county", "source_tables": ["county"], "error_info": ""}, {"sample_id": 2739, "db_id": "election", "score": 1, "gold_sql": "SELECT AVG(Population) FROM county", "pred_sql": "SELECT AVG(Population) AS Average_Population FROM county", "source_tables": ["county"], "error_info": ""}, {"sample_id": 2740, "db_id": "election", "score": 1, "gold_sql": "SELECT MAX(Population), MIN(Population) FROM county", "pred_sql": "SELECT MAX(Population) AS Max_Population, MIN(Population) AS Min_Population FROM county", "source_tables": ["county"], "error_info": ""}, {"sample_id": 2741, "db_id": "election", "score": 1, "gold_sql": "SELECT MAX(Population), MIN(Population) FROM county", "pred_sql": "SELECT MAX(Population) AS Max_Population, MIN(Population) AS Min_Population FROM county", "source_tables": ["county"], "error_info": ""}, {"sample_id": 2742, "db_id": "election", "score": 1, "gold_sql": "SELECT DISTINCT District FROM election", "pred_sql": "SELECT DISTINCT District FROM election", "source_tables": ["election"], "error_info": ""}, {"sample_id": 2743, "db_id": "election", "score": 1, "gold_sql": "SELECT DISTINCT District FROM election", "pred_sql": "SELECT DISTINCT District FROM election", "source_tables": ["election"], "error_info": ""}, {"sample_id": 2744, "db_id": "election", "score": 1, "gold_sql": "SELECT Zip_code FROM county WHERE County_name = 'Howard'", "pred_sql": "SELECT Zip_code FROM county WHERE County_name = 'Howard'", "source_tables": ["county"], "error_info": ""}, {"sample_id": 2745, "db_id": "election", "score": 1, "gold_sql": "SELECT Zip_code FROM county WHERE County_name = 'Howard'", "pred_sql": "SELECT Zip_code FROM county WHERE County_name = 'Howard'", "source_tables": ["county"], "error_info": ""}, {"sample_id": 2746, "db_id": "election", "score": 1, "gold_sql": "SELECT Delegate FROM election WHERE District = 1", "pred_sql": "SELECT Delegate FROM election WHERE District = '1'", "source_tables": ["election"], "error_info": ""}, {"sample_id": 2747, "db_id": "election", "score": 1, "gold_sql": "SELECT Delegate FROM election WHERE District = 1", "pred_sql": "SELECT Delegate FROM election WHERE District = '1'", "source_tables": ["election"], "error_info": ""}, {"sample_id": 2748, "db_id": "election", "score": 1, "gold_sql": "SELECT Delegate, Committee FROM election", "pred_sql": "SELECT Delegate, Committee FROM election", "source_tables": ["election"], "error_info": ""}, {"sample_id": 2749, "db_id": "election", "score": 1, "gold_sql": "SELECT Delegate, Committee FROM election", "pred_sql": "SELECT Delegate, Committee FROM election", "source_tables": ["election"], "error_info": ""}, {"sample_id": 2750, "db_id": "election", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT Governor) FROM party", "pred_sql": "SELECT COUNT(DISTINCT Governor) AS Distinct_Governors FROM party", "source_tables": ["party"], "error_info": ""}, {"sample_id": 2751, "db_id": "election", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT Governor) FROM party", "pred_sql": "SELECT COUNT(DISTINCT Governor) AS Distinct_Governors FROM party", "source_tables": ["party"], "error_info": ""}, {"sample_id": 2752, "db_id": "election", "score": 0, "gold_sql": "SELECT Lieutenant_Governor, Comptroller FROM party WHERE Party = 'Democratic'", "pred_sql": "SELECT party.Lieutenant_Governor, party.Comptroller FROM party WHERE party.Party = (SELECT Party_ID FROM party WHERE Party = 'Democratic')", "source_tables": ["party"], "error_info": "Result not equal"}, {"sample_id": 2753, "db_id": "election", "score": 0, "gold_sql": "SELECT Lieutenant_Governor, Comptroller FROM party WHERE Party = 'Democratic'", "pred_sql": "SELECT party.Lieutenant_Governor, party.Comptroller FROM party WHERE party.Party = (SELECT Party_ID FROM party WHERE Party = 'Democratic')", "source_tables": ["party"], "error_info": "Result not equal"}, {"sample_id": 2754, "db_id": "election", "score": 1, "gold_sql": "SELECT DISTINCT YEAR FROM party WHERE Governor = 'Eliot Spitzer'", "pred_sql": "SELECT DISTINCT Year FROM party WHERE Governor = 'Eliot Spitzer'", "source_tables": ["party"], "error_info": ""}, {"sample_id": 2755, "db_id": "election", "score": 1, "gold_sql": "SELECT DISTINCT YEAR FROM party WHERE Governor = 'Eliot Spitzer'", "pred_sql": "SELECT DISTINCT Year FROM party WHERE Governor = 'Eliot Spitzer'", "source_tables": ["party"], "error_info": ""}, {"sample_id": 2756, "db_id": "election", "score": 1, "gold_sql": "SELECT * FROM election", "pred_sql": "SELECT * FROM election", "source_tables": ["election"], "error_info": ""}, {"sample_id": 2757, "db_id": "election", "score": 1, "gold_sql": "SELECT * FROM election", "pred_sql": "SELECT * FROM election", "source_tables": ["election"], "error_info": ""}, {"sample_id": 2758, "db_id": "election", "score": 1, "gold_sql": "SELECT T2.Delegate, T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District", "pred_sql": "SELECT election.Delegate, county.County_name FROM election JOIN county ON election.District = county.County_Id", "source_tables": ["county", "election"], "error_info": ""}, {"sample_id": 2759, "db_id": "election", "score": 1, "gold_sql": "SELECT T2.Delegate, T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District", "pred_sql": "SELECT election.Delegate, county.County_name FROM election JOIN county ON election.District = county.County_Id", "source_tables": ["county", "election"], "error_info": ""}, {"sample_id": 2760, "db_id": "election", "score": 1, "gold_sql": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T1.Population < 100000", "pred_sql": "SELECT election.Delegate FROM election JOIN county ON election.District = county.County_Id WHERE county.Population < '100000'", "source_tables": ["county", "election"], "error_info": ""}, {"sample_id": 2761, "db_id": "election", "score": 1, "gold_sql": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T1.Population < 100000", "pred_sql": "SELECT election.Delegate FROM election JOIN county ON election.District = county.County_Id WHERE county.Population < '100000'", "source_tables": ["county", "election"], "error_info": ""}, {"sample_id": 2762, "db_id": "election", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T1.Population > 50000", "pred_sql": "SELECT COUNT(DISTINCT e.Delegate) AS Distinct_Delegates FROM election AS e JOIN county AS c ON e.District = c.County_Id WHERE c.Population > '50000'", "source_tables": ["county", "election"], "error_info": ""}, {"sample_id": 2763, "db_id": "election", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T1.Population > 50000", "pred_sql": "SELECT COUNT(DISTINCT e.Delegate) AS Distinct_Delegates_Count FROM election AS e JOIN county AS c ON e.District = c.County_Id WHERE c.Population > 50000", "source_tables": ["county", "election"], "error_info": ""}, {"sample_id": 2764, "db_id": "election", "score": 1, "gold_sql": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T2.Committee = 'Appropriations'", "pred_sql": "SELECT county.County_name FROM county JOIN election ON county.County_Id = election.District WHERE election.Committee = 'Appropriations'", "source_tables": ["county", "election"], "error_info": ""}, {"sample_id": 2765, "db_id": "election", "score": 1, "gold_sql": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T2.Committee = 'Appropriations'", "pred_sql": "SELECT county.County_name FROM county JOIN election ON county.County_Id = election.District WHERE election.Committee = 'Appropriations'", "source_tables": ["county", "election"], "error_info": ""}, {"sample_id": 2766, "db_id": "election", "score": 1, "gold_sql": "SELECT T1.Delegate, T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID", "pred_sql": "SELECT election.Delegate, party.Party FROM election JOIN party ON election.Party = party.Party_ID", "source_tables": ["party", "election"], "error_info": ""}, {"sample_id": 2767, "db_id": "election", "score": 1, "gold_sql": "SELECT T1.Delegate, T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID", "pred_sql": "SELECT DISTINCT e.Delegate, p.Party FROM election AS e JOIN party AS p ON e.Party = p.Party_ID", "source_tables": ["party", "election"], "error_info": ""}, {"sample_id": 2768, "db_id": "election", "score": 1, "gold_sql": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1", "pred_sql": "SELECT party.Governor FROM party JOIN election ON party.Party_ID = election.Party WHERE election.District = '1'", "source_tables": ["party", "election"], "error_info": ""}, {"sample_id": 2769, "db_id": "election", "score": 0, "gold_sql": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1", "pred_sql": "SELECT party.Party, party.Governor FROM election JOIN party ON election.Party = party.Party_ID WHERE election.District = '1'", "source_tables": ["party", "election"], "error_info": "Result not equal"}, {"sample_id": 2770, "db_id": "election", "score": 1, "gold_sql": "SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1 OR T1.District = 2", "pred_sql": "SELECT party.Comptroller FROM party JOIN election ON party.Party_ID = election.Party WHERE election.District IN ('1', '2')", "source_tables": ["party", "election"], "error_info": ""}, {"sample_id": 2771, "db_id": "election", "score": 0, "gold_sql": "SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1 OR T1.District = 2", "pred_sql": "SELECT party.Party, party.Comptroller FROM party JOIN election ON party.Party_ID = election.Party WHERE election.District IN ('1', '2')", "source_tables": ["party", "election"], "error_info": "Result not equal"}, {"sample_id": 2772, "db_id": "election", "score": 0, "gold_sql": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = 'Democratic'", "pred_sql": "SELECT DISTINCT Committee FROM election WHERE Party = (SELECT Party_ID FROM party WHERE Party = 'Democratic')", "source_tables": ["party", "election"], "error_info": "Result not equal"}, {"sample_id": 2773, "db_id": "election", "score": 0, "gold_sql": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = 'Democratic'", "pred_sql": "SELECT DISTINCT Committee FROM election WHERE Party = (SELECT Party_ID FROM party WHERE Party = 'Democratic')", "source_tables": ["party", "election"], "error_info": "Result not equal"}, {"sample_id": 2774, "db_id": "election", "score": 1, "gold_sql": "SELECT T1.County_name, COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id", "pred_sql": "SELECT county.County_name, COUNT(election.Delegate) AS Number_of_Delegates FROM county JOIN election ON county.County_Id = election.District GROUP BY county.County_name", "source_tables": ["county", "election"], "error_info": ""}, {"sample_id": 2775, "db_id": "election", "score": 0, "gold_sql": "SELECT T1.County_name, COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id", "pred_sql": "SELECT county.County_name, COUNT(election.Delegate) AS Number_of_Delegates FROM county LEFT JOIN election ON county.County_Id = election.District GROUP BY county.County_name", "source_tables": ["county", "election"], "error_info": "Result not equal"}, {"sample_id": 2776, "db_id": "election", "score": 0, "gold_sql": "SELECT T2.Party, COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T1.Party", "pred_sql": "SELECT party.Party, COUNT(election.Delegate) AS Number_of_Delegates FROM party JOIN election ON party.Party_ID = election.Party GROUP BY party.Party", "source_tables": ["party", "election"], "error_info": "Result not equal"}, {"sample_id": 2777, "db_id": "election", "score": 0, "gold_sql": "SELECT T2.Party, COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T1.Party", "pred_sql": "SELECT party.Party, COUNT(election.Delegate) AS Number_of_Delegates FROM party JOIN election ON party.Party_ID = election.Party GROUP BY party.Party", "source_tables": ["party", "election"], "error_info": "Result not equal"}, {"sample_id": 2778, "db_id": "election", "score": 1, "gold_sql": "SELECT County_name FROM county ORDER BY Population ASC", "pred_sql": "SELECT County_name FROM county ORDER BY Population ASC", "source_tables": ["county"], "error_info": ""}, {"sample_id": 2779, "db_id": "election", "score": 1, "gold_sql": "SELECT County_name FROM county ORDER BY Population ASC", "pred_sql": "SELECT County_name FROM county ORDER BY Population ASC", "source_tables": ["county"], "error_info": ""}, {"sample_id": 2780, "db_id": "election", "score": 1, "gold_sql": "SELECT County_name FROM county ORDER BY County_name DESC", "pred_sql": "SELECT County_name FROM county ORDER BY County_name DESC", "source_tables": ["county"], "error_info": ""}, {"sample_id": 2781, "db_id": "election", "score": 1, "gold_sql": "SELECT County_name FROM county ORDER BY County_name DESC", "pred_sql": "SELECT County_name FROM county ORDER BY County_name DESC", "source_tables": ["county"], "error_info": ""}, {"sample_id": 2782, "db_id": "election", "score": 1, "gold_sql": "SELECT County_name FROM county ORDER BY Population DESC LIMIT 1", "pred_sql": "SELECT County_name FROM county ORDER BY Population DESC LIMIT 1", "source_tables": ["county"], "error_info": ""}, {"sample_id": 2783, "db_id": "election", "score": 1, "gold_sql": "SELECT County_name FROM county ORDER BY Population DESC LIMIT 1", "pred_sql": "SELECT County_name FROM county ORDER BY Population DESC LIMIT 1", "source_tables": ["county"], "error_info": ""}, {"sample_id": 2784, "db_id": "election", "score": 1, "gold_sql": "SELECT County_name FROM county ORDER BY Population ASC LIMIT 3", "pred_sql": "SELECT County_name FROM county ORDER BY Population ASC LIMIT 3", "source_tables": ["county"], "error_info": ""}, {"sample_id": 2785, "db_id": "election", "score": 1, "gold_sql": "SELECT County_name FROM county ORDER BY Population ASC LIMIT 3", "pred_sql": "SELECT County_name FROM county ORDER BY Population ASC LIMIT 3", "source_tables": ["county"], "error_info": ""}, {"sample_id": 2786, "db_id": "election", "score": 1, "gold_sql": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id HAVING COUNT(*) >= 2", "pred_sql": "SELECT county.County_name FROM county JOIN election ON county.County_Id = election.District GROUP BY county.County_name HAVING COUNT(election.Delegate) >= 2", "source_tables": ["county", "election"], "error_info": ""}, {"sample_id": 2787, "db_id": "election", "score": 1, "gold_sql": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id HAVING COUNT(*) >= 2", "pred_sql": "SELECT county.County_name FROM county JOIN election ON county.County_Id = election.District GROUP BY county.County_name HAVING COUNT(election.Delegate) >= 2", "source_tables": ["county", "election"], "error_info": ""}, {"sample_id": 2788, "db_id": "election", "score": 1, "gold_sql": "SELECT Party FROM party GROUP BY Party HAVING COUNT(*) >= 2", "pred_sql": "SELECT Party FROM party GROUP BY Party HAVING COUNT(*) >= 2", "source_tables": ["party"], "error_info": ""}, {"sample_id": 2789, "db_id": "election", "score": 0, "gold_sql": "SELECT Party FROM party GROUP BY Party HAVING COUNT(*) >= 2", "pred_sql": "SELECT Party, COUNT(*) AS record_count FROM party GROUP BY Party HAVING COUNT(*) >= 2", "source_tables": ["party"], "error_info": "Result not equal"}, {"sample_id": 2790, "db_id": "election", "score": 0, "gold_sql": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Party FROM election GROUP BY Party ORDER BY COUNT(Delegate) DESC LIMIT 1", "source_tables": ["party", "election"], "error_info": "Result not equal"}, {"sample_id": 2791, "db_id": "election", "score": 0, "gold_sql": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Party, COUNT(Delegate) AS NumberOfDelegates FROM election GROUP BY Party ORDER BY NumberOfDelegates DESC LIMIT 1", "source_tables": ["party", "election"], "error_info": "Result not equal"}, {"sample_id": 2792, "db_id": "election", "score": 0, "gold_sql": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Party, COUNT(Governor) AS Governor_Count FROM party GROUP BY Party ORDER BY Governor_Count DESC", "source_tables": ["party"], "error_info": "Result not equal"}, {"sample_id": 2793, "db_id": "election", "score": 0, "gold_sql": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Party, COUNT(Governor) AS Governor_Count FROM party GROUP BY Party ORDER BY Governor_Count DESC", "source_tables": ["party"], "error_info": "Result not equal"}, {"sample_id": 2794, "db_id": "election", "score": 0, "gold_sql": "SELECT Comptroller, COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Party, COUNT(*) AS Times_Elected FROM party WHERE Comptroller > 0 GROUP BY Party ORDER BY Times_Elected DESC LIMIT 1", "source_tables": ["party"], "error_info": "Result not equal"}, {"sample_id": 2795, "db_id": "election", "score": 0, "gold_sql": "SELECT Comptroller, COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT party.Attorney_General AS Person, COUNT(party.Attorney_General) AS Frequency FROM party GROUP BY party.Attorney_General ORDER BY Frequency DESC", "source_tables": ["party"], "error_info": "Result not equal"}, {"sample_id": 2796, "db_id": "election", "score": 1, "gold_sql": "SELECT Party FROM party WHERE NOT Party_ID IN (SELECT Party FROM election)", "pred_sql": "SELECT DISTINCT p.Party FROM party AS p LEFT JOIN election AS e ON p.Party_ID = e.Party WHERE e.Delegate IS NULL", "source_tables": ["party", "election"], "error_info": ""}, {"sample_id": 2797, "db_id": "election", "score": 0, "gold_sql": "SELECT Party FROM party WHERE NOT Party_ID IN (SELECT Party FROM election)", "pred_sql": "SELECT DISTINCT party.Party_ID FROM party LEFT JOIN election ON party.Party_ID = election.Party WHERE election.Delegate IS NULL", "source_tables": ["party", "election"], "error_info": "Result not equal"}, {"sample_id": 2798, "db_id": "election", "score": 0, "gold_sql": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.Committee = 'Appropriations' INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.Committee = 'Economic Matters'", "pred_sql": "SELECT DISTINCT p.Party FROM party AS p JOIN election AS e ON p.Party_ID = e.Party WHERE e.Committee = 'Appropriations'", "source_tables": ["party", "election"], "error_info": "Result not equal"}, {"sample_id": 2799, "db_id": "election", "score": 0, "gold_sql": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.Committee = 'Appropriations' INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.Committee = 'Economic Matters'", "pred_sql": "SELECT DISTINCT e.Party FROM election AS e WHERE e.Committee IN ('Appropriations', 'Economic Matters') GROUP BY e.Party HAVING COUNT(DISTINCT e.Committee) = 2", "source_tables": ["party", "election"], "error_info": "Result not equal"}, {"sample_id": 2800, "db_id": "election", "score": 0, "gold_sql": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = 'Democratic' INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = 'Liberal'", "pred_sql": "SELECT DISTINCT e.Committee FROM election AS e JOIN party AS p1 ON e.Party = p1.Party_ID JOIN party AS p2 ON e.Party = p2.Party_ID WHERE p1.Party = 'Democratic' AND p2.Party = 'Liberal'", "source_tables": ["party", "election"], "error_info": "Result not equal"}, {"sample_id": 2801, "db_id": "election", "score": 0, "gold_sql": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = 'Democratic' INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = 'Liberal'", "pred_sql": "SELECT DISTINCT e.Committee FROM election AS e JOIN party AS p ON e.Party = p.Party_ID WHERE p.Party IN (SELECT Party_ID FROM party WHERE Party IN ('Democratic', 'Liberal')) GROUP BY e.Committee HAVING COUNT(DISTINCT p.Party) = 2", "source_tables": ["party", "election"], "error_info": "Result not equal"}, {"sample_id": 2802, "db_id": "news_report", "score": 1, "gold_sql": "SELECT COUNT(*) FROM journalist", "pred_sql": "SELECT COUNT(*) AS total_journalists FROM journalist", "source_tables": ["journalist"], "error_info": ""}, {"sample_id": 2803, "db_id": "news_report", "score": 1, "gold_sql": "SELECT Name FROM journalist ORDER BY Years_working ASC", "pred_sql": "SELECT Name FROM journalist ORDER BY Years_working ASC", "source_tables": ["journalist"], "error_info": ""}, {"sample_id": 2804, "db_id": "news_report", "score": 1, "gold_sql": "SELECT Nationality, Age FROM journalist", "pred_sql": "SELECT Nationality, Age FROM journalist", "source_tables": ["journalist"], "error_info": ""}, {"sample_id": 2805, "db_id": "news_report", "score": 1, "gold_sql": "SELECT Name FROM journalist WHERE Nationality = 'England' OR Nationality = 'Wales'", "pred_sql": "SELECT Name FROM journalist WHERE Nationality IN ('England', 'Wales')", "source_tables": ["journalist"], "error_info": ""}, {"sample_id": 2806, "db_id": "news_report", "score": 1, "gold_sql": "SELECT AVG(Years_working) FROM journalist", "pred_sql": "SELECT AVG(Years_working) AS average_years_working FROM journalist", "source_tables": ["journalist"], "error_info": ""}, {"sample_id": 2807, "db_id": "news_report", "score": 1, "gold_sql": "SELECT Nationality FROM journalist ORDER BY Years_working DESC LIMIT 1", "pred_sql": "SELECT Nationality FROM journalist WHERE Years_working = (SELECT MAX(Years_working) FROM journalist)", "source_tables": ["journalist"], "error_info": ""}, {"sample_id": 2808, "db_id": "news_report", "score": 1, "gold_sql": "SELECT Nationality, COUNT(*) FROM journalist GROUP BY Nationality", "pred_sql": "SELECT Nationality, COUNT(*) AS Number_of_Journalists FROM journalist GROUP BY Nationality", "source_tables": ["journalist"], "error_info": ""}, {"sample_id": 2809, "db_id": "news_report", "score": 0, "gold_sql": "SELECT Nationality FROM journalist GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Nationality, COUNT(*) AS Count FROM journalist GROUP BY Nationality ORDER BY Count DESC LIMIT 1", "source_tables": ["journalist"], "error_info": "Result not equal"}, {"sample_id": 2810, "db_id": "news_report", "score": 1, "gold_sql": "SELECT Nationality FROM journalist WHERE Years_working > 10 INTERSECT SELECT Nationality FROM journalist WHERE Years_working < 3", "pred_sql": "SELECT DISTINCT j1.Nationality FROM journalist AS j1 JOIN journalist AS j2 ON j1.Nationality = j2.Nationality WHERE j1.Years_working > 10 AND j2.Years_working < 3", "source_tables": ["journalist"], "error_info": ""}, {"sample_id": 2811, "db_id": "news_report", "score": 1, "gold_sql": "SELECT Date, Name, venue FROM event ORDER BY Event_Attendance DESC", "pred_sql": "SELECT Date, Venue, Name FROM event ORDER BY Event_Attendance DESC", "source_tables": ["event"], "error_info": ""}, {"sample_id": 2812, "db_id": "news_report", "score": 1, "gold_sql": "SELECT T3.Name, T2.Date FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID", "pred_sql": "SELECT journalist.Name, event.Date FROM journalist JOIN news_report ON journalist.journalist_ID = news_report.journalist_ID JOIN event ON news_report.Event_ID = event.Event_ID", "source_tables": ["news_report", "event", "journalist"], "error_info": ""}, {"sample_id": 2813, "db_id": "news_report", "score": 0, "gold_sql": "SELECT T3.Name, T2.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID ORDER BY T2.Event_Attendance ASC", "pred_sql": "SELECT journalist.Name AS Journalist_Name, event.Name AS Event_Name FROM journalist JOIN news_report ON journalist.journalist_ID = news_report.journalist_ID JOIN event ON news_report.Event_ID = event.Event_ID ORDER BY journalist.Name ASC, event.Name ASC", "source_tables": ["news_report", "event", "journalist"], "error_info": "Result not equal"}, {"sample_id": 2814, "db_id": "news_report", "score": 1, "gold_sql": "SELECT T3.Name, COUNT(*) FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID GROUP BY T3.Name", "pred_sql": "SELECT journalist.Name, COUNT(news_report.Event_ID) AS Number_of_Events FROM journalist JOIN news_report ON journalist.journalist_ID = news_report.journalist_ID GROUP BY journalist.journalist_ID", "source_tables": ["news_report", "event", "journalist"], "error_info": ""}, {"sample_id": 2815, "db_id": "news_report", "score": 1, "gold_sql": "SELECT T3.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID GROUP BY T3.Name HAVING COUNT(*) > 1", "pred_sql": "SELECT j.Name FROM journalist AS j JOIN news_report AS nr ON j.journalist_ID = nr.journalist_ID GROUP BY j.journalist_ID HAVING COUNT(nr.Event_ID) > 1", "source_tables": ["news_report", "event", "journalist"], "error_info": ""}, {"sample_id": 2816, "db_id": "news_report", "score": 1, "gold_sql": "SELECT Name FROM journalist WHERE NOT journalist_ID IN (SELECT journalist_ID FROM news_report)", "pred_sql": "SELECT Name FROM journalist WHERE NOT journalist_ID IN (SELECT journalist_ID FROM news_report)", "source_tables": ["news_report", "journalist"], "error_info": ""}, {"sample_id": 2817, "db_id": "news_report", "score": 1, "gold_sql": "SELECT AVG(Event_Attendance), MAX(Event_Attendance) FROM event", "pred_sql": "SELECT AVG(Event_Attendance) AS Average_Attendance, MAX(Event_Attendance) AS Maximum_Attendance FROM event", "source_tables": ["event"], "error_info": ""}, {"sample_id": 2818, "db_id": "news_report", "score": 1, "gold_sql": "SELECT AVG(t1.age), AVG(Years_working), t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type", "pred_sql": "SELECT AVG(Age) AS Average_Age, AVG(Years_working) AS Average_Experience, Work_Type FROM journalist JOIN news_report ON journalist.journalist_ID = news_report.journalist_ID GROUP BY Work_Type", "source_tables": ["news_report", "journalist"], "error_info": ""}, {"sample_id": 2819, "db_id": "news_report", "score": 1, "gold_sql": "SELECT venue, name FROM event ORDER BY Event_Attendance DESC LIMIT 2", "pred_sql": "SELECT Venue, Name FROM event ORDER BY Event_Attendance DESC LIMIT 2", "source_tables": ["event"], "error_info": ""}, {"sample_id": 2820, "db_id": "restaurant_1", "score": 0, "gold_sql": "SELECT ResName FROM Restaurant", "pred_sql": "SELECT * FROM Restaurant", "source_tables": ["restaurant"], "error_info": "Result not equal"}, {"sample_id": 2821, "db_id": "restaurant_1", "score": 1, "gold_sql": "SELECT Address FROM Restaurant WHERE ResName = 'Subway'", "pred_sql": "SELECT Address FROM Restaurant WHERE ResName = 'Subway'", "source_tables": ["restaurant"], "error_info": ""}, {"sample_id": 2822, "db_id": "restaurant_1", "score": 1, "gold_sql": "SELECT Rating FROM Restaurant WHERE ResName = 'Subway'", "pred_sql": "SELECT Rating FROM Restaurant WHERE ResName = 'Subway'", "source_tables": ["restaurant"], "error_info": ""}, {"sample_id": 2823, "db_id": "restaurant_1", "score": 0, "gold_sql": "SELECT ResTypeName FROM Restaurant_Type", "pred_sql": "SELECT ResTypeID, ResTypeName, ResTypeDescription FROM Restaurant_Type", "source_tables": ["restaurant_type"], "error_info": "Result not equal"}, {"sample_id": 2824, "db_id": "restaurant_1", "score": 1, "gold_sql": "SELECT ResTypeDescription FROM Restaurant_Type WHERE ResTypeName = 'Sandwich'", "pred_sql": "SELECT ResTypeDescription FROM Restaurant_Type WHERE ResTypeName = 'Sandwich'", "source_tables": ["restaurant_type"], "error_info": ""}, {"sample_id": 2825, "db_id": "restaurant_1", "score": 0, "gold_sql": "SELECT ResName, Rating FROM Restaurant ORDER BY Rating DESC LIMIT 1", "pred_sql": "SELECT ResName, Rating FROM Restaurant ORDER BY Rating DESC", "source_tables": ["restaurant"], "error_info": "Result not equal"}, {"sample_id": 2826, "db_id": "restaurant_1", "score": 1, "gold_sql": "SELECT Age FROM Student WHERE Fname = 'Linda' AND Lname = 'Smith'", "pred_sql": "SELECT Age FROM Student WHERE Fname = 'Linda' AND LName = 'Smith'", "source_tables": ["student"], "error_info": ""}, {"sample_id": 2827, "db_id": "restaurant_1", "score": 1, "gold_sql": "SELECT Sex FROM Student WHERE Fname = 'Linda' AND Lname = 'Smith'", "pred_sql": "SELECT Sex FROM Student WHERE Fname = 'Linda' AND LName = 'Smith'", "source_tables": ["student"], "error_info": ""}, {"sample_id": 2828, "db_id": "restaurant_1", "score": 1, "gold_sql": "SELECT Fname, Lname FROM Student WHERE Major = 600", "pred_sql": "SELECT Fname, LName FROM Student WHERE Major = '600'", "source_tables": ["student"], "error_info": ""}, {"sample_id": 2829, "db_id": "restaurant_1", "score": 1, "gold_sql": "SELECT city_code FROM Student WHERE Fname = 'Linda' AND Lname = 'Smith'", "pred_sql": "SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith'", "source_tables": ["student"], "error_info": ""}, {"sample_id": 2830, "db_id": "restaurant_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Student WHERE Advisor = 1121", "pred_sql": "SELECT COUNT(*) AS StudentCount FROM Student WHERE Advisor = '1121'", "source_tables": ["student"], "error_info": ""}, {"sample_id": 2831, "db_id": "restaurant_1", "score": 1, "gold_sql": "SELECT Advisor, COUNT(*) FROM Student GROUP BY Advisor ORDER BY COUNT(Advisor) DESC LIMIT 1", "pred_sql": "SELECT Advisor, COUNT(StuID) AS NumberOfStudents FROM Student GROUP BY Advisor ORDER BY NumberOfStudents DESC LIMIT 1", "source_tables": ["student"], "error_info": ""}, {"sample_id": 2832, "db_id": "restaurant_1", "score": 1, "gold_sql": "SELECT Major, COUNT(*) FROM Student GROUP BY Major ORDER BY COUNT(Major) ASC LIMIT 1", "pred_sql": "SELECT Major, COUNT(*) AS NumberOfStudents FROM Student GROUP BY Major ORDER BY NumberOfStudents ASC LIMIT 1", "source_tables": ["student"], "error_info": ""}, {"sample_id": 2833, "db_id": "restaurant_1", "score": 1, "gold_sql": "SELECT Major, COUNT(*) FROM Student GROUP BY Major HAVING COUNT(Major) BETWEEN 2 AND 30", "pred_sql": "SELECT Major, COUNT(*) AS NumberOfStudents FROM Student GROUP BY Major HAVING COUNT(*) BETWEEN 2 AND 30", "source_tables": ["student"], "error_info": ""}, {"sample_id": 2834, "db_id": "restaurant_1", "score": 1, "gold_sql": "SELECT Fname, Lname FROM Student WHERE Age > 18 AND Major = 600", "pred_sql": "SELECT Fname, LName FROM Student WHERE Age > '18' AND Major = '600'", "source_tables": ["student"], "error_info": ""}, {"sample_id": 2835, "db_id": "restaurant_1", "score": 0, "gold_sql": "SELECT Fname, Lname FROM Student WHERE Age > 18 AND Major <> 600 AND Sex = 'F'", "pred_sql": "SELECT Fname, LName FROM Student WHERE Sex = 'Female' AND Age > '18' AND Major <> '600'", "source_tables": ["student"], "error_info": "Result not equal"}, {"sample_id": 2836, "db_id": "restaurant_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Restaurant JOIN Type_Of_Restaurant ON Restaurant.ResID = Type_Of_Restaurant.ResID JOIN Restaurant_Type ON Type_Of_Restaurant.ResTypeID = Restaurant_Type.ResTypeID GROUP BY Type_Of_Restaurant.ResTypeID HAVING Restaurant_Type.ResTypeName = 'Sandwich'", "pred_sql": "SELECT COUNT(*) AS Sandwich_Restaurant_Count FROM Restaurant_Type AS rt JOIN Type_Of_Restaurant AS tor ON rt.ResTypeID = tor.ResTypeID WHERE rt.ResTypeName = 'Sandwich'", "source_tables": ["type_of_restaurant", "restaurant", "restaurant_type"], "error_info": ""}, {"sample_id": 2837, "db_id": "restaurant_1", "score": 1, "gold_sql": "SELECT SUM(Spent) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID WHERE Student.Fname = 'Linda' AND Student.Lname = 'Smith'", "pred_sql": "SELECT SUM(Spent) AS TotalSpent FROM Visits_Restaurant WHERE StuID = (SELECT StuID FROM Student WHERE LName = 'Smith' AND Fname = 'Linda')", "source_tables": ["student", "visits_restaurant"], "error_info": ""}, {"sample_id": 2838, "db_id": "restaurant_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = 'Linda' AND Student.Lname = 'Smith' AND Restaurant.ResName = 'Subway'", "pred_sql": "SELECT COUNT(*) AS VisitCount FROM Visits_Restaurant AS VR JOIN Student AS S ON VR.StuID = S.StuID JOIN Restaurant AS R ON VR.ResID = R.ResID WHERE S.Fname = 'Linda' AND S.LName = 'Smith' AND R.ResName = 'Subway'", "source_tables": ["restaurant", "student", "visits_restaurant"], "error_info": ""}, {"sample_id": 2839, "db_id": "restaurant_1", "score": 1, "gold_sql": "SELECT TIME FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = 'Linda' AND Student.Lname = 'Smith' AND Restaurant.ResName = 'Subway'", "pred_sql": "SELECT Time FROM Visits_Restaurant AS VR JOIN Student AS S ON VR.StuID = S.StuID JOIN Restaurant AS R ON VR.ResID = R.ResID WHERE S.LName = 'Smith' AND S.Fname = 'Linda' AND R.ResName = 'Subway'", "source_tables": ["restaurant", "student", "visits_restaurant"], "error_info": ""}, {"sample_id": 2840, "db_id": "restaurant_1", "score": 0, "gold_sql": "SELECT Restaurant.ResName, SUM(Visits_Restaurant.Spent) FROM Visits_Restaurant JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID GROUP BY Restaurant.ResID ORDER BY SUM(Visits_Restaurant.Spent) ASC LIMIT 1", "pred_sql": "SELECT R.ResName, SUM(V.Time) AS TotalTimeSpent FROM Visits_Restaurant AS V JOIN Restaurant AS R ON V.ResID = R.ResID GROUP BY R.ResName ORDER BY TotalTimeSpent ASC LIMIT 1", "source_tables": ["restaurant", "visits_restaurant"], "error_info": "Result not equal"}, {"sample_id": 2841, "db_id": "restaurant_1", "score": 1, "gold_sql": "SELECT Student.Fname, Student.Lname FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID GROUP BY Student.StuID ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT S.Fname, S.LName FROM Student AS S JOIN Visits_Restaurant AS VR ON S.StuID = VR.StuID GROUP BY S.StuID ORDER BY COUNT(VR.ResID) DESC LIMIT 1", "source_tables": ["student", "visits_restaurant"], "error_info": ""}, {"sample_id": 2842, "db_id": "customer_deliveries", "score": 1, "gold_sql": "SELECT actual_order_id FROM actual_orders WHERE order_status_code = 'Success'", "pred_sql": "SELECT actual_order_id FROM Actual_Orders WHERE order_status_code = 'Success'", "source_tables": ["actual_orders"], "error_info": ""}, {"sample_id": 2843, "db_id": "customer_deliveries", "score": 0, "gold_sql": "SELECT t1.product_name, t1.product_price FROM products AS t1 JOIN regular_order_products AS t2 ON t1.product_id = t2.product_id GROUP BY t2.product_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT p.product_name, p.product_price FROM Products AS p JOIN Actual_Order_Products AS aop ON p.product_id = aop.product_id GROUP BY p.product_id ORDER BY COUNT(aop.actual_order_id) DESC LIMIT 1", "source_tables": ["regular_order_products", "products"], "error_info": "Result not equal"}, {"sample_id": 2844, "db_id": "customer_deliveries", "score": 1, "gold_sql": "SELECT COUNT(*) FROM customers", "pred_sql": "SELECT COUNT(*) AS total_customers FROM Customers", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 2845, "db_id": "customer_deliveries", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT payment_method) FROM customers", "pred_sql": "SELECT COUNT(DISTINCT payment_method) AS different_payment_methods FROM Customers", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 2846, "db_id": "customer_deliveries", "score": 0, "gold_sql": "SELECT truck_details FROM trucks ORDER BY truck_licence_number", "pred_sql": "SELECT * FROM Trucks ORDER BY truck_licence_number", "source_tables": ["trucks"], "error_info": "Result not equal"}, {"sample_id": 2847, "db_id": "customer_deliveries", "score": 1, "gold_sql": "SELECT product_name FROM products ORDER BY product_price DESC LIMIT 1", "pred_sql": "SELECT product_name FROM Products ORDER BY product_price DESC LIMIT 1", "source_tables": ["products"], "error_info": ""}, {"sample_id": 2848, "db_id": "customer_deliveries", "score": 0, "gold_sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = 'California'", "pred_sql": "SELECT customer_name FROM Customers WHERE NOT customer_id IN (SELECT customer_id FROM Customer_Addresses WHERE state_province_county = 'California')", "source_tables": ["addresses", "customers", "customer_addresses"], "error_info": "Predction Execution Error:no such column: state_province_county"}, {"sample_id": 2849, "db_id": "customer_deliveries", "score": 1, "gold_sql": "SELECT customer_email, customer_name FROM customers WHERE payment_method = 'Visa'", "pred_sql": "SELECT customer_name, customer_email FROM Customers WHERE payment_method = 'Visa'", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 2850, "db_id": "customer_deliveries", "score": 1, "gold_sql": "SELECT t1.customer_name, t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = 'California'", "pred_sql": "SELECT customer_name, customer_phone FROM Customers INNER JOIN Customer_Addresses ON Customers.customer_id = Customer_Addresses.customer_id INNER JOIN Addresses ON Customer_Addresses.address_id = Addresses.address_id WHERE Addresses.state_province_county = 'California'", "source_tables": ["addresses", "customers", "customer_addresses"], "error_info": ""}, {"sample_id": 2851, "db_id": "customer_deliveries", "score": 1, "gold_sql": "SELECT state_province_county FROM addresses WHERE NOT address_id IN (SELECT employee_address_id FROM Employees)", "pred_sql": "SELECT DISTINCT state_province_county FROM Addresses WHERE NOT state_province_county IN (SELECT DISTINCT state_province_county FROM Addresses WHERE address_id IN (SELECT employee_address_id FROM Employees))", "source_tables": ["addresses", "employees"], "error_info": ""}, {"sample_id": 2852, "db_id": "customer_deliveries", "score": 1, "gold_sql": "SELECT customer_name, customer_phone, customer_email FROM Customers ORDER BY date_became_customer", "pred_sql": "SELECT customer_name, customer_phone, customer_email FROM Customers ORDER BY date_became_customer", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 2853, "db_id": "customer_deliveries", "score": 0, "gold_sql": "SELECT customer_name FROM Customers ORDER BY date_became_customer LIMIT 5", "pred_sql": "SELECT customer_name FROM Customers LIMIT 5", "source_tables": ["customers"], "error_info": "Result not equal"}, {"sample_id": 2854, "db_id": "customer_deliveries", "score": 0, "gold_sql": "SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT payment_method, COUNT(payment_method) AS frequency FROM Customers GROUP BY payment_method ORDER BY frequency DESC LIMIT 1", "source_tables": ["customers"], "error_info": "Result not equal"}, {"sample_id": 2855, "db_id": "customer_deliveries", "score": 1, "gold_sql": "SELECT route_name FROM Delivery_Routes ORDER BY route_name", "pred_sql": "SELECT route_name FROM Delivery_Routes ORDER BY route_name ASC", "source_tables": ["delivery_routes"], "error_info": ""}, {"sample_id": 2856, "db_id": "customer_deliveries", "score": 0, "gold_sql": "SELECT t1.route_name FROM Delivery_Routes AS t1 JOIN Delivery_Route_Locations AS t2 ON t1.route_id = t2.route_id GROUP BY t1.route_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT route_name FROM Delivery_Routes WHERE route_id = (SELECT route_id FROM Order_Deliveries GROUP BY route_id ORDER BY COUNT(*) DESC LIMIT 1)", "source_tables": ["delivery_route_locations", "delivery_routes"], "error_info": "Predction Execution Error:no such column: route_id"}, {"sample_id": 2857, "db_id": "customer_deliveries", "score": 0, "gold_sql": "SELECT t2.state_province_county, COUNT(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county", "pred_sql": "SELECT state_province_county, COUNT(customer_id) AS number_of_customers FROM Customers JOIN Customer_Addresses ON Customers.customer_id = Customer_Addresses.customer_id JOIN Addresses ON Customer_Addresses.address_id = Addresses.address_id GROUP BY state_province_county", "source_tables": ["addresses", "customer_addresses"], "error_info": "Predction Execution Error:ambiguous column name: customer_id"}, {"sample_id": 2858, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM authors", "pred_sql": "SELECT COUNT(*) AS author_count FROM Authors", "source_tables": ["authors"], "error_info": ""}, {"sample_id": 2859, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM authors", "pred_sql": "SELECT COUNT(*) AS author_count FROM Authors", "source_tables": ["authors"], "error_info": ""}, {"sample_id": 2860, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM inst", "pred_sql": "SELECT COUNT(*) AS institution_count FROM Inst", "source_tables": ["inst"], "error_info": ""}, {"sample_id": 2861, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM inst", "pred_sql": "SELECT COUNT(*) AS institution_count FROM Inst", "source_tables": ["inst"], "error_info": ""}, {"sample_id": 2862, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM papers", "pred_sql": "SELECT COUNT(*) AS total_papers FROM Papers", "source_tables": ["papers"], "error_info": ""}, {"sample_id": 2863, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM papers", "pred_sql": "SELECT COUNT(*) AS total_papers FROM Papers", "source_tables": ["papers"], "error_info": ""}, {"sample_id": 2864, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = 'Jeremy' AND t1.lname = 'Gibbons'", "pred_sql": "SELECT Papers.title FROM Papers JOIN Authorship ON Papers.paperID = Authorship.paperID JOIN Authors ON Authorship.authID = Authors.authID WHERE Authors.fname = 'Jeremy' AND Authors.lname = 'Gibbons'", "source_tables": ["papers", "authorship", "authors"], "error_info": ""}, {"sample_id": 2865, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = 'Jeremy' AND t1.lname = 'Gibbons'", "pred_sql": "SELECT Papers.title FROM Papers JOIN Authorship ON Papers.paperID = Authorship.paperID JOIN Authors ON Authorship.authID = Authors.authID WHERE Authors.fname = 'Jeremy' AND Authors.lname = 'Gibbons'", "source_tables": ["papers", "authorship", "authors"], "error_info": ""}, {"sample_id": 2866, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = 'Aaron' AND t1.lname = 'Turon'", "pred_sql": "SELECT Papers.title FROM Papers JOIN Authorship ON Papers.paperID = Authorship.paperID JOIN Authors ON Authorship.authID = Authors.authID WHERE Authors.fname = 'Aaron' AND Authors.lname = 'Turon'", "source_tables": ["papers", "authorship", "authors"], "error_info": ""}, {"sample_id": 2867, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = 'Aaron' AND t1.lname = 'Turon'", "pred_sql": "SELECT Papers.title FROM Papers JOIN Authorship ON Papers.paperID = Authorship.paperID JOIN Authors ON Authorship.authID = Authors.authID WHERE Authors.fname = 'Aaron' AND Authors.lname = 'Turon'", "source_tables": ["papers", "authorship", "authors"], "error_info": ""}, {"sample_id": 2868, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = 'Atsushi' AND t1.lname = 'Ohori'", "pred_sql": "SELECT COUNT(*) AS paper_count FROM Papers AS p JOIN Authorship AS a ON p.paperID = a.paperID JOIN Authors AS au ON a.authID = au.authID WHERE au.fname = 'Atsushi' AND au.lname = 'Ohori'", "source_tables": ["papers", "authorship", "authors"], "error_info": ""}, {"sample_id": 2869, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = 'Atsushi' AND t1.lname = 'Ohori'", "pred_sql": "SELECT COUNT(*) AS paper_count FROM Authorship JOIN Authors ON Authorship.authID = Authors.authID WHERE Authors.fname = 'Atsushi' AND Authors.lname = 'Ohori'", "source_tables": ["papers", "authorship", "authors"], "error_info": ""}, {"sample_id": 2870, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t1.fname = 'Matthias' AND t1.lname = 'Blume'", "pred_sql": "SELECT Inst.name FROM Inst JOIN Authorship ON Inst.instID = Authorship.instID JOIN Authors ON Authorship.authID = Authors.authID WHERE Authors.fname = 'Matthias' AND Authors.lname = 'Blume'", "source_tables": ["inst", "authorship", "authors"], "error_info": ""}, {"sample_id": 2871, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t1.fname = 'Matthias' AND t1.lname = 'Blume'", "pred_sql": "SELECT Inst.name FROM Inst JOIN Authorship ON Inst.instID = Authorship.instID JOIN Authors ON Authorship.authID = Authors.authID WHERE Authors.fname = 'Matthias' AND Authors.lname = 'Blume'", "source_tables": ["inst", "authorship", "authors"], "error_info": ""}, {"sample_id": 2872, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t1.fname = 'Katsuhiro' AND t1.lname = 'Ueno'", "pred_sql": "SELECT Inst.name FROM Inst JOIN Authorship ON Inst.instID = Authorship.instID JOIN Authors ON Authorship.authID = Authors.authID WHERE Authors.fname = 'Katsuhiro' AND Authors.lname = 'Ueno'", "source_tables": ["inst", "authorship", "authors"], "error_info": ""}, {"sample_id": 2873, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t1.fname = 'Katsuhiro' AND t1.lname = 'Ueno'", "pred_sql": "SELECT Inst.name FROM Inst JOIN Authorship ON Inst.instID = Authorship.instID JOIN Authors ON Authorship.authID = Authors.authID WHERE Authors.fname = 'Katsuhiro' AND Authors.lname = 'Ueno'", "source_tables": ["inst", "authorship", "authors"], "error_info": ""}, {"sample_id": 2874, "db_id": "icfp_1", "score": 0, "gold_sql": "SELECT DISTINCT t1.fname, t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = 'University of Oxford'", "pred_sql": "SELECT Authors.fname, Authors.lname FROM Authors JOIN Authorship ON Authors.authID = Authorship.authID JOIN Inst ON Authorship.instID = Inst.instID WHERE Inst.name = 'University of Oxford'", "source_tables": ["inst", "authorship", "authors"], "error_info": "Result not equal"}, {"sample_id": 2875, "db_id": "icfp_1", "score": 0, "gold_sql": "SELECT DISTINCT t1.fname, t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = 'University of Oxford'", "pred_sql": "SELECT Authors.fname, Authors.lname FROM Authors JOIN Authorship ON Authors.authID = Authorship.authID JOIN Inst ON Authorship.instID = Inst.instID WHERE Inst.name = 'University of Oxford'", "source_tables": ["inst", "authorship", "authors"], "error_info": "Result not equal"}, {"sample_id": 2876, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT DISTINCT t1.fname, t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = 'Google'", "pred_sql": "SELECT Authors.fname, Authors.lname FROM Authors JOIN Authorship ON Authors.authID = Authorship.authID JOIN Inst ON Authorship.instID = Inst.instID WHERE Inst.name = 'Google'", "source_tables": ["inst", "authorship", "authors"], "error_info": ""}, {"sample_id": 2877, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT DISTINCT t1.fname, t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = 'Google'", "pred_sql": "SELECT Authors.fname, Authors.lname FROM Authors JOIN Authorship ON Authors.authID = Authorship.authID JOIN Inst ON Authorship.instID = Inst.instID WHERE Inst.name = 'Google'", "source_tables": ["inst", "authorship", "authors"], "error_info": ""}, {"sample_id": 2878, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title = 'Binders Unbound'", "pred_sql": "SELECT Authors.lname FROM Authors JOIN Authorship ON Authors.authID = Authorship.authID JOIN Papers ON Authorship.paperID = Papers.paperID WHERE Papers.title = 'Binders Unbound'", "source_tables": ["papers", "authorship", "authors"], "error_info": ""}, {"sample_id": 2879, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title = 'Binders Unbound'", "pred_sql": "SELECT Authors.lname FROM Authors JOIN Authorship ON Authors.authID = Authorship.authID JOIN Papers ON Authorship.paperID = Papers.paperID WHERE Papers.title = 'Binders Unbound'", "source_tables": ["papers", "authorship", "authors"], "error_info": ""}, {"sample_id": 2880, "db_id": "icfp_1", "score": 0, "gold_sql": "SELECT t1.fname, t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title = 'Nameless ,  Painless'", "pred_sql": "SELECT Authors.fname, Authors.lname FROM Authors JOIN Authorship ON Authors.authID = Authorship.authID JOIN Papers ON Authorship.paperID = Papers.paperID WHERE Papers.title = 'Nameless, Painless'", "source_tables": ["papers", "authorship", "authors"], "error_info": "Result not equal"}, {"sample_id": 2881, "db_id": "icfp_1", "score": 0, "gold_sql": "SELECT t1.fname, t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title = 'Nameless ,  Painless'", "pred_sql": "SELECT Authors.fname, Authors.lname FROM Authors JOIN Authorship ON Authors.authID = Authorship.authID JOIN Papers ON Authorship.paperID = Papers.paperID WHERE Papers.title = 'Nameless, Painless'", "source_tables": ["papers", "authorship", "authors"], "error_info": "Result not equal"}, {"sample_id": 2882, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = 'Indiana University'", "pred_sql": "SELECT Papers.title FROM Papers JOIN Authorship ON Papers.paperID = Authorship.paperID JOIN Inst ON Authorship.instID = Inst.instID WHERE Inst.name = 'Indiana University'", "source_tables": ["inst", "papers", "authorship"], "error_info": ""}, {"sample_id": 2883, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = 'Indiana University'", "pred_sql": "SELECT Papers.title FROM Papers JOIN Authorship ON Papers.paperID = Authorship.paperID JOIN Inst ON Authorship.instID = Inst.instID WHERE Inst.name = 'Indiana University'", "source_tables": ["inst", "papers", "authorship"], "error_info": ""}, {"sample_id": 2884, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = 'Google'", "pred_sql": "SELECT Papers.title FROM Papers JOIN Authorship ON Papers.paperID = Authorship.paperID JOIN Inst ON Authorship.instID = Inst.instID WHERE Inst.name = 'Google'", "source_tables": ["inst", "papers", "authorship"], "error_info": ""}, {"sample_id": 2885, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = 'Google'", "pred_sql": "SELECT Papers.title FROM Papers JOIN Authorship ON Papers.paperID = Authorship.paperID JOIN Inst ON Authorship.instID = Inst.instID WHERE Inst.name = 'Google'", "source_tables": ["inst", "papers", "authorship"], "error_info": ""}, {"sample_id": 2886, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = 'Tokohu University'", "pred_sql": "SELECT COUNT(Papers.paperID) AS paper_count FROM Papers JOIN Authorship ON Papers.paperID = Authorship.paperID JOIN Inst ON Authorship.instID = Inst.instID WHERE Inst.name = 'Tokohu University'", "source_tables": ["inst", "papers", "authorship"], "error_info": ""}, {"sample_id": 2887, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = 'Tokohu University'", "pred_sql": "SELECT COUNT(Papers.paperID) AS number_of_papers FROM Papers JOIN Authorship ON Papers.paperID = Authorship.paperID JOIN Inst ON Authorship.instID = Inst.instID WHERE Inst.name = 'Tokohu University'", "source_tables": ["inst", "papers", "authorship"], "error_info": ""}, {"sample_id": 2888, "db_id": "icfp_1", "score": 0, "gold_sql": "SELECT COUNT(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = 'University of Pennsylvania'", "pred_sql": "SELECT COUNT(Papers.paperID) AS number_of_papers FROM Authorship JOIN Inst ON Authorship.instID = Inst.instID JOIN Papers ON Authorship.paperID = Papers.paperID WHERE Inst.name = 'University of Pennsylvania'", "source_tables": ["inst", "papers", "authorship"], "error_info": "Result not equal"}, {"sample_id": 2889, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = 'University of Pennsylvania'", "pred_sql": "SELECT COUNT(DISTINCT Papers.paperID) AS paper_count FROM Authorship JOIN Inst ON Authorship.instID = Inst.instID JOIN Papers ON Authorship.paperID = Papers.paperID WHERE Inst.name = 'University of Pennsylvania'", "source_tables": ["inst", "papers", "authorship"], "error_info": ""}, {"sample_id": 2890, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = 'Olin' AND t1.lname = 'Shivers'", "pred_sql": "SELECT Papers.title FROM Papers JOIN Authorship ON Papers.paperID = Authorship.paperID JOIN Authors ON Authorship.authID = Authors.authID WHERE Authors.fname = 'Olin' AND Authors.lname = 'Shivers'", "source_tables": ["papers", "authorship", "authors"], "error_info": ""}, {"sample_id": 2891, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = 'Olin' AND t1.lname = 'Shivers'", "pred_sql": "SELECT Papers.title FROM Papers JOIN Authorship ON Papers.paperID = Authorship.paperID JOIN Authors ON Authorship.authID = Authors.authID WHERE Authors.fname = 'Olin' AND Authors.lname = 'Shivers'", "source_tables": ["papers", "authorship", "authors"], "error_info": ""}, {"sample_id": 2892, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = 'Stephanie' AND t1.lname = 'Weirich'", "pred_sql": "SELECT Papers.title FROM Papers JOIN Authorship ON Papers.paperID = Authorship.paperID JOIN Authors ON Authorship.authID = Authors.authID WHERE Authors.fname = 'Stephanie' AND Authors.lname = 'Weirich'", "source_tables": ["papers", "authorship", "authors"], "error_info": ""}, {"sample_id": 2893, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = 'Stephanie' AND t1.lname = 'Weirich'", "pred_sql": "SELECT Papers.title FROM Papers JOIN Authorship ON Papers.paperID = Authorship.paperID JOIN Authors ON Authorship.authID = Authors.authID WHERE Authors.fname = 'Stephanie' AND Authors.lname = 'Weirich'", "source_tables": ["papers", "authorship", "authors"], "error_info": ""}, {"sample_id": 2894, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid JOIN inst AS t4 ON t2.instid = t4.instid WHERE t4.country = 'USA' AND t2.authorder = 2 AND t1.lname = 'Turon'", "pred_sql": "SELECT Papers.title FROM Papers JOIN Authorship ON Papers.paperID = Authorship.paperID JOIN Inst ON Authorship.instID = Inst.instID JOIN Authors ON Authorship.authID = Authors.authID WHERE Inst.country = 'USA' AND Authorship.authOrder = '2' AND Authors.lname = 'Turon'", "source_tables": ["inst", "papers", "authorship", "authors"], "error_info": ""}, {"sample_id": 2895, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid JOIN inst AS t4 ON t2.instid = t4.instid WHERE t4.country = 'USA' AND t2.authorder = 2 AND t1.lname = 'Turon'", "pred_sql": "SELECT P.title FROM Papers AS P JOIN Authorship AS A1 ON P.paperID = A1.paperID JOIN Authors AS Au1 ON A1.authID = Au1.authID JOIN Authorship AS A2 ON P.paperID = A2.paperID JOIN Authors AS Au2 ON A2.authID = Au2.authID JOIN Inst AS I ON A2.instID = I.instID WHERE A1.authOrder = '2' AND Au2.lname = 'Turon' AND I.country = 'USA'", "source_tables": ["inst", "papers", "authorship", "authors"], "error_info": ""}, {"sample_id": 2896, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid JOIN inst AS t4 ON t2.instid = t4.instid WHERE t4.country = 'Japan' AND t2.authorder = 1 AND t1.lname = 'Ohori'", "pred_sql": "SELECT Papers.title FROM Papers JOIN Authorship ON Papers.paperID = Authorship.paperID JOIN Authors ON Authorship.authID = Authors.authID JOIN Inst ON Authorship.instID = Inst.instID WHERE Inst.country = 'Japan' AND Authors.lname = 'Ohori' AND Authorship.authOrder = '1'", "source_tables": ["inst", "papers", "authorship", "authors"], "error_info": ""}, {"sample_id": 2897, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid JOIN inst AS t4 ON t2.instid = t4.instid WHERE t4.country = 'Japan' AND t2.authorder = 1 AND t1.lname = 'Ohori'", "pred_sql": "SELECT Papers.title FROM Papers JOIN Authorship ON Papers.paperID = Authorship.paperID JOIN Authors ON Authorship.authID = Authors.authID JOIN Inst ON Authorship.instID = Inst.instID WHERE Authorship.authOrder = '1' AND Inst.country = 'Japan' AND Authors.lname = 'Ohori'", "source_tables": ["inst", "papers", "authorship", "authors"], "error_info": ""}, {"sample_id": 2898, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.fname, t1.lname ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT lname FROM Authors WHERE authID = (SELECT authID FROM Authorship GROUP BY authID ORDER BY COUNT(paperID) DESC LIMIT 1)", "source_tables": ["papers", "authorship", "authors"], "error_info": ""}, {"sample_id": 2899, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.fname, t1.lname ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Authors.lname FROM Authors JOIN Authorship ON Authors.authID = Authorship.authID GROUP BY Authors.authID ORDER BY COUNT(Authorship.paperID) DESC LIMIT 1", "source_tables": ["papers", "authorship", "authors"], "error_info": ""}, {"sample_id": 2900, "db_id": "icfp_1", "score": 0, "gold_sql": "SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.country ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Inst.country, COUNT(Papers.paperID) AS paper_count FROM Inst JOIN Authorship ON Inst.instID = Authorship.instID JOIN Papers ON Authorship.paperID = Papers.paperID GROUP BY Inst.country ORDER BY paper_count DESC LIMIT 1", "source_tables": ["inst", "papers", "authorship"], "error_info": "Result not equal"}, {"sample_id": 2901, "db_id": "icfp_1", "score": 0, "gold_sql": "SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.country ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Inst.country, COUNT(Papers.paperID) AS paper_count FROM Authorship JOIN Inst ON Authorship.instID = Inst.instID JOIN Papers ON Authorship.paperID = Papers.paperID GROUP BY Inst.country ORDER BY paper_count DESC LIMIT 1", "source_tables": ["inst", "papers", "authorship"], "error_info": "Result not equal"}, {"sample_id": 2902, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.name ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Inst.name FROM Inst JOIN Authorship ON Inst.instID = Authorship.instID JOIN Papers ON Authorship.paperID = Papers.paperID GROUP BY Inst.instID ORDER BY COUNT(Papers.paperID) DESC LIMIT 1", "source_tables": ["inst", "papers", "authorship"], "error_info": ""}, {"sample_id": 2903, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.name ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Inst.name FROM Inst JOIN Authorship ON Inst.instID = Authorship.instID JOIN Papers ON Authorship.paperID = Papers.paperID GROUP BY Inst.instID ORDER BY COUNT(Papers.paperID) DESC LIMIT 1", "source_tables": ["inst", "papers", "authorship"], "error_info": ""}, {"sample_id": 2904, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT title FROM papers WHERE title LIKE '%ML%'", "pred_sql": "SELECT title FROM Papers WHERE title LIKE '%ML%'", "source_tables": ["papers"], "error_info": ""}, {"sample_id": 2905, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT title FROM papers WHERE title LIKE '%ML%'", "pred_sql": "SELECT title FROM Papers WHERE title LIKE '%ML%'", "source_tables": ["papers"], "error_info": ""}, {"sample_id": 2906, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT title FROM papers WHERE title LIKE '%Database%'", "pred_sql": "SELECT title FROM Papers WHERE title LIKE '%Database%'", "source_tables": ["papers"], "error_info": ""}, {"sample_id": 2907, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT title FROM papers WHERE title LIKE '%Database%'", "pred_sql": "SELECT title FROM Papers WHERE title LIKE '%Database%'", "source_tables": ["papers"], "error_info": ""}, {"sample_id": 2908, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title LIKE '%Functional%'", "pred_sql": "SELECT Authors.fname FROM Authors JOIN Authorship ON Authors.authID = Authorship.authID JOIN Papers ON Authorship.paperID = Papers.paperID WHERE Papers.title LIKE '%Functional%'", "source_tables": ["papers", "authorship", "authors"], "error_info": ""}, {"sample_id": 2909, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title LIKE '%Functional%'", "pred_sql": "SELECT Authors.fname FROM Authors JOIN Authorship ON Authors.authID = Authorship.authID JOIN Papers ON Authorship.paperID = Papers.paperID WHERE Papers.title LIKE '%Functional%'", "source_tables": ["papers", "authorship", "authors"], "error_info": ""}, {"sample_id": 2910, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title LIKE '%Monadic%'", "pred_sql": "SELECT DISTINCT Authors.lname FROM Authors JOIN Authorship ON Authors.authID = Authorship.authID JOIN Papers ON Authorship.paperID = Papers.paperID WHERE Papers.title LIKE '%Monadic%'", "source_tables": ["papers", "authorship", "authors"], "error_info": ""}, {"sample_id": 2911, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title LIKE '%Monadic%'", "pred_sql": "SELECT DISTINCT Authors.lname FROM Authors JOIN Authorship ON Authors.authID = Authorship.authID JOIN Papers ON Authorship.paperID = Papers.paperID WHERE Papers.title LIKE '%Monadic%'", "source_tables": ["papers", "authorship", "authors"], "error_info": ""}, {"sample_id": 2912, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid = t2.paperid WHERE t1.authorder = (SELECT MAX(authorder) FROM authorship)", "pred_sql": "SELECT title FROM Papers WHERE paperID = (SELECT paperID FROM Authorship GROUP BY paperID ORDER BY COUNT(authID) DESC LIMIT 1)", "source_tables": ["papers", "authorship"], "error_info": ""}, {"sample_id": 2913, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid = t2.paperid WHERE t1.authorder = (SELECT MAX(authorder) FROM authorship)", "pred_sql": "SELECT title FROM Papers WHERE paperID IN (SELECT paperID FROM Authorship GROUP BY paperID ORDER BY COUNT(authID) DESC LIMIT 1)", "source_tables": ["papers", "authorship"], "error_info": ""}, {"sample_id": 2914, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT fname FROM authors WHERE lname = 'Ueno'", "pred_sql": "SELECT fname FROM Authors WHERE lname = 'Ueno' LIMIT 1", "source_tables": ["authors"], "error_info": ""}, {"sample_id": 2915, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT fname FROM authors WHERE lname = 'Ueno'", "pred_sql": "SELECT fname FROM Authors WHERE lname = 'Ueno'", "source_tables": ["authors"], "error_info": ""}, {"sample_id": 2916, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT lname FROM authors WHERE fname = 'Amal'", "pred_sql": "SELECT lname FROM Authors WHERE fname = 'Amal'", "source_tables": ["authors"], "error_info": ""}, {"sample_id": 2917, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT lname FROM authors WHERE fname = 'Amal'", "pred_sql": "SELECT lname FROM Authors WHERE fname = 'Amal'", "source_tables": ["authors"], "error_info": ""}, {"sample_id": 2918, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT fname FROM authors ORDER BY fname", "pred_sql": "SELECT fname FROM Authors ORDER BY fname ASC", "source_tables": ["authors"], "error_info": ""}, {"sample_id": 2919, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT fname FROM authors ORDER BY fname", "pred_sql": "SELECT fname FROM Authors ORDER BY fname ASC", "source_tables": ["authors"], "error_info": ""}, {"sample_id": 2920, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT lname FROM authors ORDER BY lname", "pred_sql": "SELECT lname FROM Authors ORDER BY lname ASC", "source_tables": ["authors"], "error_info": ""}, {"sample_id": 2921, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT lname FROM authors ORDER BY lname", "pred_sql": "SELECT lname FROM Authors ORDER BY lname ASC", "source_tables": ["authors"], "error_info": ""}, {"sample_id": 2922, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT fname, lname FROM authors ORDER BY lname", "pred_sql": "SELECT fname, lname FROM Authors ORDER BY lname ASC", "source_tables": ["authors"], "error_info": ""}, {"sample_id": 2923, "db_id": "icfp_1", "score": 1, "gold_sql": "SELECT fname, lname FROM authors ORDER BY lname", "pred_sql": "SELECT fname, lname FROM Authors ORDER BY lname ASC", "source_tables": ["authors"], "error_info": ""}, {"sample_id": 2924, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT last_name) FROM actor", "pred_sql": "SELECT COUNT(DISTINCT last_name) AS different_last_names FROM actor", "source_tables": ["actor"], "error_info": ""}, {"sample_id": 2925, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT last_name) FROM actor", "pred_sql": "SELECT COUNT(DISTINCT last_name) AS unique_last_names_count FROM actor", "source_tables": ["actor"], "error_info": ""}, {"sample_id": 2926, "db_id": "sakila_1", "score": 0, "gold_sql": "SELECT first_name FROM actor GROUP BY first_name ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT first_name, COUNT(*) AS name_count FROM actor GROUP BY first_name ORDER BY name_count DESC LIMIT 1", "source_tables": ["actor"], "error_info": "Result not equal"}, {"sample_id": 2927, "db_id": "sakila_1", "score": 0, "gold_sql": "SELECT first_name FROM actor GROUP BY first_name ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT first_name, COUNT(first_name) AS name_count FROM actor GROUP BY first_name ORDER BY name_count DESC LIMIT 1", "source_tables": ["actor"], "error_info": "Result not equal"}, {"sample_id": 2928, "db_id": "sakila_1", "score": 0, "gold_sql": "SELECT first_name, last_name FROM actor GROUP BY first_name, last_name ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT CONCAT(first_name, ' ', last_name) AS full_name, COUNT(*) AS popularity FROM actor JOIN film_actor ON actor.actor_id = film_actor.actor_id JOIN film ON film_actor.film_id = film.film_id GROUP BY full_name ORDER BY popularity DESC LIMIT 1", "source_tables": ["actor"], "error_info": "Predction Execution Error:no such function: CONCAT"}, {"sample_id": 2929, "db_id": "sakila_1", "score": 0, "gold_sql": "SELECT first_name, last_name FROM actor GROUP BY first_name, last_name ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT first_name || ' ' || last_name AS full_name, COUNT(*) AS name_count FROM actor GROUP BY full_name ORDER BY name_count DESC LIMIT 1", "source_tables": ["actor"], "error_info": "Result not equal"}, {"sample_id": 2930, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT district FROM address GROUP BY district HAVING COUNT(*) >= 2", "pred_sql": "SELECT district FROM address GROUP BY district HAVING COUNT(address_id) >= 2", "source_tables": ["address"], "error_info": ""}, {"sample_id": 2931, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT district FROM address GROUP BY district HAVING COUNT(*) >= 2", "pred_sql": "SELECT district FROM address GROUP BY district HAVING COUNT(address_id) >= 2", "source_tables": ["address"], "error_info": ""}, {"sample_id": 2932, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT phone, postal_code FROM address WHERE address = '1031 Daugavpils Parkway'", "pred_sql": "SELECT phone, postal_code FROM address WHERE address = '1031 Daugavpils Parkway'", "source_tables": ["address"], "error_info": ""}, {"sample_id": 2933, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT phone, postal_code FROM address WHERE address = '1031 Daugavpils Parkway'", "pred_sql": "SELECT phone, postal_code FROM address WHERE address = '1031 Daugavpils Parkway'", "source_tables": ["address"], "error_info": ""}, {"sample_id": 2934, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT T2.city, COUNT(*), T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id GROUP BY T1.city_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT city.city, COUNT(address.address_id) AS number_of_addresses, city.city_id FROM city JOIN address ON city.city_id = address.city_id GROUP BY city.city_id ORDER BY number_of_addresses DESC LIMIT 1", "source_tables": ["city", "address"], "error_info": ""}, {"sample_id": 2935, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT T2.city, COUNT(*), T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id GROUP BY T1.city_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT city.city, city.city_id, COUNT(address.address_id) AS address_count FROM city JOIN address ON city.city_id = address.city_id GROUP BY city.city_id ORDER BY address_count DESC LIMIT 1", "source_tables": ["city", "address"], "error_info": ""}, {"sample_id": 2936, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM address WHERE district = 'California'", "pred_sql": "SELECT COUNT(*) AS address_count FROM address WHERE district = 'California'", "source_tables": ["address"], "error_info": ""}, {"sample_id": 2937, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM address WHERE district = 'California'", "pred_sql": "SELECT COUNT(*) AS address_count FROM address WHERE district = 'California'", "source_tables": ["address"], "error_info": ""}, {"sample_id": 2938, "db_id": "sakila_1", "score": 0, "gold_sql": "SELECT title, film_id FROM film WHERE rental_rate = 0.99 INTERSECT SELECT T1.title, T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id GROUP BY T1.film_id HAVING COUNT(*) < 3", "pred_sql": "SELECT f.title, f.film_id FROM film AS f JOIN inventory AS i ON f.film_id = i.film_id WHERE f.rental_rate = 0.99 AND i.store_id IN (SELECT store_id FROM inventory GROUP BY film_id HAVING COUNT(*) < 3)", "source_tables": ["inventory", "film"], "error_info": "Result not equal"}, {"sample_id": 2939, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT title, film_id FROM film WHERE rental_rate = 0.99 INTERSECT SELECT T1.title, T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id GROUP BY T1.film_id HAVING COUNT(*) < 3", "pred_sql": "SELECT f.title, f.film_id FROM film AS f JOIN inventory AS i ON f.film_id = i.film_id WHERE f.rental_rate = 0.99 GROUP BY f.film_id HAVING COUNT(i.inventory_id) < 3", "source_tables": ["inventory", "film"], "error_info": ""}, {"sample_id": 2940, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id = T2.country_id WHERE T2.country = 'Australia'", "pred_sql": "SELECT COUNT(*) AS city_count FROM city WHERE country_id = (SELECT country_id FROM country WHERE country = 'Australia')", "source_tables": ["country", "city"], "error_info": ""}, {"sample_id": 2941, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id = T2.country_id WHERE T2.country = 'Australia'", "pred_sql": "SELECT COUNT(*) AS city_count FROM city WHERE country_id = (SELECT country_id FROM country WHERE country = 'Australia')", "source_tables": ["country", "city"], "error_info": ""}, {"sample_id": 2942, "db_id": "sakila_1", "score": 0, "gold_sql": "SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id = T2.country_id GROUP BY T2.country_id HAVING COUNT(*) >= 3", "pred_sql": "SELECT country.country_id, country.country FROM country JOIN city ON country.country_id = city.country_id GROUP BY country.country_id, country.country HAVING COUNT(city.city_id) >= 3", "source_tables": ["country", "city"], "error_info": "Result not equal"}, {"sample_id": 2943, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id = T2.country_id GROUP BY T2.country_id HAVING COUNT(*) >= 3", "pred_sql": "SELECT country.country FROM country JOIN city ON country.country_id = city.country_id GROUP BY country.country_id HAVING COUNT(city.city_id) >= 3", "source_tables": ["country", "city"], "error_info": ""}, {"sample_id": 2944, "db_id": "sakila_1", "score": 0, "gold_sql": "SELECT payment_date FROM payment WHERE amount > 10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Elsa'", "pred_sql": "SELECT payment_date FROM payment JOIN staff ON payment.staff_id = staff.staff_id WHERE amount > 10 AND staff.first_name = 'Elsa'", "source_tables": ["staff", "payment"], "error_info": "Result not equal"}, {"sample_id": 2945, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT payment_date FROM payment WHERE amount > 10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Elsa'", "pred_sql": "SELECT payment_date FROM payment WHERE amount > 10 OR staff_id IN (SELECT staff_id FROM staff WHERE first_name = 'Elsa')", "source_tables": ["staff", "payment"], "error_info": ""}, {"sample_id": 2946, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM customer WHERE active = '1'", "pred_sql": "SELECT COUNT(*) AS active_customer_count FROM customer WHERE active = 1", "source_tables": ["customer"], "error_info": ""}, {"sample_id": 2947, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM customer WHERE active = '1'", "pred_sql": "SELECT COUNT(*) AS active_customer_count FROM customer WHERE active = 1", "source_tables": ["customer"], "error_info": ""}, {"sample_id": 2948, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT title, rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1", "pred_sql": "SELECT title, rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1", "source_tables": ["film"], "error_info": ""}, {"sample_id": 2949, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT title, rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1", "pred_sql": "SELECT title, rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1", "source_tables": ["film"], "error_info": ""}, {"sample_id": 2950, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT T2.title, T2.film_id, T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T2.film_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT f.title, f.film_id, f.description FROM film AS f JOIN film_actor AS fa ON f.film_id = fa.film_id GROUP BY f.film_id ORDER BY COUNT(fa.actor_id) DESC LIMIT 1", "source_tables": ["film_actor", "film"], "error_info": ""}, {"sample_id": 2951, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT T2.title, T2.film_id, T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T2.film_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT f.title, f.film_id, f.description FROM film AS f JOIN film_actor AS fa ON f.film_id = fa.film_id GROUP BY f.film_id ORDER BY COUNT(fa.actor_id) DESC LIMIT 1", "source_tables": ["film_actor", "film"], "error_info": ""}, {"sample_id": 2952, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT T2.first_name, T2.last_name, T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT a.first_name, a.last_name, a.actor_id FROM actor AS a JOIN film_actor AS fa ON a.actor_id = fa.actor_id GROUP BY a.actor_id ORDER BY COUNT(fa.film_id) DESC LIMIT 1", "source_tables": ["film_actor", "actor"], "error_info": ""}, {"sample_id": 2953, "db_id": "sakila_1", "score": 0, "gold_sql": "SELECT T2.first_name, T2.last_name, T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT a.actor_id, (a.first_name || ' ' || a.last_name) AS full_name FROM actor AS a JOIN film_actor AS fa ON a.actor_id = fa.actor_id GROUP BY a.actor_id ORDER BY COUNT(fa.film_id) DESC LIMIT 1", "source_tables": ["film_actor", "actor"], "error_info": "Result not equal"}, {"sample_id": 2954, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT T2.first_name, T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id HAVING COUNT(*) > 30", "pred_sql": "SELECT a.first_name, a.last_name FROM actor AS a JOIN film_actor AS fa ON a.actor_id = fa.actor_id GROUP BY a.actor_id HAVING COUNT(fa.film_id) > 30", "source_tables": ["film_actor", "actor"], "error_info": ""}, {"sample_id": 2955, "db_id": "sakila_1", "score": 0, "gold_sql": "SELECT T2.first_name, T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id HAVING COUNT(*) > 30", "pred_sql": "SELECT a.first_name || ' ' || a.last_name AS full_name FROM actor AS a JOIN film_actor AS fa ON a.actor_id = fa.actor_id GROUP BY a.actor_id HAVING COUNT(fa.film_id) > 30", "source_tables": ["film_actor", "actor"], "error_info": "Result not equal"}, {"sample_id": 2956, "db_id": "sakila_1", "score": 0, "gold_sql": "SELECT store_id FROM inventory GROUP BY store_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT store.store_id, COUNT(inventory.inventory_id) AS item_count FROM store JOIN inventory ON store.store_id = inventory.store_id GROUP BY store.store_id ORDER BY item_count DESC LIMIT 1", "source_tables": ["inventory"], "error_info": "Result not equal"}, {"sample_id": 2957, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT store_id FROM inventory GROUP BY store_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT store_id FROM inventory GROUP BY store_id ORDER BY COUNT(inventory_id) DESC LIMIT 1", "source_tables": ["inventory"], "error_info": ""}, {"sample_id": 2958, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT SUM(amount) FROM payment", "pred_sql": "SELECT SUM(amount) AS total_amount FROM payment", "source_tables": ["payment"], "error_info": ""}, {"sample_id": 2959, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT SUM(amount) FROM payment", "pred_sql": "SELECT SUM(amount) AS total_payment FROM payment", "source_tables": ["payment"], "error_info": ""}, {"sample_id": 2960, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT T1.first_name, T1.last_name, T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY SUM(amount) ASC LIMIT 1", "pred_sql": "SELECT c.first_name, c.last_name, c.customer_id FROM customer AS c JOIN payment AS p ON c.customer_id = p.customer_id GROUP BY c.customer_id ORDER BY SUM(p.amount) ASC LIMIT 1", "source_tables": ["customer", "payment"], "error_info": ""}, {"sample_id": 2961, "db_id": "sakila_1", "score": 0, "gold_sql": "SELECT T1.first_name, T1.last_name, T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY SUM(amount) ASC LIMIT 1", "pred_sql": "SELECT c.customer_id, c.first_name || ' ' || c.last_name AS full_name FROM customer AS c JOIN payment AS p ON c.customer_id = p.customer_id GROUP BY c.customer_id ORDER BY SUM(p.amount) ASC LIMIT 1", "source_tables": ["customer", "payment"], "error_info": "Result not equal"}, {"sample_id": 2962, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id = T2.category_id JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.title = 'HUNGER ROOF'", "pred_sql": "SELECT c.name AS genre_name FROM film AS f JOIN film_category AS fc ON f.film_id = fc.film_id JOIN category AS c ON fc.category_id = c.category_id WHERE f.title = 'HUNGER ROOF'", "source_tables": ["category", "film", "film_category"], "error_info": ""}, {"sample_id": 2963, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id = T2.category_id JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.title = 'HUNGER ROOF'", "pred_sql": "SELECT c.name FROM category AS c JOIN film_category AS fc ON c.category_id = fc.category_id JOIN film AS f ON fc.film_id = f.film_id WHERE f.title = 'HUNGER ROOF'", "source_tables": ["category", "film", "film_category"], "error_info": ""}, {"sample_id": 2964, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT T2.name, T1.category_id, COUNT(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id", "pred_sql": "SELECT c.name AS genre_name, c.category_id AS genre_id, COUNT(fc.film_id) AS film_count FROM category AS c LEFT JOIN film_category AS fc ON c.category_id = fc.category_id GROUP BY c.category_id, c.name", "source_tables": ["category", "film_category"], "error_info": ""}, {"sample_id": 2965, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT T2.name, T1.category_id, COUNT(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id", "pred_sql": "SELECT c.category_id, c.name, COUNT(fc.film_id) AS film_count FROM category AS c LEFT JOIN film_category AS fc ON c.category_id = fc.category_id GROUP BY c.category_id, c.name", "source_tables": ["category", "film_category"], "error_info": ""}, {"sample_id": 2966, "db_id": "sakila_1", "score": 0, "gold_sql": "SELECT T1.title, T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id GROUP BY T1.film_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT f.film_id, f.title FROM film AS f JOIN inventory AS i ON f.film_id = i.film_id GROUP BY f.film_id, f.title ORDER BY COUNT(i.inventory_id) DESC LIMIT 1", "source_tables": ["inventory", "film"], "error_info": "Result not equal"}, {"sample_id": 2967, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT T1.title, T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id GROUP BY T1.film_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT f.title, f.film_id FROM film AS f JOIN inventory AS i ON f.film_id = i.film_id GROUP BY f.film_id ORDER BY COUNT(i.inventory_id) DESC LIMIT 1", "source_tables": ["inventory", "film"], "error_info": ""}, {"sample_id": 2968, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT T1.title, T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id GROUP BY T2.inventory_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT f.title, i.inventory_id FROM film AS f JOIN inventory AS i ON f.film_id = i.film_id JOIN rental AS r ON i.inventory_id = r.inventory_id GROUP BY i.inventory_id ORDER BY COUNT(r.rental_id) DESC LIMIT 1", "source_tables": ["rental", "inventory", "film"], "error_info": ""}, {"sample_id": 2969, "db_id": "sakila_1", "score": 0, "gold_sql": "SELECT T1.title, T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id GROUP BY T2.inventory_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT f.title, i.inventory_id FROM film AS f JOIN inventory AS i ON f.film_id = i.film_id JOIN rental AS r ON i.inventory_id = r.inventory_id GROUP BY f.film_id, i.inventory_id ORDER BY COUNT(r.rental_id) DESC LIMIT 1", "source_tables": ["rental", "inventory", "film"], "error_info": "Result not equal"}, {"sample_id": 2970, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT language_id) FROM film", "pred_sql": "SELECT COUNT(DISTINCT language_id) AS language_count FROM film", "source_tables": ["film"], "error_info": ""}, {"sample_id": 2971, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT language_id) FROM film", "pred_sql": "SELECT COUNT(DISTINCT language_id) AS language_count FROM film", "source_tables": ["film"], "error_info": ""}, {"sample_id": 2972, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT title FROM film WHERE rating = 'R'", "pred_sql": "SELECT title FROM film WHERE rating = 'R'", "source_tables": ["film"], "error_info": ""}, {"sample_id": 2973, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT title FROM film WHERE rating = 'R'", "pred_sql": "SELECT title FROM film WHERE rating = 'R'", "source_tables": ["film"], "error_info": ""}, {"sample_id": 2974, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id = T2.address_id WHERE store_id = 1", "pred_sql": "SELECT address.address, address.district, city.city, country.country FROM store JOIN address ON store.address_id = address.address_id JOIN city ON address.city_id = city.city_id JOIN country ON city.country_id = country.country_id WHERE store.store_id = 1", "source_tables": ["store", "address"], "error_info": ""}, {"sample_id": 2975, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id = T2.address_id WHERE store_id = 1", "pred_sql": "SELECT address.address FROM store JOIN address ON store.address_id = address.address_id WHERE store.store_id = 1", "source_tables": ["store", "address"], "error_info": ""}, {"sample_id": 2976, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT T1.first_name, T1.last_name, T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id = T2.staff_id GROUP BY T1.staff_id ORDER BY COUNT(*) ASC LIMIT 1", "pred_sql": "SELECT s.staff_id, s.first_name || ' ' || s.last_name AS full_name FROM staff AS s LEFT JOIN payment AS p ON s.staff_id = p.staff_id GROUP BY s.staff_id ORDER BY COUNT(p.payment_id) ASC LIMIT 1", "source_tables": ["staff", "payment"], "error_info": ""}, {"sample_id": 2977, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT T1.first_name, T1.last_name, T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id = T2.staff_id GROUP BY T1.staff_id ORDER BY COUNT(*) ASC LIMIT 1", "pred_sql": "SELECT s.first_name || ' ' || s.last_name AS full_name, s.staff_id FROM staff AS s JOIN payment AS p ON s.staff_id = p.staff_id GROUP BY s.staff_id ORDER BY COUNT(p.payment_id) ASC LIMIT 1", "source_tables": ["staff", "payment"], "error_info": ""}, {"sample_id": 2978, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id = T2.language_id WHERE T1.title = 'AIRPORT POLLOCK'", "pred_sql": "SELECT l.name FROM film AS f JOIN language AS l ON f.language_id = l.language_id WHERE f.title = 'AIRPORT POLLOCK'", "source_tables": ["language", "film"], "error_info": ""}, {"sample_id": 2979, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id = T2.language_id WHERE T1.title = 'AIRPORT POLLOCK'", "pred_sql": "SELECT language.name FROM film JOIN language ON film.language_id = language.language_id WHERE film.title = 'AIRPORT POLLOCK'", "source_tables": ["language", "film"], "error_info": ""}, {"sample_id": 2980, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM store", "pred_sql": "SELECT COUNT(*) AS store_count FROM store", "source_tables": ["store"], "error_info": ""}, {"sample_id": 2981, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM store", "pred_sql": "SELECT COUNT(*) AS store_count FROM store", "source_tables": ["store"], "error_info": ""}, {"sample_id": 2982, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT rating) FROM film", "pred_sql": "SELECT COUNT(DISTINCT rating) AS different_ratings FROM film", "source_tables": ["film"], "error_info": ""}, {"sample_id": 2983, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT rating) FROM film", "pred_sql": "SELECT COUNT(DISTINCT rating) AS different_ratings_count FROM film", "source_tables": ["film"], "error_info": ""}, {"sample_id": 2984, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'", "pred_sql": "SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'", "source_tables": ["film"], "error_info": ""}, {"sample_id": 2985, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'", "pred_sql": "SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'", "source_tables": ["film"], "error_info": ""}, {"sample_id": 2986, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM inventory WHERE store_id = 1", "pred_sql": "SELECT COUNT(*) AS item_count FROM inventory WHERE store_id = '1'", "source_tables": ["inventory"], "error_info": ""}, {"sample_id": 2987, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM inventory WHERE store_id = 1", "pred_sql": "SELECT COUNT(*) AS item_count FROM inventory WHERE store_id = 1", "source_tables": ["inventory"], "error_info": ""}, {"sample_id": 2988, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1", "pred_sql": "SELECT MIN(payment_date) AS first_payment_date FROM payment", "source_tables": ["payment"], "error_info": ""}, {"sample_id": 2989, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1", "pred_sql": "SELECT MIN(payment_date) AS earliest_payment_date FROM payment", "source_tables": ["payment"], "error_info": ""}, {"sample_id": 2990, "db_id": "sakila_1", "score": 0, "gold_sql": "SELECT T2.address, T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id = T1.address_id WHERE T1.first_name = 'LINDA'", "pred_sql": "SELECT address.address, address.city_id, customer.email FROM customer JOIN address ON customer.address_id = address.address_id WHERE customer.first_name = 'Linda'", "source_tables": ["customer", "address"], "error_info": "Result not equal"}, {"sample_id": 2991, "db_id": "sakila_1", "score": 0, "gold_sql": "SELECT T2.address, T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id = T1.address_id WHERE T1.first_name = 'LINDA'", "pred_sql": "SELECT address.address, customer.email FROM customer JOIN address ON customer.address_id = address.address_id WHERE customer.first_name = 'Linda'", "source_tables": ["customer", "address"], "error_info": "Result not equal"}, {"sample_id": 2992, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT title FROM film WHERE LENGTH > 100 OR rating = 'PG' EXCEPT SELECT title FROM film WHERE replacement_cost > 200", "pred_sql": "SELECT title FROM film WHERE (length > 100 OR rating = 'PG') AND replacement_cost <= 200", "source_tables": ["film"], "error_info": ""}, {"sample_id": 2993, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT title FROM film WHERE LENGTH > 100 OR rating = 'PG' EXCEPT SELECT title FROM film WHERE replacement_cost > 200", "pred_sql": "SELECT title FROM film WHERE (length > 100 OR rating = 'PG') AND replacement_cost <= 200", "source_tables": ["film"], "error_info": ""}, {"sample_id": 2994, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT T1.first_name, T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1", "pred_sql": "SELECT c.first_name, c.last_name FROM customer AS c JOIN rental AS r ON c.customer_id = r.customer_id WHERE r.rental_date = (SELECT MIN(rental_date) FROM rental)", "source_tables": ["customer", "rental"], "error_info": ""}, {"sample_id": 2995, "db_id": "sakila_1", "score": 0, "gold_sql": "SELECT T1.first_name, T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1", "pred_sql": "SELECT c.first_name || ' ' || c.last_name AS full_name FROM customer AS c JOIN rental AS r ON c.customer_id = r.customer_id ORDER BY r.rental_date ASC LIMIT 1", "source_tables": ["customer", "rental"], "error_info": "Result not equal"}, {"sample_id": 2996, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT DISTINCT T1.first_name, T1.last_name FROM staff AS T1 JOIN rental AS T2 ON T1.staff_id = T2.staff_id JOIN customer AS T3 ON T2.customer_id = T3.customer_id WHERE T3.first_name = 'APRIL' AND T3.last_name = 'BURNS'", "pred_sql": "SELECT staff.first_name || ' ' || staff.last_name AS full_name FROM staff JOIN rental ON staff.staff_id = rental.staff_id JOIN customer ON rental.customer_id = customer.customer_id WHERE customer.first_name = 'April' AND customer.last_name = 'Burns'", "source_tables": ["rental", "staff", "customer"], "error_info": ""}, {"sample_id": 2997, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT DISTINCT T1.first_name, T1.last_name FROM staff AS T1 JOIN rental AS T2 ON T1.staff_id = T2.staff_id JOIN customer AS T3 ON T2.customer_id = T3.customer_id WHERE T3.first_name = 'APRIL' AND T3.last_name = 'BURNS'", "pred_sql": "SELECT staff.first_name || ' ' || staff.last_name AS full_name FROM staff JOIN rental ON staff.staff_id = rental.staff_id JOIN customer ON rental.customer_id = customer.customer_id WHERE customer.first_name = 'April' AND customer.last_name = 'Burns'", "source_tables": ["rental", "staff", "customer"], "error_info": ""}, {"sample_id": 2998, "db_id": "sakila_1", "score": 0, "gold_sql": "SELECT store_id FROM customer GROUP BY store_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT store.store_id, COUNT(customer.customer_id) AS customer_count FROM store JOIN customer ON store.store_id = customer.store_id GROUP BY store.store_id ORDER BY customer_count DESC LIMIT 1", "source_tables": ["customer"], "error_info": "Result not equal"}, {"sample_id": 2999, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT store_id FROM customer GROUP BY store_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT store_id FROM customer GROUP BY store_id ORDER BY COUNT(customer_id) DESC LIMIT 1", "source_tables": ["customer"], "error_info": ""}, {"sample_id": 3000, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT amount FROM payment ORDER BY amount DESC LIMIT 1", "pred_sql": "SELECT MAX(amount) AS largest_payment FROM payment", "source_tables": ["payment"], "error_info": ""}, {"sample_id": 3001, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT amount FROM payment ORDER BY amount DESC LIMIT 1", "pred_sql": "SELECT MAX(amount) AS largest_payment FROM payment", "source_tables": ["payment"], "error_info": ""}, {"sample_id": 3002, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT T2.address FROM staff AS T1 JOIN address AS T2 ON T1.address_id = T2.address_id WHERE T1.first_name = 'Elsa'", "pred_sql": "SELECT address.address, address.address2, address.district, city.city, country.country FROM staff JOIN address ON staff.address_id = address.address_id JOIN city ON address.city_id = city.city_id JOIN country ON city.country_id = country.country_id WHERE staff.first_name = 'Elsa'", "source_tables": ["staff", "address"], "error_info": ""}, {"sample_id": 3003, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT T2.address FROM staff AS T1 JOIN address AS T2 ON T1.address_id = T2.address_id WHERE T1.first_name = 'Elsa'", "pred_sql": "SELECT address.* FROM address JOIN staff ON address.address_id = staff.address_id WHERE staff.first_name = 'Elsa'", "source_tables": ["staff", "address"], "error_info": ""}, {"sample_id": 3004, "db_id": "sakila_1", "score": 0, "gold_sql": "SELECT first_name FROM customer WHERE NOT customer_id IN (SELECT customer_id FROM rental WHERE rental_date > '2005-08-23 02:06:01')", "pred_sql": "SELECT DISTINCT c.first_name FROM customer AS c LEFT JOIN rental AS r ON c.customer_id = r.customer_id WHERE r.rental_date IS NULL OR r.rental_date <= '2005-08-23 02:06:01'", "source_tables": ["customer", "rental"], "error_info": "Result not equal"}, {"sample_id": 3005, "db_id": "sakila_1", "score": 1, "gold_sql": "SELECT first_name FROM customer WHERE NOT customer_id IN (SELECT customer_id FROM rental WHERE rental_date > '2005-08-23 02:06:01')", "pred_sql": "SELECT DISTINCT c.first_name FROM customer AS c LEFT JOIN rental AS r ON c.customer_id = r.customer_id AND r.rental_date > '2005-08-23 02:06:01' WHERE r.rental_id IS NULL", "source_tables": ["customer", "rental"], "error_info": ""}, {"sample_id": 3006, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM bank", "pred_sql": "SELECT COUNT(*) AS total_branches FROM bank", "source_tables": ["bank"], "error_info": ""}, {"sample_id": 3007, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM bank", "pred_sql": "SELECT COUNT(*) AS branch_count FROM bank", "source_tables": ["bank"], "error_info": ""}, {"sample_id": 3008, "db_id": "loan_1", "score": 0, "gold_sql": "SELECT SUM(no_of_customers) FROM bank", "pred_sql": "SELECT COUNT(*) AS total_customers FROM customer", "source_tables": ["bank"], "error_info": "Result not equal"}, {"sample_id": 3009, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT SUM(no_of_customers) FROM bank", "pred_sql": "SELECT SUM(no_of_customers) AS total_customers FROM bank", "source_tables": ["bank"], "error_info": ""}, {"sample_id": 3010, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT SUM(no_of_customers) FROM bank WHERE city = 'New York City'", "pred_sql": "SELECT SUM(no_of_customers) AS total_customers FROM bank WHERE city = 'New York City'", "source_tables": ["bank"], "error_info": ""}, {"sample_id": 3011, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT SUM(no_of_customers) FROM bank WHERE city = 'New York City'", "pred_sql": "SELECT SUM(no_of_customers) AS total_customers FROM bank WHERE city = 'New York City'", "source_tables": ["bank"], "error_info": ""}, {"sample_id": 3012, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT AVG(no_of_customers) FROM bank WHERE state = 'Utah'", "pred_sql": "SELECT AVG(no_of_customers) AS average_customers FROM bank WHERE state = 'Utah'", "source_tables": ["bank"], "error_info": ""}, {"sample_id": 3013, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT AVG(no_of_customers) FROM bank WHERE state = 'Utah'", "pred_sql": "SELECT AVG(no_of_customers) AS average_customers FROM bank WHERE state = 'Utah'", "source_tables": ["bank"], "error_info": ""}, {"sample_id": 3014, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT AVG(no_of_customers) FROM bank", "pred_sql": "SELECT AVG(no_of_customers) AS average_customers FROM bank", "source_tables": ["bank"], "error_info": ""}, {"sample_id": 3015, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT AVG(no_of_customers) FROM bank", "pred_sql": "SELECT AVG(no_of_customers) AS average_customers FROM bank", "source_tables": ["bank"], "error_info": ""}, {"sample_id": 3016, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT city, state FROM bank WHERE bname = 'morningside'", "pred_sql": "SELECT city, state FROM bank WHERE bname = 'morningside'", "source_tables": ["bank"], "error_info": ""}, {"sample_id": 3017, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT city, state FROM bank WHERE bname = 'morningside'", "pred_sql": "SELECT city, state FROM bank WHERE bname = 'morningside'", "source_tables": ["bank"], "error_info": ""}, {"sample_id": 3018, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT bname FROM bank WHERE state = 'New York'", "pred_sql": "SELECT bname FROM bank WHERE state = 'New York'", "source_tables": ["bank"], "error_info": ""}, {"sample_id": 3019, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT bname FROM bank WHERE state = 'New York'", "pred_sql": "SELECT bname FROM bank WHERE state = 'New York'", "source_tables": ["bank"], "error_info": ""}, {"sample_id": 3020, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT cust_name FROM customer ORDER BY acc_bal", "pred_sql": "SELECT cust_name FROM customer ORDER BY acc_bal ASC", "source_tables": ["customer"], "error_info": ""}, {"sample_id": 3021, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT cust_name FROM customer ORDER BY acc_bal", "pred_sql": "SELECT cust_name FROM customer ORDER BY acc_bal", "source_tables": ["customer"], "error_info": ""}, {"sample_id": 3022, "db_id": "loan_1", "score": 0, "gold_sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name ORDER BY SUM(T2.amount)", "pred_sql": "SELECT c.cust_name, SUM(l.amount) AS total_loan_amount FROM customer AS c JOIN loan AS l ON c.cust_ID = l.cust_ID GROUP BY c.cust_name ORDER BY total_loan_amount", "source_tables": ["customer", "loan"], "error_info": "Result not equal"}, {"sample_id": 3023, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name ORDER BY SUM(T2.amount)", "pred_sql": "SELECT DISTINCT c.cust_name FROM customer AS c JOIN loan AS l ON c.cust_ID = l.cust_ID ORDER BY l.amount DESC", "source_tables": ["customer", "loan"], "error_info": ""}, {"sample_id": 3024, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT state, acc_type, credit_score FROM customer WHERE no_of_loans = 0", "pred_sql": "SELECT state, acc_type, credit_score FROM customer WHERE no_of_loans = 0", "source_tables": ["customer"], "error_info": ""}, {"sample_id": 3025, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT state, acc_type, credit_score FROM customer WHERE no_of_loans = 0", "pred_sql": "SELECT c.state, c.acc_type, c.credit_score FROM customer AS c WHERE c.no_of_loans = 0", "source_tables": ["customer"], "error_info": ""}, {"sample_id": 3026, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT city) FROM bank", "pred_sql": "SELECT COUNT(DISTINCT city) AS number_of_cities FROM bank", "source_tables": ["bank"], "error_info": ""}, {"sample_id": 3027, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT city) FROM bank", "pred_sql": "SELECT COUNT(DISTINCT city) AS number_of_cities FROM bank", "source_tables": ["bank"], "error_info": ""}, {"sample_id": 3028, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT state) FROM bank", "pred_sql": "SELECT COUNT(DISTINCT state) AS number_of_states FROM bank", "source_tables": ["bank"], "error_info": ""}, {"sample_id": 3029, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT state) FROM bank", "pred_sql": "SELECT COUNT(DISTINCT state) AS number_of_states FROM bank", "source_tables": ["bank"], "error_info": ""}, {"sample_id": 3030, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT acc_type) FROM customer", "pred_sql": "SELECT COUNT(DISTINCT acc_type) AS distinct_account_types FROM customer", "source_tables": ["customer"], "error_info": ""}, {"sample_id": 3031, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT acc_type) FROM customer", "pred_sql": "SELECT COUNT(DISTINCT acc_type) AS different_account_types FROM customer", "source_tables": ["customer"], "error_info": ""}, {"sample_id": 3032, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT cust_name, acc_bal FROM customer WHERE cust_name LIKE '%a%'", "pred_sql": "SELECT cust_name, acc_bal FROM customer WHERE cust_name LIKE '%a%'", "source_tables": ["customer"], "error_info": ""}, {"sample_id": 3033, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT cust_name, acc_bal FROM customer WHERE cust_name LIKE '%a%'", "pred_sql": "SELECT cust_name, acc_bal FROM customer WHERE cust_name LIKE '%a%'", "source_tables": ["customer"], "error_info": ""}, {"sample_id": 3034, "db_id": "loan_1", "score": 0, "gold_sql": "SELECT SUM(acc_bal) FROM customer WHERE state = 'Utah' OR state = 'Texas'", "pred_sql": "SELECT SUM(acc_bal) AS total_account_balance, cust_name FROM customer WHERE state IN ('Utah', 'Texas') GROUP BY cust_name", "source_tables": ["customer"], "error_info": "Result not equal"}, {"sample_id": 3035, "db_id": "loan_1", "score": 0, "gold_sql": "SELECT SUM(acc_bal) FROM customer WHERE state = 'Utah' OR state = 'Texas'", "pred_sql": "SELECT cust_name, acc_bal FROM customer WHERE state IN ('Utah', 'Texas')", "source_tables": ["customer"], "error_info": "Result not equal"}, {"sample_id": 3036, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT cust_name FROM customer WHERE acc_type = 'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type = 'checking'", "pred_sql": "SELECT cust_name FROM customer WHERE acc_type IN ('saving', 'checking') GROUP BY cust_name HAVING COUNT(DISTINCT acc_type) = 2", "source_tables": ["customer"], "error_info": ""}, {"sample_id": 3037, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT cust_name FROM customer WHERE acc_type = 'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type = 'checking'", "pred_sql": "SELECT cust_name FROM customer WHERE acc_type IN ('savings', 'checking') GROUP BY cust_name HAVING COUNT(DISTINCT acc_type) = 2", "source_tables": ["customer"], "error_info": ""}, {"sample_id": 3038, "db_id": "loan_1", "score": 0, "gold_sql": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type = 'saving'", "pred_sql": "SELECT cust_name FROM customer WHERE acc_type <> 'savings'", "source_tables": ["customer"], "error_info": "Result not equal"}, {"sample_id": 3039, "db_id": "loan_1", "score": 0, "gold_sql": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type = 'saving'", "pred_sql": "SELECT cust_name FROM customer WHERE acc_type <> 'savings'", "source_tables": ["customer"], "error_info": "Result not equal"}, {"sample_id": 3040, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE T2.loan_type = 'Mortgages'", "pred_sql": "SELECT cust.cust_name FROM customer AS cust LEFT JOIN loan AS l ON cust.cust_ID = l.cust_ID AND l.loan_type = 'Mortgages' WHERE l.loan_ID IS NULL", "source_tables": ["customer", "loan"], "error_info": ""}, {"sample_id": 3041, "db_id": "loan_1", "score": 0, "gold_sql": "SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE T2.loan_type = 'Mortgages'", "pred_sql": "SELECT cust_name FROM customer WHERE NOT cust_ID IN (SELECT cust_ID FROM loan WHERE loan_type = 'Mortgage')", "source_tables": ["customer", "loan"], "error_info": "Result not equal"}, {"sample_id": 3042, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE loan_type = 'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE loan_type = 'Auto'", "pred_sql": "SELECT DISTINCT c.cust_name FROM customer AS c JOIN loan AS l ON c.cust_ID = l.cust_ID WHERE l.loan_type IN ('Mortgages', 'Auto') GROUP BY c.cust_ID HAVING COUNT(DISTINCT l.loan_type) = 2", "source_tables": ["customer", "loan"], "error_info": ""}, {"sample_id": 3043, "db_id": "loan_1", "score": 0, "gold_sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE loan_type = 'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE loan_type = 'Auto'", "pred_sql": "SELECT DISTINCT c.cust_name FROM customer AS c JOIN loan AS l1 ON c.cust_ID = l1.cust_ID JOIN loan AS l2 ON c.cust_ID = l2.cust_ID WHERE l1.loan_type = 'Mortgage' AND l2.loan_type = 'Auto'", "source_tables": ["customer", "loan"], "error_info": "Result not equal"}, {"sample_id": 3044, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT cust_name FROM customer WHERE credit_score < (SELECT AVG(credit_score) FROM customer)", "pred_sql": "SELECT cust_name FROM customer WHERE credit_score < (SELECT AVG(credit_score) FROM customer)", "source_tables": ["customer"], "error_info": ""}, {"sample_id": 3045, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT cust_name FROM customer WHERE credit_score < (SELECT AVG(credit_score) FROM customer)", "pred_sql": "SELECT cust_name FROM customer WHERE credit_score < (SELECT AVG(credit_score) FROM customer)", "source_tables": ["customer"], "error_info": ""}, {"sample_id": 3046, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1", "pred_sql": "SELECT b.bname FROM bank AS b ORDER BY b.no_of_customers DESC LIMIT 1", "source_tables": ["bank"], "error_info": ""}, {"sample_id": 3047, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1", "pred_sql": "SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1", "source_tables": ["bank"], "error_info": ""}, {"sample_id": 3048, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1", "pred_sql": "SELECT cust_name FROM customer WHERE credit_score = (SELECT MIN(credit_score) FROM customer)", "source_tables": ["customer"], "error_info": ""}, {"sample_id": 3049, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1", "pred_sql": "SELECT cust_name FROM customer ORDER BY credit_score ASC LIMIT 1", "source_tables": ["customer"], "error_info": ""}, {"sample_id": 3050, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT cust_name, acc_type, acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1", "pred_sql": "SELECT cust_name, acc_type, acc_bal FROM customer WHERE credit_score = (SELECT MAX(credit_score) FROM customer)", "source_tables": ["customer"], "error_info": ""}, {"sample_id": 3051, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT cust_name, acc_type, acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1", "pred_sql": "SELECT cust_name, acc_type, acc_bal FROM customer WHERE credit_score = (SELECT MAX(credit_score) FROM customer)", "source_tables": ["customer"], "error_info": ""}, {"sample_id": 3052, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name ORDER BY SUM(T2.amount) DESC LIMIT 1", "pred_sql": "SELECT cust_name FROM customer WHERE cust_ID = (SELECT cust_ID FROM loan GROUP BY cust_ID ORDER BY SUM(amount) DESC LIMIT 1)", "source_tables": ["customer", "loan"], "error_info": ""}, {"sample_id": 3053, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name ORDER BY SUM(T2.amount) DESC LIMIT 1", "pred_sql": "SELECT c.cust_name FROM customer AS c JOIN loan AS l ON c.cust_ID = l.cust_ID GROUP BY c.cust_ID ORDER BY SUM(l.amount) DESC LIMIT 1", "source_tables": ["customer", "loan"], "error_info": ""}, {"sample_id": 3054, "db_id": "loan_1", "score": 0, "gold_sql": "SELECT state FROM bank GROUP BY state ORDER BY SUM(no_of_customers) DESC LIMIT 1", "pred_sql": "SELECT state FROM customer GROUP BY state ORDER BY COUNT(cust_ID) DESC LIMIT 1", "source_tables": ["bank"], "error_info": "Result not equal"}, {"sample_id": 3055, "db_id": "loan_1", "score": 0, "gold_sql": "SELECT state FROM bank GROUP BY state ORDER BY SUM(no_of_customers) DESC LIMIT 1", "pred_sql": "SELECT state, SUM(no_of_customers) AS total_customers FROM bank GROUP BY state ORDER BY total_customers DESC LIMIT 1", "source_tables": ["bank"], "error_info": "Result not equal"}, {"sample_id": 3056, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT AVG(acc_bal), acc_type FROM customer WHERE credit_score < 50 GROUP BY acc_type", "pred_sql": "SELECT acc_type, AVG(acc_bal) AS average_balance FROM customer WHERE credit_score < 50 GROUP BY acc_type", "source_tables": ["customer"], "error_info": ""}, {"sample_id": 3057, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT AVG(acc_bal), acc_type FROM customer WHERE credit_score < 50 GROUP BY acc_type", "pred_sql": "SELECT acc_type, AVG(acc_bal) AS average_balance FROM customer WHERE credit_score < 50 GROUP BY acc_type", "source_tables": ["customer"], "error_info": ""}, {"sample_id": 3058, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT SUM(acc_bal), state FROM customer WHERE credit_score > 100 GROUP BY state", "pred_sql": "SELECT c.state, SUM(c.acc_bal) AS total_account_balance FROM customer AS c WHERE c.credit_score > 100 GROUP BY c.state", "source_tables": ["customer"], "error_info": ""}, {"sample_id": 3059, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT SUM(acc_bal), state FROM customer WHERE credit_score > 100 GROUP BY state", "pred_sql": "SELECT c.state, SUM(c.acc_bal) AS total_account_balance FROM customer AS c WHERE c.credit_score > 100 GROUP BY c.state", "source_tables": ["customer"], "error_info": ""}, {"sample_id": 3060, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT SUM(amount), T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname", "pred_sql": "SELECT bank.bname, SUM(loan.amount) AS total_loans FROM bank JOIN loan ON bank.branch_ID = loan.branch_ID GROUP BY bank.bname", "source_tables": ["bank", "loan"], "error_info": ""}, {"sample_id": 3061, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT SUM(amount), T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname", "pred_sql": "SELECT b.bname, SUM(l.amount) AS total_loan_amount FROM bank AS b JOIN loan AS l ON b.branch_ID = l.branch_ID GROUP BY b.bname", "source_tables": ["bank", "loan"], "error_info": ""}, {"sample_id": 3062, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name HAVING COUNT(*) > 1", "pred_sql": "SELECT cust_name FROM customer WHERE cust_ID IN (SELECT cust_ID FROM loan GROUP BY cust_ID HAVING COUNT(loan_ID) > 1)", "source_tables": ["customer", "loan"], "error_info": ""}, {"sample_id": 3063, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name HAVING COUNT(*) > 1", "pred_sql": "SELECT c.cust_name FROM customer AS c JOIN loan AS l ON c.cust_ID = l.cust_ID GROUP BY c.cust_ID HAVING COUNT(l.loan_ID) > 1", "source_tables": ["customer", "loan"], "error_info": ""}, {"sample_id": 3064, "db_id": "loan_1", "score": 0, "gold_sql": "SELECT T1.cust_name, T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name HAVING SUM(T2.amount) > 5000", "pred_sql": "SELECT c.cust_name, c.acc_bal FROM customer AS c JOIN loan AS l ON c.cust_ID = l.cust_ID WHERE l.amount > 5000", "source_tables": ["customer", "loan"], "error_info": "Result not equal"}, {"sample_id": 3065, "db_id": "loan_1", "score": 0, "gold_sql": "SELECT T1.cust_name, T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name HAVING SUM(T2.amount) > 5000", "pred_sql": "SELECT c.cust_name, c.acc_bal FROM customer AS c JOIN loan AS l ON c.cust_ID = l.cust_ID GROUP BY c.cust_ID HAVING SUM(l.amount) > 5000", "source_tables": ["customer", "loan"], "error_info": "Result not equal"}, {"sample_id": 3066, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname ORDER BY SUM(T2.amount) DESC LIMIT 1", "pred_sql": "SELECT b.bname FROM bank AS b JOIN loan AS l ON b.branch_ID = l.branch_ID GROUP BY b.branch_ID ORDER BY SUM(l.amount) DESC LIMIT 1", "source_tables": ["bank", "loan"], "error_info": ""}, {"sample_id": 3067, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname ORDER BY SUM(T2.amount) DESC LIMIT 1", "pred_sql": "SELECT b.bname FROM bank AS b JOIN loan AS l ON b.branch_ID = l.branch_ID GROUP BY b.branch_ID ORDER BY SUM(l.amount) DESC LIMIT 1", "source_tables": ["bank", "loan"], "error_info": ""}, {"sample_id": 3068, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id = T2.branch_id JOIN customer AS T3 ON T1.cust_id = T3.cust_id WHERE T3.credit_score < 100 GROUP BY T2.bname ORDER BY SUM(T1.amount) DESC LIMIT 1", "pred_sql": "SELECT b.bname FROM bank AS b JOIN loan AS l ON b.branch_ID = l.branch_ID JOIN customer AS c ON l.cust_ID = c.cust_ID WHERE c.credit_score < 100 GROUP BY b.branch_ID ORDER BY SUM(l.amount) DESC LIMIT 1", "source_tables": ["customer", "bank", "loan"], "error_info": ""}, {"sample_id": 3069, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id = T2.branch_id JOIN customer AS T3 ON T1.cust_id = T3.cust_id WHERE T3.credit_score < 100 GROUP BY T2.bname ORDER BY SUM(T1.amount) DESC LIMIT 1", "pred_sql": "SELECT b.bname FROM bank AS b JOIN loan AS l ON b.branch_ID = l.branch_ID JOIN customer AS c ON l.cust_ID = c.cust_ID WHERE c.credit_score < 100 GROUP BY b.branch_ID ORDER BY SUM(l.amount) DESC LIMIT 1", "source_tables": ["customer", "bank", "loan"], "error_info": ""}, {"sample_id": 3070, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id", "pred_sql": "SELECT DISTINCT b.bname FROM bank AS b JOIN loan AS l ON b.branch_ID = l.branch_ID", "source_tables": ["bank", "loan"], "error_info": ""}, {"sample_id": 3071, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id", "pred_sql": "SELECT DISTINCT b.bname FROM bank AS b JOIN loan AS l ON b.branch_ID = l.branch_ID", "source_tables": ["bank", "loan"], "error_info": ""}, {"sample_id": 3072, "db_id": "loan_1", "score": 0, "gold_sql": "SELECT DISTINCT T1.cust_name, T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id", "pred_sql": "SELECT c.cust_name, c.credit_score FROM customer AS c JOIN loan AS l ON c.cust_ID = l.cust_ID", "source_tables": ["customer", "loan"], "error_info": "Result not equal"}, {"sample_id": 3073, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT DISTINCT T1.cust_name, T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id", "pred_sql": "SELECT DISTINCT c.cust_name, c.credit_score FROM customer AS c JOIN loan AS l ON c.cust_ID = l.cust_ID", "source_tables": ["customer", "loan"], "error_info": ""}, {"sample_id": 3074, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE amount > 3000", "pred_sql": "SELECT c.cust_name FROM customer AS c JOIN loan AS l ON c.cust_ID = l.cust_ID WHERE l.amount > 3000", "source_tables": ["customer", "loan"], "error_info": ""}, {"sample_id": 3075, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE amount > 3000", "pred_sql": "SELECT c.cust_name FROM customer AS c JOIN loan AS l ON c.cust_ID = l.cust_ID WHERE l.amount > 3000", "source_tables": ["customer", "loan"], "error_info": ""}, {"sample_id": 3076, "db_id": "loan_1", "score": 0, "gold_sql": "SELECT T1.bname, T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id WHERE T2.loan_type = 'Business'", "pred_sql": "SELECT DISTINCT b.city, b.bname FROM bank AS b JOIN loan AS l ON b.branch_ID = l.branch_ID WHERE l.loan_type = 'business'", "source_tables": ["bank", "loan"], "error_info": "Result not equal"}, {"sample_id": 3077, "db_id": "loan_1", "score": 0, "gold_sql": "SELECT T1.bname, T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id WHERE T2.loan_type = 'Business'", "pred_sql": "SELECT DISTINCT b.bname, b.city FROM bank AS b JOIN loan AS l ON b.branch_ID = l.branch_ID WHERE l.loan_type = 'business'", "source_tables": ["bank", "loan"], "error_info": "Result not equal"}, {"sample_id": 3078, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id = T2.branch_id JOIN customer AS T3 ON T1.cust_id = T3.cust_id WHERE T3.credit_score < 100", "pred_sql": "SELECT DISTINCT b.bname FROM bank AS b JOIN loan AS l ON b.branch_ID = l.branch_ID JOIN customer AS c ON l.cust_ID = c.cust_ID WHERE c.credit_score < 100", "source_tables": ["customer", "bank", "loan"], "error_info": ""}, {"sample_id": 3079, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id = T2.branch_id JOIN customer AS T3 ON T1.cust_id = T3.cust_id WHERE T3.credit_score < 100", "pred_sql": "SELECT DISTINCT b.bname FROM bank AS b JOIN loan AS l ON b.branch_ID = l.branch_ID JOIN customer AS c ON l.cust_ID = c.cust_ID WHERE c.credit_score < 100", "source_tables": ["customer", "bank", "loan"], "error_info": ""}, {"sample_id": 3080, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT SUM(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id WHERE T1.state = 'New York'", "pred_sql": "SELECT SUM(loan.amount) AS total_loans FROM loan JOIN bank ON loan.branch_ID = bank.branch_ID WHERE bank.state = 'New York'", "source_tables": ["bank", "loan"], "error_info": ""}, {"sample_id": 3081, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT SUM(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id WHERE T1.state = 'New York'", "pred_sql": "SELECT SUM(amount) AS total_loaned_amount FROM loan WHERE branch_ID IN (SELECT branch_ID FROM bank WHERE state = 'New York')", "source_tables": ["bank", "loan"], "error_info": ""}, {"sample_id": 3082, "db_id": "loan_1", "score": 0, "gold_sql": "SELECT AVG(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)", "pred_sql": "SELECT AVG(c.credit_score) AS average_credit_score FROM customer AS c JOIN loan AS l ON c.cust_ID = l.cust_ID", "source_tables": ["customer", "loan"], "error_info": "Result not equal"}, {"sample_id": 3083, "db_id": "loan_1", "score": 0, "gold_sql": "SELECT AVG(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)", "pred_sql": "SELECT AVG(c.credit_score) AS average_credit_score FROM customer AS c JOIN loan AS l ON c.cust_ID = l.cust_ID", "source_tables": ["customer", "loan"], "error_info": "Result not equal"}, {"sample_id": 3084, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT AVG(credit_score) FROM customer WHERE NOT cust_id IN (SELECT cust_id FROM loan)", "pred_sql": "SELECT AVG(credit_score) AS average_credit_score FROM customer WHERE NOT cust_ID IN (SELECT cust_ID FROM loan)", "source_tables": ["customer", "loan"], "error_info": ""}, {"sample_id": 3085, "db_id": "loan_1", "score": 1, "gold_sql": "SELECT AVG(credit_score) FROM customer WHERE NOT cust_id IN (SELECT cust_id FROM loan)", "pred_sql": "SELECT AVG(credit_score) AS average_credit_score FROM customer WHERE NOT cust_ID IN (SELECT cust_ID FROM loan)", "source_tables": ["customer", "loan"], "error_info": ""}, {"sample_id": 3086, "db_id": "behavior_monitoring", "score": 1, "gold_sql": "SELECT COUNT(*) FROM ASSESSMENT_NOTES", "pred_sql": "SELECT COUNT(*) AS total_assessment_notes FROM Assessment_Notes", "source_tables": ["assessment_notes"], "error_info": ""}, {"sample_id": 3087, "db_id": "behavior_monitoring", "score": 1, "gold_sql": "SELECT date_of_notes FROM Assessment_Notes", "pred_sql": "SELECT date_of_notes FROM Assessment_Notes", "source_tables": ["assessment_notes"], "error_info": ""}, {"sample_id": 3088, "db_id": "behavior_monitoring", "score": 1, "gold_sql": "SELECT COUNT(*) FROM ADDRESSES WHERE zip_postcode = '197'", "pred_sql": "SELECT COUNT(*) AS address_count FROM Addresses WHERE zip_postcode = '197'", "source_tables": ["addresses"], "error_info": ""}, {"sample_id": 3089, "db_id": "behavior_monitoring", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT incident_type_code) FROM Behavior_Incident", "pred_sql": "SELECT COUNT(DISTINCT incident_type_code) AS distinct_incident_type_count FROM Ref_Incident_Type", "source_tables": ["behavior_incident"], "error_info": ""}, {"sample_id": 3090, "db_id": "behavior_monitoring", "score": 1, "gold_sql": "SELECT DISTINCT detention_type_code FROM Detention", "pred_sql": "SELECT DISTINCT detention_type_code FROM Ref_Detention_Type", "source_tables": ["detention"], "error_info": ""}, {"sample_id": 3091, "db_id": "behavior_monitoring", "score": 0, "gold_sql": "SELECT date_incident_start, date_incident_end FROM Behavior_Incident WHERE incident_type_code = 'NOISE'", "pred_sql": "SELECT date_incident_start, date_incident_end FROM Behavior_Incident WHERE incident_type_code = (SELECT incident_type_code FROM Ref_Incident_Type WHERE incident_type_description = 'NOISE')", "source_tables": ["behavior_incident"], "error_info": "Result not equal"}, {"sample_id": 3092, "db_id": "behavior_monitoring", "score": 1, "gold_sql": "SELECT detention_summary FROM Detention", "pred_sql": "SELECT detention_summary FROM Detention", "source_tables": ["detention"], "error_info": ""}, {"sample_id": 3093, "db_id": "behavior_monitoring", "score": 1, "gold_sql": "SELECT cell_mobile_number, email_address FROM STUDENTS", "pred_sql": "SELECT cell_mobile_number, email_address FROM Students", "source_tables": ["students"], "error_info": ""}, {"sample_id": 3094, "db_id": "behavior_monitoring", "score": 1, "gold_sql": "SELECT email_address FROM Students WHERE first_name = 'Emma' AND last_name = 'Rohan'", "pred_sql": "SELECT email_address FROM Students WHERE first_name = 'Emma' AND last_name = 'Rohan'", "source_tables": ["students"], "error_info": ""}, {"sample_id": 3095, "db_id": "behavior_monitoring", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT student_id) FROM Students_in_Detention", "pred_sql": "SELECT COUNT(DISTINCT student_id) AS distinct_students_in_detention FROM Students_in_Detention", "source_tables": ["students_in_detention"], "error_info": ""}, {"sample_id": 3096, "db_id": "behavior_monitoring", "score": 1, "gold_sql": "SELECT gender FROM TEACHERS WHERE last_name = 'Medhurst'", "pred_sql": "SELECT gender FROM Teachers WHERE last_name = 'Medhurst'", "source_tables": ["teachers"], "error_info": ""}, {"sample_id": 3097, "db_id": "behavior_monitoring", "score": 1, "gold_sql": "SELECT incident_type_description FROM Ref_Incident_Type WHERE incident_type_code = 'VIOLENCE'", "pred_sql": "SELECT incident_type_description FROM Ref_Incident_Type WHERE incident_type_code = 'VIOLENCE'", "source_tables": ["ref_incident_type"], "error_info": ""}, {"sample_id": 3098, "db_id": "behavior_monitoring", "score": 1, "gold_sql": "SELECT MAX(monthly_rental), MIN(monthly_rental) FROM Student_Addresses", "pred_sql": "SELECT MAX(monthly_rental) AS max_monthly_rental, MIN(monthly_rental) AS min_monthly_rental FROM Student_Addresses", "source_tables": ["student_addresses"], "error_info": ""}, {"sample_id": 3099, "db_id": "behavior_monitoring", "score": 1, "gold_sql": "SELECT first_name FROM Teachers WHERE email_address LIKE '%man%'", "pred_sql": "SELECT first_name FROM Teachers WHERE email_address LIKE '%man%'", "source_tables": ["teachers"], "error_info": ""}, {"sample_id": 3100, "db_id": "behavior_monitoring", "score": 1, "gold_sql": "SELECT * FROM Assessment_Notes ORDER BY date_of_notes ASC", "pred_sql": "SELECT * FROM Assessment_Notes ORDER BY date_of_notes ASC", "source_tables": ["assessment_notes"], "error_info": ""}, {"sample_id": 3101, "db_id": "behavior_monitoring", "score": 1, "gold_sql": "SELECT city FROM Addresses ORDER BY city", "pred_sql": "SELECT DISTINCT city FROM Addresses ORDER BY city ASC", "source_tables": ["addresses"], "error_info": ""}, {"sample_id": 3102, "db_id": "behavior_monitoring", "score": 1, "gold_sql": "SELECT first_name, last_name FROM Teachers ORDER BY last_name", "pred_sql": "SELECT first_name, last_name FROM Teachers ORDER BY last_name ASC", "source_tables": ["teachers"], "error_info": ""}, {"sample_id": 3103, "db_id": "behavior_monitoring", "score": 1, "gold_sql": "SELECT * FROM Student_Addresses ORDER BY monthly_rental DESC", "pred_sql": "SELECT * FROM Student_Addresses ORDER BY monthly_rental DESC", "source_tables": ["student_addresses"], "error_info": ""}, {"sample_id": 3104, "db_id": "behavior_monitoring", "score": 1, "gold_sql": "SELECT T1.student_id, T2.first_name FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT student_id, first_name FROM Students WHERE student_id = (SELECT student_id FROM Assessment_Notes GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1)", "source_tables": ["students", "assessment_notes"], "error_info": ""}, {"sample_id": 3105, "db_id": "behavior_monitoring", "score": 0, "gold_sql": "SELECT T1.teacher_id, T2.first_name FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.teacher_id ORDER BY COUNT(*) DESC LIMIT 3", "pred_sql": "SELECT T.teacher_id, T.first_name FROM Teachers AS T JOIN Assessment_Notes AS AN ON T.teacher_id = AN.teacher_id GROUP BY T.teacher_id, T.first_name ORDER BY COUNT(AN.notes_id) DESC LIMIT 3", "source_tables": ["teachers", "assessment_notes"], "error_info": "Result not equal"}, {"sample_id": 3106, "db_id": "behavior_monitoring", "score": 1, "gold_sql": "SELECT T1.student_id, T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT student_id, last_name FROM Students WHERE student_id = (SELECT student_id FROM Behavior_Incident GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1)", "source_tables": ["behavior_incident", "students"], "error_info": ""}, {"sample_id": 3107, "db_id": "behavior_monitoring", "score": 1, "gold_sql": "SELECT T1.teacher_id, T2.last_name FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T1.detention_type_code = 'AFTER' GROUP BY T1.teacher_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT t.teacher_id, t.last_name FROM Teachers AS t JOIN Detention AS d ON t.teacher_id = d.teacher_id WHERE d.detention_type_code = 'AFTER' GROUP BY t.teacher_id, t.last_name ORDER BY COUNT(d.detention_id) DESC LIMIT 1", "source_tables": ["teachers", "detention"], "error_info": ""}, {"sample_id": 3108, "db_id": "behavior_monitoring", "score": 1, "gold_sql": "SELECT T1.student_id, T2.first_name FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY AVG(monthly_rental) DESC LIMIT 1", "pred_sql": "SELECT s.student_id, s.first_name FROM Students AS s JOIN Student_Addresses AS sa ON s.student_id = sa.student_id GROUP BY s.student_id, s.first_name ORDER BY AVG(sa.monthly_rental) DESC LIMIT 1", "source_tables": ["student_addresses", "students"], "error_info": ""}, {"sample_id": 3109, "db_id": "behavior_monitoring", "score": 0, "gold_sql": "SELECT T2.address_id, T1.city FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id GROUP BY T2.address_id ORDER BY AVG(monthly_rental) DESC LIMIT 1", "pred_sql": "SELECT sa.student_id, a.city FROM Student_Addresses AS sa JOIN Addresses AS a ON sa.address_id = a.address_id ORDER BY sa.monthly_rental DESC LIMIT 1", "source_tables": ["addresses", "student_addresses"], "error_info": "Result not equal"}, {"sample_id": 3110, "db_id": "behavior_monitoring", "score": 1, "gold_sql": "SELECT T1.incident_type_code, T2.incident_type_description FROM Behavior_Incident AS T1 JOIN Ref_Incident_Type AS T2 ON T1.incident_type_code = T2.incident_type_code GROUP BY T1.incident_type_code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT incident_type_code, incident_type_description FROM Ref_Incident_Type WHERE incident_type_code IN (SELECT incident_type_code FROM Behavior_Incident GROUP BY incident_type_code ORDER BY COUNT(*) DESC LIMIT 1)", "source_tables": ["ref_incident_type", "behavior_incident"], "error_info": ""}, {"sample_id": 3111, "db_id": "behavior_monitoring", "score": 1, "gold_sql": "SELECT T1.detention_type_code, T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code = T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY COUNT(*) ASC LIMIT 1", "pred_sql": "SELECT detention_type_code, detention_type_description FROM Ref_Detention_Type WHERE detention_type_code = (SELECT detention_type_code FROM Detention GROUP BY detention_type_code ORDER BY COUNT(*) ASC LIMIT 1)", "source_tables": ["ref_detention_type", "detention"], "error_info": ""}, {"sample_id": 3112, "db_id": "behavior_monitoring", "score": 1, "gold_sql": "SELECT T1.date_of_notes FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = 'Fanny'", "pred_sql": "SELECT Assessment_Notes.date_of_notes FROM Assessment_Notes JOIN Students ON Assessment_Notes.student_id = Students.student_id WHERE Students.first_name = 'Fanny'", "source_tables": ["students", "assessment_notes"], "error_info": ""}, {"sample_id": 3113, "db_id": "behavior_monitoring", "score": 1, "gold_sql": "SELECT T1.text_of_notes FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.last_name = 'Schuster'", "pred_sql": "SELECT Assessment_Notes.text_of_notes FROM Assessment_Notes JOIN Teachers ON Assessment_Notes.teacher_id = Teachers.teacher_id WHERE Teachers.last_name = 'Schuster'", "source_tables": ["teachers", "assessment_notes"], "error_info": ""}, {"sample_id": 3114, "db_id": "behavior_monitoring", "score": 1, "gold_sql": "SELECT T1.date_incident_start, date_incident_end FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.last_name = 'Fahey'", "pred_sql": "SELECT Behavior_Incident.date_incident_start, Behavior_Incident.date_incident_end FROM Behavior_Incident JOIN Students ON Behavior_Incident.student_id = Students.student_id WHERE Students.last_name = 'Fahey'", "source_tables": ["behavior_incident", "students"], "error_info": ""}, {"sample_id": 3115, "db_id": "behavior_monitoring", "score": 1, "gold_sql": "SELECT T1.datetime_detention_start, datetime_detention_end FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.last_name = 'Schultz'", "pred_sql": "SELECT Detention.datetime_detention_start, Detention.datetime_detention_end FROM Detention JOIN Teachers ON Detention.teacher_id = Teachers.teacher_id WHERE Teachers.last_name = 'Schultz'", "source_tables": ["teachers", "detention"], "error_info": ""}, {"sample_id": 3116, "db_id": "behavior_monitoring", "score": 1, "gold_sql": "SELECT T2.address_id, T1.zip_postcode FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id ORDER BY monthly_rental DESC LIMIT 1", "pred_sql": "SELECT a.address_id, a.zip_postcode FROM Addresses AS a JOIN Student_Addresses AS sa ON a.address_id = sa.address_id ORDER BY sa.monthly_rental DESC LIMIT 1", "source_tables": ["addresses", "student_addresses"], "error_info": ""}, {"sample_id": 3117, "db_id": "behavior_monitoring", "score": 1, "gold_sql": "SELECT T2.cell_mobile_number FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.monthly_rental ASC LIMIT 1", "pred_sql": "SELECT S.cell_mobile_number FROM Students AS S JOIN Student_Addresses AS SA ON S.student_id = SA.student_id JOIN Addresses AS A ON SA.address_id = A.address_id ORDER BY SA.monthly_rental ASC LIMIT 1", "source_tables": ["student_addresses", "students"], "error_info": ""}, {"sample_id": 3118, "db_id": "behavior_monitoring", "score": 1, "gold_sql": "SELECT T2.monthly_rental FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id WHERE T1.state_province_county = 'Texas'", "pred_sql": "SELECT sa.monthly_rental FROM Student_Addresses AS sa JOIN Addresses AS a ON sa.address_id = a.address_id WHERE a.state_province_county = 'Texas'", "source_tables": ["addresses", "student_addresses"], "error_info": ""}, {"sample_id": 3119, "db_id": "behavior_monitoring", "score": 1, "gold_sql": "SELECT T2.first_name, T2.last_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.address_id WHERE T1.state_province_county = 'Wisconsin'", "pred_sql": "SELECT first_name, last_name FROM Students JOIN Addresses ON Students.address_id = Addresses.address_id WHERE Addresses.state_province_county = 'Wisconsin'", "source_tables": ["addresses", "students"], "error_info": ""}, {"sample_id": 3120, "db_id": "behavior_monitoring", "score": 1, "gold_sql": "SELECT T1.line_1, AVG(T2.monthly_rental) FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id GROUP BY T2.address_id", "pred_sql": "SELECT Addresses.line_1, AVG(Student_Addresses.monthly_rental) AS average_monthly_rental FROM Student_Addresses JOIN Addresses ON Student_Addresses.address_id = Addresses.address_id GROUP BY Addresses.line_1", "source_tables": ["addresses", "student_addresses"], "error_info": ""}, {"sample_id": 3121, "db_id": "behavior_monitoring", "score": 1, "gold_sql": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id = T2.address_id WHERE T2.first_name = 'Lyla'", "pred_sql": "SELECT Addresses.zip_postcode FROM Teachers JOIN Addresses ON Teachers.address_id = Addresses.address_id WHERE Teachers.first_name = 'Lyla'", "source_tables": ["addresses", "teachers"], "error_info": ""}, {"sample_id": 3122, "db_id": "behavior_monitoring", "score": 1, "gold_sql": "SELECT T2.email_address FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id = T2.address_id WHERE T1.zip_postcode = '918'", "pred_sql": "SELECT Teachers.email_address FROM Teachers JOIN Addresses ON Teachers.address_id = Addresses.address_id WHERE Addresses.zip_postcode = '918'", "source_tables": ["addresses", "teachers"], "error_info": ""}, {"sample_id": 3123, "db_id": "behavior_monitoring", "score": 1, "gold_sql": "SELECT COUNT(*) FROM STUDENTS WHERE NOT student_id IN (SELECT student_id FROM Behavior_Incident)", "pred_sql": "SELECT COUNT(*) AS student_count FROM Students WHERE NOT student_id IN (SELECT student_id FROM Behavior_Incident)", "source_tables": ["behavior_incident", "students"], "error_info": ""}, {"sample_id": 3124, "db_id": "behavior_monitoring", "score": 0, "gold_sql": "SELECT last_name FROM Teachers EXCEPT SELECT T1.last_name FROM Teachers AS T1 JOIN Detention AS T2 ON T1.teacher_id = T2.teacher_id", "pred_sql": "SELECT last_name FROM Teachers WHERE NOT teacher_id IN (SELECT teacher_id FROM Detention)", "source_tables": ["teachers", "detention"], "error_info": "Result not equal"}, {"sample_id": 3125, "db_id": "behavior_monitoring", "score": 1, "gold_sql": "SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.address_id INTERSECT SELECT T1.line_1 FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id = T2.address_id", "pred_sql": "SELECT DISTINCT Addresses.line_1 FROM Addresses JOIN Students ON Addresses.address_id = Students.address_id JOIN Teachers ON Addresses.address_id = Teachers.address_id", "source_tables": ["addresses", "teachers", "students"], "error_info": ""}, {"sample_id": 3126, "db_id": "assets_maintenance", "score": 0, "gold_sql": "SELECT T1.asset_id, T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id = T2.asset_id GROUP BY T1.asset_id HAVING COUNT(*) = 2 INTERSECT SELECT T1.asset_id, T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id = T2.asset_id GROUP BY T1.asset_id HAVING COUNT(*) < 2", "pred_sql": "SELECT a.asset_id, a.asset_details FROM Assets AS a JOIN Asset_Parts AS ap ON a.asset_id = ap.asset_id LEFT JOIN Fault_Log AS fl ON a.asset_id = fl.asset_id GROUP BY a.asset_id HAVING COUNT(ap.part_id) = 2 AND COUNT(fl.fault_log_entry_id) < 2", "source_tables": ["assets", "asset_parts", "fault_log"], "error_info": "Result not equal"}, {"sample_id": 3127, "db_id": "assets_maintenance", "score": 1, "gold_sql": "SELECT COUNT(*), T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id = T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id", "pred_sql": "SELECT maintenance_contract_id, COUNT(asset_id) AS asset_count FROM Assets GROUP BY maintenance_contract_id", "source_tables": ["assets", "maintenance_contracts"], "error_info": ""}, {"sample_id": 3128, "db_id": "assets_maintenance", "score": 1, "gold_sql": "SELECT COUNT(*), T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id = T2.supplier_company_id GROUP BY T1.company_id", "pred_sql": "SELECT supplier_company_id, COUNT(asset_id) AS asset_count FROM Assets GROUP BY supplier_company_id", "source_tables": ["assets", "third_party_companies"], "error_info": ""}, {"sample_id": 3129, "db_id": "assets_maintenance", "score": 1, "gold_sql": "SELECT T1.company_id, T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id HAVING COUNT(*) >= 2 UNION SELECT T3.company_id, T3.company_name FROM Third_Party_Companies AS T3 JOIN Maintenance_Contracts AS T4 ON T3.company_id = T4.maintenance_contract_company_id GROUP BY T3.company_id HAVING COUNT(*) >= 2", "pred_sql": "SELECT company_id, company_name FROM Third_Party_Companies WHERE company_id IN (SELECT company_id FROM Maintenance_Engineers GROUP BY company_id HAVING COUNT(engineer_id) >= 2) OR company_id IN (SELECT maintenance_contract_company_id FROM Maintenance_Contracts GROUP BY maintenance_contract_company_id HAVING COUNT(maintenance_contract_id) >= 2)", "source_tables": ["maintenance_engineers", "maintenance_contracts", "third_party_companies"], "error_info": ""}, {"sample_id": 3130, "db_id": "assets_maintenance", "score": 1, "gold_sql": "SELECT T1.staff_name, T1.staff_id FROM Staff AS T1 JOIN Fault_Log AS T2 ON T1.staff_id = T2.recorded_by_staff_id EXCEPT SELECT T3.staff_name, T3.staff_id FROM Staff AS T3 JOIN Engineer_Visits AS T4 ON T3.staff_id = T4.contact_staff_id", "pred_sql": "SELECT Staff.staff_id, Staff.staff_name FROM Staff WHERE NOT Staff.staff_id IN (SELECT Engineer_Visits.contact_staff_id FROM Engineer_Visits) AND Staff.staff_id IN (SELECT Fault_Log.recorded_by_staff_id FROM Fault_Log)", "source_tables": ["staff", "engineer_visits", "fault_log"], "error_info": ""}, {"sample_id": 3131, "db_id": "assets_maintenance", "score": 0, "gold_sql": "SELECT T1.engineer_id, T1.first_name, T1.last_name FROM Maintenance_Engineers AS T1, Engineer_Visits AS T2 GROUP BY T1.engineer_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT engineer_id, first_name, last_name FROM Maintenance_Engineers WHERE engineer_id IN (SELECT engineer_id FROM Engineer_Visits GROUP BY engineer_id ORDER BY COUNT(engineer_visit_id) DESC LIMIT 1)", "source_tables": ["maintenance_engineers", "engineer_visits"], "error_info": "Result not equal"}, {"sample_id": 3132, "db_id": "assets_maintenance", "score": 1, "gold_sql": "SELECT T1.part_name, T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_id HAVING COUNT(*) > 2", "pred_sql": "SELECT p.part_id, p.part_name FROM Parts AS p JOIN Part_Faults AS pf ON p.part_id = pf.part_id GROUP BY p.part_id, p.part_name HAVING COUNT(pf.part_fault_id) > 2", "source_tables": ["part_faults", "parts"], "error_info": ""}, {"sample_id": 3133, "db_id": "assets_maintenance", "score": 1, "gold_sql": "SELECT T1.first_name, T1.last_name, T1.other_details, T3.skill_description FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id", "pred_sql": "SELECT me.first_name, me.last_name, me.other_details, s.skill_description FROM Maintenance_Engineers AS me JOIN Engineer_Skills AS es ON me.engineer_id = es.engineer_id JOIN Skills AS s ON es.skill_id = s.skill_id", "source_tables": ["maintenance_engineers", "engineer_skills", "skills"], "error_info": ""}, {"sample_id": 3134, "db_id": "assets_maintenance", "score": 0, "gold_sql": "SELECT T1.fault_short_name, T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id = T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id", "pred_sql": "SELECT pf.fault_description, s.skill_description FROM Part_Faults AS pf JOIN Skills_Required_To_Fix AS srf ON pf.part_fault_id = srf.part_fault_id JOIN Skills AS s ON srf.skill_id = s.skill_id", "source_tables": ["part_faults", "skills", "skills_required_to_fix"], "error_info": "Result not equal"}, {"sample_id": 3135, "db_id": "assets_maintenance", "score": 1, "gold_sql": "SELECT T1.part_name, COUNT(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_name", "pred_sql": "SELECT Parts.part_name, COUNT(Asset_Parts.asset_id) AS asset_count FROM Parts JOIN Asset_Parts ON Parts.part_id = Asset_Parts.part_id GROUP BY Parts.part_name", "source_tables": ["asset_parts", "parts"], "error_info": ""}, {"sample_id": 3136, "db_id": "assets_maintenance", "score": 0, "gold_sql": "SELECT T1.fault_description, T2.fault_status FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id", "pred_sql": "SELECT fault_description, fault_status FROM Fault_Log", "source_tables": ["fault_log_parts", "fault_log"], "error_info": "Predction Execution Error:no such column: fault_status"}, {"sample_id": 3137, "db_id": "assets_maintenance", "score": 1, "gold_sql": "SELECT COUNT(*), T1.fault_log_entry_id FROM Fault_Log AS T1 JOIN Engineer_Visits AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT fault_log_entry_id, COUNT(engineer_visit_id) AS visit_count FROM Engineer_Visits GROUP BY fault_log_entry_id ORDER BY visit_count DESC LIMIT 1", "source_tables": ["engineer_visits", "fault_log"], "error_info": ""}, {"sample_id": 3138, "db_id": "assets_maintenance", "score": 1, "gold_sql": "SELECT DISTINCT last_name FROM Maintenance_Engineers", "pred_sql": "SELECT DISTINCT last_name FROM Maintenance_Engineers", "source_tables": ["maintenance_engineers"], "error_info": ""}, {"sample_id": 3139, "db_id": "assets_maintenance", "score": 0, "gold_sql": "SELECT DISTINCT fault_status FROM Fault_Log_Parts", "pred_sql": "SELECT COUNT(DISTINCT fault_status) AS unique_fault_status_count FROM Fault_Log_Parts", "source_tables": ["fault_log_parts"], "error_info": "Result not equal"}, {"sample_id": 3140, "db_id": "assets_maintenance", "score": 1, "gold_sql": "SELECT first_name, last_name FROM Maintenance_Engineers WHERE NOT engineer_id IN (SELECT engineer_id FROM Engineer_Visits)", "pred_sql": "SELECT first_name, last_name FROM Maintenance_Engineers WHERE NOT engineer_id IN (SELECT engineer_id FROM Engineer_Visits)", "source_tables": ["maintenance_engineers", "engineer_visits"], "error_info": ""}, {"sample_id": 3141, "db_id": "assets_maintenance", "score": 1, "gold_sql": "SELECT asset_id, asset_details, asset_make, asset_model FROM Assets", "pred_sql": "SELECT asset_id, asset_details, asset_make, asset_model FROM Assets", "source_tables": ["assets"], "error_info": ""}, {"sample_id": 3142, "db_id": "assets_maintenance", "score": 1, "gold_sql": "SELECT asset_acquired_date FROM Assets ORDER BY asset_acquired_date ASC LIMIT 1", "pred_sql": "SELECT MIN(asset_acquired_date) AS first_acquired_date FROM Assets", "source_tables": ["assets"], "error_info": ""}, {"sample_id": 3143, "db_id": "assets_maintenance", "score": 0, "gold_sql": "SELECT T1.part_id, T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id = T3.part_fault_id GROUP BY T1.part_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT pf.part_id, p.part_name, COUNT(sr.skill_id) AS skill_count FROM Part_Faults AS pf JOIN Skills_Required_To_Fix AS sr ON pf.part_fault_id = sr.part_fault_id JOIN Parts AS p ON pf.part_id = p.part_id GROUP BY pf.part_id, p.part_name ORDER BY skill_count DESC LIMIT 1", "source_tables": ["part_faults", "parts", "skills_required_to_fix"], "error_info": "Result not equal"}, {"sample_id": 3144, "db_id": "assets_maintenance", "score": 1, "gold_sql": "SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_name ORDER BY COUNT(*) ASC LIMIT 1", "pred_sql": "SELECT p.part_name FROM Parts AS p JOIN Part_Faults AS pf ON p.part_id = pf.part_id GROUP BY p.part_id ORDER BY COUNT(pf.part_fault_id) ASC LIMIT 1", "source_tables": ["part_faults", "parts"], "error_info": ""}, {"sample_id": 3145, "db_id": "assets_maintenance", "score": 1, "gold_sql": "SELECT T1.engineer_id, T1.first_name, T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id = T2.engineer_id GROUP BY T1.engineer_id ORDER BY COUNT(*) ASC LIMIT 1", "pred_sql": "SELECT engineer_id, first_name, last_name FROM Maintenance_Engineers WHERE engineer_id IN (SELECT engineer_id FROM Engineer_Visits GROUP BY engineer_id ORDER BY COUNT(engineer_visit_id) ASC LIMIT 1)", "source_tables": ["maintenance_engineers", "engineer_visits"], "error_info": ""}, {"sample_id": 3146, "db_id": "assets_maintenance", "score": 1, "gold_sql": "SELECT T1.staff_name, T3.first_name, T3.last_name FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id", "pred_sql": "SELECT Staff.staff_name, Maintenance_Engineers.first_name, Maintenance_Engineers.last_name FROM Engineer_Visits JOIN Staff ON Engineer_Visits.contact_staff_id = Staff.staff_id JOIN Maintenance_Engineers ON Engineer_Visits.engineer_id = Maintenance_Engineers.engineer_id", "source_tables": ["maintenance_engineers", "staff", "engineer_visits"], "error_info": ""}, {"sample_id": 3147, "db_id": "assets_maintenance", "score": 1, "gold_sql": "SELECT T1.fault_log_entry_id, T1.fault_description, T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT fl.fault_log_entry_id, fl.fault_description, fl.fault_log_entry_datetime FROM Fault_Log AS fl JOIN Fault_Log_Parts AS flp ON fl.fault_log_entry_id = flp.fault_log_entry_id GROUP BY fl.fault_log_entry_id ORDER BY COUNT(flp.part_fault_id) DESC LIMIT 1", "source_tables": ["fault_log_parts", "fault_log"], "error_info": ""}, {"sample_id": 3148, "db_id": "assets_maintenance", "score": 1, "gold_sql": "SELECT T1.skill_id, T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id = T2.skill_id GROUP BY T1.skill_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT s.skill_id, s.skill_description FROM Skills AS s JOIN Skills_Required_To_Fix AS sr ON s.skill_id = sr.skill_id JOIN Part_Faults AS pf ON sr.part_fault_id = pf.part_fault_id GROUP BY s.skill_id, s.skill_description ORDER BY COUNT(pf.part_fault_id) DESC LIMIT 1", "source_tables": ["skills", "skills_required_to_fix"], "error_info": ""}, {"sample_id": 3149, "db_id": "assets_maintenance", "score": 1, "gold_sql": "SELECT DISTINCT asset_model FROM Assets", "pred_sql": "SELECT DISTINCT asset_model FROM Assets", "source_tables": ["assets"], "error_info": ""}, {"sample_id": 3150, "db_id": "assets_maintenance", "score": 1, "gold_sql": "SELECT asset_make, asset_model, asset_details FROM Assets ORDER BY asset_disposed_date ASC", "pred_sql": "SELECT asset_make, asset_model, asset_details FROM Assets ORDER BY asset_disposed_date ASC", "source_tables": ["assets"], "error_info": ""}, {"sample_id": 3151, "db_id": "assets_maintenance", "score": 1, "gold_sql": "SELECT part_id, chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1", "pred_sql": "SELECT part_id, chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1", "source_tables": ["parts"], "error_info": ""}, {"sample_id": 3152, "db_id": "assets_maintenance", "score": 1, "gold_sql": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id = T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1", "pred_sql": "SELECT tc.company_name FROM Third_Party_Companies AS tc JOIN Maintenance_Contracts AS mc ON tc.company_id = mc.maintenance_contract_company_id ORDER BY mc.contract_start_date ASC LIMIT 1", "source_tables": ["maintenance_contracts", "third_party_companies"], "error_info": ""}, {"sample_id": 3154, "db_id": "assets_maintenance", "score": 0, "gold_sql": "SELECT gender FROM staff GROUP BY gender ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT gender, COUNT(*) AS count FROM Staff GROUP BY gender ORDER BY count DESC LIMIT 1", "source_tables": ["staff"], "error_info": "Result not equal"}, {"sample_id": 3155, "db_id": "assets_maintenance", "score": 1, "gold_sql": "SELECT T1.staff_name, COUNT(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name", "pred_sql": "SELECT Staff.staff_name, COUNT(Engineer_Visits.engineer_id) AS number_of_engineers_contacted FROM Engineer_Visits JOIN Staff ON Engineer_Visits.contact_staff_id = Staff.staff_id GROUP BY Staff.staff_name", "source_tables": ["staff", "engineer_visits"], "error_info": ""}, {"sample_id": 3156, "db_id": "assets_maintenance", "score": 1, "gold_sql": "SELECT asset_model FROM Assets WHERE NOT asset_id IN (SELECT asset_id FROM Fault_Log)", "pred_sql": "SELECT asset_model FROM Assets WHERE NOT asset_id IN (SELECT DISTINCT asset_id FROM Fault_Log)", "source_tables": ["assets", "fault_log"], "error_info": ""}, {"sample_id": 3157, "db_id": "station_weather", "score": 1, "gold_sql": "SELECT local_authority, services FROM station", "pred_sql": "SELECT local_authority, services FROM station", "source_tables": ["station"], "error_info": ""}, {"sample_id": 3158, "db_id": "station_weather", "score": 1, "gold_sql": "SELECT train_number, name FROM train ORDER BY TIME", "pred_sql": "SELECT train_number, name FROM train ORDER BY time ASC", "source_tables": ["train"], "error_info": ""}, {"sample_id": 3159, "db_id": "station_weather", "score": 0, "gold_sql": "SELECT TIME, train_number FROM train WHERE destination = 'Chennai' ORDER BY TIME", "pred_sql": "SELECT train.train_number, train.time FROM train JOIN route ON train.id = route.train_id JOIN station ON route.station_id = station.id WHERE station.network_name = 'Chennai' ORDER BY train.time", "source_tables": ["train"], "error_info": "Result not equal"}, {"sample_id": 3160, "db_id": "station_weather", "score": 1, "gold_sql": "SELECT COUNT(*) FROM train WHERE name LIKE '%Express%'", "pred_sql": "SELECT COUNT(*) AS train_count FROM train WHERE name LIKE '%Express%'", "source_tables": ["train"], "error_info": ""}, {"sample_id": 3161, "db_id": "station_weather", "score": 0, "gold_sql": "SELECT train_number, TIME FROM train WHERE origin = 'Chennai' AND destination = 'Guruvayur'", "pred_sql": "SELECT train.train_number, train.time FROM train JOIN route ON train.id = route.train_id JOIN station ON route.station_id = station.id WHERE train.origin = 'Chennai' AND train.destination = 'Guruvayur'", "source_tables": ["train"], "error_info": "Result not equal"}, {"sample_id": 3162, "db_id": "station_weather", "score": 1, "gold_sql": "SELECT origin, COUNT(*) FROM train GROUP BY origin", "pred_sql": "SELECT origin, COUNT(*) AS number_of_trains FROM train GROUP BY origin", "source_tables": ["train"], "error_info": ""}, {"sample_id": 3163, "db_id": "station_weather", "score": 1, "gold_sql": "SELECT t1.name FROM train AS t1 JOIN route AS t2 ON t1.id = t2.train_id GROUP BY t2.train_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT train.name FROM train JOIN route ON train.id = route.train_id GROUP BY train.id ORDER BY COUNT(route.station_id) DESC LIMIT 1", "source_tables": ["train", "route"], "error_info": ""}, {"sample_id": 3164, "db_id": "station_weather", "score": 0, "gold_sql": "SELECT COUNT(*), t1.network_name, t1.services FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id GROUP BY t2.station_id", "pred_sql": "SELECT s.network_name, s.services, COUNT(r.train_id) AS number_of_trains FROM station AS s LEFT JOIN route AS r ON s.id = r.station_id GROUP BY s.id, s.network_name, s.services", "source_tables": ["route", "station"], "error_info": "Result not equal"}, {"sample_id": 3165, "db_id": "station_weather", "score": 1, "gold_sql": "SELECT AVG(high_temperature), day_of_week FROM weekly_weather GROUP BY day_of_week", "pred_sql": "SELECT day_of_week, AVG(high_temperature) AS average_high_temperature FROM weekly_weather GROUP BY day_of_week", "source_tables": ["weekly_weather"], "error_info": ""}, {"sample_id": 3166, "db_id": "station_weather", "score": 1, "gold_sql": "SELECT MAX(t1.low_temperature), AVG(t1.precipitation) FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id WHERE t2.network_name = 'Amersham'", "pred_sql": "SELECT MAX(weekly_weather.low_temperature) AS max_low_temp, AVG(weekly_weather.precipitation) AS avg_precipitation FROM weekly_weather JOIN station ON weekly_weather.station_id = station.id WHERE station.network_name = 'Amersham'", "source_tables": ["station", "weekly_weather"], "error_info": ""}, {"sample_id": 3167, "db_id": "station_weather", "score": 1, "gold_sql": "SELECT t3.name, t3.time FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = 'Chiltern'", "pred_sql": "SELECT train.name, train.time FROM train JOIN route ON train.id = route.train_id JOIN station ON route.station_id = station.id WHERE station.local_authority = 'Chiltern'", "source_tables": ["route", "station", "train"], "error_info": ""}, {"sample_id": 3168, "db_id": "station_weather", "score": 0, "gold_sql": "SELECT COUNT(DISTINCT services) FROM station", "pred_sql": "SELECT SUM(services) AS total_services FROM station", "source_tables": ["station"], "error_info": "Result not equal"}, {"sample_id": 3169, "db_id": "station_weather", "score": 1, "gold_sql": "SELECT t2.id, t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id GROUP BY t1.station_id ORDER BY AVG(high_temperature) DESC LIMIT 1", "pred_sql": "SELECT station.id, station.local_authority FROM station JOIN weekly_weather ON station.id = weekly_weather.station_id GROUP BY station.id, station.local_authority ORDER BY AVG(weekly_weather.high_temperature) DESC LIMIT 1", "source_tables": ["station", "weekly_weather"], "error_info": ""}, {"sample_id": 3170, "db_id": "station_weather", "score": 0, "gold_sql": "SELECT t2.id, t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id GROUP BY t1.station_id HAVING MAX(t1.precipitation) > 50", "pred_sql": "SELECT station.id, station.local_authority FROM station JOIN weekly_weather ON station.id = weekly_weather.station_id WHERE weekly_weather.precipitation > 50", "source_tables": ["station", "weekly_weather"], "error_info": "Result not equal"}, {"sample_id": 3171, "db_id": "station_weather", "score": 1, "gold_sql": "SELECT MIN(low_temperature), MAX(wind_speed_mph) FROM weekly_weather", "pred_sql": "SELECT MIN(low_temperature) AS lowest_low_temperature, MAX(wind_speed_mph) AS highest_wind_speed FROM weekly_weather", "source_tables": ["weekly_weather"], "error_info": ""}, {"sample_id": 3172, "db_id": "station_weather", "score": 1, "gold_sql": "SELECT origin FROM train GROUP BY origin HAVING COUNT(*) > 1", "pred_sql": "SELECT origin FROM train GROUP BY origin HAVING COUNT(*) > 1", "source_tables": ["train"], "error_info": ""}, {"sample_id": 3173, "db_id": "college_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE DEPT_NAME = 'Accounting'", "pred_sql": "SELECT COUNT(*) AS number_of_professors FROM PROFESSOR WHERE DEPT_CODE = (SELECT DEPT_CODE FROM DEPARTMENT WHERE DEPT_NAME = 'Accounting')", "source_tables": ["department", "professor"], "error_info": ""}, {"sample_id": 3174, "db_id": "college_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE DEPT_NAME = 'Accounting'", "pred_sql": "SELECT COUNT(*) AS professor_count FROM PROFESSOR INNER JOIN DEPARTMENT ON PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE WHERE DEPARTMENT.DEPT_NAME = 'Accounting'", "source_tables": ["department", "professor"], "error_info": ""}, {"sample_id": 3175, "db_id": "college_1", "score": 0, "gold_sql": "SELECT COUNT(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE = 'ACCT-211'", "pred_sql": "SELECT COUNT(*) AS professor_count FROM CLASS WHERE CLASS_CODE = 'ACCT-211'", "source_tables": ["class"], "error_info": "Result not equal"}, {"sample_id": 3176, "db_id": "college_1", "score": 0, "gold_sql": "SELECT COUNT(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE = 'ACCT-211'", "pred_sql": "SELECT COUNT(DISTINCT p.EMP_NUM) AS professor_count FROM CLASS AS c JOIN PROFESSOR AS p ON c.PROF_NUM = p.EMP_NUM WHERE c.CLASS_CODE = 'ACCT-211'", "source_tables": ["class"], "error_info": "Result not equal"}, {"sample_id": 3177, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T3.EMP_FNAME, T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM = T3.EMP_NUM WHERE DEPT_NAME = 'Biology'", "pred_sql": "SELECT EMP_FNAME, EMP_LNAME FROM EMPLOYEE INNER JOIN PROFESSOR ON EMPLOYEE.EMP_NUM = PROFESSOR.EMP_NUM INNER JOIN DEPARTMENT ON PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE WHERE DEPARTMENT.DEPT_NAME = 'Biology'", "source_tables": ["department", "professor", "employee"], "error_info": ""}, {"sample_id": 3178, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T3.EMP_FNAME, T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM = T3.EMP_NUM WHERE DEPT_NAME = 'Biology'", "pred_sql": "SELECT EMP_FNAME, EMP_LNAME FROM EMPLOYEE INNER JOIN PROFESSOR ON EMPLOYEE.EMP_NUM = PROFESSOR.EMP_NUM INNER JOIN DEPARTMENT ON PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE WHERE DEPARTMENT.DEPT_NAME = 'Biology'", "source_tables": ["department", "professor", "employee"], "error_info": ""}, {"sample_id": 3179, "db_id": "college_1", "score": 0, "gold_sql": "SELECT DISTINCT T1.EMP_FNAME, T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = 'ACCT-211'", "pred_sql": "SELECT EMPLOYEE.EMP_FNAME, EMPLOYEE.EMP_DOB FROM PROFESSOR JOIN EMPLOYEE ON PROFESSOR.EMP_NUM = EMPLOYEE.EMP_NUM JOIN COURSE ON PROFESSOR.DEPT_CODE = COURSE.DEPT_CODE WHERE COURSE.CRS_CODE = 'ACCT-211'", "source_tables": ["employee", "class"], "error_info": "Result not equal"}, {"sample_id": 3180, "db_id": "college_1", "score": 0, "gold_sql": "SELECT DISTINCT T1.EMP_FNAME, T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = 'ACCT-211'", "pred_sql": "SELECT EMPLOYEE.EMP_FNAME, EMPLOYEE.EMP_DOB FROM PROFESSOR JOIN EMPLOYEE ON PROFESSOR.EMP_NUM = EMPLOYEE.EMP_NUM JOIN CLASS ON PROFESSOR.EMP_NUM = CLASS.PROF_NUM WHERE CLASS.CRS_CODE = 'ACCT-211'", "source_tables": ["employee", "class"], "error_info": "Result not equal"}, {"sample_id": 3181, "db_id": "college_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE T1.EMP_LNAME = 'Graztevski'", "pred_sql": "SELECT COUNT(*) AS class_count FROM CLASS WHERE PROF_NUM IN (SELECT EMP_NUM FROM EMPLOYEE WHERE EMP_LNAME = 'Graztevski')", "source_tables": ["employee", "class"], "error_info": ""}, {"sample_id": 3182, "db_id": "college_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE T1.EMP_LNAME = 'Graztevski'", "pred_sql": "SELECT COUNT(*) AS class_count FROM CLASS WHERE PROF_NUM = (SELECT EMP_NUM FROM EMPLOYEE WHERE EMP_LNAME = 'Graztevski')", "source_tables": ["employee", "class"], "error_info": ""}, {"sample_id": 3183, "db_id": "college_1", "score": 1, "gold_sql": "SELECT school_code FROM department WHERE dept_name = 'Accounting'", "pred_sql": "SELECT SCHOOL_CODE FROM DEPARTMENT WHERE DEPT_NAME = 'Accounting'", "source_tables": ["department"], "error_info": ""}, {"sample_id": 3184, "db_id": "college_1", "score": 1, "gold_sql": "SELECT school_code FROM department WHERE dept_name = 'Accounting'", "pred_sql": "SELECT SCHOOL_CODE FROM DEPARTMENT WHERE DEPT_NAME = 'Accounting'", "source_tables": ["department"], "error_info": ""}, {"sample_id": 3185, "db_id": "college_1", "score": 1, "gold_sql": "SELECT crs_credit, crs_description FROM course WHERE crs_code = 'CIS-220'", "pred_sql": "SELECT CRS_CREDIT, CRS_DESCRIPTION FROM COURSE WHERE CRS_CODE = 'CIS-220'", "source_tables": ["course"], "error_info": ""}, {"sample_id": 3186, "db_id": "college_1", "score": 1, "gold_sql": "SELECT crs_credit, crs_description FROM course WHERE crs_code = 'CIS-220'", "pred_sql": "SELECT CRS_DESCRIPTION, CRS_CREDIT FROM COURSE WHERE CRS_CODE = 'CIS-220'", "source_tables": ["course"], "error_info": ""}, {"sample_id": 3187, "db_id": "college_1", "score": 1, "gold_sql": "SELECT dept_address FROM department WHERE dept_name = 'History'", "pred_sql": "SELECT DEPT_ADDRESS FROM DEPARTMENT WHERE DEPT_NAME = 'History'", "source_tables": ["department"], "error_info": ""}, {"sample_id": 3188, "db_id": "college_1", "score": 0, "gold_sql": "SELECT dept_address FROM department WHERE dept_name = 'History'", "pred_sql": "SELECT DEPT_NAME, DEPT_ADDRESS FROM DEPARTMENT WHERE DEPT_NAME = 'History'", "source_tables": ["department"], "error_info": "Result not equal"}, {"sample_id": 3189, "db_id": "college_1", "score": 0, "gold_sql": "SELECT COUNT(DISTINCT dept_address) FROM department WHERE school_code = 'BUS'", "pred_sql": "SELECT COUNT(DISTINCT CLASS_ROOM) AS different_locations FROM CLASS JOIN DEPARTMENT ON CLASS.PROF_NUM = EMPLOYEE.EMP_NUM WHERE DEPARTMENT.SCHOOL_CODE = 'BUS'", "source_tables": ["department"], "error_info": "Predction Execution Error:no such column: EMPLOYEE.EMP_NUM"}, {"sample_id": 3190, "db_id": "college_1", "score": 0, "gold_sql": "SELECT COUNT(DISTINCT dept_address) FROM department WHERE school_code = 'BUS'", "pred_sql": "SELECT DISTINCT DEPT_ADDRESS FROM DEPARTMENT WHERE SCHOOL_CODE = 'BUS'", "source_tables": ["department"], "error_info": "Result not equal"}, {"sample_id": 3191, "db_id": "college_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT dept_address), school_code FROM department GROUP BY school_code", "pred_sql": "SELECT SCHOOL_CODE, COUNT(DISTINCT DEPT_ADDRESS) AS location_count FROM DEPARTMENT GROUP BY SCHOOL_CODE", "source_tables": ["department"], "error_info": ""}, {"sample_id": 3192, "db_id": "college_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT dept_address), school_code FROM department GROUP BY school_code", "pred_sql": "SELECT SCHOOL_CODE, COUNT(DISTINCT DEPT_ADDRESS) AS unique_addresses_count FROM DEPARTMENT GROUP BY SCHOOL_CODE", "source_tables": ["department"], "error_info": ""}, {"sample_id": 3193, "db_id": "college_1", "score": 1, "gold_sql": "SELECT crs_credit, crs_description FROM course WHERE crs_code = 'QM-261'", "pred_sql": "SELECT CRS_DESCRIPTION, CRS_CREDIT FROM COURSE WHERE CRS_CODE = 'QM-261'", "source_tables": ["course"], "error_info": ""}, {"sample_id": 3194, "db_id": "college_1", "score": 1, "gold_sql": "SELECT crs_credit, crs_description FROM course WHERE crs_code = 'QM-261'", "pred_sql": "SELECT CRS_DESCRIPTION, CRS_CREDIT FROM COURSE WHERE CRS_CODE = 'QM-261'", "source_tables": ["course"], "error_info": ""}, {"sample_id": 3195, "db_id": "college_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT dept_name), school_code FROM department GROUP BY school_code", "pred_sql": "SELECT SCHOOL_CODE, COUNT(DEPT_CODE) AS number_of_departments FROM DEPARTMENT GROUP BY SCHOOL_CODE", "source_tables": ["department"], "error_info": ""}, {"sample_id": 3196, "db_id": "college_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT dept_name), school_code FROM department GROUP BY school_code", "pred_sql": "SELECT SCHOOL_CODE, COUNT(DEPT_CODE) AS DEPARTMENT_COUNT FROM DEPARTMENT GROUP BY SCHOOL_CODE", "source_tables": ["department"], "error_info": ""}, {"sample_id": 3197, "db_id": "college_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT dept_name), school_code FROM department GROUP BY school_code HAVING COUNT(DISTINCT dept_name) < 5", "pred_sql": "SELECT SCHOOL_CODE, COUNT(DISTINCT DEPT_CODE) AS num_departments FROM DEPARTMENT GROUP BY SCHOOL_CODE HAVING COUNT(DISTINCT DEPT_CODE) < 5", "source_tables": ["department"], "error_info": ""}, {"sample_id": 3198, "db_id": "college_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT dept_name), school_code FROM department GROUP BY school_code HAVING COUNT(DISTINCT dept_name) < 5", "pred_sql": "SELECT SCHOOL_CODE, COUNT(DISTINCT DEPT_CODE) AS department_count FROM DEPARTMENT GROUP BY SCHOOL_CODE HAVING COUNT(DISTINCT DEPT_CODE) < 5", "source_tables": ["department"], "error_info": ""}, {"sample_id": 3199, "db_id": "college_1", "score": 1, "gold_sql": "SELECT COUNT(*), crs_code FROM CLASS GROUP BY crs_code", "pred_sql": "SELECT CRS_CODE, COUNT(CLASS_SECTION) AS SECTION_COUNT FROM CLASS GROUP BY CRS_CODE", "source_tables": ["class"], "error_info": ""}, {"sample_id": 3200, "db_id": "college_1", "score": 1, "gold_sql": "SELECT COUNT(*), crs_code FROM CLASS GROUP BY crs_code", "pred_sql": "SELECT CRS_CODE, COUNT(CLASS_SECTION) AS SECTION_COUNT FROM CLASS GROUP BY CRS_CODE", "source_tables": ["class"], "error_info": ""}, {"sample_id": 3201, "db_id": "college_1", "score": 0, "gold_sql": "SELECT SUM(crs_credit), dept_code FROM course GROUP BY dept_code", "pred_sql": "SELECT DEPARTMENT.DEPT_NAME, SUM(CAST(COURSE.CRS_CREDIT AS INT)) AS TOTAL_CREDITS FROM DEPARTMENT JOIN COURSE ON DEPARTMENT.DEPT_CODE = COURSE.DEPT_CODE GROUP BY DEPARTMENT.DEPT_NAME", "source_tables": ["course"], "error_info": "Result not equal"}, {"sample_id": 3202, "db_id": "college_1", "score": 0, "gold_sql": "SELECT SUM(crs_credit), dept_code FROM course GROUP BY dept_code", "pred_sql": "SELECT SUM(CRS_CREDIT) AS total_credits FROM COURSE", "source_tables": ["course"], "error_info": "Result not equal"}, {"sample_id": 3203, "db_id": "college_1", "score": 1, "gold_sql": "SELECT COUNT(*), class_room FROM CLASS GROUP BY class_room HAVING COUNT(*) >= 2", "pred_sql": "SELECT CLASS_ROOM, COUNT(*) AS number_of_classes FROM CLASS GROUP BY CLASS_ROOM HAVING COUNT(*) >= 2", "source_tables": ["class"], "error_info": ""}, {"sample_id": 3204, "db_id": "college_1", "score": 1, "gold_sql": "SELECT COUNT(*), class_room FROM CLASS GROUP BY class_room HAVING COUNT(*) >= 2", "pred_sql": "SELECT CLASS_ROOM, COUNT(*) AS class_count FROM CLASS GROUP BY CLASS_ROOM HAVING COUNT(*) >= 2", "source_tables": ["class"], "error_info": ""}, {"sample_id": 3205, "db_id": "college_1", "score": 0, "gold_sql": "SELECT COUNT(*), dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code", "pred_sql": "SELECT DEPARTMENT.DEPT_NAME, COUNT(CLASS.CLASS_CODE) AS NUMBER_OF_CLASSES FROM DEPARTMENT LEFT JOIN CLASS ON DEPARTMENT.DEPT_CODE = CLASS.CRS_CODE GROUP BY DEPARTMENT.DEPT_NAME", "source_tables": ["course", "class"], "error_info": "Result not equal"}, {"sample_id": 3206, "db_id": "college_1", "score": 0, "gold_sql": "SELECT COUNT(*), dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code", "pred_sql": "SELECT DEPARTMENT.DEPT_NAME, COUNT(CLASS.CLASS_CODE) AS CLASS_COUNT FROM DEPARTMENT LEFT JOIN CLASS ON DEPARTMENT.DEPT_CODE = CLASS.CRS_CODE GROUP BY DEPARTMENT.DEPT_NAME", "source_tables": ["course", "class"], "error_info": "Result not equal"}, {"sample_id": 3207, "db_id": "college_1", "score": 1, "gold_sql": "SELECT COUNT(*), T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code JOIN department AS T3 ON T2.dept_code = T3.dept_code GROUP BY T3.school_code", "pred_sql": "SELECT DEPARTMENT.SCHOOL_CODE, COUNT(CLASS.CLASS_CODE) AS number_of_classes FROM CLASS JOIN COURSE ON CLASS.CRS_CODE = COURSE.CRS_CODE JOIN DEPARTMENT ON COURSE.DEPT_CODE = DEPARTMENT.DEPT_CODE GROUP BY DEPARTMENT.SCHOOL_CODE", "source_tables": ["course", "department", "class"], "error_info": ""}, {"sample_id": 3208, "db_id": "college_1", "score": 1, "gold_sql": "SELECT COUNT(*), T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code JOIN department AS T3 ON T2.dept_code = T3.dept_code GROUP BY T3.school_code", "pred_sql": "SELECT DEPARTMENT.SCHOOL_CODE, COUNT(CLASS.CLASS_CODE) AS class_count FROM CLASS JOIN COURSE ON CLASS.CRS_CODE = COURSE.CRS_CODE JOIN DEPARTMENT ON COURSE.DEPT_CODE = DEPARTMENT.DEPT_CODE GROUP BY DEPARTMENT.SCHOOL_CODE", "source_tables": ["course", "department", "class"], "error_info": ""}, {"sample_id": 3209, "db_id": "college_1", "score": 0, "gold_sql": "SELECT COUNT(*), T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code", "pred_sql": "SELECT SCHOOL_CODE, COUNT(DISTINCT EMP_NUM) AS number_of_professors FROM DEPARTMENT JOIN PROFESSOR ON DEPARTMENT.DEPT_CODE = PROFESSOR.DEPT_CODE GROUP BY SCHOOL_CODE", "source_tables": ["department", "professor"], "error_info": "Predction Execution Error:ambiguous column name: EMP_NUM"}, {"sample_id": 3210, "db_id": "college_1", "score": 0, "gold_sql": "SELECT COUNT(*), T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code", "pred_sql": "SELECT COUNT(DISTINCT PROFESSOR.EMP_NUM) AS different_professors FROM PROFESSOR JOIN DEPARTMENT ON PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE", "source_tables": ["department", "professor"], "error_info": "Result not equal"}, {"sample_id": 3211, "db_id": "college_1", "score": 1, "gold_sql": "SELECT emp_jobcode, COUNT(*) FROM employee GROUP BY emp_jobcode ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT EMP_JOBCODE, COUNT(*) AS employee_count FROM EMPLOYEE GROUP BY EMP_JOBCODE ORDER BY employee_count DESC LIMIT 1", "source_tables": ["employee"], "error_info": ""}, {"sample_id": 3212, "db_id": "college_1", "score": 1, "gold_sql": "SELECT emp_jobcode, COUNT(*) FROM employee GROUP BY emp_jobcode ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT EMP_JOBCODE, COUNT(*) AS employee_count FROM EMPLOYEE GROUP BY EMP_JOBCODE ORDER BY employee_count DESC LIMIT 1", "source_tables": ["employee"], "error_info": ""}, {"sample_id": 3213, "db_id": "college_1", "score": 0, "gold_sql": "SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY COUNT(*) LIMIT 1", "pred_sql": "SELECT SCHOOL_CODE, COUNT(PROF_NUM) AS professor_count FROM PROFESSOR JOIN DEPARTMENT ON PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE GROUP BY SCHOOL_CODE ORDER BY professor_count ASC LIMIT 1", "source_tables": ["department", "professor"], "error_info": "Predction Execution Error:no such column: PROF_NUM"}, {"sample_id": 3214, "db_id": "college_1", "score": 0, "gold_sql": "SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY COUNT(*) LIMIT 1", "pred_sql": "SELECT SCHOOL_CODE, COUNT(PROF_NUM) AS professor_count FROM PROFESSOR JOIN DEPARTMENT ON PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE GROUP BY SCHOOL_CODE ORDER BY professor_count ASC LIMIT 1", "source_tables": ["department", "professor"], "error_info": "Predction Execution Error:no such column: PROF_NUM"}, {"sample_id": 3215, "db_id": "college_1", "score": 0, "gold_sql": "SELECT COUNT(*), dept_code FROM professor WHERE prof_high_degree = 'Ph.D.' GROUP BY dept_code", "pred_sql": "SELECT DEPARTMENT.DEPT_NAME, COUNT(PROFESSOR.EMP_NUM) AS NumberOfProfessors FROM PROFESSOR JOIN DEPARTMENT ON PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE WHERE PROFESSOR.PROF_HIGH_DEGREE = 'Ph.D.' GROUP BY DEPARTMENT.DEPT_NAME", "source_tables": ["professor"], "error_info": "Result not equal"}, {"sample_id": 3216, "db_id": "college_1", "score": 0, "gold_sql": "SELECT COUNT(*), dept_code FROM professor WHERE prof_high_degree = 'Ph.D.' GROUP BY dept_code", "pred_sql": "SELECT DEPARTMENT.DEPT_NAME, COUNT(PROFESSOR.EMP_NUM) AS PhD_Professors FROM PROFESSOR JOIN DEPARTMENT ON PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE WHERE PROFESSOR.PROF_HIGH_DEGREE = 'Ph.D.' GROUP BY DEPARTMENT.DEPT_NAME", "source_tables": ["professor"], "error_info": "Result not equal"}, {"sample_id": 3217, "db_id": "college_1", "score": 0, "gold_sql": "SELECT COUNT(*), dept_code FROM student GROUP BY dept_code", "pred_sql": "SELECT DEPARTMENT.DEPT_NAME, COUNT(STUDENT.STU_NUM) AS NUM_STUDENTS FROM DEPARTMENT LEFT JOIN STUDENT ON DEPARTMENT.DEPT_CODE = STUDENT.DEPT_CODE GROUP BY DEPARTMENT.DEPT_NAME", "source_tables": ["student"], "error_info": "Result not equal"}, {"sample_id": 3218, "db_id": "college_1", "score": 0, "gold_sql": "SELECT COUNT(*), dept_code FROM student GROUP BY dept_code", "pred_sql": "SELECT DEPARTMENT.DEPT_NAME, COUNT(STUDENT.STU_NUM) AS STUDENT_COUNT FROM DEPARTMENT LEFT JOIN STUDENT ON DEPARTMENT.DEPT_CODE = STUDENT.DEPT_CODE GROUP BY DEPARTMENT.DEPT_NAME", "source_tables": ["student"], "error_info": "Result not equal"}, {"sample_id": 3219, "db_id": "college_1", "score": 0, "gold_sql": "SELECT SUM(stu_hrs), dept_code FROM student GROUP BY dept_code", "pred_sql": "SELECT DEPARTMENT.DEPT_NAME, SUM(STUDENT.STU_HRS) AS TOTAL_HOURS FROM STUDENT JOIN DEPARTMENT ON STUDENT.DEPT_CODE = DEPARTMENT.DEPT_CODE GROUP BY DEPARTMENT.DEPT_NAME", "source_tables": ["student"], "error_info": "Result not equal"}, {"sample_id": 3220, "db_id": "college_1", "score": 0, "gold_sql": "SELECT SUM(stu_hrs), dept_code FROM student GROUP BY dept_code", "pred_sql": "SELECT DEPARTMENT.DEPT_NAME, SUM(STUDENT.STU_HRS) AS TOTAL_HOURS FROM STUDENT JOIN DEPARTMENT ON STUDENT.DEPT_CODE = DEPARTMENT.DEPT_CODE GROUP BY DEPARTMENT.DEPT_NAME", "source_tables": ["student"], "error_info": "Result not equal"}, {"sample_id": 3221, "db_id": "college_1", "score": 0, "gold_sql": "SELECT MAX(stu_gpa), AVG(stu_gpa), MIN(stu_gpa), dept_code FROM student GROUP BY dept_code", "pred_sql": "SELECT DEPARTMENT.DEPT_NAME, MAX(STUDENT.STU_GPA) AS Max_GPA, AVG(STUDENT.STU_GPA) AS Average_GPA, MIN(STUDENT.STU_GPA) AS Min_GPA FROM STUDENT JOIN DEPARTMENT ON STUDENT.DEPT_CODE = DEPARTMENT.DEPT_CODE GROUP BY DEPARTMENT.DEPT_NAME", "source_tables": ["student"], "error_info": "Result not equal"}, {"sample_id": 3222, "db_id": "college_1", "score": 0, "gold_sql": "SELECT MAX(stu_gpa), AVG(stu_gpa), MIN(stu_gpa), dept_code FROM student GROUP BY dept_code", "pred_sql": "SELECT DEPARTMENT.DEPT_NAME, MAX(STUDENT.STU_GPA) AS Highest_GPA, MIN(STUDENT.STU_GPA) AS Lowest_GPA, AVG(STUDENT.STU_GPA) AS Average_GPA FROM STUDENT JOIN DEPARTMENT ON STUDENT.DEPT_CODE = DEPARTMENT.DEPT_CODE GROUP BY DEPARTMENT.DEPT_NAME", "source_tables": ["student"], "error_info": "Result not equal"}, {"sample_id": 3223, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T2.dept_name, AVG(T1.stu_gpa) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY AVG(T1.stu_gpa) DESC LIMIT 1", "pred_sql": "SELECT DEPARTMENT.DEPT_NAME, AVG(STUDENT.STU_GPA) AS average_gpa FROM DEPARTMENT JOIN STUDENT ON DEPARTMENT.DEPT_CODE = STUDENT.DEPT_CODE GROUP BY DEPARTMENT.DEPT_NAME ORDER BY average_gpa DESC LIMIT 1", "source_tables": ["department", "student"], "error_info": ""}, {"sample_id": 3224, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T2.dept_name, AVG(T1.stu_gpa) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY AVG(T1.stu_gpa) DESC LIMIT 1", "pred_sql": "SELECT DEPARTMENT.DEPT_NAME, AVG(STUDENT.STU_GPA) AS average_gpa FROM DEPARTMENT JOIN STUDENT ON DEPARTMENT.DEPT_CODE = STUDENT.DEPT_CODE GROUP BY DEPARTMENT.DEPT_NAME ORDER BY average_gpa DESC LIMIT 1", "source_tables": ["department", "student"], "error_info": ""}, {"sample_id": 3225, "db_id": "college_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT school_code) FROM department", "pred_sql": "SELECT COUNT(DISTINCT SCHOOL_CODE) AS total_schools FROM DEPARTMENT", "source_tables": ["department"], "error_info": ""}, {"sample_id": 3226, "db_id": "college_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT school_code) FROM department", "pred_sql": "SELECT COUNT(DISTINCT SCHOOL_CODE) AS number_of_schools FROM DEPARTMENT", "source_tables": ["department"], "error_info": ""}, {"sample_id": 3227, "db_id": "college_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT class_code) FROM CLASS", "pred_sql": "SELECT COUNT(DISTINCT CLASS_CODE) AS different_classes FROM CLASS", "source_tables": ["class"], "error_info": ""}, {"sample_id": 3228, "db_id": "college_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT class_code) FROM CLASS", "pred_sql": "SELECT COUNT(DISTINCT CLASS_CODE) AS unique_classes FROM CLASS", "source_tables": ["class"], "error_info": ""}, {"sample_id": 3229, "db_id": "college_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT crs_code) FROM CLASS", "pred_sql": "SELECT COUNT(*) AS total_courses FROM COURSE", "source_tables": ["class"], "error_info": ""}, {"sample_id": 3230, "db_id": "college_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT crs_code) FROM CLASS", "pred_sql": "SELECT COUNT(DISTINCT CRS_CODE) AS number_of_different_course_codes FROM COURSE", "source_tables": ["class"], "error_info": ""}, {"sample_id": 3231, "db_id": "college_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT dept_name) FROM department", "pred_sql": "SELECT COUNT(*) AS department_count FROM DEPARTMENT", "source_tables": ["department"], "error_info": ""}, {"sample_id": 3232, "db_id": "college_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT dept_name) FROM department", "pred_sql": "SELECT COUNT(DISTINCT DEPT_CODE) AS number_of_departments FROM DEPARTMENT", "source_tables": ["department"], "error_info": ""}, {"sample_id": 3233, "db_id": "college_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code = T2.dept_code WHERE dept_name = 'Computer Info. Systems'", "pred_sql": "SELECT COUNT(*) AS course_count FROM COURSE WHERE DEPT_CODE = (SELECT DEPT_CODE FROM DEPARTMENT WHERE DEPT_NAME = 'Computer Info. Systems')", "source_tables": ["course", "department"], "error_info": ""}, {"sample_id": 3234, "db_id": "college_1", "score": 0, "gold_sql": "SELECT COUNT(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code = T2.dept_code WHERE dept_name = 'Computer Info. Systems'", "pred_sql": "SELECT COUNT(*) AS course_count FROM COURSE WHERE DEPT_CODE = (SELECT DEPT_CODE FROM DEPARTMENT WHERE DEPT_NAME = 'Computer Information Systems')", "source_tables": ["course", "department"], "error_info": "Result not equal"}, {"sample_id": 3235, "db_id": "college_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT class_section) FROM CLASS WHERE crs_code = 'ACCT-211'", "pred_sql": "SELECT COUNT(DISTINCT CLASS_SECTION) AS section_count FROM CLASS WHERE CRS_CODE = 'ACCT-211'", "source_tables": ["class"], "error_info": ""}, {"sample_id": 3236, "db_id": "college_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT class_section) FROM CLASS WHERE crs_code = 'ACCT-211'", "pred_sql": "SELECT COUNT(DISTINCT CLASS_SECTION) AS number_of_sections FROM CLASS WHERE CRS_CODE = 'ACCT-211'", "source_tables": ["class"], "error_info": ""}, {"sample_id": 3237, "db_id": "college_1", "score": 0, "gold_sql": "SELECT SUM(T1.crs_credit), T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code GROUP BY T1.dept_code", "pred_sql": "SELECT D.DEPT_NAME, SUM(C.CRS_CREDIT) AS TOTAL_CREDITS FROM DEPARTMENT AS D JOIN COURSE AS C ON D.DEPT_CODE = C.DEPT_CODE JOIN CLASS AS CL ON C.CRS_CODE = CL.CRS_CODE GROUP BY D.DEPT_NAME", "source_tables": ["course", "class"], "error_info": "Result not equal"}, {"sample_id": 3238, "db_id": "college_1", "score": 0, "gold_sql": "SELECT SUM(T1.crs_credit), T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code GROUP BY T1.dept_code", "pred_sql": "SELECT DEPARTMENT.DEPT_NAME, SUM(CAST(COURSE.CRS_CREDIT AS INT)) AS TOTAL_CREDITS FROM DEPARTMENT JOIN COURSE ON DEPARTMENT.DEPT_CODE = COURSE.DEPT_CODE GROUP BY DEPARTMENT.DEPT_NAME", "source_tables": ["course", "class"], "error_info": "Result not equal"}, {"sample_id": 3239, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code JOIN department AS T3 ON T1.dept_code = T3.dept_code GROUP BY T1.dept_code ORDER BY SUM(T1.crs_credit) DESC LIMIT 1", "pred_sql": "SELECT DEPARTMENT.DEPT_NAME FROM DEPARTMENT JOIN COURSE ON DEPARTMENT.DEPT_CODE = COURSE.DEPT_CODE JOIN CLASS ON COURSE.CRS_CODE = CLASS.CRS_CODE GROUP BY DEPARTMENT.DEPT_NAME ORDER BY SUM(CAST(COURSE.CRS_CREDIT AS INT)) DESC LIMIT 1", "source_tables": ["course", "department", "class"], "error_info": ""}, {"sample_id": 3240, "db_id": "college_1", "score": 0, "gold_sql": "SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code JOIN department AS T3 ON T1.dept_code = T3.dept_code GROUP BY T1.dept_code ORDER BY SUM(T1.crs_credit) DESC LIMIT 1", "pred_sql": "SELECT DEPARTMENT.DEPT_NAME, SUM(CAST(COURSE.CRS_CREDIT AS INT)) AS TOTAL_CREDITS FROM DEPARTMENT JOIN COURSE ON DEPARTMENT.DEPT_CODE = COURSE.DEPT_CODE GROUP BY DEPARTMENT.DEPT_NAME ORDER BY TOTAL_CREDITS DESC LIMIT 1", "source_tables": ["course", "department", "class"], "error_info": "Result not equal"}, {"sample_id": 3241, "db_id": "college_1", "score": 0, "gold_sql": "SELECT COUNT(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code WHERE T1.crs_code = 'ACCT-211'", "pred_sql": "SELECT COUNT(*) AS student_count FROM ENROLL WHERE CLASS_CODE = 'ACCT-211'", "source_tables": ["class", "enroll"], "error_info": "Result not equal"}, {"sample_id": 3242, "db_id": "college_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code WHERE T1.crs_code = 'ACCT-211'", "pred_sql": "SELECT COUNT(*) AS total_students FROM ENROLL WHERE CLASS_CODE IN (SELECT CLASS_CODE FROM CLASS WHERE CRS_CODE = 'ACCT-211')", "source_tables": ["class", "enroll"], "error_info": ""}, {"sample_id": 3243, "db_id": "college_1", "score": 0, "gold_sql": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T2.stu_num = T3.stu_num WHERE T1.crs_code = 'ACCT-211'", "pred_sql": "SELECT STUDENT.STU_FNAME FROM STUDENT JOIN ENROLL ON STUDENT.STU_NUM = ENROLL.STU_NUM JOIN CLASS ON ENROLL.CLASS_CODE = CLASS.CLASS_CODE WHERE CLASS.CLASS_CODE = 'ACCT-211'", "source_tables": ["student", "class", "enroll"], "error_info": "Result not equal"}, {"sample_id": 3244, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T2.stu_num = T3.stu_num WHERE T1.crs_code = 'ACCT-211'", "pred_sql": "SELECT STUDENT.STU_FNAME FROM STUDENT JOIN ENROLL ON STUDENT.STU_NUM = ENROLL.STU_NUM JOIN CLASS ON ENROLL.CLASS_CODE = CLASS.CLASS_CODE WHERE CLASS.CRS_CODE = 'ACCT-211'", "source_tables": ["student", "class", "enroll"], "error_info": ""}, {"sample_id": 3245, "db_id": "college_1", "score": 0, "gold_sql": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T2.stu_num = T3.stu_num WHERE T1.crs_code = 'ACCT-211' AND T2.enroll_grade = 'C'", "pred_sql": "SELECT STUDENT.STU_FNAME FROM STUDENT JOIN ENROLL ON STUDENT.STU_NUM = ENROLL.STU_NUM WHERE ENROLL.CLASS_CODE = 'ACCT-211' AND ENROLL.ENROLL_GRADE = 'C'", "source_tables": ["student", "class", "enroll"], "error_info": "Result not equal"}, {"sample_id": 3246, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T2.stu_num = T3.stu_num WHERE T1.crs_code = 'ACCT-211' AND T2.enroll_grade = 'C'", "pred_sql": "SELECT STUDENT.STU_FNAME FROM STUDENT JOIN ENROLL ON STUDENT.STU_NUM = ENROLL.STU_NUM JOIN CLASS ON ENROLL.CLASS_CODE = CLASS.CLASS_CODE WHERE CLASS.CRS_CODE = 'ACCT-211' AND ENROLL.ENROLL_GRADE = 'C'", "source_tables": ["student", "class", "enroll"], "error_info": ""}, {"sample_id": 3247, "db_id": "college_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM employee", "pred_sql": "SELECT COUNT(*) AS total_employees FROM EMPLOYEE", "source_tables": ["employee"], "error_info": ""}, {"sample_id": 3248, "db_id": "college_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM employee", "pred_sql": "SELECT COUNT(*) AS total_employees FROM EMPLOYEE", "source_tables": ["employee"], "error_info": ""}, {"sample_id": 3249, "db_id": "college_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM professor WHERE prof_high_degree = 'Ph.D.'", "pred_sql": "SELECT COUNT(*) AS num_professors FROM PROFESSOR WHERE PROF_HIGH_DEGREE = 'Ph.D.'", "source_tables": ["professor"], "error_info": ""}, {"sample_id": 3250, "db_id": "college_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM professor WHERE prof_high_degree = 'Ph.D.'", "pred_sql": "SELECT COUNT(*) AS total_professors_with_phd FROM PROFESSOR WHERE PROF_HIGH_DEGREE = 'Ph.D.'", "source_tables": ["professor"], "error_info": ""}, {"sample_id": 3251, "db_id": "college_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN department AS T4 ON T3.dept_code = T4.dept_code WHERE T4.dept_name = 'Accounting'", "pred_sql": "SELECT COUNT(DISTINCT ENROLL.STU_NUM) AS student_count FROM ENROLL JOIN CLASS ON ENROLL.CLASS_CODE = CLASS.CLASS_CODE JOIN PROFESSOR ON CLASS.PROF_NUM = PROFESSOR.EMP_NUM JOIN DEPARTMENT ON PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE WHERE DEPARTMENT.DEPT_NAME = 'Accounting'", "source_tables": ["course", "department", "class", "enroll"], "error_info": ""}, {"sample_id": 3252, "db_id": "college_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN department AS T4 ON T3.dept_code = T4.dept_code WHERE T4.dept_name = 'Accounting'", "pred_sql": "SELECT COUNT(DISTINCT ENROLL.STU_NUM) AS student_count FROM ENROLL JOIN CLASS ON ENROLL.CLASS_CODE = CLASS.CLASS_CODE JOIN PROFESSOR ON CLASS.PROF_NUM = PROFESSOR.EMP_NUM JOIN DEPARTMENT ON PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE WHERE DEPARTMENT.DEPT_NAME = 'Accounting'", "source_tables": ["course", "department", "class", "enroll"], "error_info": ""}, {"sample_id": 3253, "db_id": "college_1", "score": 0, "gold_sql": "SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN department AS T4 ON T3.dept_code = T4.dept_code GROUP BY T3.dept_code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT DEPT_NAME FROM DEPARTMENT WHERE DEPT_CODE = (SELECT DEPT_CODE FROM STUDENT GROUP BY DEPT_CODE ORDER BY COUNT(STU_NUM) DESC LIMIT 1)", "source_tables": ["course", "department", "class", "enroll"], "error_info": "Result not equal"}, {"sample_id": 3254, "db_id": "college_1", "score": 0, "gold_sql": "SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN department AS T4 ON T3.dept_code = T4.dept_code GROUP BY T3.dept_code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT DEPT_NAME FROM DEPARTMENT WHERE DEPT_CODE = (SELECT DEPT_CODE FROM STUDENT GROUP BY DEPT_CODE ORDER BY COUNT(STU_NUM) DESC LIMIT 1)", "source_tables": ["course", "department", "class", "enroll"], "error_info": "Result not equal"}, {"sample_id": 3255, "db_id": "college_1", "score": 1, "gold_sql": "SELECT dept_name FROM department ORDER BY dept_name", "pred_sql": "SELECT DEPT_NAME FROM DEPARTMENT ORDER BY DEPT_NAME", "source_tables": ["department"], "error_info": ""}, {"sample_id": 3256, "db_id": "college_1", "score": 1, "gold_sql": "SELECT dept_name FROM department ORDER BY dept_name", "pred_sql": "SELECT DEPT_NAME FROM DEPARTMENT ORDER BY DEPT_NAME ASC", "source_tables": ["department"], "error_info": ""}, {"sample_id": 3257, "db_id": "college_1", "score": 0, "gold_sql": "SELECT class_code FROM CLASS WHERE class_room = 'KLR209'", "pred_sql": "SELECT DISTINCT CLASS.CRS_CODE FROM CLASS WHERE CLASS.CLASS_ROOM = 'KLR209'", "source_tables": ["class"], "error_info": "Result not equal"}, {"sample_id": 3258, "db_id": "college_1", "score": 0, "gold_sql": "SELECT class_code FROM CLASS WHERE class_room = 'KLR209'", "pred_sql": "SELECT CRS_CODE FROM CLASS WHERE CLASS_ROOM = 'KLR209'", "source_tables": ["class"], "error_info": "Result not equal"}, {"sample_id": 3259, "db_id": "college_1", "score": 1, "gold_sql": "SELECT emp_fname FROM employee WHERE emp_jobcode = 'PROF' ORDER BY emp_dob", "pred_sql": "SELECT EMP_FNAME FROM EMPLOYEE WHERE EMP_JOBCODE = 'PROF' ORDER BY EMP_DOB", "source_tables": ["employee"], "error_info": ""}, {"sample_id": 3260, "db_id": "college_1", "score": 1, "gold_sql": "SELECT emp_fname FROM employee WHERE emp_jobcode = 'PROF' ORDER BY emp_dob", "pred_sql": "SELECT EMP_FNAME FROM EMPLOYEE WHERE EMP_NUM IN (SELECT EMP_NUM FROM PROFESSOR) ORDER BY EMP_DOB", "source_tables": ["employee"], "error_info": ""}, {"sample_id": 3261, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T2.emp_fname, T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num ORDER BY T2.emp_fname", "pred_sql": "SELECT EMP_FNAME, PROF_OFFICE FROM PROFESSOR JOIN EMPLOYEE ON PROFESSOR.EMP_NUM = EMPLOYEE.EMP_NUM ORDER BY EMP_FNAME ASC", "source_tables": ["employee", "professor"], "error_info": ""}, {"sample_id": 3262, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T2.emp_fname, T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num ORDER BY T2.emp_fname", "pred_sql": "SELECT EMP_FNAME, PROF_OFFICE FROM PROFESSOR JOIN EMPLOYEE ON PROFESSOR.EMP_NUM = EMPLOYEE.EMP_NUM ORDER BY EMP_FNAME ASC", "source_tables": ["employee", "professor"], "error_info": ""}, {"sample_id": 3263, "db_id": "college_1", "score": 1, "gold_sql": "SELECT emp_fname, emp_lname FROM employee ORDER BY emp_dob LIMIT 1", "pred_sql": "SELECT EMP_FNAME, EMP_LNAME FROM EMPLOYEE ORDER BY EMP_DOB ASC LIMIT 1", "source_tables": ["employee"], "error_info": ""}, {"sample_id": 3264, "db_id": "college_1", "score": 1, "gold_sql": "SELECT emp_fname, emp_lname FROM employee ORDER BY emp_dob LIMIT 1", "pred_sql": "SELECT EMP_FNAME, EMP_LNAME FROM EMPLOYEE WHERE EMP_DOB = (SELECT MIN(EMP_DOB) FROM EMPLOYEE)", "source_tables": ["employee"], "error_info": ""}, {"sample_id": 3265, "db_id": "college_1", "score": 1, "gold_sql": "SELECT stu_fname, stu_lname, stu_gpa FROM student WHERE stu_gpa > 3 ORDER BY stu_dob DESC LIMIT 1", "pred_sql": "SELECT STU_FNAME, STU_LNAME, STU_GPA FROM STUDENT WHERE STU_GPA > 3 ORDER BY STU_DOB DESC LIMIT 1", "source_tables": ["student"], "error_info": ""}, {"sample_id": 3266, "db_id": "college_1", "score": 1, "gold_sql": "SELECT stu_fname, stu_lname, stu_gpa FROM student WHERE stu_gpa > 3 ORDER BY stu_dob DESC LIMIT 1", "pred_sql": "SELECT STU_FNAME, STU_LNAME, STU_GPA FROM STUDENT WHERE STU_GPA > 3 ORDER BY STU_DOB DESC LIMIT 1", "source_tables": ["student"], "error_info": ""}, {"sample_id": 3267, "db_id": "college_1", "score": 0, "gold_sql": "SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE enroll_grade = 'C'", "pred_sql": "SELECT STUDENT.STU_FNAME FROM STUDENT JOIN ENROLL ON STUDENT.STU_NUM = ENROLL.STU_NUM WHERE ENROLL.ENROLL_GRADE = 'C'", "source_tables": ["enroll", "student"], "error_info": "Result not equal"}, {"sample_id": 3268, "db_id": "college_1", "score": 1, "gold_sql": "SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE enroll_grade = 'C'", "pred_sql": "SELECT DISTINCT STUDENT.STU_FNAME FROM STUDENT JOIN ENROLL ON STUDENT.STU_NUM = ENROLL.STU_NUM WHERE ENROLL.ENROLL_GRADE = 'C'", "source_tables": ["enroll", "student"], "error_info": ""}, {"sample_id": 3269, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY COUNT(*) LIMIT 1", "pred_sql": "SELECT DEPT_NAME FROM DEPARTMENT WHERE DEPT_CODE = (SELECT DEPT_CODE FROM PROFESSOR GROUP BY DEPT_CODE ORDER BY COUNT(*) ASC LIMIT 1)", "source_tables": ["department", "professor"], "error_info": ""}, {"sample_id": 3270, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY COUNT(*) LIMIT 1", "pred_sql": "SELECT DEPT_NAME FROM DEPARTMENT WHERE DEPT_CODE = (SELECT DEPT_CODE FROM PROFESSOR GROUP BY DEPT_CODE ORDER BY COUNT(EMP_NUM) ASC LIMIT 1)", "source_tables": ["department", "professor"], "error_info": ""}, {"sample_id": 3271, "db_id": "college_1", "score": 0, "gold_sql": "SELECT T2.dept_name, T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T1.prof_high_degree = 'Ph.D.' GROUP BY T1.dept_code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT DEPT_NAME FROM DEPARTMENT WHERE DEPT_CODE IN (SELECT DEPT_CODE FROM PROFESSOR WHERE PROF_HIGH_DEGREE = 'Ph.D.' GROUP BY DEPT_CODE ORDER BY COUNT(*) DESC LIMIT 1)", "source_tables": ["department", "professor"], "error_info": "Result not equal"}, {"sample_id": 3272, "db_id": "college_1", "score": 0, "gold_sql": "SELECT T2.dept_name, T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T1.prof_high_degree = 'Ph.D.' GROUP BY T1.dept_code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT D.DEPT_NAME, COUNT(P.EMP_NUM) AS Professor_Count FROM DEPARTMENT AS D JOIN PROFESSOR AS P ON D.DEPT_CODE = P.DEPT_CODE WHERE P.PROF_HIGH_DEGREE = 'Ph.D.' GROUP BY D.DEPT_NAME ORDER BY Professor_Count DESC LIMIT 1", "source_tables": ["department", "professor"], "error_info": "Result not equal"}, {"sample_id": 3273, "db_id": "college_1", "score": 0, "gold_sql": "SELECT emp_fname FROM employee WHERE emp_jobcode = 'PROF' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num", "pred_sql": "SELECT EMPLOYEE.EMP_FNAME FROM EMPLOYEE WHERE NOT EMPLOYEE.EMP_NUM IN (SELECT CLASS.PROF_NUM FROM CLASS)", "source_tables": ["employee", "class"], "error_info": "Result not equal"}, {"sample_id": 3274, "db_id": "college_1", "score": 0, "gold_sql": "SELECT emp_fname FROM employee WHERE emp_jobcode = 'PROF' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num", "pred_sql": "SELECT EMP_FNAME FROM EMPLOYEE WHERE NOT EMP_NUM IN (SELECT PROF_NUM FROM CLASS) AND EMP_NUM IN (SELECT EMP_NUM FROM PROFESSOR)", "source_tables": ["employee", "class"], "error_info": "Result not equal"}, {"sample_id": 3275, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T3.dept_name = 'History' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num = T5.prof_num", "pred_sql": "SELECT EMPLOYEE.EMP_FNAME FROM EMPLOYEE JOIN PROFESSOR ON EMPLOYEE.EMP_NUM = PROFESSOR.EMP_NUM JOIN DEPARTMENT ON PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE WHERE DEPARTMENT.DEPT_NAME = 'History' AND NOT PROFESSOR.EMP_NUM IN (SELECT CLASS.PROF_NUM FROM CLASS)", "source_tables": ["employee", "professor", "class", "department"], "error_info": ""}, {"sample_id": 3276, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T3.dept_name = 'History' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num = T5.prof_num", "pred_sql": "SELECT EMPLOYEE.EMP_FNAME FROM EMPLOYEE JOIN PROFESSOR ON EMPLOYEE.EMP_NUM = PROFESSOR.EMP_NUM JOIN DEPARTMENT ON PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE WHERE DEPARTMENT.DEPT_NAME = 'History' AND NOT PROFESSOR.EMP_NUM IN (SELECT DISTINCT CLASS.PROF_NUM FROM CLASS)", "source_tables": ["employee", "professor", "class", "department"], "error_info": ""}, {"sample_id": 3277, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T1.emp_lname, T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T3.dept_name = 'History'", "pred_sql": "SELECT EMPLOYEE.EMP_LNAME, PROFESSOR.PROF_OFFICE FROM PROFESSOR JOIN EMPLOYEE ON PROFESSOR.EMP_NUM = EMPLOYEE.EMP_NUM JOIN DEPARTMENT ON PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE WHERE DEPARTMENT.DEPT_NAME = 'History'", "source_tables": ["employee", "professor", "department"], "error_info": ""}, {"sample_id": 3278, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T1.emp_lname, T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T3.dept_name = 'History'", "pred_sql": "SELECT EMPLOYEE.EMP_LNAME, PROFESSOR.PROF_OFFICE FROM PROFESSOR JOIN EMPLOYEE ON PROFESSOR.EMP_NUM = EMPLOYEE.EMP_NUM JOIN DEPARTMENT ON PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE WHERE DEPARTMENT.DEPT_NAME = 'History'", "source_tables": ["employee", "professor", "department"], "error_info": ""}, {"sample_id": 3279, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T3.dept_name, T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T1.emp_lname = 'Heffington'", "pred_sql": "SELECT D.DEPT_NAME, P.PROF_OFFICE FROM PROFESSOR AS P JOIN DEPARTMENT AS D ON P.DEPT_CODE = D.DEPT_CODE WHERE P.EMP_NUM = (SELECT EMP_NUM FROM EMPLOYEE WHERE EMP_LNAME = 'Heffington')", "source_tables": ["employee", "professor", "department"], "error_info": ""}, {"sample_id": 3280, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T3.dept_name, T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T1.emp_lname = 'Heffington'", "pred_sql": "SELECT DEPARTMENT.DEPT_NAME, PROFESSOR.PROF_OFFICE FROM PROFESSOR JOIN DEPARTMENT ON PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE JOIN EMPLOYEE ON PROFESSOR.EMP_NUM = EMPLOYEE.EMP_NUM WHERE EMPLOYEE.EMP_LNAME = 'Heffington'", "source_tables": ["employee", "professor", "department"], "error_info": ""}, {"sample_id": 3281, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T1.emp_lname, T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102'", "pred_sql": "SELECT EMPLOYEE.EMP_LNAME, EMPLOYEE.EMP_HIREDATE FROM EMPLOYEE JOIN PROFESSOR ON EMPLOYEE.EMP_NUM = PROFESSOR.EMP_NUM WHERE PROFESSOR.PROF_OFFICE = 'DRE 102'", "source_tables": ["employee", "professor"], "error_info": ""}, {"sample_id": 3282, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T1.emp_lname, T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102'", "pred_sql": "SELECT EMPLOYEE.EMP_LNAME, EMPLOYEE.EMP_HIREDATE FROM EMPLOYEE JOIN PROFESSOR ON EMPLOYEE.EMP_NUM = PROFESSOR.EMP_NUM WHERE PROFESSOR.PROF_OFFICE = 'DRE 102'", "source_tables": ["employee", "professor"], "error_info": ""}, {"sample_id": 3283, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T3.stu_num = T2.stu_num WHERE T3.stu_lname = 'Smithson'", "pred_sql": "SELECT CLASS.CRS_CODE FROM CLASS JOIN ENROLL ON CLASS.CLASS_CODE = ENROLL.CLASS_CODE JOIN STUDENT ON ENROLL.STU_NUM = STUDENT.STU_NUM WHERE STUDENT.STU_LNAME = 'Smithson'", "source_tables": ["student", "class", "enroll"], "error_info": ""}, {"sample_id": 3284, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T3.stu_num = T2.stu_num WHERE T3.stu_lname = 'Smithson'", "pred_sql": "SELECT CLASS.CRS_CODE FROM CLASS JOIN ENROLL ON CLASS.CLASS_CODE = ENROLL.CLASS_CODE JOIN STUDENT ON ENROLL.STU_NUM = STUDENT.STU_NUM WHERE STUDENT.STU_LNAME = 'Smithson'", "source_tables": ["student", "class", "enroll"], "error_info": ""}, {"sample_id": 3285, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T4.crs_description, T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T3.stu_num = T2.stu_num JOIN course AS T4 ON T4.crs_code = T1.crs_code WHERE T3.stu_lname = 'Smithson'", "pred_sql": "SELECT COURSE.CRS_DESCRIPTION, COURSE.CRS_CREDIT FROM COURSE JOIN CLASS ON COURSE.CRS_CODE = CLASS.CRS_CODE JOIN ENROLL ON CLASS.CLASS_CODE = ENROLL.CLASS_CODE JOIN STUDENT ON ENROLL.STU_NUM = STUDENT.STU_NUM WHERE STUDENT.STU_LNAME = 'Smithson'", "source_tables": ["course", "student", "class", "enroll"], "error_info": ""}, {"sample_id": 3286, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T4.crs_description, T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T3.stu_num = T2.stu_num JOIN course AS T4 ON T4.crs_code = T1.crs_code WHERE T3.stu_lname = 'Smithson'", "pred_sql": "SELECT COURSE.CRS_CREDIT, COURSE.CRS_DESCRIPTION FROM STUDENT JOIN ENROLL ON STUDENT.STU_NUM = ENROLL.STU_NUM JOIN CLASS ON ENROLL.CLASS_CODE = CLASS.CLASS_CODE JOIN COURSE ON CLASS.CRS_CODE = COURSE.CRS_CODE WHERE STUDENT.STU_LNAME = 'Smithson'", "source_tables": ["course", "student", "class", "enroll"], "error_info": ""}, {"sample_id": 3287, "db_id": "college_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM professor WHERE prof_high_degree = 'Ph.D.' OR prof_high_degree = 'MA'", "pred_sql": "SELECT COUNT(*) AS professor_count FROM PROFESSOR WHERE PROF_HIGH_DEGREE IN ('Ph.D.', 'MA')", "source_tables": ["professor"], "error_info": ""}, {"sample_id": 3288, "db_id": "college_1", "score": 0, "gold_sql": "SELECT COUNT(*) FROM professor WHERE prof_high_degree = 'Ph.D.' OR prof_high_degree = 'MA'", "pred_sql": "SELECT COUNT(*) AS number_of_professors FROM PROFESSOR WHERE PROF_HIGH_DEGREE IN ('Ph.D.', 'Masters')", "source_tables": ["professor"], "error_info": "Result not equal"}, {"sample_id": 3289, "db_id": "college_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T2.dept_name = 'Accounting' OR T2.dept_name = 'Biology'", "pred_sql": "SELECT COUNT(*) AS professor_count FROM PROFESSOR AS P JOIN DEPARTMENT AS D ON P.DEPT_CODE = D.DEPT_CODE WHERE D.DEPT_NAME IN ('Accounting', 'Biology')", "source_tables": ["department", "professor"], "error_info": ""}, {"sample_id": 3290, "db_id": "college_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T2.dept_name = 'Accounting' OR T2.dept_name = 'Biology'", "pred_sql": "SELECT COUNT(*) AS number_of_professors FROM PROFESSOR JOIN DEPARTMENT ON PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE WHERE DEPARTMENT.DEPT_NAME IN ('Accounting', 'Biology')", "source_tables": ["department", "professor"], "error_info": ""}, {"sample_id": 3291, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num WHERE crs_code = 'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num WHERE crs_code = 'QM-261'", "pred_sql": "SELECT EMPLOYEE.EMP_FNAME FROM EMPLOYEE JOIN PROFESSOR ON EMPLOYEE.EMP_NUM = PROFESSOR.EMP_NUM JOIN CLASS ON PROFESSOR.EMP_NUM = CLASS.PROF_NUM WHERE CLASS.CRS_CODE IN ('CIS-220', 'QM-261') GROUP BY EMPLOYEE.EMP_FNAME HAVING COUNT(DISTINCT CLASS.CRS_CODE) = 2", "source_tables": ["employee", "class"], "error_info": ""}, {"sample_id": 3292, "db_id": "college_1", "score": 0, "gold_sql": "SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num WHERE crs_code = 'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num WHERE crs_code = 'QM-261'", "pred_sql": "SELECT EMPLOYEE.EMP_FNAME FROM EMPLOYEE JOIN PROFESSOR ON EMPLOYEE.EMP_NUM = PROFESSOR.EMP_NUM JOIN CLASS ON PROFESSOR.EMP_NUM = CLASS.PROF_NUM WHERE CLASS.CRS_CODE IN ('CIS-220', 'QM-261')", "source_tables": ["employee", "class"], "error_info": "Result not equal"}, {"sample_id": 3293, "db_id": "college_1", "score": 0, "gold_sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code JOIN course AS T4 ON T3.crs_code = T4.crs_code JOIN department AS T5 ON T5.dept_code = T4.dept_code WHERE T5.dept_name = 'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code JOIN course AS T4 ON T3.crs_code = T4.crs_code JOIN department AS T5 ON T5.dept_code = T4.dept_code WHERE T5.dept_name = 'Computer Info. Systems'", "pred_sql": "SELECT DISTINCT STUDENT.STU_FNAME FROM STUDENT JOIN DEPARTMENT ON STUDENT.DEPT_CODE = DEPARTMENT.DEPT_CODE JOIN CLASS ON STUDENT.PROF_NUM = CLASS.PROF_NUM JOIN COURSE ON CLASS.CRS_CODE = COURSE.CRS_CODE WHERE DEPARTMENT.DEPT_NAME IN ('Accounting', 'Computer Info. Systems')", "source_tables": ["course", "enroll", "department", "class", "student"], "error_info": "Result not equal"}, {"sample_id": 3294, "db_id": "college_1", "score": 0, "gold_sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code JOIN course AS T4 ON T3.crs_code = T4.crs_code JOIN department AS T5 ON T5.dept_code = T4.dept_code WHERE T5.dept_name = 'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code JOIN course AS T4 ON T3.crs_code = T4.crs_code JOIN department AS T5 ON T5.dept_code = T4.dept_code WHERE T5.dept_name = 'Computer Info. Systems'", "pred_sql": "SELECT DISTINCT STUDENT.STU_FNAME FROM STUDENT JOIN ENROLL ON STUDENT.STU_NUM = ENROLL.STU_NUM JOIN CLASS ON ENROLL.CLASS_CODE = CLASS.CLASS_CODE JOIN COURSE ON CLASS.CRS_CODE = COURSE.CRS_CODE WHERE COURSE.CRS_DESCRIPTION IN ('accounting', 'Computer Information Systems')", "source_tables": ["course", "enroll", "department", "class", "student"], "error_info": "Result not equal"}, {"sample_id": 3295, "db_id": "college_1", "score": 1, "gold_sql": "SELECT AVG(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T1.class_code = T3.class_code WHERE T3.crs_code = 'ACCT-211'", "pred_sql": "SELECT AVG(STU_GPA) AS average_gpa FROM STUDENT JOIN ENROLL ON STUDENT.STU_NUM = ENROLL.STU_NUM JOIN CLASS ON ENROLL.CLASS_CODE = CLASS.CLASS_CODE WHERE CLASS.CRS_CODE = 'ACCT-211'", "source_tables": ["student", "class", "enroll"], "error_info": ""}, {"sample_id": 3296, "db_id": "college_1", "score": 1, "gold_sql": "SELECT AVG(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T1.class_code = T3.class_code WHERE T3.crs_code = 'ACCT-211'", "pred_sql": "SELECT AVG(STU_GPA) AS average_gpa FROM STUDENT INNER JOIN ENROLL ON STUDENT.STU_NUM = ENROLL.STU_NUM INNER JOIN CLASS ON ENROLL.CLASS_CODE = CLASS.CLASS_CODE WHERE CLASS.CRS_CODE = 'ACCT-211'", "source_tables": ["student", "class", "enroll"], "error_info": ""}, {"sample_id": 3297, "db_id": "college_1", "score": 1, "gold_sql": "SELECT stu_gpa, stu_phone, stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5", "pred_sql": "SELECT STU_FNAME, STU_GPA, STU_PHONE FROM STUDENT ORDER BY STU_GPA DESC LIMIT 5", "source_tables": ["student"], "error_info": ""}, {"sample_id": 3298, "db_id": "college_1", "score": 1, "gold_sql": "SELECT stu_gpa, stu_phone, stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5", "pred_sql": "SELECT STU_FNAME, STU_GPA, STU_PHONE FROM STUDENT ORDER BY STU_GPA DESC LIMIT 5", "source_tables": ["student"], "error_info": ""}, {"sample_id": 3299, "db_id": "college_1", "score": 0, "gold_sql": "SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code ORDER BY stu_gpa LIMIT 1", "pred_sql": "SELECT D.DEPT_NAME FROM STUDENT AS S JOIN DEPARTMENT AS D ON S.DEPT_CODE = D.DEPT_CODE WHERE S.STU_GPA = (SELECT MIN(STU_GPA) FROM STUDENT)", "source_tables": ["department", "student"], "error_info": "Result not equal"}, {"sample_id": 3300, "db_id": "college_1", "score": 0, "gold_sql": "SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code ORDER BY stu_gpa LIMIT 1", "pred_sql": "SELECT DEPARTMENT.DEPT_NAME FROM STUDENT JOIN DEPARTMENT ON STUDENT.DEPT_CODE = DEPARTMENT.DEPT_CODE WHERE STUDENT.STU_GPA = (SELECT MIN(STU_GPA) FROM STUDENT)", "source_tables": ["department", "student"], "error_info": "Result not equal"}, {"sample_id": 3301, "db_id": "college_1", "score": 1, "gold_sql": "SELECT stu_fname, stu_gpa FROM student WHERE stu_gpa < (SELECT AVG(stu_gpa) FROM student)", "pred_sql": "SELECT STU_FNAME, STU_GPA FROM STUDENT WHERE STU_GPA < (SELECT AVG(STU_GPA) FROM STUDENT)", "source_tables": ["student"], "error_info": ""}, {"sample_id": 3302, "db_id": "college_1", "score": 1, "gold_sql": "SELECT stu_fname, stu_gpa FROM student WHERE stu_gpa < (SELECT AVG(stu_gpa) FROM student)", "pred_sql": "SELECT STU_FNAME, STU_GPA FROM STUDENT WHERE STU_GPA < (SELECT AVG(STU_GPA) FROM STUDENT)", "source_tables": ["student"], "error_info": ""}, {"sample_id": 3303, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T2.dept_name, T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT D.DEPT_NAME, D.DEPT_ADDRESS FROM DEPARTMENT AS D JOIN STUDENT AS S ON D.DEPT_CODE = S.DEPT_CODE GROUP BY D.DEPT_CODE ORDER BY COUNT(S.STU_NUM) DESC LIMIT 1", "source_tables": ["department", "student"], "error_info": ""}, {"sample_id": 3304, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T2.dept_name, T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT D.DEPT_NAME, D.DEPT_ADDRESS FROM DEPARTMENT AS D JOIN STUDENT AS S ON D.DEPT_CODE = S.DEPT_CODE GROUP BY D.DEPT_CODE ORDER BY COUNT(S.STU_NUM) DESC LIMIT 1", "source_tables": ["department", "student"], "error_info": ""}, {"sample_id": 3305, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T2.dept_name, T2.dept_address, COUNT(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY COUNT(*) DESC LIMIT 3", "pred_sql": "SELECT D.DEPT_NAME, D.DEPT_ADDRESS, COUNT(S.STU_NUM) AS NUM_STUDENTS FROM DEPARTMENT AS D JOIN STUDENT AS S ON D.DEPT_CODE = S.DEPT_CODE GROUP BY D.DEPT_CODE ORDER BY NUM_STUDENTS DESC LIMIT 3", "source_tables": ["department", "student"], "error_info": ""}, {"sample_id": 3306, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T2.dept_name, T2.dept_address, COUNT(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY COUNT(*) DESC LIMIT 3", "pred_sql": "SELECT D.DEPT_NAME, D.DEPT_ADDRESS, COUNT(S.STU_NUM) AS NUM_STUDENTS FROM DEPARTMENT AS D JOIN STUDENT AS S ON D.DEPT_CODE = S.DEPT_CODE GROUP BY D.DEPT_CODE ORDER BY NUM_STUDENTS DESC LIMIT 3", "source_tables": ["department", "student"], "error_info": ""}, {"sample_id": 3307, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T1.emp_fname, T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T3.dept_code = T2.dept_code WHERE T3.dept_name = 'History' AND T2.prof_high_degree = 'Ph.D.'", "pred_sql": "SELECT EMPLOYEE.EMP_FNAME, PROFESSOR.PROF_OFFICE FROM PROFESSOR JOIN EMPLOYEE ON PROFESSOR.EMP_NUM = EMPLOYEE.EMP_NUM JOIN DEPARTMENT ON PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE WHERE DEPARTMENT.DEPT_NAME = 'History' AND PROFESSOR.PROF_HIGH_DEGREE = 'Ph.D.'", "source_tables": ["employee", "professor", "department"], "error_info": ""}, {"sample_id": 3308, "db_id": "college_1", "score": 0, "gold_sql": "SELECT T1.emp_fname, T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T3.dept_code = T2.dept_code WHERE T3.dept_name = 'History' AND T2.prof_high_degree = 'Ph.D.'", "pred_sql": "SELECT EMPLOYEE.EMP_FNAME, PROFESSOR.PROF_OFFICE FROM PROFESSOR JOIN EMPLOYEE ON PROFESSOR.EMP_NUM = EMPLOYEE.EMP_NUM JOIN DEPARTMENT ON PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE WHERE DEPARTMENT.DEPT_NAME = 'History' AND PROFESSOR.PROF_HIGH_DEGREE = 'Ph.D'", "source_tables": ["employee", "professor", "department"], "error_info": "Result not equal"}, {"sample_id": 3309, "db_id": "college_1", "score": 0, "gold_sql": "SELECT T2.emp_fname, T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num", "pred_sql": "SELECT EMPLOYEE.EMP_FNAME, CLASS.CRS_CODE FROM EMPLOYEE JOIN CLASS ON EMPLOYEE.EMP_NUM = CLASS.PROF_NUM GROUP BY EMPLOYEE.EMP_FNAME, CLASS.CRS_CODE", "source_tables": ["employee", "class"], "error_info": "Result not equal"}, {"sample_id": 3310, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T2.emp_fname, T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num", "pred_sql": "SELECT EMPLOYEE.EMP_FNAME, CLASS.CRS_CODE FROM EMPLOYEE JOIN CLASS ON EMPLOYEE.EMP_NUM = CLASS.PROF_NUM JOIN COURSE ON CLASS.CRS_CODE = COURSE.CRS_CODE", "source_tables": ["employee", "class"], "error_info": ""}, {"sample_id": 3311, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T2.emp_fname, T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code", "pred_sql": "SELECT EMPLOYEE.EMP_FNAME, COURSE.CRS_DESCRIPTION FROM EMPLOYEE JOIN PROFESSOR ON EMPLOYEE.EMP_NUM = PROFESSOR.EMP_NUM JOIN CLASS ON PROFESSOR.EMP_NUM = CLASS.PROF_NUM JOIN COURSE ON CLASS.CRS_CODE = COURSE.CRS_CODE", "source_tables": ["course", "employee", "class"], "error_info": ""}, {"sample_id": 3312, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T2.emp_fname, T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code", "pred_sql": "SELECT EMPLOYEE.EMP_FNAME, COURSE.CRS_DESCRIPTION FROM EMPLOYEE JOIN PROFESSOR ON EMPLOYEE.EMP_NUM = PROFESSOR.EMP_NUM JOIN CLASS ON PROFESSOR.EMP_NUM = CLASS.PROF_NUM JOIN COURSE ON CLASS.CRS_CODE = COURSE.CRS_CODE", "source_tables": ["course", "employee", "class"], "error_info": ""}, {"sample_id": 3313, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T2.emp_fname, T4.prof_office, T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num", "pred_sql": "SELECT EMPLOYEE.EMP_FNAME, PROFESSOR.PROF_OFFICE, COURSE.CRS_DESCRIPTION FROM EMPLOYEE JOIN PROFESSOR ON EMPLOYEE.EMP_NUM = PROFESSOR.EMP_NUM JOIN CLASS ON PROFESSOR.EMP_NUM = CLASS.PROF_NUM JOIN COURSE ON CLASS.CRS_CODE = COURSE.CRS_CODE", "source_tables": ["course", "employee", "professor", "class"], "error_info": ""}, {"sample_id": 3314, "db_id": "college_1", "score": 0, "gold_sql": "SELECT T2.emp_fname, T4.prof_office, T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num", "pred_sql": "SELECT EMPLOYEE.EMP_FNAME, PROFESSOR.PROF_OFFICE FROM EMPLOYEE JOIN PROFESSOR ON EMPLOYEE.EMP_NUM = PROFESSOR.EMP_NUM JOIN CLASS ON PROFESSOR.EMP_NUM = CLASS.PROF_NUM GROUP BY EMPLOYEE.EMP_FNAME, PROFESSOR.PROF_OFFICE", "source_tables": ["course", "employee", "professor", "class"], "error_info": "Result not equal"}, {"sample_id": 3315, "db_id": "college_1", "score": 0, "gold_sql": "SELECT T2.emp_fname, T4.prof_office, T3.crs_description, T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num JOIN department AS T5 ON T4.dept_code = T5.dept_code", "pred_sql": "SELECT EMPLOYEE.EMP_FNAME, PROFESSOR.PROF_OFFICE, COURSE.CRS_DESCRIPTION, DEPARTMENT.DEPT_NAME FROM EMPLOYEE JOIN PROFESSOR ON EMPLOYEE.EMP_NUM = PROFESSOR.EMP_NUM JOIN DEPARTMENT ON PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE JOIN COURSE ON PROFESSOR.DEPT_CODE = COURSE.DEPT_CODE JOIN CLASS ON COURSE.CRS_CODE = CLASS.CRS_CODE GROUP BY EMPLOYEE.EMP_FNAME, PROFESSOR.PROF_OFFICE, COURSE.CRS_DESCRIPTION, DEPARTMENT.DEPT_NAME", "source_tables": ["course", "department", "professor", "class", "employee"], "error_info": "Result not equal"}, {"sample_id": 3316, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T2.emp_fname, T4.prof_office, T3.crs_description, T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num JOIN department AS T5 ON T4.dept_code = T5.dept_code", "pred_sql": "SELECT EMPLOYEE.EMP_FNAME, PROFESSOR.PROF_OFFICE, DEPARTMENT.DEPT_NAME, COURSE.CRS_DESCRIPTION FROM EMPLOYEE JOIN PROFESSOR ON EMPLOYEE.EMP_NUM = PROFESSOR.EMP_NUM JOIN DEPARTMENT ON PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE JOIN CLASS ON PROFESSOR.EMP_NUM = CLASS.PROF_NUM JOIN COURSE ON CLASS.CRS_CODE = COURSE.CRS_CODE", "source_tables": ["course", "department", "professor", "class", "employee"], "error_info": ""}, {"sample_id": 3317, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T1.stu_fname, T1.stu_lname, T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code JOIN course AS T4 ON T3.crs_code = T4.crs_code", "pred_sql": "SELECT STUDENT.STU_FNAME, STUDENT.STU_LNAME, COURSE.CRS_DESCRIPTION FROM STUDENT JOIN ENROLL ON STUDENT.STU_NUM = ENROLL.STU_NUM JOIN CLASS ON ENROLL.CLASS_CODE = CLASS.CLASS_CODE JOIN COURSE ON CLASS.CRS_CODE = COURSE.CRS_CODE", "source_tables": ["enroll", "course", "class", "student"], "error_info": ""}, {"sample_id": 3318, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T1.stu_fname, T1.stu_lname, T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code JOIN course AS T4 ON T3.crs_code = T4.crs_code", "pred_sql": "SELECT STUDENT.STU_FNAME, STUDENT.STU_LNAME, COURSE.CRS_DESCRIPTION FROM STUDENT JOIN ENROLL ON STUDENT.STU_NUM = ENROLL.STU_NUM JOIN CLASS ON ENROLL.CLASS_CODE = CLASS.CLASS_CODE JOIN COURSE ON CLASS.CRS_CODE = COURSE.CRS_CODE", "source_tables": ["enroll", "course", "class", "student"], "error_info": ""}, {"sample_id": 3319, "db_id": "college_1", "score": 0, "gold_sql": "SELECT T1.stu_fname, T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A'", "pred_sql": "SELECT DISTINCT S.STU_FNAME, S.STU_LNAME FROM STUDENT AS S JOIN ENROLL AS E ON S.STU_NUM = E.STU_NUM WHERE E.ENROLL_GRADE IN ('A', 'C')", "source_tables": ["enroll", "student"], "error_info": "Result not equal"}, {"sample_id": 3320, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T1.stu_fname, T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A'", "pred_sql": "SELECT S.STU_FNAME, S.STU_LNAME FROM STUDENT AS S JOIN ENROLL AS E ON S.STU_NUM = E.STU_NUM JOIN CLASS AS C ON E.CLASS_CODE = C.CLASS_CODE WHERE E.ENROLL_GRADE IN ('A', 'C')", "source_tables": ["enroll", "student"], "error_info": ""}, {"sample_id": 3321, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T2.emp_fname, T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN professor AS T3 ON T2.emp_num = T3.emp_num JOIN department AS T4 ON T4.dept_code = T3.dept_code WHERE T4.dept_name = 'Accounting'", "pred_sql": "SELECT EMPLOYEE.EMP_FNAME, CLASS.CLASS_ROOM FROM PROFESSOR JOIN EMPLOYEE ON PROFESSOR.EMP_NUM = EMPLOYEE.EMP_NUM JOIN DEPARTMENT ON PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE JOIN CLASS ON PROFESSOR.EMP_NUM = CLASS.PROF_NUM WHERE DEPARTMENT.DEPT_NAME = 'Accounting'", "source_tables": ["employee", "professor", "class", "department"], "error_info": ""}, {"sample_id": 3322, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T2.emp_fname, T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN professor AS T3 ON T2.emp_num = T3.emp_num JOIN department AS T4 ON T4.dept_code = T3.dept_code WHERE T4.dept_name = 'Accounting'", "pred_sql": "SELECT EMPLOYEE.EMP_FNAME, CLASS.CLASS_ROOM FROM EMPLOYEE JOIN PROFESSOR ON EMPLOYEE.EMP_NUM = PROFESSOR.EMP_NUM JOIN DEPARTMENT ON PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE JOIN CLASS ON PROFESSOR.EMP_NUM = CLASS.PROF_NUM JOIN COURSE ON CLASS.CRS_CODE = COURSE.CRS_CODE WHERE DEPARTMENT.DEPT_NAME = 'Accounting'", "source_tables": ["employee", "professor", "class", "department"], "error_info": ""}, {"sample_id": 3323, "db_id": "college_1", "score": 0, "gold_sql": "SELECT DISTINCT T2.emp_fname, T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN professor AS T3 ON T2.emp_num = T3.emp_num JOIN department AS T4 ON T4.dept_code = T3.dept_code WHERE T4.dept_name = 'Computer Info. Systems'", "pred_sql": "SELECT EMPLOYEE.EMP_FNAME, PROFESSOR.PROF_HIGH_DEGREE FROM PROFESSOR JOIN DEPARTMENT ON PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE JOIN CLASS ON PROFESSOR.EMP_NUM = CLASS.PROF_NUM WHERE DEPARTMENT.DEPT_NAME = 'Computer Info. Systems'", "source_tables": ["employee", "professor", "class", "department"], "error_info": "Predction Execution Error:no such column: EMPLOYEE.EMP_FNAME"}, {"sample_id": 3324, "db_id": "college_1", "score": 0, "gold_sql": "SELECT DISTINCT T2.emp_fname, T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN professor AS T3 ON T2.emp_num = T3.emp_num JOIN department AS T4 ON T4.dept_code = T3.dept_code WHERE T4.dept_name = 'Computer Info. Systems'", "pred_sql": "SELECT EMPLOYEE.EMP_FNAME, PROFESSOR.PROF_HIGH_DEGREE FROM PROFESSOR JOIN DEPARTMENT ON PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE JOIN EMPLOYEE ON PROFESSOR.EMP_NUM = EMPLOYEE.EMP_NUM WHERE DEPARTMENT.DEPT_NAME = 'Computer Information Systems'", "source_tables": ["employee", "professor", "class", "department"], "error_info": "Result not equal"}, {"sample_id": 3325, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'A' AND T2.class_code = 10018", "pred_sql": "SELECT STUDENT.STU_LNAME FROM STUDENT JOIN ENROLL ON STUDENT.STU_NUM = ENROLL.STU_NUM WHERE ENROLL.CLASS_CODE = '10018' AND ENROLL.ENROLL_GRADE = 'A'", "source_tables": ["enroll", "student"], "error_info": ""}, {"sample_id": 3326, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'A' AND T2.class_code = 10018", "pred_sql": "SELECT STUDENT.STU_LNAME FROM STUDENT JOIN ENROLL ON STUDENT.STU_NUM = ENROLL.STU_NUM WHERE ENROLL.CLASS_CODE = '10018' AND ENROLL.ENROLL_GRADE = 'A'", "source_tables": ["enroll", "student"], "error_info": ""}, {"sample_id": 3327, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T2.emp_fname, T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T1.dept_code = T3.dept_code WHERE T3.dept_name = 'History' AND T1.prof_high_degree <> 'Ph.D.'", "pred_sql": "SELECT EMPLOYEE.EMP_FNAME, PROFESSOR.PROF_OFFICE FROM PROFESSOR JOIN EMPLOYEE ON PROFESSOR.EMP_NUM = EMPLOYEE.EMP_NUM WHERE PROFESSOR.PROF_HIGH_DEGREE <> 'Ph.D.' AND PROFESSOR.DEPT_CODE IN (SELECT DEPT_CODE FROM DEPARTMENT WHERE DEPT_NAME = 'History')", "source_tables": ["employee", "professor", "department"], "error_info": ""}, {"sample_id": 3328, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T2.emp_fname, T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T1.dept_code = T3.dept_code WHERE T3.dept_name = 'History' AND T1.prof_high_degree <> 'Ph.D.'", "pred_sql": "SELECT EMPLOYEE.EMP_FNAME, PROFESSOR.PROF_OFFICE FROM PROFESSOR JOIN EMPLOYEE ON PROFESSOR.EMP_NUM = EMPLOYEE.EMP_NUM JOIN DEPARTMENT ON PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE WHERE DEPARTMENT.DEPT_NAME = 'History' AND PROFESSOR.PROF_HIGH_DEGREE <> 'Ph.D.'", "source_tables": ["employee", "professor", "department"], "error_info": ""}, {"sample_id": 3329, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY T1.prof_num HAVING COUNT(*) > 1", "pred_sql": "SELECT EMPLOYEE.EMP_FNAME FROM EMPLOYEE JOIN PROFESSOR ON EMPLOYEE.EMP_NUM = PROFESSOR.EMP_NUM JOIN CLASS ON PROFESSOR.EMP_NUM = CLASS.PROF_NUM GROUP BY EMPLOYEE.EMP_NUM HAVING COUNT(CLASS.CLASS_CODE) > 1", "source_tables": ["employee", "class"], "error_info": ""}, {"sample_id": 3330, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY T1.prof_num HAVING COUNT(*) > 1", "pred_sql": "SELECT EMPLOYEE.EMP_FNAME FROM EMPLOYEE JOIN PROFESSOR ON EMPLOYEE.EMP_NUM = PROFESSOR.EMP_NUM JOIN CLASS ON PROFESSOR.EMP_NUM = CLASS.PROF_NUM GROUP BY EMPLOYEE.EMP_NUM HAVING COUNT(CLASS.CLASS_CODE) > 1", "source_tables": ["employee", "class"], "error_info": ""}, {"sample_id": 3331, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num GROUP BY T2.stu_num HAVING COUNT(*) = 1", "pred_sql": "SELECT S.STU_FNAME FROM STUDENT AS S JOIN ENROLL AS E ON S.STU_NUM = E.STU_NUM GROUP BY S.STU_NUM HAVING COUNT(E.CLASS_CODE) = 1", "source_tables": ["enroll", "student"], "error_info": ""}, {"sample_id": 3332, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num GROUP BY T2.stu_num HAVING COUNT(*) = 1", "pred_sql": "SELECT S.STU_FNAME FROM STUDENT AS S JOIN ENROLL AS E ON S.STU_NUM = E.STU_NUM GROUP BY S.STU_NUM HAVING COUNT(E.CLASS_CODE) = 1", "source_tables": ["enroll", "student"], "error_info": ""}, {"sample_id": 3333, "db_id": "college_1", "score": 0, "gold_sql": "SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'", "pred_sql": "SELECT DEPARTMENT.DEPT_NAME FROM DEPARTMENT JOIN COURSE ON DEPARTMENT.DEPT_CODE = COURSE.DEPT_CODE JOIN CLASS ON COURSE.CRS_CODE = CLASS.CRS_CODE WHERE COURSE.CRS_DESCRIPTION LIKE '%Statistics%'", "source_tables": ["course", "department"], "error_info": "Result not equal"}, {"sample_id": 3334, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'", "pred_sql": "SELECT DISTINCT DEPARTMENT.DEPT_NAME FROM DEPARTMENT JOIN COURSE ON DEPARTMENT.DEPT_CODE = COURSE.DEPT_CODE WHERE COURSE.CRS_DESCRIPTION LIKE '%Statistics%'", "source_tables": ["course", "department"], "error_info": ""}, {"sample_id": 3335, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code WHERE T3.crs_code = 'ACCT-211' AND T1.stu_lname LIKE 'S%'", "pred_sql": "SELECT STU_FNAME FROM STUDENT AS S JOIN ENROLL AS E ON S.STU_NUM = E.STU_NUM JOIN CLASS AS C ON E.CLASS_CODE = C.CLASS_CODE WHERE S.STU_LNAME LIKE 'S%' AND C.CRS_CODE = 'ACCT-211'", "source_tables": ["enroll", "class", "student"], "error_info": ""}, {"sample_id": 3336, "db_id": "college_1", "score": 1, "gold_sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code WHERE T3.crs_code = 'ACCT-211' AND T1.stu_lname LIKE 'S%'", "pred_sql": "SELECT STU_FNAME FROM STUDENT AS S JOIN ENROLL AS E ON S.STU_NUM = E.STU_NUM JOIN CLASS AS C ON E.CLASS_CODE = C.CLASS_CODE WHERE S.STU_LNAME LIKE 'S%' AND C.CRS_CODE = 'ACCT-211'", "source_tables": ["enroll", "class", "student"], "error_info": ""}, {"sample_id": 3337, "db_id": "sports_competition", "score": 1, "gold_sql": "SELECT COUNT(*) FROM club", "pred_sql": "SELECT COUNT(*) AS total_clubs FROM club", "source_tables": ["club"], "error_info": ""}, {"sample_id": 3338, "db_id": "sports_competition", "score": 1, "gold_sql": "SELECT COUNT(*) FROM club", "pred_sql": "SELECT COUNT(*) AS total_clubs FROM club", "source_tables": ["club"], "error_info": ""}, {"sample_id": 3339, "db_id": "sports_competition", "score": 1, "gold_sql": "SELECT DISTINCT Region FROM club ORDER BY Region ASC", "pred_sql": "SELECT DISTINCT Region FROM club ORDER BY Region ASC", "source_tables": ["club"], "error_info": ""}, {"sample_id": 3340, "db_id": "sports_competition", "score": 1, "gold_sql": "SELECT DISTINCT Region FROM club ORDER BY Region ASC", "pred_sql": "SELECT DISTINCT Region FROM club ORDER BY Region ASC", "source_tables": ["club"], "error_info": ""}, {"sample_id": 3341, "db_id": "sports_competition", "score": 1, "gold_sql": "SELECT AVG(Gold) FROM club_rank", "pred_sql": "SELECT AVG(Gold) AS Average_Gold_Medals FROM club_rank", "source_tables": ["club_rank"], "error_info": ""}, {"sample_id": 3342, "db_id": "sports_competition", "score": 1, "gold_sql": "SELECT AVG(Gold) FROM club_rank", "pred_sql": "SELECT AVG(Gold) AS Average_Gold_Medals FROM club_rank", "source_tables": ["club_rank"], "error_info": ""}, {"sample_id": 3343, "db_id": "sports_competition", "score": 0, "gold_sql": "SELECT Competition_type, Country FROM competition", "pred_sql": "SELECT DISTINCT Competition_type, Country FROM competition", "source_tables": ["competition"], "error_info": "Result not equal"}, {"sample_id": 3344, "db_id": "sports_competition", "score": 0, "gold_sql": "SELECT Competition_type, Country FROM competition", "pred_sql": "SELECT DISTINCT Competition_type, Country FROM competition", "source_tables": ["competition"], "error_info": "Result not equal"}, {"sample_id": 3345, "db_id": "sports_competition", "score": 1, "gold_sql": "SELECT DISTINCT YEAR FROM competition WHERE Competition_type <> 'Tournament'", "pred_sql": "SELECT DISTINCT Year FROM competition WHERE Competition_type <> 'Tournament'", "source_tables": ["competition"], "error_info": ""}, {"sample_id": 3346, "db_id": "sports_competition", "score": 1, "gold_sql": "SELECT DISTINCT YEAR FROM competition WHERE Competition_type <> 'Tournament'", "pred_sql": "SELECT DISTINCT Year FROM competition WHERE Competition_type <> 'tournament'", "source_tables": ["competition"], "error_info": ""}, {"sample_id": 3347, "db_id": "sports_competition", "score": 1, "gold_sql": "SELECT MAX(Silver), MIN(Silver) FROM club_rank", "pred_sql": "SELECT MAX(Silver) AS Max_Silver, MIN(Silver) AS Min_Silver FROM club_rank", "source_tables": ["club_rank"], "error_info": ""}, {"sample_id": 3348, "db_id": "sports_competition", "score": 1, "gold_sql": "SELECT MAX(Silver), MIN(Silver) FROM club_rank", "pred_sql": "SELECT MAX(Silver) AS Max_Silver, MIN(Silver) AS Min_Silver FROM club_rank", "source_tables": ["club_rank"], "error_info": ""}, {"sample_id": 3349, "db_id": "sports_competition", "score": 1, "gold_sql": "SELECT COUNT(*) FROM club_rank WHERE Total < 10", "pred_sql": "SELECT COUNT(*) AS club_count FROM club_rank WHERE Total < 10", "source_tables": ["club_rank"], "error_info": ""}, {"sample_id": 3350, "db_id": "sports_competition", "score": 1, "gold_sql": "SELECT COUNT(*) FROM club_rank WHERE Total < 10", "pred_sql": "SELECT COUNT(*) AS total_clubs FROM club_rank WHERE Total < 10", "source_tables": ["club_rank"], "error_info": ""}, {"sample_id": 3351, "db_id": "sports_competition", "score": 1, "gold_sql": "SELECT name FROM club ORDER BY Start_year ASC", "pred_sql": "SELECT name FROM club ORDER BY Start_year ASC", "source_tables": ["club"], "error_info": ""}, {"sample_id": 3352, "db_id": "sports_competition", "score": 1, "gold_sql": "SELECT name FROM club ORDER BY Start_year ASC", "pred_sql": "SELECT name FROM club ORDER BY Start_year ASC", "source_tables": ["club"], "error_info": ""}, {"sample_id": 3353, "db_id": "sports_competition", "score": 1, "gold_sql": "SELECT name FROM club ORDER BY name DESC", "pred_sql": "SELECT name FROM club ORDER BY name DESC", "source_tables": ["club"], "error_info": ""}, {"sample_id": 3354, "db_id": "sports_competition", "score": 1, "gold_sql": "SELECT name FROM club ORDER BY name DESC", "pred_sql": "SELECT name FROM club ORDER BY name DESC", "source_tables": ["club"], "error_info": ""}, {"sample_id": 3355, "db_id": "sports_competition", "score": 0, "gold_sql": "SELECT T1.name, T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID", "pred_sql": "SELECT club.name, player.name FROM club JOIN player ON club.Club_ID = player.Club_ID", "source_tables": ["club", "player"], "error_info": "Result not equal"}, {"sample_id": 3356, "db_id": "sports_competition", "score": 0, "gold_sql": "SELECT T1.name, T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID", "pred_sql": "SELECT club.name, player.name FROM club JOIN player ON club.Club_ID = player.Club_ID", "source_tables": ["club", "player"], "error_info": "Result not equal"}, {"sample_id": 3357, "db_id": "sports_competition", "score": 1, "gold_sql": "SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Position = 'Right Wing'", "pred_sql": "SELECT DISTINCT club.name FROM club JOIN player ON club.Club_ID = player.Club_ID WHERE player.Position = 'Right Wing'", "source_tables": ["club", "player"], "error_info": ""}, {"sample_id": 3358, "db_id": "sports_competition", "score": 1, "gold_sql": "SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Position = 'Right Wing'", "pred_sql": "SELECT DISTINCT c.name FROM club AS c JOIN player AS p ON c.Club_ID = p.Club_ID WHERE p.Position = 'Right Wing'", "source_tables": ["club", "player"], "error_info": ""}, {"sample_id": 3359, "db_id": "sports_competition", "score": 1, "gold_sql": "SELECT AVG(T2.Points) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.name = 'AIB'", "pred_sql": "SELECT AVG(CAST(Points AS INT)) AS Average_Points FROM player WHERE Club_ID = (SELECT Club_ID FROM club WHERE name = 'AIB')", "source_tables": ["club", "player"], "error_info": ""}, {"sample_id": 3360, "db_id": "sports_competition", "score": 1, "gold_sql": "SELECT AVG(T2.Points) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.name = 'AIB'", "pred_sql": "SELECT AVG(Points) AS Average_Points FROM player WHERE Club_ID = (SELECT Club_ID FROM club WHERE name = 'AIB')", "source_tables": ["club", "player"], "error_info": ""}, {"sample_id": 3361, "db_id": "sports_competition", "score": 1, "gold_sql": "SELECT POSITION, AVG(Points) FROM player GROUP BY POSITION", "pred_sql": "SELECT Position, AVG(Points) AS Average_Points FROM player GROUP BY Position", "source_tables": ["player"], "error_info": ""}, {"sample_id": 3362, "db_id": "sports_competition", "score": 1, "gold_sql": "SELECT POSITION, AVG(Points) FROM player GROUP BY POSITION", "pred_sql": "SELECT Position, AVG(Points) AS Average_Points FROM player GROUP BY Position", "source_tables": ["player"], "error_info": ""}, {"sample_id": 3363, "db_id": "sports_competition", "score": 0, "gold_sql": "SELECT POSITION FROM player GROUP BY name HAVING AVG(Points) >= 20", "pred_sql": "SELECT Position, AVG(Points) AS Average_Points FROM player GROUP BY Position HAVING AVG(Points) > 20", "source_tables": ["player"], "error_info": "Result not equal"}, {"sample_id": 3364, "db_id": "sports_competition", "score": 0, "gold_sql": "SELECT POSITION FROM player GROUP BY name HAVING AVG(Points) >= 20", "pred_sql": "SELECT Position FROM player GROUP BY Position HAVING AVG(Points) > 20", "source_tables": ["player"], "error_info": "Result not equal"}, {"sample_id": 3365, "db_id": "sports_competition", "score": 1, "gold_sql": "SELECT Competition_type, COUNT(*) FROM competition GROUP BY Competition_type", "pred_sql": "SELECT Competition_type, COUNT(*) AS Number_of_Competitions FROM competition GROUP BY Competition_type", "source_tables": ["competition"], "error_info": ""}, {"sample_id": 3366, "db_id": "sports_competition", "score": 1, "gold_sql": "SELECT Competition_type, COUNT(*) FROM competition GROUP BY Competition_type", "pred_sql": "SELECT Competition_type, COUNT(*) AS Number_of_Competitions FROM competition GROUP BY Competition_type", "source_tables": ["competition"], "error_info": ""}, {"sample_id": 3367, "db_id": "sports_competition", "score": 0, "gold_sql": "SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Competition_type, COUNT(*) AS count FROM competition GROUP BY Competition_type ORDER BY count DESC LIMIT 1", "source_tables": ["competition"], "error_info": "Result not equal"}, {"sample_id": 3368, "db_id": "sports_competition", "score": 0, "gold_sql": "SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Competition_type, COUNT(*) AS count FROM competition GROUP BY Competition_type ORDER BY count DESC LIMIT 1", "source_tables": ["competition"], "error_info": "Result not equal"}, {"sample_id": 3369, "db_id": "sports_competition", "score": 1, "gold_sql": "SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(*) <= 5", "pred_sql": "SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(Competition_ID) <= 5", "source_tables": ["competition"], "error_info": ""}, {"sample_id": 3370, "db_id": "sports_competition", "score": 0, "gold_sql": "SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(*) <= 5", "pred_sql": "SELECT Competition_type, COUNT(*) AS Competition_Count FROM competition GROUP BY Competition_type ORDER BY Competition_Count DESC LIMIT 5", "source_tables": ["competition"], "error_info": "Result not equal"}, {"sample_id": 3371, "db_id": "sports_competition", "score": 1, "gold_sql": "SELECT name FROM CLub WHERE NOT Club_ID IN (SELECT Club_ID FROM player)", "pred_sql": "SELECT name FROM club WHERE NOT Club_ID IN (SELECT Club_ID FROM player)", "source_tables": ["club", "player"], "error_info": ""}, {"sample_id": 3372, "db_id": "sports_competition", "score": 1, "gold_sql": "SELECT name FROM CLub WHERE NOT Club_ID IN (SELECT Club_ID FROM player)", "pred_sql": "SELECT name FROM club WHERE NOT Club_ID IN (SELECT Club_ID FROM player)", "source_tables": ["club", "player"], "error_info": ""}, {"sample_id": 3373, "db_id": "sports_competition", "score": 1, "gold_sql": "SELECT POSITION FROM player WHERE Points > 20 INTERSECT SELECT POSITION FROM player WHERE Points < 10", "pred_sql": "SELECT DISTINCT p1.Position FROM player AS p1 JOIN player AS p2 ON p1.Position = p2.Position WHERE p1.Points > 20 AND p2.Points < 10", "source_tables": ["player"], "error_info": ""}, {"sample_id": 3374, "db_id": "sports_competition", "score": 0, "gold_sql": "SELECT POSITION FROM player WHERE Points > 20 INTERSECT SELECT POSITION FROM player WHERE Points < 10", "pred_sql": "SELECT Position FROM player WHERE Points > 20 OR Points < 10", "source_tables": ["player"], "error_info": "Result not equal"}, {"sample_id": 3375, "db_id": "sports_competition", "score": 1, "gold_sql": "SELECT SUM(Points) FROM player", "pred_sql": "SELECT SUM(Points) AS Total_Points FROM player", "source_tables": ["player"], "error_info": ""}, {"sample_id": 3376, "db_id": "sports_competition", "score": 1, "gold_sql": "SELECT SUM(Points) FROM player", "pred_sql": "SELECT SUM(Points) AS Total_Points FROM player", "source_tables": ["player"], "error_info": ""}, {"sample_id": 3377, "db_id": "sports_competition", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT POSITION) FROM player", "pred_sql": "SELECT COUNT(DISTINCT Position) AS Different_Positions FROM player", "source_tables": ["player"], "error_info": ""}, {"sample_id": 3378, "db_id": "sports_competition", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT POSITION) FROM player", "pred_sql": "SELECT COUNT(DISTINCT Position) AS Different_Positions FROM player", "source_tables": ["player"], "error_info": ""}, {"sample_id": 3379, "db_id": "sports_competition", "score": 1, "gold_sql": "SELECT name FROM player WHERE points > (SELECT AVG(points) FROM player)", "pred_sql": "SELECT name FROM player WHERE Points > (SELECT AVG(Points) FROM player)", "source_tables": ["player"], "error_info": ""}, {"sample_id": 3380, "db_id": "sports_competition", "score": 1, "gold_sql": "SELECT name FROM player WHERE points > (SELECT AVG(points) FROM player)", "pred_sql": "SELECT name FROM player WHERE Points > (SELECT AVG(Points) FROM player)", "source_tables": ["player"], "error_info": ""}, {"sample_id": 3381, "db_id": "sports_competition", "score": 1, "gold_sql": "SELECT COUNT(*), POSITION FROM player WHERE points < 30 GROUP BY POSITION", "pred_sql": "SELECT Position, COUNT(*) AS Number_of_Players FROM player WHERE Points < '30' GROUP BY Position", "source_tables": ["player"], "error_info": ""}, {"sample_id": 3382, "db_id": "sports_competition", "score": 1, "gold_sql": "SELECT COUNT(*), POSITION FROM player WHERE points < 30 GROUP BY POSITION", "pred_sql": "SELECT Position, COUNT(*) AS Number_of_Players FROM player WHERE Points < '30' GROUP BY Position", "source_tables": ["player"], "error_info": ""}, {"sample_id": 3383, "db_id": "sports_competition", "score": 0, "gold_sql": "SELECT country FROM competition WHERE competition_type = 'Tournament' GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Country, COUNT(*) AS Tournament_Count FROM competition WHERE Competition_type = 'tournament' GROUP BY Country ORDER BY Tournament_Count DESC LIMIT 1", "source_tables": ["competition"], "error_info": "Result not equal"}, {"sample_id": 3384, "db_id": "sports_competition", "score": 0, "gold_sql": "SELECT country FROM competition WHERE competition_type = 'Tournament' GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Country FROM competition WHERE Competition_type = 'tournament' GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["competition"], "error_info": "Result not equal"}, {"sample_id": 3385, "db_id": "sports_competition", "score": 0, "gold_sql": "SELECT country FROM competition WHERE competition_type = 'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type = 'Tournament'", "pred_sql": "SELECT DISTINCT c.Country FROM competition AS c JOIN competition_result AS cr ON c.Competition_ID = cr.Competition_ID WHERE c.Competition_type IN ('Friendly', 'Tournament') GROUP BY c.Country HAVING COUNT(DISTINCT c.Competition_type) = 2", "source_tables": ["competition"], "error_info": "Result not equal"}, {"sample_id": 3386, "db_id": "sports_competition", "score": 0, "gold_sql": "SELECT country FROM competition WHERE competition_type = 'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type = 'Tournament'", "pred_sql": "SELECT DISTINCT Country FROM competition WHERE Competition_type IN ('friendly', 'tournament')", "source_tables": ["competition"], "error_info": "Result not equal"}, {"sample_id": 3387, "db_id": "sports_competition", "score": 0, "gold_sql": "SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type = 'Friendly'", "pred_sql": "SELECT DISTINCT c.Country FROM competition AS c WHERE NOT c.Competition_ID IN (SELECT cr.Competition_ID FROM competition_result AS cr JOIN competition AS co ON cr.Competition_ID = co.Competition_ID WHERE co.Competition_type = 'Friendly')", "source_tables": ["competition"], "error_info": "Result not equal"}, {"sample_id": 3388, "db_id": "sports_competition", "score": 0, "gold_sql": "SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type = 'Friendly'", "pred_sql": "SELECT DISTINCT Country FROM competition WHERE NOT Competition_ID IN (SELECT Competition_ID FROM competition WHERE Competition_type = 'friendly')", "source_tables": ["competition"], "error_info": "Result not equal"}, {"sample_id": 3389, "db_id": "manufacturer", "score": 1, "gold_sql": "SELECT SUM(num_of_component) FROM furniture", "pred_sql": "SELECT SUM(Num_of_Component) AS Total_Components FROM furniture", "source_tables": ["furniture"], "error_info": ""}, {"sample_id": 3390, "db_id": "manufacturer", "score": 1, "gold_sql": "SELECT name, furniture_id FROM furniture ORDER BY market_rate DESC LIMIT 1", "pred_sql": "SELECT Furniture_ID, Name FROM furniture ORDER BY Market_Rate DESC LIMIT 1", "source_tables": ["furniture"], "error_info": ""}, {"sample_id": 3391, "db_id": "manufacturer", "score": 0, "gold_sql": "SELECT SUM(market_rate) FROM furniture ORDER BY market_rate DESC LIMIT 2", "pred_sql": "SELECT SUM(f.Market_Rate) AS Total_Market_Rate FROM furniture AS f JOIN furniture_manufacte AS fm ON f.Furniture_ID = fm.Furniture_ID GROUP BY fm.Furniture_ID ORDER BY SUM(fm.Price_in_Dollar) DESC LIMIT 2", "source_tables": ["furniture"], "error_info": "Result not equal"}, {"sample_id": 3392, "db_id": "manufacturer", "score": 1, "gold_sql": "SELECT Num_of_Component, name FROM furniture WHERE Num_of_Component > 10", "pred_sql": "SELECT Name, Num_of_Component FROM furniture WHERE Num_of_Component > 10", "source_tables": ["furniture"], "error_info": ""}, {"sample_id": 3393, "db_id": "manufacturer", "score": 0, "gold_sql": "SELECT name, Num_of_Component FROM furniture ORDER BY market_rate LIMIT 1", "pred_sql": "SELECT f.Name, f.Num_of_Component FROM furniture AS f JOIN furniture_manufacte AS fm ON f.Furniture_ID = fm.Furniture_ID GROUP BY f.Furniture_ID ORDER BY COUNT(fm.Manufacturer_ID) ASC LIMIT 1", "source_tables": ["furniture"], "error_info": "Result not equal"}, {"sample_id": 3394, "db_id": "manufacturer", "score": 0, "gold_sql": "SELECT t1.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID WHERE t2.Price_in_Dollar < (SELECT MAX(Price_in_Dollar) FROM furniture_manufacte)", "pred_sql": "SELECT Name FROM furniture WHERE Market_Rate < (SELECT MAX(Market_Rate) FROM furniture)", "source_tables": ["furniture_manufacte", "furniture"], "error_info": "Result not equal"}, {"sample_id": 3395, "db_id": "manufacturer", "score": 1, "gold_sql": "SELECT open_year, name FROM manufacturer ORDER BY num_of_shops DESC LIMIT 1", "pred_sql": "SELECT Name, Open_Year FROM manufacturer ORDER BY Num_of_Shops DESC LIMIT 1", "source_tables": ["manufacturer"], "error_info": ""}, {"sample_id": 3396, "db_id": "manufacturer", "score": 1, "gold_sql": "SELECT AVG(Num_of_Factories) FROM manufacturer WHERE num_of_shops > 20", "pred_sql": "SELECT AVG(CAST(Num_of_Factories AS INT)) AS Average_Factories FROM manufacturer WHERE CAST(Num_of_Shops AS INT) > 20", "source_tables": ["manufacturer"], "error_info": ""}, {"sample_id": 3397, "db_id": "manufacturer", "score": 1, "gold_sql": "SELECT name, manufacturer_id FROM manufacturer ORDER BY open_year", "pred_sql": "SELECT Manufacturer_ID, Name FROM manufacturer ORDER BY Open_Year", "source_tables": ["manufacturer"], "error_info": ""}, {"sample_id": 3398, "db_id": "manufacturer", "score": 1, "gold_sql": "SELECT name, open_year FROM manufacturer WHERE num_of_shops > 10 OR Num_of_Factories < 10", "pred_sql": "SELECT Name, Open_Year FROM manufacturer WHERE Num_of_Factories < '10' OR Num_of_Shops > '10'", "source_tables": ["manufacturer"], "error_info": ""}, {"sample_id": 3399, "db_id": "manufacturer", "score": 1, "gold_sql": "SELECT MAX(num_of_shops), AVG(Num_of_Factories) FROM manufacturer WHERE open_year < 1990", "pred_sql": "SELECT AVG(CAST(Num_of_Factories AS INT)) AS Average_Factories, MAX(CAST(Num_of_Shops AS INT)) AS Max_Shops FROM manufacturer WHERE CAST(Open_Year AS INT) < 1990", "source_tables": ["manufacturer"], "error_info": ""}, {"sample_id": 3400, "db_id": "manufacturer", "score": 0, "gold_sql": "SELECT t1.manufacturer_id, t1.num_of_shops FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id ORDER BY t2.Price_in_Dollar DESC LIMIT 1", "pred_sql": "SELECT m.Manufacturer_ID, m.Num_of_Shops FROM manufacturer AS m JOIN furniture_manufacte AS fm ON m.Manufacturer_ID = fm.Manufacturer_ID JOIN furniture AS f ON fm.Furniture_ID = f.Furniture_ID WHERE f.Market_Rate = (SELECT MAX(Market_Rate) FROM furniture)", "source_tables": ["furniture_manufacte", "manufacturer"], "error_info": "Result not equal"}, {"sample_id": 3401, "db_id": "manufacturer", "score": 1, "gold_sql": "SELECT COUNT(*), t1.name FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id GROUP BY t1.manufacturer_id", "pred_sql": "SELECT m.Name, COUNT(f.Furniture_ID) AS Number_of_Furniture_Types FROM manufacturer AS m JOIN furniture_manufacte AS fm ON m.Manufacturer_ID = fm.Manufacturer_ID JOIN furniture AS f ON fm.Furniture_ID = f.Furniture_ID GROUP BY m.Name", "source_tables": ["furniture_manufacte", "manufacturer"], "error_info": ""}, {"sample_id": 3402, "db_id": "manufacturer", "score": 1, "gold_sql": "SELECT t1.name, t2.price_in_dollar FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID", "pred_sql": "SELECT furniture.Name, furniture_manufacte.Price_in_Dollar FROM furniture JOIN furniture_manufacte ON furniture.Furniture_ID = furniture_manufacte.Furniture_ID", "source_tables": ["furniture_manufacte", "furniture"], "error_info": ""}, {"sample_id": 3403, "db_id": "manufacturer", "score": 1, "gold_sql": "SELECT Market_Rate, name FROM furniture WHERE NOT Furniture_ID IN (SELECT Furniture_ID FROM furniture_manufacte)", "pred_sql": "SELECT f.Name AS Furniture_Name, f.Market_Rate AS Market_Rate FROM furniture AS f LEFT JOIN furniture_manufacte AS fm ON f.Furniture_ID = fm.Furniture_ID WHERE fm.Furniture_ID IS NULL", "source_tables": ["furniture_manufacte", "furniture"], "error_info": ""}, {"sample_id": 3404, "db_id": "manufacturer", "score": 1, "gold_sql": "SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id = t3.manufacturer_id WHERE t1.num_of_component < 6 INTERSECT SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id = t3.manufacturer_id WHERE t1.num_of_component > 10", "pred_sql": "SELECT DISTINCT m.Name FROM manufacturer AS m JOIN furniture_manufacte AS fm ON m.Manufacturer_ID = fm.Manufacturer_ID JOIN furniture AS f ON fm.Furniture_ID = f.Furniture_ID WHERE f.Num_of_Component < 6 AND m.Manufacturer_ID IN (SELECT fm2.Manufacturer_ID FROM furniture_manufacte AS fm2 JOIN furniture AS f2 ON fm2.Furniture_ID = f2.Furniture_ID WHERE f2.Num_of_Component > 10)", "source_tables": ["furniture_manufacte", "manufacturer", "furniture"], "error_info": ""}, {"sample_id": 3405, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT T1.first_name, T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id", "pred_sql": "SELECT employees.FIRST_NAME, departments.DEPARTMENT_NAME FROM employees JOIN departments ON employees.DEPARTMENT_ID = departments.DEPARTMENT_ID", "source_tables": ["employees", "departments"], "error_info": ""}, {"sample_id": 3406, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT T1.first_name, T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id", "pred_sql": "SELECT employees.FIRST_NAME, departments.DEPARTMENT_NAME FROM employees JOIN departments ON employees.DEPARTMENT_ID = departments.DEPARTMENT_ID", "source_tables": ["employees", "departments"], "error_info": ""}, {"sample_id": 3407, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT first_name, last_name, salary FROM employees WHERE salary < 6000", "pred_sql": "SELECT FIRST_NAME || ' ' || LAST_NAME AS FULL_NAME, SALARY FROM employees WHERE SALARY < 6000", "source_tables": ["employees"], "error_info": "Result not equal"}, {"sample_id": 3408, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT first_name, last_name, salary FROM employees WHERE salary < 6000", "pred_sql": "SELECT FIRST_NAME || ' ' || LAST_NAME AS FULL_NAME, SALARY FROM employees WHERE SALARY < 6000", "source_tables": ["employees"], "error_info": "Result not equal"}, {"sample_id": 3409, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT first_name, department_id FROM employees WHERE last_name = 'McEwen'", "pred_sql": "SELECT employees.FIRST_NAME, employees.DEPARTMENT_ID FROM employees WHERE employees.LAST_NAME = 'McEwen'", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 3410, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT first_name, department_id FROM employees WHERE last_name = 'McEwen'", "pred_sql": "SELECT FIRST_NAME, DEPARTMENT_ID FROM employees WHERE LAST_NAME = 'McEwen'", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 3411, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT * FROM employees WHERE department_id = 'null'", "pred_sql": "SELECT * FROM employees WHERE DEPARTMENT_ID IS NULL", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 3412, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT * FROM employees WHERE department_id = 'null'", "pred_sql": "SELECT * FROM employees WHERE DEPARTMENT_ID IS NULL", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 3413, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT * FROM departments WHERE department_name = 'Marketing'", "pred_sql": "SELECT * FROM departments WHERE DEPARTMENT_NAME = 'Marketing'", "source_tables": ["departments"], "error_info": ""}, {"sample_id": 3414, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT * FROM departments WHERE department_name = 'Marketing'", "pred_sql": "SELECT * FROM departments WHERE DEPARTMENT_NAME = 'Marketing'", "source_tables": ["departments"], "error_info": ""}, {"sample_id": 3415, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT hire_date FROM employees WHERE NOT first_name LIKE '%M%'", "pred_sql": "SELECT HIRE_DATE FROM employees WHERE NOT FIRST_NAME LIKE '%M%'", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 3416, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT hire_date FROM employees WHERE NOT first_name LIKE '%M%'", "pred_sql": "SELECT HIRE_DATE FROM employees WHERE NOT FIRST_NAME LIKE '%M%'", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 3417, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT first_name, last_name, hire_date, salary, department_id FROM employees WHERE NOT first_name LIKE '%M%'", "pred_sql": "SELECT FIRST_NAME || ' ' || LAST_NAME AS FULL_NAME, HIRE_DATE, SALARY, DEPARTMENT_ID FROM employees WHERE NOT FIRST_NAME LIKE '%M%'", "source_tables": ["employees"], "error_info": "Result not equal"}, {"sample_id": 3418, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT first_name, last_name, hire_date, salary, department_id FROM employees WHERE NOT first_name LIKE '%M%'", "pred_sql": "SELECT FIRST_NAME || ' ' || LAST_NAME AS FULL_NAME, HIRE_DATE, SALARY, DEPARTMENT_ID FROM employees WHERE NOT FIRST_NAME LIKE '%M%'", "source_tables": ["employees"], "error_info": "Result not equal"}, {"sample_id": 3419, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT first_name, last_name, hire_date, salary, department_id FROM employees WHERE NOT first_name LIKE '%M%' ORDER BY department_id", "pred_sql": "SELECT FIRST_NAME || ' ' || LAST_NAME AS FULL_NAME, HIRE_DATE, SALARY, DEPARTMENT_ID FROM employees WHERE NOT FIRST_NAME LIKE '%M%' ORDER BY DEPARTMENT_ID ASC", "source_tables": ["employees"], "error_info": "Result not equal"}, {"sample_id": 3420, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT first_name, last_name, hire_date, salary, department_id FROM employees WHERE NOT first_name LIKE '%M%' ORDER BY department_id", "pred_sql": "SELECT FIRST_NAME || ' ' || LAST_NAME AS FULL_NAME, HIRE_DATE, SALARY, DEPARTMENT_ID FROM employees WHERE NOT FIRST_NAME LIKE '%M%' ORDER BY DEPARTMENT_ID ASC", "source_tables": ["employees"], "error_info": "Result not equal"}, {"sample_id": 3421, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT phone_number FROM employees WHERE salary BETWEEN 8000 AND 12000", "pred_sql": "SELECT PHONE_NUMBER FROM employees WHERE SALARY BETWEEN '8000' AND '12000'", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 3422, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT phone_number FROM employees WHERE salary BETWEEN 8000 AND 12000", "pred_sql": "SELECT PHONE_NUMBER FROM employees WHERE SALARY BETWEEN 8000 AND 12000", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 3423, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct <> 'null' OR department_id <> 40", "pred_sql": "SELECT * FROM employees WHERE (SALARY BETWEEN 8000 AND 12000 AND NOT COMMISSION_PCT IS NULL) OR DEPARTMENT_ID <> '40'", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 3424, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct <> 'null' OR department_id <> 40", "pred_sql": "SELECT * FROM employees WHERE (SALARY BETWEEN 8000 AND 12000 AND NOT COMMISSION_PCT IS NULL) OR DEPARTMENT_ID <> '40'", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 3425, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT first_name, last_name, salary FROM employees WHERE commission_pct = 'null'", "pred_sql": "SELECT FIRST_NAME, LAST_NAME, SALARY FROM employees WHERE COMMISSION_PCT IS NULL", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 3426, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT first_name, last_name, salary FROM employees WHERE commission_pct = 'null'", "pred_sql": "SELECT FIRST_NAME || ' ' || LAST_NAME AS FULL_NAME, SALARY FROM employees WHERE COMMISSION_PCT IS NULL", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 3427, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT first_name, last_name, salary FROM employees WHERE first_name LIKE '%m'", "pred_sql": "SELECT FIRST_NAME, LAST_NAME, SALARY FROM employees WHERE FIRST_NAME LIKE '%m'", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 3428, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT first_name, last_name, salary FROM employees WHERE first_name LIKE '%m'", "pred_sql": "SELECT FIRST_NAME || ' ' || LAST_NAME AS FULL_NAME, SALARY FROM employees WHERE FIRST_NAME LIKE '%m'", "source_tables": ["employees"], "error_info": "Result not equal"}, {"sample_id": 3429, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT job_id, hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'", "pred_sql": "SELECT JOB_ID, HIRE_DATE FROM employees WHERE HIRE_DATE BETWEEN '2007-11-05' AND '2009-07-05'", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 3430, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT job_id, hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'", "pred_sql": "SELECT JOB_ID, HIRE_DATE FROM employees WHERE HIRE_DATE > '2007-11-05' AND HIRE_DATE < '2009-07-05'", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 3431, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT first_name, last_name FROM employees WHERE department_id = 70 OR department_id = 90", "pred_sql": "SELECT FIRST_NAME, LAST_NAME FROM employees WHERE DEPARTMENT_ID IN ('70', '90')", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 3432, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT first_name, last_name FROM employees WHERE department_id = 70 OR department_id = 90", "pred_sql": "SELECT FIRST_NAME || ' ' || LAST_NAME AS FULL_NAME FROM employees WHERE DEPARTMENT_ID IN ('70', '90')", "source_tables": ["employees"], "error_info": "Result not equal"}, {"sample_id": 3433, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT salary, manager_id FROM employees WHERE manager_id <> 'null'", "pred_sql": "SELECT SALARY, MANAGER_ID FROM employees WHERE NOT MANAGER_ID IS NULL", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 3434, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT salary, manager_id FROM employees WHERE manager_id <> 'null'", "pred_sql": "SELECT SALARY, MANAGER_ID FROM employees WHERE NOT MANAGER_ID IS NULL", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 3435, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT * FROM employees WHERE hire_date < '2002-06-21'", "pred_sql": "SELECT * FROM employees WHERE HIRE_DATE < '2002-06-21'", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 3436, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT * FROM employees WHERE hire_date < '2002-06-21'", "pred_sql": "SELECT * FROM employees WHERE HIRE_DATE < '2002-06-21'", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 3437, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC", "pred_sql": "SELECT * FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY SALARY DESC", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 3438, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC", "pred_sql": "SELECT * FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY SALARY DESC", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 3439, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT * FROM employees WHERE hire_date > '1987-09-07'", "pred_sql": "SELECT * FROM employees WHERE HIRE_DATE > '1987-09-07'", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 3440, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT * FROM employees WHERE hire_date > '1987-09-07'", "pred_sql": "SELECT * FROM employees WHERE HIRE_DATE > '1987-09-07'", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 3441, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT job_title FROM jobs WHERE min_salary > 9000", "pred_sql": "SELECT JOB_TITLE FROM jobs WHERE MIN_SALARY > 9000", "source_tables": ["jobs"], "error_info": ""}, {"sample_id": 3442, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT job_title FROM jobs WHERE min_salary > 9000", "pred_sql": "SELECT JOB_TITLE FROM jobs WHERE MIN_SALARY > 9000 OR MAX_SALARY > 9000", "source_tables": ["jobs"], "error_info": "Result not equal"}, {"sample_id": 3443, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT job_title, max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000", "pred_sql": "SELECT JOB_TITLE, (MAX_SALARY - MIN_SALARY) AS SALARY_DIFFERENCE FROM jobs WHERE MAX_SALARY BETWEEN 12000 AND 18000", "source_tables": ["jobs"], "error_info": ""}, {"sample_id": 3444, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT job_title, max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000", "pred_sql": "SELECT JOB_TITLE, MIN_SALARY, MAX_SALARY FROM jobs WHERE MAX_SALARY BETWEEN 12000 AND 18000", "source_tables": ["jobs"], "error_info": "Result not equal"}, {"sample_id": 3445, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT email FROM employees WHERE commission_pct = 'null' AND salary BETWEEN 7000 AND 12000 AND department_id = 50", "pred_sql": "SELECT EMAIL FROM employees WHERE COMMISSION_PCT IS NULL AND SALARY BETWEEN 7000 AND 12000 AND DEPARTMENT_ID = '50'", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 3446, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT email FROM employees WHERE commission_pct = 'null' AND salary BETWEEN 7000 AND 12000 AND department_id = 50", "pred_sql": "SELECT EMAIL FROM employees WHERE COMMISSION_PCT IS NULL AND SALARY BETWEEN 7000 AND 12000 AND DEPARTMENT_ID = '50'", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 3447, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT employee_id, MAX(end_date) FROM job_history GROUP BY employee_id", "pred_sql": "SELECT e.EMPLOYEE_ID, jh.END_DATE FROM employees AS e JOIN job_history AS jh ON e.EMPLOYEE_ID = jh.EMPLOYEE_ID", "source_tables": ["job_history"], "error_info": "Result not equal"}, {"sample_id": 3448, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT employee_id, MAX(end_date) FROM job_history GROUP BY employee_id", "pred_sql": "SELECT e.EMPLOYEE_ID, jh.END_DATE FROM employees AS e JOIN job_history AS jh ON e.EMPLOYEE_ID = jh.EMPLOYEE_ID WHERE jh.END_DATE = (SELECT MAX(END_DATE) FROM job_history WHERE EMPLOYEE_ID = e.EMPLOYEE_ID)", "source_tables": ["job_history"], "error_info": "Result not equal"}, {"sample_id": 3449, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10", "pred_sql": "SELECT d.DEPARTMENT_NAME FROM departments AS d JOIN employees AS e ON d.DEPARTMENT_ID = e.DEPARTMENT_ID WHERE NOT e.COMMISSION_PCT IS NULL GROUP BY d.DEPARTMENT_NAME HAVING COUNT(e.EMPLOYEE_ID) > 10", "source_tables": ["employees"], "error_info": "Result not equal"}, {"sample_id": 3450, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10", "pred_sql": "SELECT DEPARTMENT_ID FROM employees WHERE NOT COMMISSION_PCT IS NULL GROUP BY DEPARTMENT_ID HAVING COUNT(EMPLOYEE_ID) > 10", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 3451, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT DISTINCT department_id FROM employees GROUP BY department_id, manager_id HAVING COUNT(employee_id) >= 4", "pred_sql": "SELECT d.DEPARTMENT_ID FROM departments AS d JOIN employees AS e ON d.MANAGER_ID = e.MANAGER_ID GROUP BY d.DEPARTMENT_ID HAVING COUNT(e.EMPLOYEE_ID) >= 4", "source_tables": ["employees"], "error_info": "Result not equal"}, {"sample_id": 3452, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT DISTINCT department_id FROM employees GROUP BY department_id, manager_id HAVING COUNT(employee_id) >= 4", "pred_sql": "SELECT d.DEPARTMENT_ID FROM departments AS d JOIN employees AS e ON d.DEPARTMENT_ID = e.DEPARTMENT_ID GROUP BY d.DEPARTMENT_ID HAVING COUNT(e.EMPLOYEE_ID) > 3", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 3453, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT department_id, AVG(salary) FROM employees WHERE commission_pct <> 'null' GROUP BY department_id", "pred_sql": "SELECT d.DEPARTMENT_NAME, AVG(e.SALARY) AS average_salary FROM employees AS e JOIN departments AS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID WHERE NOT e.COMMISSION_PCT IS NULL GROUP BY d.DEPARTMENT_NAME", "source_tables": ["employees"], "error_info": "Result not equal"}, {"sample_id": 3454, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT department_id, AVG(salary) FROM employees WHERE commission_pct <> 'null' GROUP BY department_id", "pred_sql": "SELECT AVG(SALARY) AS average_salary FROM employees WHERE NOT COMMISSION_PCT IS NULL", "source_tables": ["employees"], "error_info": "Result not equal"}, {"sample_id": 3455, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT country_id, COUNT(*) FROM locations GROUP BY country_id", "pred_sql": "SELECT countries.COUNTRY_ID, COUNT(locations.CITY) AS number_of_cities FROM countries JOIN locations ON countries.COUNTRY_ID = locations.COUNTRY_ID GROUP BY countries.COUNTRY_ID", "source_tables": ["locations"], "error_info": "Result not equal"}, {"sample_id": 3456, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT country_id, COUNT(*) FROM locations GROUP BY country_id", "pred_sql": "SELECT countries.COUNTRY_ID, COUNT(locations.CITY) AS city_count FROM countries JOIN locations ON countries.COUNTRY_ID = locations.COUNTRY_ID GROUP BY countries.COUNTRY_ID", "source_tables": ["locations"], "error_info": "Result not equal"}, {"sample_id": 3457, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT job_id FROM job_history WHERE end_date - start_date > 300 GROUP BY job_id HAVING COUNT(*) >= 2", "pred_sql": "SELECT j.JOB_ID FROM job_history AS jh JOIN jobs AS j ON jh.JOB_ID = j.JOB_ID GROUP BY jh.JOB_ID HAVING COUNT(DISTINCT jh.EMPLOYEE_ID) >= 2 AND (j.END_DATE - j.START_DATE) > 300", "source_tables": ["job_history"], "error_info": "Predction Execution Error:no such column: j.END_DATE"}, {"sample_id": 3458, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT job_id FROM job_history WHERE end_date - start_date > 300 GROUP BY job_id HAVING COUNT(*) >= 2", "pred_sql": "SELECT JOB_ID FROM job_history GROUP BY JOB_ID HAVING COUNT(*) > 1 AND SUM(JULIANDAY(END_DATE) - JULIANDAY(START_DATE)) > 300", "source_tables": ["job_history"], "error_info": "Result not equal"}, {"sample_id": 3459, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*) >= 2", "pred_sql": "SELECT EMPLOYEE_ID FROM job_history GROUP BY EMPLOYEE_ID HAVING COUNT(DISTINCT JOB_ID) >= 2", "source_tables": ["job_history"], "error_info": ""}, {"sample_id": 3460, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*) >= 2", "pred_sql": "SELECT EMPLOYEE_ID FROM job_history GROUP BY EMPLOYEE_ID HAVING COUNT(DISTINCT JOB_ID) >= 2", "source_tables": ["job_history"], "error_info": ""}, {"sample_id": 3461, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT T1.employee_id, T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id JOIN countries AS T4 ON T3.country_id = T4.country_id", "pred_sql": "SELECT employees.EMPLOYEE_ID, countries.COUNTRY_NAME FROM employees JOIN departments ON employees.DEPARTMENT_ID = departments.DEPARTMENT_ID JOIN locations ON departments.LOCATION_ID = locations.LOCATION_ID JOIN countries ON locations.COUNTRY_ID = countries.COUNTRY_ID", "source_tables": ["countries", "employees", "departments", "locations"], "error_info": ""}, {"sample_id": 3462, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT T1.employee_id, T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id JOIN countries AS T4 ON T3.country_id = T4.country_id", "pred_sql": "SELECT employees.EMPLOYEE_ID, countries.COUNTRY_NAME FROM employees JOIN departments ON employees.DEPARTMENT_ID = departments.DEPARTMENT_ID JOIN locations ON departments.LOCATION_ID = locations.LOCATION_ID JOIN countries ON locations.COUNTRY_ID = countries.COUNTRY_ID", "source_tables": ["countries", "employees", "departments", "locations"], "error_info": ""}, {"sample_id": 3463, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT T2.department_name, COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_name", "pred_sql": "SELECT d.DEPARTMENT_NAME, COUNT(e.EMPLOYEE_ID) AS NUMBER_OF_EMPLOYEES FROM departments AS d LEFT JOIN employees AS e ON d.DEPARTMENT_ID = e.DEPARTMENT_ID GROUP BY d.DEPARTMENT_NAME", "source_tables": ["employees", "departments"], "error_info": "Result not equal"}, {"sample_id": 3464, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT T2.department_name, COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_name", "pred_sql": "SELECT d.DEPARTMENT_NAME, COUNT(e.EMPLOYEE_ID) AS NUMBER_OF_EMPLOYEES FROM departments AS d LEFT JOIN employees AS e ON d.DEPARTMENT_ID = e.DEPARTMENT_ID GROUP BY d.DEPARTMENT_NAME", "source_tables": ["employees", "departments"], "error_info": "Result not equal"}, {"sample_id": 3465, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT * FROM job_history AS T1 JOIN employees AS T2 ON T1.employee_id = T2.employee_id WHERE T2.salary >= 12000", "pred_sql": "SELECT jobs.* FROM jobs JOIN employees ON jobs.JOB_ID = employees.JOB_ID WHERE employees.SALARY >= 12000", "source_tables": ["job_history", "employees"], "error_info": "Result not equal"}, {"sample_id": 3466, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT * FROM job_history AS T1 JOIN employees AS T2 ON T1.employee_id = T2.employee_id WHERE T2.salary >= 12000", "pred_sql": "SELECT jh.* FROM job_history AS jh JOIN employees AS e ON jh.EMPLOYEE_ID = e.EMPLOYEE_ID WHERE e.SALARY >= 12000", "source_tables": ["job_history", "employees"], "error_info": "Result not equal"}, {"sample_id": 3467, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT job_title, AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id GROUP BY T2.job_title", "pred_sql": "SELECT j.JOB_TITLE, AVG(e.SALARY) AS AVERAGE_SALARY FROM jobs AS j JOIN employees AS e ON j.JOB_ID = e.JOB_ID GROUP BY j.JOB_TITLE", "source_tables": ["employees", "jobs"], "error_info": ""}, {"sample_id": 3468, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT job_title, AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id GROUP BY T2.job_title", "pred_sql": "SELECT j.JOB_TITLE, AVG(e.SALARY) AS AVERAGE_SALARY FROM jobs AS j JOIN employees AS e ON j.JOB_ID = e.JOB_ID GROUP BY j.JOB_TITLE", "source_tables": ["employees", "jobs"], "error_info": ""}, {"sample_id": 3469, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT first_name, last_name FROM employees WHERE salary > (SELECT salary FROM employees WHERE employee_id = 163)", "pred_sql": "SELECT FIRST_NAME, LAST_NAME FROM employees WHERE SALARY > (SELECT SALARY FROM employees WHERE EMPLOYEE_ID = '163')", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 3470, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT first_name, last_name FROM employees WHERE salary > (SELECT salary FROM employees WHERE employee_id = 163)", "pred_sql": "SELECT FIRST_NAME || ' ' || LAST_NAME AS FULL_NAME FROM employees WHERE SALARY > (SELECT SALARY FROM employees WHERE EMPLOYEE_ID = '163')", "source_tables": ["employees"], "error_info": "Result not equal"}, {"sample_id": 3471, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT MIN(salary), department_id FROM employees GROUP BY department_id", "pred_sql": "SELECT d.DEPARTMENT_NAME, MIN(e.SALARY) AS SMALLEST_SALARY FROM departments AS d JOIN employees AS e ON d.DEPARTMENT_ID = e.DEPARTMENT_ID GROUP BY d.DEPARTMENT_NAME", "source_tables": ["employees"], "error_info": "Result not equal"}, {"sample_id": 3472, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT MIN(salary), department_id FROM employees GROUP BY department_id", "pred_sql": "SELECT d.DEPARTMENT_NAME, MIN(e.SALARY) AS MIN_SALARY FROM departments AS d JOIN employees AS e ON d.DEPARTMENT_ID = e.DEPARTMENT_ID GROUP BY d.DEPARTMENT_NAME", "source_tables": ["employees"], "error_info": "Result not equal"}, {"sample_id": 3473, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT first_name, last_name, department_id FROM employees WHERE salary IN (SELECT MIN(salary) FROM employees GROUP BY department_id)", "pred_sql": "SELECT FIRST_NAME, LAST_NAME, DEPARTMENT_ID FROM employees WHERE SALARY = (SELECT MIN(SALARY) FROM employees)", "source_tables": ["employees"], "error_info": "Result not equal"}, {"sample_id": 3474, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT first_name, last_name, department_id FROM employees WHERE salary IN (SELECT MIN(salary) FROM employees GROUP BY department_id)", "pred_sql": "SELECT e.FIRST_NAME || ' ' || e.LAST_NAME AS FULL_NAME, e.DEPARTMENT_ID FROM employees AS e WHERE e.SALARY = (SELECT MIN(SALARY) FROM employees)", "source_tables": ["employees"], "error_info": "Result not equal"}, {"sample_id": 3475, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT employee_id FROM employees WHERE salary > (SELECT AVG(salary) FROM employees)", "pred_sql": "SELECT EMPLOYEE_ID FROM employees WHERE SALARY > (SELECT AVG(SALARY) FROM employees)", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 3476, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT employee_id FROM employees WHERE salary > (SELECT AVG(salary) FROM employees)", "pred_sql": "SELECT EMPLOYEE_ID FROM employees WHERE SALARY > (SELECT AVG(SALARY) FROM employees)", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 3477, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT employee_id, salary FROM employees WHERE manager_id = (SELECT employee_id FROM employees WHERE first_name = 'Payam')", "pred_sql": "SELECT EMPLOYEE_ID, SALARY FROM employees WHERE MANAGER_ID = (SELECT EMPLOYEE_ID FROM employees WHERE FIRST_NAME = 'Payam')", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 3478, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT employee_id, salary FROM employees WHERE manager_id = (SELECT employee_id FROM employees WHERE first_name = 'Payam')", "pred_sql": "SELECT EMPLOYEE_ID, SALARY FROM employees WHERE MANAGER_ID = (SELECT EMPLOYEE_ID FROM employees WHERE FIRST_NAME = 'Payam')", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 3479, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id", "pred_sql": "SELECT DISTINCT d.DEPARTMENT_NAME FROM departments AS d JOIN employees AS e ON d.DEPARTMENT_ID = e.DEPARTMENT_ID", "source_tables": ["employees", "departments"], "error_info": ""}, {"sample_id": 3480, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id", "pred_sql": "SELECT DISTINCT d.DEPARTMENT_NAME FROM departments AS d JOIN employees AS e ON d.DEPARTMENT_ID = e.DEPARTMENT_ID", "source_tables": ["employees", "departments"], "error_info": ""}, {"sample_id": 3481, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id", "pred_sql": "SELECT e.* FROM employees AS e JOIN departments AS d ON e.EMPLOYEE_ID = d.MANAGER_ID", "source_tables": ["employees", "departments"], "error_info": "Result not equal"}, {"sample_id": 3482, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id", "pred_sql": "SELECT * FROM employees WHERE EMPLOYEE_ID IN (SELECT DISTINCT MANAGER_ID FROM employees WHERE NOT MANAGER_ID IS NULL)", "source_tables": ["employees", "departments"], "error_info": "Result not equal"}, {"sample_id": 3483, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT * FROM departments WHERE department_name = 'Marketing'", "pred_sql": "SELECT * FROM departments WHERE DEPARTMENT_NAME = 'Marketing'", "source_tables": ["departments"], "error_info": ""}, {"sample_id": 3484, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT * FROM departments WHERE department_name = 'Marketing'", "pred_sql": "SELECT * FROM departments WHERE DEPARTMENT_NAME = 'Marketing'", "source_tables": ["departments"], "error_info": ""}, {"sample_id": 3485, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*) >= 2", "pred_sql": "SELECT EMPLOYEE_ID FROM job_history GROUP BY EMPLOYEE_ID HAVING COUNT(DISTINCT JOB_ID) >= 2", "source_tables": ["job_history"], "error_info": ""}, {"sample_id": 3486, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*) >= 2", "pred_sql": "SELECT EMPLOYEE_ID FROM job_history GROUP BY EMPLOYEE_ID HAVING COUNT(JOB_ID) >= 2", "source_tables": ["job_history"], "error_info": ""}, {"sample_id": 3487, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT DISTINCT department_id FROM employees GROUP BY department_id, manager_id HAVING COUNT(employee_id) >= 4", "pred_sql": "SELECT d.DEPARTMENT_ID FROM departments AS d JOIN employees AS e ON d.MANAGER_ID = e.MANAGER_ID GROUP BY d.DEPARTMENT_ID HAVING COUNT(e.EMPLOYEE_ID) >= 4", "source_tables": ["employees"], "error_info": "Result not equal"}, {"sample_id": 3488, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT DISTINCT department_id FROM employees GROUP BY department_id, manager_id HAVING COUNT(employee_id) >= 4", "pred_sql": "SELECT DISTINCT d.DEPARTMENT_ID FROM departments AS d JOIN employees AS e ON d.DEPARTMENT_ID = e.DEPARTMENT_ID WHERE d.MANAGER_ID IN (SELECT MANAGER_ID FROM employees GROUP BY MANAGER_ID HAVING COUNT(EMPLOYEE_ID) >= 4)", "source_tables": ["employees"], "error_info": "Result not equal"}, {"sample_id": 3489, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000", "pred_sql": "SELECT JOB_ID FROM employees GROUP BY JOB_ID HAVING AVG(SALARY) > 8000", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 3490, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000", "pred_sql": "SELECT JOB_ID FROM jobs WHERE (SELECT AVG(SALARY) FROM employees WHERE employees.JOB_ID = jobs.JOB_ID) > 8000", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 3491, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT T1.employee_id, T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80", "pred_sql": "SELECT employees.EMPLOYEE_ID, jobs.JOB_TITLE FROM employees JOIN jobs ON employees.JOB_ID = jobs.JOB_ID WHERE employees.DEPARTMENT_ID = '80'", "source_tables": ["employees", "jobs"], "error_info": ""}, {"sample_id": 3492, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT T1.employee_id, T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80", "pred_sql": "SELECT employees.EMPLOYEE_ID, jobs.JOB_TITLE FROM employees JOIN jobs ON employees.JOB_ID = jobs.JOB_ID WHERE employees.DEPARTMENT_ID = '80'", "source_tables": ["employees", "jobs"], "error_info": ""}, {"sample_id": 3493, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT T1.first_name, T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance'", "pred_sql": "SELECT employees.FIRST_NAME, employees.JOB_ID FROM employees JOIN departments ON employees.DEPARTMENT_ID = departments.DEPARTMENT_ID WHERE departments.DEPARTMENT_NAME = 'Finance'", "source_tables": ["employees", "departments"], "error_info": ""}, {"sample_id": 3494, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT T1.first_name, T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance'", "pred_sql": "SELECT employees.FIRST_NAME, employees.JOB_ID FROM employees JOIN departments ON employees.DEPARTMENT_ID = departments.DEPARTMENT_ID WHERE departments.DEPARTMENT_NAME = 'Finance'", "source_tables": ["employees", "departments"], "error_info": ""}, {"sample_id": 3495, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500", "pred_sql": "SELECT * FROM employees WHERE SALARY BETWEEN (SELECT MIN(MIN_SALARY) FROM jobs) AND 2500", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 3496, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500", "pred_sql": "SELECT * FROM employees WHERE SALARY > (SELECT MIN_SALARY FROM jobs WHERE JOB_ID = employees.JOB_ID) AND SALARY < 2500", "source_tables": ["employees"], "error_info": "Result not equal"}, {"sample_id": 3497, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT * FROM employees WHERE NOT department_id IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "pred_sql": "SELECT EMPLOYEE_ID FROM employees WHERE NOT DEPARTMENT_ID IN (SELECT DISTINCT DEPARTMENT_ID FROM employees WHERE MANAGER_ID BETWEEN '100' AND '200')", "source_tables": ["employees", "departments"], "error_info": "Result not equal"}, {"sample_id": 3498, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT * FROM employees WHERE NOT department_id IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)", "pred_sql": "SELECT EMPLOYEE_ID FROM employees WHERE NOT DEPARTMENT_ID IN (SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN '100' AND '200')", "source_tables": ["employees", "departments"], "error_info": "Result not equal"}, {"sample_id": 3499, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT first_name, last_name, hire_date FROM employees WHERE department_id = (SELECT department_id FROM employees WHERE first_name = 'Clara')", "pred_sql": "SELECT e.FIRST_NAME, e.LAST_NAME, e.HIRE_DATE FROM employees AS e JOIN employees AS c ON e.DEPARTMENT_ID = c.DEPARTMENT_ID WHERE c.FIRST_NAME = 'Clara'", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 3500, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT first_name, last_name, hire_date FROM employees WHERE department_id = (SELECT department_id FROM employees WHERE first_name = 'Clara')", "pred_sql": "SELECT e.FIRST_NAME || ' ' || e.LAST_NAME AS FULL_NAME, e.HIRE_DATE FROM employees AS e WHERE e.DEPARTMENT_ID = (SELECT e2.DEPARTMENT_ID FROM employees AS e2 WHERE e2.FIRST_NAME = 'Clara')", "source_tables": ["employees"], "error_info": "Result not equal"}, {"sample_id": 3501, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT first_name, last_name, hire_date FROM employees WHERE department_id = (SELECT department_id FROM employees WHERE first_name = 'Clara') AND first_name <> 'Clara'", "pred_sql": "SELECT e.FIRST_NAME, e.LAST_NAME, e.HIRE_DATE FROM employees AS e JOIN employees AS c ON e.DEPARTMENT_ID = c.DEPARTMENT_ID WHERE c.FIRST_NAME = 'Clara' AND c.LAST_NAME <> e.LAST_NAME", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 3502, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT first_name, last_name, hire_date FROM employees WHERE department_id = (SELECT department_id FROM employees WHERE first_name = 'Clara') AND first_name <> 'Clara'", "pred_sql": "SELECT e.FIRST_NAME || ' ' || e.LAST_NAME AS FULL_NAME, e.HIRE_DATE FROM employees AS e JOIN employees AS c ON e.DEPARTMENT_ID = c.DEPARTMENT_ID WHERE c.FIRST_NAME = 'Clara' AND e.FIRST_NAME <> 'Clara'", "source_tables": ["employees"], "error_info": "Result not equal"}, {"sample_id": 3503, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT employee_id, first_name, last_name FROM employees WHERE department_id IN (SELECT department_id FROM employees WHERE first_name LIKE '%T%')", "pred_sql": "SELECT e.EMPLOYEE_ID, e.FIRST_NAME, e.LAST_NAME FROM employees AS e JOIN departments AS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID WHERE d.DEPARTMENT_ID IN (SELECT d2.DEPARTMENT_ID FROM employees AS e2 JOIN departments AS d2 ON e2.DEPARTMENT_ID = d2.DEPARTMENT_ID WHERE e2.FIRST_NAME LIKE '%T%' OR e2.LAST_NAME LIKE '%T%')", "source_tables": ["employees"], "error_info": "Result not equal"}, {"sample_id": 3504, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT employee_id, first_name, last_name FROM employees WHERE department_id IN (SELECT department_id FROM employees WHERE first_name LIKE '%T%')", "pred_sql": "SELECT e.EMPLOYEE_ID, e.FIRST_NAME || ' ' || e.LAST_NAME AS FULL_NAME FROM employees AS e JOIN departments AS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID WHERE d.DEPARTMENT_ID IN (SELECT DISTINCT d2.DEPARTMENT_ID FROM employees AS e2 JOIN departments AS d2 ON e2.DEPARTMENT_ID = d2.DEPARTMENT_ID WHERE e2.FIRST_NAME LIKE '%T%')", "source_tables": ["employees"], "error_info": "Result not equal"}, {"sample_id": 3505, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT employee_id, first_name, last_name, salary FROM employees WHERE salary > (SELECT AVG(salary) FROM employees) AND department_id IN (SELECT department_id FROM employees WHERE first_name LIKE '%J%')", "pred_sql": "SELECT e.EMPLOYEE_ID, e.FIRST_NAME, e.LAST_NAME, e.SALARY FROM employees AS e WHERE e.SALARY > (SELECT AVG(SALARY) FROM employees) AND e.DEPARTMENT_ID IN (SELECT DISTINCT d.DEPARTMENT_ID FROM employees AS d WHERE d.FIRST_NAME LIKE 'J%')", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 3506, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT employee_id, first_name, last_name, salary FROM employees WHERE salary > (SELECT AVG(salary) FROM employees) AND department_id IN (SELECT department_id FROM employees WHERE first_name LIKE '%J%')", "pred_sql": "SELECT e.EMPLOYEE_ID, e.FIRST_NAME || ' ' || e.LAST_NAME AS FULL_NAME, e.SALARY FROM employees AS e WHERE e.SALARY > (SELECT AVG(SALARY) FROM employees) AND e.DEPARTMENT_ID IN (SELECT DISTINCT d.DEPARTMENT_ID FROM employees AS emp JOIN departments AS d ON emp.DEPARTMENT_ID = d.DEPARTMENT_ID WHERE emp.FIRST_NAME LIKE '%J%')", "source_tables": ["employees"], "error_info": "Result not equal"}, {"sample_id": 3507, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT employee_id, job_id FROM employees WHERE salary < (SELECT MIN(salary) FROM employees WHERE job_id = 'MK_MAN')", "pred_sql": "SELECT EMPLOYEE_ID, JOB_ID FROM employees WHERE SALARY < (SELECT MIN(SALARY) FROM employees JOIN jobs ON employees.JOB_ID = jobs.JOB_ID WHERE JOB_TITLE = 'MK_MAN')", "source_tables": ["employees"], "error_info": "Result not equal"}, {"sample_id": 3508, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT employee_id, job_id FROM employees WHERE salary < (SELECT MIN(salary) FROM employees WHERE job_id = 'MK_MAN')", "pred_sql": "SELECT EMPLOYEE_ID, JOB_ID FROM employees WHERE SALARY < (SELECT MIN(SALARY) FROM employees JOIN jobs ON employees.JOB_ID = jobs.JOB_ID WHERE JOB_TITLE = 'MK_MAN')", "source_tables": ["employees"], "error_info": "Result not equal"}, {"sample_id": 3509, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT employee_id, first_name, last_name, job_id FROM employees WHERE salary > (SELECT MAX(salary) FROM employees WHERE job_id = 'PU_MAN')", "pred_sql": "SELECT e.EMPLOYEE_ID, e.FIRST_NAME, e.LAST_NAME, j.JOB_TITLE FROM employees AS e JOIN jobs AS j ON e.JOB_ID = j.JOB_ID WHERE e.SALARY > (SELECT MAX(e2.SALARY) FROM employees AS e2 JOIN jobs AS j2 ON e2.JOB_ID = j2.JOB_ID WHERE j2.JOB_TITLE = 'PU_MAN')", "source_tables": ["employees"], "error_info": "Result not equal"}, {"sample_id": 3510, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT employee_id, first_name, last_name, job_id FROM employees WHERE salary > (SELECT MAX(salary) FROM employees WHERE job_id = 'PU_MAN')", "pred_sql": "SELECT EMPLOYEE_ID, FIRST_NAME || ' ' || LAST_NAME AS FULL_NAME, JOB_ID FROM employees WHERE SALARY > (SELECT MAX(SALARY) FROM employees WHERE JOB_ID = (SELECT JOB_ID FROM jobs WHERE JOB_TITLE = 'PU_MAN'))", "source_tables": ["employees"], "error_info": "Result not equal"}, {"sample_id": 3511, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT department_id, SUM(salary) FROM employees GROUP BY department_id HAVING COUNT(*) >= 2", "pred_sql": "SELECT d.DEPARTMENT_ID, SUM(e.SALARY) AS total_salary FROM departments AS d JOIN employees AS e ON d.DEPARTMENT_ID = e.DEPARTMENT_ID GROUP BY d.DEPARTMENT_ID HAVING COUNT(e.EMPLOYEE_ID) >= 2", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 3512, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT department_id, SUM(salary) FROM employees GROUP BY department_id HAVING COUNT(*) >= 2", "pred_sql": "SELECT d.DEPARTMENT_ID, SUM(e.SALARY) AS total_salaries FROM departments AS d JOIN employees AS e ON d.DEPARTMENT_ID = e.DEPARTMENT_ID GROUP BY d.DEPARTMENT_ID HAVING COUNT(e.EMPLOYEE_ID) > 2", "source_tables": ["employees"], "error_info": "Result not equal"}, {"sample_id": 3513, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT * FROM employees WHERE NOT employee_id IN (SELECT employee_id FROM job_history)", "pred_sql": "SELECT * FROM employees WHERE NOT EMPLOYEE_ID IN (SELECT EMPLOYEE_ID FROM job_history)", "source_tables": ["job_history", "employees"], "error_info": ""}, {"sample_id": 3514, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT * FROM employees WHERE NOT employee_id IN (SELECT employee_id FROM job_history)", "pred_sql": "SELECT * FROM employees WHERE NOT EMPLOYEE_ID IN (SELECT EMPLOYEE_ID FROM job_history)", "source_tables": ["job_history", "employees"], "error_info": ""}, {"sample_id": 3515, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT first_name, last_name, salary, department_id, MAX(salary) FROM employees GROUP BY department_id", "pred_sql": "SELECT d.DEPARTMENT_ID, e.FIRST_NAME || ' ' || e.LAST_NAME AS FULL_NAME, e.SALARY FROM employees AS e JOIN departments AS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID WHERE e.SALARY = (SELECT MAX(SALARY) FROM employees WHERE DEPARTMENT_ID = e.DEPARTMENT_ID)", "source_tables": ["employees"], "error_info": "Result not equal"}, {"sample_id": 3516, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT first_name, last_name, salary, department_id, MAX(salary) FROM employees GROUP BY department_id", "pred_sql": "SELECT e.DEPARTMENT_ID, e.FIRST_NAME || ' ' || e.LAST_NAME AS FULL_NAME, e.SALARY FROM employees AS e WHERE e.SALARY = (SELECT MAX(SALARY) FROM employees WHERE DEPARTMENT_ID = e.DEPARTMENT_ID)", "source_tables": ["employees"], "error_info": "Result not equal"}, {"sample_id": 3517, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT T1.first_name, T1.last_name, T2.department_name, T3.city, T3.state_province FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id", "pred_sql": "SELECT employees.FIRST_NAME, employees.LAST_NAME, departments.DEPARTMENT_NAME, locations.CITY, locations.STATE_PROVINCE FROM employees JOIN departments ON employees.DEPARTMENT_ID = departments.DEPARTMENT_ID JOIN locations ON departments.LOCATION_ID = locations.LOCATION_ID", "source_tables": ["employees", "departments", "locations"], "error_info": ""}, {"sample_id": 3518, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT T1.first_name, T1.last_name, T2.department_name, T3.city, T3.state_province FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id", "pred_sql": "SELECT employees.FIRST_NAME || ' ' || employees.LAST_NAME AS FULL_NAME, departments.DEPARTMENT_NAME, locations.CITY, locations.STATE_PROVINCE FROM employees JOIN departments ON employees.DEPARTMENT_ID = departments.DEPARTMENT_ID JOIN locations ON departments.LOCATION_ID = locations.LOCATION_ID", "source_tables": ["employees", "departments", "locations"], "error_info": "Result not equal"}, {"sample_id": 3519, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT T1.first_name, T1.last_name, T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id WHERE T1.first_name LIKE '%z%'", "pred_sql": "SELECT e.FIRST_NAME, e.LAST_NAME, l.CITY FROM employees AS e JOIN departments AS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID JOIN locations AS l ON d.LOCATION_ID = l.LOCATION_ID WHERE e.FIRST_NAME LIKE '%z%'", "source_tables": ["employees", "departments", "locations"], "error_info": ""}, {"sample_id": 3520, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT T1.first_name, T1.last_name, T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id WHERE T1.first_name LIKE '%z%'", "pred_sql": "SELECT FIRST_NAME || ' ' || LAST_NAME AS FULL_NAME, CITY FROM employees JOIN locations ON employees.DEPARTMENT_ID = departments.DEPARTMENT_ID JOIN countries ON departments.LOCATION_ID = locations.LOCATION_ID WHERE FIRST_NAME LIKE '%Z%'", "source_tables": ["employees", "departments", "locations"], "error_info": "Predction Execution Error:no such column: departments.DEPARTMENT_ID"}, {"sample_id": 3521, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT T1.department_name, T2.city, T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id = T1.location_id", "pred_sql": "SELECT departments.DEPARTMENT_NAME, locations.CITY, locations.STATE_PROVINCE FROM departments JOIN locations ON departments.LOCATION_ID = locations.LOCATION_ID", "source_tables": ["departments", "locations"], "error_info": ""}, {"sample_id": 3522, "db_id": "hr_1", "score": 1, "gold_sql": "SELECT T1.department_name, T2.city, T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id = T1.location_id", "pred_sql": "SELECT departments.DEPARTMENT_NAME, locations.CITY, locations.STATE_PROVINCE FROM departments JOIN locations ON departments.LOCATION_ID = locations.LOCATION_ID", "source_tables": ["departments", "locations"], "error_info": ""}, {"sample_id": 3523, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT T1.first_name, T1.last_name, T1.employee_id, T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id JOIN countries AS T4 ON T3.country_id = T4.country_id", "pred_sql": "SELECT employees.FIRST_NAME || ' ' || employees.LAST_NAME AS FULL_NAME, countries.COUNTRY_NAME FROM employees JOIN departments ON employees.DEPARTMENT_ID = departments.DEPARTMENT_ID JOIN locations ON departments.LOCATION_ID = locations.LOCATION_ID JOIN countries ON locations.COUNTRY_ID = countries.COUNTRY_ID", "source_tables": ["countries", "employees", "departments", "locations"], "error_info": "Result not equal"}, {"sample_id": 3524, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT T1.first_name, T1.last_name, T1.employee_id, T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id JOIN countries AS T4 ON T3.country_id = T4.country_id", "pred_sql": "SELECT employees.FIRST_NAME || ' ' || employees.LAST_NAME AS FULL_NAME, employees.EMPLOYEE_ID, countries.COUNTRY_NAME FROM employees JOIN departments ON employees.DEPARTMENT_ID = departments.DEPARTMENT_ID JOIN locations ON departments.LOCATION_ID = locations.LOCATION_ID JOIN countries ON locations.COUNTRY_ID = countries.COUNTRY_ID", "source_tables": ["countries", "employees", "departments", "locations"], "error_info": "Result not equal"}, {"sample_id": 3525, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT department_name, COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY department_name", "pred_sql": "SELECT d.DEPARTMENT_NAME, COUNT(e.EMPLOYEE_ID) AS NUMBER_OF_EMPLOYEES FROM departments AS d LEFT JOIN employees AS e ON d.DEPARTMENT_ID = e.DEPARTMENT_ID GROUP BY d.DEPARTMENT_NAME", "source_tables": ["employees", "departments"], "error_info": "Result not equal"}, {"sample_id": 3526, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT department_name, COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY department_name", "pred_sql": "SELECT d.DEPARTMENT_NAME, COUNT(e.EMPLOYEE_ID) AS EMPLOYEE_COUNT FROM departments AS d LEFT JOIN employees AS e ON d.DEPARTMENT_ID = e.DEPARTMENT_ID GROUP BY d.DEPARTMENT_NAME", "source_tables": ["employees", "departments"], "error_info": "Result not equal"}, {"sample_id": 3527, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT first_name, last_name, salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id WHERE T3.city = 'London'", "pred_sql": "SELECT e.FIRST_NAME || ' ' || e.LAST_NAME AS FULL_NAME, e.SALARY FROM employees AS e JOIN departments AS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID JOIN locations AS l ON d.LOCATION_ID = l.LOCATION_ID WHERE l.CITY = 'London'", "source_tables": ["employees", "departments", "locations"], "error_info": "Result not equal"}, {"sample_id": 3528, "db_id": "hr_1", "score": 0, "gold_sql": "SELECT first_name, last_name, salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id WHERE T3.city = 'London'", "pred_sql": "SELECT e.FIRST_NAME || ' ' || e.LAST_NAME AS FULL_NAME, e.SALARY FROM employees AS e JOIN departments AS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID JOIN locations AS l ON d.LOCATION_ID = l.LOCATION_ID JOIN countries AS c ON l.COUNTRY_ID = c.COUNTRY_ID WHERE l.CITY = 'London'", "source_tables": ["employees", "departments", "locations"], "error_info": "Result not equal"}, {"sample_id": 3529, "db_id": "music_1", "score": 0, "gold_sql": "SELECT song_name, releasedate FROM song ORDER BY releasedate DESC LIMIT 1", "pred_sql": "SELECT song_name FROM song ORDER BY releasedate DESC LIMIT 1", "source_tables": ["song"], "error_info": "Result not equal"}, {"sample_id": 3530, "db_id": "music_1", "score": 0, "gold_sql": "SELECT song_name, releasedate FROM song ORDER BY releasedate DESC LIMIT 1", "pred_sql": "SELECT song_name FROM song ORDER BY releasedate DESC LIMIT 1", "source_tables": ["song"], "error_info": "Result not equal"}, {"sample_id": 3531, "db_id": "music_1", "score": 0, "gold_sql": "SELECT f_id FROM files ORDER BY duration DESC LIMIT 1", "pred_sql": "SELECT f_id FROM song ORDER BY duration DESC LIMIT 1", "source_tables": ["files"], "error_info": "Predction Execution Error:no such column: duration"}, {"sample_id": 3532, "db_id": "music_1", "score": 0, "gold_sql": "SELECT f_id FROM files ORDER BY duration DESC LIMIT 1", "pred_sql": "SELECT f_id FROM song ORDER BY duration DESC LIMIT 1", "source_tables": ["files"], "error_info": "Predction Execution Error:no such column: duration"}, {"sample_id": 3533, "db_id": "music_1", "score": 1, "gold_sql": "SELECT song_name FROM song WHERE languages = 'english'", "pred_sql": "SELECT song_name FROM song WHERE languages LIKE '%English%'", "source_tables": ["song"], "error_info": ""}, {"sample_id": 3534, "db_id": "music_1", "score": 1, "gold_sql": "SELECT song_name FROM song WHERE languages = 'english'", "pred_sql": "SELECT song_name FROM song WHERE languages LIKE '%English%'", "source_tables": ["song"], "error_info": ""}, {"sample_id": 3535, "db_id": "music_1", "score": 1, "gold_sql": "SELECT f_id FROM files WHERE formats = 'mp3'", "pred_sql": "SELECT f_id FROM files WHERE formats LIKE '%mp3%'", "source_tables": ["files"], "error_info": ""}, {"sample_id": 3536, "db_id": "music_1", "score": 1, "gold_sql": "SELECT f_id FROM files WHERE formats = 'mp3'", "pred_sql": "SELECT f_id FROM files WHERE formats LIKE '%mp3%'", "source_tables": ["files"], "error_info": ""}, {"sample_id": 3537, "db_id": "music_1", "score": 1, "gold_sql": "SELECT DISTINCT T1.artist_name, T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.rating > 9", "pred_sql": "SELECT DISTINCT artist.artist_name, artist.country FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE song.rating > '9'", "source_tables": ["artist", "song"], "error_info": ""}, {"sample_id": 3538, "db_id": "music_1", "score": 1, "gold_sql": "SELECT DISTINCT T1.artist_name, T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.rating > 9", "pred_sql": "SELECT DISTINCT artist.artist_name, artist.country FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE song.rating > '9'", "source_tables": ["artist", "song"], "error_info": ""}, {"sample_id": 3539, "db_id": "music_1", "score": 1, "gold_sql": "SELECT DISTINCT T1.file_size, T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution < 800", "pred_sql": "SELECT files.file_size, files.formats FROM files JOIN song ON files.f_id = song.f_id WHERE song.resolution < 800", "source_tables": ["files", "song"], "error_info": ""}, {"sample_id": 3540, "db_id": "music_1", "score": 1, "gold_sql": "SELECT DISTINCT T1.file_size, T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution < 800", "pred_sql": "SELECT files.file_size, files.formats FROM files JOIN song ON files.f_id = song.f_id WHERE song.resolution < 800", "source_tables": ["files", "song"], "error_info": ""}, {"sample_id": 3541, "db_id": "music_1", "score": 0, "gold_sql": "SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id = T2.f_id ORDER BY T2.duration LIMIT 1", "pred_sql": "SELECT artist_name FROM song ORDER BY duration ASC LIMIT 1", "source_tables": ["files", "song"], "error_info": "Predction Execution Error:no such column: duration"}, {"sample_id": 3542, "db_id": "music_1", "score": 0, "gold_sql": "SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id = T2.f_id ORDER BY T2.duration LIMIT 1", "pred_sql": "SELECT artist_name FROM song WHERE duration = (SELECT MIN(duration) FROM song)", "source_tables": ["files", "song"], "error_info": "Predction Execution Error:no such column: duration"}, {"sample_id": 3543, "db_id": "music_1", "score": 0, "gold_sql": "SELECT T1.artist_name, T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name ORDER BY T2.rating DESC LIMIT 3", "pred_sql": "SELECT DISTINCT artist.artist_name, artist.country FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE song.rating IN (SELECT DISTINCT rating FROM song ORDER BY rating DESC LIMIT 3)", "source_tables": ["artist", "song"], "error_info": "Result not equal"}, {"sample_id": 3544, "db_id": "music_1", "score": 1, "gold_sql": "SELECT T1.artist_name, T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name ORDER BY T2.rating DESC LIMIT 3", "pred_sql": "SELECT artist.artist_name, song.country FROM song JOIN artist ON song.artist_name = artist.artist_name ORDER BY song.rating DESC LIMIT 3", "source_tables": ["artist", "song"], "error_info": ""}, {"sample_id": 3545, "db_id": "music_1", "score": 0, "gold_sql": "SELECT COUNT(*) FROM files WHERE duration LIKE '4:%'", "pred_sql": "SELECT COUNT(*) AS song_count FROM song WHERE duration = '4:00'", "source_tables": ["files"], "error_info": "Predction Execution Error:no such column: duration"}, {"sample_id": 3546, "db_id": "music_1", "score": 0, "gold_sql": "SELECT COUNT(*) FROM files WHERE duration LIKE '4:%'", "pred_sql": "SELECT COUNT(*) AS song_count FROM song WHERE duration LIKE '4:%' OR duration LIKE '3:59%' OR duration LIKE '4:01%'", "source_tables": ["files"], "error_info": "Predction Execution Error:no such column: duration"}, {"sample_id": 3547, "db_id": "music_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM artist WHERE country = 'Bangladesh'", "pred_sql": "SELECT COUNT(*) FROM artist WHERE country = 'Bangladesh'", "source_tables": ["artist"], "error_info": ""}, {"sample_id": 3548, "db_id": "music_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM artist WHERE country = 'Bangladesh'", "pred_sql": "SELECT COUNT(*) FROM artist WHERE country = 'Bangladesh'", "source_tables": ["artist"], "error_info": ""}, {"sample_id": 3549, "db_id": "music_1", "score": 0, "gold_sql": "SELECT AVG(T2.rating) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.gender = 'Female'", "pred_sql": "SELECT AVG(rating) AS average_rating FROM song WHERE artist_name IN (SELECT artist_name FROM artist WHERE gender = 'female')", "source_tables": ["artist", "song"], "error_info": "Result not equal"}, {"sample_id": 3550, "db_id": "music_1", "score": 0, "gold_sql": "SELECT AVG(T2.rating) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.gender = 'Female'", "pred_sql": "SELECT AVG(song_count) AS average_songs FROM (SELECT COUNT(*) AS song_count FROM song JOIN artist ON song.artist_name = artist.artist_name WHERE artist.gender = 'female' GROUP BY song.artist_name) AS song_counts", "source_tables": ["artist", "song"], "error_info": "Result not equal"}, {"sample_id": 3551, "db_id": "music_1", "score": 0, "gold_sql": "SELECT formats FROM files GROUP BY formats ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT DISTINCT formats FROM files", "source_tables": ["files"], "error_info": "Result not equal"}, {"sample_id": 3552, "db_id": "music_1", "score": 0, "gold_sql": "SELECT formats FROM files GROUP BY formats ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT formats, COUNT(*) AS file_count FROM files GROUP BY formats ORDER BY file_count DESC LIMIT 1", "source_tables": ["files"], "error_info": "Result not equal"}, {"sample_id": 3553, "db_id": "music_1", "score": 1, "gold_sql": "SELECT artist_name FROM artist WHERE country = 'UK' INTERSECT SELECT artist_name FROM song WHERE languages = 'english'", "pred_sql": "SELECT DISTINCT artist.artist_name FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE artist.country = 'UK' AND song.languages LIKE '%English%'", "source_tables": ["artist", "song"], "error_info": ""}, {"sample_id": 3554, "db_id": "music_1", "score": 1, "gold_sql": "SELECT artist_name FROM artist WHERE country = 'UK' INTERSECT SELECT artist_name FROM song WHERE languages = 'english'", "pred_sql": "SELECT DISTINCT artist.artist_name FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE artist.country = 'UK' AND song.languages LIKE '%English%'", "source_tables": ["artist", "song"], "error_info": ""}, {"sample_id": 3555, "db_id": "music_1", "score": 1, "gold_sql": "SELECT f_id FROM files WHERE formats = 'mp4' INTERSECT SELECT f_id FROM song WHERE resolution < 1000", "pred_sql": "SELECT song.f_id FROM song JOIN files ON song.f_id = files.f_id WHERE files.formats LIKE '%mp4%' AND song.resolution < '1000'", "source_tables": ["files", "song"], "error_info": ""}, {"sample_id": 3556, "db_id": "music_1", "score": 0, "gold_sql": "SELECT f_id FROM files WHERE formats = 'mp4' INTERSECT SELECT f_id FROM song WHERE resolution < 1000", "pred_sql": "SELECT f_id FROM files WHERE formats LIKE '%mp4%' AND CAST(resolution AS INT) < 1000", "source_tables": ["files", "song"], "error_info": "Predction Execution Error:no such column: resolution"}, {"sample_id": 3557, "db_id": "music_1", "score": 0, "gold_sql": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.gender = 'Female' AND T2.languages = 'bangla'", "pred_sql": "SELECT artist.country FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE artist.gender = 'female' AND song.languages LIKE '%Bangla%'", "source_tables": ["artist", "song"], "error_info": "Result not equal"}, {"sample_id": 3558, "db_id": "music_1", "score": 0, "gold_sql": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.gender = 'Female' AND T2.languages = 'bangla'", "pred_sql": "SELECT DISTINCT artist.country FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE artist.gender = 'female' AND song.languages LIKE '%Bangla%'", "source_tables": ["artist", "song"], "error_info": "Result not equal"}, {"sample_id": 3559, "db_id": "music_1", "score": 1, "gold_sql": "SELECT AVG(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.formats = 'mp3' AND T2.resolution < 800", "pred_sql": "SELECT AVG(duration) AS average_duration FROM song JOIN files ON song.f_id = files.f_id WHERE formats LIKE '%mp3%' AND resolution < '800'", "source_tables": ["files", "song"], "error_info": ""}, {"sample_id": 3560, "db_id": "music_1", "score": 1, "gold_sql": "SELECT AVG(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.formats = 'mp3' AND T2.resolution < 800", "pred_sql": "SELECT AVG(duration) AS average_duration FROM song JOIN files ON song.f_id = files.f_id WHERE files.formats LIKE '%mp3%' AND song.resolution < '800'", "source_tables": ["files", "song"], "error_info": ""}, {"sample_id": 3561, "db_id": "music_1", "score": 1, "gold_sql": "SELECT COUNT(*), gender FROM artist GROUP BY gender", "pred_sql": "SELECT gender, COUNT(*) AS number_of_artists FROM artist GROUP BY gender", "source_tables": ["artist"], "error_info": ""}, {"sample_id": 3562, "db_id": "music_1", "score": 1, "gold_sql": "SELECT COUNT(*), gender FROM artist GROUP BY gender", "pred_sql": "SELECT gender, COUNT(*) AS count FROM artist GROUP BY gender", "source_tables": ["artist"], "error_info": ""}, {"sample_id": 3563, "db_id": "music_1", "score": 1, "gold_sql": "SELECT AVG(rating), languages FROM song GROUP BY languages", "pred_sql": "SELECT languages, AVG(rating) AS average_rating FROM song GROUP BY languages", "source_tables": ["song"], "error_info": ""}, {"sample_id": 3564, "db_id": "music_1", "score": 1, "gold_sql": "SELECT AVG(rating), languages FROM song GROUP BY languages", "pred_sql": "SELECT languages, AVG(rating) AS average_rating FROM song GROUP BY languages", "source_tables": ["song"], "error_info": ""}, {"sample_id": 3565, "db_id": "music_1", "score": 0, "gold_sql": "SELECT T1.gender, T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name ORDER BY T2.resolution LIMIT 1", "pred_sql": "SELECT artist.gender, artist.artist_name FROM artist JOIN song ON artist.artist_name = song.artist_name JOIN files ON song.f_id = files.f_id WHERE files.resolution = (SELECT MIN(resolution) FROM files)", "source_tables": ["artist", "song"], "error_info": "Predction Execution Error:no such column: files.resolution"}, {"sample_id": 3566, "db_id": "music_1", "score": 0, "gold_sql": "SELECT T1.gender, T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name ORDER BY T2.resolution LIMIT 1", "pred_sql": "SELECT artist.gender, artist.artist_name FROM artist JOIN song ON artist.artist_name = song.artist_name JOIN files ON song.f_id = files.f_id WHERE files.resolution = (SELECT MIN(resolution) FROM files)", "source_tables": ["artist", "song"], "error_info": "Predction Execution Error:no such column: files.resolution"}, {"sample_id": 3567, "db_id": "music_1", "score": 0, "gold_sql": "SELECT COUNT(*), formats FROM files GROUP BY formats", "pred_sql": "SELECT formats, COUNT(DISTINCT artist_name) AS artist_count FROM files JOIN song ON files.f_id = song.f_id GROUP BY formats", "source_tables": ["files"], "error_info": "Predction Execution Error:ambiguous column name: artist_name"}, {"sample_id": 3568, "db_id": "music_1", "score": 1, "gold_sql": "SELECT COUNT(*), formats FROM files GROUP BY formats", "pred_sql": "SELECT formats, COUNT(song_name) AS song_count FROM files JOIN song ON files.f_id = song.f_id GROUP BY formats", "source_tables": ["files"], "error_info": ""}, {"sample_id": 3569, "db_id": "music_1", "score": 0, "gold_sql": "SELECT DISTINCT song_name FROM song WHERE resolution > (SELECT MIN(resolution) FROM song WHERE languages = 'english')", "pred_sql": "SELECT DISTINCT s.song_name FROM song AS s WHERE s.resolution > (SELECT MAX(s2.resolution) FROM song AS s2 WHERE s2.languages LIKE '%English%')", "source_tables": ["song"], "error_info": "Result not equal"}, {"sample_id": 3570, "db_id": "music_1", "score": 0, "gold_sql": "SELECT DISTINCT song_name FROM song WHERE resolution > (SELECT MIN(resolution) FROM song WHERE languages = 'english')", "pred_sql": "SELECT DISTINCT song_name FROM song WHERE resolution > (SELECT MAX(resolution) FROM song WHERE languages LIKE '%English%')", "source_tables": ["song"], "error_info": "Result not equal"}, {"sample_id": 3571, "db_id": "music_1", "score": 1, "gold_sql": "SELECT song_name FROM song WHERE rating < (SELECT MAX(rating) FROM song WHERE genre_is = 'blues')", "pred_sql": "SELECT song_name FROM song WHERE rating < (SELECT MAX(rating) FROM song WHERE genre_is = 'blues')", "source_tables": ["song"], "error_info": ""}, {"sample_id": 3572, "db_id": "music_1", "score": 1, "gold_sql": "SELECT song_name FROM song WHERE rating < (SELECT MAX(rating) FROM song WHERE genre_is = 'blues')", "pred_sql": "SELECT song_name FROM song WHERE rating < (SELECT MIN(rating) FROM song WHERE genre_is = 'blues')", "source_tables": ["song"], "error_info": ""}, {"sample_id": 3573, "db_id": "music_1", "score": 1, "gold_sql": "SELECT T1.artist_name, T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.song_name LIKE '%love%'", "pred_sql": "SELECT artist.artist_name, artist.country FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE song.song_name LIKE '%love%'", "source_tables": ["artist", "song"], "error_info": ""}, {"sample_id": 3574, "db_id": "music_1", "score": 1, "gold_sql": "SELECT T1.artist_name, T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.song_name LIKE '%love%'", "pred_sql": "SELECT artist.artist_name, artist.country FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE song.song_name LIKE '%love%'", "source_tables": ["artist", "song"], "error_info": ""}, {"sample_id": 3575, "db_id": "music_1", "score": 0, "gold_sql": "SELECT T1.artist_name, T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.releasedate LIKE '%Mar%'", "pred_sql": "SELECT artist.artist_name, artist.gender FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE TIME_TO_STR(CAST(song.releasedate AS TIMESTAMP), '%m') = '03'", "source_tables": ["artist", "song"], "error_info": "Predction Execution Error:no such function: TIME_TO_STR"}, {"sample_id": 3576, "db_id": "music_1", "score": 0, "gold_sql": "SELECT T1.artist_name, T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.releasedate LIKE '%Mar%'", "pred_sql": "SELECT DISTINCT artist.artist_name, artist.gender FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE TIME_TO_STR(CAST(song.releasedate AS TIMESTAMP), '%m') = '03'", "source_tables": ["artist", "song"], "error_info": "Predction Execution Error:no such function: TIME_TO_STR"}, {"sample_id": 3577, "db_id": "music_1", "score": 1, "gold_sql": "SELECT g_name, rating FROM genre ORDER BY g_name", "pred_sql": "SELECT g_name, rating FROM genre ORDER BY g_name ASC", "source_tables": ["genre"], "error_info": ""}, {"sample_id": 3578, "db_id": "music_1", "score": 1, "gold_sql": "SELECT g_name, rating FROM genre ORDER BY g_name", "pred_sql": "SELECT g_name, rating FROM genre ORDER BY g_name ASC", "source_tables": ["genre"], "error_info": ""}, {"sample_id": 3579, "db_id": "music_1", "score": 1, "gold_sql": "SELECT song_name FROM song ORDER BY resolution", "pred_sql": "SELECT song_name FROM song ORDER BY resolution", "source_tables": ["song"], "error_info": ""}, {"sample_id": 3580, "db_id": "music_1", "score": 1, "gold_sql": "SELECT song_name FROM song ORDER BY resolution", "pred_sql": "SELECT song_name FROM song ORDER BY resolution", "source_tables": ["song"], "error_info": ""}, {"sample_id": 3581, "db_id": "music_1", "score": 1, "gold_sql": "SELECT f_id FROM files WHERE formats = 'mp4' UNION SELECT f_id FROM song WHERE resolution > 720", "pred_sql": "SELECT DISTINCT song.f_id FROM song JOIN files ON song.f_id = files.f_id WHERE files.formats LIKE '%mp4%' OR song.resolution > '720'", "source_tables": ["files", "song"], "error_info": ""}, {"sample_id": 3582, "db_id": "music_1", "score": 1, "gold_sql": "SELECT f_id FROM files WHERE formats = 'mp4' UNION SELECT f_id FROM song WHERE resolution > 720", "pred_sql": "SELECT f_id FROM song WHERE f_id IN (SELECT f_id FROM files WHERE formats LIKE '%mp4%') OR resolution > '720'", "source_tables": ["files", "song"], "error_info": ""}, {"sample_id": 3583, "db_id": "music_1", "score": 0, "gold_sql": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.duration LIKE '4:%' UNION SELECT song_name FROM song WHERE languages = 'english'", "pred_sql": "SELECT song_name FROM song WHERE duration = '4:00' OR languages LIKE '%English%'", "source_tables": ["files", "song"], "error_info": "Predction Execution Error:no such column: duration"}, {"sample_id": 3584, "db_id": "music_1", "score": 0, "gold_sql": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.duration LIKE '4:%' UNION SELECT song_name FROM song WHERE languages = 'english'", "pred_sql": "SELECT song_name FROM song WHERE duration LIKE '4:%' OR languages LIKE '%English%'", "source_tables": ["files", "song"], "error_info": "Predction Execution Error:no such column: duration"}, {"sample_id": 3585, "db_id": "music_1", "score": 0, "gold_sql": "SELECT languages FROM song GROUP BY languages ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT languages, COUNT(*) AS language_count FROM song GROUP BY languages ORDER BY language_count DESC LIMIT 1", "source_tables": ["song"], "error_info": "Result not equal"}, {"sample_id": 3586, "db_id": "music_1", "score": 0, "gold_sql": "SELECT languages FROM song GROUP BY languages ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT languages, COUNT(*) AS language_count FROM song GROUP BY languages ORDER BY language_count DESC", "source_tables": ["song"], "error_info": "Result not equal"}, {"sample_id": 3587, "db_id": "music_1", "score": 0, "gold_sql": "SELECT artist_name FROM song WHERE resolution > 500 GROUP BY languages ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT languages, COUNT(languages) AS language_count FROM song WHERE resolution > 500 GROUP BY languages ORDER BY language_count DESC LIMIT 1", "source_tables": ["song"], "error_info": "Result not equal"}, {"sample_id": 3588, "db_id": "music_1", "score": 0, "gold_sql": "SELECT artist_name FROM song WHERE resolution > 500 GROUP BY languages ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT artist.artist_name, song.languages, COUNT(song.song_name) AS song_count FROM artist JOIN song ON artist.artist_name = song.artist_name JOIN files ON song.f_id = files.f_id WHERE files.resolution > 500 GROUP BY artist.artist_name, song.languages ORDER BY song_count DESC", "source_tables": ["song"], "error_info": "Predction Execution Error:no such column: files.resolution"}, {"sample_id": 3589, "db_id": "music_1", "score": 1, "gold_sql": "SELECT artist_name FROM artist WHERE country = 'UK' AND gender = 'Male'", "pred_sql": "SELECT artist_name FROM artist WHERE gender = 'Male' AND country = 'UK'", "source_tables": ["artist"], "error_info": ""}, {"sample_id": 3590, "db_id": "music_1", "score": 0, "gold_sql": "SELECT artist_name FROM artist WHERE country = 'UK' AND gender = 'Male'", "pred_sql": "SELECT artist_name FROM artist WHERE country = 'British' AND gender = 'male'", "source_tables": ["artist"], "error_info": "Result not equal"}, {"sample_id": 3591, "db_id": "music_1", "score": 0, "gold_sql": "SELECT song_name FROM song WHERE genre_is = 'modern' OR languages = 'english'", "pred_sql": "SELECT song_name FROM song WHERE genre_is = 'modern' OR languages = 'English'", "source_tables": ["song"], "error_info": "Result not equal"}, {"sample_id": 3592, "db_id": "music_1", "score": 1, "gold_sql": "SELECT song_name FROM song WHERE genre_is = 'modern' OR languages = 'english'", "pred_sql": "SELECT song_name FROM song WHERE genre_is = 'modern' OR languages LIKE '%English%'", "source_tables": ["song"], "error_info": ""}, {"sample_id": 3593, "db_id": "music_1", "score": 1, "gold_sql": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.formats = 'mp3' INTERSECT SELECT song_name FROM song WHERE resolution < 1000", "pred_sql": "SELECT song_name FROM song JOIN files ON song.f_id = files.f_id WHERE formats LIKE '%mp3%' AND resolution < '1000'", "source_tables": ["files", "song"], "error_info": ""}, {"sample_id": 3594, "db_id": "music_1", "score": 1, "gold_sql": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.formats = 'mp3' INTERSECT SELECT song_name FROM song WHERE resolution < 1000", "pred_sql": "SELECT song.song_name FROM song JOIN files ON song.f_id = files.f_id WHERE files.formats LIKE '%mp3%' AND song.resolution < '1000'", "source_tables": ["files", "song"], "error_info": ""}, {"sample_id": 3595, "db_id": "music_1", "score": 1, "gold_sql": "SELECT artist_name FROM artist WHERE country = 'UK' INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.languages = 'english'", "pred_sql": "SELECT DISTINCT artist.artist_name FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE artist.country = 'UK' AND song.languages LIKE '%English%'", "source_tables": ["artist", "song"], "error_info": ""}, {"sample_id": 3596, "db_id": "music_1", "score": 1, "gold_sql": "SELECT artist_name FROM artist WHERE country = 'UK' INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.languages = 'english'", "pred_sql": "SELECT DISTINCT artist.artist_name FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE artist.country = 'UK' AND song.languages LIKE '%English%'", "source_tables": ["artist", "song"], "error_info": ""}, {"sample_id": 3597, "db_id": "music_1", "score": 1, "gold_sql": "SELECT AVG(rating), AVG(resolution) FROM song WHERE languages = 'bangla'", "pred_sql": "SELECT AVG(song.rating) AS average_rating, AVG(song.resolution) AS average_resolution FROM song WHERE song.languages LIKE '%Bangla%'", "source_tables": ["song"], "error_info": ""}, {"sample_id": 3598, "db_id": "music_1", "score": 0, "gold_sql": "SELECT AVG(rating), AVG(resolution) FROM song WHERE languages = 'bangla'", "pred_sql": "SELECT AVG(song.rating) AS average_rating, AVG(resolution) AS average_resolution FROM song WHERE genre_is = 'Bangla'", "source_tables": ["song"], "error_info": "Result not equal"}, {"sample_id": 3599, "db_id": "music_1", "score": 0, "gold_sql": "SELECT MAX(T2.resolution), MIN(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.duration LIKE '3:%'", "pred_sql": "SELECT MAX(resolution) AS max_resolution, MIN(resolution) AS min_resolution FROM song WHERE duration = '3:00'", "source_tables": ["files", "song"], "error_info": "Predction Execution Error:no such column: duration"}, {"sample_id": 3600, "db_id": "music_1", "score": 0, "gold_sql": "SELECT MAX(T2.resolution), MIN(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.duration LIKE '3:%'", "pred_sql": "SELECT MAX(resolution) AS max_resolution, MIN(resolution) AS min_resolution FROM song WHERE duration = '3:00'", "source_tables": ["files", "song"], "error_info": "Predction Execution Error:no such column: duration"}, {"sample_id": 3601, "db_id": "music_1", "score": 0, "gold_sql": "SELECT MAX(T1.duration), MAX(T2.resolution), T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id GROUP BY T2.languages ORDER BY T2.languages", "pred_sql": "SELECT languages, MAX(duration) AS max_duration, MAX(resolution) AS max_resolution FROM song GROUP BY languages ORDER BY languages", "source_tables": ["files", "song"], "error_info": "Predction Execution Error:no such column: duration"}, {"sample_id": 3602, "db_id": "music_1", "score": 0, "gold_sql": "SELECT MAX(T1.duration), MAX(T2.resolution), T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id GROUP BY T2.languages ORDER BY T2.languages", "pred_sql": "SELECT languages, MAX(duration) AS max_duration, MAX(resolution) AS max_resolution FROM song GROUP BY languages ORDER BY languages", "source_tables": ["files", "song"], "error_info": "Predction Execution Error:no such column: duration"}, {"sample_id": 3603, "db_id": "music_1", "score": 0, "gold_sql": "SELECT MIN(T1.duration), MIN(T2.rating), T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is", "pred_sql": "SELECT genre.g_name, MIN(song.duration) AS shortest_duration, MIN(song.rating) AS lowest_rating FROM song JOIN genre ON song.genre_is = genre.g_name GROUP BY genre.g_name ORDER BY genre.g_name", "source_tables": ["files", "song"], "error_info": "Predction Execution Error:no such column: song.duration"}, {"sample_id": 3604, "db_id": "music_1", "score": 0, "gold_sql": "SELECT MIN(T1.duration), MIN(T2.rating), T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is", "pred_sql": "SELECT genre.g_name, song.song_name, MIN(song.duration) AS shortest_duration, MIN(song.rating) AS lowest_rating FROM song JOIN genre ON song.genre_is = genre.g_name GROUP BY genre.g_name ORDER BY genre.g_name", "source_tables": ["files", "song"], "error_info": "Predction Execution Error:no such column: song.duration"}, {"sample_id": 3605, "db_id": "music_1", "score": 1, "gold_sql": "SELECT T1.artist_name, COUNT(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.languages = 'english' GROUP BY T2.artist_name HAVING COUNT(*) >= 1", "pred_sql": "SELECT artist.artist_name, COUNT(song.song_name) AS number_of_works FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE song.languages LIKE '%English%' GROUP BY artist.artist_name", "source_tables": ["artist", "song"], "error_info": ""}, {"sample_id": 3606, "db_id": "music_1", "score": 1, "gold_sql": "SELECT T1.artist_name, COUNT(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.languages = 'english' GROUP BY T2.artist_name HAVING COUNT(*) >= 1", "pred_sql": "SELECT artist.artist_name, COUNT(song.song_name) AS number_of_works FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE song.languages LIKE '%English%' GROUP BY artist.artist_name", "source_tables": ["artist", "song"], "error_info": ""}, {"sample_id": 3607, "db_id": "music_1", "score": 0, "gold_sql": "SELECT T1.artist_name, T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.resolution > 900 GROUP BY T2.artist_name HAVING COUNT(*) >= 1", "pred_sql": "SELECT DISTINCT artist.artist_name, artist.country FROM artist JOIN song ON artist.artist_name = song.artist_name JOIN files ON song.f_id = files.f_id WHERE files.resolution > 900", "source_tables": ["artist", "song"], "error_info": "Predction Execution Error:no such column: files.resolution"}, {"sample_id": 3608, "db_id": "music_1", "score": 1, "gold_sql": "SELECT T1.artist_name, T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.resolution > 900 GROUP BY T2.artist_name HAVING COUNT(*) >= 1", "pred_sql": "SELECT artist.artist_name, artist.country FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE song.resolution > '900'", "source_tables": ["artist", "song"], "error_info": ""}, {"sample_id": 3609, "db_id": "music_1", "score": 1, "gold_sql": "SELECT T1.artist_name, COUNT(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name GROUP BY T2.artist_name ORDER BY COUNT(*) DESC LIMIT 3", "pred_sql": "SELECT artist_name, COUNT(song_name) AS number_of_songs FROM song GROUP BY artist_name ORDER BY number_of_songs DESC LIMIT 3", "source_tables": ["artist", "song"], "error_info": ""}, {"sample_id": 3610, "db_id": "music_1", "score": 1, "gold_sql": "SELECT T1.artist_name, COUNT(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name GROUP BY T2.artist_name ORDER BY COUNT(*) DESC LIMIT 3", "pred_sql": "SELECT artist_name, COUNT(song_name) AS song_count FROM song GROUP BY artist_name ORDER BY song_count DESC LIMIT 3", "source_tables": ["artist", "song"], "error_info": ""}, {"sample_id": 3611, "db_id": "music_1", "score": 1, "gold_sql": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name GROUP BY T2.artist_name ORDER BY COUNT(*) LIMIT 1", "pred_sql": "SELECT artist.country FROM artist JOIN song ON artist.artist_name = song.artist_name GROUP BY artist.artist_name ORDER BY COUNT(song.song_name) ASC LIMIT 1", "source_tables": ["artist", "song"], "error_info": ""}, {"sample_id": 3612, "db_id": "music_1", "score": 1, "gold_sql": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name GROUP BY T2.artist_name ORDER BY COUNT(*) LIMIT 1", "pred_sql": "SELECT country FROM artist WHERE artist_name = (SELECT artist_name FROM song GROUP BY artist_name ORDER BY COUNT(song_name) ASC LIMIT 1)", "source_tables": ["artist", "song"], "error_info": ""}, {"sample_id": 3613, "db_id": "music_1", "score": 1, "gold_sql": "SELECT song_name FROM song WHERE rating < (SELECT MIN(rating) FROM song WHERE languages = 'english')", "pred_sql": "SELECT song_name FROM song WHERE rating < (SELECT MIN(rating) FROM song WHERE languages LIKE '%English%')", "source_tables": ["song"], "error_info": ""}, {"sample_id": 3614, "db_id": "music_1", "score": 1, "gold_sql": "SELECT song_name FROM song WHERE rating < (SELECT MIN(rating) FROM song WHERE languages = 'english')", "pred_sql": "SELECT song_name FROM song WHERE rating < (SELECT MIN(rating) FROM song WHERE languages LIKE '%English%')", "source_tables": ["song"], "error_info": ""}, {"sample_id": 3615, "db_id": "music_1", "score": 1, "gold_sql": "SELECT f_id FROM song WHERE resolution > (SELECT MAX(resolution) FROM song WHERE rating < 8)", "pred_sql": "SELECT DISTINCT s1.f_id FROM song AS s1 WHERE s1.resolution > (SELECT MAX(s2.resolution) FROM song AS s2 WHERE s2.rating < 8)", "source_tables": ["song"], "error_info": ""}, {"sample_id": 3616, "db_id": "music_1", "score": 1, "gold_sql": "SELECT f_id FROM song WHERE resolution > (SELECT MAX(resolution) FROM song WHERE rating < 8)", "pred_sql": "SELECT s1.f_id FROM song AS s1 WHERE s1.resolution > (SELECT MAX(s2.resolution) FROM song AS s2 WHERE s2.rating < 8)", "source_tables": ["song"], "error_info": ""}, {"sample_id": 3617, "db_id": "music_1", "score": 1, "gold_sql": "SELECT f_id FROM song WHERE resolution > (SELECT AVG(resolution) FROM song WHERE genre_is = 'modern')", "pred_sql": "SELECT s.f_id FROM song AS s JOIN genre AS g ON s.genre_is = g.g_name WHERE s.resolution > (SELECT AVG(resolution) FROM song WHERE genre_is = 'modern')", "source_tables": ["song"], "error_info": ""}, {"sample_id": 3618, "db_id": "music_1", "score": 1, "gold_sql": "SELECT f_id FROM song WHERE resolution > (SELECT AVG(resolution) FROM song WHERE genre_is = 'modern')", "pred_sql": "SELECT s.f_id FROM song AS s JOIN genre AS g ON s.genre_is = g.g_name WHERE s.resolution > (SELECT AVG(resolution) FROM song WHERE genre_is = 'modern')", "source_tables": ["song"], "error_info": ""}, {"sample_id": 3619, "db_id": "music_1", "score": 0, "gold_sql": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.languages = 'bangla' GROUP BY T2.artist_name ORDER BY COUNT(*) DESC LIMIT 3", "pred_sql": "SELECT artist_name, COUNT(*) AS song_count FROM song WHERE languages LIKE '%Bangla%' GROUP BY artist_name ORDER BY song_count DESC LIMIT 3", "source_tables": ["artist", "song"], "error_info": "Result not equal"}, {"sample_id": 3620, "db_id": "music_1", "score": 0, "gold_sql": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.languages = 'bangla' GROUP BY T2.artist_name ORDER BY COUNT(*) DESC LIMIT 3", "pred_sql": "SELECT artist_name, COUNT(song_name) AS song_count FROM song WHERE languages LIKE '%Bangla%' GROUP BY artist_name ORDER BY song_count DESC LIMIT 3", "source_tables": ["artist", "song"], "error_info": "Result not equal"}, {"sample_id": 3621, "db_id": "music_1", "score": 1, "gold_sql": "SELECT f_id, genre_is, artist_name FROM song WHERE languages = 'english' ORDER BY rating", "pred_sql": "SELECT song.f_id, song.genre_is, song.artist_name FROM song WHERE song.languages LIKE '%English%' ORDER BY song.rating", "source_tables": ["song"], "error_info": ""}, {"sample_id": 3622, "db_id": "music_1", "score": 1, "gold_sql": "SELECT f_id, genre_is, artist_name FROM song WHERE languages = 'english' ORDER BY rating", "pred_sql": "SELECT song.f_id, song.genre_is, song.artist_name FROM song WHERE song.languages LIKE '%English%' ORDER BY song.rating ASC", "source_tables": ["song"], "error_info": ""}, {"sample_id": 3623, "db_id": "music_1", "score": 0, "gold_sql": "SELECT T1.duration, T1.file_size, T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.genre_is = 'pop' ORDER BY T2.song_name", "pred_sql": "SELECT s.duration, f.file_size, f.formats FROM song AS s JOIN files AS f ON s.f_id = f.f_id WHERE s.genre_is = 'pop' ORDER BY s.song_name", "source_tables": ["files", "song"], "error_info": "Predction Execution Error:no such column: s.duration"}, {"sample_id": 3624, "db_id": "music_1", "score": 0, "gold_sql": "SELECT T1.duration, T1.file_size, T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.genre_is = 'pop' ORDER BY T2.song_name", "pred_sql": "SELECT s.duration, f.file_size, f.formats FROM song AS s JOIN files AS f ON s.f_id = f.f_id WHERE s.genre_is = 'pop' ORDER BY s.song_name ASC", "source_tables": ["files", "song"], "error_info": "Predction Execution Error:no such column: s.duration"}, {"sample_id": 3625, "db_id": "music_1", "score": 1, "gold_sql": "SELECT DISTINCT artist_name FROM song WHERE languages = 'english' EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating > 8", "pred_sql": "SELECT DISTINCT artist.artist_name FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE song.languages LIKE '%English%' AND NOT artist.artist_name IN (SELECT artist_name FROM song WHERE rating > '8')", "source_tables": ["song"], "error_info": ""}, {"sample_id": 3626, "db_id": "music_1", "score": 1, "gold_sql": "SELECT DISTINCT artist_name FROM song WHERE languages = 'english' EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating > 8", "pred_sql": "SELECT DISTINCT artist.artist_name FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE song.languages LIKE '%English%' AND song.rating <= '8'", "source_tables": ["song"], "error_info": ""}, {"sample_id": 3627, "db_id": "music_1", "score": 1, "gold_sql": "SELECT DISTINCT artist_name FROM artist WHERE country = 'Bangladesh' EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating > 7", "pred_sql": "SELECT artist_name FROM artist WHERE country = 'Bangladesh' AND NOT artist_name IN (SELECT artist_name FROM song WHERE rating > '7')", "source_tables": ["artist", "song"], "error_info": ""}, {"sample_id": 3628, "db_id": "music_1", "score": 1, "gold_sql": "SELECT DISTINCT artist_name FROM artist WHERE country = 'Bangladesh' EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating > 7", "pred_sql": "SELECT artist_name FROM artist WHERE country = 'Bangladesh' AND NOT artist_name IN (SELECT artist_name FROM song WHERE rating > '7')", "source_tables": ["artist", "song"], "error_info": ""}, {"sample_id": 3629, "db_id": "baseball_1", "score": 1, "gold_sql": "SELECT T1.name_full, T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id = T2.college_id GROUP BY T1.college_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT c.name_full, c.college_id FROM college AS c JOIN player_college AS pc ON c.college_id = pc.college_id GROUP BY c.college_id ORDER BY COUNT(pc.player_id) DESC LIMIT 1", "source_tables": ["player_college", "college"], "error_info": ""}, {"sample_id": 3630, "db_id": "baseball_1", "score": 1, "gold_sql": "SELECT T1.name_full, T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id = T2.college_id GROUP BY T1.college_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT c.name_full, c.college_id FROM college AS c JOIN player_college AS pc ON c.college_id = pc.college_id GROUP BY c.college_id, c.name_full ORDER BY COUNT(pc.player_id) DESC LIMIT 1", "source_tables": ["player_college", "college"], "error_info": ""}, {"sample_id": 3631, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT AVG(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings'", "pred_sql": "SELECT AVG(salary.salary) AS average_salary FROM salary JOIN team ON salary.team_id = team.team_id WHERE team.name = 'Boston Red Stockings'", "source_tables": ["team", "salary"], "error_info": "Result not equal"}, {"sample_id": 3632, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT AVG(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings'", "pred_sql": "SELECT AVG(salary.salary) AS average_salary FROM salary JOIN team ON salary.team_id = team.team_id WHERE team.name = 'Boston Red Stockings'", "source_tables": ["team", "salary"], "error_info": "Result not equal"}, {"sample_id": 3633, "db_id": "baseball_1", "score": 1, "gold_sql": "SELECT name_first, name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id = T2.player_id WHERE YEAR = 1998", "pred_sql": "SELECT p.name_first, p.name_last FROM all_star AS a JOIN player AS p ON a.player_id = p.player_id WHERE a.year = '1998'", "source_tables": ["player", "all_star"], "error_info": ""}, {"sample_id": 3634, "db_id": "baseball_1", "score": 1, "gold_sql": "SELECT name_first, name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id = T2.player_id WHERE YEAR = 1998", "pred_sql": "SELECT p.name_first, p.name_last FROM all_star AS a JOIN player AS p ON a.player_id = p.player_id WHERE a.year = '1998'", "source_tables": ["player", "all_star"], "error_info": ""}, {"sample_id": 3635, "db_id": "baseball_1", "score": 1, "gold_sql": "SELECT T1.name_first, T1.name_last, T1.player_id, COUNT(*) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT p.name_first, p.name_last, p.player_id, COUNT(a.year) AS all_star_count FROM all_star AS a JOIN player AS p ON a.player_id = p.player_id GROUP BY p.player_id ORDER BY all_star_count DESC LIMIT 1", "source_tables": ["player", "all_star"], "error_info": ""}, {"sample_id": 3636, "db_id": "baseball_1", "score": 1, "gold_sql": "SELECT T1.name_first, T1.name_last, T1.player_id, COUNT(*) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT p.name_first, p.name_last, p.player_id, COUNT(a.year) AS all_star_count FROM all_star AS a JOIN player AS p ON a.player_id = p.player_id GROUP BY p.player_id ORDER BY all_star_count DESC LIMIT 1", "source_tables": ["player", "all_star"], "error_info": ""}, {"sample_id": 3637, "db_id": "baseball_1", "score": 1, "gold_sql": "SELECT yearid, COUNT(*) FROM hall_of_fame GROUP BY yearid", "pred_sql": "SELECT yearid, COUNT(player_id) AS num_players FROM hall_of_fame GROUP BY yearid", "source_tables": ["hall_of_fame"], "error_info": ""}, {"sample_id": 3638, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT yearid, COUNT(*) FROM hall_of_fame GROUP BY yearid", "pred_sql": "SELECT yearid AS year, COUNT(player_id) AS num_players FROM hall_of_fame WHERE inducted = 'Y' GROUP BY yearid ORDER BY yearid", "source_tables": ["hall_of_fame"], "error_info": "Result not equal"}, {"sample_id": 3639, "db_id": "baseball_1", "score": 1, "gold_sql": "SELECT YEAR, AVG(attendance) FROM home_game GROUP BY YEAR", "pred_sql": "SELECT year, AVG(attendance) AS average_attendance FROM home_game GROUP BY year", "source_tables": ["home_game"], "error_info": ""}, {"sample_id": 3640, "db_id": "baseball_1", "score": 1, "gold_sql": "SELECT YEAR, AVG(attendance) FROM home_game GROUP BY YEAR", "pred_sql": "SELECT year, AVG(attendance) AS average_attendance FROM home_game GROUP BY year", "source_tables": ["home_game"], "error_info": ""}, {"sample_id": 3641, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT T2.team_id, T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id WHERE T1.year = 2014 GROUP BY T1.team_id ORDER BY AVG(T1.attendance) DESC LIMIT 1", "pred_sql": "SELECT team_id, rank FROM home_game WHERE year = 2014 ORDER BY attendance DESC LIMIT 1", "source_tables": ["team", "home_game"], "error_info": "Predction Execution Error:no such column: rank"}, {"sample_id": 3642, "db_id": "baseball_1", "score": 1, "gold_sql": "SELECT T2.team_id, T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id WHERE T1.year = 2014 GROUP BY T1.team_id ORDER BY AVG(T1.attendance) DESC LIMIT 1", "pred_sql": "SELECT team_id, rank FROM team WHERE year = 2014 ORDER BY attendance DESC LIMIT 1", "source_tables": ["team", "home_game"], "error_info": ""}, {"sample_id": 3643, "db_id": "baseball_1", "score": 1, "gold_sql": "SELECT T1.name_first, T1.name_last, T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id = T2.player_id GROUP BY T2.player_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT p.name_first, p.name_last, p.player_id FROM manager_award AS ma JOIN player AS p ON ma.player_id = p.player_id GROUP BY ma.player_id ORDER BY COUNT(ma.award_id) DESC LIMIT 1", "source_tables": ["player", "manager_award"], "error_info": ""}, {"sample_id": 3644, "db_id": "baseball_1", "score": 1, "gold_sql": "SELECT T1.name_first, T1.name_last, T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id = T2.player_id GROUP BY T2.player_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT p.name_first, p.name_last, p.player_id FROM manager_award AS ma JOIN player AS p ON ma.player_id = p.player_id GROUP BY ma.player_id ORDER BY COUNT(ma.award_id) DESC LIMIT 1", "source_tables": ["player", "manager_award"], "error_info": ""}, {"sample_id": 3645, "db_id": "baseball_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM park WHERE state = 'NY'", "pred_sql": "SELECT COUNT(*) AS park_count FROM park WHERE state = 'NY'", "source_tables": ["park"], "error_info": ""}, {"sample_id": 3646, "db_id": "baseball_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM park WHERE state = 'NY'", "pred_sql": "SELECT COUNT(*) AS number_of_parks FROM park WHERE state = 'NY'", "source_tables": ["park"], "error_info": ""}, {"sample_id": 3647, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT T1.name_first, T1.name_last, T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY COUNT(*) DESC LIMIT 3", "pred_sql": "SELECT p.player_id, p.name_first, p.name_last, COUNT(pa.award_id) AS award_count FROM player AS p JOIN player_award AS pa ON p.player_id = pa.player_id GROUP BY p.player_id ORDER BY award_count DESC LIMIT 3", "source_tables": ["player_award", "player"], "error_info": "Result not equal"}, {"sample_id": 3648, "db_id": "baseball_1", "score": 1, "gold_sql": "SELECT T1.name_first, T1.name_last, T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY COUNT(*) DESC LIMIT 3", "pred_sql": "SELECT p.name_first, p.name_last, p.player_id FROM player_award AS pa JOIN player AS p ON pa.player_id = p.player_id GROUP BY p.player_id ORDER BY COUNT(pa.award_id) DESC LIMIT 3", "source_tables": ["player_award", "player"], "error_info": ""}, {"sample_id": 3649, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT birth_country FROM player GROUP BY birth_country ORDER BY COUNT(*) ASC LIMIT 3", "pred_sql": "SELECT birth_country, COUNT(player_id) AS player_count FROM player GROUP BY birth_country ORDER BY player_count ASC LIMIT 3", "source_tables": ["player"], "error_info": "Result not equal"}, {"sample_id": 3650, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT birth_country FROM player GROUP BY birth_country ORDER BY COUNT(*) ASC LIMIT 3", "pred_sql": "SELECT birth_country, COUNT(player_id) AS player_count FROM player GROUP BY birth_country ORDER BY player_count ASC LIMIT 3", "source_tables": ["player"], "error_info": "Result not equal"}, {"sample_id": 3651, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT name_first, name_last FROM player WHERE death_year = ''", "pred_sql": "SELECT name_first, name_last FROM player WHERE death_year IS NULL AND death_month IS NULL AND death_day IS NULL", "source_tables": ["player"], "error_info": "Result not equal"}, {"sample_id": 3652, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT name_first, name_last FROM player WHERE death_year = ''", "pred_sql": "SELECT name_first, name_last FROM player WHERE death_year IS NULL AND death_month IS NULL AND death_day IS NULL", "source_tables": ["player"], "error_info": "Result not equal"}, {"sample_id": 3653, "db_id": "baseball_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM player WHERE birth_country = 'USA' AND bats = 'R'", "pred_sql": "SELECT COUNT(*) AS player_count FROM player WHERE birth_country = 'USA' AND bats = 'R'", "source_tables": ["player"], "error_info": ""}, {"sample_id": 3654, "db_id": "baseball_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM player WHERE birth_country = 'USA' AND bats = 'R'", "pred_sql": "SELECT COUNT(*) AS player_count FROM player WHERE birth_country = 'USA' AND bats = 'R'", "source_tables": ["player"], "error_info": ""}, {"sample_id": 3655, "db_id": "baseball_1", "score": 1, "gold_sql": "SELECT AVG(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id = T2.player_id JOIN college AS T3 ON T3.college_id = T2.college_id WHERE T3.name_full = 'Yale University'", "pred_sql": "SELECT AVG(p.height) AS average_height FROM player AS p JOIN player_college AS pc ON p.player_id = pc.player_id JOIN college AS c ON pc.college_id = c.college_id WHERE c.name_full = 'Yale University'", "source_tables": ["college", "player", "player_college"], "error_info": ""}, {"sample_id": 3656, "db_id": "baseball_1", "score": 1, "gold_sql": "SELECT AVG(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id = T2.player_id JOIN college AS T3 ON T3.college_id = T2.college_id WHERE T3.name_full = 'Yale University'", "pred_sql": "SELECT AVG(p.height) AS average_height FROM player AS p JOIN player_college AS pc ON p.player_id = pc.player_id JOIN college AS c ON pc.college_id = c.college_id WHERE c.name_full = 'Yale University'", "source_tables": ["college", "player", "player_college"], "error_info": ""}, {"sample_id": 3657, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT T1.name, T1.team_id, MAX(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id", "pred_sql": "SELECT t.name AS team_name, t.team_id, MAX(s.salary) AS max_salary FROM salary AS s JOIN team AS t ON s.team_id = t.team_id GROUP BY t.team_id, t.name", "source_tables": ["team", "salary"], "error_info": "Result not equal"}, {"sample_id": 3658, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT T1.name, T1.team_id, MAX(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id", "pred_sql": "SELECT team.name, team.team_id, MAX(salary.salary) AS max_salary FROM team JOIN salary ON team.team_id = salary.team_id GROUP BY team.team_id, team.name", "source_tables": ["team", "salary"], "error_info": "Result not equal"}, {"sample_id": 3659, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT T1.name, T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id ORDER BY AVG(T2.salary) ASC LIMIT 1", "pred_sql": "SELECT team.name, team.team_id FROM team JOIN salary ON team.player_id = salary.player_id GROUP BY team.team_id ORDER BY AVG(salary.salary) ASC LIMIT 1", "source_tables": ["team", "salary"], "error_info": "Predction Execution Error:no such column: team.player_id"}, {"sample_id": 3660, "db_id": "baseball_1", "score": 1, "gold_sql": "SELECT T1.name, T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id ORDER BY AVG(T2.salary) ASC LIMIT 1", "pred_sql": "SELECT team.name, team.team_id FROM salary JOIN team ON salary.team_id = team.team_id GROUP BY team.team_id ORDER BY AVG(salary.salary) ASC LIMIT 1", "source_tables": ["team", "salary"], "error_info": ""}, {"sample_id": 3661, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT T1.name_first, T1.name_last FROM player AS T1, player_award AS T2 WHERE T2.year = 1960 INTERSECT SELECT T1.name_first, T1.name_last FROM player AS T1, player_award AS T2 WHERE T2.year = 1961", "pred_sql": "SELECT p.name_first, p.name_last FROM player AS p JOIN player_award AS pa1 ON p.player_id = pa1.player_id JOIN player_award AS pa2 ON p.player_id = pa2.player_id WHERE pa1.year = 1960 AND pa2.year = 1961", "source_tables": ["player_award", "player"], "error_info": "Result not equal"}, {"sample_id": 3662, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT T1.name_first, T1.name_last FROM player AS T1, player_award AS T2 WHERE T2.year = 1960 INTERSECT SELECT T1.name_first, T1.name_last FROM player AS T1, player_award AS T2 WHERE T2.year = 1961", "pred_sql": "SELECT p.name_first, p.name_last FROM player AS p JOIN player_award AS pa ON p.player_id = pa.player_id WHERE pa.year IN ('1960', '1961') GROUP BY p.player_id HAVING COUNT(DISTINCT pa.year) = 2", "source_tables": ["player_award", "player"], "error_info": "Result not equal"}, {"sample_id": 3663, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT name_first, name_last FROM player WHERE weight > 220 OR height < 75", "pred_sql": "SELECT name_given, name_last FROM player WHERE weight > 220 OR height < 75", "source_tables": ["player"], "error_info": "Result not equal"}, {"sample_id": 3664, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT name_first, name_last FROM player WHERE weight > 220 OR height < 75", "pred_sql": "SELECT name_given, name_last FROM player WHERE weight > 220 OR height < 75", "source_tables": ["player"], "error_info": "Result not equal"}, {"sample_id": 3665, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT MAX(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings'", "pred_sql": "SELECT MAX(wins) AS max_scores FROM postseason WHERE team_id_winner = (SELECT team_id FROM team WHERE name = 'Boston Red Stockings')", "source_tables": ["postseason", "team"], "error_info": "Result not equal"}, {"sample_id": 3666, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT MAX(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings'", "pred_sql": "SELECT MAX(batting.r) AS max_runs FROM batting_postseason JOIN team ON batting_postseason.team_id = team.team_id WHERE team.name = 'Boston Red Stockings' AND batting_postseason.year IN (SELECT year FROM postseason WHERE team_id_winner = team.team_id)", "source_tables": ["postseason", "team"], "error_info": "Predction Execution Error:no such column: batting.r"}, {"sample_id": 3667, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT COUNT(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year = 2009", "pred_sql": "SELECT COUNT(*) AS losses FROM postseason WHERE year = 2009 AND team_id_loser = (SELECT team_id FROM team WHERE name = 'Boston Red Stockings')", "source_tables": ["postseason", "team"], "error_info": "Result not equal"}, {"sample_id": 3668, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT COUNT(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year = 2009", "pred_sql": "SELECT COUNT(*) AS losses_count FROM postseason WHERE year = 2009 AND team_id_loser = (SELECT team_id FROM team WHERE name = 'Boston Red Stockings')", "source_tables": ["postseason", "team"], "error_info": "Result not equal"}, {"sample_id": 3669, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT T2.name, T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T1.year = 2008 GROUP BY T1.team_id_winner ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT team.name, team.team_id FROM team JOIN postseason ON team.team_id = postseason.team_id_winner WHERE postseason.year = 2008 ORDER BY postseason.wins DESC LIMIT 1", "source_tables": ["postseason", "team"], "error_info": "Result not equal"}, {"sample_id": 3670, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT T2.name, T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T1.year = 2008 GROUP BY T1.team_id_winner ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT team.name, team.team_id FROM postseason JOIN team ON postseason.team_id_winner = team.team_id WHERE postseason.year = 2008 ORDER BY postseason.wins DESC LIMIT 1", "source_tables": ["postseason", "team"], "error_info": "Result not equal"}, {"sample_id": 3671, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT COUNT(*), T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' GROUP BY T1.year", "pred_sql": "SELECT p.year, SUM(p.w) AS total_wins FROM postseason AS p JOIN team AS t ON p.team_id_winner = t.team_id WHERE t.name = 'Boston Red Stockings' GROUP BY p.year", "source_tables": ["postseason", "team"], "error_info": "Predction Execution Error:no such column: p.w"}, {"sample_id": 3672, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT COUNT(*), T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' GROUP BY T1.year", "pred_sql": "SELECT p.year, COUNT(p.team_id_winner) AS wins FROM postseason AS p JOIN team AS t ON p.team_id_winner = t.team_id WHERE t.name = 'Boston Red Stockings' GROUP BY p.year", "source_tables": ["postseason", "team"], "error_info": "Result not equal"}, {"sample_id": 3673, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT COUNT(*) FROM (SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' UNION SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser = T2.team_id_br WHERE T2.name = 'Boston Red Stockings')", "pred_sql": "SELECT SUM(g) AS total_postseason_games FROM batting_postseason WHERE team_id = (SELECT team_id FROM team WHERE name = 'Boston Red Stockings')", "source_tables": ["postseason", "team"], "error_info": "Result not equal"}, {"sample_id": 3674, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT COUNT(*) FROM (SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' UNION SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser = T2.team_id_br WHERE T2.name = 'Boston Red Stockings')", "pred_sql": "SELECT COUNT(*) AS total_postseason_games FROM postseason JOIN team ON postseason.team_id_winner = team.team_id WHERE team.name = 'Boston Red Stockings' OR postseason.team_id_loser = team.team_id", "source_tables": ["postseason", "team"], "error_info": "Result not equal"}, {"sample_id": 3675, "db_id": "baseball_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM postseason WHERE YEAR = 1885 AND ties = 1", "pred_sql": "SELECT ties FROM postseason WHERE year = 1885 AND ties = 1", "source_tables": ["postseason"], "error_info": ""}, {"sample_id": 3676, "db_id": "baseball_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM postseason WHERE YEAR = 1885 AND ties = 1", "pred_sql": "SELECT COUNT(*) AS tied_games_count FROM postseason WHERE year = 1885 AND ties = 1", "source_tables": ["postseason"], "error_info": ""}, {"sample_id": 3677, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT SUM(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year = 2010", "pred_sql": "SELECT SUM(salary) AS total_salary FROM salary WHERE team_id = (SELECT team_id FROM team WHERE name = 'Boston Red Stockings' AND year = 2010) AND year = 2010", "source_tables": ["team", "salary"], "error_info": "Result not equal"}, {"sample_id": 3678, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT SUM(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year = 2010", "pred_sql": "SELECT SUM(salary) AS total_salary_expenses FROM salary WHERE team_id = (SELECT team_id FROM team WHERE name = 'Boston Red Stockings' AND year = 2010) AND year = 2010", "source_tables": ["team", "salary"], "error_info": "Result not equal"}, {"sample_id": 3679, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT COUNT(*) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year = 2000", "pred_sql": "SELECT COUNT(DISTINCT player_id) AS player_count FROM appearances WHERE team_id = (SELECT team_id FROM team WHERE name = 'Boston Red Stockings' AND year = 2000) AND year = 2000", "source_tables": ["team", "salary"], "error_info": "Result not equal"}, {"sample_id": 3680, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT COUNT(*) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year = 2000", "pred_sql": "SELECT COUNT(DISTINCT player_id) AS player_count FROM appearances WHERE team_id = (SELECT team_id FROM team WHERE name = 'Boston Red Stockings' AND year = 2000) AND year = 2000", "source_tables": ["team", "salary"], "error_info": "Result not equal"}, {"sample_id": 3681, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT salary FROM salary WHERE YEAR = 2001 ORDER BY salary DESC LIMIT 3", "pred_sql": "SELECT player_id, salary FROM salary WHERE year = 2001 ORDER BY salary DESC LIMIT 3", "source_tables": ["salary"], "error_info": "Result not equal"}, {"sample_id": 3682, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT salary FROM salary WHERE YEAR = 2001 ORDER BY salary DESC LIMIT 3", "pred_sql": "SELECT player_id, salary FROM salary WHERE year = 2001 ORDER BY salary DESC LIMIT 3", "source_tables": ["salary"], "error_info": "Result not equal"}, {"sample_id": 3683, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT salary FROM salary WHERE YEAR = 2010 UNION SELECT salary FROM salary WHERE YEAR = 2001", "pred_sql": "SELECT player_id, salary FROM salary WHERE year IN (2010, 2001)", "source_tables": ["salary"], "error_info": "Result not equal"}, {"sample_id": 3684, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT salary FROM salary WHERE YEAR = 2010 UNION SELECT salary FROM salary WHERE YEAR = 2001", "pred_sql": "SELECT player_id, salary FROM salary WHERE year IN (2010, 2001)", "source_tables": ["salary"], "error_info": "Result not equal"}, {"sample_id": 3685, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY COUNT(*) ASC LIMIT 1", "pred_sql": "SELECT yearid, COUNT(player_id) AS num_inductees FROM hall_of_fame WHERE inducted = 'Y' GROUP BY yearid ORDER BY num_inductees ASC LIMIT 1", "source_tables": ["hall_of_fame"], "error_info": "Result not equal"}, {"sample_id": 3686, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY COUNT(*) ASC LIMIT 1", "pred_sql": "SELECT yearid, COUNT(*) AS num_inductees FROM hall_of_fame WHERE inducted = 'Y' GROUP BY yearid ORDER BY num_inductees ASC LIMIT 1", "source_tables": ["hall_of_fame"], "error_info": "Result not equal"}, {"sample_id": 3687, "db_id": "baseball_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM park WHERE city = 'Atlanta'", "pred_sql": "SELECT COUNT(*) AS total_parks FROM park WHERE city = 'Atlanta'", "source_tables": ["park"], "error_info": ""}, {"sample_id": 3688, "db_id": "baseball_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM park WHERE city = 'Atlanta'", "pred_sql": "SELECT COUNT(DISTINCT park_id) AS number_of_parks FROM park WHERE city = 'Atlanta'", "source_tables": ["park"], "error_info": ""}, {"sample_id": 3689, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT COUNT(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park'", "pred_sql": "SELECT hg.games FROM home_game AS hg JOIN park AS p ON hg.park_id = p.park_id WHERE p.park_name = 'Columbia Park' AND hg.year = 1907", "source_tables": ["park", "home_game"], "error_info": "Result not equal"}, {"sample_id": 3690, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT COUNT(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park'", "pred_sql": "SELECT SUM(games) AS total_games FROM home_game WHERE year = 1907 AND park_id = (SELECT park_id FROM park WHERE park_name = 'Columbia Park')", "source_tables": ["park", "home_game"], "error_info": "Result not equal"}, {"sample_id": 3691, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT COUNT(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id WHERE T1.year = 2000 AND T2.city = 'Atlanta'", "pred_sql": "SELECT SUM(games) AS total_games FROM home_game WHERE year = 2000 AND team_id IN (SELECT team_id FROM team WHERE park IN (SELECT park_id FROM park WHERE city = 'Atlanta'))", "source_tables": ["park", "home_game"], "error_info": "Result not equal"}, {"sample_id": 3692, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT COUNT(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id WHERE T1.year = 2000 AND T2.city = 'Atlanta'", "pred_sql": "SELECT SUM(games) AS total_games FROM home_game WHERE year = 2000 AND team_id IN (SELECT team_id FROM team WHERE park IN (SELECT park_id FROM park WHERE city = 'Atlanta'))", "source_tables": ["park", "home_game"], "error_info": "Result not equal"}, {"sample_id": 3693, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT SUM(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010", "pred_sql": "SELECT SUM(attendance) AS total_attendance FROM home_game JOIN team ON home_game.team_id = team.team_id WHERE team.name = 'Boston Red Stockings' AND home_game.year BETWEEN 2000 AND 2010", "source_tables": ["team", "home_game"], "error_info": "Predction Execution Error:ambiguous column name: attendance"}, {"sample_id": 3694, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT SUM(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010", "pred_sql": "SELECT SUM(games) AS total_games FROM home_game WHERE team_id = (SELECT team_id FROM team WHERE name = 'Boston Red Stockings') AND year BETWEEN 2000 AND 2010", "source_tables": ["team", "home_game"], "error_info": "Result not equal"}, {"sample_id": 3695, "db_id": "baseball_1", "score": 1, "gold_sql": "SELECT SUM(T1.salary) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first = 'Len' AND T2.name_last = 'Barker' AND T1.year BETWEEN 1985 AND 1990", "pred_sql": "SELECT SUM(salary) AS total_salary FROM salary JOIN player ON salary.player_id = player.player_id WHERE player.name_first = 'Len' AND player.name_last = 'Barker' AND salary.year BETWEEN 1985 AND 1990", "source_tables": ["player", "salary"], "error_info": ""}, {"sample_id": 3696, "db_id": "baseball_1", "score": 1, "gold_sql": "SELECT SUM(T1.salary) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first = 'Len' AND T2.name_last = 'Barker' AND T1.year BETWEEN 1985 AND 1990", "pred_sql": "SELECT SUM(salary.salary) AS total_salary FROM salary JOIN player ON salary.player_id = player.player_id WHERE player.name_first = 'Len' AND player.name_last = 'Barker' AND salary.year BETWEEN 1985 AND 1990", "source_tables": ["player", "salary"], "error_info": ""}, {"sample_id": 3697, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT T2.name_first, T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first, T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'", "pred_sql": "SELECT p.name_first, p.name_last FROM player AS p JOIN salary AS s ON p.player_id = s.player_id WHERE s.team_id = (SELECT team_id FROM team WHERE name = 'Washington Nationals') AND s.year IN (2005, 2007) GROUP BY p.player_id HAVING COUNT(DISTINCT s.year) = 2", "source_tables": ["team", "player", "salary"], "error_info": "Result not equal"}, {"sample_id": 3698, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT T2.name_first, T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first, T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'", "pred_sql": "SELECT p.name_first, p.name_last FROM salary AS s JOIN player AS p ON s.player_id = p.player_id WHERE s.team_id = (SELECT team_id FROM team WHERE name = 'Washington Nationals') AND s.year IN (2005, 2007) GROUP BY p.player_id HAVING COUNT(DISTINCT s.year) = 2", "source_tables": ["team", "player", "salary"], "error_info": "Result not equal"}, {"sample_id": 3699, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT SUM(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000", "pred_sql": "SELECT SUM(games) AS total_home_games FROM home_game WHERE team_id = (SELECT team_id FROM team WHERE name = 'Boston Red Stockings') AND year BETWEEN 1990 AND 2000", "source_tables": ["team", "home_game"], "error_info": "Result not equal"}, {"sample_id": 3700, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT SUM(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000", "pred_sql": "SELECT SUM(games) AS total_games FROM home_game WHERE team_id = (SELECT team_id FROM team WHERE name = 'Boston Red Stockings') AND year BETWEEN 1990 AND 2000", "source_tables": ["team", "home_game"], "error_info": "Result not equal"}, {"sample_id": 3701, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1", "pred_sql": "SELECT team_id, attendance FROM home_game WHERE year = 1980 ORDER BY attendance ASC LIMIT 1", "source_tables": ["team", "home_game"], "error_info": "Result not equal"}, {"sample_id": 3702, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1", "pred_sql": "SELECT team_id, MIN(games) AS least_home_games FROM home_game WHERE year = 1980 GROUP BY team_id ORDER BY least_home_games ASC LIMIT 1", "source_tables": ["team", "home_game"], "error_info": "Result not equal"}, {"sample_id": 3703, "db_id": "baseball_1", "score": 1, "gold_sql": "SELECT state FROM park GROUP BY state HAVING COUNT(*) > 2", "pred_sql": "SELECT DISTINCT state FROM park GROUP BY state HAVING COUNT(park_id) > 2", "source_tables": ["park"], "error_info": ""}, {"sample_id": 3704, "db_id": "baseball_1", "score": 1, "gold_sql": "SELECT state FROM park GROUP BY state HAVING COUNT(*) > 2", "pred_sql": "SELECT state FROM park GROUP BY state HAVING COUNT(park_id) > 2", "source_tables": ["park"], "error_info": ""}, {"sample_id": 3705, "db_id": "baseball_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM team_franchise WHERE active = 'Y'", "pred_sql": "SELECT COUNT(*) AS active_franchise_count FROM team_franchise WHERE active = 'Y'", "source_tables": ["team_franchise"], "error_info": ""}, {"sample_id": 3706, "db_id": "baseball_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM team_franchise WHERE active = 'Y'", "pred_sql": "SELECT COUNT(*) AS active_franchise_count FROM team_franchise WHERE active = 'Y'", "source_tables": ["team_franchise"], "error_info": ""}, {"sample_id": 3707, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT city FROM park GROUP BY city HAVING COUNT(*) BETWEEN 2 AND 4", "pred_sql": "SELECT city, COUNT(park_id) AS park_count FROM park GROUP BY city HAVING park_count BETWEEN 2 AND 4", "source_tables": ["park"], "error_info": "Result not equal"}, {"sample_id": 3708, "db_id": "baseball_1", "score": 1, "gold_sql": "SELECT city FROM park GROUP BY city HAVING COUNT(*) BETWEEN 2 AND 4", "pred_sql": "SELECT city FROM park GROUP BY city HAVING COUNT(park_id) BETWEEN 2 AND 4", "source_tables": ["park"], "error_info": ""}, {"sample_id": 3709, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id WHERE T1.year = 2008 ORDER BY T1.attendance DESC LIMIT 1", "pred_sql": "SELECT park.park_name, home_game.attendance FROM home_game JOIN park ON home_game.park_id = park.park_id WHERE home_game.year = 2008 ORDER BY home_game.attendance DESC LIMIT 1", "source_tables": ["park", "home_game"], "error_info": "Result not equal"}, {"sample_id": 3710, "db_id": "baseball_1", "score": 0, "gold_sql": "SELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id WHERE T1.year = 2008 ORDER BY T1.attendance DESC LIMIT 1", "pred_sql": "SELECT park.park_name, home_game.attendance FROM home_game JOIN park ON home_game.park_id = park.park_id WHERE home_game.year = 2008 ORDER BY home_game.attendance DESC LIMIT 1", "source_tables": ["park", "home_game"], "error_info": "Result not equal"}, {"sample_id": 3711, "db_id": "mountain_photos", "score": 1, "gold_sql": "SELECT COUNT(*) FROM camera_lens WHERE focal_length_mm > 15", "pred_sql": "SELECT COUNT(*) FROM camera_lens WHERE focal_length_mm > 15", "source_tables": ["camera_lens"], "error_info": ""}, {"sample_id": 3712, "db_id": "mountain_photos", "score": 1, "gold_sql": "SELECT brand, name FROM camera_lens ORDER BY max_aperture DESC", "pred_sql": "SELECT brand, name FROM camera_lens ORDER BY max_aperture DESC", "source_tables": ["camera_lens"], "error_info": ""}, {"sample_id": 3713, "db_id": "mountain_photos", "score": 1, "gold_sql": "SELECT id, color, name FROM photos", "pred_sql": "SELECT id, color, name FROM photos", "source_tables": ["photos"], "error_info": ""}, {"sample_id": 3714, "db_id": "mountain_photos", "score": 1, "gold_sql": "SELECT MAX(height), AVG(height) FROM mountain", "pred_sql": "SELECT MAX(Height) AS max_height, AVG(Height) AS avg_height FROM mountain", "source_tables": ["mountain"], "error_info": ""}, {"sample_id": 3715, "db_id": "mountain_photos", "score": 1, "gold_sql": "SELECT AVG(prominence) FROM mountain WHERE country = 'Morocco'", "pred_sql": "SELECT AVG(Prominence) AS average_prominence FROM mountain WHERE Country = 'Morocco'", "source_tables": ["mountain"], "error_info": ""}, {"sample_id": 3716, "db_id": "mountain_photos", "score": 1, "gold_sql": "SELECT name, height, prominence FROM mountain WHERE range <> 'Aberdare Range'", "pred_sql": "SELECT name, Height, Prominence FROM mountain WHERE Range <> 'Aberdare Range'", "source_tables": ["mountain"], "error_info": ""}, {"sample_id": 3717, "db_id": "mountain_photos", "score": 0, "gold_sql": "SELECT T1.id, T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id WHERE T1.height > 4000", "pred_sql": "SELECT photos.id, photos.name FROM photos JOIN mountain ON photos.mountain_id = mountain.id", "source_tables": ["mountain", "photos"], "error_info": "Result not equal"}, {"sample_id": 3718, "db_id": "mountain_photos", "score": 1, "gold_sql": "SELECT T1.id, T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id GROUP BY T1.id HAVING COUNT(*) >= 2", "pred_sql": "SELECT mountain.id, mountain.name FROM mountain JOIN photos ON mountain.id = photos.mountain_id GROUP BY mountain.id HAVING COUNT(photos.id) >= 2", "source_tables": ["mountain", "photos"], "error_info": ""}, {"sample_id": 3719, "db_id": "mountain_photos", "score": 1, "gold_sql": "SELECT T2.name FROM photos AS T1 JOIN camera_lens AS T2 ON T1.camera_lens_id = T2.id GROUP BY T2.id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT cl.name FROM camera_lens AS cl JOIN photos AS p ON cl.id = p.camera_lens_id GROUP BY cl.id ORDER BY COUNT(DISTINCT p.mountain_id) DESC LIMIT 1", "source_tables": ["photos", "camera_lens"], "error_info": ""}, {"sample_id": 3720, "db_id": "mountain_photos", "score": 0, "gold_sql": "SELECT T1.name FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id = T1.id WHERE T1.brand = 'Sigma' OR T1.brand = 'Olympus'", "pred_sql": "SELECT photos.name FROM photos JOIN camera_lens ON photos.camera_lens_id = camera_lens.id WHERE camera_lens.brand IN ('Sigma', 'Olympus')", "source_tables": ["photos", "camera_lens"], "error_info": "Result not equal"}, {"sample_id": 3721, "db_id": "mountain_photos", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT brand) FROM camera_lens", "pred_sql": "SELECT COUNT(DISTINCT brand) AS different_lens_brands FROM camera_lens", "source_tables": ["camera_lens"], "error_info": ""}, {"sample_id": 3722, "db_id": "mountain_photos", "score": 1, "gold_sql": "SELECT COUNT(*) FROM camera_lens WHERE NOT id IN (SELECT camera_lens_id FROM photos)", "pred_sql": "SELECT COUNT(*) FROM camera_lens WHERE NOT id IN (SELECT DISTINCT camera_lens_id FROM photos)", "source_tables": ["photos", "camera_lens"], "error_info": ""}, {"sample_id": 3723, "db_id": "mountain_photos", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT T2.camera_lens_id) FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id WHERE T1.country = 'Ethiopia'", "pred_sql": "SELECT COUNT(DISTINCT cl.id) AS distinct_lens_count FROM camera_lens AS cl JOIN photos AS p ON cl.id = p.camera_lens_id JOIN mountain AS m ON p.mountain_id = m.id WHERE m.Country = 'Ethiopia'", "source_tables": ["mountain", "photos"], "error_info": ""}, {"sample_id": 3724, "db_id": "mountain_photos", "score": 1, "gold_sql": "SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id = T3.id WHERE T1.range = 'Toubkal Atlas' INTERSECT SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id = T3.id WHERE T1.range = 'Lasta Massif'", "pred_sql": "SELECT DISTINCT cl.brand FROM camera_lens AS cl JOIN photos AS p ON cl.id = p.camera_lens_id JOIN mountain AS m ON p.mountain_id = m.id WHERE m.Range IN ('Toubkal Atlas', 'Lasta Massif') GROUP BY cl.brand HAVING COUNT(DISTINCT m.Range) = 2", "source_tables": ["mountain", "photos", "camera_lens"], "error_info": ""}, {"sample_id": 3725, "db_id": "mountain_photos", "score": 0, "gold_sql": "SELECT name, prominence FROM mountain EXCEPT SELECT T1.name, T1.prominence FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id = T3.id WHERE T3.brand = 'Sigma'", "pred_sql": "SELECT mountain.name, mountain.Prominence FROM mountain JOIN photos ON mountain.id = photos.mountain_id JOIN camera_lens ON photos.camera_lens_id = camera_lens.id WHERE camera_lens.brand <> 'Sigma'", "source_tables": ["mountain", "photos", "camera_lens"], "error_info": "Result not equal"}, {"sample_id": 3726, "db_id": "mountain_photos", "score": 1, "gold_sql": "SELECT name FROM camera_lens WHERE name LIKE '%Digital%'", "pred_sql": "SELECT name FROM camera_lens WHERE name LIKE '%Digital%'", "source_tables": ["camera_lens"], "error_info": ""}, {"sample_id": 3727, "db_id": "mountain_photos", "score": 0, "gold_sql": "SELECT T1.name, COUNT(*) FROM camera_lens AS T1 JOIN photos AS T2 ON T1.id = T2.camera_lens_id GROUP BY T1.id ORDER BY COUNT(*)", "pred_sql": "SELECT camera_lens.name, COUNT(photos.id) AS photo_count FROM camera_lens LEFT JOIN photos ON camera_lens.id = photos.camera_lens_id GROUP BY camera_lens.id ORDER BY photo_count", "source_tables": ["photos", "camera_lens"], "error_info": "Result not equal"}, {"sample_id": 3728, "db_id": "program_share", "score": 1, "gold_sql": "SELECT name FROM channel WHERE OWNER <> 'CCTV'", "pred_sql": "SELECT Name FROM channel WHERE Owner <> 'CCTV'", "source_tables": ["channel"], "error_info": ""}, {"sample_id": 3729, "db_id": "program_share", "score": 1, "gold_sql": "SELECT name FROM channel WHERE OWNER <> 'CCTV'", "pred_sql": "SELECT Name FROM channel WHERE Owner <> 'CCTV'", "source_tables": ["channel"], "error_info": ""}, {"sample_id": 3730, "db_id": "program_share", "score": 1, "gold_sql": "SELECT name FROM channel ORDER BY rating_in_percent DESC", "pred_sql": "SELECT Name FROM channel ORDER BY Rating_in_percent DESC", "source_tables": ["channel"], "error_info": ""}, {"sample_id": 3731, "db_id": "program_share", "score": 1, "gold_sql": "SELECT name FROM channel ORDER BY rating_in_percent DESC", "pred_sql": "SELECT Name FROM channel ORDER BY Rating_in_percent DESC", "source_tables": ["channel"], "error_info": ""}, {"sample_id": 3732, "db_id": "program_share", "score": 1, "gold_sql": "SELECT OWNER FROM channel ORDER BY rating_in_percent DESC LIMIT 1", "pred_sql": "SELECT Owner FROM channel WHERE Rating_in_percent = (SELECT MAX(Rating_in_percent) FROM channel)", "source_tables": ["channel"], "error_info": ""}, {"sample_id": 3733, "db_id": "program_share", "score": 1, "gold_sql": "SELECT OWNER FROM channel ORDER BY rating_in_percent DESC LIMIT 1", "pred_sql": "SELECT Owner FROM channel WHERE Rating_in_percent = (SELECT MAX(Rating_in_percent) FROM channel)", "source_tables": ["channel"], "error_info": ""}, {"sample_id": 3734, "db_id": "program_share", "score": 1, "gold_sql": "SELECT COUNT(*) FROM program", "pred_sql": "SELECT COUNT(*) AS program_count FROM program", "source_tables": ["program"], "error_info": ""}, {"sample_id": 3735, "db_id": "program_share", "score": 1, "gold_sql": "SELECT COUNT(*) FROM program", "pred_sql": "SELECT COUNT(*) AS program_count FROM program", "source_tables": ["program"], "error_info": ""}, {"sample_id": 3736, "db_id": "program_share", "score": 1, "gold_sql": "SELECT name FROM program ORDER BY launch", "pred_sql": "SELECT Name FROM program ORDER BY Launch", "source_tables": ["program"], "error_info": ""}, {"sample_id": 3737, "db_id": "program_share", "score": 1, "gold_sql": "SELECT name FROM program ORDER BY launch", "pred_sql": "SELECT Name FROM program ORDER BY Launch", "source_tables": ["program"], "error_info": ""}, {"sample_id": 3738, "db_id": "program_share", "score": 1, "gold_sql": "SELECT name, origin, OWNER FROM program", "pred_sql": "SELECT Name, Origin, Owner FROM program", "source_tables": ["program"], "error_info": ""}, {"sample_id": 3739, "db_id": "program_share", "score": 1, "gold_sql": "SELECT name, origin, OWNER FROM program", "pred_sql": "SELECT Name, Origin, Owner FROM program", "source_tables": ["program"], "error_info": ""}, {"sample_id": 3740, "db_id": "program_share", "score": 1, "gold_sql": "SELECT name FROM program ORDER BY launch DESC LIMIT 1", "pred_sql": "SELECT Name FROM program ORDER BY Launch DESC LIMIT 1", "source_tables": ["program"], "error_info": ""}, {"sample_id": 3741, "db_id": "program_share", "score": 1, "gold_sql": "SELECT name FROM program ORDER BY launch DESC LIMIT 1", "pred_sql": "SELECT Name FROM program ORDER BY Launch DESC LIMIT 1", "source_tables": ["program"], "error_info": ""}, {"sample_id": 3742, "db_id": "program_share", "score": 0, "gold_sql": "SELECT SUM(Share_in_percent) FROM channel WHERE OWNER = 'CCTV'", "pred_sql": "SELECT SUM(broadcast_share.Share_in_percent) AS Total_Share FROM channel JOIN broadcast ON channel.Channel_ID = broadcast.Channel_ID JOIN broadcast_share ON broadcast.Program_ID = broadcast_share.Program_ID WHERE channel.Owner = 'CCTV'", "source_tables": ["channel"], "error_info": "Result not equal"}, {"sample_id": 3743, "db_id": "program_share", "score": 0, "gold_sql": "SELECT SUM(Share_in_percent) FROM channel WHERE OWNER = 'CCTV'", "pred_sql": "SELECT SUM(broadcast_share.Share_in_percent) AS Total_Share FROM channel JOIN broadcast ON channel.Channel_ID = broadcast.Channel_ID JOIN broadcast_share ON broadcast.Program_ID = broadcast_share.Program_ID WHERE channel.Owner = 'CCTV'", "source_tables": ["channel"], "error_info": "Result not equal"}, {"sample_id": 3744, "db_id": "program_share", "score": 1, "gold_sql": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id WHERE t2.time_of_day = 'Morning'", "pred_sql": "SELECT DISTINCT channel.Name FROM channel JOIN broadcast ON channel.Channel_ID = broadcast.Channel_ID WHERE broadcast.Time_of_day LIKE 'morning%'", "source_tables": ["broadcast", "channel"], "error_info": ""}, {"sample_id": 3745, "db_id": "program_share", "score": 1, "gold_sql": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id WHERE t2.time_of_day = 'Morning'", "pred_sql": "SELECT DISTINCT channel.Name FROM channel JOIN broadcast ON channel.Channel_ID = broadcast.Channel_ID WHERE broadcast.Time_of_day LIKE 'morning%'", "source_tables": ["broadcast", "channel"], "error_info": ""}, {"sample_id": 3746, "db_id": "program_share", "score": 0, "gold_sql": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id WHERE t2.time_of_day = 'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id WHERE t2.time_of_day = 'Night'", "pred_sql": "SELECT DISTINCT c.Name FROM channel AS c JOIN broadcast AS b ON c.Channel_ID = b.Channel_ID WHERE b.Time_of_day IN ('morning', 'night') GROUP BY c.Channel_ID HAVING COUNT(DISTINCT b.Time_of_day) = 2", "source_tables": ["broadcast", "channel"], "error_info": "Result not equal"}, {"sample_id": 3747, "db_id": "program_share", "score": 0, "gold_sql": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id WHERE t2.time_of_day = 'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id WHERE t2.time_of_day = 'Night'", "pred_sql": "SELECT DISTINCT c.Name FROM channel AS c JOIN broadcast AS b1 ON c.Channel_ID = b1.Channel_ID JOIN broadcast AS b2 ON c.Channel_ID = b2.Channel_ID WHERE b1.Time_of_day = 'morning' AND b2.Time_of_day = 'night'", "source_tables": ["broadcast", "channel"], "error_info": "Result not equal"}, {"sample_id": 3748, "db_id": "program_share", "score": 0, "gold_sql": "SELECT COUNT(*), time_of_day FROM broadcast GROUP BY time_of_day", "pred_sql": "SELECT Time_of_day, COUNT(DISTINCT Program_ID) AS Program_Count FROM broadcast GROUP BY Time_of_day", "source_tables": ["broadcast"], "error_info": "Result not equal"}, {"sample_id": 3749, "db_id": "program_share", "score": 1, "gold_sql": "SELECT COUNT(*), time_of_day FROM broadcast GROUP BY time_of_day", "pred_sql": "SELECT Time_of_day, COUNT(Program_ID) AS Program_Count FROM broadcast GROUP BY Time_of_day", "source_tables": ["broadcast"], "error_info": ""}, {"sample_id": 3750, "db_id": "program_share", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT program_id) FROM broadcast WHERE time_of_day = 'Night'", "pred_sql": "SELECT COUNT(DISTINCT b.Program_ID) AS Number_of_Programs FROM broadcast AS b WHERE b.Time_of_day LIKE 'Night%'", "source_tables": ["broadcast"], "error_info": ""}, {"sample_id": 3751, "db_id": "program_share", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT program_id) FROM broadcast WHERE time_of_day = 'Night'", "pred_sql": "SELECT COUNT(DISTINCT b.Program_ID) AS distinct_programs_count FROM broadcast AS b WHERE b.Time_of_day = 'Night'", "source_tables": ["broadcast"], "error_info": ""}, {"sample_id": 3752, "db_id": "program_share", "score": 0, "gold_sql": "SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.Time_of_day = 'Morning'", "pred_sql": "SELECT p.Name FROM program AS p WHERE NOT p.Program_ID IN (SELECT b.Program_ID FROM broadcast AS b WHERE b.Time_of_day = 'morning')", "source_tables": ["broadcast", "program"], "error_info": "Result not equal"}, {"sample_id": 3753, "db_id": "program_share", "score": 0, "gold_sql": "SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.Time_of_day = 'Morning'", "pred_sql": "SELECT p.Name FROM program AS p WHERE NOT p.Program_ID IN (SELECT b.Program_ID FROM broadcast AS b WHERE b.Time_of_day = 'morning')", "source_tables": ["broadcast", "program"], "error_info": "Result not equal"}, {"sample_id": 3754, "db_id": "program_share", "score": 0, "gold_sql": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.Time_of_day = 'Morning' INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.Time_of_day = 'Night'", "pred_sql": "SELECT DISTINCT p.Owner FROM program AS p JOIN broadcast AS b ON p.Program_ID = b.Program_ID WHERE b.Time_of_day IN ('morning', 'night') GROUP BY p.Owner HAVING COUNT(DISTINCT b.Time_of_day) = 2", "source_tables": ["broadcast", "program"], "error_info": "Result not equal"}, {"sample_id": 3755, "db_id": "program_share", "score": 0, "gold_sql": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.Time_of_day = 'Morning' INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.Time_of_day = 'Night'", "pred_sql": "SELECT DISTINCT p.Owner FROM program AS p JOIN broadcast AS b1 ON p.Program_ID = b1.Program_ID AND b1.Time_of_day = 'morning' JOIN broadcast AS b2 ON p.Program_ID = b2.Program_ID AND b2.Time_of_day = 'night'", "source_tables": ["broadcast", "program"], "error_info": "Result not equal"}, {"sample_id": 3756, "db_id": "program_share", "score": 1, "gold_sql": "SELECT origin FROM program ORDER BY origin", "pred_sql": "SELECT DISTINCT Origin FROM program ORDER BY Origin ASC", "source_tables": ["program"], "error_info": ""}, {"sample_id": 3757, "db_id": "program_share", "score": 1, "gold_sql": "SELECT origin FROM program ORDER BY origin", "pred_sql": "SELECT DISTINCT Origin FROM program ORDER BY Origin ASC", "source_tables": ["program"], "error_info": ""}, {"sample_id": 3758, "db_id": "program_share", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT OWNER) FROM channel", "pred_sql": "SELECT COUNT(DISTINCT Owner) AS Number_of_Different_Channel_Owners FROM channel", "source_tables": ["channel"], "error_info": ""}, {"sample_id": 3759, "db_id": "program_share", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT OWNER) FROM channel", "pred_sql": "SELECT COUNT(DISTINCT Owner) AS distinct_channel_owners FROM channel", "source_tables": ["channel"], "error_info": ""}, {"sample_id": 3760, "db_id": "program_share", "score": 1, "gold_sql": "SELECT name FROM program WHERE origin <> 'Beijing'", "pred_sql": "SELECT Name FROM program WHERE Origin <> 'Beijing'", "source_tables": ["program"], "error_info": ""}, {"sample_id": 3761, "db_id": "program_share", "score": 1, "gold_sql": "SELECT name FROM program WHERE origin <> 'Beijing'", "pred_sql": "SELECT Name FROM program WHERE Origin <> 'Beijing'", "source_tables": ["program"], "error_info": ""}, {"sample_id": 3762, "db_id": "program_share", "score": 1, "gold_sql": "SELECT name FROM channel WHERE OWNER = 'CCTV' OR OWNER = 'HBS'", "pred_sql": "SELECT Name FROM channel WHERE Owner IN ('CCTV', 'HBS')", "source_tables": ["channel"], "error_info": ""}, {"sample_id": 3763, "db_id": "program_share", "score": 1, "gold_sql": "SELECT name FROM channel WHERE OWNER = 'CCTV' OR OWNER = 'HBS'", "pred_sql": "SELECT Name FROM channel WHERE Owner IN ('CCTV', 'HBS')", "source_tables": ["channel"], "error_info": ""}, {"sample_id": 3764, "db_id": "program_share", "score": 1, "gold_sql": "SELECT SUM(Rating_in_percent), OWNER FROM channel GROUP BY OWNER", "pred_sql": "SELECT channel.Owner, SUM(channel.Rating_in_percent) AS Total_Rating_Ratio FROM channel GROUP BY channel.Owner", "source_tables": ["channel"], "error_info": ""}, {"sample_id": 3765, "db_id": "program_share", "score": 1, "gold_sql": "SELECT SUM(Rating_in_percent), OWNER FROM channel GROUP BY OWNER", "pred_sql": "SELECT Owner, SUM(Rating_in_percent) AS Total_Rating FROM channel GROUP BY Owner", "source_tables": ["channel"], "error_info": ""}, {"sample_id": 3766, "db_id": "program_share", "score": 1, "gold_sql": "SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id GROUP BY t2.program_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT p.Name FROM program AS p JOIN broadcast AS b ON p.Program_ID = b.Program_ID GROUP BY p.Program_ID ORDER BY COUNT(b.Program_ID) DESC LIMIT 1", "source_tables": ["broadcast", "program"], "error_info": ""}, {"sample_id": 3767, "db_id": "program_share", "score": 1, "gold_sql": "SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id GROUP BY t2.program_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT p.Name FROM program AS p JOIN broadcast AS b ON p.Program_ID = b.Program_ID GROUP BY p.Program_ID ORDER BY COUNT(b.Program_ID) DESC LIMIT 1", "source_tables": ["broadcast", "program"], "error_info": ""}, {"sample_id": 3768, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT COUNT(*) FROM COURSES", "pred_sql": "SELECT COUNT(*) AS total_courses FROM Courses", "source_tables": ["courses"], "error_info": ""}, {"sample_id": 3769, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT COUNT(*) FROM COURSES", "pred_sql": "SELECT COUNT(*) AS total_courses FROM Courses", "source_tables": ["courses"], "error_info": ""}, {"sample_id": 3770, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT course_description FROM COURSES WHERE course_name = 'database'", "pred_sql": "SELECT course_description FROM Courses WHERE course_name = 'database'", "source_tables": ["courses"], "error_info": ""}, {"sample_id": 3771, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT course_description FROM COURSES WHERE course_name = 'database'", "pred_sql": "SELECT course_description FROM Courses WHERE course_name = 'database'", "source_tables": ["courses"], "error_info": ""}, {"sample_id": 3772, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name = 'Cathrine'", "pred_sql": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name = 'Cathrine'", "source_tables": ["course_authors_and_tutors"], "error_info": ""}, {"sample_id": 3773, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name = 'Cathrine'", "pred_sql": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name = 'Cathrine'", "source_tables": ["course_authors_and_tutors"], "error_info": ""}, {"sample_id": 3774, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT address_line_1 FROM Course_Authors_and_Tutors", "pred_sql": "SELECT address_line_1 FROM Course_Authors_and_Tutors", "source_tables": ["course_authors_and_tutors"], "error_info": ""}, {"sample_id": 3775, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT address_line_1 FROM Course_Authors_and_Tutors", "pred_sql": "SELECT address_line_1 FROM Course_Authors_and_Tutors", "source_tables": ["course_authors_and_tutors"], "error_info": ""}, {"sample_id": 3776, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT login_name, family_name FROM Course_Authors_and_Tutors", "pred_sql": "SELECT login_name, family_name FROM Course_Authors_and_Tutors", "source_tables": ["course_authors_and_tutors"], "error_info": ""}, {"sample_id": 3777, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT login_name, family_name FROM Course_Authors_and_Tutors", "pred_sql": "SELECT login_name, family_name FROM Course_Authors_and_Tutors", "source_tables": ["course_authors_and_tutors"], "error_info": ""}, {"sample_id": 3778, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT date_of_enrolment, date_of_completion FROM Student_Course_Enrolment", "pred_sql": "SELECT date_of_enrolment, date_of_completion FROM Student_Course_Enrolment", "source_tables": ["student_course_enrolment"], "error_info": ""}, {"sample_id": 3779, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT date_of_enrolment, date_of_completion FROM Student_Course_Enrolment", "pred_sql": "SELECT date_of_enrolment, date_of_completion FROM Student_Course_Enrolment", "source_tables": ["student_course_enrolment"], "error_info": ""}, {"sample_id": 3780, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT student_id) FROM Student_Course_Enrolment", "pred_sql": "SELECT COUNT(DISTINCT student_id) AS distinct_students FROM Student_Course_Enrolment", "source_tables": ["student_course_enrolment"], "error_info": ""}, {"sample_id": 3781, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT student_id) FROM Student_Course_Enrolment", "pred_sql": "SELECT COUNT(DISTINCT student_id) AS distinct_students_count FROM Student_Course_Enrolment", "source_tables": ["student_course_enrolment"], "error_info": ""}, {"sample_id": 3782, "db_id": "e_learning", "score": 0, "gold_sql": "SELECT COUNT(course_id) FROM Student_Course_Enrolment", "pred_sql": "SELECT COUNT(DISTINCT course_id) AS distinct_courses_enrolled FROM Student_Course_Enrolment", "source_tables": ["student_course_enrolment"], "error_info": "Result not equal"}, {"sample_id": 3783, "db_id": "e_learning", "score": 0, "gold_sql": "SELECT COUNT(course_id) FROM Student_Course_Enrolment", "pred_sql": "SELECT COUNT(DISTINCT course_id) AS distinct_course_count FROM Student_Course_Enrolment", "source_tables": ["student_course_enrolment"], "error_info": "Result not equal"}, {"sample_id": 3784, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result = 'Pass'", "pred_sql": "SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result = 'Pass'", "source_tables": ["student_tests_taken"], "error_info": ""}, {"sample_id": 3785, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result = 'Pass'", "pred_sql": "SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result = 'Pass'", "source_tables": ["student_tests_taken"], "error_info": ""}, {"sample_id": 3786, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Student_Tests_Taken WHERE test_result = 'Fail'", "pred_sql": "SELECT COUNT(*) AS fail_count FROM Student_Tests_Taken WHERE test_result = 'Fail'", "source_tables": ["student_tests_taken"], "error_info": ""}, {"sample_id": 3787, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Student_Tests_Taken WHERE test_result = 'Fail'", "pred_sql": "SELECT COUNT(*) AS fail_count FROM Student_Tests_Taken WHERE test_result = 'Fail'", "source_tables": ["student_tests_taken"], "error_info": ""}, {"sample_id": 3788, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT login_name FROM Students WHERE family_name = 'Ward'", "pred_sql": "SELECT login_name FROM Students WHERE family_name = 'Ward'", "source_tables": ["students"], "error_info": ""}, {"sample_id": 3789, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT login_name FROM Students WHERE family_name = 'Ward'", "pred_sql": "SELECT login_name FROM Students WHERE family_name = 'Ward'", "source_tables": ["students"], "error_info": ""}, {"sample_id": 3790, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT date_of_latest_logon FROM Students WHERE family_name = 'Jaskolski' OR family_name = 'Langosh'", "pred_sql": "SELECT date_of_latest_logon FROM Students WHERE family_name IN ('Jaskolski', 'Langosh')", "source_tables": ["students"], "error_info": ""}, {"sample_id": 3791, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT date_of_latest_logon FROM Students WHERE family_name = 'Jaskolski' OR family_name = 'Langosh'", "pred_sql": "SELECT date_of_latest_logon FROM Students WHERE family_name IN ('Jaskolski', 'Langosh')", "source_tables": ["students"], "error_info": ""}, {"sample_id": 3792, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Students WHERE personal_name LIKE '%son%'", "pred_sql": "SELECT COUNT(*) AS student_count FROM Students WHERE personal_name LIKE '%son%'", "source_tables": ["students"], "error_info": ""}, {"sample_id": 3793, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Students WHERE personal_name LIKE '%son%'", "pred_sql": "SELECT COUNT(*) AS number_of_students FROM Students WHERE personal_name LIKE '%son%'", "source_tables": ["students"], "error_info": ""}, {"sample_id": 3794, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT subject_name FROM SUBJECTS", "pred_sql": "SELECT subject_name FROM Subjects", "source_tables": ["subjects"], "error_info": ""}, {"sample_id": 3795, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT subject_name FROM SUBJECTS", "pred_sql": "SELECT subject_name FROM Subjects", "source_tables": ["subjects"], "error_info": ""}, {"sample_id": 3796, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT * FROM Course_Authors_and_Tutors ORDER BY personal_name", "pred_sql": "SELECT * FROM Course_Authors_and_Tutors ORDER BY personal_name ASC", "source_tables": ["course_authors_and_tutors"], "error_info": ""}, {"sample_id": 3797, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT * FROM Course_Authors_and_Tutors ORDER BY personal_name", "pred_sql": "SELECT * FROM Course_Authors_and_Tutors ORDER BY personal_name ASC", "source_tables": ["course_authors_and_tutors"], "error_info": ""}, {"sample_id": 3798, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT personal_name, family_name FROM Students ORDER BY family_name", "pred_sql": "SELECT personal_name, family_name FROM Students ORDER BY family_name ASC", "source_tables": ["students"], "error_info": ""}, {"sample_id": 3799, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT personal_name, family_name FROM Students ORDER BY family_name", "pred_sql": "SELECT personal_name, family_name FROM Students ORDER BY family_name ASC", "source_tables": ["students"], "error_info": ""}, {"sample_id": 3800, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT test_result, COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC", "pred_sql": "SELECT test_result, COUNT(test_result) AS result_count FROM Student_Tests_Taken GROUP BY test_result ORDER BY result_count DESC", "source_tables": ["student_tests_taken"], "error_info": ""}, {"sample_id": 3801, "db_id": "e_learning", "score": 0, "gold_sql": "SELECT test_result, COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC", "pred_sql": "SELECT test_result, COUNT(DISTINCT student_id) AS number_of_students FROM Student_Tests_Taken GROUP BY test_result", "source_tables": ["student_tests_taken"], "error_info": "Predction Execution Error:no such column: student_id"}, {"sample_id": 3802, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T2.course_name = 'advanced database'", "pred_sql": "SELECT CA.login_name FROM Course_Authors_and_Tutors AS CA JOIN Courses AS C ON CA.author_id = C.author_id WHERE C.course_name = 'advanced database'", "source_tables": ["courses", "course_authors_and_tutors"], "error_info": ""}, {"sample_id": 3803, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T2.course_name = 'advanced database'", "pred_sql": "SELECT CA.login_name FROM Courses AS C JOIN Course_Authors_and_Tutors AS CA ON C.author_id = CA.author_id WHERE C.course_name = 'advanced database'", "source_tables": ["courses", "course_authors_and_tutors"], "error_info": ""}, {"sample_id": 3804, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T2.course_name = 'operating system' OR T2.course_name = 'data structure'", "pred_sql": "SELECT ca.address_line_1 FROM Course_Authors_and_Tutors AS ca JOIN Courses AS c ON ca.author_id = c.author_id WHERE c.course_name IN ('operating system', 'data structure')", "source_tables": ["courses", "course_authors_and_tutors"], "error_info": ""}, {"sample_id": 3805, "db_id": "e_learning", "score": 0, "gold_sql": "SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T2.course_name = 'operating system' OR T2.course_name = 'data structure'", "pred_sql": "SELECT DISTINCT CA.address_line_1 FROM Course_Authors_and_Tutors AS CA JOIN Courses AS C ON CA.author_id = C.author_id JOIN Subjects AS S ON C.subject_id = S.subject_id WHERE S.subject_name IN ('operating system', 'data structure')", "source_tables": ["courses", "course_authors_and_tutors"], "error_info": "Result not equal"}, {"sample_id": 3806, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT T1.personal_name, T1.family_name, T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT ca.personal_name, ca.family_name, ca.author_id FROM Course_Authors_and_Tutors AS ca JOIN Courses AS c ON ca.author_id = c.author_id GROUP BY ca.author_id ORDER BY COUNT(c.course_id) DESC LIMIT 1", "source_tables": ["courses", "course_authors_and_tutors"], "error_info": ""}, {"sample_id": 3807, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT T1.personal_name, T1.family_name, T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT ca.personal_name, ca.family_name, ca.author_id FROM Course_Authors_and_Tutors AS ca JOIN Courses AS c ON ca.author_id = c.author_id GROUP BY ca.author_id ORDER BY COUNT(c.course_id) DESC LIMIT 1", "source_tables": ["courses", "course_authors_and_tutors"], "error_info": ""}, {"sample_id": 3808, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT T1.address_line_1, T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id HAVING COUNT(*) >= 2", "pred_sql": "SELECT ca.author_id, ca.address_line_1 FROM Course_Authors_and_Tutors AS ca JOIN Courses AS c ON ca.author_id = c.author_id GROUP BY ca.author_id, ca.address_line_1 HAVING COUNT(c.course_id) >= 2", "source_tables": ["courses", "course_authors_and_tutors"], "error_info": ""}, {"sample_id": 3809, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT T1.address_line_1, T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id HAVING COUNT(*) >= 2", "pred_sql": "SELECT ca.author_id, ca.address_line_1 FROM Course_Authors_and_Tutors AS ca JOIN Courses AS c ON ca.author_id = c.author_id GROUP BY ca.author_id HAVING COUNT(c.course_id) >= 2", "source_tables": ["courses", "course_authors_and_tutors"], "error_info": ""}, {"sample_id": 3810, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT T2.course_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T1.personal_name = 'Julio'", "pred_sql": "SELECT Courses.course_name FROM Courses JOIN Course_Authors_and_Tutors ON Courses.author_id = Course_Authors_and_Tutors.author_id WHERE Course_Authors_and_Tutors.personal_name = 'Julio'", "source_tables": ["courses", "course_authors_and_tutors"], "error_info": ""}, {"sample_id": 3811, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT T2.course_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T1.personal_name = 'Julio'", "pred_sql": "SELECT Courses.course_name FROM Courses JOIN Course_Authors_and_Tutors ON Courses.author_id = Course_Authors_and_Tutors.author_id WHERE Course_Authors_and_Tutors.personal_name = 'Julio'", "source_tables": ["courses", "course_authors_and_tutors"], "error_info": ""}, {"sample_id": 3812, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT T1.course_name, T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id WHERE T2.subject_name = 'Computer Science'", "pred_sql": "SELECT Courses.course_name, Courses.course_description FROM Courses JOIN Subjects ON Courses.subject_id = Subjects.subject_id WHERE Subjects.subject_name = 'Computer Science'", "source_tables": ["courses", "subjects"], "error_info": ""}, {"sample_id": 3813, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT T1.course_name, T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id WHERE T2.subject_name = 'Computer Science'", "pred_sql": "SELECT Courses.course_name, Courses.course_description FROM Courses JOIN Subjects ON Courses.subject_id = Subjects.subject_id WHERE Subjects.subject_name = 'Computer Science'", "source_tables": ["courses", "subjects"], "error_info": ""}, {"sample_id": 3814, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT T1.subject_id, T2.subject_name, COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id GROUP BY T1.subject_id", "pred_sql": "SELECT s.subject_id, s.subject_name, COUNT(c.course_id) AS number_of_courses FROM Subjects AS s LEFT JOIN Courses AS c ON s.subject_id = c.subject_id GROUP BY s.subject_id, s.subject_name", "source_tables": ["courses", "subjects"], "error_info": ""}, {"sample_id": 3815, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT T1.subject_id, T2.subject_name, COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id GROUP BY T1.subject_id", "pred_sql": "SELECT Subjects.subject_id, Subjects.subject_name, COUNT(Courses.course_id) AS number_of_courses FROM Subjects LEFT JOIN Courses ON Subjects.subject_id = Courses.subject_id GROUP BY Subjects.subject_id, Subjects.subject_name", "source_tables": ["courses", "subjects"], "error_info": ""}, {"sample_id": 3816, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT T1.subject_id, T2.subject_name, COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id GROUP BY T1.subject_id ORDER BY COUNT(*) ASC", "pred_sql": "SELECT Subjects.subject_id, Subjects.subject_name, COUNT(Courses.course_id) AS course_count FROM Subjects LEFT JOIN Courses ON Subjects.subject_id = Courses.subject_id GROUP BY Subjects.subject_id, Subjects.subject_name ORDER BY course_count ASC", "source_tables": ["courses", "subjects"], "error_info": ""}, {"sample_id": 3817, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT T1.subject_id, T2.subject_name, COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id GROUP BY T1.subject_id ORDER BY COUNT(*) ASC", "pred_sql": "SELECT s.subject_id, s.subject_name, COUNT(c.course_id) AS course_count FROM Subjects AS s LEFT JOIN Courses AS c ON s.subject_id = c.subject_id GROUP BY s.subject_id, s.subject_name ORDER BY course_count ASC", "source_tables": ["courses", "subjects"], "error_info": ""}, {"sample_id": 3818, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = 'Spanish'", "pred_sql": "SELECT Student_Course_Enrolment.date_of_enrolment FROM Student_Course_Enrolment JOIN Courses ON Student_Course_Enrolment.course_id = Courses.course_id WHERE Courses.course_name = 'Spanish'", "source_tables": ["courses", "student_course_enrolment"], "error_info": ""}, {"sample_id": 3819, "db_id": "e_learning", "score": 0, "gold_sql": "SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = 'Spanish'", "pred_sql": "SELECT Student_Course_Enrolment.date_of_enrolment FROM Student_Course_Enrolment JOIN Courses ON Student_Course_Enrolment.course_id = Courses.course_id JOIN Subjects ON Courses.subject_id = Subjects.subject_id WHERE Subjects.subject_name = 'Spanish'", "source_tables": ["courses", "student_course_enrolment"], "error_info": "Result not equal"}, {"sample_id": 3820, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT course_name FROM Courses WHERE course_id = (SELECT course_id FROM Student_Course_Enrolment GROUP BY course_id ORDER BY COUNT(student_id) DESC LIMIT 1)", "source_tables": ["courses", "student_course_enrolment"], "error_info": ""}, {"sample_id": 3821, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT C.course_name FROM Courses AS C JOIN Student_Course_Enrolment AS SCE ON C.course_id = SCE.course_id GROUP BY C.course_id ORDER BY COUNT(SCE.student_id) DESC LIMIT 1", "source_tables": ["courses", "student_course_enrolment"], "error_info": ""}, {"sample_id": 3822, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name HAVING COUNT(*) = 1", "pred_sql": "SELECT C.course_name FROM Courses AS C JOIN Student_Course_Enrolment AS SCE ON C.course_id = SCE.course_id GROUP BY C.course_id HAVING COUNT(SCE.student_id) = 1", "source_tables": ["courses", "student_course_enrolment"], "error_info": ""}, {"sample_id": 3823, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name HAVING COUNT(*) = 1", "pred_sql": "SELECT C.course_name FROM Courses AS C JOIN Student_Course_Enrolment AS SCE ON C.course_id = SCE.course_id GROUP BY C.course_id HAVING COUNT(SCE.student_id) = 1", "source_tables": ["courses", "student_course_enrolment"], "error_info": ""}, {"sample_id": 3824, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT T1.course_description, T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name HAVING COUNT(*) > 2", "pred_sql": "SELECT Courses.course_name, Courses.course_description FROM Courses JOIN Student_Course_Enrolment ON Courses.course_id = Student_Course_Enrolment.course_id GROUP BY Courses.course_id HAVING COUNT(Student_Course_Enrolment.student_id) > 2", "source_tables": ["courses", "student_course_enrolment"], "error_info": ""}, {"sample_id": 3825, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT T1.course_description, T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name HAVING COUNT(*) > 2", "pred_sql": "SELECT C.course_name, C.course_description FROM Courses AS C JOIN Student_Course_Enrolment AS SCE ON C.course_id = SCE.course_id GROUP BY C.course_id HAVING COUNT(SCE.student_id) > 2", "source_tables": ["courses", "student_course_enrolment"], "error_info": ""}, {"sample_id": 3826, "db_id": "e_learning", "score": 0, "gold_sql": "SELECT T1.course_name, COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name", "pred_sql": "SELECT Courses.course_name, COUNT(Student_Course_Enrolment.student_id) AS number_of_enrollments FROM Courses LEFT JOIN Student_Course_Enrolment ON Courses.course_id = Student_Course_Enrolment.course_id GROUP BY Courses.course_name", "source_tables": ["courses", "student_course_enrolment"], "error_info": "Result not equal"}, {"sample_id": 3827, "db_id": "e_learning", "score": 0, "gold_sql": "SELECT T1.course_name, COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name", "pred_sql": "SELECT Courses.course_name, COUNT(Student_Course_Enrolment.student_id) AS number_of_enrolled_students FROM Courses LEFT JOIN Student_Course_Enrolment ON Courses.course_id = Student_Course_Enrolment.course_id GROUP BY Courses.course_name", "source_tables": ["courses", "student_course_enrolment"], "error_info": "Result not equal"}, {"sample_id": 3828, "db_id": "e_learning", "score": 0, "gold_sql": "SELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = 'Pass'", "pred_sql": "SELECT S.date_of_enrolment FROM Student_Course_Enrolment AS SCE JOIN Student_Tests_Taken AS STT ON SCE.registration_id = STT.registration_id WHERE STT.test_result = 'Pass'", "source_tables": ["student_tests_taken", "student_course_enrolment"], "error_info": "Predction Execution Error:no such column: S.date_of_enrolment"}, {"sample_id": 3829, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = 'Pass'", "pred_sql": "SELECT Student_Course_Enrolment.date_of_enrolment FROM Student_Tests_Taken JOIN Student_Course_Enrolment ON Student_Tests_Taken.registration_id = Student_Course_Enrolment.registration_id WHERE Student_Tests_Taken.test_result = 'Pass'", "source_tables": ["student_tests_taken", "student_course_enrolment"], "error_info": ""}, {"sample_id": 3830, "db_id": "e_learning", "score": 0, "gold_sql": "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = 'Fail'", "pred_sql": "SELECT SCTT.date_test_taken FROM Student_Tests_Taken AS SCTT WHERE SCTT.test_result = 'Fail'", "source_tables": ["student_tests_taken", "student_course_enrolment"], "error_info": "Result not equal"}, {"sample_id": 3831, "db_id": "e_learning", "score": 0, "gold_sql": "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = 'Fail'", "pred_sql": "SELECT SCTT.date_test_taken, SCTT.test_result, SCE.date_of_completion FROM Student_Tests_Taken AS SCTT JOIN Student_Course_Enrolment AS SCE ON SCTT.registration_id = SCE.registration_id WHERE SCTT.test_result = 'Fail'", "source_tables": ["student_tests_taken", "student_course_enrolment"], "error_info": "Result not equal"}, {"sample_id": 3832, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT T1.date_of_enrolment, T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.personal_name = 'Karson'", "pred_sql": "SELECT date_of_enrolment, date_of_completion FROM Student_Course_Enrolment JOIN Students ON Student_Course_Enrolment.student_id = Students.student_id WHERE Students.personal_name = 'Karson'", "source_tables": ["student_course_enrolment", "students"], "error_info": ""}, {"sample_id": 3833, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT T1.date_of_enrolment, T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.personal_name = 'Karson'", "pred_sql": "SELECT date_of_enrolment, date_of_completion FROM Student_Course_Enrolment JOIN Students ON Student_Course_Enrolment.student_id = Students.student_id WHERE Students.personal_name = 'Karson'", "source_tables": ["student_course_enrolment", "students"], "error_info": ""}, {"sample_id": 3834, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT T1.date_of_enrolment, T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.family_name = 'Zieme' AND T2.personal_name = 'Bernie'", "pred_sql": "SELECT date_of_enrolment, date_of_completion FROM Student_Course_Enrolment JOIN Students ON Student_Course_Enrolment.student_id = Students.student_id WHERE Students.family_name = 'Zieme' AND Students.personal_name = 'Bernie'", "source_tables": ["student_course_enrolment", "students"], "error_info": ""}, {"sample_id": 3835, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT T1.date_of_enrolment, T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.family_name = 'Zieme' AND T2.personal_name = 'Bernie'", "pred_sql": "SELECT date_of_enrolment, date_of_completion FROM Student_Course_Enrolment JOIN Students ON Student_Course_Enrolment.student_id = Students.student_id WHERE Students.family_name = 'Zieme' AND Students.personal_name = 'Bernie'", "source_tables": ["student_course_enrolment", "students"], "error_info": ""}, {"sample_id": 3836, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT T1.student_id, T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT student_id, login_name FROM Students WHERE student_id = (SELECT student_id FROM Student_Course_Enrolment GROUP BY student_id ORDER BY COUNT(course_id) DESC LIMIT 1)", "source_tables": ["student_course_enrolment", "students"], "error_info": ""}, {"sample_id": 3837, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT T1.student_id, T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT student_id, login_name FROM Students WHERE student_id IN (SELECT student_id FROM Student_Course_Enrolment GROUP BY student_id ORDER BY COUNT(course_id) DESC LIMIT 1)", "source_tables": ["student_course_enrolment", "students"], "error_info": ""}, {"sample_id": 3838, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT T1.student_id, T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(*) >= 2", "pred_sql": "SELECT s.student_id, s.personal_name FROM Students AS s JOIN Student_Course_Enrolment AS e ON s.student_id = e.student_id GROUP BY s.student_id, s.personal_name HAVING COUNT(e.registration_id) >= 2", "source_tables": ["student_course_enrolment", "students"], "error_info": ""}, {"sample_id": 3839, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT T1.student_id, T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(*) >= 2", "pred_sql": "SELECT student_id, personal_name FROM Students WHERE student_id IN (SELECT student_id FROM Student_Course_Enrolment GROUP BY student_id HAVING COUNT(course_id) >= 2)", "source_tables": ["student_course_enrolment", "students"], "error_info": ""}, {"sample_id": 3840, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT T1.student_id, T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(*) <= 2", "pred_sql": "SELECT s.student_id, s.middle_name FROM Students AS s JOIN Student_Course_Enrolment AS e ON s.student_id = e.student_id GROUP BY s.student_id HAVING COUNT(e.registration_id) <= 2", "source_tables": ["student_course_enrolment", "students"], "error_info": ""}, {"sample_id": 3841, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT T1.student_id, T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(*) <= 2", "pred_sql": "SELECT s.student_id, s.middle_name FROM Students AS s JOIN Student_Course_Enrolment AS e ON s.student_id = e.student_id GROUP BY s.student_id, s.middle_name HAVING COUNT(e.course_id) <= 2", "source_tables": ["student_course_enrolment", "students"], "error_info": ""}, {"sample_id": 3842, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id", "pred_sql": "SELECT personal_name FROM Students WHERE NOT student_id IN (SELECT student_id FROM Student_Course_Enrolment)", "source_tables": ["student_course_enrolment", "students"], "error_info": ""}, {"sample_id": 3843, "db_id": "e_learning", "score": 0, "gold_sql": "SELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id", "pred_sql": "SELECT personal_name, middle_name, family_name FROM Students WHERE NOT student_id IN (SELECT student_id FROM Student_Course_Enrolment)", "source_tables": ["student_course_enrolment", "students"], "error_info": "Result not equal"}, {"sample_id": 3844, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Students WHERE NOT student_id IN (SELECT student_id FROM Student_Course_Enrolment)", "pred_sql": "SELECT COUNT(*) AS students_without_enrollment FROM Students WHERE NOT student_id IN (SELECT student_id FROM Student_Course_Enrolment)", "source_tables": ["student_course_enrolment", "students"], "error_info": ""}, {"sample_id": 3845, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Students WHERE NOT student_id IN (SELECT student_id FROM Student_Course_Enrolment)", "pred_sql": "SELECT COUNT(*) AS number_of_students_without_enrollment FROM Students WHERE NOT student_id IN (SELECT student_id FROM Student_Course_Enrolment)", "source_tables": ["student_course_enrolment", "students"], "error_info": ""}, {"sample_id": 3846, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students", "pred_sql": "SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students", "source_tables": ["students", "course_authors_and_tutors"], "error_info": ""}, {"sample_id": 3847, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students", "pred_sql": "SELECT DISTINCT ca.login_name FROM Course_Authors_and_Tutors AS ca JOIN Students AS s ON ca.login_name = s.login_name", "source_tables": ["students", "course_authors_and_tutors"], "error_info": ""}, {"sample_id": 3848, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students", "pred_sql": "SELECT DISTINCT ca.personal_name FROM Course_Authors_and_Tutors AS ca JOIN Students AS s ON ca.personal_name = s.personal_name", "source_tables": ["students", "course_authors_and_tutors"], "error_info": ""}, {"sample_id": 3849, "db_id": "e_learning", "score": 1, "gold_sql": "SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students", "pred_sql": "SELECT DISTINCT ca.personal_name FROM Course_Authors_and_Tutors AS ca JOIN Students AS s ON ca.personal_name = s.personal_name", "source_tables": ["students", "course_authors_and_tutors"], "error_info": ""}, {"sample_id": 3850, "db_id": "insurance_policies", "score": 1, "gold_sql": "SELECT T1.Date_Claim_Made, T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id = T2.Claim_id GROUP BY T1.Claim_id HAVING COUNT(*) > 2 UNION SELECT T1.Date_Claim_Made, T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id = T2.Claim_id WHERE T1.Amount_Claimed = (SELECT MAX(Amount_Claimed) FROM Claims)", "pred_sql": "SELECT Claims.Date_Claim_Made, Claims.Claim_ID FROM Claims JOIN Settlements ON Claims.Claim_ID = Settlements.Claim_ID GROUP BY Claims.Claim_ID HAVING COUNT(Settlements.Settlement_ID) > 2 OR Claims.Amount_Claimed = (SELECT MAX(Amount_Claimed) FROM Claims)", "source_tables": ["claims", "settlements"], "error_info": ""}, {"sample_id": 3851, "db_id": "insurance_policies", "score": 1, "gold_sql": "SELECT T1.Date_Claim_Made, T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id = T2.Claim_id GROUP BY T1.Claim_id HAVING COUNT(*) > 2 UNION SELECT T1.Date_Claim_Made, T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id = T2.Claim_id WHERE T1.Amount_Claimed = (SELECT MAX(Amount_Claimed) FROM Claims)", "pred_sql": "SELECT Claims.Date_Claim_Made, Claims.Claim_ID FROM Claims LEFT JOIN Settlements ON Claims.Claim_ID = Settlements.Claim_ID GROUP BY Claims.Claim_ID HAVING COUNT(Settlements.Settlement_ID) > 2 OR Claims.Amount_Claimed = (SELECT MAX(Amount_Claimed) FROM Claims)", "source_tables": ["claims", "settlements"], "error_info": ""}, {"sample_id": 3852, "db_id": "insurance_policies", "score": 1, "gold_sql": "SELECT T1.customer_details, T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.customer_id GROUP BY T1.customer_id HAVING COUNT(*) >= 2 EXCEPT SELECT T1.customer_details, T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.customer_id JOIN Claims AS T3 ON T2.policy_id = T3.policy_id", "pred_sql": "SELECT c.Customer_ID, c.Customer_Details FROM Customers AS c JOIN Customer_Policies AS cp ON c.Customer_ID = cp.Customer_ID LEFT JOIN Claims AS cl ON cp.Policy_ID = cl.Policy_ID GROUP BY c.Customer_ID HAVING COUNT(cp.Policy_ID) >= 2 AND COUNT(cl.Claim_ID) = 0", "source_tables": ["claims", "customer_policies", "customers"], "error_info": ""}, {"sample_id": 3853, "db_id": "insurance_policies", "score": 1, "gold_sql": "SELECT T1.customer_details, T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.customer_id GROUP BY T1.customer_id HAVING COUNT(*) >= 2 EXCEPT SELECT T1.customer_details, T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.customer_id JOIN Claims AS T3 ON T2.policy_id = T3.policy_id", "pred_sql": "SELECT c.Customer_ID, c.Customer_Details FROM Customers AS c JOIN Customer_Policies AS cp ON c.Customer_ID = cp.Customer_ID LEFT JOIN Claims AS cl ON cp.Policy_ID = cl.Policy_ID GROUP BY c.Customer_ID HAVING COUNT(cp.Policy_ID) >= 2 AND COUNT(cl.Claim_ID) = 0", "source_tables": ["claims", "customer_policies", "customers"], "error_info": ""}, {"sample_id": 3854, "db_id": "insurance_policies", "score": 1, "gold_sql": "SELECT Payment_Method_Code, Date_Payment_Made, Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC", "pred_sql": "SELECT Payment_Method_Code, Date_Payment_Made, Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC", "source_tables": ["payments"], "error_info": ""}, {"sample_id": 3855, "db_id": "insurance_policies", "score": 1, "gold_sql": "SELECT Payment_Method_Code, Date_Payment_Made, Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC", "pred_sql": "SELECT Payment_Method_Code, Date_Payment_Made, Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC", "source_tables": ["payments"], "error_info": ""}, {"sample_id": 3856, "db_id": "insurance_policies", "score": 0, "gold_sql": "SELECT Amount_Settled, Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1", "pred_sql": "SELECT s.Amount_Settled, c.Amount_Claimed FROM Claims AS c JOIN Settlements AS s ON c.Claim_ID = s.Claim_ID WHERE c.Amount_Claimed = (SELECT MAX(Amount_Claimed) FROM Claims)", "source_tables": ["claims"], "error_info": "Result not equal"}, {"sample_id": 3857, "db_id": "insurance_policies", "score": 0, "gold_sql": "SELECT Amount_Settled, Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1", "pred_sql": "SELECT s.Amount_Settled, c.Amount_Claimed FROM Claims AS c JOIN Settlements AS s ON c.Claim_ID = s.Claim_ID WHERE c.Amount_Claimed = (SELECT MAX(Amount_Claimed) FROM Claims)", "source_tables": ["claims"], "error_info": "Result not equal"}, {"sample_id": 3858, "db_id": "insurance_policies", "score": 0, "gold_sql": "SELECT Amount_Settled, Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1", "pred_sql": "SELECT Claims.Amount_Claimed, Settlements.Amount_Settled FROM Claims JOIN Settlements ON Claims.Claim_ID = Settlements.Claim_ID WHERE Settlements.Amount_Settled = (SELECT MIN(Amount_Settled) FROM Settlements)", "source_tables": ["claims"], "error_info": "Result not equal"}, {"sample_id": 3859, "db_id": "insurance_policies", "score": 0, "gold_sql": "SELECT Amount_Settled, Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1", "pred_sql": "SELECT Claims.Amount_Claimed, Settlements.Amount_Settled FROM Claims JOIN Settlements ON Claims.Claim_ID = Settlements.Claim_ID WHERE Settlements.Amount_Settled = (SELECT MIN(Amount_Settled) FROM Settlements)", "source_tables": ["claims"], "error_info": "Result not equal"}, {"sample_id": 3860, "db_id": "insurance_policies", "score": 1, "gold_sql": "SELECT Date_Claim_Made, Date_Claim_Settled FROM Claims WHERE Amount_Claimed > (SELECT AVG(Amount_Claimed) FROM Claims)", "pred_sql": "SELECT Date_Claim_Made, Date_Claim_Settled FROM Claims WHERE Amount_Claimed > (SELECT AVG(Amount_Claimed) FROM Claims)", "source_tables": ["claims"], "error_info": ""}, {"sample_id": 3861, "db_id": "insurance_policies", "score": 0, "gold_sql": "SELECT Date_Claim_Made, Date_Claim_Settled FROM Claims WHERE Amount_Claimed > (SELECT AVG(Amount_Claimed) FROM Claims)", "pred_sql": "SELECT Claims.Date_Claim_Made, Settlements.Date_Claim_Settled FROM Claims JOIN Settlements ON Claims.Claim_ID = Settlements.Claim_ID WHERE Settlements.Amount_Claimed > (SELECT AVG(Amount_Claimed) FROM Settlements)", "source_tables": ["claims"], "error_info": "Result not equal"}, {"sample_id": 3862, "db_id": "insurance_policies", "score": 0, "gold_sql": "SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled <= (SELECT AVG(Amount_Settled) FROM Claims)", "pred_sql": "SELECT s.Date_Claim_Made, s.Amount_Claimed FROM Settlements AS s JOIN Claims AS c ON s.Claim_ID = c.Claim_ID WHERE s.Amount_Claimed <= (SELECT AVG(Amount_Claimed) FROM Settlements)", "source_tables": ["claims"], "error_info": "Result not equal"}, {"sample_id": 3863, "db_id": "insurance_policies", "score": 0, "gold_sql": "SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled <= (SELECT AVG(Amount_Settled) FROM Claims)", "pred_sql": "SELECT Claims.Date_Claim_Made FROM Claims WHERE Amount_Claimed <= (SELECT AVG(Amount_Claimed) FROM Claims)", "source_tables": ["claims"], "error_info": "Result not equal"}, {"sample_id": 3864, "db_id": "insurance_policies", "score": 0, "gold_sql": "SELECT T1.Claim_id, COUNT(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY T1.claim_id", "pred_sql": "SELECT Claims.Claim_ID, COUNT(Settlements.Settlement_ID) AS Number_of_Settlements FROM Claims LEFT JOIN Settlements ON Claims.Claim_ID = Settlements.Claim_ID GROUP BY Claims.Claim_ID", "source_tables": ["claims", "settlements"], "error_info": "Result not equal"}, {"sample_id": 3865, "db_id": "insurance_policies", "score": 1, "gold_sql": "SELECT T1.Claim_id, COUNT(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY T1.claim_id", "pred_sql": "SELECT Claim_ID, COUNT(Settlement_ID) AS Number_of_Settlements FROM Settlements GROUP BY Claim_ID", "source_tables": ["claims", "settlements"], "error_info": ""}, {"sample_id": 3866, "db_id": "insurance_policies", "score": 1, "gold_sql": "SELECT T1.claim_id, T1.date_claim_made, COUNT(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY T1.claim_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Claims.Claim_ID, Claims.Date_Claim_Made, COUNT(Settlements.Settlement_ID) AS Number_Of_Settlements FROM Claims JOIN Settlements ON Claims.Claim_ID = Settlements.Claim_ID GROUP BY Claims.Claim_ID, Claims.Date_Claim_Made ORDER BY Number_Of_Settlements DESC LIMIT 1", "source_tables": ["claims", "settlements"], "error_info": ""}, {"sample_id": 3867, "db_id": "insurance_policies", "score": 1, "gold_sql": "SELECT T1.claim_id, T1.date_claim_made, COUNT(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY T1.claim_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Claims.Claim_ID, Claims.Date_Claim_Made, COUNT(Settlements.Settlement_ID) AS Settlement_Count FROM Claims JOIN Settlements ON Claims.Claim_ID = Settlements.Claim_ID GROUP BY Claims.Claim_ID, Claims.Date_Claim_Made ORDER BY Settlement_Count DESC LIMIT 1", "source_tables": ["claims", "settlements"], "error_info": ""}, {"sample_id": 3868, "db_id": "insurance_policies", "score": 0, "gold_sql": "SELECT COUNT(*), T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT 1", "pred_sql": "SELECT COUNT(*) AS Settlement_Count, Claim_ID FROM Settlements WHERE Claim_ID = (SELECT Claim_ID FROM Claims ORDER BY Date_Claim_Settled DESC LIMIT 1)", "source_tables": ["claims", "settlements"], "error_info": "Result not equal"}, {"sample_id": 3869, "db_id": "insurance_policies", "score": 0, "gold_sql": "SELECT COUNT(*), T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT 1", "pred_sql": "SELECT Claims.Claim_ID, COUNT(Settlements.Settlement_ID) AS Number_of_Settlements FROM Claims JOIN Settlements ON Claims.Claim_ID = Settlements.Claim_ID WHERE Settlements.Date_Claim_Settled = (SELECT MAX(Date_Claim_Settled) FROM Settlements) GROUP BY Claims.Claim_ID", "source_tables": ["claims", "settlements"], "error_info": "Result not equal"}, {"sample_id": 3870, "db_id": "insurance_policies", "score": 1, "gold_sql": "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1", "pred_sql": "SELECT MIN(Date_Claim_Made) AS Earliest_Claim_Date FROM Claims", "source_tables": ["claims"], "error_info": ""}, {"sample_id": 3871, "db_id": "insurance_policies", "score": 1, "gold_sql": "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1", "pred_sql": "SELECT MIN(Date_Claim_Made) AS First_Claim_Date FROM Claims", "source_tables": ["claims"], "error_info": ""}, {"sample_id": 3872, "db_id": "insurance_policies", "score": 1, "gold_sql": "SELECT SUM(Amount_Settled) FROM Settlements", "pred_sql": "SELECT SUM(Amount_Settled) AS Total_Amount_Settled FROM Settlements", "source_tables": ["settlements"], "error_info": ""}, {"sample_id": 3873, "db_id": "insurance_policies", "score": 1, "gold_sql": "SELECT SUM(Amount_Settled) FROM Settlements", "pred_sql": "SELECT SUM(Amount_Settled) AS Total_Amount_Settled FROM Settlements", "source_tables": ["settlements"], "error_info": ""}, {"sample_id": 3874, "db_id": "insurance_policies", "score": 1, "gold_sql": "SELECT T1.customer_details, T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id GROUP BY T1.customer_id HAVING COUNT(*) > 1", "pred_sql": "SELECT Customers.Customer_ID, Customers.Customer_Details FROM Customers JOIN Customer_Policies ON Customers.Customer_ID = Customer_Policies.Customer_ID GROUP BY Customers.Customer_ID HAVING COUNT(Customer_Policies.Policy_ID) > 1", "source_tables": ["customer_policies", "customers"], "error_info": ""}, {"sample_id": 3875, "db_id": "insurance_policies", "score": 1, "gold_sql": "SELECT T1.customer_details, T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id GROUP BY T1.customer_id HAVING COUNT(*) > 1", "pred_sql": "SELECT Customers.Customer_ID, Customers.Customer_Details FROM Customers JOIN Customer_Policies ON Customers.Customer_ID = Customer_Policies.Customer_ID GROUP BY Customers.Customer_ID HAVING COUNT(Customer_Policies.Policy_ID) > 1", "source_tables": ["customer_policies", "customers"], "error_info": ""}, {"sample_id": 3876, "db_id": "insurance_policies", "score": 1, "gold_sql": "SELECT Date_Claim_Made, Date_Claim_Settled FROM Settlements", "pred_sql": "SELECT s.Date_Claim_Made, s.Date_Claim_Settled FROM Settlements AS s", "source_tables": ["settlements"], "error_info": ""}, {"sample_id": 3877, "db_id": "insurance_policies", "score": 1, "gold_sql": "SELECT Date_Claim_Made, Date_Claim_Settled FROM Settlements", "pred_sql": "SELECT Settlements.Date_Claim_Made, Settlements.Date_Claim_Settled FROM Settlements", "source_tables": ["settlements"], "error_info": ""}, {"sample_id": 3878, "db_id": "insurance_policies", "score": 0, "gold_sql": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Payment_Method_Code, COUNT(*) AS Method_Count FROM Payments GROUP BY Payment_Method_Code ORDER BY Method_Count DESC LIMIT 1", "source_tables": ["payments"], "error_info": "Result not equal"}, {"sample_id": 3879, "db_id": "insurance_policies", "score": 0, "gold_sql": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Payment_Method_Code, COUNT(*) AS Method_Usage FROM Payments GROUP BY Payment_Method_Code ORDER BY Method_Usage DESC LIMIT 1", "source_tables": ["payments"], "error_info": "Result not equal"}, {"sample_id": 3880, "db_id": "insurance_policies", "score": 0, "gold_sql": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY COUNT(*) ASC LIMIT 1", "pred_sql": "SELECT Payment_Method_Code, COUNT(*) AS Payment_Count FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Count ASC LIMIT 1", "source_tables": ["payments"], "error_info": "Result not equal"}, {"sample_id": 3881, "db_id": "insurance_policies", "score": 0, "gold_sql": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY COUNT(*) ASC LIMIT 1", "pred_sql": "SELECT Payment_Method_Code, COUNT(*) AS Payment_Count FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Count ASC LIMIT 1", "source_tables": ["payments"], "error_info": "Result not equal"}, {"sample_id": 3882, "db_id": "insurance_policies", "score": 1, "gold_sql": "SELECT SUM(Amount_Payment) FROM Payments", "pred_sql": "SELECT SUM(Amount_Payment) AS Total_Amount_Payment FROM Payments", "source_tables": ["payments"], "error_info": ""}, {"sample_id": 3883, "db_id": "insurance_policies", "score": 1, "gold_sql": "SELECT SUM(Amount_Payment) FROM Payments", "pred_sql": "SELECT SUM(Amount_Payment) AS Total_Amount_Paid FROM Payments", "source_tables": ["payments"], "error_info": ""}, {"sample_id": 3884, "db_id": "insurance_policies", "score": 1, "gold_sql": "SELECT DISTINCT customer_details FROM Customers", "pred_sql": "SELECT DISTINCT Customer_Details FROM Customers", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 3885, "db_id": "insurance_policies", "score": 1, "gold_sql": "SELECT DISTINCT customer_details FROM Customers", "pred_sql": "SELECT DISTINCT Customer_Details FROM Customers", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 3886, "db_id": "insurance_policies", "score": 0, "gold_sql": "SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Policy_Type_Code, COUNT(DISTINCT Customer_ID) AS Customer_Count FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY Customer_Count DESC LIMIT 1", "source_tables": ["customer_policies"], "error_info": "Result not equal"}, {"sample_id": 3887, "db_id": "insurance_policies", "score": 0, "gold_sql": "SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Policy_Type_Code, COUNT(DISTINCT Customer_ID) AS Customer_Count FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY Customer_Count DESC LIMIT 1", "source_tables": ["customer_policies"], "error_info": "Result not equal"}, {"sample_id": 3888, "db_id": "insurance_policies", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Settlements", "pred_sql": "SELECT COUNT(*) AS Total_Settlements FROM Settlements", "source_tables": ["settlements"], "error_info": ""}, {"sample_id": 3889, "db_id": "insurance_policies", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Settlements", "pred_sql": "SELECT COUNT(*) AS Total_Settlements FROM Settlements", "source_tables": ["settlements"], "error_info": ""}, {"sample_id": 3890, "db_id": "insurance_policies", "score": 1, "gold_sql": "SELECT Payment_ID, Date_Payment_Made, Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'", "pred_sql": "SELECT Payment_ID, Date_Payment_Made, Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'", "source_tables": ["payments"], "error_info": ""}, {"sample_id": 3891, "db_id": "insurance_policies", "score": 1, "gold_sql": "SELECT Payment_ID, Date_Payment_Made, Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'", "pred_sql": "SELECT Payment_ID, Date_Payment_Made, Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'", "source_tables": ["payments"], "error_info": ""}, {"sample_id": 3892, "db_id": "insurance_policies", "score": 0, "gold_sql": "SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id = T2.customer_id", "pred_sql": "SELECT * FROM Customers WHERE NOT Customer_ID IN (SELECT Customer_ID FROM Customer_Policies)", "source_tables": ["customer_policies", "customers"], "error_info": "Result not equal"}, {"sample_id": 3893, "db_id": "insurance_policies", "score": 0, "gold_sql": "SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id = T2.customer_id", "pred_sql": "SELECT Customers.Customer_ID, Customers.Customer_Details FROM Customers LEFT JOIN Customer_Policies ON Customers.Customer_ID = Customer_Policies.Customer_ID WHERE Customer_Policies.Customer_ID IS NULL", "source_tables": ["customer_policies", "customers"], "error_info": "Result not equal"}, {"sample_id": 3894, "db_id": "insurance_policies", "score": 0, "gold_sql": "SELECT T1.claim_id, T1.date_claim_made, T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id = T2.Claim_id GROUP BY T1.claim_id HAVING COUNT(*) = 1", "pred_sql": "SELECT Claims.Date_Claim_Made, Claims.Date_Claim_Settled, Claims.Amount_Settled FROM Claims JOIN Settlements ON Claims.Claim_ID = Settlements.Claim_ID GROUP BY Claims.Claim_ID HAVING COUNT(Settlements.Settlement_ID) = 1", "source_tables": ["claims", "settlements"], "error_info": "Result not equal"}, {"sample_id": 3895, "db_id": "insurance_policies", "score": 0, "gold_sql": "SELECT T1.claim_id, T1.date_claim_made, T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id = T2.Claim_id GROUP BY T1.claim_id HAVING COUNT(*) = 1", "pred_sql": "SELECT Claims.Date_Claim_Made, Claims.Date_Claim_Settled, Settlements.Amount_Settled FROM Claims JOIN Settlements ON Claims.Claim_ID = Settlements.Claim_ID GROUP BY Claims.Claim_ID HAVING COUNT(Settlements.Settlement_ID) = 1", "source_tables": ["claims", "settlements"], "error_info": "Result not equal"}, {"sample_id": 3896, "db_id": "insurance_policies", "score": 1, "gold_sql": "SELECT SUM(Amount_Claimed) FROM Claims", "pred_sql": "SELECT SUM(Amount_Claimed) AS Total_Claimed_Amount FROM Claims", "source_tables": ["claims"], "error_info": ""}, {"sample_id": 3897, "db_id": "insurance_policies", "score": 1, "gold_sql": "SELECT SUM(Amount_Claimed) FROM Claims", "pred_sql": "SELECT SUM(Amount_Claimed) AS Total_Amount_Claimed FROM Claims", "source_tables": ["claims"], "error_info": ""}, {"sample_id": 3898, "db_id": "hospital_1", "score": 0, "gold_sql": "SELECT name FROM department GROUP BY departmentID ORDER BY COUNT(departmentID) DESC LIMIT 1", "pred_sql": "SELECT Department.Name, COUNT(Physician.EmployeeID) AS EmployeeCount FROM Department LEFT JOIN Affiliated_With ON Department.DepartmentID = Affiliated_With.Department LEFT JOIN Physician ON Affiliated_With.Physician = Physician.EmployeeID GROUP BY Department.Name ORDER BY EmployeeCount DESC LIMIT 1", "source_tables": ["department"], "error_info": "Result not equal"}, {"sample_id": 3899, "db_id": "hospital_1", "score": 0, "gold_sql": "SELECT name FROM department GROUP BY departmentID ORDER BY COUNT(departmentID) DESC LIMIT 1", "pred_sql": "SELECT Department.Name, COUNT(Affiliated_With.Physician) AS EmployeeCount FROM Department JOIN Affiliated_With ON Department.DepartmentID = Affiliated_With.Department GROUP BY Department.Name ORDER BY EmployeeCount DESC LIMIT 1", "source_tables": ["department"], "error_info": "Result not equal"}, {"sample_id": 3900, "db_id": "hospital_1", "score": 0, "gold_sql": "SELECT head FROM department GROUP BY departmentID ORDER BY COUNT(departmentID) LIMIT 1", "pred_sql": "SELECT Department.Head FROM Department JOIN Affiliated_With ON Department.DepartmentID = Affiliated_With.Department GROUP BY Department.Head ORDER BY COUNT(Affiliated_With.Physician) ASC LIMIT 1", "source_tables": ["department"], "error_info": "Result not equal"}, {"sample_id": 3901, "db_id": "hospital_1", "score": 0, "gold_sql": "SELECT head FROM department GROUP BY departmentID ORDER BY COUNT(departmentID) LIMIT 1", "pred_sql": "SELECT Department.Head FROM Department JOIN Affiliated_With ON Department.DepartmentID = Affiliated_With.Department GROUP BY Department.DepartmentID ORDER BY COUNT(Affiliated_With.Physician) ASC LIMIT 1", "source_tables": ["department"], "error_info": "Result not equal"}, {"sample_id": 3902, "db_id": "hospital_1", "score": 0, "gold_sql": "SELECT T2.name, T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head = T2.EmployeeID GROUP BY departmentID ORDER BY COUNT(departmentID) LIMIT 1", "pred_sql": "SELECT Physician.Name, Physician.Position FROM Physician JOIN Department ON Physician.EmployeeID = Department.Head WHERE Department.DepartmentID = (SELECT Affiliated_With.Department FROM Affiliated_With GROUP BY Affiliated_With.Department ORDER BY COUNT(Affiliated_With.Physician) ASC LIMIT 1)", "source_tables": ["physician", "department"], "error_info": "Result not equal"}, {"sample_id": 3903, "db_id": "hospital_1", "score": 0, "gold_sql": "SELECT T2.name, T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head = T2.EmployeeID GROUP BY departmentID ORDER BY COUNT(departmentID) LIMIT 1", "pred_sql": "SELECT Physician.Name, Physician.Position FROM Physician JOIN Department ON Physician.EmployeeID = Department.Head WHERE Department.DepartmentID = (SELECT Affiliated_With.Department FROM Affiliated_With GROUP BY Affiliated_With.Department ORDER BY COUNT(Affiliated_With.Physician) ASC LIMIT 1)", "source_tables": ["physician", "department"], "error_info": "Result not equal"}, {"sample_id": 3904, "db_id": "hospital_1", "score": 0, "gold_sql": "SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn", "pred_sql": "SELECT DISTINCT Patient.Name FROM Patient JOIN Appointment ON Patient.SSN = Appointment.Patient", "source_tables": ["patient", "appointment"], "error_info": "Result not equal"}, {"sample_id": 3905, "db_id": "hospital_1", "score": 0, "gold_sql": "SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn", "pred_sql": "SELECT DISTINCT Patient.Name FROM Patient JOIN Appointment ON Patient.SSN = Appointment.Patient", "source_tables": ["patient", "appointment"], "error_info": "Result not equal"}, {"sample_id": 3906, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT name, phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn GROUP BY T1.patient HAVING COUNT(*) > 1", "pred_sql": "SELECT Patient.Name, Patient.Phone FROM Patient JOIN Appointment ON Patient.SSN = Appointment.Patient GROUP BY Patient.SSN HAVING COUNT(Appointment.AppointmentID) > 1", "source_tables": ["patient", "appointment"], "error_info": ""}, {"sample_id": 3907, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT name, phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn GROUP BY T1.patient HAVING COUNT(*) > 1", "pred_sql": "SELECT Patient.Name, Patient.Phone FROM Patient JOIN Appointment ON Patient.SSN = Appointment.Patient GROUP BY Patient.SSN HAVING COUNT(Appointment.AppointmentID) > 1", "source_tables": ["patient", "appointment"], "error_info": ""}, {"sample_id": 3908, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT appointmentid FROM appointment ORDER BY START DESC LIMIT 1", "pred_sql": "SELECT AppointmentID FROM Appointment ORDER BY Start DESC LIMIT 1", "source_tables": ["appointment"], "error_info": ""}, {"sample_id": 3909, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT appointmentid FROM appointment ORDER BY START DESC LIMIT 1", "pred_sql": "SELECT AppointmentID FROM Appointment ORDER BY Start DESC LIMIT 1", "source_tables": ["appointment"], "error_info": ""}, {"sample_id": 3910, "db_id": "hospital_1", "score": 0, "gold_sql": "SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID", "pred_sql": "SELECT DISTINCT Physician.Name FROM Physician JOIN Appointment ON Physician.EmployeeID = Appointment.Physician", "source_tables": ["physician", "appointment"], "error_info": "Result not equal"}, {"sample_id": 3911, "db_id": "hospital_1", "score": 0, "gold_sql": "SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID", "pred_sql": "SELECT DISTINCT Physician.Name FROM Physician JOIN Appointment ON Physician.EmployeeID = Appointment.Physician", "source_tables": ["physician", "appointment"], "error_info": "Result not equal"}, {"sample_id": 3912, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID", "pred_sql": "SELECT Name FROM Physician WHERE NOT EmployeeID IN (SELECT Physician FROM Appointment)", "source_tables": ["physician", "appointment"], "error_info": ""}, {"sample_id": 3913, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID", "pred_sql": "SELECT Name FROM Physician WHERE NOT EmployeeID IN (SELECT Physician FROM Appointment)", "source_tables": ["physician", "appointment"], "error_info": ""}, {"sample_id": 3914, "db_id": "hospital_1", "score": 0, "gold_sql": "SELECT T1.name, T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T2.PrimaryAffiliation = 1", "pred_sql": "SELECT Physician.Name AS PhysicianName, Department.Name AS DepartmentName FROM Physician JOIN Affiliated_With ON Physician.EmployeeID = Affiliated_With.Physician JOIN Department ON Affiliated_With.Department = Department.DepartmentID WHERE Affiliated_With.PrimaryAffiliation = 'Yes'", "source_tables": ["physician", "department", "affiliated_with"], "error_info": "Result not equal"}, {"sample_id": 3915, "db_id": "hospital_1", "score": 0, "gold_sql": "SELECT T1.name, T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T2.PrimaryAffiliation = 1", "pred_sql": "SELECT Physician.Name, Department.Name AS DepartmentName FROM Physician JOIN Affiliated_With ON Physician.EmployeeID = Affiliated_With.Physician JOIN Department ON Affiliated_With.Department = Department.DepartmentID WHERE Affiliated_With.PrimaryAffiliation = 'Yes'", "source_tables": ["physician", "department", "affiliated_with"], "error_info": "Result not equal"}, {"sample_id": 3916, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1", "pred_sql": "SELECT Patient.Name FROM Patient JOIN Appointment ON Patient.SSN = Appointment.Patient ORDER BY Appointment.Start DESC LIMIT 1", "source_tables": ["patient", "appointment"], "error_info": ""}, {"sample_id": 3917, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1", "pred_sql": "SELECT Patient.Name FROM Appointment JOIN Patient ON Appointment.Patient = Patient.SSN ORDER BY Appointment.Start DESC LIMIT 1", "source_tables": ["patient", "appointment"], "error_info": ""}, {"sample_id": 3918, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT COUNT(patient) FROM stay WHERE room = 112", "pred_sql": "SELECT COUNT(*) AS PatientCount FROM Stay WHERE Room = 112", "source_tables": ["stay"], "error_info": ""}, {"sample_id": 3919, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT COUNT(patient) FROM stay WHERE room = 112", "pred_sql": "SELECT COUNT(DISTINCT Patient) AS NumberOfPatients FROM Stay WHERE Room = 112", "source_tables": ["stay"], "error_info": ""}, {"sample_id": 3920, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT COUNT(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN = T2.patient JOIN physician AS T3 ON T2.physician = T3.employeeid WHERE T3.name = 'John Dorian'", "pred_sql": "SELECT COUNT(DISTINCT Prescribes.Patient) AS PatientCount FROM Prescribes JOIN Physician ON Prescribes.Physician = Physician.EmployeeID WHERE Physician.Name = 'John Dorian'", "source_tables": ["physician", "patient", "prescribes"], "error_info": ""}, {"sample_id": 3921, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT COUNT(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN = T2.patient JOIN physician AS T3 ON T2.physician = T3.employeeid WHERE T3.name = 'John Dorian'", "pred_sql": "SELECT COUNT(*) AS PrescriptionCount FROM Prescribes JOIN Physician ON Prescribes.Physician = Physician.EmployeeID WHERE Physician.Name = 'John Dorian'", "source_tables": ["physician", "patient", "prescribes"], "error_info": ""}, {"sample_id": 3922, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient = T2.SSN JOIN Prescribes AS T3 ON T3.Patient = T2.SSN JOIN Medication AS T4 ON T3.Medication = T4.Code WHERE room = 111", "pred_sql": "SELECT Medication.Name FROM Medication JOIN Prescribes ON Medication.Code = Prescribes.Medication JOIN Stay ON Prescribes.Patient = Stay.Patient WHERE Stay.Room = 111", "source_tables": ["patient", "medication", "prescribes", "stay"], "error_info": ""}, {"sample_id": 3923, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient = T2.SSN JOIN Prescribes AS T3 ON T3.Patient = T2.SSN JOIN Medication AS T4 ON T3.Medication = T4.Code WHERE room = 111", "pred_sql": "SELECT Medication.Name FROM Medication JOIN Prescribes ON Medication.Code = Prescribes.Medication JOIN Stay ON Prescribes.Patient = Stay.Patient WHERE Stay.Room = 111", "source_tables": ["patient", "medication", "prescribes", "stay"], "error_info": ""}, {"sample_id": 3924, "db_id": "hospital_1", "score": 0, "gold_sql": "SELECT patient FROM stay WHERE room = 111 ORDER BY staystart DESC LIMIT 1", "pred_sql": "SELECT Patient.SSN, Patient.Name, Stay.StayEnd FROM Stay JOIN Patient ON Stay.Patient = Patient.SSN WHERE Stay.Room = 111 ORDER BY Stay.StayEnd DESC LIMIT 1", "source_tables": ["stay"], "error_info": "Result not equal"}, {"sample_id": 3925, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT patient FROM stay WHERE room = 111 ORDER BY staystart DESC LIMIT 1", "pred_sql": "SELECT Patient FROM Stay WHERE Room = 111 ORDER BY StayEnd DESC LIMIT 1", "source_tables": ["stay"], "error_info": ""}, {"sample_id": 3926, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid = T2.prepnurse GROUP BY T1.employeeid ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Nurse.Name FROM Nurse JOIN Appointment ON Nurse.EmployeeID = Appointment.PrepNurse GROUP BY Nurse.Name ORDER BY COUNT(Appointment.AppointmentID) DESC LIMIT 1", "source_tables": ["appointment", "nurse"], "error_info": ""}, {"sample_id": 3927, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid = T2.prepnurse GROUP BY T1.employeeid ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Nurse.Name FROM Nurse JOIN Appointment ON Nurse.EmployeeID = Appointment.PrepNurse GROUP BY Nurse.EmployeeID ORDER BY COUNT(Appointment.AppointmentID) DESC LIMIT 1", "source_tables": ["appointment", "nurse"], "error_info": ""}, {"sample_id": 3928, "db_id": "hospital_1", "score": 0, "gold_sql": "SELECT T1.name, COUNT(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid", "pred_sql": "SELECT Physician.Name, COUNT(Patient.SSN) AS NumberOfPatients FROM Physician LEFT JOIN Patient ON Physician.EmployeeID = Patient.PCP GROUP BY Physician.Name", "source_tables": ["physician", "patient"], "error_info": "Result not equal"}, {"sample_id": 3929, "db_id": "hospital_1", "score": 0, "gold_sql": "SELECT T1.name, COUNT(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid", "pred_sql": "SELECT Physician.Name, COUNT(Patient.SSN) AS NumberOfPatients FROM Physician LEFT JOIN Appointment ON Physician.EmployeeID = Appointment.Physician LEFT JOIN Patient ON Appointment.Patient = Patient.SSN GROUP BY Physician.Name", "source_tables": ["physician", "patient"], "error_info": "Result not equal"}, {"sample_id": 3930, "db_id": "hospital_1", "score": 0, "gold_sql": "SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid HAVING COUNT(*) > 1", "pred_sql": "SELECT Physician.Name FROM Physician JOIN Appointment ON Physician.EmployeeID = Appointment.Physician GROUP BY Physician.EmployeeID HAVING COUNT(Appointment.Patient) > 1", "source_tables": ["physician", "patient"], "error_info": "Result not equal"}, {"sample_id": 3931, "db_id": "hospital_1", "score": 0, "gold_sql": "SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid HAVING COUNT(*) > 1", "pred_sql": "SELECT Physician.Name FROM Physician JOIN Prescribes ON Physician.EmployeeID = Prescribes.Physician GROUP BY Physician.EmployeeID HAVING COUNT(DISTINCT Prescribes.Patient) > 1", "source_tables": ["physician", "patient"], "error_info": "Result not equal"}, {"sample_id": 3932, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT COUNT(*), T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor = T2.blockfloor AND T1.blockcode = T2.blockcode GROUP BY T1.blockfloor", "pred_sql": "SELECT Room.BlockFloor, COUNT(Room.RoomNumber) AS NumberOfRooms FROM Room GROUP BY Room.BlockFloor", "source_tables": ["block", "room"], "error_info": ""}, {"sample_id": 3933, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT COUNT(*), T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor = T2.blockfloor AND T1.blockcode = T2.blockcode GROUP BY T1.blockfloor", "pred_sql": "SELECT Room.BlockFloor, COUNT(Room.RoomNumber) AS RoomCount FROM Room GROUP BY Room.BlockFloor", "source_tables": ["block", "room"], "error_info": ""}, {"sample_id": 3934, "db_id": "hospital_1", "score": 0, "gold_sql": "SELECT COUNT(*), T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor = T2.blockfloor AND T1.blockcode = T2.blockcode GROUP BY T1.blockcode", "pred_sql": "SELECT BlockCode, COUNT(RoomNumber) AS NumberOfRooms FROM Room WHERE BlockCode = 1 GROUP BY BlockCode", "source_tables": ["block", "room"], "error_info": "Result not equal"}, {"sample_id": 3935, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT COUNT(*), T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor = T2.blockfloor AND T1.blockcode = T2.blockcode GROUP BY T1.blockcode", "pred_sql": "SELECT Room.BlockCode, COUNT(Room.RoomNumber) AS RoomCount FROM Room GROUP BY Room.BlockCode", "source_tables": ["block", "room"], "error_info": ""}, {"sample_id": 3936, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT DISTINCT blockcode FROM room WHERE unavailable = 0", "pred_sql": "SELECT DISTINCT Room.BlockCode FROM Room WHERE Room.Unavailable = 0", "source_tables": ["room"], "error_info": ""}, {"sample_id": 3937, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT DISTINCT blockcode FROM room WHERE unavailable = 0", "pred_sql": "SELECT DISTINCT BlockCode FROM Room WHERE Unavailable = 0", "source_tables": ["room"], "error_info": ""}, {"sample_id": 3938, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT roomtype) FROM room", "pred_sql": "SELECT COUNT(DISTINCT RoomType) AS DifferentRoomTypes FROM Room", "source_tables": ["room"], "error_info": ""}, {"sample_id": 3939, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT roomtype) FROM room", "pred_sql": "SELECT COUNT(DISTINCT RoomType) AS DistinctRoomTypes FROM Room", "source_tables": ["room"], "error_info": ""}, {"sample_id": 3940, "db_id": "hospital_1", "score": 0, "gold_sql": "SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name = 'Thesisin'", "pred_sql": "SELECT Physician.Name FROM Physician JOIN Prescribes ON Physician.EmployeeID = Prescribes.Physician JOIN Medication ON Prescribes.Medication = Medication.Code WHERE Medication.Name = 'Thesisin'", "source_tables": ["physician", "prescribes", "medication"], "error_info": "Result not equal"}, {"sample_id": 3941, "db_id": "hospital_1", "score": 0, "gold_sql": "SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name = 'Thesisin'", "pred_sql": "SELECT Physician.Name FROM Physician JOIN Prescribes ON Physician.EmployeeID = Prescribes.Physician JOIN Medication ON Prescribes.Medication = Medication.Code WHERE Medication.Name = 'Thesisin'", "source_tables": ["physician", "prescribes", "medication"], "error_info": "Result not equal"}, {"sample_id": 3942, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT DISTINCT T1.name, T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand = 'X'", "pred_sql": "SELECT Physician.Name, Physician.Position FROM Physician JOIN Prescribes ON Physician.EmployeeID = Prescribes.Physician JOIN Medication ON Prescribes.Medication = Medication.Code WHERE Medication.Brand = 'X'", "source_tables": ["physician", "prescribes", "medication"], "error_info": ""}, {"sample_id": 3943, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT DISTINCT T1.name, T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand = 'X'", "pred_sql": "SELECT Physician.Name, Physician.Position FROM Physician JOIN Prescribes ON Physician.EmployeeID = Prescribes.Physician JOIN Medication ON Prescribes.Medication = Medication.Code WHERE Medication.Brand = 'X'", "source_tables": ["physician", "prescribes", "medication"], "error_info": ""}, {"sample_id": 3944, "db_id": "hospital_1", "score": 0, "gold_sql": "SELECT COUNT(*), T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand", "pred_sql": "SELECT m.Brand, COUNT(p.Medication) AS NumberOfPrescriptions FROM Medication AS m JOIN Prescribes AS p ON m.Code = p.Medication GROUP BY m.Brand", "source_tables": ["prescribes", "medication"], "error_info": "Result not equal"}, {"sample_id": 3945, "db_id": "hospital_1", "score": 0, "gold_sql": "SELECT COUNT(*), T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand", "pred_sql": "SELECT m.Brand, COUNT(p.Medication) AS MedicationCount FROM Medication AS m JOIN Prescribes AS p ON m.Code = p.Medication GROUP BY m.Brand", "source_tables": ["prescribes", "medication"], "error_info": "Result not equal"}, {"sample_id": 3946, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'", "pred_sql": "SELECT Name FROM Physician WHERE Position LIKE '%senior%'", "source_tables": ["physician"], "error_info": ""}, {"sample_id": 3947, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'", "pred_sql": "SELECT Name FROM Physician WHERE Position LIKE '%senior%'", "source_tables": ["physician"], "error_info": ""}, {"sample_id": 3948, "db_id": "hospital_1", "score": 0, "gold_sql": "SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1", "pred_sql": "SELECT Patient.SSN, Patient.Name, MAX(Undergoes.DateUndergoes) AS MostRecentTreatmentDate FROM Undergoes JOIN Patient ON Undergoes.Patient = Patient.SSN GROUP BY Patient.SSN, Patient.Name ORDER BY MostRecentTreatmentDate DESC LIMIT 1", "source_tables": ["undergoes"], "error_info": "Result not equal"}, {"sample_id": 3949, "db_id": "hospital_1", "score": 0, "gold_sql": "SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1", "pred_sql": "SELECT Patient.Name, MAX(Undergoes.DateUndergoes) AS MostRecentTreatmentDate FROM Undergoes JOIN Patient ON Undergoes.Patient = Patient.SSN GROUP BY Patient.Name ORDER BY MostRecentTreatmentDate DESC LIMIT 1", "source_tables": ["undergoes"], "error_info": "Result not equal"}, {"sample_id": 3950, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay = T3.StayID WHERE T3.room = 111", "pred_sql": "SELECT DISTINCT Patient.Name FROM Patient JOIN Undergoes ON Patient.SSN = Undergoes.Patient JOIN Stay ON Patient.SSN = Stay.Patient WHERE Stay.Room = 111", "source_tables": ["patient", "stay", "undergoes"], "error_info": ""}, {"sample_id": 3951, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay = T3.StayID WHERE T3.room = 111", "pred_sql": "SELECT DISTINCT Patient.Name FROM Patient JOIN Stay ON Patient.SSN = Stay.Patient JOIN Undergoes ON Stay.StayID = Undergoes.Stay WHERE Stay.Room = 111", "source_tables": ["patient", "stay", "undergoes"], "error_info": ""}, {"sample_id": 3952, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT DISTINCT name FROM nurse ORDER BY name", "pred_sql": "SELECT DISTINCT Name FROM Nurse ORDER BY Name ASC", "source_tables": ["nurse"], "error_info": ""}, {"sample_id": 3953, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT DISTINCT name FROM nurse ORDER BY name", "pred_sql": "SELECT DISTINCT Name FROM Nurse ORDER BY Name ASC", "source_tables": ["nurse"], "error_info": ""}, {"sample_id": 3954, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse = T2.EmployeeID", "pred_sql": "SELECT DISTINCT Nurse.Name FROM Nurse JOIN Undergoes ON Nurse.EmployeeID = Undergoes.AssistingNurse", "source_tables": ["nurse", "undergoes"], "error_info": ""}, {"sample_id": 3955, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse = T2.EmployeeID", "pred_sql": "SELECT DISTINCT Nurse.Name FROM Nurse JOIN Undergoes ON Nurse.EmployeeID = Undergoes.AssistingNurse JOIN Patient ON Undergoes.Patient = Patient.SSN", "source_tables": ["nurse", "undergoes"], "error_info": ""}, {"sample_id": 3956, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT DISTINCT name FROM medication ORDER BY name", "pred_sql": "SELECT DISTINCT Name FROM Medication ORDER BY Name", "source_tables": ["medication"], "error_info": ""}, {"sample_id": 3957, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT DISTINCT name FROM medication ORDER BY name", "pred_sql": "SELECT DISTINCT Name FROM Medication ORDER BY Name ASC", "source_tables": ["medication"], "error_info": ""}, {"sample_id": 3958, "db_id": "hospital_1", "score": 0, "gold_sql": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1", "pred_sql": "SELECT p.Name FROM Prescribes AS pr JOIN Physician AS p ON pr.Physician = p.EmployeeID WHERE pr.Dose = (SELECT MAX(Dose) FROM Prescribes)", "source_tables": ["physician", "prescribes"], "error_info": "Result not equal"}, {"sample_id": 3959, "db_id": "hospital_1", "score": 0, "gold_sql": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1", "pred_sql": "SELECT Physician.Name FROM Prescribes JOIN Physician ON Prescribes.Physician = Physician.EmployeeID WHERE Prescribes.Dose = (SELECT MAX(Dose) FROM Prescribes)", "source_tables": ["physician", "prescribes"], "error_info": "Result not equal"}, {"sample_id": 3960, "db_id": "hospital_1", "score": 0, "gold_sql": "SELECT physician, department FROM affiliated_with WHERE primaryaffiliation = 1", "pred_sql": "SELECT Physician.EmployeeID, Affiliated_With.Department FROM Physician JOIN Affiliated_With ON Physician.EmployeeID = Affiliated_With.Physician WHERE Affiliated_With.PrimaryAffiliation = 'Yes'", "source_tables": ["affiliated_with"], "error_info": "Result not equal"}, {"sample_id": 3961, "db_id": "hospital_1", "score": 0, "gold_sql": "SELECT physician, department FROM affiliated_with WHERE primaryaffiliation = 1", "pred_sql": "SELECT Physician.EmployeeID, Affiliated_With.Department FROM Physician JOIN Affiliated_With ON Physician.EmployeeID = Affiliated_With.Physician WHERE Affiliated_With.PrimaryAffiliation = 'Yes'", "source_tables": ["affiliated_with"], "error_info": "Result not equal"}, {"sample_id": 3962, "db_id": "hospital_1", "score": 0, "gold_sql": "SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation = 1", "pred_sql": "SELECT DISTINCT Department.Name FROM Department JOIN Affiliated_With ON Department.DepartmentID = Affiliated_With.Department WHERE Affiliated_With.PrimaryAffiliation = 'Yes'", "source_tables": ["department", "affiliated_with"], "error_info": "Result not equal"}, {"sample_id": 3963, "db_id": "hospital_1", "score": 0, "gold_sql": "SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation = 1", "pred_sql": "SELECT DISTINCT Department.Name FROM Department JOIN Affiliated_With ON Department.DepartmentID = Affiliated_With.Department WHERE Affiliated_With.PrimaryAffiliation = 'Yes'", "source_tables": ["department", "affiliated_with"], "error_info": "Result not equal"}, {"sample_id": 3964, "db_id": "hospital_1", "score": 0, "gold_sql": "SELECT nurse FROM on_call WHERE blockfloor = 1 AND blockcode = 1", "pred_sql": "SELECT Nurse.Name FROM Nurse JOIN On_Call ON Nurse.EmployeeID = On_Call.Nurse WHERE On_Call.BlockFloor = '1' AND On_Call.BlockCode = '1'", "source_tables": ["on_call"], "error_info": "Result not equal"}, {"sample_id": 3965, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT nurse FROM on_call WHERE blockfloor = 1 AND blockcode = 1", "pred_sql": "SELECT Nurse FROM On_Call WHERE BlockFloor = '1' AND BlockCode = '1'", "source_tables": ["on_call"], "error_info": ""}, {"sample_id": 3966, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT MAX(cost), MIN(cost), AVG(cost) FROM procedures", "pred_sql": "SELECT MAX(Cost) AS HighestCost, MIN(Cost) AS LowestCost, AVG(Cost) AS AverageCost FROM Procedures", "source_tables": ["procedures"], "error_info": ""}, {"sample_id": 3967, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT MAX(cost), MIN(cost), AVG(cost) FROM procedures", "pred_sql": "SELECT MAX(Cost) AS HighestCost, MIN(Cost) AS LowestCost, AVG(Cost) AS AverageCost FROM Procedures", "source_tables": ["procedures"], "error_info": ""}, {"sample_id": 3968, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT name, cost FROM procedures ORDER BY cost DESC", "pred_sql": "SELECT Name, Cost FROM Procedures ORDER BY Cost DESC", "source_tables": ["procedures"], "error_info": ""}, {"sample_id": 3969, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT name, cost FROM procedures ORDER BY cost DESC", "pred_sql": "SELECT Name, Cost FROM Procedures ORDER BY Cost DESC", "source_tables": ["procedures"], "error_info": ""}, {"sample_id": 3970, "db_id": "hospital_1", "score": 0, "gold_sql": "SELECT name FROM procedures ORDER BY cost LIMIT 3", "pred_sql": "SELECT Name, Cost FROM Procedures ORDER BY Cost DESC LIMIT 3", "source_tables": ["procedures"], "error_info": "Result not equal"}, {"sample_id": 3971, "db_id": "hospital_1", "score": 0, "gold_sql": "SELECT name FROM procedures ORDER BY cost LIMIT 3", "pred_sql": "SELECT Name, Cost FROM Procedures ORDER BY Cost DESC LIMIT 3", "source_tables": ["procedures"], "error_info": "Result not equal"}, {"sample_id": 3972, "db_id": "hospital_1", "score": 0, "gold_sql": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T3.cost > 5000", "pred_sql": "SELECT DISTINCT Physician.Name FROM Physician JOIN Trained_In ON Physician.EmployeeID = Trained_In.Physician JOIN Procedures ON Trained_In.Treatment = Procedures.Code WHERE Procedures.Cost > 5000", "source_tables": ["physician", "procedures", "trained_in"], "error_info": "Result not equal"}, {"sample_id": 3973, "db_id": "hospital_1", "score": 0, "gold_sql": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T3.cost > 5000", "pred_sql": "SELECT DISTINCT Physician.Name FROM Physician JOIN Trained_In ON Physician.EmployeeID = Trained_In.Physician JOIN Procedures ON Trained_In.Treatment = Procedures.Code WHERE Procedures.Cost > '5000'", "source_tables": ["physician", "procedures", "trained_in"], "error_info": "Result not equal"}, {"sample_id": 3974, "db_id": "hospital_1", "score": 0, "gold_sql": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment ORDER BY T3.cost DESC LIMIT 1", "pred_sql": "SELECT p.Name, p.EmployeeID FROM Physician AS p JOIN Trained_In AS t ON p.EmployeeID = t.Physician JOIN Procedures AS pr ON t.Treatment = pr.Code WHERE pr.Cost = (SELECT MAX(Cost) FROM Procedures)", "source_tables": ["physician", "procedures", "trained_in"], "error_info": "Result not equal"}, {"sample_id": 3975, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment ORDER BY T3.cost DESC LIMIT 1", "pred_sql": "SELECT p.Name FROM Physician AS p JOIN Trained_In AS t ON p.EmployeeID = t.Physician JOIN Procedures AS pr ON t.Treatment = pr.Code WHERE pr.Cost = (SELECT MAX(Cost) FROM Procedures)", "source_tables": ["physician", "procedures", "trained_in"], "error_info": ""}, {"sample_id": 3976, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT AVG(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = 'John Wen'", "pred_sql": "SELECT AVG(Procedures.Cost) AS AverageCost FROM Procedures JOIN Trained_In ON Procedures.Code = Trained_In.Treatment JOIN Physician ON Trained_In.Physician = Physician.EmployeeID WHERE Physician.Name = 'John Wen'", "source_tables": ["physician", "procedures", "trained_in"], "error_info": ""}, {"sample_id": 3977, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT AVG(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = 'John Wen'", "pred_sql": "SELECT AVG(Procedures.Cost) AS MeanPrice FROM Procedures JOIN Trained_In ON Procedures.Code = Trained_In.Treatment JOIN Physician ON Trained_In.Physician = Physician.EmployeeID WHERE Physician.Name = 'John Wen'", "source_tables": ["physician", "procedures", "trained_in"], "error_info": ""}, {"sample_id": 3978, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = 'John Wen'", "pred_sql": "SELECT Procedures.Name FROM Procedures JOIN Trained_In ON Procedures.Code = Trained_In.Treatment JOIN Physician ON Trained_In.Physician = Physician.EmployeeID WHERE Physician.Name = 'John Wen'", "source_tables": ["physician", "procedures", "trained_in"], "error_info": ""}, {"sample_id": 3979, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = 'John Wen'", "pred_sql": "SELECT Procedures.Name FROM Procedures JOIN Trained_In ON Procedures.Code = Trained_In.Treatment JOIN Physician ON Trained_In.Physician = Physician.EmployeeID WHERE Physician.Name = 'John Wen'", "source_tables": ["physician", "procedures", "trained_in"], "error_info": ""}, {"sample_id": 3980, "db_id": "hospital_1", "score": 0, "gold_sql": "SELECT name FROM procedures WHERE cost > 1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = 'John Wen'", "pred_sql": "SELECT DISTINCT Procedures.Name, Procedures.Cost FROM Procedures LEFT JOIN Trained_In ON Procedures.Code = Trained_In.Treatment LEFT JOIN Physician ON Trained_In.Physician = Physician.EmployeeID WHERE Procedures.Cost > 1000 OR Physician.Name = 'John Wen'", "source_tables": ["procedures", "physician", "trained_in"], "error_info": "Result not equal"}, {"sample_id": 3981, "db_id": "hospital_1", "score": 0, "gold_sql": "SELECT name FROM procedures WHERE cost > 1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = 'John Wen'", "pred_sql": "SELECT Procedures.Name, Procedures.Cost FROM Procedures WHERE Procedures.Cost > 1000 OR Procedures.Code IN (SELECT Trained_In.Treatment FROM Physician JOIN Trained_In ON Physician.EmployeeID = Trained_In.Physician WHERE Physician.Name = 'John Wen')", "source_tables": ["procedures", "physician", "trained_in"], "error_info": "Result not equal"}, {"sample_id": 3982, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT name FROM procedures WHERE cost > 1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = 'John Wen'", "pred_sql": "SELECT Procedures.Name FROM Procedures WHERE Procedures.Cost > 1000 AND NOT Procedures.Code IN (SELECT Trained_In.Treatment FROM Trained_In JOIN Physician ON Trained_In.Physician = Physician.EmployeeID WHERE Physician.Name = 'John Wen')", "source_tables": ["procedures", "physician", "trained_in"], "error_info": ""}, {"sample_id": 3983, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT name FROM procedures WHERE cost > 1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = 'John Wen'", "pred_sql": "SELECT Procedures.Name FROM Procedures WHERE Procedures.Cost > 1000 AND NOT Procedures.Code IN (SELECT Trained_In.Treatment FROM Trained_In JOIN Physician ON Trained_In.Physician = Physician.EmployeeID WHERE Physician.Name = 'John Wen')", "source_tables": ["procedures", "physician", "trained_in"], "error_info": ""}, {"sample_id": 3984, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT name FROM procedures WHERE cost < 5000 INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = 'John Wen'", "pred_sql": "SELECT Procedures.Name FROM Procedures JOIN Trained_In ON Procedures.Code = Trained_In.Treatment JOIN Physician ON Trained_In.Physician = Physician.EmployeeID WHERE Procedures.Cost < 5000 AND Physician.Name = 'John Wen'", "source_tables": ["procedures", "physician", "trained_in"], "error_info": ""}, {"sample_id": 3985, "db_id": "hospital_1", "score": 0, "gold_sql": "SELECT name FROM procedures WHERE cost < 5000 INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = 'John Wen'", "pred_sql": "SELECT Procedures.Name, Procedures.Cost FROM Procedures JOIN Trained_In ON Procedures.Code = Trained_In.Treatment JOIN Physician ON Trained_In.Physician = Physician.EmployeeID WHERE Procedures.Cost < 5000 AND Physician.Name = 'John Wen'", "source_tables": ["procedures", "physician", "trained_in"], "error_info": "Result not equal"}, {"sample_id": 3986, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T3.name = 'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T3.name = 'Psychiatry'", "pred_sql": "SELECT DISTINCT p.Name FROM Physician AS p JOIN Affiliated_With AS aw1 ON p.EmployeeID = aw1.Physician JOIN Department AS d1 ON aw1.Department = d1.DepartmentID JOIN Affiliated_With AS aw2 ON p.EmployeeID = aw2.Physician JOIN Department AS d2 ON aw2.Department = d2.DepartmentID WHERE d1.Name = 'Surgery' AND d2.Name = 'Psychiatry'", "source_tables": ["physician", "department", "affiliated_with"], "error_info": ""}, {"sample_id": 3987, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T3.name = 'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T3.name = 'Psychiatry'", "pred_sql": "SELECT Physician.Name FROM Physician JOIN Affiliated_With AS A1 ON Physician.EmployeeID = A1.Physician JOIN Department AS D1 ON A1.Department = D1.DepartmentID JOIN Affiliated_With AS A2 ON Physician.EmployeeID = A2.Physician JOIN Department AS D2 ON A2.Department = D2.DepartmentID WHERE D1.Name = 'Surgery' AND D2.Name = 'Psychiatry'", "source_tables": ["physician", "department", "affiliated_with"], "error_info": ""}, {"sample_id": 3988, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T3.name = 'Surgery' OR T3.name = 'Psychiatry'", "pred_sql": "SELECT Physician.Name FROM Physician JOIN Affiliated_With ON Physician.EmployeeID = Affiliated_With.Physician JOIN Department ON Affiliated_With.Department = Department.DepartmentID WHERE Department.Name IN ('Surgery', 'Psychiatry')", "source_tables": ["physician", "department", "affiliated_with"], "error_info": ""}, {"sample_id": 3989, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T3.name = 'Surgery' OR T3.name = 'Psychiatry'", "pred_sql": "SELECT Physician.Name FROM Physician JOIN Affiliated_With ON Physician.EmployeeID = Affiliated_With.Physician JOIN Department ON Affiliated_With.Department = Department.DepartmentID WHERE Department.Name IN ('Surgery', 'Psychiatry')", "source_tables": ["physician", "department", "affiliated_with"], "error_info": ""}, {"sample_id": 3990, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient = T1.SSN JOIN Medication AS T3 ON T2.Medication = T3.Code WHERE T3.name = 'Procrastin-X'", "pred_sql": "SELECT DISTINCT Patient.Name FROM Patient WHERE NOT Patient.SSN IN (SELECT Prescribes.Patient FROM Prescribes JOIN Medication ON Prescribes.Medication = Medication.Code WHERE Medication.Name = 'Procrastin-X')", "source_tables": ["patient", "prescribes", "medication"], "error_info": ""}, {"sample_id": 3991, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient = T1.SSN JOIN Medication AS T3 ON T2.Medication = T3.Code WHERE T3.name = 'Procrastin-X'", "pred_sql": "SELECT DISTINCT Patient.Name FROM Patient WHERE NOT Patient.SSN IN (SELECT Prescribes.Patient FROM Prescribes JOIN Medication ON Prescribes.Medication = Medication.Code WHERE Medication.Name = 'Procrastin-X')", "source_tables": ["patient", "prescribes", "medication"], "error_info": ""}, {"sample_id": 3992, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM patient WHERE NOT SSN IN (SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication = T2.Code WHERE T2.name = 'Procrastin-X')", "pred_sql": "SELECT COUNT(DISTINCT Patient.SSN) AS NumberOfPatients FROM Patient WHERE NOT Patient.SSN IN (SELECT Prescribes.Patient FROM Prescribes JOIN Medication ON Prescribes.Medication = Medication.Code WHERE Medication.Name = 'Procrastin-X')", "source_tables": ["patient", "prescribes", "medication"], "error_info": ""}, {"sample_id": 3993, "db_id": "hospital_1", "score": 0, "gold_sql": "SELECT COUNT(*) FROM patient WHERE NOT SSN IN (SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication = T2.Code WHERE T2.name = 'Procrastin-X')", "pred_sql": "SELECT COUNT(*) AS PatientCount FROM Patient WHERE NOT SSN IN (SELECT Patient FROM Prescribes WHERE Medication = 'Procrastin-X')", "source_tables": ["patient", "prescribes", "medication"], "error_info": "Result not equal"}, {"sample_id": 3994, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM appointment", "pred_sql": "SELECT COUNT(*) AS AppointmentCount FROM Appointment", "source_tables": ["appointment"], "error_info": ""}, {"sample_id": 3995, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM appointment", "pred_sql": "SELECT COUNT(*) AS TotalAppointments FROM Appointment", "source_tables": ["appointment"], "error_info": ""}, {"sample_id": 3996, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID = T2.nurse", "pred_sql": "SELECT Name FROM Nurse WHERE EmployeeID IN (SELECT Nurse FROM On_Call)", "source_tables": ["on_call", "nurse"], "error_info": ""}, {"sample_id": 3997, "db_id": "hospital_1", "score": 1, "gold_sql": "SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID = T2.nurse", "pred_sql": "SELECT DISTINCT Name FROM Nurse WHERE EmployeeID IN (SELECT Nurse FROM On_Call)", "source_tables": ["on_call", "nurse"], "error_info": ""}, {"sample_id": 3998, "db_id": "ship_mission", "score": 1, "gold_sql": "SELECT COUNT(*) FROM ship", "pred_sql": "SELECT COUNT(*) AS total_ships FROM ship", "source_tables": ["ship"], "error_info": ""}, {"sample_id": 3999, "db_id": "ship_mission", "score": 1, "gold_sql": "SELECT COUNT(*) FROM ship", "pred_sql": "SELECT COUNT(*) AS Number_of_Ships FROM ship", "source_tables": ["ship"], "error_info": ""}, {"sample_id": 4000, "db_id": "ship_mission", "score": 1, "gold_sql": "SELECT Name FROM ship ORDER BY Tonnage ASC", "pred_sql": "SELECT Name FROM ship ORDER BY Tonnage ASC", "source_tables": ["ship"], "error_info": ""}, {"sample_id": 4001, "db_id": "ship_mission", "score": 1, "gold_sql": "SELECT Name FROM ship ORDER BY Tonnage ASC", "pred_sql": "SELECT Name FROM ship ORDER BY Tonnage ASC", "source_tables": ["ship"], "error_info": ""}, {"sample_id": 4002, "db_id": "ship_mission", "score": 1, "gold_sql": "SELECT TYPE, Nationality FROM ship", "pred_sql": "SELECT Type, Nationality FROM ship", "source_tables": ["ship"], "error_info": ""}, {"sample_id": 4003, "db_id": "ship_mission", "score": 0, "gold_sql": "SELECT TYPE, Nationality FROM ship", "pred_sql": "SELECT DISTINCT Type, Nationality FROM ship", "source_tables": ["ship"], "error_info": "Result not equal"}, {"sample_id": 4004, "db_id": "ship_mission", "score": 1, "gold_sql": "SELECT Name FROM ship WHERE Nationality <> 'United States'", "pred_sql": "SELECT ship.Name FROM ship WHERE ship.Nationality <> 'United States'", "source_tables": ["ship"], "error_info": ""}, {"sample_id": 4005, "db_id": "ship_mission", "score": 1, "gold_sql": "SELECT Name FROM ship WHERE Nationality <> 'United States'", "pred_sql": "SELECT Name FROM ship WHERE Nationality <> 'United States'", "source_tables": ["ship"], "error_info": ""}, {"sample_id": 4006, "db_id": "ship_mission", "score": 1, "gold_sql": "SELECT Name FROM ship WHERE Nationality = 'United States' OR Nationality = 'United Kingdom'", "pred_sql": "SELECT Name FROM ship WHERE Nationality IN ('United States', 'United Kingdom')", "source_tables": ["ship"], "error_info": ""}, {"sample_id": 4007, "db_id": "ship_mission", "score": 0, "gold_sql": "SELECT Name FROM ship WHERE Nationality = 'United States' OR Nationality = 'United Kingdom'", "pred_sql": "SELECT Name FROM ship WHERE Nationality IN ('US', 'UK')", "source_tables": ["ship"], "error_info": "Result not equal"}, {"sample_id": 4008, "db_id": "ship_mission", "score": 1, "gold_sql": "SELECT Name FROM ship ORDER BY Tonnage DESC LIMIT 1", "pred_sql": "SELECT Name FROM ship WHERE Tonnage = (SELECT MAX(Tonnage) FROM ship)", "source_tables": ["ship"], "error_info": ""}, {"sample_id": 4009, "db_id": "ship_mission", "score": 1, "gold_sql": "SELECT Name FROM ship ORDER BY Tonnage DESC LIMIT 1", "pred_sql": "SELECT Name FROM ship WHERE Tonnage = (SELECT MAX(Tonnage) FROM ship)", "source_tables": ["ship"], "error_info": ""}, {"sample_id": 4010, "db_id": "ship_mission", "score": 1, "gold_sql": "SELECT TYPE, COUNT(*) FROM ship GROUP BY TYPE", "pred_sql": "SELECT Type, COUNT(*) AS Number_of_Ships FROM ship GROUP BY Type", "source_tables": ["ship"], "error_info": ""}, {"sample_id": 4011, "db_id": "ship_mission", "score": 1, "gold_sql": "SELECT TYPE, COUNT(*) FROM ship GROUP BY TYPE", "pred_sql": "SELECT Type, COUNT(*) AS Ship_Count FROM ship GROUP BY Type", "source_tables": ["ship"], "error_info": ""}, {"sample_id": 4012, "db_id": "ship_mission", "score": 0, "gold_sql": "SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Type, COUNT(*) AS Count FROM ship GROUP BY Type ORDER BY Count DESC LIMIT 1", "source_tables": ["ship"], "error_info": "Result not equal"}, {"sample_id": 4013, "db_id": "ship_mission", "score": 0, "gold_sql": "SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Type, COUNT(*) AS Count FROM ship GROUP BY Type ORDER BY Count DESC LIMIT 1", "source_tables": ["ship"], "error_info": "Result not equal"}, {"sample_id": 4014, "db_id": "ship_mission", "score": 1, "gold_sql": "SELECT Nationality FROM ship GROUP BY Nationality HAVING COUNT(*) > 2", "pred_sql": "SELECT Nationality FROM ship GROUP BY Nationality HAVING COUNT(Ship_ID) > 2", "source_tables": ["ship"], "error_info": ""}, {"sample_id": 4015, "db_id": "ship_mission", "score": 1, "gold_sql": "SELECT Nationality FROM ship GROUP BY Nationality HAVING COUNT(*) > 2", "pred_sql": "SELECT Nationality FROM ship GROUP BY Nationality HAVING COUNT(Ship_ID) > 2", "source_tables": ["ship"], "error_info": ""}, {"sample_id": 4016, "db_id": "ship_mission", "score": 1, "gold_sql": "SELECT TYPE, AVG(Tonnage) FROM ship GROUP BY TYPE", "pred_sql": "SELECT Type, AVG(Tonnage) AS Average_Tonnage FROM ship GROUP BY Type", "source_tables": ["ship"], "error_info": ""}, {"sample_id": 4017, "db_id": "ship_mission", "score": 1, "gold_sql": "SELECT TYPE, AVG(Tonnage) FROM ship GROUP BY TYPE", "pred_sql": "SELECT ship.Type, AVG(ship.Tonnage) AS Average_Tonnage FROM ship GROUP BY ship.Type", "source_tables": ["ship"], "error_info": ""}, {"sample_id": 4018, "db_id": "ship_mission", "score": 1, "gold_sql": "SELECT T1.Code, T1.Fate, T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID", "pred_sql": "SELECT mission.Code, mission.Fate, ship.Name FROM mission JOIN ship ON mission.Ship_ID = ship.Ship_ID", "source_tables": ["ship", "mission"], "error_info": ""}, {"sample_id": 4019, "db_id": "ship_mission", "score": 1, "gold_sql": "SELECT T1.Code, T1.Fate, T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID", "pred_sql": "SELECT mission.Code, mission.Fate, ship.Name FROM mission JOIN ship ON mission.Ship_ID = ship.Ship_ID", "source_tables": ["ship", "mission"], "error_info": ""}, {"sample_id": 4020, "db_id": "ship_mission", "score": 1, "gold_sql": "SELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T1.Launched_Year > 1928", "pred_sql": "SELECT ship.Name FROM ship JOIN mission ON ship.Ship_ID = mission.Ship_ID WHERE mission.Launched_Year > '1928'", "source_tables": ["ship", "mission"], "error_info": ""}, {"sample_id": 4021, "db_id": "ship_mission", "score": 1, "gold_sql": "SELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T1.Launched_Year > 1928", "pred_sql": "SELECT ship.Name FROM ship JOIN mission ON ship.Ship_ID = mission.Ship_ID WHERE mission.Launched_Year > '1928'", "source_tables": ["ship", "mission"], "error_info": ""}, {"sample_id": 4022, "db_id": "ship_mission", "score": 1, "gold_sql": "SELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T2.Nationality = 'United States'", "pred_sql": "SELECT DISTINCT m.Fate FROM mission AS m JOIN ship AS s ON m.Ship_ID = s.Ship_ID WHERE s.Nationality = 'United States'", "source_tables": ["ship", "mission"], "error_info": ""}, {"sample_id": 4023, "db_id": "ship_mission", "score": 1, "gold_sql": "SELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T2.Nationality = 'United States'", "pred_sql": "SELECT DISTINCT m.Fate FROM mission AS m JOIN ship AS s ON m.Ship_ID = s.Ship_ID WHERE s.Nationality = 'United States'", "source_tables": ["ship", "mission"], "error_info": ""}, {"sample_id": 4024, "db_id": "ship_mission", "score": 1, "gold_sql": "SELECT Name FROM ship WHERE NOT Ship_ID IN (SELECT Ship_ID FROM mission)", "pred_sql": "SELECT Name FROM ship WHERE NOT Ship_ID IN (SELECT Ship_ID FROM mission)", "source_tables": ["mission", "ship"], "error_info": ""}, {"sample_id": 4025, "db_id": "ship_mission", "score": 1, "gold_sql": "SELECT Name FROM ship WHERE NOT Ship_ID IN (SELECT Ship_ID FROM mission)", "pred_sql": "SELECT Name FROM ship WHERE NOT Ship_ID IN (SELECT Ship_ID FROM mission)", "source_tables": ["mission", "ship"], "error_info": ""}, {"sample_id": 4026, "db_id": "ship_mission", "score": 1, "gold_sql": "SELECT TYPE FROM ship WHERE Tonnage > 6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage < 4000", "pred_sql": "SELECT DISTINCT s1.Type FROM ship AS s1 JOIN ship AS s2 ON s1.Type = s2.Type WHERE s1.Tonnage > 6000 AND s2.Tonnage < 4000", "source_tables": ["ship"], "error_info": ""}, {"sample_id": 4027, "db_id": "ship_mission", "score": 0, "gold_sql": "SELECT TYPE FROM ship WHERE Tonnage > 6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage < 4000", "pred_sql": "SELECT DISTINCT s.Type FROM ship AS s JOIN mission AS m ON s.Ship_ID = m.Ship_ID WHERE s.Tonnage > 6000 AND s.Ship_ID IN (SELECT Ship_ID FROM ship WHERE Tonnage < 4000)", "source_tables": ["ship"], "error_info": "Result not equal"}, {"sample_id": 4028, "db_id": "student_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM list", "pred_sql": "SELECT COUNT(*) AS total_students FROM list", "source_tables": ["list"], "error_info": ""}, {"sample_id": 4029, "db_id": "student_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM list", "pred_sql": "SELECT COUNT(*) AS student_count FROM list", "source_tables": ["list"], "error_info": ""}, {"sample_id": 4030, "db_id": "student_1", "score": 1, "gold_sql": "SELECT lastname FROM list WHERE classroom = 111", "pred_sql": "SELECT LastName FROM list WHERE Classroom = '111'", "source_tables": ["list"], "error_info": ""}, {"sample_id": 4031, "db_id": "student_1", "score": 1, "gold_sql": "SELECT lastname FROM list WHERE classroom = 111", "pred_sql": "SELECT LastName FROM list WHERE Classroom = '111'", "source_tables": ["list"], "error_info": ""}, {"sample_id": 4032, "db_id": "student_1", "score": 1, "gold_sql": "SELECT firstname FROM list WHERE classroom = 108", "pred_sql": "SELECT FirstName FROM list WHERE Classroom = '108'", "source_tables": ["list"], "error_info": ""}, {"sample_id": 4033, "db_id": "student_1", "score": 1, "gold_sql": "SELECT firstname FROM list WHERE classroom = 108", "pred_sql": "SELECT FirstName FROM list WHERE Classroom = '108'", "source_tables": ["list"], "error_info": ""}, {"sample_id": 4034, "db_id": "student_1", "score": 1, "gold_sql": "SELECT DISTINCT firstname FROM list WHERE classroom = 107", "pred_sql": "SELECT FirstName FROM list WHERE Classroom = '107'", "source_tables": ["list"], "error_info": ""}, {"sample_id": 4035, "db_id": "student_1", "score": 1, "gold_sql": "SELECT DISTINCT firstname FROM list WHERE classroom = 107", "pred_sql": "SELECT FirstName FROM list WHERE Classroom = '107'", "source_tables": ["list"], "error_info": ""}, {"sample_id": 4036, "db_id": "student_1", "score": 1, "gold_sql": "SELECT DISTINCT classroom, grade FROM list", "pred_sql": "SELECT Classroom, Grade FROM list GROUP BY Classroom, Grade", "source_tables": ["list"], "error_info": ""}, {"sample_id": 4037, "db_id": "student_1", "score": 1, "gold_sql": "SELECT DISTINCT classroom, grade FROM list", "pred_sql": "SELECT DISTINCT Grade, Classroom FROM list", "source_tables": ["list"], "error_info": ""}, {"sample_id": 4038, "db_id": "student_1", "score": 0, "gold_sql": "SELECT DISTINCT grade FROM list WHERE classroom = 103", "pred_sql": "SELECT Grade FROM list WHERE Classroom = '103'", "source_tables": ["list"], "error_info": "Result not equal"}, {"sample_id": 4039, "db_id": "student_1", "score": 1, "gold_sql": "SELECT DISTINCT grade FROM list WHERE classroom = 103", "pred_sql": "SELECT DISTINCT Grade FROM list WHERE Classroom = '103'", "source_tables": ["list"], "error_info": ""}, {"sample_id": 4040, "db_id": "student_1", "score": 0, "gold_sql": "SELECT DISTINCT grade FROM list WHERE classroom = 105", "pred_sql": "SELECT Grade FROM list WHERE Classroom = '105'", "source_tables": ["list"], "error_info": "Result not equal"}, {"sample_id": 4041, "db_id": "student_1", "score": 0, "gold_sql": "SELECT DISTINCT grade FROM list WHERE classroom = 105", "pred_sql": "SELECT Grade FROM list WHERE Classroom = '105'", "source_tables": ["list"], "error_info": "Result not equal"}, {"sample_id": 4042, "db_id": "student_1", "score": 1, "gold_sql": "SELECT DISTINCT classroom FROM list WHERE grade = 4", "pred_sql": "SELECT DISTINCT Classroom FROM list WHERE Grade = '4'", "source_tables": ["list"], "error_info": ""}, {"sample_id": 4043, "db_id": "student_1", "score": 1, "gold_sql": "SELECT DISTINCT classroom FROM list WHERE grade = 4", "pred_sql": "SELECT DISTINCT Classroom FROM list WHERE Grade = '4'", "source_tables": ["list"], "error_info": ""}, {"sample_id": 4044, "db_id": "student_1", "score": 1, "gold_sql": "SELECT DISTINCT classroom FROM list WHERE grade = 5", "pred_sql": "SELECT DISTINCT Classroom FROM list WHERE Grade = '5'", "source_tables": ["list"], "error_info": ""}, {"sample_id": 4045, "db_id": "student_1", "score": 1, "gold_sql": "SELECT DISTINCT classroom FROM list WHERE grade = 5", "pred_sql": "SELECT DISTINCT Classroom FROM list WHERE Grade = '5'", "source_tables": ["list"], "error_info": ""}, {"sample_id": 4046, "db_id": "student_1", "score": 0, "gold_sql": "SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE grade = 5", "pred_sql": "SELECT teachers.LastName FROM teachers JOIN list ON teachers.Classroom = list.Classroom WHERE list.Grade = '5th'", "source_tables": ["teachers", "list"], "error_info": "Result not equal"}, {"sample_id": 4047, "db_id": "student_1", "score": 0, "gold_sql": "SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE grade = 5", "pred_sql": "SELECT teachers.LastName FROM teachers JOIN list ON teachers.Classroom = list.Classroom WHERE list.Grade = '5'", "source_tables": ["teachers", "list"], "error_info": "Result not equal"}, {"sample_id": 4048, "db_id": "student_1", "score": 0, "gold_sql": "SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE grade = 1", "pred_sql": "SELECT FirstName FROM teachers WHERE Classroom = 'first grade'", "source_tables": ["teachers", "list"], "error_info": "Result not equal"}, {"sample_id": 4049, "db_id": "student_1", "score": 0, "gold_sql": "SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE grade = 1", "pred_sql": "SELECT teachers.FirstName FROM teachers JOIN list ON teachers.Classroom = list.Classroom WHERE list.Grade = '1'", "source_tables": ["teachers", "list"], "error_info": "Result not equal"}, {"sample_id": 4050, "db_id": "student_1", "score": 1, "gold_sql": "SELECT firstname FROM teachers WHERE classroom = 110", "pred_sql": "SELECT FirstName FROM teachers WHERE Classroom = '110'", "source_tables": ["teachers"], "error_info": ""}, {"sample_id": 4051, "db_id": "student_1", "score": 1, "gold_sql": "SELECT firstname FROM teachers WHERE classroom = 110", "pred_sql": "SELECT FirstName FROM teachers WHERE Classroom = '110'", "source_tables": ["teachers"], "error_info": ""}, {"sample_id": 4052, "db_id": "student_1", "score": 1, "gold_sql": "SELECT lastname FROM teachers WHERE classroom = 109", "pred_sql": "SELECT LastName FROM teachers WHERE Classroom = '109'", "source_tables": ["teachers"], "error_info": ""}, {"sample_id": 4053, "db_id": "student_1", "score": 1, "gold_sql": "SELECT lastname FROM teachers WHERE classroom = 109", "pred_sql": "SELECT LastName FROM teachers WHERE Classroom = '109'", "source_tables": ["teachers"], "error_info": ""}, {"sample_id": 4054, "db_id": "student_1", "score": 1, "gold_sql": "SELECT DISTINCT firstname, lastname FROM teachers", "pred_sql": "SELECT FirstName, LastName FROM teachers", "source_tables": ["teachers"], "error_info": ""}, {"sample_id": 4055, "db_id": "student_1", "score": 1, "gold_sql": "SELECT DISTINCT firstname, lastname FROM teachers", "pred_sql": "SELECT FirstName, LastName FROM teachers", "source_tables": ["teachers"], "error_info": ""}, {"sample_id": 4056, "db_id": "student_1", "score": 1, "gold_sql": "SELECT DISTINCT firstname, lastname FROM list", "pred_sql": "SELECT FirstName, LastName FROM list", "source_tables": ["list"], "error_info": ""}, {"sample_id": 4057, "db_id": "student_1", "score": 1, "gold_sql": "SELECT DISTINCT firstname, lastname FROM list", "pred_sql": "SELECT FirstName, LastName FROM list", "source_tables": ["list"], "error_info": ""}, {"sample_id": 4058, "db_id": "student_1", "score": 1, "gold_sql": "SELECT T1.firstname, T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = 'OTHA' AND T2.lastname = 'MOYER'", "pred_sql": "SELECT list.FirstName, list.LastName FROM list JOIN teachers ON list.Classroom = teachers.Classroom WHERE teachers.FirstName = 'Otha' AND teachers.LastName = 'Moyer'", "source_tables": ["teachers", "list"], "error_info": ""}, {"sample_id": 4059, "db_id": "student_1", "score": 1, "gold_sql": "SELECT T1.firstname, T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = 'OTHA' AND T2.lastname = 'MOYER'", "pred_sql": "SELECT FirstName, LastName FROM list WHERE Classroom IN (SELECT Classroom FROM teachers WHERE FirstName = 'OTHA' AND LastName = 'MOYER')", "source_tables": ["teachers", "list"], "error_info": ""}, {"sample_id": 4060, "db_id": "student_1", "score": 1, "gold_sql": "SELECT T1.firstname, T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = 'MARROTTE' AND T2.lastname = 'KIRK'", "pred_sql": "SELECT list.FirstName, list.LastName FROM list JOIN teachers ON list.Classroom = teachers.Classroom WHERE teachers.FirstName = 'KIRK' AND teachers.LastName = 'MARROTTE'", "source_tables": ["teachers", "list"], "error_info": ""}, {"sample_id": 4061, "db_id": "student_1", "score": 1, "gold_sql": "SELECT T1.firstname, T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = 'MARROTTE' AND T2.lastname = 'KIRK'", "pred_sql": "SELECT list.FirstName, list.LastName FROM list JOIN teachers ON list.Classroom = teachers.Classroom WHERE teachers.LastName = 'MARROTTE' AND teachers.FirstName = 'KIRK'", "source_tables": ["teachers", "list"], "error_info": ""}, {"sample_id": 4062, "db_id": "student_1", "score": 1, "gold_sql": "SELECT T2.firstname, T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.firstname = 'EVELINA' AND T1.lastname = 'BROMLEY'", "pred_sql": "SELECT teachers.FirstName, teachers.LastName FROM teachers JOIN list ON teachers.Classroom = list.Classroom WHERE list.FirstName = 'EVELINA' AND list.LastName = 'BROMLEY'", "source_tables": ["teachers", "list"], "error_info": ""}, {"sample_id": 4063, "db_id": "student_1", "score": 1, "gold_sql": "SELECT T2.firstname, T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.firstname = 'EVELINA' AND T1.lastname = 'BROMLEY'", "pred_sql": "SELECT teachers.FirstName, teachers.LastName FROM teachers JOIN list ON teachers.Classroom = list.Classroom WHERE list.FirstName = 'EVELINA' AND list.LastName = 'BROMLEY'", "source_tables": ["teachers", "list"], "error_info": ""}, {"sample_id": 4064, "db_id": "student_1", "score": 1, "gold_sql": "SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.firstname = 'GELL' AND T1.lastname = 'TAMI'", "pred_sql": "SELECT teachers.LastName FROM teachers JOIN list ON teachers.Classroom = list.Classroom WHERE list.FirstName = 'TAMI' AND list.LastName = 'GELL'", "source_tables": ["teachers", "list"], "error_info": ""}, {"sample_id": 4065, "db_id": "student_1", "score": 1, "gold_sql": "SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.firstname = 'GELL' AND T1.lastname = 'TAMI'", "pred_sql": "SELECT teachers.LastName FROM teachers JOIN list ON teachers.Classroom = list.Classroom WHERE list.FirstName = 'TAMI' AND list.LastName = 'GELL'", "source_tables": ["teachers", "list"], "error_info": ""}, {"sample_id": 4066, "db_id": "student_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = 'LORIA' AND T2.lastname = 'ONDERSMA'", "pred_sql": "SELECT COUNT(s.FirstName) AS StudentCount FROM list AS s JOIN teachers AS t ON s.Classroom = t.Classroom WHERE t.FirstName = 'LORIA' AND t.LastName = 'ONDERSMA'", "source_tables": ["teachers", "list"], "error_info": ""}, {"sample_id": 4067, "db_id": "student_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = 'LORIA' AND T2.lastname = 'ONDERSMA'", "pred_sql": "SELECT COUNT(*) FROM list WHERE Classroom IN (SELECT Classroom FROM teachers WHERE LastName = 'ONDERSMA' AND FirstName = 'LORIA')", "source_tables": ["teachers", "list"], "error_info": ""}, {"sample_id": 4068, "db_id": "student_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = 'KAWA' AND T2.lastname = 'GORDON'", "pred_sql": "SELECT COUNT(*) FROM list WHERE Classroom IN (SELECT Classroom FROM teachers WHERE LastName = 'GORDON' AND FirstName = 'KAWA')", "source_tables": ["teachers", "list"], "error_info": ""}, {"sample_id": 4069, "db_id": "student_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = 'KAWA' AND T2.lastname = 'GORDON'", "pred_sql": "SELECT COUNT(*) AS NumberOfStudents FROM list WHERE Classroom IN (SELECT Classroom FROM teachers WHERE LastName = 'GORDON' AND FirstName = 'KAWA')", "source_tables": ["teachers", "list"], "error_info": ""}, {"sample_id": 4070, "db_id": "student_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = 'TARRING' AND T2.lastname = 'LEIA'", "pred_sql": "SELECT COUNT(*) AS NumberOfStudents FROM list WHERE Classroom IN (SELECT Classroom FROM teachers WHERE LastName = 'TARRING' AND FirstName = 'LEIA')", "source_tables": ["teachers", "list"], "error_info": ""}, {"sample_id": 4071, "db_id": "student_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = 'TARRING' AND T2.lastname = 'LEIA'", "pred_sql": "SELECT COUNT(*) AS student_count FROM list WHERE Classroom IN (SELECT Classroom FROM teachers WHERE LastName = 'TARRING' AND FirstName = 'LEIA')", "source_tables": ["teachers", "list"], "error_info": ""}, {"sample_id": 4072, "db_id": "student_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.firstname = 'CHRISSY' AND T1.lastname = 'NABOZNY'", "pred_sql": "SELECT COUNT(*) FROM teachers WHERE Classroom IN (SELECT Classroom FROM list WHERE FirstName = 'CHRISSY' AND LastName = 'NABOZNY')", "source_tables": ["teachers", "list"], "error_info": ""}, {"sample_id": 4073, "db_id": "student_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.firstname = 'CHRISSY' AND T1.lastname = 'NABOZNY'", "pred_sql": "SELECT COUNT(DISTINCT t.LastName || ', ' || t.FirstName) AS TeacherCount FROM teachers AS t JOIN list AS s ON t.Classroom = s.Classroom WHERE s.FirstName = 'CHRISSY' AND s.LastName = 'NABOZNY'", "source_tables": ["teachers", "list"], "error_info": ""}, {"sample_id": 4074, "db_id": "student_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.firstname = 'MADLOCK' AND T1.lastname = 'RAY'", "pred_sql": "SELECT COUNT(*) FROM teachers WHERE Classroom IN (SELECT Classroom FROM list WHERE LastName = 'MADLOCK' AND FirstName = 'RAY')", "source_tables": ["teachers", "list"], "error_info": ""}, {"sample_id": 4075, "db_id": "student_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.firstname = 'MADLOCK' AND T1.lastname = 'RAY'", "pred_sql": "SELECT COUNT(*) FROM teachers WHERE Classroom IN (SELECT Classroom FROM list WHERE LastName = 'MADLOCK' AND FirstName = 'RAY')", "source_tables": ["teachers", "list"], "error_info": ""}, {"sample_id": 4076, "db_id": "student_1", "score": 0, "gold_sql": "SELECT DISTINCT T1.firstname, T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.grade = 1 EXCEPT SELECT T1.firstname, T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = 'OTHA' AND T2.lastname = 'MOYER'", "pred_sql": "SELECT FirstName, LastName FROM list WHERE Grade = '1st' AND NOT Classroom IN (SELECT Classroom FROM teachers WHERE LastName = 'Moyer' AND FirstName = 'Otha')", "source_tables": ["teachers", "list"], "error_info": "Result not equal"}, {"sample_id": 4077, "db_id": "student_1", "score": 0, "gold_sql": "SELECT DISTINCT T1.firstname, T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.grade = 1 EXCEPT SELECT T1.firstname, T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = 'OTHA' AND T2.lastname = 'MOYER'", "pred_sql": "SELECT FirstName, LastName FROM list WHERE Grade = '1st' AND NOT Classroom IN (SELECT Classroom FROM teachers WHERE LastName = 'MOYER' AND FirstName = 'OTHA')", "source_tables": ["teachers", "list"], "error_info": "Result not equal"}, {"sample_id": 4078, "db_id": "student_1", "score": 0, "gold_sql": "SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.grade = 3 AND T2.firstname <> 'COVIN' AND T2.lastname <> 'JEROME'", "pred_sql": "SELECT LastName FROM list WHERE Grade = '3rd' AND NOT Classroom IN (SELECT Classroom FROM teachers WHERE LastName = 'COVIN' AND FirstName = 'JEROME')", "source_tables": ["teachers", "list"], "error_info": "Result not equal"}, {"sample_id": 4079, "db_id": "student_1", "score": 0, "gold_sql": "SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.grade = 3 AND T2.firstname <> 'COVIN' AND T2.lastname <> 'JEROME'", "pred_sql": "SELECT LastName FROM list WHERE Grade = '3rd' AND NOT Classroom IN (SELECT Classroom FROM teachers WHERE LastName = 'COVIN' AND FirstName = 'JEROME')", "source_tables": ["teachers", "list"], "error_info": "Result not equal"}, {"sample_id": 4080, "db_id": "student_1", "score": 1, "gold_sql": "SELECT grade, COUNT(DISTINCT classroom), COUNT(*) FROM list GROUP BY grade", "pred_sql": "SELECT Grade, COUNT(DISTINCT Classroom) AS NumberOfClassrooms, COUNT(LastName) AS TotalStudents FROM list GROUP BY Grade", "source_tables": ["list"], "error_info": ""}, {"sample_id": 4081, "db_id": "student_1", "score": 1, "gold_sql": "SELECT grade, COUNT(DISTINCT classroom), COUNT(*) FROM list GROUP BY grade", "pred_sql": "SELECT Grade, COUNT(DISTINCT Classroom) AS NumberOfClassrooms, COUNT(*) AS TotalStudents FROM list GROUP BY Grade", "source_tables": ["list"], "error_info": ""}, {"sample_id": 4082, "db_id": "student_1", "score": 1, "gold_sql": "SELECT classroom, COUNT(DISTINCT grade) FROM list GROUP BY classroom", "pred_sql": "SELECT Classroom, COUNT(DISTINCT Grade) AS NumberOfGrades FROM list GROUP BY Classroom", "source_tables": ["list"], "error_info": ""}, {"sample_id": 4083, "db_id": "student_1", "score": 1, "gold_sql": "SELECT classroom, COUNT(DISTINCT grade) FROM list GROUP BY classroom", "pred_sql": "SELECT Classroom, COUNT(DISTINCT Grade) AS DistinctGradeCount FROM list GROUP BY Classroom", "source_tables": ["list"], "error_info": ""}, {"sample_id": 4084, "db_id": "student_1", "score": 0, "gold_sql": "SELECT classroom FROM list GROUP BY classroom ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Classroom, COUNT(*) AS StudentCount FROM list GROUP BY Classroom ORDER BY StudentCount DESC LIMIT 1", "source_tables": ["list"], "error_info": "Result not equal"}, {"sample_id": 4085, "db_id": "student_1", "score": 0, "gold_sql": "SELECT classroom FROM list GROUP BY classroom ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Classroom, COUNT(*) AS StudentCount FROM list GROUP BY Classroom ORDER BY StudentCount DESC LIMIT 1", "source_tables": ["list"], "error_info": "Result not equal"}, {"sample_id": 4086, "db_id": "student_1", "score": 1, "gold_sql": "SELECT classroom, COUNT(*) FROM list GROUP BY classroom", "pred_sql": "SELECT Classroom, COUNT(*) AS NumberOfStudents FROM list GROUP BY Classroom", "source_tables": ["list"], "error_info": ""}, {"sample_id": 4087, "db_id": "student_1", "score": 1, "gold_sql": "SELECT classroom, COUNT(*) FROM list GROUP BY classroom", "pred_sql": "SELECT Classroom, COUNT(*) AS StudentCount FROM list GROUP BY Classroom", "source_tables": ["list"], "error_info": ""}, {"sample_id": 4088, "db_id": "student_1", "score": 0, "gold_sql": "SELECT classroom, COUNT(*) FROM list WHERE grade = '0' GROUP BY classroom", "pred_sql": "SELECT COUNT(*) AS TotalStudents FROM list WHERE Grade = '0' GROUP BY Classroom", "source_tables": ["list"], "error_info": "Result not equal"}, {"sample_id": 4089, "db_id": "student_1", "score": 1, "gold_sql": "SELECT classroom, COUNT(*) FROM list WHERE grade = '0' GROUP BY classroom", "pred_sql": "SELECT Classroom, COUNT(*) AS StudentCount FROM list WHERE Grade = '0' GROUP BY Classroom", "source_tables": ["list"], "error_info": ""}, {"sample_id": 4090, "db_id": "student_1", "score": 0, "gold_sql": "SELECT classroom, COUNT(*) FROM list WHERE grade = '4' GROUP BY classroom", "pred_sql": "SELECT Classroom, COUNT(*) AS TotalStudents FROM list WHERE Grade = '4th' GROUP BY Classroom", "source_tables": ["list"], "error_info": "Result not equal"}, {"sample_id": 4091, "db_id": "student_1", "score": 0, "gold_sql": "SELECT classroom, COUNT(*) FROM list WHERE grade = '4' GROUP BY classroom", "pred_sql": "SELECT Classroom, COUNT(*) AS TotalStudents FROM list WHERE Grade = '4th' GROUP BY Classroom", "source_tables": ["list"], "error_info": "Result not equal"}, {"sample_id": 4092, "db_id": "student_1", "score": 1, "gold_sql": "SELECT T2.firstname, T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom GROUP BY T2.firstname, T2.lastname ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT t.FirstName, t.LastName FROM teachers AS t JOIN list AS l ON t.Classroom = l.Classroom GROUP BY t.FirstName, t.LastName ORDER BY COUNT(l.LastName) DESC LIMIT 1", "source_tables": ["teachers", "list"], "error_info": ""}, {"sample_id": 4093, "db_id": "student_1", "score": 1, "gold_sql": "SELECT T2.firstname, T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom GROUP BY T2.firstname, T2.lastname ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT t.FirstName, t.LastName FROM teachers AS t JOIN list AS s ON t.Classroom = s.Classroom GROUP BY t.FirstName, t.LastName ORDER BY COUNT(s.LastName) DESC LIMIT 1", "source_tables": ["teachers", "list"], "error_info": ""}, {"sample_id": 4094, "db_id": "student_1", "score": 0, "gold_sql": "SELECT COUNT(*), classroom FROM list GROUP BY classroom", "pred_sql": "SELECT COUNT(*) AS NumberOfStudents FROM list WHERE Classroom = 'ClassroomName'", "source_tables": ["list"], "error_info": "Result not equal"}, {"sample_id": 4095, "db_id": "student_1", "score": 1, "gold_sql": "SELECT COUNT(*), classroom FROM list GROUP BY classroom", "pred_sql": "SELECT Classroom, COUNT(*) AS StudentCount FROM list GROUP BY Classroom", "source_tables": ["list"], "error_info": ""}, {"sample_id": 4096, "db_id": "company_employee", "score": 0, "gold_sql": "SELECT COUNT(*) FROM company WHERE Headquarters = 'USA'", "pred_sql": "SELECT COUNT(*) FROM company WHERE Headquarters = 'US'", "source_tables": ["company"], "error_info": "Result not equal"}, {"sample_id": 4097, "db_id": "company_employee", "score": 1, "gold_sql": "SELECT Name FROM company ORDER BY Sales_in_Billion ASC", "pred_sql": "SELECT Name FROM company ORDER BY Sales_in_Billion ASC", "source_tables": ["company"], "error_info": ""}, {"sample_id": 4098, "db_id": "company_employee", "score": 1, "gold_sql": "SELECT Headquarters, Industry FROM company", "pred_sql": "SELECT Headquarters, Industry FROM company", "source_tables": ["company"], "error_info": ""}, {"sample_id": 4099, "db_id": "company_employee", "score": 0, "gold_sql": "SELECT Name FROM company WHERE Industry = 'Banking' OR Industry = 'Retailing'", "pred_sql": "SELECT Name FROM company WHERE Industry IN ('banking', 'retailing')", "source_tables": ["company"], "error_info": "Result not equal"}, {"sample_id": 4100, "db_id": "company_employee", "score": 1, "gold_sql": "SELECT MAX(Market_Value_in_Billion), MIN(Market_Value_in_Billion) FROM company", "pred_sql": "SELECT MAX(Market_Value_in_Billion) AS Max_Market_Value, MIN(Market_Value_in_Billion) AS Min_Market_Value FROM company", "source_tables": ["company"], "error_info": ""}, {"sample_id": 4101, "db_id": "company_employee", "score": 1, "gold_sql": "SELECT Headquarters FROM company ORDER BY Sales_in_Billion DESC LIMIT 1", "pred_sql": "SELECT Headquarters FROM company WHERE Sales_in_Billion = (SELECT MAX(Sales_in_Billion) FROM company)", "source_tables": ["company"], "error_info": ""}, {"sample_id": 4102, "db_id": "company_employee", "score": 1, "gold_sql": "SELECT Headquarters, COUNT(*) FROM company GROUP BY Headquarters", "pred_sql": "SELECT Headquarters, COUNT(Company_ID) AS Number_of_Companies FROM company GROUP BY Headquarters", "source_tables": ["company"], "error_info": ""}, {"sample_id": 4103, "db_id": "company_employee", "score": 0, "gold_sql": "SELECT Headquarters FROM company GROUP BY Headquarters ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Headquarters, COUNT(*) AS Count FROM company GROUP BY Headquarters ORDER BY Count DESC LIMIT 1", "source_tables": ["company"], "error_info": "Result not equal"}, {"sample_id": 4104, "db_id": "company_employee", "score": 1, "gold_sql": "SELECT Headquarters FROM company GROUP BY Headquarters HAVING COUNT(*) >= 2", "pred_sql": "SELECT Headquarters FROM company GROUP BY Headquarters HAVING COUNT(Company_ID) >= 2", "source_tables": ["company"], "error_info": ""}, {"sample_id": 4105, "db_id": "company_employee", "score": 0, "gold_sql": "SELECT Headquarters FROM company WHERE Industry = 'Banking' INTERSECT SELECT Headquarters FROM company WHERE Industry = 'Oil and gas'", "pred_sql": "SELECT DISTINCT c.Headquarters FROM company AS c WHERE c.Industry IN ('banking', 'oil and gas') GROUP BY c.Headquarters HAVING COUNT(DISTINCT c.Industry) = 2", "source_tables": ["company"], "error_info": "Result not equal"}, {"sample_id": 4106, "db_id": "company_employee", "score": 1, "gold_sql": "SELECT T3.Name, T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID JOIN company AS T3 ON T1.Company_ID = T3.Company_ID", "pred_sql": "SELECT company.Name AS Company_Name, people.Name AS Employee_Name FROM company JOIN employment ON company.Company_ID = employment.Company_ID JOIN people ON employment.People_ID = people.People_ID", "source_tables": ["employment", "company", "people"], "error_info": ""}, {"sample_id": 4107, "db_id": "company_employee", "score": 0, "gold_sql": "SELECT T3.Name, T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID JOIN company AS T3 ON T1.Company_ID = T3.Company_ID ORDER BY T1.Year_working", "pred_sql": "SELECT company.Name AS Company_Name, people.Name AS Employee_Name, employment.Year_working FROM employment JOIN people ON employment.People_ID = people.People_ID JOIN company ON employment.Company_ID = company.Company_ID ORDER BY employment.Year_working DESC", "source_tables": ["employment", "company", "people"], "error_info": "Result not equal"}, {"sample_id": 4108, "db_id": "company_employee", "score": 1, "gold_sql": "SELECT T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID JOIN company AS T3 ON T1.Company_ID = T3.Company_ID WHERE T3.Sales_in_Billion > 200", "pred_sql": "SELECT p.Name FROM people AS p JOIN employment AS e ON p.People_ID = e.People_ID JOIN company AS c ON e.Company_ID = c.Company_ID WHERE c.Sales_in_Billion > 200", "source_tables": ["employment", "company", "people"], "error_info": ""}, {"sample_id": 4109, "db_id": "company_employee", "score": 0, "gold_sql": "SELECT T3.Name, COUNT(*) FROM employment AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID JOIN company AS T3 ON T1.Company_ID = T3.Company_ID GROUP BY T3.Name", "pred_sql": "SELECT company.Name, COUNT(employment.People_ID) AS Number_of_Employees FROM company LEFT JOIN employment ON company.Company_ID = employment.Company_ID GROUP BY company.Name", "source_tables": ["employment", "company", "people"], "error_info": "Result not equal"}, {"sample_id": 4110, "db_id": "company_employee", "score": 1, "gold_sql": "SELECT Name FROM people WHERE NOT People_ID IN (SELECT People_ID FROM employment)", "pred_sql": "SELECT Name FROM people WHERE NOT People_ID IN (SELECT People_ID FROM employment)", "source_tables": ["employment", "people"], "error_info": ""}, {"sample_id": 4111, "db_id": "company_employee", "score": 0, "gold_sql": "SELECT name FROM company WHERE Sales_in_Billion > 200 ORDER BY Sales_in_Billion, Profits_in_Billion DESC", "pred_sql": "SELECT Name FROM company WHERE Sales_in_Billion > 200 ORDER BY Sales_in_Billion DESC, Profits_in_Billion DESC", "source_tables": ["company"], "error_info": "Result not equal"}, {"sample_id": 4112, "db_id": "film_rank", "score": 1, "gold_sql": "SELECT COUNT(*) FROM film", "pred_sql": "SELECT COUNT(*) AS total_films FROM film", "source_tables": ["film"], "error_info": ""}, {"sample_id": 4113, "db_id": "film_rank", "score": 1, "gold_sql": "SELECT COUNT(*) FROM film", "pred_sql": "SELECT COUNT(*) AS Number_of_Films FROM film", "source_tables": ["film"], "error_info": ""}, {"sample_id": 4114, "db_id": "film_rank", "score": 1, "gold_sql": "SELECT DISTINCT Director FROM film", "pred_sql": "SELECT DISTINCT Director FROM film", "source_tables": ["film"], "error_info": ""}, {"sample_id": 4115, "db_id": "film_rank", "score": 1, "gold_sql": "SELECT DISTINCT Director FROM film", "pred_sql": "SELECT DISTINCT Director FROM film", "source_tables": ["film"], "error_info": ""}, {"sample_id": 4116, "db_id": "film_rank", "score": 1, "gold_sql": "SELECT AVG(Gross_in_dollar) FROM film", "pred_sql": "SELECT AVG(Gross_in_dollar) AS Average_Ticket_Sales FROM film", "source_tables": ["film"], "error_info": ""}, {"sample_id": 4117, "db_id": "film_rank", "score": 1, "gold_sql": "SELECT AVG(Gross_in_dollar) FROM film", "pred_sql": "SELECT AVG(Gross_in_dollar) AS Average_Gross_Sales FROM film", "source_tables": ["film"], "error_info": ""}, {"sample_id": 4118, "db_id": "film_rank", "score": 1, "gold_sql": "SELECT Low_Estimate, High_Estimate FROM film_market_estimation", "pred_sql": "SELECT Low_Estimate, High_Estimate FROM film_market_estimation", "source_tables": ["film_market_estimation"], "error_info": ""}, {"sample_id": 4119, "db_id": "film_rank", "score": 1, "gold_sql": "SELECT Low_Estimate, High_Estimate FROM film_market_estimation", "pred_sql": "SELECT Low_Estimate, High_Estimate FROM film_market_estimation", "source_tables": ["film_market_estimation"], "error_info": ""}, {"sample_id": 4120, "db_id": "film_rank", "score": 1, "gold_sql": "SELECT TYPE FROM film_market_estimation WHERE YEAR = 1995", "pred_sql": "SELECT DISTINCT Type FROM film_market_estimation WHERE Year = '1995'", "source_tables": ["film_market_estimation"], "error_info": ""}, {"sample_id": 4121, "db_id": "film_rank", "score": 1, "gold_sql": "SELECT TYPE FROM film_market_estimation WHERE YEAR = 1995", "pred_sql": "SELECT DISTINCT Type FROM film_market_estimation WHERE Year = '1995'", "source_tables": ["film_market_estimation"], "error_info": ""}, {"sample_id": 4122, "db_id": "film_rank", "score": 1, "gold_sql": "SELECT MAX(Number_cities), MIN(Number_cities) FROM market", "pred_sql": "SELECT MAX(Number_cities) AS Max_Cities, MIN(Number_cities) AS Min_Cities FROM market", "source_tables": ["market"], "error_info": ""}, {"sample_id": 4123, "db_id": "film_rank", "score": 1, "gold_sql": "SELECT MAX(Number_cities), MIN(Number_cities) FROM market", "pred_sql": "SELECT MAX(Number_cities) AS Max_Cities, MIN(Number_cities) AS Min_Cities FROM market", "source_tables": ["market"], "error_info": ""}, {"sample_id": 4124, "db_id": "film_rank", "score": 1, "gold_sql": "SELECT COUNT(*) FROM market WHERE Number_cities < 300", "pred_sql": "SELECT COUNT(*) AS Number_of_Markets FROM market WHERE Number_cities < 300", "source_tables": ["market"], "error_info": ""}, {"sample_id": 4125, "db_id": "film_rank", "score": 1, "gold_sql": "SELECT COUNT(*) FROM market WHERE Number_cities < 300", "pred_sql": "SELECT COUNT(*) AS Number_of_Markets FROM market WHERE Number_cities < 300", "source_tables": ["market"], "error_info": ""}, {"sample_id": 4126, "db_id": "film_rank", "score": 1, "gold_sql": "SELECT Country FROM market ORDER BY Country ASC", "pred_sql": "SELECT DISTINCT Country FROM market ORDER BY Country ASC", "source_tables": ["market"], "error_info": ""}, {"sample_id": 4127, "db_id": "film_rank", "score": 1, "gold_sql": "SELECT Country FROM market ORDER BY Country ASC", "pred_sql": "SELECT DISTINCT Country FROM market ORDER BY Country ASC", "source_tables": ["market"], "error_info": ""}, {"sample_id": 4128, "db_id": "film_rank", "score": 1, "gold_sql": "SELECT Country FROM market ORDER BY Number_cities DESC", "pred_sql": "SELECT Country FROM market ORDER BY Number_cities DESC", "source_tables": ["market"], "error_info": ""}, {"sample_id": 4129, "db_id": "film_rank", "score": 1, "gold_sql": "SELECT Country FROM market ORDER BY Number_cities DESC", "pred_sql": "SELECT Country FROM market ORDER BY Number_cities DESC", "source_tables": ["market"], "error_info": ""}, {"sample_id": 4130, "db_id": "film_rank", "score": 1, "gold_sql": "SELECT T1.Title, T2.Type FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID", "pred_sql": "SELECT film.Title, film_market_estimation.Type FROM film JOIN film_market_estimation ON film.Film_ID = film_market_estimation.Film_ID", "source_tables": ["film", "film_market_estimation"], "error_info": ""}, {"sample_id": 4131, "db_id": "film_rank", "score": 1, "gold_sql": "SELECT T1.Title, T2.Type FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID", "pred_sql": "SELECT film.Title, film_market_estimation.Type FROM film JOIN film_market_estimation ON film.Film_ID = film_market_estimation.Film_ID", "source_tables": ["film", "film_market_estimation"], "error_info": ""}, {"sample_id": 4132, "db_id": "film_rank", "score": 1, "gold_sql": "SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID WHERE T2.Year = 1995", "pred_sql": "SELECT DISTINCT f.Director FROM film AS f JOIN film_market_estimation AS fme ON f.Film_ID = fme.Film_ID WHERE fme.Year = '1995'", "source_tables": ["film", "film_market_estimation"], "error_info": ""}, {"sample_id": 4133, "db_id": "film_rank", "score": 1, "gold_sql": "SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID WHERE T2.Year = 1995", "pred_sql": "SELECT DISTINCT f.Director FROM film AS f JOIN film_market_estimation AS fe ON f.Film_ID = fe.Film_ID WHERE fe.Year = '1995'", "source_tables": ["film", "film_market_estimation"], "error_info": ""}, {"sample_id": 4134, "db_id": "film_rank", "score": 1, "gold_sql": "SELECT AVG(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID WHERE T1.Low_Estimate > 10000", "pred_sql": "SELECT AVG(Number_cities) AS Average_Cities FROM market JOIN film_market_estimation ON market.Market_ID = film_market_estimation.Market_ID WHERE film_market_estimation.Low_Estimate > '10000'", "source_tables": ["market", "film_market_estimation"], "error_info": ""}, {"sample_id": 4135, "db_id": "film_rank", "score": 1, "gold_sql": "SELECT AVG(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID WHERE T1.Low_Estimate > 10000", "pred_sql": "SELECT AVG(Number_cities) AS Average_Cities FROM market JOIN film_market_estimation ON market.Market_ID = film_market_estimation.Market_ID WHERE film_market_estimation.Low_Estimate > '10000'", "source_tables": ["market", "film_market_estimation"], "error_info": ""}, {"sample_id": 4136, "db_id": "film_rank", "score": 1, "gold_sql": "SELECT T2.Country, T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID", "pred_sql": "SELECT DISTINCT market.Country, film_market_estimation.Year FROM film_market_estimation JOIN market ON film_market_estimation.Market_ID = market.Market_ID", "source_tables": ["market", "film_market_estimation"], "error_info": ""}, {"sample_id": 4137, "db_id": "film_rank", "score": 1, "gold_sql": "SELECT T2.Country, T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID", "pred_sql": "SELECT DISTINCT market.Country, film_market_estimation.Year FROM market JOIN film_market_estimation ON market.Market_ID = film_market_estimation.Market_ID", "source_tables": ["market", "film_market_estimation"], "error_info": ""}, {"sample_id": 4138, "db_id": "film_rank", "score": 1, "gold_sql": "SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID WHERE T2.Country = 'Japan' ORDER BY T1.Year DESC", "pred_sql": "SELECT DISTINCT fme.Year FROM film_market_estimation AS fme JOIN market AS m ON fme.Market_ID = m.Market_ID WHERE m.Country = 'Japan' ORDER BY fme.Year DESC", "source_tables": ["market", "film_market_estimation"], "error_info": ""}, {"sample_id": 4139, "db_id": "film_rank", "score": 1, "gold_sql": "SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID WHERE T2.Country = 'Japan' ORDER BY T1.Year DESC", "pred_sql": "SELECT DISTINCT Year FROM film_market_estimation JOIN market ON film_market_estimation.Market_ID = market.Market_ID WHERE market.Country = 'Japan' ORDER BY Year DESC", "source_tables": ["market", "film_market_estimation"], "error_info": ""}, {"sample_id": 4140, "db_id": "film_rank", "score": 1, "gold_sql": "SELECT Studio, COUNT(*) FROM film GROUP BY Studio", "pred_sql": "SELECT Studio, COUNT(*) AS Number_of_Films FROM film GROUP BY Studio", "source_tables": ["film"], "error_info": ""}, {"sample_id": 4141, "db_id": "film_rank", "score": 1, "gold_sql": "SELECT Studio, COUNT(*) FROM film GROUP BY Studio", "pred_sql": "SELECT Studio, COUNT(*) AS Number_of_Films FROM film GROUP BY Studio", "source_tables": ["film"], "error_info": ""}, {"sample_id": 4142, "db_id": "film_rank", "score": 1, "gold_sql": "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(Film_ID) DESC LIMIT 1", "source_tables": ["film"], "error_info": ""}, {"sample_id": 4143, "db_id": "film_rank", "score": 1, "gold_sql": "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(Film_ID) DESC LIMIT 1", "source_tables": ["film"], "error_info": ""}, {"sample_id": 4144, "db_id": "film_rank", "score": 1, "gold_sql": "SELECT Studio FROM film GROUP BY Studio HAVING COUNT(*) >= 2", "pred_sql": "SELECT Studio FROM film GROUP BY Studio HAVING COUNT(Film_ID) >= 2", "source_tables": ["film"], "error_info": ""}, {"sample_id": 4145, "db_id": "film_rank", "score": 1, "gold_sql": "SELECT Studio FROM film GROUP BY Studio HAVING COUNT(*) >= 2", "pred_sql": "SELECT Studio FROM film GROUP BY Studio HAVING COUNT(Film_ID) >= 2", "source_tables": ["film"], "error_info": ""}, {"sample_id": 4146, "db_id": "film_rank", "score": 1, "gold_sql": "SELECT Title FROM film WHERE NOT Film_ID IN (SELECT Film_ID FROM film_market_estimation)", "pred_sql": "SELECT Title FROM film WHERE NOT Film_ID IN (SELECT Film_ID FROM film_market_estimation)", "source_tables": ["film", "film_market_estimation"], "error_info": ""}, {"sample_id": 4147, "db_id": "film_rank", "score": 1, "gold_sql": "SELECT Title FROM film WHERE NOT Film_ID IN (SELECT Film_ID FROM film_market_estimation)", "pred_sql": "SELECT Title FROM film WHERE NOT Film_ID IN (SELECT Film_ID FROM film_market_estimation)", "source_tables": ["film", "film_market_estimation"], "error_info": ""}, {"sample_id": 4148, "db_id": "film_rank", "score": 1, "gold_sql": "SELECT Studio FROM film WHERE Director = 'Nicholas Meyer' INTERSECT SELECT Studio FROM film WHERE Director = 'Walter Hill'", "pred_sql": "SELECT DISTINCT Studio FROM film WHERE Director IN ('Nicholas Meyer', 'Walter Hill')", "source_tables": ["film"], "error_info": ""}, {"sample_id": 4149, "db_id": "film_rank", "score": 1, "gold_sql": "SELECT Studio FROM film WHERE Director = 'Nicholas Meyer' INTERSECT SELECT Studio FROM film WHERE Director = 'Walter Hill'", "pred_sql": "SELECT DISTINCT f.Studio FROM film AS f WHERE f.Director IN ('Nicholas Meyer', 'Walter Hill') GROUP BY f.Studio HAVING COUNT(DISTINCT f.Director) = 2", "source_tables": ["film"], "error_info": ""}, {"sample_id": 4150, "db_id": "film_rank", "score": 1, "gold_sql": "SELECT title, Studio FROM film WHERE Studio LIKE '%Universal%'", "pred_sql": "SELECT Title, Studio FROM film WHERE Studio LIKE '%Universal%'", "source_tables": ["film"], "error_info": ""}, {"sample_id": 4151, "db_id": "film_rank", "score": 1, "gold_sql": "SELECT title, Studio FROM film WHERE Studio LIKE '%Universal%'", "pred_sql": "SELECT Title, Studio FROM film WHERE Studio LIKE '%Universal%'", "source_tables": ["film"], "error_info": ""}, {"sample_id": 4152, "db_id": "film_rank", "score": 1, "gold_sql": "SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director = 'Walter Hill'", "pred_sql": "SELECT DISTINCT Studio FROM film WHERE NOT Studio IN (SELECT DISTINCT Studio FROM film WHERE Director = 'Walter Hill')", "source_tables": ["film"], "error_info": ""}, {"sample_id": 4153, "db_id": "film_rank", "score": 0, "gold_sql": "SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director = 'Walter Hill'", "pred_sql": "SELECT DISTINCT Studio FROM film WHERE NOT Film_ID IN (SELECT Film_ID FROM film WHERE Director = 'Walter Hill')", "source_tables": ["film"], "error_info": "Result not equal"}, {"sample_id": 4154, "db_id": "film_rank", "score": 1, "gold_sql": "SELECT Studio FROM film GROUP BY Studio HAVING AVG(Gross_in_dollar) >= 4500000", "pred_sql": "SELECT Studio FROM film GROUP BY Studio HAVING AVG(Gross_in_dollar) > 4500000", "source_tables": ["film"], "error_info": ""}, {"sample_id": 4155, "db_id": "film_rank", "score": 1, "gold_sql": "SELECT Studio FROM film GROUP BY Studio HAVING AVG(Gross_in_dollar) >= 4500000", "pred_sql": "SELECT Studio FROM film GROUP BY Studio HAVING AVG(Gross_in_dollar) > 4500000", "source_tables": ["film"], "error_info": ""}, {"sample_id": 4156, "db_id": "film_rank", "score": 0, "gold_sql": "SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID ORDER BY high_estimate DESC LIMIT 1", "pred_sql": "SELECT f.Title FROM film AS f JOIN film_market_estimation AS e ON f.Film_ID = e.Film_ID WHERE e.High_Estimate = (SELECT MAX(High_Estimate) FROM film_market_estimation)", "source_tables": ["film", "film_market_estimation"], "error_info": "Result not equal"}, {"sample_id": 4157, "db_id": "film_rank", "score": 1, "gold_sql": "SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID ORDER BY high_estimate DESC LIMIT 1", "pred_sql": "SELECT f.Title FROM film AS f JOIN film_market_estimation AS e ON f.Film_ID = e.Film_ID ORDER BY e.High_Estimate DESC LIMIT 1", "source_tables": ["film", "film_market_estimation"], "error_info": ""}, {"sample_id": 4158, "db_id": "film_rank", "score": 1, "gold_sql": "SELECT title, director FROM film WHERE NOT film_id IN (SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id = T2.Market_ID WHERE country = 'China')", "pred_sql": "SELECT Title, Director FROM film WHERE NOT Film_ID IN (SELECT Film_ID FROM film_market_estimation WHERE Market_ID IN (SELECT Market_ID FROM market WHERE Country = 'China'))", "source_tables": ["market", "film", "film_market_estimation"], "error_info": ""}, {"sample_id": 4159, "db_id": "film_rank", "score": 1, "gold_sql": "SELECT title, director FROM film WHERE NOT film_id IN (SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id = T2.Market_ID WHERE country = 'China')", "pred_sql": "SELECT Title, Director FROM film WHERE NOT Film_ID IN (SELECT Film_ID FROM film_market_estimation WHERE Market_ID IN (SELECT Market_ID FROM market WHERE Country = 'China'))", "source_tables": ["market", "film", "film_market_estimation"], "error_info": ""}, {"sample_id": 4160, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Ref_calendar", "pred_sql": "SELECT COUNT(*) AS total_calendar_items FROM Ref_Calendar", "source_tables": ["ref_calendar"], "error_info": ""}, {"sample_id": 4161, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Ref_calendar", "pred_sql": "SELECT COUNT(*) AS total_calendar_items FROM Ref_Calendar", "source_tables": ["ref_calendar"], "error_info": ""}, {"sample_id": 4162, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT calendar_date, day_Number FROM Ref_calendar", "pred_sql": "SELECT Calendar_Date, Day_Number FROM Ref_Calendar", "source_tables": ["ref_calendar"], "error_info": ""}, {"sample_id": 4163, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT calendar_date, day_Number FROM Ref_calendar", "pred_sql": "SELECT Calendar_Date, Day_Number FROM Ref_Calendar", "source_tables": ["ref_calendar"], "error_info": ""}, {"sample_id": 4164, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Ref_document_types", "pred_sql": "SELECT COUNT(*) AS Number_of_Document_Types FROM Ref_Document_Types", "source_tables": ["ref_document_types"], "error_info": ""}, {"sample_id": 4165, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Ref_document_types", "pred_sql": "SELECT COUNT(*) AS NumberOfDocumentTypes FROM Ref_Document_Types", "source_tables": ["ref_document_types"], "error_info": ""}, {"sample_id": 4166, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT document_type_code, document_type_name FROM Ref_document_types", "pred_sql": "SELECT Document_Type_Code, Document_Type_Name FROM Ref_Document_Types", "source_tables": ["ref_document_types"], "error_info": ""}, {"sample_id": 4167, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT document_type_code, document_type_name FROM Ref_document_types", "pred_sql": "SELECT Document_Type_Code, Document_Type_Name FROM Ref_Document_Types", "source_tables": ["ref_document_types"], "error_info": ""}, {"sample_id": 4168, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT document_type_name, document_type_description FROM Ref_document_types WHERE document_type_code = 'RV'", "pred_sql": "SELECT Document_Type_Name, Document_Type_Description FROM Ref_Document_Types WHERE Document_Type_Code = 'RV'", "source_tables": ["ref_document_types"], "error_info": ""}, {"sample_id": 4169, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT document_type_name, document_type_description FROM Ref_document_types WHERE document_type_code = 'RV'", "pred_sql": "SELECT Document_Type_Name, Document_Type_Description FROM Ref_Document_Types WHERE Document_Type_Code = 'RV'", "source_tables": ["ref_document_types"], "error_info": ""}, {"sample_id": 4170, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT document_type_code FROM Ref_document_types WHERE document_type_name = 'Paper'", "pred_sql": "SELECT Document_Type_Code FROM Ref_Document_Types WHERE Document_Type_Name = 'Paper'", "source_tables": ["ref_document_types"], "error_info": ""}, {"sample_id": 4171, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT document_type_code FROM Ref_document_types WHERE document_type_name = 'Paper'", "pred_sql": "SELECT Document_Type_Code FROM Ref_Document_Types WHERE Document_Type_Name = 'Paper'", "source_tables": ["ref_document_types"], "error_info": ""}, {"sample_id": 4172, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT COUNT(*) FROM All_documents WHERE document_type_code = 'CV' OR document_type_code = 'BK'", "pred_sql": "SELECT COUNT(*) AS Document_Count FROM All_Documents WHERE Document_Type_Code IN ('CV', 'BK')", "source_tables": ["all_documents"], "error_info": ""}, {"sample_id": 4173, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT COUNT(*) FROM All_documents WHERE document_type_code = 'CV' OR document_type_code = 'BK'", "pred_sql": "SELECT COUNT(*) AS Document_Count FROM All_Documents WHERE Document_Type_Code IN ('CV', 'BK')", "source_tables": ["all_documents"], "error_info": ""}, {"sample_id": 4174, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT date_stored FROM All_documents WHERE Document_name = 'Marry CV'", "pred_sql": "SELECT Date_Stored FROM All_Documents WHERE Document_Name = 'Marry CV'", "source_tables": ["all_documents"], "error_info": ""}, {"sample_id": 4175, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT date_stored FROM All_documents WHERE Document_name = 'Marry CV'", "pred_sql": "SELECT Date_Stored FROM All_Documents WHERE Document_Name = 'Marry CV'", "source_tables": ["all_documents"], "error_info": ""}, {"sample_id": 4176, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT T2.day_Number, T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored = T2.calendar_date", "pred_sql": "SELECT Ref_Calendar.Day_Number, Ref_Calendar.Calendar_Date FROM All_Documents JOIN Ref_Calendar ON All_Documents.Date_Stored = Ref_Calendar.Calendar_Date", "source_tables": ["ref_calendar", "all_documents"], "error_info": ""}, {"sample_id": 4177, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT T2.day_Number, T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored = T2.calendar_date", "pred_sql": "SELECT Ref_Calendar.Day_Number, All_Documents.Date_Stored FROM All_Documents JOIN Ref_Calendar ON All_Documents.Date_Stored = Ref_Calendar.Calendar_Date", "source_tables": ["ref_calendar", "all_documents"], "error_info": ""}, {"sample_id": 4178, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code = T2.document_type_code WHERE T1.document_name = 'How to read a book'", "pred_sql": "SELECT Ref_Document_Types.Document_Type_Name FROM All_Documents JOIN Ref_Document_Types ON All_Documents.Document_Type_Code = Ref_Document_Types.Document_Type_Code WHERE All_Documents.Document_Name = 'How to read a book'", "source_tables": ["all_documents", "ref_document_types"], "error_info": ""}, {"sample_id": 4179, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code = T2.document_type_code WHERE T1.document_name = 'How to read a book'", "pred_sql": "SELECT Ref_Document_Types.Document_Type_Name FROM All_Documents JOIN Ref_Document_Types ON All_Documents.Document_Type_Code = Ref_Document_Types.Document_Type_Code WHERE All_Documents.Document_Name = 'How to read a book'", "source_tables": ["all_documents", "ref_document_types"], "error_info": ""}, {"sample_id": 4180, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Ref_locations", "pred_sql": "SELECT COUNT(*) AS Number_of_Locations FROM Ref_Locations", "source_tables": ["ref_locations"], "error_info": ""}, {"sample_id": 4181, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Ref_locations", "pred_sql": "SELECT COUNT(*) AS NumberOfLocations FROM Ref_Locations", "source_tables": ["ref_locations"], "error_info": ""}, {"sample_id": 4182, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT location_code, location_name FROM Ref_locations", "pred_sql": "SELECT Location_Code, Location_Name FROM Ref_Locations", "source_tables": ["ref_locations"], "error_info": ""}, {"sample_id": 4183, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT location_code, location_name FROM Ref_locations", "pred_sql": "SELECT Location_Code, Location_Name FROM Ref_Locations", "source_tables": ["ref_locations"], "error_info": ""}, {"sample_id": 4184, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT location_name, location_description FROM Ref_locations WHERE location_code = 'x'", "pred_sql": "SELECT Location_Name, Location_Description FROM Ref_Locations WHERE Location_Code = 'x'", "source_tables": ["ref_locations"], "error_info": ""}, {"sample_id": 4185, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT location_name, location_description FROM Ref_locations WHERE location_code = 'x'", "pred_sql": "SELECT Location_Name, Location_Description FROM Ref_Locations WHERE Location_Code = 'x'", "source_tables": ["ref_locations"], "error_info": ""}, {"sample_id": 4186, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT location_code FROM Ref_locations WHERE location_name = 'Canada'", "pred_sql": "SELECT Location_Code FROM Ref_Locations WHERE Location_Name = 'Canada'", "source_tables": ["ref_locations"], "error_info": ""}, {"sample_id": 4187, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT location_code FROM Ref_locations WHERE location_name = 'Canada'", "pred_sql": "SELECT Location_Code FROM Ref_Locations WHERE Location_Name = 'Canada'", "source_tables": ["ref_locations"], "error_info": ""}, {"sample_id": 4188, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT COUNT(*) FROM ROLES", "pred_sql": "SELECT COUNT(*) AS Role_Count FROM Roles", "source_tables": ["roles"], "error_info": ""}, {"sample_id": 4189, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT COUNT(*) FROM ROLES", "pred_sql": "SELECT COUNT(*) AS Total_Roles FROM Roles", "source_tables": ["roles"], "error_info": ""}, {"sample_id": 4190, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT role_code, role_name, role_description FROM ROLES", "pred_sql": "SELECT Role_Code, Role_Name, Role_Description FROM Roles", "source_tables": ["roles"], "error_info": ""}, {"sample_id": 4191, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT role_code, role_name, role_description FROM ROLES", "pred_sql": "SELECT Role_Code, Role_Name, Role_Description FROM Roles", "source_tables": ["roles"], "error_info": ""}, {"sample_id": 4192, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT role_name, role_description FROM ROLES WHERE role_code = 'MG'", "pred_sql": "SELECT Role_Name, Role_Description FROM Roles WHERE Role_Code = 'MG'", "source_tables": ["roles"], "error_info": ""}, {"sample_id": 4193, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT role_name, role_description FROM ROLES WHERE role_code = 'MG'", "pred_sql": "SELECT Role_Name, Role_Description FROM Roles WHERE Role_Code = 'MG'", "source_tables": ["roles"], "error_info": ""}, {"sample_id": 4194, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT role_description FROM ROLES WHERE role_name = 'Proof Reader'", "pred_sql": "SELECT Role_Description FROM Roles WHERE Role_Name = 'Proof Reader'", "source_tables": ["roles"], "error_info": ""}, {"sample_id": 4195, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT role_description FROM ROLES WHERE role_name = 'Proof Reader'", "pred_sql": "SELECT Role_Description FROM Roles WHERE Role_Name = 'Proof Reader'", "source_tables": ["roles"], "error_info": ""}, {"sample_id": 4196, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Employees", "pred_sql": "SELECT COUNT(*) AS Employee_Count FROM Employees", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 4197, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Employees", "pred_sql": "SELECT COUNT(*) AS Number_of_Employees FROM Employees", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 4198, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT employee_name, role_code, date_of_birth FROM Employees WHERE employee_Name = 'Armani'", "pred_sql": "SELECT Employee_Name, Role_Code, Date_of_Birth FROM Employees WHERE Employee_Name = 'Armani'", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 4199, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT employee_name, role_code, date_of_birth FROM Employees WHERE employee_Name = 'Armani'", "pred_sql": "SELECT Employee_Name, Role_Code, Date_of_Birth FROM Employees WHERE Employee_Name = 'Armani'", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 4200, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT employee_ID FROM Employees WHERE employee_name = 'Ebba'", "pred_sql": "SELECT Employee_ID FROM Employees WHERE Employee_Name = 'Ebba'", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 4201, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT employee_ID FROM Employees WHERE employee_name = 'Ebba'", "pred_sql": "SELECT Employee_ID FROM Employees WHERE Employee_Name = 'Ebba'", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 4202, "db_id": "cre_Doc_Tracking_DB", "score": 0, "gold_sql": "SELECT employee_name FROM Employees WHERE role_code = 'HR'", "pred_sql": "SELECT Employee_Name FROM Employees WHERE Role_Code = (SELECT Role_Code FROM Roles WHERE Role_Name = 'HR')", "source_tables": ["employees"], "error_info": "Result not equal"}, {"sample_id": 4203, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT employee_name FROM Employees WHERE role_code = 'HR'", "pred_sql": "SELECT Employee_Name FROM Employees WHERE Role_Code = 'HR'", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 4204, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT role_code, COUNT(*) FROM Employees GROUP BY role_code", "pred_sql": "SELECT Role_Code, COUNT(Employee_ID) AS Number_of_Employees FROM Employees GROUP BY Role_Code", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 4205, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT role_code, COUNT(*) FROM Employees GROUP BY role_code", "pred_sql": "SELECT Roles.Role_Code, COUNT(Employees.Employee_ID) AS Number_of_Employees FROM Roles LEFT JOIN Employees ON Roles.Role_Code = Employees.Role_Code GROUP BY Roles.Role_Code", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 4206, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Role_Code FROM Employees GROUP BY Role_Code ORDER BY COUNT(Employee_ID) DESC LIMIT 1", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 4207, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Role_Code FROM Employees GROUP BY Role_Code ORDER BY COUNT(Employee_ID) DESC LIMIT 1", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 4208, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT role_code FROM Employees GROUP BY role_code HAVING COUNT(*) >= 3", "pred_sql": "SELECT Role_Code FROM Employees GROUP BY Role_Code HAVING COUNT(Employee_ID) >= 3", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 4209, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT role_code FROM Employees GROUP BY role_code HAVING COUNT(*) >= 3", "pred_sql": "SELECT Role_Code FROM Employees GROUP BY Role_Code HAVING COUNT(Employee_ID) >= 3", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 4210, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY COUNT(*) ASC LIMIT 1", "pred_sql": "SELECT Role_Code FROM Employees GROUP BY Role_Code ORDER BY COUNT(Employee_ID) ASC LIMIT 1", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 4211, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY COUNT(*) ASC LIMIT 1", "pred_sql": "SELECT Role_Code FROM Employees GROUP BY Role_Code ORDER BY COUNT(Employee_ID) ASC LIMIT 1", "source_tables": ["employees"], "error_info": ""}, {"sample_id": 4212, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT T2.role_name, T2.role_description FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code WHERE T1.employee_name = 'Ebba'", "pred_sql": "SELECT Roles.Role_Name, Roles.Role_Description FROM Employees JOIN Roles ON Employees.Role_Code = Roles.Role_Code WHERE Employees.Employee_Name = 'Ebba'", "source_tables": ["roles", "employees"], "error_info": ""}, {"sample_id": 4213, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT T2.role_name, T2.role_description FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code WHERE T1.employee_name = 'Ebba'", "pred_sql": "SELECT Roles.Role_Name, Roles.Role_Description FROM Employees JOIN Roles ON Employees.Role_Code = Roles.Role_Code WHERE Employees.Employee_Name = 'Ebba'", "source_tables": ["roles", "employees"], "error_info": ""}, {"sample_id": 4214, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT T1.employee_name FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code WHERE T2.role_name = 'Editor'", "pred_sql": "SELECT Employees.Employee_Name FROM Employees JOIN Roles ON Employees.Role_Code = Roles.Role_Code WHERE Roles.Role_Name = 'Editor'", "source_tables": ["roles", "employees"], "error_info": ""}, {"sample_id": 4215, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT T1.employee_name FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code WHERE T2.role_name = 'Editor'", "pred_sql": "SELECT Employee_Name FROM Employees INNER JOIN Roles ON Employees.Role_Code = Roles.Role_Code WHERE Roles.Role_Name = 'Editor'", "source_tables": ["roles", "employees"], "error_info": ""}, {"sample_id": 4216, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code WHERE T2.role_name = 'Human Resource' OR T2.role_name = 'Manager'", "pred_sql": "SELECT Employee_ID FROM Employees INNER JOIN Roles ON Employees.Role_Code = Roles.Role_Code WHERE Role_Name IN ('Human Resource', 'Manager')", "source_tables": ["roles", "employees"], "error_info": ""}, {"sample_id": 4217, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code WHERE T2.role_name = 'Human Resource' OR T2.role_name = 'Manager'", "pred_sql": "SELECT Employee_ID FROM Employees INNER JOIN Roles ON Employees.Role_Code = Roles.Role_Code WHERE Roles.Role_Name IN ('Human Resource', 'Manager')", "source_tables": ["roles", "employees"], "error_info": ""}, {"sample_id": 4218, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT DISTINCT location_code FROM Document_locations", "pred_sql": "SELECT DISTINCT Location_Code FROM Document_Locations", "source_tables": ["document_locations"], "error_info": ""}, {"sample_id": 4219, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT DISTINCT location_code FROM Document_locations", "pred_sql": "SELECT DISTINCT Location_Code FROM Document_Locations", "source_tables": ["document_locations"], "error_info": ""}, {"sample_id": 4220, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id = T2.document_id JOIN Ref_locations AS T3 ON T2.location_code = T3.location_code WHERE T1.document_name = 'Robin CV'", "pred_sql": "SELECT rl.Location_Name FROM All_Documents AS ad JOIN Document_Locations AS dl ON ad.Document_ID = dl.Document_ID JOIN Ref_Locations AS rl ON dl.Location_Code = rl.Location_Code WHERE ad.Document_Name = 'Robin CV'", "source_tables": ["document_locations", "all_documents", "ref_locations"], "error_info": ""}, {"sample_id": 4221, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id = T2.document_id JOIN Ref_locations AS T3 ON T2.location_code = T3.location_code WHERE T1.document_name = 'Robin CV'", "pred_sql": "SELECT Ref_Locations.Location_Name FROM All_Documents JOIN Document_Locations ON All_Documents.Document_ID = Document_Locations.Document_ID JOIN Ref_Locations ON Document_Locations.Location_Code = Ref_Locations.Location_Code WHERE All_Documents.Document_Name = 'Robin CV'", "source_tables": ["document_locations", "all_documents", "ref_locations"], "error_info": ""}, {"sample_id": 4222, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT location_code, date_in_location_from, date_in_locaton_to FROM Document_locations", "pred_sql": "SELECT Location_Code, Date_in_Location_From, Date_in_Locaton_To FROM Document_Locations", "source_tables": ["document_locations"], "error_info": ""}, {"sample_id": 4223, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT location_code, date_in_location_from, date_in_locaton_to FROM Document_locations", "pred_sql": "SELECT Document_Locations.Location_Code, Document_Locations.Date_in_Location_From, Document_Locations.Date_in_Locaton_To FROM Document_Locations", "source_tables": ["document_locations"], "error_info": ""}, {"sample_id": 4224, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT T1.date_in_location_from, T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = 'Robin CV'", "pred_sql": "SELECT Document_Locations.Date_in_Location_From, Document_Locations.Date_in_Locaton_To FROM Document_Locations JOIN All_Documents ON Document_Locations.Document_ID = All_Documents.Document_ID WHERE All_Documents.Document_Name = 'Robin CV'", "source_tables": ["document_locations", "all_documents"], "error_info": ""}, {"sample_id": 4225, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT T1.date_in_location_from, T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = 'Robin CV'", "pred_sql": "SELECT dl.Date_in_Location_From, dl.Date_in_Locaton_To FROM All_Documents AS ad JOIN Document_Locations AS dl ON ad.Document_ID = dl.Document_ID WHERE ad.Document_Name = 'Robin CV'", "source_tables": ["document_locations", "all_documents"], "error_info": ""}, {"sample_id": 4226, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT location_code, COUNT(*) FROM Document_locations GROUP BY location_code", "pred_sql": "SELECT dl.Location_Code, COUNT(dl.Document_ID) AS Number_of_Documents FROM Document_Locations AS dl GROUP BY dl.Location_Code", "source_tables": ["document_locations"], "error_info": ""}, {"sample_id": 4227, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT location_code, COUNT(*) FROM Document_locations GROUP BY location_code", "pred_sql": "SELECT l.Location_Code, COUNT(dl.Document_ID) AS Number_of_Documents FROM Ref_Locations AS l LEFT JOIN Document_Locations AS dl ON l.Location_Code = dl.Location_Code GROUP BY l.Location_Code", "source_tables": ["document_locations"], "error_info": ""}, {"sample_id": 4228, "db_id": "cre_Doc_Tracking_DB", "score": 0, "gold_sql": "SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Location_Code, COUNT(Document_ID) AS Document_Count FROM Document_Locations GROUP BY Location_Code ORDER BY Document_Count DESC LIMIT 1", "source_tables": ["document_locations"], "error_info": "Result not equal"}, {"sample_id": 4229, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Location_Code FROM Document_Locations GROUP BY Location_Code ORDER BY COUNT(Document_ID) DESC LIMIT 1", "source_tables": ["document_locations"], "error_info": ""}, {"sample_id": 4230, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT location_code FROM Document_locations GROUP BY location_code HAVING COUNT(*) >= 3", "pred_sql": "SELECT dl.Location_Code FROM Document_Locations AS dl GROUP BY dl.Location_Code HAVING COUNT(dl.Document_ID) >= 3", "source_tables": ["document_locations"], "error_info": ""}, {"sample_id": 4231, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT location_code FROM Document_locations GROUP BY location_code HAVING COUNT(*) >= 3", "pred_sql": "SELECT dl.Location_Code FROM Document_Locations AS dl GROUP BY dl.Location_Code HAVING COUNT(dl.Document_ID) >= 3", "source_tables": ["document_locations"], "error_info": ""}, {"sample_id": 4232, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT T2.location_name, T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code = T2.location_code GROUP BY T1.location_code ORDER BY COUNT(*) ASC LIMIT 1", "pred_sql": "SELECT rl.Location_Name, rl.Location_Code FROM Ref_Locations AS rl LEFT JOIN Document_Locations AS dl ON rl.Location_Code = dl.Location_Code GROUP BY rl.Location_Code, rl.Location_Name ORDER BY COUNT(dl.Document_ID) ASC LIMIT 1", "source_tables": ["document_locations", "ref_locations"], "error_info": ""}, {"sample_id": 4233, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT T2.location_name, T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code = T2.location_code GROUP BY T1.location_code ORDER BY COUNT(*) ASC LIMIT 1", "pred_sql": "SELECT rl.Location_Name, rl.Location_Code FROM Ref_Locations AS rl JOIN Document_Locations AS dl ON rl.Location_Code = dl.Location_Code GROUP BY rl.Location_Code, rl.Location_Name ORDER BY COUNT(dl.Document_ID) ASC LIMIT 1", "source_tables": ["document_locations", "ref_locations"], "error_info": ""}, {"sample_id": 4234, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT T2.employee_name, T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id", "pred_sql": "SELECT e1.Employee_Name AS Authorised_By, e2.Employee_Name AS Destroyed_By FROM Documents_to_be_Destroyed AS d JOIN Employees AS e1 ON d.Destruction_Authorised_by_Employee_ID = e1.Employee_ID JOIN Employees AS e2 ON d.Destroyed_by_Employee_ID = e2.Employee_ID", "source_tables": ["employees", "documents_to_be_destroyed"], "error_info": ""}, {"sample_id": 4235, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT T2.employee_name, T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id", "pred_sql": "SELECT e1.Employee_Name AS Authorizing_Employee, e2.Employee_Name AS Destroying_Employee FROM Documents_to_be_Destroyed AS d JOIN Employees AS e1 ON d.Destruction_Authorised_by_Employee_ID = e1.Employee_ID JOIN Employees AS e2 ON d.Destroyed_by_Employee_ID = e2.Employee_ID", "source_tables": ["employees", "documents_to_be_destroyed"], "error_info": ""}, {"sample_id": 4236, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT Destruction_Authorised_by_Employee_ID, COUNT(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID", "pred_sql": "SELECT Employees.Employee_ID, COUNT(Documents_to_be_Destroyed.Document_ID) AS Number_of_Destructions FROM Employees JOIN Documents_to_be_Destroyed ON Employees.Employee_ID = Documents_to_be_Destroyed.Destruction_Authorised_by_Employee_ID GROUP BY Employees.Employee_ID", "source_tables": ["documents_to_be_destroyed"], "error_info": ""}, {"sample_id": 4237, "db_id": "cre_Doc_Tracking_DB", "score": 0, "gold_sql": "SELECT Destruction_Authorised_by_Employee_ID, COUNT(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID", "pred_sql": "SELECT Employees.Employee_ID, COUNT(Documents_to_be_Destroyed.Document_ID) AS Number_of_Destructions FROM Employees LEFT JOIN Documents_to_be_Destroyed ON Employees.Employee_ID = Documents_to_be_Destroyed.Destruction_Authorised_by_Employee_ID GROUP BY Employees.Employee_ID", "source_tables": ["documents_to_be_destroyed"], "error_info": "Result not equal"}, {"sample_id": 4238, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT Destroyed_by_Employee_ID, COUNT(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID", "pred_sql": "SELECT d.Destroyed_by_Employee_ID, COUNT(d.Document_ID) AS Number_of_Documents_Destroyed FROM Documents_to_be_Destroyed AS d GROUP BY d.Destroyed_by_Employee_ID", "source_tables": ["documents_to_be_destroyed"], "error_info": ""}, {"sample_id": 4239, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT Destroyed_by_Employee_ID, COUNT(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID", "pred_sql": "SELECT e.Employee_ID, COUNT(d.Document_ID) AS Number_of_Documents_Destroyed FROM Employees AS e JOIN Documents_to_be_Destroyed AS d ON e.Employee_ID = d.Destroyed_by_Employee_ID GROUP BY e.Employee_ID", "source_tables": ["documents_to_be_destroyed"], "error_info": ""}, {"sample_id": 4240, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed", "pred_sql": "SELECT Employee_ID FROM Employees WHERE NOT Employee_ID IN (SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_Destroyed)", "source_tables": ["employees", "documents_to_be_destroyed"], "error_info": ""}, {"sample_id": 4241, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed", "pred_sql": "SELECT Employee_ID FROM Employees WHERE NOT Employee_ID IN (SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_Destroyed)", "source_tables": ["employees", "documents_to_be_destroyed"], "error_info": ""}, {"sample_id": 4242, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed", "pred_sql": "SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_Destroyed", "source_tables": ["documents_to_be_destroyed"], "error_info": ""}, {"sample_id": 4243, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed", "pred_sql": "SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_Destroyed", "source_tables": ["documents_to_be_destroyed"], "error_info": ""}, {"sample_id": 4244, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed", "pred_sql": "SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_Destroyed", "source_tables": ["documents_to_be_destroyed"], "error_info": ""}, {"sample_id": 4245, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed", "pred_sql": "SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_Destroyed WHERE NOT Destroyed_by_Employee_ID IS NULL", "source_tables": ["documents_to_be_destroyed"], "error_info": ""}, {"sample_id": 4246, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed", "pred_sql": "SELECT Employee_ID FROM Employees WHERE NOT Employee_ID IN (SELECT Destroyed_by_Employee_ID FROM Documents_to_be_Destroyed)", "source_tables": ["employees", "documents_to_be_destroyed"], "error_info": ""}, {"sample_id": 4247, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed", "pred_sql": "SELECT Employee_ID FROM Employees WHERE NOT Employee_ID IN (SELECT Destroyed_by_Employee_ID FROM Documents_to_be_Destroyed)", "source_tables": ["employees", "documents_to_be_destroyed"], "error_info": ""}, {"sample_id": 4248, "db_id": "cre_Doc_Tracking_DB", "score": 0, "gold_sql": "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed", "pred_sql": "SELECT DISTINCT Employee_ID FROM Documents_to_be_Destroyed WHERE NOT Destroyed_by_Employee_ID IS NULL OR NOT Destruction_Authorised_by_Employee_ID IS NULL", "source_tables": ["documents_to_be_destroyed"], "error_info": "Predction Execution Error:no such column: Employee_ID"}, {"sample_id": 4249, "db_id": "cre_Doc_Tracking_DB", "score": 1, "gold_sql": "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed", "pred_sql": "SELECT DISTINCT Employee_ID FROM Employees WHERE Employee_ID IN (SELECT Destroyed_by_Employee_ID FROM Documents_to_be_Destroyed WHERE NOT Destroyed_by_Employee_ID IS NULL) OR Employee_ID IN (SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_Destroyed WHERE NOT Destruction_Authorised_by_Employee_ID IS NULL)", "source_tables": ["documents_to_be_destroyed"], "error_info": ""}, {"sample_id": 4250, "db_id": "club_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM club", "pred_sql": "SELECT COUNT(*) AS TotalClubs FROM Club", "source_tables": ["club"], "error_info": ""}, {"sample_id": 4251, "db_id": "club_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM club", "pred_sql": "SELECT COUNT(*) AS TotalClubs FROM Club", "source_tables": ["club"], "error_info": ""}, {"sample_id": 4252, "db_id": "club_1", "score": 1, "gold_sql": "SELECT clubname FROM club", "pred_sql": "SELECT ClubName FROM Club", "source_tables": ["club"], "error_info": ""}, {"sample_id": 4253, "db_id": "club_1", "score": 1, "gold_sql": "SELECT clubname FROM club", "pred_sql": "SELECT ClubName FROM Club", "source_tables": ["club"], "error_info": ""}, {"sample_id": 4254, "db_id": "club_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM student", "pred_sql": "SELECT COUNT(*) AS TotalStudents FROM Student", "source_tables": ["student"], "error_info": ""}, {"sample_id": 4255, "db_id": "club_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM student", "pred_sql": "SELECT COUNT(*) AS TotalStudents FROM Student", "source_tables": ["student"], "error_info": ""}, {"sample_id": 4256, "db_id": "club_1", "score": 0, "gold_sql": "SELECT DISTINCT fname FROM student", "pred_sql": "SELECT Fname FROM Student", "source_tables": ["student"], "error_info": "Result not equal"}, {"sample_id": 4257, "db_id": "club_1", "score": 0, "gold_sql": "SELECT DISTINCT fname FROM student", "pred_sql": "SELECT Fname FROM Student", "source_tables": ["student"], "error_info": "Result not equal"}, {"sample_id": 4258, "db_id": "club_1", "score": 1, "gold_sql": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = 'Bootup Baltimore'", "pred_sql": "SELECT Student.LName FROM Student JOIN Member_of_club ON Student.StuID = Member_of_club.StuID JOIN Club ON Member_of_club.ClubID = Club.ClubID WHERE Club.ClubName = 'Bootup Baltimore'", "source_tables": ["club", "member_of_club", "student"], "error_info": ""}, {"sample_id": 4259, "db_id": "club_1", "score": 1, "gold_sql": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = 'Bootup Baltimore'", "pred_sql": "SELECT Student.LName FROM Student JOIN Member_of_club ON Student.StuID = Member_of_club.StuID JOIN Club ON Member_of_club.ClubID = Club.ClubID WHERE Club.ClubName = 'Bootup Baltimore'", "source_tables": ["club", "member_of_club", "student"], "error_info": ""}, {"sample_id": 4260, "db_id": "club_1", "score": 1, "gold_sql": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = 'Hopkins Student Enterprises'", "pred_sql": "SELECT Student.LName FROM Student JOIN Member_of_club ON Student.StuID = Member_of_club.StuID JOIN Club ON Member_of_club.ClubID = Club.ClubID WHERE Club.ClubName = 'Hopkins Student Enterprises'", "source_tables": ["club", "member_of_club", "student"], "error_info": ""}, {"sample_id": 4261, "db_id": "club_1", "score": 1, "gold_sql": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = 'Hopkins Student Enterprises'", "pred_sql": "SELECT Student.LName FROM Student JOIN Member_of_club ON Student.StuID = Member_of_club.StuID JOIN Club ON Member_of_club.ClubID = Club.ClubID WHERE Club.ClubName = 'Hopkins Student Enterprises'", "source_tables": ["club", "member_of_club", "student"], "error_info": ""}, {"sample_id": 4262, "db_id": "club_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = 'Tennis Club'", "pred_sql": "SELECT COUNT(Member_of_club.StuID) AS MemberCount FROM Member_of_club JOIN Club ON Member_of_club.ClubID = Club.ClubID WHERE Club.ClubName = 'Tennis Club'", "source_tables": ["club", "member_of_club", "student"], "error_info": ""}, {"sample_id": 4263, "db_id": "club_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = 'Tennis Club'", "pred_sql": "SELECT COUNT(MOC.StuID) AS MemberCount FROM Member_of_club AS MOC JOIN Club AS C ON MOC.ClubID = C.ClubID WHERE C.ClubName = 'Tennis Club'", "source_tables": ["club", "member_of_club", "student"], "error_info": ""}, {"sample_id": 4264, "db_id": "club_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = 'Pen and Paper Gaming'", "pred_sql": "SELECT COUNT(Member_of_club.StuID) AS NumberOfMembers FROM Member_of_club JOIN Club ON Member_of_club.ClubID = Club.ClubID WHERE Club.ClubName = 'Pen and Paper Gaming'", "source_tables": ["club", "member_of_club", "student"], "error_info": ""}, {"sample_id": 4265, "db_id": "club_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = 'Pen and Paper Gaming'", "pred_sql": "SELECT COUNT(DISTINCT Member_of_club.StuID) AS MemberCount FROM Member_of_club JOIN Club ON Member_of_club.ClubID = Club.ClubID WHERE Club.ClubName = 'Pen and Paper Gaming'", "source_tables": ["club", "member_of_club", "student"], "error_info": ""}, {"sample_id": 4266, "db_id": "club_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = 'Linda' AND t3.lname = 'Smith'", "pred_sql": "SELECT COUNT(DISTINCT m.ClubID) AS ClubCount FROM Member_of_club AS m JOIN Student AS s ON m.StuID = s.StuID WHERE s.Fname = 'Linda' AND s.LName = 'Smith'", "source_tables": ["club", "member_of_club", "student"], "error_info": ""}, {"sample_id": 4267, "db_id": "club_1", "score": 0, "gold_sql": "SELECT COUNT(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = 'Linda' AND t3.lname = 'Smith'", "pred_sql": "SELECT COUNT(DISTINCT Club.ClubID) AS NumberOfClubs FROM Student JOIN Member_of_club ON Student.StuID = Member_of_club.StuID WHERE Student.Fname = 'Linda' AND Student.LName = 'Smith'", "source_tables": ["club", "member_of_club", "student"], "error_info": "Predction Execution Error:no such column: Club.ClubID"}, {"sample_id": 4268, "db_id": "club_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = 'Tracy' AND t3.lname = 'Kim'", "pred_sql": "SELECT COUNT(DISTINCT Club.ClubID) AS NumberOfClubs FROM Student JOIN Member_of_club ON Student.StuID = Member_of_club.StuID JOIN Club ON Member_of_club.ClubID = Club.ClubID WHERE Student.Fname = 'Tracy' AND Student.LName = 'Kim'", "source_tables": ["club", "member_of_club", "student"], "error_info": ""}, {"sample_id": 4269, "db_id": "club_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = 'Tracy' AND t3.lname = 'Kim'", "pred_sql": "SELECT COUNT(DISTINCT ClubID) AS NumberOfClubs FROM Member_of_club WHERE StuID = (SELECT StuID FROM Student WHERE Fname = 'Tracy' AND LName = 'Kim')", "source_tables": ["club", "member_of_club", "student"], "error_info": ""}, {"sample_id": 4270, "db_id": "club_1", "score": 0, "gold_sql": "SELECT t3.fname, t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = 'Bootup Baltimore' AND t3.sex = 'F'", "pred_sql": "SELECT Student.Fname, Student.LName FROM Student JOIN Member_of_club ON Student.StuID = Member_of_club.StuID JOIN Club ON Member_of_club.ClubID = Club.ClubID WHERE Student.Sex = 'Female' AND Club.ClubName = 'Bootup Baltimore'", "source_tables": ["club", "member_of_club", "student"], "error_info": "Result not equal"}, {"sample_id": 4271, "db_id": "club_1", "score": 0, "gold_sql": "SELECT t3.fname, t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = 'Bootup Baltimore' AND t3.sex = 'F'", "pred_sql": "SELECT Student.Fname, Student.LName FROM Student JOIN Member_of_club ON Student.StuID = Member_of_club.StuID JOIN Club ON Member_of_club.ClubID = Club.ClubID WHERE Student.Sex = 'Female' AND Club.ClubName = 'Bootup Baltimore'", "source_tables": ["club", "member_of_club", "student"], "error_info": "Result not equal"}, {"sample_id": 4272, "db_id": "club_1", "score": 1, "gold_sql": "SELECT t3.fname, t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = 'Hopkins Student Enterprises' AND t3.sex = 'M'", "pred_sql": "SELECT Student.Fname, Student.LName FROM Student JOIN Member_of_club ON Student.StuID = Member_of_club.StuID JOIN Club ON Member_of_club.ClubID = Club.ClubID WHERE Student.Sex = 'Male' AND Club.ClubName = 'Hopkins Student Enterprises'", "source_tables": ["club", "member_of_club", "student"], "error_info": ""}, {"sample_id": 4273, "db_id": "club_1", "score": 1, "gold_sql": "SELECT t3.fname, t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = 'Hopkins Student Enterprises' AND t3.sex = 'M'", "pred_sql": "SELECT Student.Fname, Student.LName FROM Student JOIN Member_of_club ON Student.StuID = Member_of_club.StuID JOIN Club ON Member_of_club.ClubID = Club.ClubID WHERE Student.Sex = 'Male' AND Club.ClubName = 'Hopkins Student Enterprises'", "source_tables": ["club", "member_of_club", "student"], "error_info": ""}, {"sample_id": 4274, "db_id": "club_1", "score": 1, "gold_sql": "SELECT t3.fname, t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = 'Bootup Baltimore' AND t3.major = '600'", "pred_sql": "SELECT Student.Fname, Student.LName FROM Student JOIN Member_of_club ON Student.StuID = Member_of_club.StuID JOIN Club ON Member_of_club.ClubID = Club.ClubID WHERE Club.ClubName = 'Bootup Baltimore' AND Student.Major = '600'", "source_tables": ["club", "member_of_club", "student"], "error_info": ""}, {"sample_id": 4275, "db_id": "club_1", "score": 1, "gold_sql": "SELECT t3.fname, t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = 'Bootup Baltimore' AND t3.major = '600'", "pred_sql": "SELECT Student.Fname, Student.LName FROM Student JOIN Member_of_club ON Student.StuID = Member_of_club.StuID JOIN Club ON Member_of_club.ClubID = Club.ClubID WHERE Club.ClubName = 'Bootup Baltimore' AND Student.Major = '600'", "source_tables": ["club", "member_of_club", "student"], "error_info": ""}, {"sample_id": 4276, "db_id": "club_1", "score": 0, "gold_sql": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.major = '600' GROUP BY t1.clubname ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Club.ClubName, COUNT(Member_of_club.StuID) AS MemberCount FROM Member_of_club JOIN Student ON Member_of_club.StuID = Student.StuID JOIN Club ON Member_of_club.ClubID = Club.ClubID WHERE Student.Major = '600' GROUP BY Club.ClubID ORDER BY MemberCount DESC LIMIT 1", "source_tables": ["club", "member_of_club", "student"], "error_info": "Result not equal"}, {"sample_id": 4277, "db_id": "club_1", "score": 0, "gold_sql": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.major = '600' GROUP BY t1.clubname ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Club.ClubName, COUNT(Member_of_club.StuID) AS MemberCount FROM Member_of_club JOIN Student ON Member_of_club.StuID = Student.StuID JOIN Club ON Member_of_club.ClubID = Club.ClubID WHERE Student.Major = '600' GROUP BY Club.ClubID ORDER BY MemberCount DESC LIMIT 1", "source_tables": ["club", "member_of_club", "student"], "error_info": "Result not equal"}, {"sample_id": 4278, "db_id": "club_1", "score": 0, "gold_sql": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.sex = 'F' GROUP BY t1.clubname ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Club.ClubName FROM Club JOIN Member_of_club ON Club.ClubID = Member_of_club.ClubID JOIN Student ON Member_of_club.StuID = Student.StuID WHERE Student.Sex = 'Female' GROUP BY Club.ClubID ORDER BY COUNT(Student.StuID) DESC LIMIT 1", "source_tables": ["club", "member_of_club", "student"], "error_info": "Result not equal"}, {"sample_id": 4279, "db_id": "club_1", "score": 0, "gold_sql": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.sex = 'F' GROUP BY t1.clubname ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Club.ClubName FROM Club JOIN Member_of_club ON Club.ClubID = Member_of_club.ClubID JOIN Student ON Member_of_club.StuID = Student.StuID WHERE Student.Sex = 'Female' GROUP BY Club.ClubID ORDER BY COUNT(Student.StuID) DESC LIMIT 1", "source_tables": ["club", "member_of_club", "student"], "error_info": "Result not equal"}, {"sample_id": 4280, "db_id": "club_1", "score": 1, "gold_sql": "SELECT clubdesc FROM club WHERE clubname = 'Tennis Club'", "pred_sql": "SELECT ClubDesc FROM Club WHERE ClubName = 'Tennis Club'", "source_tables": ["club"], "error_info": ""}, {"sample_id": 4281, "db_id": "club_1", "score": 1, "gold_sql": "SELECT clubdesc FROM club WHERE clubname = 'Tennis Club'", "pred_sql": "SELECT ClubDesc FROM Club WHERE ClubName = 'Tennis Club'", "source_tables": ["club"], "error_info": ""}, {"sample_id": 4282, "db_id": "club_1", "score": 1, "gold_sql": "SELECT clubdesc FROM club WHERE clubname = 'Pen and Paper Gaming'", "pred_sql": "SELECT ClubDesc FROM Club WHERE ClubName = 'Pen and Paper Gaming'", "source_tables": ["club"], "error_info": ""}, {"sample_id": 4283, "db_id": "club_1", "score": 1, "gold_sql": "SELECT clubdesc FROM club WHERE clubname = 'Pen and Paper Gaming'", "pred_sql": "SELECT ClubDesc FROM Club WHERE ClubName = 'Pen and Paper Gaming'", "source_tables": ["club"], "error_info": ""}, {"sample_id": 4284, "db_id": "club_1", "score": 1, "gold_sql": "SELECT clublocation FROM club WHERE clubname = 'Tennis Club'", "pred_sql": "SELECT ClubLocation FROM Club WHERE ClubName = 'Tennis Club'", "source_tables": ["club"], "error_info": ""}, {"sample_id": 4285, "db_id": "club_1", "score": 1, "gold_sql": "SELECT clublocation FROM club WHERE clubname = 'Tennis Club'", "pred_sql": "SELECT ClubLocation FROM Club WHERE ClubName = 'Tennis Club'", "source_tables": ["club"], "error_info": ""}, {"sample_id": 4286, "db_id": "club_1", "score": 1, "gold_sql": "SELECT clublocation FROM club WHERE clubname = 'Pen and Paper Gaming'", "pred_sql": "SELECT ClubLocation FROM Club WHERE ClubName = 'Pen and Paper Gaming'", "source_tables": ["club"], "error_info": ""}, {"sample_id": 4287, "db_id": "club_1", "score": 1, "gold_sql": "SELECT clublocation FROM club WHERE clubname = 'Pen and Paper Gaming'", "pred_sql": "SELECT ClubLocation FROM Club WHERE ClubName = 'Pen and Paper Gaming'", "source_tables": ["club"], "error_info": ""}, {"sample_id": 4288, "db_id": "club_1", "score": 1, "gold_sql": "SELECT clublocation FROM club WHERE clubname = 'Hopkins Student Enterprises'", "pred_sql": "SELECT ClubLocation FROM Club WHERE ClubName = 'Hopkins Student Enterprises'", "source_tables": ["club"], "error_info": ""}, {"sample_id": 4289, "db_id": "club_1", "score": 1, "gold_sql": "SELECT clublocation FROM club WHERE clubname = 'Hopkins Student Enterprises'", "pred_sql": "SELECT ClubLocation FROM Club WHERE ClubName = 'Hopkins Student Enterprises'", "source_tables": ["club"], "error_info": ""}, {"sample_id": 4290, "db_id": "club_1", "score": 1, "gold_sql": "SELECT clubname FROM club WHERE clublocation = 'AKW'", "pred_sql": "SELECT ClubName FROM Club WHERE ClubLocation = 'AKW'", "source_tables": ["club"], "error_info": ""}, {"sample_id": 4291, "db_id": "club_1", "score": 1, "gold_sql": "SELECT clubname FROM club WHERE clublocation = 'AKW'", "pred_sql": "SELECT Club.ClubName FROM Club WHERE Club.ClubLocation = 'AKW'", "source_tables": ["club"], "error_info": ""}, {"sample_id": 4292, "db_id": "club_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM club WHERE clublocation = 'HHH'", "pred_sql": "SELECT COUNT(*) FROM Club WHERE ClubLocation = 'HHH'", "source_tables": ["club"], "error_info": ""}, {"sample_id": 4293, "db_id": "club_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM club WHERE clublocation = 'HHH'", "pred_sql": "SELECT COUNT(*) FROM Club WHERE ClubLocation = 'HHH'", "source_tables": ["club"], "error_info": ""}, {"sample_id": 4294, "db_id": "club_1", "score": 1, "gold_sql": "SELECT t3.fname, t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = 'Bootup Baltimore' AND t2.position = 'President'", "pred_sql": "SELECT S.Fname, S.LName FROM Student AS S JOIN Member_of_club AS M ON S.StuID = M.StuID JOIN Club AS C ON M.ClubID = C.ClubID WHERE C.ClubName = 'Bootup Baltimore' AND M.Position = 'President'", "source_tables": ["club", "member_of_club", "student"], "error_info": ""}, {"sample_id": 4295, "db_id": "club_1", "score": 1, "gold_sql": "SELECT t3.fname, t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = 'Bootup Baltimore' AND t2.position = 'President'", "pred_sql": "SELECT Student.Fname, Student.LName FROM Student JOIN Member_of_club ON Student.StuID = Member_of_club.StuID JOIN Club ON Member_of_club.ClubID = Club.ClubID WHERE Club.ClubName = 'Bootup Baltimore' AND Member_of_club.Position = 'President'", "source_tables": ["club", "member_of_club", "student"], "error_info": ""}, {"sample_id": 4296, "db_id": "club_1", "score": 1, "gold_sql": "SELECT t3.fname, t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = 'Hopkins Student Enterprises' AND t2.position = 'CTO'", "pred_sql": "SELECT Student.Fname, Student.LName FROM Member_of_club JOIN Student ON Member_of_club.StuID = Student.StuID JOIN Club ON Member_of_club.ClubID = Club.ClubID WHERE Club.ClubName = 'Hopkins Student Enterprises' AND Member_of_club.Position = 'CTO'", "source_tables": ["club", "member_of_club", "student"], "error_info": ""}, {"sample_id": 4297, "db_id": "club_1", "score": 1, "gold_sql": "SELECT t3.fname, t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = 'Hopkins Student Enterprises' AND t2.position = 'CTO'", "pred_sql": "SELECT Student.Fname, Student.LName FROM Student JOIN Member_of_club ON Student.StuID = Member_of_club.StuID JOIN Club ON Member_of_club.ClubID = Club.ClubID WHERE Club.ClubName = 'Hopkins Student Enterprises' AND Member_of_club.Position = 'CTO'", "source_tables": ["club", "member_of_club", "student"], "error_info": ""}, {"sample_id": 4298, "db_id": "club_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid WHERE t1.clubname = 'Bootup Baltimore'", "pred_sql": "SELECT COUNT(DISTINCT Position) AS DifferentRoles FROM Member_of_club JOIN Club ON Member_of_club.ClubID = Club.ClubID WHERE Club.ClubName = 'Bootup Baltimore'", "source_tables": ["club", "member_of_club"], "error_info": ""}, {"sample_id": 4299, "db_id": "club_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid WHERE t1.clubname = 'Bootup Baltimore'", "pred_sql": "SELECT COUNT(DISTINCT Position) AS DifferentPositions FROM Member_of_club JOIN Club ON Member_of_club.ClubID = Club.ClubID WHERE Club.ClubName = 'Bootup Baltimore'", "source_tables": ["club", "member_of_club"], "error_info": ""}, {"sample_id": 4300, "db_id": "club_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = 'Bootup Baltimore' AND t3.age > 18", "pred_sql": "SELECT COUNT(Member_of_club.StuID) AS MemberCount FROM Member_of_club JOIN Club ON Member_of_club.ClubID = Club.ClubID JOIN Student ON Member_of_club.StuID = Student.StuID WHERE Club.ClubName = 'Bootup Baltimore' AND Student.Age > '18'", "source_tables": ["club", "member_of_club", "student"], "error_info": ""}, {"sample_id": 4301, "db_id": "club_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = 'Bootup Baltimore' AND t3.age > 18", "pred_sql": "SELECT COUNT(Member_of_club.StuID) AS MemberCount FROM Member_of_club JOIN Club ON Member_of_club.ClubID = Club.ClubID JOIN Student ON Member_of_club.StuID = Student.StuID WHERE Club.ClubName = 'Bootup Baltimore' AND Student.Age > '18'", "source_tables": ["club", "member_of_club", "student"], "error_info": ""}, {"sample_id": 4302, "db_id": "club_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = 'Bootup Baltimore' AND t3.age < 18", "pred_sql": "SELECT COUNT(*) FROM Member_of_club AS m JOIN Club AS c ON m.ClubID = c.ClubID JOIN Student AS s ON m.StuID = s.StuID WHERE c.ClubName = 'Bootup Baltimore' AND s.Age < '18'", "source_tables": ["club", "member_of_club", "student"], "error_info": ""}, {"sample_id": 4303, "db_id": "club_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = 'Bootup Baltimore' AND t3.age < 18", "pred_sql": "SELECT COUNT(*) AS member_count FROM Member_of_club AS m JOIN Student AS s ON m.StuID = s.StuID JOIN Club AS c ON m.ClubID = c.ClubID WHERE c.ClubName = 'Bootup Baltimore' AND s.Age < '18'", "source_tables": ["club", "member_of_club", "student"], "error_info": ""}, {"sample_id": 4304, "db_id": "club_1", "score": 1, "gold_sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.city_code = 'BAL'", "pred_sql": "SELECT DISTINCT Club.ClubName FROM Club JOIN Member_of_club ON Club.ClubID = Member_of_club.ClubID JOIN Student ON Member_of_club.StuID = Student.StuID WHERE Student.city_code = 'BAL'", "source_tables": ["club", "member_of_club", "student"], "error_info": ""}, {"sample_id": 4305, "db_id": "club_1", "score": 1, "gold_sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.city_code = 'BAL'", "pred_sql": "SELECT DISTINCT Club.ClubName FROM Club JOIN Member_of_club ON Club.ClubID = Member_of_club.ClubID JOIN Student ON Member_of_club.StuID = Student.StuID WHERE Student.city_code = 'BAL'", "source_tables": ["club", "member_of_club", "student"], "error_info": ""}, {"sample_id": 4306, "db_id": "club_1", "score": 1, "gold_sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.city_code = 'HOU'", "pred_sql": "SELECT DISTINCT Club.ClubName FROM Club JOIN Member_of_club ON Club.ClubID = Member_of_club.ClubID JOIN Student ON Member_of_club.StuID = Student.StuID WHERE Student.city_code = 'HOU'", "source_tables": ["club", "member_of_club", "student"], "error_info": ""}, {"sample_id": 4307, "db_id": "club_1", "score": 1, "gold_sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.city_code = 'HOU'", "pred_sql": "SELECT DISTINCT Club.ClubName FROM Club JOIN Member_of_club ON Club.ClubID = Member_of_club.ClubID JOIN Student ON Member_of_club.StuID = Student.StuID WHERE Student.city_code = 'HOU'", "source_tables": ["club", "member_of_club", "student"], "error_info": ""}, {"sample_id": 4308, "db_id": "club_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = 'Eric' AND t3.lname = 'Tai'", "pred_sql": "SELECT COUNT(DISTINCT m.ClubID) AS ClubCount FROM Student AS s JOIN Member_of_club AS m ON s.StuID = m.StuID WHERE s.Fname = 'Eric' AND s.LName = 'Tai'", "source_tables": ["club", "member_of_club", "student"], "error_info": ""}, {"sample_id": 4309, "db_id": "club_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = 'Eric' AND t3.lname = 'Tai'", "pred_sql": "SELECT COUNT(*) AS ClubCount FROM Member_of_club INNER JOIN Student ON Member_of_club.StuID = Student.StuID WHERE Student.Fname = 'Eric' AND Student.LName = 'Tai'", "source_tables": ["club", "member_of_club", "student"], "error_info": ""}, {"sample_id": 4310, "db_id": "club_1", "score": 1, "gold_sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = 'Davis' AND t3.lname = 'Steven'", "pred_sql": "SELECT Club.ClubName, Club.ClubDesc, Club.ClubLocation FROM Club JOIN Member_of_club ON Club.ClubID = Member_of_club.ClubID JOIN Student ON Member_of_club.StuID = Student.StuID WHERE Student.Fname = 'Davis' AND Student.LName = 'Steven'", "source_tables": ["club", "member_of_club", "student"], "error_info": ""}, {"sample_id": 4311, "db_id": "club_1", "score": 1, "gold_sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = 'Davis' AND t3.lname = 'Steven'", "pred_sql": "SELECT Club.ClubName FROM Club JOIN Member_of_club ON Club.ClubID = Member_of_club.ClubID JOIN Student ON Member_of_club.StuID = Student.StuID WHERE Student.Fname = 'Steven' AND Student.LName = 'Davis'", "source_tables": ["club", "member_of_club", "student"], "error_info": ""}, {"sample_id": 4312, "db_id": "club_1", "score": 0, "gold_sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.advisor = 1121", "pred_sql": "SELECT DISTINCT Club.ClubName, Club.ClubDesc, Club.ClubLocation FROM Club JOIN Member_of_club ON Club.ClubID = Member_of_club.ClubID JOIN Student ON Member_of_club.StuID = Student.StuID WHERE Student.Advisor = '1121'", "source_tables": ["club", "member_of_club", "student"], "error_info": "Result not equal"}, {"sample_id": 4313, "db_id": "club_1", "score": 1, "gold_sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.advisor = 1121", "pred_sql": "SELECT DISTINCT Club.ClubName FROM Club JOIN Member_of_club ON Club.ClubID = Member_of_club.ClubID JOIN Student ON Member_of_club.StuID = Student.StuID WHERE Student.Advisor = '1121'", "source_tables": ["club", "member_of_club", "student"], "error_info": ""}, {"sample_id": 4314, "db_id": "club_1", "score": 1, "gold_sql": "SELECT AVG(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = 'Bootup Baltimore'", "pred_sql": "SELECT AVG(Student.Age) AS AverageAge FROM Student JOIN Member_of_club ON Student.StuID = Member_of_club.StuID JOIN Club ON Member_of_club.ClubID = Club.ClubID WHERE Club.ClubName = 'Bootup Baltimore'", "source_tables": ["club", "member_of_club", "student"], "error_info": ""}, {"sample_id": 4315, "db_id": "club_1", "score": 1, "gold_sql": "SELECT AVG(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = 'Bootup Baltimore'", "pred_sql": "SELECT AVG(Student.Age) AS AverageAge FROM Student JOIN Member_of_club ON Student.StuID = Member_of_club.StuID JOIN Club ON Member_of_club.ClubID = Club.ClubID WHERE Club.ClubName = 'Bootup Baltimore'", "source_tables": ["club", "member_of_club", "student"], "error_info": ""}, {"sample_id": 4316, "db_id": "club_1", "score": 1, "gold_sql": "SELECT AVG(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = 'Hopkins Student Enterprises'", "pred_sql": "SELECT AVG(Student.Age) AS AverageAge FROM Student JOIN Member_of_club ON Student.StuID = Member_of_club.StuID JOIN Club ON Member_of_club.ClubID = Club.ClubID WHERE Club.ClubName = 'Hopkins Student Enterprises'", "source_tables": ["club", "member_of_club", "student"], "error_info": ""}, {"sample_id": 4317, "db_id": "club_1", "score": 1, "gold_sql": "SELECT AVG(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = 'Hopkins Student Enterprises'", "pred_sql": "SELECT AVG(CAST(Student.Age AS INT)) AS Average_Age FROM Student JOIN Member_of_club ON Student.StuID = Member_of_club.StuID JOIN Club ON Member_of_club.ClubID = Club.ClubID WHERE Club.ClubName = 'Hopkins Student Enterprises'", "source_tables": ["club", "member_of_club", "student"], "error_info": ""}, {"sample_id": 4318, "db_id": "club_1", "score": 1, "gold_sql": "SELECT AVG(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = 'Tennis Club'", "pred_sql": "SELECT AVG(Student.Age) AS AverageAge FROM Student JOIN Member_of_club ON Student.StuID = Member_of_club.StuID JOIN Club ON Member_of_club.ClubID = Club.ClubID WHERE Club.ClubName = 'Tennis Club'", "source_tables": ["club", "member_of_club", "student"], "error_info": ""}, {"sample_id": 4319, "db_id": "club_1", "score": 1, "gold_sql": "SELECT AVG(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = 'Tennis Club'", "pred_sql": "SELECT AVG(Student.Age) AS AverageAge FROM Student JOIN Member_of_club ON Student.StuID = Member_of_club.StuID JOIN Club ON Member_of_club.ClubID = Club.ClubID WHERE Club.ClubName = 'Tennis Club'", "source_tables": ["club", "member_of_club", "student"], "error_info": ""}, {"sample_id": 4320, "db_id": "tracking_grants_for_research", "score": 1, "gold_sql": "SELECT T1.grant_amount FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id WHERE T2.sent_date < '1986-08-26 20:49:27' INTERSECT SELECT grant_amount FROM grants WHERE grant_end_date > '1989-03-16 18:27:16'", "pred_sql": "SELECT DISTINCT Grants.grant_amount FROM Grants JOIN Documents ON Grants.grant_id = Documents.grant_id WHERE Documents.sent_date < '1986-08-26 20:49:27' AND Grants.grant_end_date > '1989-03-16 18:27:16'", "source_tables": ["grants", "documents"], "error_info": ""}, {"sample_id": 4321, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT T1.grant_amount FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id WHERE T2.sent_date < '1986-08-26 20:49:27' INTERSECT SELECT grant_amount FROM grants WHERE grant_end_date > '1989-03-16 18:27:16'", "pred_sql": "SELECT DISTINCT Grants.grant_amount FROM Grants JOIN Documents ON Grants.grant_id = Documents.grant_id WHERE Documents.sent_date < '1986-08-26 20:49:27' AND Grants.grant_end_date < '1989-03-16 18:27:16'", "source_tables": ["grants", "documents"], "error_info": "Result not equal"}, {"sample_id": 4322, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id WHERE T2.outcome_code = 'Paper' INTERSECT SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id WHERE T2.outcome_code = 'Patent'", "pred_sql": "SELECT p.project_details FROM Projects AS p JOIN Project_Outcomes AS po ON p.project_id = po.project_id WHERE po.outcome_code IN (SELECT outcome_code FROM Research_Outcomes WHERE outcome_description IN ('patent', 'paper')) GROUP BY p.project_id HAVING COUNT(DISTINCT po.outcome_code) = 2", "source_tables": ["project_outcomes", "projects"], "error_info": "Result not equal"}, {"sample_id": 4323, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id WHERE T2.outcome_code = 'Paper' INTERSECT SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id WHERE T2.outcome_code = 'Patent'", "pred_sql": "SELECT p.project_id, p.project_details FROM Projects AS p JOIN Project_Outcomes AS po ON p.project_id = po.project_id JOIN Research_Outcomes AS ro ON po.outcome_code = ro.outcome_code WHERE ro.outcome_description IN ('patent', 'paper') GROUP BY p.project_id HAVING COUNT(DISTINCT ro.outcome_description) = 2", "source_tables": ["project_outcomes", "projects"], "error_info": "Result not equal"}, {"sample_id": 4324, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT SUM(grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type = T3.organisation_type WHERE T3.organisation_type_description = 'Research'", "pred_sql": "SELECT SUM(Grants.grant_amount) AS total_grant_amount FROM Grants JOIN Organisations ON Grants.organisation_id = Organisations.organisation_id WHERE Organisations.organisation_type = (SELECT organisation_type FROM Organisation_Types WHERE organisation_type_description = 'research')", "source_tables": ["grants", "organisation_types", "organisations"], "error_info": "Result not equal"}, {"sample_id": 4325, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT SUM(grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type = T3.organisation_type WHERE T3.organisation_type_description = 'Research'", "pred_sql": "SELECT SUM(grant_amount) AS total_grant_amount FROM Grants WHERE grant_id IN (SELECT DISTINCT grant_id FROM Documents WHERE document_type_code IN (SELECT document_type_code FROM Document_Types WHERE document_description LIKE '%research%'))", "source_tables": ["grants", "organisation_types", "organisations"], "error_info": "Result not equal"}, {"sample_id": 4326, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT date_from, date_to FROM Project_Staff WHERE project_id IN (SELECT project_id FROM Project_Staff GROUP BY project_id ORDER BY COUNT(*) DESC LIMIT 1) UNION SELECT date_from, date_to FROM Project_Staff WHERE role_code = 'leader'", "pred_sql": "SELECT date_from, date_to FROM Project_Staff WHERE project_id = (SELECT project_id FROM Project_Staff GROUP BY project_id ORDER BY COUNT(staff_id) DESC LIMIT 1)", "source_tables": ["project_staff"], "error_info": "Result not equal"}, {"sample_id": 4327, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT date_from, date_to FROM Project_Staff WHERE project_id IN (SELECT project_id FROM Project_Staff GROUP BY project_id ORDER BY COUNT(*) DESC LIMIT 1) UNION SELECT date_from, date_to FROM Project_Staff WHERE role_code = 'leader'", "pred_sql": "SELECT MIN(ps.date_from) AS start_date, MAX(ps.date_to) AS end_date FROM Project_Staff AS ps JOIN Staff_Roles AS sr ON ps.role_code = sr.role_code WHERE sr.role_description = 'Leader' AND ps.project_id = (SELECT ps2.project_id FROM Project_Staff AS ps2 GROUP BY ps2.project_id ORDER BY COUNT(ps2.staff_id) DESC LIMIT 1)", "source_tables": ["project_staff"], "error_info": "Result not equal"}, {"sample_id": 4328, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT T2.organisation_id, T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_id HAVING SUM(T1.grant_amount) > 6000", "pred_sql": "SELECT organisation_id, organisation_details FROM Organisations", "source_tables": ["grants", "organisations"], "error_info": "Result not equal"}, {"sample_id": 4329, "db_id": "tracking_grants_for_research", "score": 1, "gold_sql": "SELECT T2.organisation_id, T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_id HAVING SUM(T1.grant_amount) > 6000", "pred_sql": "SELECT Organisations.organisation_id, Organisations.organisation_details FROM Organisations JOIN Grants ON Organisations.organisation_id = Grants.organisation_id WHERE Grants.grant_amount > '6000'", "source_tables": ["grants", "organisations"], "error_info": ""}, {"sample_id": 4330, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT T1.organisation_type, T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT o.organisation_type, o.organisation_id FROM Organisations AS o JOIN Research_Staff AS rs ON o.organisation_id = rs.employer_organisation_id GROUP BY o.organisation_id, o.organisation_type ORDER BY COUNT(rs.staff_id) DESC LIMIT 1", "source_tables": ["organisations", "research_staff"], "error_info": "Result not equal"}, {"sample_id": 4331, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT T1.organisation_type, T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Organisations.organisation_type, Organisations.organisation_id FROM Organisations JOIN Research_Staff ON Organisations.organisation_id = Research_Staff.employer_organisation_id GROUP BY Organisations.organisation_id, Organisations.organisation_type ORDER BY COUNT(Research_Staff.staff_id) DESC LIMIT 1", "source_tables": ["organisations", "research_staff"], "error_info": "Result not equal"}, {"sample_id": 4332, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT ot.organisation_type_description, COUNT(rs.staff_id) AS staff_count FROM Research_Staff AS rs JOIN Organisations AS o ON rs.employer_organisation_id = o.organisation_id JOIN Organisation_Types AS ot ON o.organisation_type = ot.organisation_type GROUP BY ot.organisation_type_description ORDER BY staff_count DESC LIMIT 1", "source_tables": ["organisations", "research_staff"], "error_info": "Result not equal"}, {"sample_id": 4333, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT ot.organisation_type_description FROM Organisations AS o JOIN Research_Staff AS rs ON o.organisation_id = rs.employer_organisation_id JOIN Organisation_Types AS ot ON o.organisation_type = ot.organisation_type GROUP BY o.organisation_id ORDER BY COUNT(rs.staff_id) DESC LIMIT 1", "source_tables": ["organisations", "research_staff"], "error_info": "Result not equal"}, {"sample_id": 4334, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id = T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id = T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type = T4.organisation_type WHERE T2.grant_amount > 5000 AND T4.organisation_type_description = 'Research'", "pred_sql": "SELECT D.sent_date FROM Documents AS D JOIN Grants AS G ON D.grant_id = G.grant_id JOIN Organisations AS O ON G.organisation_id = O.organisation_id JOIN Organisation_Types AS OT ON O.organisation_type = OT.organisation_type WHERE G.grant_amount > 5000", "source_tables": ["grants", "organisation_types", "organisations", "documents"], "error_info": "Result not equal"}, {"sample_id": 4335, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id = T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id = T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type = T4.organisation_type WHERE T2.grant_amount > 5000 AND T4.organisation_type_description = 'Research'", "pred_sql": "SELECT Documents.sent_date FROM Documents JOIN Grants ON Documents.grant_id = Grants.grant_id WHERE Grants.grant_amount > 5000 AND Documents.document_type_code IN (SELECT document_type_code FROM Document_Types WHERE document_description LIKE '%research%')", "source_tables": ["grants", "organisation_types", "organisations", "documents"], "error_info": "Result not equal"}, {"sample_id": 4336, "db_id": "tracking_grants_for_research", "score": 1, "gold_sql": "SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code = T2.document_type_code JOIN Grants AS T3 ON T1.grant_id = T3.grant_id WHERE T2.document_description = 'Regular' OR T3.grant_amount > 100", "pred_sql": "SELECT D.response_received_date FROM Documents AS D JOIN Document_Types AS DT ON D.document_type_code = DT.document_type_code JOIN Grants AS G ON D.grant_id = G.grant_id WHERE DT.document_description = 'Regular' OR G.grant_amount > 100", "source_tables": ["grants", "document_types", "documents"], "error_info": ""}, {"sample_id": 4337, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code = T2.document_type_code JOIN Grants AS T3 ON T1.grant_id = T3.grant_id WHERE T2.document_description = 'Regular' OR T3.grant_amount > 100", "pred_sql": "SELECT d.response_received_date FROM Documents AS d JOIN Document_Types AS dt ON d.document_type_code = dt.document_type_code JOIN Grants AS g ON d.grant_id = g.grant_id WHERE dt.document_description = 'Regular' AND g.grant_amount > 100", "source_tables": ["grants", "document_types", "documents"], "error_info": "Result not equal"}, {"sample_id": 4338, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT project_details FROM Projects WHERE NOT project_id IN (SELECT project_id FROM Project_Staff WHERE role_code = 'researcher')", "pred_sql": "SELECT p.project_id, p.project_details FROM Projects AS p LEFT JOIN Project_Staff AS ps ON p.project_id = ps.project_id AND ps.role_code = (SELECT role_code FROM Staff_Roles WHERE role_description = 'Researcher') WHERE ps.staff_id IS NULL", "source_tables": ["project_staff", "projects"], "error_info": "Result not equal"}, {"sample_id": 4339, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT project_details FROM Projects WHERE NOT project_id IN (SELECT project_id FROM Project_Staff WHERE role_code = 'researcher')", "pred_sql": "SELECT p.project_id, p.organisation_id, p.project_details FROM Projects AS p LEFT JOIN Project_Staff AS ps ON p.project_id = ps.project_id AND ps.role_code IN (SELECT role_code FROM Staff_Roles WHERE role_description LIKE '%research%') WHERE ps.staff_id IS NULL", "source_tables": ["project_staff", "projects"], "error_info": "Result not equal"}, {"sample_id": 4340, "db_id": "tracking_grants_for_research", "score": 1, "gold_sql": "SELECT T1.task_details, T1.task_id, T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'omnis' UNION SELECT T1.task_details, T1.task_id, T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id = T3.project_id GROUP BY T2.project_id HAVING COUNT(*) > 2", "pred_sql": "SELECT t.task_id, t.task_details, t.project_id FROM Tasks AS t JOIN Projects AS p ON t.project_id = p.project_id LEFT JOIN Project_Outcomes AS po ON p.project_id = po.project_id GROUP BY t.task_id, t.task_details, t.project_id HAVING p.project_details = 'omnis' OR COUNT(po.outcome_code) > 2", "source_tables": ["tasks", "project_outcomes", "projects"], "error_info": ""}, {"sample_id": 4341, "db_id": "tracking_grants_for_research", "score": 1, "gold_sql": "SELECT T1.task_details, T1.task_id, T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'omnis' UNION SELECT T1.task_details, T1.task_id, T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id = T3.project_id GROUP BY T2.project_id HAVING COUNT(*) > 2", "pred_sql": "SELECT t.task_id, t.task_details, t.project_id FROM Tasks AS t JOIN Projects AS p ON t.project_id = p.project_id WHERE p.project_details = 'omnis' OR (SELECT COUNT(*) FROM Project_Outcomes AS po WHERE po.project_id = p.project_id) >= 3", "source_tables": ["tasks", "project_outcomes", "projects"], "error_info": ""}, {"sample_id": 4342, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT date_from, date_to FROM Project_Staff WHERE role_code = 'researcher'", "pred_sql": "SELECT staff_id, date_from, date_to FROM Research_Staff INNER JOIN Staff_Roles ON Research_Staff.staff_id = Staff_Roles.role_code WHERE Staff_Roles.role_description = 'Researcher'", "source_tables": ["project_staff"], "error_info": "Predction Execution Error:no such column: date_from"}, {"sample_id": 4343, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT date_from, date_to FROM Project_Staff WHERE role_code = 'researcher'", "pred_sql": "SELECT staff_id, date_from, date_to FROM Research_Staff", "source_tables": ["project_staff"], "error_info": "Predction Execution Error:no such column: date_from"}, {"sample_id": 4344, "db_id": "tracking_grants_for_research", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT role_code) FROM Project_Staff", "pred_sql": "SELECT COUNT(DISTINCT role_code) AS number_of_roles FROM Staff_Roles", "source_tables": ["project_staff"], "error_info": ""}, {"sample_id": 4345, "db_id": "tracking_grants_for_research", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT role_code) FROM Project_Staff", "pred_sql": "SELECT COUNT(DISTINCT role_code) AS different_roles FROM Project_Staff", "source_tables": ["project_staff"], "error_info": ""}, {"sample_id": 4346, "db_id": "tracking_grants_for_research", "score": 1, "gold_sql": "SELECT SUM(grant_amount), organisation_id FROM Grants GROUP BY organisation_id", "pred_sql": "SELECT organisation_id, SUM(grant_amount) AS total_grant_amount FROM Grants GROUP BY organisation_id", "source_tables": ["grants"], "error_info": ""}, {"sample_id": 4347, "db_id": "tracking_grants_for_research", "score": 1, "gold_sql": "SELECT SUM(grant_amount), organisation_id FROM Grants GROUP BY organisation_id", "pred_sql": "SELECT Organisations.organisation_id, SUM(Grants.grant_amount) AS total_grant_amount FROM Grants JOIN Organisations ON Grants.organisation_id = Organisations.organisation_id GROUP BY Organisations.organisation_id", "source_tables": ["grants"], "error_info": ""}, {"sample_id": 4348, "db_id": "tracking_grants_for_research", "score": 1, "gold_sql": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id JOIN Research_outcomes AS T3 ON T2.outcome_code = T3.outcome_code WHERE T3.outcome_description LIKE '%Published%'", "pred_sql": "SELECT Projects.project_details FROM Projects JOIN Project_Outcomes ON Projects.project_id = Project_Outcomes.project_id JOIN Research_Outcomes ON Project_Outcomes.outcome_code = Research_Outcomes.outcome_code WHERE Research_Outcomes.outcome_description LIKE '%Published%'", "source_tables": ["project_outcomes", "projects", "research_outcomes"], "error_info": ""}, {"sample_id": 4349, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id JOIN Research_outcomes AS T3 ON T2.outcome_code = T3.outcome_code WHERE T3.outcome_description LIKE '%Published%'", "pred_sql": "SELECT Projects.project_id, Projects.project_details, Research_Outcomes.outcome_code, Research_Outcomes.outcome_description FROM Projects JOIN Project_Outcomes ON Projects.project_id = Project_Outcomes.project_id JOIN Research_Outcomes ON Project_Outcomes.outcome_code = Research_Outcomes.outcome_code WHERE Research_Outcomes.outcome_description LIKE '%published%'", "source_tables": ["project_outcomes", "projects", "research_outcomes"], "error_info": "Result not equal"}, {"sample_id": 4350, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT T1.project_id, COUNT(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id ORDER BY COUNT(*) ASC", "pred_sql": "SELECT project_id, COUNT(staff_id) AS staff_count FROM Project_Staff GROUP BY project_id ORDER BY project_id ASC", "source_tables": ["project_staff", "projects"], "error_info": "Result not equal"}, {"sample_id": 4351, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT T1.project_id, COUNT(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id ORDER BY COUNT(*) ASC", "pred_sql": "SELECT project_id, COUNT(staff_id) AS staff_count FROM Project_Staff GROUP BY project_id ORDER BY project_id ASC", "source_tables": ["project_staff", "projects"], "error_info": "Result not equal"}, {"sample_id": 4352, "db_id": "tracking_grants_for_research", "score": 1, "gold_sql": "SELECT role_description FROM Staff_Roles WHERE role_code = 'researcher'", "pred_sql": "SELECT role_description FROM Staff_Roles WHERE role_code = (SELECT role_code FROM Project_Staff WHERE role_code = (SELECT role_code FROM Staff_Roles WHERE role_description LIKE '%researcher%'))", "source_tables": ["staff_roles"], "error_info": ""}, {"sample_id": 4353, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT role_description FROM Staff_Roles WHERE role_code = 'researcher'", "pred_sql": "SELECT role_description FROM Staff_Roles WHERE role_code = (SELECT role_code FROM Project_Staff WHERE project_id IN (SELECT project_id FROM Projects WHERE organisation_id IN (SELECT organisation_id FROM Organisations WHERE organisation_type IN (SELECT organisation_type FROM Organisation_Types WHERE organisation_type_description = 'Researcher'))))", "source_tables": ["staff_roles"], "error_info": "Result not equal"}, {"sample_id": 4354, "db_id": "tracking_grants_for_research", "score": 1, "gold_sql": "SELECT date_from FROM Project_Staff ORDER BY date_from ASC LIMIT 1", "pred_sql": "SELECT MIN(date_from) AS first_start_date FROM Project_Staff", "source_tables": ["project_staff"], "error_info": ""}, {"sample_id": 4355, "db_id": "tracking_grants_for_research", "score": 1, "gold_sql": "SELECT date_from FROM Project_Staff ORDER BY date_from ASC LIMIT 1", "pred_sql": "SELECT MIN(date_from) AS first_start_date FROM Project_Staff", "source_tables": ["project_staff"], "error_info": ""}, {"sample_id": 4356, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT T1.project_details, T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT p.project_id, p.project_details, COUNT(po.outcome_code) AS outcome_count FROM Projects AS p JOIN Project_Outcomes AS po ON p.project_id = po.project_id GROUP BY p.project_id, p.project_details ORDER BY outcome_count DESC LIMIT 1", "source_tables": ["project_outcomes", "projects"], "error_info": "Result not equal"}, {"sample_id": 4357, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT T1.project_details, T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT p.project_id, p.project_details, COUNT(po.outcome_code) AS outcome_count FROM Projects AS p JOIN Project_Outcomes AS po ON p.project_id = po.project_id GROUP BY p.project_id, p.project_details ORDER BY outcome_count DESC LIMIT 1", "source_tables": ["project_outcomes", "projects"], "error_info": "Result not equal"}, {"sample_id": 4358, "db_id": "tracking_grants_for_research", "score": 1, "gold_sql": "SELECT project_details FROM Projects WHERE NOT project_id IN (SELECT project_id FROM Project_outcomes)", "pred_sql": "SELECT p.project_details FROM Projects AS p LEFT JOIN Project_Outcomes AS po ON p.project_id = po.project_id WHERE po.outcome_code IS NULL", "source_tables": ["project_outcomes", "projects"], "error_info": ""}, {"sample_id": 4359, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT project_details FROM Projects WHERE NOT project_id IN (SELECT project_id FROM Project_outcomes)", "pred_sql": "SELECT * FROM Projects WHERE NOT project_id IN (SELECT project_id FROM Project_Outcomes)", "source_tables": ["project_outcomes", "projects"], "error_info": "Result not equal"}, {"sample_id": 4360, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT T1.organisation_id, T1.organisation_type, T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT o.organisation_id, o.organisation_type, o.organisation_details FROM Organisations AS o JOIN Research_Staff AS rs ON o.organisation_id = rs.employer_organisation_id GROUP BY o.organisation_id, o.organisation_type, o.organisation_details ORDER BY COUNT(rs.staff_id) DESC LIMIT 1", "source_tables": ["organisations", "research_staff"], "error_info": "Result not equal"}, {"sample_id": 4361, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT T1.organisation_id, T1.organisation_type, T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT o.organisation_id, o.organisation_type, o.organisation_details FROM Organisations AS o JOIN Research_Staff AS rs ON o.organisation_id = rs.employer_organisation_id GROUP BY o.organisation_id, o.organisation_type, o.organisation_details ORDER BY COUNT(rs.staff_id) DESC LIMIT 1", "source_tables": ["organisations", "research_staff"], "error_info": "Result not equal"}, {"sample_id": 4362, "db_id": "tracking_grants_for_research", "score": 1, "gold_sql": "SELECT T1.role_description, T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code = T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id = T3.project_id GROUP BY T2.staff_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT ps.staff_id, sr.role_description FROM Project_Staff AS ps JOIN Staff_Roles AS sr ON ps.role_code = sr.role_code JOIN Project_Outcomes AS po ON ps.project_id = po.project_id GROUP BY ps.staff_id, sr.role_description ORDER BY COUNT(po.outcome_code) DESC LIMIT 1", "source_tables": ["project_outcomes", "project_staff", "staff_roles"], "error_info": ""}, {"sample_id": 4363, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT T1.role_description, T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code = T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id = T3.project_id GROUP BY T2.staff_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT ps.staff_id, sr.role_description FROM Project_Staff AS ps JOIN Staff_Roles AS sr ON ps.role_code = sr.role_code WHERE ps.project_id IN (SELECT project_id FROM Project_Staff GROUP BY project_id ORDER BY COUNT(*) DESC LIMIT 1)", "source_tables": ["project_outcomes", "project_staff", "staff_roles"], "error_info": "Result not equal"}, {"sample_id": 4364, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'", "pred_sql": "SELECT document_type_code, document_description FROM Document_Types WHERE document_description LIKE 'Initial%'", "source_tables": ["document_types"], "error_info": "Result not equal"}, {"sample_id": 4365, "db_id": "tracking_grants_for_research", "score": 1, "gold_sql": "SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'", "pred_sql": "SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'", "source_tables": ["document_types"], "error_info": ""}, {"sample_id": 4366, "db_id": "tracking_grants_for_research", "score": 1, "gold_sql": "SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code = T3.document_type_code WHERE T3.document_description = 'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code = T3.document_type_code WHERE T3.document_description = 'Initial Application'", "pred_sql": "SELECT g.grant_start_date FROM Grants AS g JOIN Documents AS d1 ON g.grant_id = d1.grant_id JOIN Document_Types AS dt1 ON d1.document_type_code = dt1.document_type_code JOIN Documents AS d2 ON g.grant_id = d2.grant_id JOIN Document_Types AS dt2 ON d2.document_type_code = dt2.document_type_code WHERE dt1.document_description = 'Regular' AND dt2.document_description = 'Initial Application' GROUP BY g.grant_start_date", "source_tables": ["grants", "document_types", "documents"], "error_info": ""}, {"sample_id": 4367, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code = T3.document_type_code WHERE T3.document_description = 'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code = T3.document_type_code WHERE T3.document_description = 'Initial Application'", "pred_sql": "SELECT Grants.grant_start_date FROM Grants JOIN Organisations ON Grants.organisation_id = Organisations.organisation_id JOIN Organisation_Types ON Organisations.organisation_type = Organisation_Types.organisation_type WHERE Organisation_Types.organisation_type_description IN ('Regular Applications', 'Initial Applications')", "source_tables": ["grants", "document_types", "documents"], "error_info": "Result not equal"}, {"sample_id": 4368, "db_id": "tracking_grants_for_research", "score": 1, "gold_sql": "SELECT grant_id, COUNT(*) FROM Documents GROUP BY grant_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT grant_id, COUNT(document_id) AS document_count FROM Documents GROUP BY grant_id HAVING COUNT(document_id) = (SELECT MAX(doc_count) FROM (SELECT COUNT(document_id) AS doc_count FROM Documents GROUP BY grant_id))", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 4369, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT grant_id, COUNT(*) FROM Documents GROUP BY grant_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT g.grant_id, COUNT(d.document_id) AS document_count, d.document_id AS most_documents_id FROM Grants AS g LEFT JOIN Documents AS d ON g.grant_id = d.grant_id GROUP BY g.grant_id ORDER BY document_count DESC LIMIT 1", "source_tables": ["documents"], "error_info": "Result not equal"}, {"sample_id": 4370, "db_id": "tracking_grants_for_research", "score": 1, "gold_sql": "SELECT T1.organisation_type_description FROM organisation_Types AS T1 JOIN Organisations AS T2 ON T1.organisation_type = T2.organisation_type WHERE T2.organisation_details = 'quo'", "pred_sql": "SELECT Organisation_Types.organisation_type_description FROM Organisations JOIN Organisation_Types ON Organisations.organisation_type = Organisation_Types.organisation_type WHERE Organisations.organisation_details = 'quo'", "source_tables": ["organisation_types", "organisations"], "error_info": ""}, {"sample_id": 4371, "db_id": "tracking_grants_for_research", "score": 1, "gold_sql": "SELECT T1.organisation_type_description FROM organisation_Types AS T1 JOIN Organisations AS T2 ON T1.organisation_type = T2.organisation_type WHERE T2.organisation_details = 'quo'", "pred_sql": "SELECT Organisation_Types.organisation_type_description FROM Organisations JOIN Organisation_Types ON Organisations.organisation_type = Organisation_Types.organisation_type WHERE Organisations.organisation_details = 'quo'", "source_tables": ["organisation_types", "organisations"], "error_info": ""}, {"sample_id": 4372, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type = T2.organisation_type WHERE T2.organisation_type_description = 'Sponsor' ORDER BY organisation_details", "pred_sql": "SELECT * FROM Organisations WHERE organisation_type = (SELECT organisation_type FROM Organisation_Types WHERE organisation_type_description = 'Sponsor') ORDER BY organisation_id ASC", "source_tables": ["organisation_types", "organisations"], "error_info": "Result not equal"}, {"sample_id": 4373, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type = T2.organisation_type WHERE T2.organisation_type_description = 'Sponsor' ORDER BY organisation_details", "pred_sql": "SELECT * FROM Organisations WHERE organisation_type = (SELECT organisation_type FROM Organisation_Types WHERE organisation_type_description = 'Sponsors') ORDER BY organisation_id ASC", "source_tables": ["organisation_types", "organisations"], "error_info": "Result not equal"}, {"sample_id": 4374, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT COUNT(*) FROM Project_outcomes WHERE outcome_code = 'Patent'", "pred_sql": "SELECT COUNT(DISTINCT po.outcome_code) AS patent_outcome_count FROM Project_Outcomes AS po JOIN Research_Outcomes AS ro ON po.outcome_code = ro.outcome_code WHERE ro.outcome_description LIKE '%Patent%'", "source_tables": ["project_outcomes"], "error_info": "Result not equal"}, {"sample_id": 4375, "db_id": "tracking_grants_for_research", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Project_outcomes WHERE outcome_code = 'Patent'", "pred_sql": "SELECT COUNT(*) AS patent_outcomes_count FROM Project_Outcomes WHERE outcome_code IN (SELECT outcome_code FROM Research_Outcomes WHERE outcome_description LIKE '%patent%')", "source_tables": ["project_outcomes"], "error_info": ""}, {"sample_id": 4376, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT COUNT(*) FROM Project_Staff WHERE role_code = 'leader' OR date_from < '1989-04-24 23:51:54'", "pred_sql": "SELECT COUNT(*) AS leader_count FROM Project_Staff WHERE role_code IN (SELECT role_code FROM Staff_Roles WHERE role_description LIKE '%leader%') AND date_from < '1989-04-24 23:51:54'", "source_tables": ["project_staff"], "error_info": "Result not equal"}, {"sample_id": 4377, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT COUNT(*) FROM Project_Staff WHERE role_code = 'leader' OR date_from < '1989-04-24 23:51:54'", "pred_sql": "SELECT COUNT(DISTINCT ps.staff_id) AS leader_count FROM Project_Staff AS ps JOIN Staff_Roles AS sr ON ps.role_code = sr.role_code WHERE sr.role_description LIKE '%leader%' AND ps.date_from < '1989-04-24 23:51:54'", "source_tables": ["project_staff"], "error_info": "Result not equal"}, {"sample_id": 4378, "db_id": "tracking_grants_for_research", "score": 1, "gold_sql": "SELECT date_to FROM Project_Staff ORDER BY date_to DESC LIMIT 1", "pred_sql": "SELECT MAX(date_to) AS last_date_of_leaving FROM Project_Staff", "source_tables": ["project_staff"], "error_info": ""}, {"sample_id": 4379, "db_id": "tracking_grants_for_research", "score": 1, "gold_sql": "SELECT date_to FROM Project_Staff ORDER BY date_to DESC LIMIT 1", "pred_sql": "SELECT MAX(date_to) AS last_date_left FROM Project_Staff", "source_tables": ["project_staff"], "error_info": ""}, {"sample_id": 4380, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code JOIN Projects AS T3 ON T2.project_id = T3.project_id WHERE T3.project_details = 'sint'", "pred_sql": "SELECT outcome_details FROM Project_Outcomes JOIN Projects ON Project_Outcomes.project_id = Projects.project_id WHERE Projects.project_details = 'sint'", "source_tables": ["project_outcomes", "projects", "research_outcomes"], "error_info": "Result not equal"}, {"sample_id": 4381, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code JOIN Projects AS T3 ON T2.project_id = T3.project_id WHERE T3.project_details = 'sint'", "pred_sql": "SELECT outcome_details FROM Project_Outcomes JOIN Projects ON Project_Outcomes.project_id = Projects.project_id WHERE Projects.project_details = 'sint'", "source_tables": ["project_outcomes", "projects", "research_outcomes"], "error_info": "Result not equal"}, {"sample_id": 4382, "db_id": "tracking_grants_for_research", "score": 1, "gold_sql": "SELECT T1.organisation_id, COUNT(*) FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id GROUP BY T1.organisation_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT o.organisation_id, COUNT(po.outcome_code) AS outcome_count FROM Organisations AS o JOIN Projects AS p ON o.organisation_id = p.organisation_id JOIN Project_Outcomes AS po ON p.project_id = po.project_id GROUP BY o.organisation_id ORDER BY outcome_count DESC LIMIT 1", "source_tables": ["project_outcomes", "projects"], "error_info": ""}, {"sample_id": 4383, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT T1.organisation_id, COUNT(*) FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id GROUP BY T1.organisation_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT organisation_id, COUNT(outcome_code) AS outcome_count FROM Project_Outcomes JOIN Projects ON Project_Outcomes.project_id = Projects.project_id JOIN Organisations ON Projects.organisation_id = Organisations.organisation_id GROUP BY organisation_id ORDER BY outcome_count DESC LIMIT 1", "source_tables": ["project_outcomes", "projects"], "error_info": "Predction Execution Error:ambiguous column name: organisation_id"}, {"sample_id": 4384, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT project_details FROM Projects WHERE organisation_id IN (SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY COUNT(*) DESC LIMIT 1)", "pred_sql": "SELECT Projects.project_id, Projects.project_details FROM Projects JOIN Organisations ON Projects.organisation_id = Organisations.organisation_id", "source_tables": ["projects"], "error_info": "Result not equal"}, {"sample_id": 4385, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT project_details FROM Projects WHERE organisation_id IN (SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY COUNT(*) DESC LIMIT 1)", "pred_sql": "SELECT * FROM Projects WHERE organisation_id = (SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY COUNT(project_id) DESC LIMIT 1)", "source_tables": ["projects"], "error_info": "Result not equal"}, {"sample_id": 4386, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT staff_details FROM Research_Staff ORDER BY staff_details ASC", "pred_sql": "SELECT * FROM Research_Staff ORDER BY staff_id ASC", "source_tables": ["research_staff"], "error_info": "Result not equal"}, {"sample_id": 4387, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT staff_details FROM Research_Staff ORDER BY staff_details ASC", "pred_sql": "SELECT * FROM Research_Staff ORDER BY staff_details ASC", "source_tables": ["research_staff"], "error_info": "Result not equal"}, {"sample_id": 4388, "db_id": "tracking_grants_for_research", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Tasks", "pred_sql": "SELECT COUNT(*) AS total_tasks FROM Tasks", "source_tables": ["tasks"], "error_info": ""}, {"sample_id": 4389, "db_id": "tracking_grants_for_research", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Tasks", "pred_sql": "SELECT COUNT(*) AS total_tasks FROM Tasks", "source_tables": ["tasks"], "error_info": ""}, {"sample_id": 4390, "db_id": "tracking_grants_for_research", "score": 1, "gold_sql": "SELECT COUNT(*), T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id", "pred_sql": "SELECT Projects.project_details, COUNT(Tasks.task_id) AS task_count FROM Projects LEFT JOIN Tasks ON Projects.project_id = Tasks.project_id GROUP BY Projects.project_id", "source_tables": ["tasks", "projects"], "error_info": ""}, {"sample_id": 4391, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT COUNT(*), T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id", "pred_sql": "SELECT project_id, COUNT(task_id) AS task_count FROM Tasks GROUP BY project_id", "source_tables": ["tasks", "projects"], "error_info": "Result not equal"}, {"sample_id": 4392, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT role_code FROM Project_Staff WHERE date_from > '2003-04-19 15:06:20' AND date_to < '2016-03-15 00:33:18'", "pred_sql": "SELECT Staff_Roles.role_description FROM Project_Staff JOIN Staff_Roles ON Project_Staff.role_code = Staff_Roles.role_code", "source_tables": ["project_staff"], "error_info": "Result not equal"}, {"sample_id": 4393, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT role_code FROM Project_Staff WHERE date_from > '2003-04-19 15:06:20' AND date_to < '2016-03-15 00:33:18'", "pred_sql": "SELECT DISTINCT sr.role_description FROM Project_Staff AS ps JOIN Staff_Roles AS sr ON ps.role_code = sr.role_code WHERE ps.date_from >= '2003-04-19 15:06:20' AND ps.date_to <= '2016-03-15 00:33:18'", "source_tables": ["project_staff"], "error_info": "Result not equal"}, {"sample_id": 4394, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code", "pred_sql": "SELECT outcome_details FROM Project_Outcomes", "source_tables": ["project_outcomes", "research_outcomes"], "error_info": "Result not equal"}, {"sample_id": 4395, "db_id": "tracking_grants_for_research", "score": 1, "gold_sql": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code", "pred_sql": "SELECT Research_Outcomes.outcome_description FROM Project_Outcomes JOIN Research_Outcomes ON Project_Outcomes.outcome_code = Research_Outcomes.outcome_code", "source_tables": ["project_outcomes", "research_outcomes"], "error_info": ""}, {"sample_id": 4396, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT role_code FROM Project_Staff GROUP BY role_code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT role_code, COUNT(*) AS role_count FROM Project_Staff GROUP BY role_code ORDER BY role_count DESC LIMIT 1", "source_tables": ["project_staff"], "error_info": "Result not equal"}, {"sample_id": 4397, "db_id": "tracking_grants_for_research", "score": 0, "gold_sql": "SELECT role_code FROM Project_Staff GROUP BY role_code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT role_code, COUNT(*) AS role_count FROM Project_Staff GROUP BY role_code ORDER BY role_count DESC LIMIT 1", "source_tables": ["project_staff"], "error_info": "Result not equal"}, {"sample_id": 4398, "db_id": "network_2", "score": 1, "gold_sql": "SELECT COUNT(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.name = 'Dan'", "pred_sql": "SELECT COUNT(friend) AS friend_count FROM PersonFriend WHERE name = 'Dan'", "source_tables": ["personfriend", "person"], "error_info": ""}, {"sample_id": 4399, "db_id": "network_2", "score": 1, "gold_sql": "SELECT COUNT(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.name = 'Dan'", "pred_sql": "SELECT COUNT(friend) AS friend_count FROM PersonFriend WHERE name = 'Dan'", "source_tables": ["personfriend", "person"], "error_info": ""}, {"sample_id": 4400, "db_id": "network_2", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Person WHERE gender = 'female'", "pred_sql": "SELECT COUNT(*) AS female_count FROM Person WHERE gender = 'female'", "source_tables": ["person"], "error_info": ""}, {"sample_id": 4401, "db_id": "network_2", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Person WHERE gender = 'female'", "pred_sql": "SELECT COUNT(*) AS female_count FROM Person WHERE gender = 'female'", "source_tables": ["person"], "error_info": ""}, {"sample_id": 4402, "db_id": "network_2", "score": 1, "gold_sql": "SELECT AVG(age) FROM Person", "pred_sql": "SELECT AVG(age) AS average_age FROM Person", "source_tables": ["person"], "error_info": ""}, {"sample_id": 4403, "db_id": "network_2", "score": 1, "gold_sql": "SELECT AVG(age) FROM Person", "pred_sql": "SELECT AVG(age) AS average_age FROM Person", "source_tables": ["person"], "error_info": ""}, {"sample_id": 4404, "db_id": "network_2", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT city) FROM Person", "pred_sql": "SELECT COUNT(DISTINCT city) AS different_cities FROM Person", "source_tables": ["person"], "error_info": ""}, {"sample_id": 4405, "db_id": "network_2", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT city) FROM Person", "pred_sql": "SELECT COUNT(DISTINCT city) AS different_cities FROM Person", "source_tables": ["person"], "error_info": ""}, {"sample_id": 4406, "db_id": "network_2", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT job) FROM Person", "pred_sql": "SELECT COUNT(DISTINCT job) AS job_count FROM Person", "source_tables": ["person"], "error_info": ""}, {"sample_id": 4407, "db_id": "network_2", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT job) FROM Person", "pred_sql": "SELECT COUNT(DISTINCT job) AS different_jobs FROM Person", "source_tables": ["person"], "error_info": ""}, {"sample_id": 4408, "db_id": "network_2", "score": 0, "gold_sql": "SELECT name FROM Person WHERE age = (SELECT MAX(age) FROM person)", "pred_sql": "SELECT name, age FROM Person ORDER BY age DESC LIMIT 1", "source_tables": ["person"], "error_info": "Result not equal"}, {"sample_id": 4409, "db_id": "network_2", "score": 1, "gold_sql": "SELECT name FROM Person WHERE age = (SELECT MAX(age) FROM person)", "pred_sql": "SELECT name FROM Person ORDER BY age DESC LIMIT 1", "source_tables": ["person"], "error_info": ""}, {"sample_id": 4410, "db_id": "network_2", "score": 0, "gold_sql": "SELECT name FROM Person WHERE job = 'student' AND age = (SELECT MAX(age) FROM person WHERE job = 'student')", "pred_sql": "SELECT name, age FROM Person WHERE job = 'student' ORDER BY age DESC LIMIT 1", "source_tables": ["person"], "error_info": "Result not equal"}, {"sample_id": 4411, "db_id": "network_2", "score": 0, "gold_sql": "SELECT name FROM Person WHERE job = 'student' AND age = (SELECT MAX(age) FROM person WHERE job = 'student')", "pred_sql": "SELECT name FROM Person ORDER BY age DESC LIMIT 1", "source_tables": ["person"], "error_info": "Result not equal"}, {"sample_id": 4412, "db_id": "network_2", "score": 1, "gold_sql": "SELECT name FROM Person WHERE gender = 'male' AND age = (SELECT MIN(age) FROM person WHERE gender = 'male')", "pred_sql": "SELECT name FROM Person WHERE gender = 'male' ORDER BY age ASC LIMIT 1", "source_tables": ["person"], "error_info": ""}, {"sample_id": 4413, "db_id": "network_2", "score": 1, "gold_sql": "SELECT name FROM Person WHERE gender = 'male' AND age = (SELECT MIN(age) FROM person WHERE gender = 'male')", "pred_sql": "SELECT name FROM Person WHERE gender = 'male' ORDER BY age ASC LIMIT 1", "source_tables": ["person"], "error_info": ""}, {"sample_id": 4414, "db_id": "network_2", "score": 1, "gold_sql": "SELECT age FROM Person WHERE job = 'doctor' AND name = 'Zach'", "pred_sql": "SELECT age FROM Person WHERE name = 'Zach' AND job = 'doctor'", "source_tables": ["person"], "error_info": ""}, {"sample_id": 4415, "db_id": "network_2", "score": 1, "gold_sql": "SELECT age FROM Person WHERE job = 'doctor' AND name = 'Zach'", "pred_sql": "SELECT age FROM Person WHERE name = 'Zach' AND job = 'doctor'", "source_tables": ["person"], "error_info": ""}, {"sample_id": 4416, "db_id": "network_2", "score": 1, "gold_sql": "SELECT name FROM Person WHERE age < 30", "pred_sql": "SELECT name FROM Person WHERE age < '30'", "source_tables": ["person"], "error_info": ""}, {"sample_id": 4417, "db_id": "network_2", "score": 1, "gold_sql": "SELECT name FROM Person WHERE age < 30", "pred_sql": "SELECT name FROM Person WHERE age < '30'", "source_tables": ["person"], "error_info": ""}, {"sample_id": 4418, "db_id": "network_2", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Person WHERE age > 30 AND job = 'engineer'", "pred_sql": "SELECT COUNT(*) FROM Person WHERE age > '30' AND job = 'engineer'", "source_tables": ["person"], "error_info": ""}, {"sample_id": 4419, "db_id": "network_2", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Person WHERE age > 30 AND job = 'engineer'", "pred_sql": "SELECT COUNT(*) FROM Person WHERE job = 'engineer' AND age > '30'", "source_tables": ["person"], "error_info": ""}, {"sample_id": 4420, "db_id": "network_2", "score": 1, "gold_sql": "SELECT AVG(age), gender FROM Person GROUP BY gender", "pred_sql": "SELECT gender, AVG(age) AS average_age FROM Person GROUP BY gender", "source_tables": ["person"], "error_info": ""}, {"sample_id": 4421, "db_id": "network_2", "score": 1, "gold_sql": "SELECT AVG(age), gender FROM Person GROUP BY gender", "pred_sql": "SELECT gender, AVG(age) AS average_age FROM Person GROUP BY gender", "source_tables": ["person"], "error_info": ""}, {"sample_id": 4422, "db_id": "network_2", "score": 1, "gold_sql": "SELECT AVG(age), job FROM Person GROUP BY job", "pred_sql": "SELECT job, AVG(age) AS average_age FROM Person GROUP BY job", "source_tables": ["person"], "error_info": ""}, {"sample_id": 4423, "db_id": "network_2", "score": 1, "gold_sql": "SELECT AVG(age), job FROM Person GROUP BY job", "pred_sql": "SELECT job, AVG(age) AS average_age FROM Person GROUP BY job", "source_tables": ["person"], "error_info": ""}, {"sample_id": 4424, "db_id": "network_2", "score": 1, "gold_sql": "SELECT AVG(age), job FROM Person WHERE gender = 'male' GROUP BY job", "pred_sql": "SELECT job, AVG(age) AS average_age FROM Person WHERE gender = 'male' GROUP BY job", "source_tables": ["person"], "error_info": ""}, {"sample_id": 4425, "db_id": "network_2", "score": 1, "gold_sql": "SELECT AVG(age), job FROM Person WHERE gender = 'male' GROUP BY job", "pred_sql": "SELECT job, AVG(age) AS average_age FROM Person WHERE gender = 'male' GROUP BY job", "source_tables": ["person"], "error_info": ""}, {"sample_id": 4426, "db_id": "network_2", "score": 1, "gold_sql": "SELECT MIN(age), job FROM Person GROUP BY job", "pred_sql": "SELECT job, MIN(age) AS minimum_age FROM Person GROUP BY job", "source_tables": ["person"], "error_info": ""}, {"sample_id": 4427, "db_id": "network_2", "score": 1, "gold_sql": "SELECT MIN(age), job FROM Person GROUP BY job", "pred_sql": "SELECT job, MIN(age) AS youngest_age FROM Person GROUP BY job", "source_tables": ["person"], "error_info": ""}, {"sample_id": 4428, "db_id": "network_2", "score": 1, "gold_sql": "SELECT COUNT(*), gender FROM Person WHERE age < 40 GROUP BY gender", "pred_sql": "SELECT gender, COUNT(*) AS number_of_people FROM Person WHERE age < '40' GROUP BY gender", "source_tables": ["person"], "error_info": ""}, {"sample_id": 4429, "db_id": "network_2", "score": 1, "gold_sql": "SELECT COUNT(*), gender FROM Person WHERE age < 40 GROUP BY gender", "pred_sql": "SELECT gender, COUNT(*) AS count FROM Person WHERE age < '40' GROUP BY gender", "source_tables": ["person"], "error_info": ""}, {"sample_id": 4430, "db_id": "network_2", "score": 1, "gold_sql": "SELECT name FROM Person WHERE age > (SELECT MIN(age) FROM person WHERE job = 'engineer') ORDER BY age", "pred_sql": "SELECT name FROM Person WHERE age > (SELECT MAX(age) FROM Person WHERE job = 'engineer') ORDER BY age", "source_tables": ["person"], "error_info": ""}, {"sample_id": 4431, "db_id": "network_2", "score": 1, "gold_sql": "SELECT name FROM Person WHERE age > (SELECT MIN(age) FROM person WHERE job = 'engineer') ORDER BY age", "pred_sql": "SELECT DISTINCT P.name FROM Person AS P WHERE P.age > (SELECT MIN(P2.age) FROM Person AS P2 WHERE P2.job = 'engineer') ORDER BY P.age", "source_tables": ["person"], "error_info": ""}, {"sample_id": 4432, "db_id": "network_2", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Person WHERE age > (SELECT MAX(age) FROM person WHERE job = 'engineer')", "pred_sql": "SELECT COUNT(*) FROM Person WHERE age > (SELECT MAX(age) FROM Person WHERE job = 'engineer')", "source_tables": ["person"], "error_info": ""}, {"sample_id": 4433, "db_id": "network_2", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Person WHERE age > (SELECT MAX(age) FROM person WHERE job = 'engineer')", "pred_sql": "SELECT COUNT(*) FROM Person WHERE age > (SELECT MAX(age) FROM Person WHERE job = 'engineer')", "source_tables": ["person"], "error_info": ""}, {"sample_id": 4434, "db_id": "network_2", "score": 1, "gold_sql": "SELECT name, job FROM Person ORDER BY name", "pred_sql": "SELECT name, job FROM Person ORDER BY name", "source_tables": ["person"], "error_info": ""}, {"sample_id": 4435, "db_id": "network_2", "score": 1, "gold_sql": "SELECT name, job FROM Person ORDER BY name", "pred_sql": "SELECT name, job FROM Person ORDER BY name ASC", "source_tables": ["person"], "error_info": ""}, {"sample_id": 4436, "db_id": "network_2", "score": 1, "gold_sql": "SELECT name FROM Person ORDER BY age DESC", "pred_sql": "SELECT name FROM Person ORDER BY age DESC", "source_tables": ["person"], "error_info": ""}, {"sample_id": 4437, "db_id": "network_2", "score": 1, "gold_sql": "SELECT name FROM Person ORDER BY age DESC", "pred_sql": "SELECT name FROM Person ORDER BY age DESC", "source_tables": ["person"], "error_info": ""}, {"sample_id": 4438, "db_id": "network_2", "score": 0, "gold_sql": "SELECT name FROM Person WHERE gender = 'male' ORDER BY age", "pred_sql": "SELECT name, age FROM Person WHERE gender = 'male' ORDER BY age", "source_tables": ["person"], "error_info": "Result not equal"}, {"sample_id": 4439, "db_id": "network_2", "score": 0, "gold_sql": "SELECT name FROM Person WHERE gender = 'male' ORDER BY age", "pred_sql": "SELECT name, age FROM Person WHERE gender = 'male' ORDER BY age", "source_tables": ["person"], "error_info": "Result not equal"}, {"sample_id": 4440, "db_id": "network_2", "score": 0, "gold_sql": "SELECT T1.name, T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Dan' INTERSECT SELECT T1.name, T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Alice'", "pred_sql": "SELECT DISTINCT p.name, p.age FROM Person AS p JOIN PersonFriend AS pf1 ON p.name = pf1.friend JOIN PersonFriend AS pf2 ON p.name = pf2.friend WHERE pf1.name = 'Dan' AND pf2.name = 'Alice'", "source_tables": ["personfriend", "person"], "error_info": "Result not equal"}, {"sample_id": 4441, "db_id": "network_2", "score": 0, "gold_sql": "SELECT T1.name, T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Dan' INTERSECT SELECT T1.name, T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Alice'", "pred_sql": "SELECT DISTINCT pf1.friend, p.age FROM PersonFriend AS pf1 JOIN PersonFriend AS pf2 ON pf1.friend = pf2.friend JOIN Person AS p ON pf1.friend = p.name WHERE pf1.name = 'Dan' AND pf2.name = 'Alice'", "source_tables": ["personfriend", "person"], "error_info": "Result not equal"}, {"sample_id": 4442, "db_id": "network_2", "score": 0, "gold_sql": "SELECT DISTINCT T1.name, T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Dan' OR T2.friend = 'Alice'", "pred_sql": "SELECT DISTINCT P.name, P.age FROM Person AS P JOIN PersonFriend AS PF ON P.name = PF.friend WHERE PF.name IN ('Dan', 'Alice')", "source_tables": ["personfriend", "person"], "error_info": "Result not equal"}, {"sample_id": 4443, "db_id": "network_2", "score": 0, "gold_sql": "SELECT DISTINCT T1.name, T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Dan' OR T2.friend = 'Alice'", "pred_sql": "SELECT DISTINCT P.name, P.age FROM Person AS P JOIN PersonFriend AS PF ON P.name = PF.friend WHERE PF.name IN ('Dan', 'alice')", "source_tables": ["personfriend", "person"], "error_info": "Result not equal"}, {"sample_id": 4444, "db_id": "network_2", "score": 0, "gold_sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age > 40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age < 30)", "pred_sql": "SELECT DISTINCT pf.name FROM PersonFriend AS pf JOIN Person AS p ON pf.friend = p.name WHERE p.age > 40 OR p.age < 30", "source_tables": ["personfriend", "person"], "error_info": "Result not equal"}, {"sample_id": 4445, "db_id": "network_2", "score": 0, "gold_sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age > 40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age < 30)", "pred_sql": "SELECT DISTINCT p1.name FROM Person AS p1 JOIN PersonFriend AS pf ON p1.name = pf.name JOIN Person AS p2 ON pf.friend = p2.name WHERE p2.age > 40 OR p2.age < 30", "source_tables": ["personfriend", "person"], "error_info": "Result not equal"}, {"sample_id": 4446, "db_id": "network_2", "score": 0, "gold_sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age > 40) EXCEPT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age < 30)", "pred_sql": "SELECT DISTINCT pf.name FROM PersonFriend AS pf JOIN Person AS p ON pf.friend = p.name WHERE p.age > '40' AND p.age < '30'", "source_tables": ["personfriend", "person"], "error_info": "Result not equal"}, {"sample_id": 4447, "db_id": "network_2", "score": 0, "gold_sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age > 40) EXCEPT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age < 30)", "pred_sql": "SELECT P.name FROM Person AS P WHERE P.age > 40 AND NOT EXISTS(SELECT 1 FROM PersonFriend AS PF JOIN Person AS F ON PF.friend = F.name WHERE PF.name = P.name AND F.age < 30)", "source_tables": ["personfriend", "person"], "error_info": "Result not equal"}, {"sample_id": 4448, "db_id": "network_2", "score": 0, "gold_sql": "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.job = 'student'", "pred_sql": "SELECT P.name FROM Person AS P WHERE NOT P.name IN (SELECT PF.friend FROM PersonFriend AS PF WHERE PF.name = P.name)", "source_tables": ["personfriend", "person"], "error_info": "Result not equal"}, {"sample_id": 4449, "db_id": "network_2", "score": 0, "gold_sql": "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.job = 'student'", "pred_sql": "SELECT P.name FROM Person AS P WHERE NOT P.name IN (SELECT PF.friend FROM PersonFriend AS PF JOIN Person AS P2 ON PF.friend = P2.name WHERE P2.job = 'student')", "source_tables": ["personfriend", "person"], "error_info": "Result not equal"}, {"sample_id": 4450, "db_id": "network_2", "score": 1, "gold_sql": "SELECT name FROM PersonFriend GROUP BY name HAVING COUNT(*) = 1", "pred_sql": "SELECT name FROM PersonFriend GROUP BY name HAVING COUNT(friend) = 1", "source_tables": ["personfriend"], "error_info": ""}, {"sample_id": 4451, "db_id": "network_2", "score": 1, "gold_sql": "SELECT name FROM PersonFriend GROUP BY name HAVING COUNT(*) = 1", "pred_sql": "SELECT name FROM PersonFriend GROUP BY name HAVING COUNT(friend) = 1", "source_tables": ["personfriend"], "error_info": ""}, {"sample_id": 4452, "db_id": "network_2", "score": 1, "gold_sql": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.name = 'Bob'", "pred_sql": "SELECT friend FROM PersonFriend WHERE name = 'Bob'", "source_tables": ["personfriend", "person"], "error_info": ""}, {"sample_id": 4453, "db_id": "network_2", "score": 1, "gold_sql": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.name = 'Bob'", "pred_sql": "SELECT friend FROM PersonFriend WHERE name = 'Bob'", "source_tables": ["personfriend", "person"], "error_info": ""}, {"sample_id": 4454, "db_id": "network_2", "score": 0, "gold_sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Bob'", "pred_sql": "SELECT friend FROM PersonFriend WHERE name = 'Bob'", "source_tables": ["personfriend", "person"], "error_info": "Result not equal"}, {"sample_id": 4455, "db_id": "network_2", "score": 0, "gold_sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Bob'", "pred_sql": "SELECT friend FROM PersonFriend WHERE name = 'Bob'", "source_tables": ["personfriend", "person"], "error_info": "Result not equal"}, {"sample_id": 4456, "db_id": "network_2", "score": 0, "gold_sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Zach' AND T1.gender = 'female'", "pred_sql": "SELECT DISTINCT p.name FROM Person AS p JOIN PersonFriend AS pf ON p.name = pf.friend WHERE pf.name = 'Zach' AND p.gender = 'female'", "source_tables": ["personfriend", "person"], "error_info": "Result not equal"}, {"sample_id": 4457, "db_id": "network_2", "score": 0, "gold_sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Zach' AND T1.gender = 'female'", "pred_sql": "SELECT DISTINCT p.name FROM Person AS p JOIN PersonFriend AS pf ON p.name = pf.friend WHERE pf.name = 'Zach' AND p.gender = 'female'", "source_tables": ["personfriend", "person"], "error_info": "Result not equal"}, {"sample_id": 4458, "db_id": "network_2", "score": 1, "gold_sql": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.name = 'Alice' AND T1.gender = 'female'", "pred_sql": "SELECT pf.friend FROM PersonFriend AS pf JOIN Person AS p ON pf.friend = p.name WHERE pf.name = 'Alice' AND p.gender = 'female'", "source_tables": ["personfriend", "person"], "error_info": ""}, {"sample_id": 4459, "db_id": "network_2", "score": 1, "gold_sql": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.name = 'Alice' AND T1.gender = 'female'", "pred_sql": "SELECT pf.friend FROM PersonFriend AS pf JOIN Person AS p ON pf.friend = p.name WHERE pf.name = 'Alice' AND p.gender = 'female'", "source_tables": ["personfriend", "person"], "error_info": ""}, {"sample_id": 4460, "db_id": "network_2", "score": 1, "gold_sql": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.name = 'Alice' AND T1.gender = 'male' AND T1.job = 'doctor'", "pred_sql": "SELECT pf.friend FROM PersonFriend AS pf JOIN Person AS p ON pf.friend = p.name WHERE pf.name = 'Alice' AND p.gender = 'male' AND p.job = 'doctor'", "source_tables": ["personfriend", "person"], "error_info": ""}, {"sample_id": 4461, "db_id": "network_2", "score": 1, "gold_sql": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.name = 'Alice' AND T1.gender = 'male' AND T1.job = 'doctor'", "pred_sql": "SELECT pf.friend FROM PersonFriend AS pf JOIN Person AS p ON pf.friend = p.name WHERE pf.name = 'Alice' AND p.job = 'doctor'", "source_tables": ["personfriend", "person"], "error_info": ""}, {"sample_id": 4462, "db_id": "network_2", "score": 1, "gold_sql": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.city = 'new york city'", "pred_sql": "SELECT DISTINCT pf.name FROM PersonFriend AS pf JOIN Person AS p ON pf.friend = p.name WHERE p.city = 'new york city'", "source_tables": ["personfriend", "person"], "error_info": ""}, {"sample_id": 4463, "db_id": "network_2", "score": 0, "gold_sql": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.city = 'new york city'", "pred_sql": "SELECT DISTINCT pf.friend FROM PersonFriend AS pf JOIN Person AS p ON pf.friend = p.name WHERE p.city = 'New York'", "source_tables": ["personfriend", "person"], "error_info": "Result not equal"}, {"sample_id": 4464, "db_id": "network_2", "score": 1, "gold_sql": "SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.age < (SELECT AVG(age) FROM person)", "pred_sql": "SELECT DISTINCT pf.name FROM PersonFriend AS pf JOIN Person AS p ON pf.friend = p.name WHERE p.age < (SELECT AVG(CAST(age AS INT)) FROM Person)", "source_tables": ["personfriend", "person"], "error_info": ""}, {"sample_id": 4465, "db_id": "network_2", "score": 0, "gold_sql": "SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.age < (SELECT AVG(age) FROM person)", "pred_sql": "SELECT DISTINCT pf.friend FROM PersonFriend AS pf JOIN Person AS p ON pf.friend = p.name WHERE p.age < (SELECT AVG(CAST(age AS INT)) FROM Person)", "source_tables": ["personfriend", "person"], "error_info": "Result not equal"}, {"sample_id": 4466, "db_id": "network_2", "score": 0, "gold_sql": "SELECT DISTINCT T2.name, T2.friend, T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.age > (SELECT AVG(age) FROM person)", "pred_sql": "SELECT pf.friend, p.age FROM PersonFriend AS pf JOIN Person AS p ON pf.friend = p.name WHERE p.age > (SELECT AVG(age) FROM Person)", "source_tables": ["personfriend", "person"], "error_info": "Result not equal"}, {"sample_id": 4467, "db_id": "network_2", "score": 0, "gold_sql": "SELECT DISTINCT T2.name, T2.friend, T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.age > (SELECT AVG(age) FROM person)", "pred_sql": "SELECT P.name, PF.friend, P.age FROM Person AS P JOIN PersonFriend AS PF ON P.name = PF.name WHERE P.age > (SELECT AVG(CAST(age AS INT)) FROM Person)", "source_tables": ["personfriend", "person"], "error_info": "Result not equal"}, {"sample_id": 4468, "db_id": "network_2", "score": 1, "gold_sql": "SELECT friend FROM PersonFriend WHERE name = 'Zach' AND YEAR = (SELECT MAX(YEAR) FROM PersonFriend WHERE name = 'Zach')", "pred_sql": "SELECT friend FROM PersonFriend WHERE name = 'Zach' ORDER BY year DESC LIMIT 1", "source_tables": ["personfriend"], "error_info": ""}, {"sample_id": 4469, "db_id": "network_2", "score": 0, "gold_sql": "SELECT friend FROM PersonFriend WHERE name = 'Zach' AND YEAR = (SELECT MAX(YEAR) FROM PersonFriend WHERE name = 'Zach')", "pred_sql": "SELECT friend FROM PersonFriend WHERE name = 'Zach' ORDER BY year ASC LIMIT 1", "source_tables": ["personfriend"], "error_info": "Result not equal"}, {"sample_id": 4470, "db_id": "network_2", "score": 1, "gold_sql": "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.name = 'Zach' AND T2.year = (SELECT MAX(YEAR) FROM PersonFriend WHERE name = 'Zach')", "pred_sql": "SELECT P.age FROM Person AS P JOIN PersonFriend AS PF ON P.name = PF.friend WHERE PF.name = 'Zach' ORDER BY PF.year DESC LIMIT 1", "source_tables": ["personfriend", "person"], "error_info": ""}, {"sample_id": 4471, "db_id": "network_2", "score": 1, "gold_sql": "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.name = 'Zach' AND T2.year = (SELECT MAX(YEAR) FROM PersonFriend WHERE name = 'Zach')", "pred_sql": "SELECT P.age FROM Person AS P JOIN PersonFriend AS PF ON P.name = PF.friend WHERE PF.name = 'Zach' AND PF.year = (SELECT MAX(year) FROM PersonFriend WHERE name = 'Zach')", "source_tables": ["personfriend", "person"], "error_info": ""}, {"sample_id": 4472, "db_id": "network_2", "score": 1, "gold_sql": "SELECT name FROM PersonFriend WHERE friend = 'Alice' AND YEAR = (SELECT MIN(YEAR) FROM PersonFriend WHERE friend = 'Alice')", "pred_sql": "SELECT pf.name FROM PersonFriend AS pf WHERE pf.friend = 'Alice' ORDER BY pf.year ASC LIMIT 1", "source_tables": ["personfriend"], "error_info": ""}, {"sample_id": 4473, "db_id": "network_2", "score": 0, "gold_sql": "SELECT name FROM PersonFriend WHERE friend = 'Alice' AND YEAR = (SELECT MIN(YEAR) FROM PersonFriend WHERE friend = 'Alice')", "pred_sql": "SELECT friend FROM PersonFriend WHERE name = 'Alice' ORDER BY year ASC LIMIT 1", "source_tables": ["personfriend"], "error_info": "Result not equal"}, {"sample_id": 4474, "db_id": "network_2", "score": 0, "gold_sql": "SELECT T1.name, T1.age, T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Alice' AND T2.year = (SELECT MAX(YEAR) FROM PersonFriend WHERE friend = 'Alice')", "pred_sql": "SELECT p.name, p.age, p.job FROM Person AS p JOIN PersonFriend AS pf ON p.name = pf.friend WHERE pf.name = 'Alice' ORDER BY pf.year ASC LIMIT 1", "source_tables": ["personfriend", "person"], "error_info": "Result not equal"}, {"sample_id": 4475, "db_id": "network_2", "score": 0, "gold_sql": "SELECT T1.name, T1.age, T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Alice' AND T2.year = (SELECT MAX(YEAR) FROM PersonFriend WHERE friend = 'Alice')", "pred_sql": "SELECT P.name, P.age, P.job FROM Person AS P JOIN PersonFriend AS PF ON P.name = PF.friend WHERE PF.name = 'Alice' ORDER BY PF.year ASC LIMIT 1", "source_tables": ["personfriend", "person"], "error_info": "Result not equal"}, {"sample_id": 4476, "db_id": "network_2", "score": 1, "gold_sql": "SELECT name FROM person EXCEPT SELECT name FROM PersonFriend", "pred_sql": "SELECT name FROM Person WHERE NOT name IN (SELECT name FROM PersonFriend)", "source_tables": ["personfriend", "person"], "error_info": ""}, {"sample_id": 4477, "db_id": "network_2", "score": 1, "gold_sql": "SELECT name FROM person EXCEPT SELECT name FROM PersonFriend", "pred_sql": "SELECT name FROM Person WHERE NOT name IN (SELECT name FROM PersonFriend)", "source_tables": ["personfriend", "person"], "error_info": ""}, {"sample_id": 4478, "db_id": "network_2", "score": 0, "gold_sql": "SELECT T2.name, AVG(T1.age) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend GROUP BY T2.name ORDER BY AVG(T1.age) DESC LIMIT 1", "pred_sql": "SELECT pf.name FROM PersonFriend AS pf JOIN Person AS p ON pf.friend = p.name GROUP BY pf.name ORDER BY AVG(p.age) DESC LIMIT 1", "source_tables": ["personfriend", "person"], "error_info": "Result not equal"}, {"sample_id": 4479, "db_id": "network_2", "score": 1, "gold_sql": "SELECT T2.name, AVG(T1.age) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend GROUP BY T2.name ORDER BY AVG(T1.age) DESC LIMIT 1", "pred_sql": "SELECT pf.name, AVG(p.age) AS average_age FROM PersonFriend AS pf JOIN Person AS p ON pf.friend = p.name GROUP BY pf.name ORDER BY average_age DESC LIMIT 1", "source_tables": ["personfriend", "person"], "error_info": ""}, {"sample_id": 4480, "db_id": "network_2", "score": 0, "gold_sql": "SELECT COUNT(DISTINCT name) FROM PersonFriend WHERE NOT friend IN (SELECT name FROM person WHERE city = 'Austin')", "pred_sql": "SELECT COUNT(*) FROM Person WHERE NOT name IN (SELECT name FROM PersonFriend WHERE friend IN (SELECT name FROM Person WHERE city = 'Austin'))", "source_tables": ["personfriend", "person"], "error_info": "Result not equal"}, {"sample_id": 4481, "db_id": "network_2", "score": 0, "gold_sql": "SELECT COUNT(DISTINCT name) FROM PersonFriend WHERE NOT friend IN (SELECT name FROM person WHERE city = 'Austin')", "pred_sql": "SELECT COUNT(*) FROM Person WHERE NOT name IN (SELECT name FROM PersonFriend) AND city = 'Austin'", "source_tables": ["personfriend", "person"], "error_info": "Result not equal"}, {"sample_id": 4482, "db_id": "network_2", "score": 1, "gold_sql": "SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name = T2.name JOIN PersonFriend AS T3 ON T1.friend = T3.name JOIN PersonFriend AS T4 ON T3.friend = T4.name WHERE T2.name = 'Alice' AND T4.name <> 'Alice'", "pred_sql": "SELECT DISTINCT pf2.friend FROM PersonFriend AS pf1 JOIN PersonFriend AS pf2 ON pf1.friend = pf2.name WHERE pf1.name = 'Alice'", "source_tables": ["personfriend", "person"], "error_info": ""}, {"sample_id": 4483, "db_id": "network_2", "score": 1, "gold_sql": "SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name = T2.name JOIN PersonFriend AS T3 ON T1.friend = T3.name JOIN PersonFriend AS T4 ON T3.friend = T4.name WHERE T2.name = 'Alice' AND T4.name <> 'Alice'", "pred_sql": "SELECT DISTINCT pf2.friend FROM PersonFriend AS pf1 JOIN PersonFriend AS pf2 ON pf1.friend = pf2.name WHERE pf1.name = 'Alice'", "source_tables": ["personfriend", "person"], "error_info": ""}, {"sample_id": 4484, "db_id": "decoration_competition", "score": 1, "gold_sql": "SELECT COUNT(*) FROM member", "pred_sql": "SELECT COUNT(*) AS total_members FROM member", "source_tables": ["member"], "error_info": ""}, {"sample_id": 4485, "db_id": "decoration_competition", "score": 1, "gold_sql": "SELECT Name FROM member ORDER BY Name ASC", "pred_sql": "SELECT Name FROM member ORDER BY Name ASC", "source_tables": ["member"], "error_info": ""}, {"sample_id": 4486, "db_id": "decoration_competition", "score": 1, "gold_sql": "SELECT Name, Country FROM member", "pred_sql": "SELECT Name, Country FROM member", "source_tables": ["member"], "error_info": ""}, {"sample_id": 4487, "db_id": "decoration_competition", "score": 1, "gold_sql": "SELECT Name FROM member WHERE Country = 'United States' OR Country = 'Canada'", "pred_sql": "SELECT Name FROM member WHERE Country IN ('United States', 'Canada')", "source_tables": ["member"], "error_info": ""}, {"sample_id": 4488, "db_id": "decoration_competition", "score": 1, "gold_sql": "SELECT Country, COUNT(*) FROM member GROUP BY Country", "pred_sql": "SELECT Country, COUNT(Member_ID) AS Number_of_Members FROM member GROUP BY Country", "source_tables": ["member"], "error_info": ""}, {"sample_id": 4489, "db_id": "decoration_competition", "score": 0, "gold_sql": "SELECT Country FROM member GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Country, COUNT(*) AS Country_Count FROM member GROUP BY Country ORDER BY Country_Count DESC LIMIT 1", "source_tables": ["member"], "error_info": "Result not equal"}, {"sample_id": 4490, "db_id": "decoration_competition", "score": 1, "gold_sql": "SELECT Country FROM member GROUP BY Country HAVING COUNT(*) > 2", "pred_sql": "SELECT Country FROM member GROUP BY Country HAVING COUNT(Member_ID) > 2", "source_tables": ["member"], "error_info": ""}, {"sample_id": 4491, "db_id": "decoration_competition", "score": 1, "gold_sql": "SELECT Leader_Name, College_Location FROM college", "pred_sql": "SELECT Leader_Name, College_Location FROM college", "source_tables": ["college"], "error_info": ""}, {"sample_id": 4492, "db_id": "decoration_competition", "score": 1, "gold_sql": "SELECT T2.Name, T1.Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID", "pred_sql": "SELECT member.Name AS Member_Name, college.Name AS College_Name FROM member JOIN college ON member.College_ID = college.College_ID", "source_tables": ["member", "college"], "error_info": ""}, {"sample_id": 4493, "db_id": "decoration_competition", "score": 1, "gold_sql": "SELECT T2.Name, T1.College_Location FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID ORDER BY T2.Name ASC", "pred_sql": "SELECT member.Name, college.College_Location FROM member JOIN college ON member.College_ID = college.College_ID ORDER BY member.Name ASC", "source_tables": ["member", "college"], "error_info": ""}, {"sample_id": 4494, "db_id": "decoration_competition", "score": 1, "gold_sql": "SELECT DISTINCT T1.Leader_Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID WHERE T2.Country = 'Canada'", "pred_sql": "SELECT DISTINCT c.Leader_Name FROM college AS c JOIN member AS m ON c.College_ID = m.College_ID WHERE m.Country = 'Canada'", "source_tables": ["member", "college"], "error_info": ""}, {"sample_id": 4495, "db_id": "decoration_competition", "score": 1, "gold_sql": "SELECT T1.Name, T2.Decoration_Theme FROM member AS T1 JOIN round AS T2 ON T1.Member_ID = T2.Member_ID", "pred_sql": "SELECT member.Name, round.Decoration_Theme FROM member JOIN round ON member.Member_ID = round.Member_ID", "source_tables": ["member", "round"], "error_info": ""}, {"sample_id": 4496, "db_id": "decoration_competition", "score": 0, "gold_sql": "SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID = T2.Member_ID WHERE T2.Rank_in_Round > 3", "pred_sql": "SELECT member.Name FROM member JOIN round ON member.Member_ID = round.Member_ID WHERE round.Rank_in_Round < '4'", "source_tables": ["member", "round"], "error_info": "Result not equal"}, {"sample_id": 4497, "db_id": "decoration_competition", "score": 1, "gold_sql": "SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID = T2.Member_ID ORDER BY Rank_in_Round ASC", "pred_sql": "SELECT m.Name FROM member AS m JOIN round AS r ON m.Member_ID = r.Member_ID ORDER BY r.Rank_in_Round ASC", "source_tables": ["member", "round"], "error_info": ""}, {"sample_id": 4498, "db_id": "decoration_competition", "score": 1, "gold_sql": "SELECT Name FROM member WHERE NOT Member_ID IN (SELECT Member_ID FROM round)", "pred_sql": "SELECT Name FROM member WHERE NOT Member_ID IN (SELECT Member_ID FROM round)", "source_tables": ["member", "round"], "error_info": ""}, {"sample_id": 4499, "db_id": "document_management", "score": 1, "gold_sql": "SELECT document_name, access_count FROM documents ORDER BY document_name", "pred_sql": "SELECT document_name, access_count FROM Documents ORDER BY document_name ASC", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 4500, "db_id": "document_management", "score": 1, "gold_sql": "SELECT document_name, access_count FROM documents ORDER BY document_name", "pred_sql": "SELECT document_name, access_count FROM Documents ORDER BY document_name ASC", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 4501, "db_id": "document_management", "score": 1, "gold_sql": "SELECT document_name, access_count FROM documents ORDER BY access_count DESC LIMIT 1", "pred_sql": "SELECT document_name, access_count FROM Documents ORDER BY access_count DESC LIMIT 1", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 4502, "db_id": "document_management", "score": 1, "gold_sql": "SELECT document_name, access_count FROM documents ORDER BY access_count DESC LIMIT 1", "pred_sql": "SELECT document_name, access_count FROM Documents ORDER BY access_count DESC LIMIT 1", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 4503, "db_id": "document_management", "score": 0, "gold_sql": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING COUNT(*) > 4", "pred_sql": "SELECT document_type_code, COUNT(*) AS document_count FROM Documents GROUP BY document_type_code HAVING COUNT(*) > 4", "source_tables": ["documents"], "error_info": "Result not equal"}, {"sample_id": 4504, "db_id": "document_management", "score": 0, "gold_sql": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING COUNT(*) > 4", "pred_sql": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING COUNT(*) >= 4", "source_tables": ["documents"], "error_info": "Result not equal"}, {"sample_id": 4505, "db_id": "document_management", "score": 0, "gold_sql": "SELECT SUM(access_count) FROM documents GROUP BY document_type_code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT SUM(access_count) AS total_access_count FROM Documents WHERE document_type_code = (SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY SUM(access_count) DESC LIMIT 1)", "source_tables": ["documents"], "error_info": "Result not equal"}, {"sample_id": 4506, "db_id": "document_management", "score": 1, "gold_sql": "SELECT SUM(access_count) FROM documents GROUP BY document_type_code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT SUM(access_count) AS total_access_count FROM Documents WHERE document_type_code = (SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY COUNT(*) DESC LIMIT 1)", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 4507, "db_id": "document_management", "score": 1, "gold_sql": "SELECT AVG(access_count) FROM documents", "pred_sql": "SELECT AVG(access_count) AS average_access_count FROM Documents", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 4508, "db_id": "document_management", "score": 1, "gold_sql": "SELECT AVG(access_count) FROM documents", "pred_sql": "SELECT AVG(access_count) AS average_access_count FROM Documents", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 4509, "db_id": "document_management", "score": 0, "gold_sql": "SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code = t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT ds.document_structure_code, ds.document_structure_description FROM Documents AS d JOIN Document_Structures AS ds ON d.document_structure_code = ds.document_structure_code ORDER BY d.access_count ASC LIMIT 1", "source_tables": ["document_structures", "documents"], "error_info": "Result not equal"}, {"sample_id": 4510, "db_id": "document_management", "score": 1, "gold_sql": "SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code = t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT ds.document_structure_description FROM Documents AS d JOIN Document_Structures AS ds ON d.document_structure_code = ds.document_structure_code ORDER BY d.access_count ASC LIMIT 1", "source_tables": ["document_structures", "documents"], "error_info": ""}, {"sample_id": 4511, "db_id": "document_management", "score": 1, "gold_sql": "SELECT document_type_code FROM documents WHERE document_name = 'David CV'", "pred_sql": "SELECT document_type_code FROM Documents WHERE document_name = 'David CV'", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 4512, "db_id": "document_management", "score": 1, "gold_sql": "SELECT document_type_code FROM documents WHERE document_name = 'David CV'", "pred_sql": "SELECT document_type_code FROM Documents WHERE document_name = 'David CV'", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 4515, "db_id": "document_management", "score": 1, "gold_sql": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING SUM(access_count) > 10000", "pred_sql": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING SUM(access_count) > 10000", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 4516, "db_id": "document_management", "score": 1, "gold_sql": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING SUM(access_count) > 10000", "pred_sql": "SELECT DISTINCT document_type_code FROM Documents WHERE access_count <= 10000", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 4517, "db_id": "document_management", "score": 1, "gold_sql": "SELECT t2.section_title FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code WHERE t1.document_name = 'David CV'", "pred_sql": "SELECT ds.section_title FROM Document_Sections AS ds JOIN Documents AS d ON ds.document_code = d.document_code WHERE d.document_name = 'David CV'", "source_tables": ["document_sections", "documents"], "error_info": ""}, {"sample_id": 4518, "db_id": "document_management", "score": 1, "gold_sql": "SELECT t2.section_title FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code WHERE t1.document_name = 'David CV'", "pred_sql": "SELECT ds.section_title FROM Documents AS d JOIN Document_Sections AS ds ON d.document_code = ds.document_code WHERE d.document_name = 'David CV'", "source_tables": ["document_sections", "documents"], "error_info": ""}, {"sample_id": 4519, "db_id": "document_management", "score": 1, "gold_sql": "SELECT document_name FROM documents WHERE NOT document_code IN (SELECT document_code FROM document_sections)", "pred_sql": "SELECT document_name FROM Documents WHERE NOT document_code IN (SELECT DISTINCT document_code FROM Document_Sections)", "source_tables": ["document_sections", "documents"], "error_info": ""}, {"sample_id": 4520, "db_id": "document_management", "score": 1, "gold_sql": "SELECT document_name FROM documents WHERE NOT document_code IN (SELECT document_code FROM document_sections)", "pred_sql": "SELECT document_name FROM Documents WHERE NOT document_code IN (SELECT document_code FROM Document_Sections)", "source_tables": ["document_sections", "documents"], "error_info": ""}, {"sample_id": 4521, "db_id": "document_management", "score": 0, "gold_sql": "SELECT user_name, password FROM users GROUP BY role_code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT user_login, password FROM Users WHERE role_code = (SELECT role_code FROM Roles WHERE role_code IN (SELECT role_code FROM Users GROUP BY role_code ORDER BY COUNT(*) DESC LIMIT 1))", "source_tables": ["users"], "error_info": "Result not equal"}, {"sample_id": 4522, "db_id": "document_management", "score": 0, "gold_sql": "SELECT user_name, password FROM users GROUP BY role_code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT user_login, password FROM Users WHERE role_code = (SELECT role_code FROM Users GROUP BY role_code ORDER BY COUNT(*) DESC LIMIT 1)", "source_tables": ["users"], "error_info": "Result not equal"}, {"sample_id": 4523, "db_id": "document_management", "score": 1, "gold_sql": "SELECT AVG(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code = t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code = t3.functional_area_code WHERE t3.functional_area_description = 'Acknowledgement'", "pred_sql": "SELECT AVG(D.access_count) AS average_access_count FROM Documents AS D JOIN Document_Functional_Areas AS DFA ON D.document_code = DFA.document_code JOIN Functional_Areas AS FA ON DFA.functional_area_code = FA.functional_area_code WHERE FA.functional_area_description = 'Acknowledgement'", "source_tables": ["functional_areas", "document_functional_areas", "documents"], "error_info": ""}, {"sample_id": 4524, "db_id": "document_management", "score": 1, "gold_sql": "SELECT AVG(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code = t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code = t3.functional_area_code WHERE t3.functional_area_description = 'Acknowledgement'", "pred_sql": "SELECT AVG(D.access_count) AS average_access_count FROM Documents AS D JOIN Document_Functional_Areas AS DFA ON D.document_code = DFA.document_code JOIN Functional_Areas AS FA ON DFA.functional_area_code = FA.functional_area_code WHERE FA.functional_area_description = 'Acknowledgement'", "source_tables": ["functional_areas", "document_functional_areas", "documents"], "error_info": ""}, {"sample_id": 4525, "db_id": "document_management", "score": 0, "gold_sql": "SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code JOIN document_sections_images AS t3 ON t2.section_id = t3.section_id", "pred_sql": "SELECT d.document_name FROM Documents AS d LEFT JOIN Document_Sections AS ds ON d.document_code = ds.document_code LEFT JOIN Document_Sections_Images AS dsi ON ds.section_id = dsi.section_id WHERE dsi.image_id IS NULL", "source_tables": ["document_sections", "document_sections_images", "documents"], "error_info": "Result not equal"}, {"sample_id": 4526, "db_id": "document_management", "score": 0, "gold_sql": "SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code JOIN document_sections_images AS t3 ON t2.section_id = t3.section_id", "pred_sql": "SELECT d.document_name FROM Documents AS d LEFT JOIN Document_Sections AS ds ON d.document_code = ds.document_code LEFT JOIN Document_Sections_Images AS dsi ON ds.section_id = dsi.section_id WHERE dsi.image_id IS NULL", "source_tables": ["document_sections", "document_sections_images", "documents"], "error_info": "Result not equal"}, {"sample_id": 4527, "db_id": "document_management", "score": 1, "gold_sql": "SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code GROUP BY t1.document_code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT document_name FROM Documents WHERE document_code = (SELECT document_code FROM Document_Sections GROUP BY document_code ORDER BY COUNT(section_id) DESC LIMIT 1)", "source_tables": ["document_sections", "documents"], "error_info": ""}, {"sample_id": 4528, "db_id": "document_management", "score": 1, "gold_sql": "SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code GROUP BY t1.document_code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT document_name FROM Documents WHERE document_code = (SELECT document_code FROM Document_Sections GROUP BY document_code ORDER BY COUNT(section_id) DESC LIMIT 1)", "source_tables": ["document_sections", "documents"], "error_info": ""}, {"sample_id": 4529, "db_id": "document_management", "score": 1, "gold_sql": "SELECT document_name FROM documents WHERE document_name LIKE '%CV%'", "pred_sql": "SELECT document_name FROM Documents WHERE document_name LIKE '%CV%'", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 4530, "db_id": "document_management", "score": 1, "gold_sql": "SELECT document_name FROM documents WHERE document_name LIKE '%CV%'", "pred_sql": "SELECT document_name FROM Documents WHERE document_name LIKE '%CV%'", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 4531, "db_id": "document_management", "score": 0, "gold_sql": "SELECT COUNT(*) FROM users WHERE user_login = 1", "pred_sql": "SELECT COUNT(*) AS logged_in_users FROM Users", "source_tables": ["users"], "error_info": "Result not equal"}, {"sample_id": 4532, "db_id": "document_management", "score": 0, "gold_sql": "SELECT COUNT(*) FROM users WHERE user_login = 1", "pred_sql": "SELECT COUNT(*) AS logged_in_users FROM Users", "source_tables": ["users"], "error_info": "Result not equal"}, {"sample_id": 4533, "db_id": "document_management", "score": 1, "gold_sql": "SELECT role_description FROM ROLES WHERE role_code = (SELECT role_code FROM users WHERE user_login = 1 GROUP BY role_code ORDER BY COUNT(*) DESC LIMIT 1)", "pred_sql": "SELECT R.role_description FROM Roles AS R JOIN Users AS U ON R.role_code = U.role_code GROUP BY R.role_code ORDER BY COUNT(U.user_id) DESC LIMIT 1", "source_tables": ["roles", "users"], "error_info": ""}, {"sample_id": 4534, "db_id": "document_management", "score": 1, "gold_sql": "SELECT role_description FROM ROLES WHERE role_code = (SELECT role_code FROM users WHERE user_login = 1 GROUP BY role_code ORDER BY COUNT(*) DESC LIMIT 1)", "pred_sql": "SELECT R.role_description FROM Roles AS R JOIN Users AS U ON R.role_code = U.role_code GROUP BY R.role_code ORDER BY COUNT(U.user_id) DESC LIMIT 1", "source_tables": ["roles", "users"], "error_info": ""}, {"sample_id": 4535, "db_id": "document_management", "score": 0, "gold_sql": "SELECT AVG(access_count) FROM documents GROUP BY document_structure_code ORDER BY COUNT(*) ASC LIMIT 1", "pred_sql": "SELECT AVG(access_count) AS average_access_count FROM Documents WHERE document_structure_code = (SELECT document_structure_code FROM Documents GROUP BY document_structure_code ORDER BY AVG(access_count) ASC LIMIT 1)", "source_tables": ["documents"], "error_info": "Result not equal"}, {"sample_id": 4536, "db_id": "document_management", "score": 1, "gold_sql": "SELECT AVG(access_count) FROM documents GROUP BY document_structure_code ORDER BY COUNT(*) ASC LIMIT 1", "pred_sql": "SELECT AVG(access_count) AS average_access_count FROM Documents WHERE document_structure_code = (SELECT document_structure_code FROM Documents GROUP BY document_structure_code ORDER BY COUNT(*) ASC LIMIT 1)", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 4537, "db_id": "document_management", "score": 1, "gold_sql": "SELECT image_name, image_url FROM images ORDER BY image_name", "pred_sql": "SELECT image_name, image_url FROM Images ORDER BY image_name", "source_tables": ["images"], "error_info": ""}, {"sample_id": 4538, "db_id": "document_management", "score": 1, "gold_sql": "SELECT image_name, image_url FROM images ORDER BY image_name", "pred_sql": "SELECT image_name, image_url FROM Images ORDER BY image_name ASC", "source_tables": ["images"], "error_info": ""}, {"sample_id": 4539, "db_id": "document_management", "score": 1, "gold_sql": "SELECT COUNT(*), role_code FROM users GROUP BY role_code", "pred_sql": "SELECT r.role_code, COUNT(u.user_id) AS user_count FROM Roles AS r LEFT JOIN Users AS u ON r.role_code = u.role_code GROUP BY r.role_code", "source_tables": ["users"], "error_info": ""}, {"sample_id": 4540, "db_id": "document_management", "score": 1, "gold_sql": "SELECT COUNT(*), role_code FROM users GROUP BY role_code", "pred_sql": "SELECT role_code, COUNT(user_id) AS user_count FROM Users GROUP BY role_code", "source_tables": ["users"], "error_info": ""}, {"sample_id": 4541, "db_id": "document_management", "score": 1, "gold_sql": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING COUNT(*) > 2", "pred_sql": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING COUNT(document_code) > 2", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 4542, "db_id": "document_management", "score": 1, "gold_sql": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING COUNT(*) > 2", "pred_sql": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING COUNT(document_code) > 2", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 4543, "db_id": "company_office", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Companies", "pred_sql": "SELECT COUNT(*) AS company_count FROM Companies", "source_tables": ["companies"], "error_info": ""}, {"sample_id": 4544, "db_id": "company_office", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Companies", "pred_sql": "SELECT COUNT(*) AS company_count FROM Companies", "source_tables": ["companies"], "error_info": ""}, {"sample_id": 4545, "db_id": "company_office", "score": 1, "gold_sql": "SELECT name FROM Companies ORDER BY Market_Value_billion DESC", "pred_sql": "SELECT name FROM Companies ORDER BY Market_Value_billion DESC", "source_tables": ["companies"], "error_info": ""}, {"sample_id": 4546, "db_id": "company_office", "score": 1, "gold_sql": "SELECT name FROM Companies ORDER BY Market_Value_billion DESC", "pred_sql": "SELECT name FROM Companies ORDER BY Market_Value_billion DESC", "source_tables": ["companies"], "error_info": ""}, {"sample_id": 4547, "db_id": "company_office", "score": 1, "gold_sql": "SELECT name FROM Companies WHERE Headquarters <> 'USA'", "pred_sql": "SELECT name FROM Companies WHERE Headquarters <> 'USA'", "source_tables": ["companies"], "error_info": ""}, {"sample_id": 4548, "db_id": "company_office", "score": 1, "gold_sql": "SELECT name FROM Companies WHERE Headquarters <> 'USA'", "pred_sql": "SELECT name FROM Companies WHERE Headquarters <> 'USA'", "source_tables": ["companies"], "error_info": ""}, {"sample_id": 4549, "db_id": "company_office", "score": 1, "gold_sql": "SELECT name, Assets_billion FROM Companies ORDER BY name ASC", "pred_sql": "SELECT name, Assets_billion FROM Companies ORDER BY name ASC", "source_tables": ["companies"], "error_info": ""}, {"sample_id": 4550, "db_id": "company_office", "score": 1, "gold_sql": "SELECT name, Assets_billion FROM Companies ORDER BY name ASC", "pred_sql": "SELECT name, Assets_billion FROM Companies ORDER BY name ASC", "source_tables": ["companies"], "error_info": ""}, {"sample_id": 4551, "db_id": "company_office", "score": 1, "gold_sql": "SELECT AVG(Profits_billion) FROM Companies", "pred_sql": "SELECT AVG(Profits_billion) AS average_profits FROM Companies", "source_tables": ["companies"], "error_info": ""}, {"sample_id": 4552, "db_id": "company_office", "score": 1, "gold_sql": "SELECT AVG(Profits_billion) FROM Companies", "pred_sql": "SELECT AVG(Profits_billion) AS average_profits FROM Companies", "source_tables": ["companies"], "error_info": ""}, {"sample_id": 4553, "db_id": "company_office", "score": 1, "gold_sql": "SELECT MAX(Sales_billion), MIN(Sales_billion) FROM Companies WHERE Industry <> 'Banking'", "pred_sql": "SELECT MAX(Sales_billion) AS max_sales, MIN(Sales_billion) AS min_sales FROM Companies WHERE Industry <> 'Banking'", "source_tables": ["companies"], "error_info": ""}, {"sample_id": 4554, "db_id": "company_office", "score": 1, "gold_sql": "SELECT MAX(Sales_billion), MIN(Sales_billion) FROM Companies WHERE Industry <> 'Banking'", "pred_sql": "SELECT MAX(Sales_billion) AS max_sales, MIN(Sales_billion) AS min_sales FROM Companies WHERE Industry <> 'Banking'", "source_tables": ["companies"], "error_info": ""}, {"sample_id": 4555, "db_id": "company_office", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT Industry) FROM Companies", "pred_sql": "SELECT COUNT(DISTINCT Industry) AS different_industries FROM Companies", "source_tables": ["companies"], "error_info": ""}, {"sample_id": 4556, "db_id": "company_office", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT Industry) FROM Companies", "pred_sql": "SELECT COUNT(DISTINCT Industry) AS distinct_industries_count FROM Companies", "source_tables": ["companies"], "error_info": ""}, {"sample_id": 4557, "db_id": "company_office", "score": 1, "gold_sql": "SELECT name FROM buildings ORDER BY Height DESC", "pred_sql": "SELECT name FROM buildings ORDER BY Height DESC", "source_tables": ["buildings"], "error_info": ""}, {"sample_id": 4558, "db_id": "company_office", "score": 1, "gold_sql": "SELECT name FROM buildings ORDER BY Height DESC", "pred_sql": "SELECT name FROM buildings ORDER BY Height DESC", "source_tables": ["buildings"], "error_info": ""}, {"sample_id": 4559, "db_id": "company_office", "score": 1, "gold_sql": "SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1", "pred_sql": "SELECT Stories FROM buildings WHERE Height = (SELECT MAX(Height) FROM buildings)", "source_tables": ["buildings"], "error_info": ""}, {"sample_id": 4560, "db_id": "company_office", "score": 1, "gold_sql": "SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1", "pred_sql": "SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1", "source_tables": ["buildings"], "error_info": ""}, {"sample_id": 4561, "db_id": "company_office", "score": 1, "gold_sql": "SELECT T3.name, T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id", "pred_sql": "SELECT buildings.name AS building_name, Companies.name AS company_name FROM buildings JOIN Office_locations ON buildings.id = Office_locations.building_id JOIN Companies ON Office_locations.company_id = Companies.id", "source_tables": ["buildings", "office_locations", "companies"], "error_info": ""}, {"sample_id": 4562, "db_id": "company_office", "score": 1, "gold_sql": "SELECT T3.name, T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id", "pred_sql": "SELECT Companies.name AS company_name, buildings.name AS building_name FROM Companies JOIN Office_locations ON Companies.id = Office_locations.company_id JOIN buildings ON Office_locations.building_id = buildings.id", "source_tables": ["buildings", "office_locations", "companies"], "error_info": ""}, {"sample_id": 4563, "db_id": "company_office", "score": 1, "gold_sql": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id GROUP BY T1.building_id HAVING COUNT(*) > 1", "pred_sql": "SELECT b.name FROM buildings AS b JOIN Office_locations AS o ON b.id = o.building_id GROUP BY b.id HAVING COUNT(o.company_id) > 1", "source_tables": ["buildings", "office_locations", "companies"], "error_info": ""}, {"sample_id": 4564, "db_id": "company_office", "score": 1, "gold_sql": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id GROUP BY T1.building_id HAVING COUNT(*) > 1", "pred_sql": "SELECT b.name FROM buildings AS b JOIN Office_locations AS o ON b.id = o.building_id GROUP BY b.id HAVING COUNT(o.company_id) > 1", "source_tables": ["buildings", "office_locations", "companies"], "error_info": ""}, {"sample_id": 4565, "db_id": "company_office", "score": 1, "gold_sql": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT b.name FROM buildings AS b JOIN Office_locations AS o ON b.id = o.building_id GROUP BY b.id ORDER BY COUNT(o.company_id) DESC LIMIT 1", "source_tables": ["buildings", "office_locations", "companies"], "error_info": ""}, {"sample_id": 4566, "db_id": "company_office", "score": 1, "gold_sql": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT b.name FROM buildings AS b JOIN Office_locations AS o ON b.id = o.building_id GROUP BY b.id ORDER BY COUNT(o.company_id) DESC LIMIT 1", "source_tables": ["buildings", "office_locations", "companies"], "error_info": ""}, {"sample_id": 4567, "db_id": "company_office", "score": 1, "gold_sql": "SELECT name FROM buildings WHERE Status = 'on-hold' ORDER BY Stories ASC", "pred_sql": "SELECT name FROM buildings WHERE Status = 'on-hold' ORDER BY Stories ASC", "source_tables": ["buildings"], "error_info": ""}, {"sample_id": 4568, "db_id": "company_office", "score": 1, "gold_sql": "SELECT name FROM buildings WHERE Status = 'on-hold' ORDER BY Stories ASC", "pred_sql": "SELECT name FROM buildings WHERE Status = 'on-hold' ORDER BY Stories ASC", "source_tables": ["buildings"], "error_info": ""}, {"sample_id": 4569, "db_id": "company_office", "score": 1, "gold_sql": "SELECT Industry, COUNT(*) FROM Companies GROUP BY Industry", "pred_sql": "SELECT Industry, COUNT(*) AS number_of_companies FROM Companies GROUP BY Industry", "source_tables": ["companies"], "error_info": ""}, {"sample_id": 4570, "db_id": "company_office", "score": 1, "gold_sql": "SELECT Industry, COUNT(*) FROM Companies GROUP BY Industry", "pred_sql": "SELECT Industry, COUNT(*) AS number_of_companies FROM Companies GROUP BY Industry", "source_tables": ["companies"], "error_info": ""}, {"sample_id": 4571, "db_id": "company_office", "score": 0, "gold_sql": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC", "pred_sql": "SELECT Industry, COUNT(*) AS company_count FROM Companies GROUP BY Industry ORDER BY company_count DESC", "source_tables": ["companies"], "error_info": "Result not equal"}, {"sample_id": 4572, "db_id": "company_office", "score": 0, "gold_sql": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC", "pred_sql": "SELECT Industry, COUNT(*) AS company_count FROM Companies GROUP BY Industry ORDER BY company_count DESC", "source_tables": ["companies"], "error_info": "Result not equal"}, {"sample_id": 4573, "db_id": "company_office", "score": 0, "gold_sql": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Industry, COUNT(*) AS company_count FROM Companies GROUP BY Industry ORDER BY company_count DESC LIMIT 1", "source_tables": ["companies"], "error_info": "Result not equal"}, {"sample_id": 4574, "db_id": "company_office", "score": 0, "gold_sql": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Industry, COUNT(*) AS company_count FROM Companies GROUP BY Industry ORDER BY company_count DESC LIMIT 1", "source_tables": ["companies"], "error_info": "Result not equal"}, {"sample_id": 4575, "db_id": "company_office", "score": 1, "gold_sql": "SELECT name FROM buildings WHERE NOT id IN (SELECT building_id FROM Office_locations)", "pred_sql": "SELECT name FROM buildings WHERE NOT id IN (SELECT building_id FROM Office_locations)", "source_tables": ["buildings", "office_locations"], "error_info": ""}, {"sample_id": 4576, "db_id": "company_office", "score": 1, "gold_sql": "SELECT name FROM buildings WHERE NOT id IN (SELECT building_id FROM Office_locations)", "pred_sql": "SELECT name FROM buildings WHERE NOT id IN (SELECT building_id FROM Office_locations)", "source_tables": ["buildings", "office_locations"], "error_info": ""}, {"sample_id": 4577, "db_id": "company_office", "score": 1, "gold_sql": "SELECT Industry FROM Companies WHERE Headquarters = 'USA' INTERSECT SELECT Industry FROM Companies WHERE Headquarters = 'China'", "pred_sql": "SELECT DISTINCT c1.Industry FROM Companies AS c1 JOIN Companies AS c2 ON c1.Industry = c2.Industry WHERE c1.Headquarters = 'USA' AND c2.Headquarters = 'China'", "source_tables": ["companies"], "error_info": ""}, {"sample_id": 4578, "db_id": "company_office", "score": 0, "gold_sql": "SELECT Industry FROM Companies WHERE Headquarters = 'USA' INTERSECT SELECT Industry FROM Companies WHERE Headquarters = 'China'", "pred_sql": "SELECT DISTINCT c1.Industry FROM Companies AS c1 JOIN Office_locations AS ol1 ON c1.id = ol1.company_id WHERE c1.Headquarters = 'USA' AND c1.Industry IN (SELECT c2.Industry FROM Companies AS c2 JOIN Office_locations AS ol2 ON c2.id = ol2.company_id WHERE c2.Headquarters = 'China')", "source_tables": ["companies"], "error_info": "Result not equal"}, {"sample_id": 4579, "db_id": "company_office", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Companies WHERE Industry = 'Banking' OR Industry = 'Conglomerate'", "pred_sql": "SELECT COUNT(*) AS number_of_companies FROM Companies WHERE Industry IN ('Banking', 'Conglomerate')", "source_tables": ["companies"], "error_info": ""}, {"sample_id": 4580, "db_id": "company_office", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Companies WHERE Industry = 'Banking' OR Industry = 'Conglomerate'", "pred_sql": "SELECT COUNT(*) AS company_count FROM Companies WHERE Industry IN ('Banking', 'Conglomerate')", "source_tables": ["companies"], "error_info": ""}, {"sample_id": 4581, "db_id": "company_office", "score": 1, "gold_sql": "SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*) > 2", "pred_sql": "SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*) > 2", "source_tables": ["companies"], "error_info": ""}, {"sample_id": 4582, "db_id": "company_office", "score": 0, "gold_sql": "SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*) > 2", "pred_sql": "SELECT Headquarters, COUNT(*) AS company_count FROM Companies GROUP BY Headquarters HAVING COUNT(*) > 2", "source_tables": ["companies"], "error_info": "Result not equal"}, {"sample_id": 4583, "db_id": "solvency_ii", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Products", "pred_sql": "SELECT COUNT(*) AS total_products FROM Products", "source_tables": ["products"], "error_info": ""}, {"sample_id": 4584, "db_id": "solvency_ii", "score": 1, "gold_sql": "SELECT Product_Name FROM Products ORDER BY Product_Price ASC", "pred_sql": "SELECT Product_Name FROM Products ORDER BY Product_Price ASC", "source_tables": ["products"], "error_info": ""}, {"sample_id": 4585, "db_id": "solvency_ii", "score": 1, "gold_sql": "SELECT Product_Name, Product_Type_Code FROM Products", "pred_sql": "SELECT Product_Name, Product_Type_Code FROM Products", "source_tables": ["products"], "error_info": ""}, {"sample_id": 4586, "db_id": "solvency_ii", "score": 1, "gold_sql": "SELECT Product_Price FROM Products WHERE Product_Name = 'Dining' OR Product_Name = 'Trading Policy'", "pred_sql": "SELECT Product_Price FROM Products WHERE Product_Name IN ('Dining', 'Trading Policy')", "source_tables": ["products"], "error_info": ""}, {"sample_id": 4587, "db_id": "solvency_ii", "score": 1, "gold_sql": "SELECT AVG(Product_Price) FROM Products", "pred_sql": "SELECT AVG(Product_Price) AS Average_Price FROM Products", "source_tables": ["products"], "error_info": ""}, {"sample_id": 4588, "db_id": "solvency_ii", "score": 1, "gold_sql": "SELECT Product_Name FROM Products ORDER BY Product_Price DESC LIMIT 1", "pred_sql": "SELECT Product_Name FROM Products ORDER BY Product_Price DESC LIMIT 1", "source_tables": ["products"], "error_info": ""}, {"sample_id": 4589, "db_id": "solvency_ii", "score": 1, "gold_sql": "SELECT Product_Type_Code, COUNT(*) FROM Products GROUP BY Product_Type_Code", "pred_sql": "SELECT Product_Type_Code, COUNT(Product_ID) AS Number_of_Products FROM Products GROUP BY Product_Type_Code", "source_tables": ["products"], "error_info": ""}, {"sample_id": 4590, "db_id": "solvency_ii", "score": 0, "gold_sql": "SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Product_Type_Code, COUNT(*) AS count FROM Products GROUP BY Product_Type_Code ORDER BY count DESC LIMIT 1", "source_tables": ["products"], "error_info": "Result not equal"}, {"sample_id": 4591, "db_id": "solvency_ii", "score": 1, "gold_sql": "SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code HAVING COUNT(*) >= 2", "pred_sql": "SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code HAVING COUNT(Product_ID) >= 2", "source_tables": ["products"], "error_info": ""}, {"sample_id": 4592, "db_id": "solvency_ii", "score": 1, "gold_sql": "SELECT Product_Type_Code FROM Products WHERE Product_Price > 4500 INTERSECT SELECT Product_Type_Code FROM Products WHERE Product_Price < 3000", "pred_sql": "SELECT Product_Type_Code FROM Products WHERE Product_Price > 4500 OR Product_Price < 3000 GROUP BY Product_Type_Code HAVING COUNT(CASE WHEN Product_Price > 4500 THEN 1 END) > 0 AND COUNT(CASE WHEN Product_Price < 3000 THEN 1 END) > 0", "source_tables": ["products"], "error_info": ""}, {"sample_id": 4593, "db_id": "solvency_ii", "score": 1, "gold_sql": "SELECT T1.Product_Name, COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID GROUP BY T1.Product_Name", "pred_sql": "SELECT Products.Product_Name, COUNT(Products_in_Events.Event_ID) AS Number_of_Events FROM Products JOIN Products_in_Events ON Products.Product_ID = Products_in_Events.Product_ID GROUP BY Products.Product_Name", "source_tables": ["products", "products_in_events"], "error_info": ""}, {"sample_id": 4594, "db_id": "solvency_ii", "score": 1, "gold_sql": "SELECT T1.Product_Name, COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID GROUP BY T1.Product_Name ORDER BY COUNT(*) DESC", "pred_sql": "SELECT Products.Product_Name, COUNT(Products_in_Events.Event_ID) AS Event_Count FROM Products JOIN Products_in_Events ON Products.Product_ID = Products_in_Events.Product_ID GROUP BY Products.Product_Name ORDER BY Event_Count DESC", "source_tables": ["products", "products_in_events"], "error_info": ""}, {"sample_id": 4595, "db_id": "solvency_ii", "score": 1, "gold_sql": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*) >= 2", "pred_sql": "SELECT P.Product_Name FROM Products AS P JOIN Products_in_Events AS PE ON P.Product_ID = PE.Product_ID GROUP BY P.Product_ID HAVING COUNT(PE.Event_ID) >= 2", "source_tables": ["products", "products_in_events"], "error_info": ""}, {"sample_id": 4596, "db_id": "solvency_ii", "score": 1, "gold_sql": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*) >= 2 ORDER BY T1.Product_Name", "pred_sql": "SELECT p.Product_Name FROM Products AS p JOIN Products_in_Events AS pie ON p.Product_ID = pie.Product_ID JOIN Events AS e ON pie.Event_ID = e.Event_ID GROUP BY p.Product_ID HAVING COUNT(e.Event_ID) >= 2 ORDER BY p.Product_Name ASC", "source_tables": ["products", "products_in_events"], "error_info": ""}, {"sample_id": 4597, "db_id": "solvency_ii", "score": 1, "gold_sql": "SELECT Product_Name FROM Products WHERE NOT Product_ID IN (SELECT Product_ID FROM Products_in_Events)", "pred_sql": "SELECT Product_Name FROM Products WHERE NOT Product_ID IN (SELECT Product_ID FROM Products_in_Events)", "source_tables": ["products", "products_in_events"], "error_info": ""}, {"sample_id": 4598, "db_id": "entertainment_awards", "score": 1, "gold_sql": "SELECT COUNT(*) FROM artwork", "pred_sql": "SELECT COUNT(*) AS total_artworks FROM artwork", "source_tables": ["artwork"], "error_info": ""}, {"sample_id": 4599, "db_id": "entertainment_awards", "score": 1, "gold_sql": "SELECT Name FROM artwork ORDER BY Name ASC", "pred_sql": "SELECT Name FROM artwork ORDER BY Name ASC", "source_tables": ["artwork"], "error_info": ""}, {"sample_id": 4600, "db_id": "entertainment_awards", "score": 0, "gold_sql": "SELECT Name FROM artwork WHERE TYPE <> 'Program Talent Show'", "pred_sql": "SELECT Name FROM artwork WHERE Type <> (SELECT Type FROM artwork WHERE Name = 'Program Talent Show')", "source_tables": ["artwork"], "error_info": "Result not equal"}, {"sample_id": 4601, "db_id": "entertainment_awards", "score": 1, "gold_sql": "SELECT Festival_Name, LOCATION FROM festival_detail", "pred_sql": "SELECT Festival_Name, Location FROM festival_detail", "source_tables": ["festival_detail"], "error_info": ""}, {"sample_id": 4602, "db_id": "entertainment_awards", "score": 1, "gold_sql": "SELECT Chair_Name FROM festival_detail ORDER BY YEAR ASC", "pred_sql": "SELECT Chair_Name FROM festival_detail ORDER BY Year ASC", "source_tables": ["festival_detail"], "error_info": ""}, {"sample_id": 4603, "db_id": "entertainment_awards", "score": 1, "gold_sql": "SELECT LOCATION FROM festival_detail ORDER BY Num_of_Audience DESC LIMIT 1", "pred_sql": "SELECT Location FROM festival_detail ORDER BY Num_of_Audience DESC LIMIT 1", "source_tables": ["festival_detail"], "error_info": ""}, {"sample_id": 4604, "db_id": "entertainment_awards", "score": 1, "gold_sql": "SELECT Festival_Name FROM festival_detail WHERE YEAR = 2007", "pred_sql": "SELECT Festival_Name FROM festival_detail WHERE Year = '2007'", "source_tables": ["festival_detail"], "error_info": ""}, {"sample_id": 4605, "db_id": "entertainment_awards", "score": 1, "gold_sql": "SELECT AVG(Num_of_Audience) FROM festival_detail", "pred_sql": "SELECT AVG(Num_of_Audience) AS Average_Audience FROM festival_detail", "source_tables": ["festival_detail"], "error_info": ""}, {"sample_id": 4606, "db_id": "entertainment_awards", "score": 1, "gold_sql": "SELECT Festival_Name FROM festival_detail ORDER BY YEAR DESC LIMIT 3", "pred_sql": "SELECT Festival_Name FROM festival_detail ORDER BY Year DESC LIMIT 3", "source_tables": ["festival_detail"], "error_info": ""}, {"sample_id": 4607, "db_id": "entertainment_awards", "score": 1, "gold_sql": "SELECT T2.Name, T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID", "pred_sql": "SELECT artwork.Name, festival_detail.Festival_Name FROM nomination JOIN artwork ON nomination.Artwork_ID = artwork.Artwork_ID JOIN festival_detail ON nomination.Festival_ID = festival_detail.Festival_ID", "source_tables": ["festival_detail", "nomination", "artwork"], "error_info": ""}, {"sample_id": 4608, "db_id": "entertainment_awards", "score": 1, "gold_sql": "SELECT DISTINCT T2.Type FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID WHERE T3.Year = 2007", "pred_sql": "SELECT DISTINCT a.Type FROM artwork AS a JOIN nomination AS n ON a.Artwork_ID = n.Artwork_ID JOIN festival_detail AS f ON n.Festival_ID = f.Festival_ID WHERE f.Year = '2007'", "source_tables": ["festival_detail", "nomination", "artwork"], "error_info": ""}, {"sample_id": 4609, "db_id": "entertainment_awards", "score": 1, "gold_sql": "SELECT T2.Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID ORDER BY T3.Year", "pred_sql": "SELECT artwork.Name FROM artwork JOIN nomination ON artwork.Artwork_ID = nomination.Artwork_ID JOIN festival_detail ON nomination.Festival_ID = festival_detail.Festival_ID ORDER BY festival_detail.Year ASC", "source_tables": ["festival_detail", "nomination", "artwork"], "error_info": ""}, {"sample_id": 4610, "db_id": "entertainment_awards", "score": 0, "gold_sql": "SELECT T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID WHERE T2.Type = 'Program Talent Show'", "pred_sql": "SELECT fd.Festival_Name FROM festival_detail AS fd JOIN nomination AS n ON fd.Festival_ID = n.Festival_ID JOIN artwork AS a ON n.Artwork_ID = a.Artwork_ID WHERE a.Type = (SELECT Artwork_ID FROM artwork WHERE Name = 'Program Talent Show')", "source_tables": ["festival_detail", "nomination", "artwork"], "error_info": "Result not equal"}, {"sample_id": 4611, "db_id": "entertainment_awards", "score": 1, "gold_sql": "SELECT T1.Festival_ID, T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID GROUP BY T1.Festival_ID HAVING COUNT(*) >= 2", "pred_sql": "SELECT fd.Festival_ID, fd.Festival_Name FROM festival_detail AS fd JOIN nomination AS n ON fd.Festival_ID = n.Festival_ID GROUP BY fd.Festival_ID, fd.Festival_Name HAVING COUNT(n.Artwork_ID) >= 2", "source_tables": ["festival_detail", "nomination", "artwork"], "error_info": ""}, {"sample_id": 4612, "db_id": "entertainment_awards", "score": 0, "gold_sql": "SELECT T1.Festival_ID, T3.Festival_Name, COUNT(*) FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID GROUP BY T1.Festival_ID", "pred_sql": "SELECT fd.Festival_ID, fd.Festival_Name, COUNT(n.Artwork_ID) AS Num_of_Artworks FROM festival_detail AS fd LEFT JOIN nomination AS n ON fd.Festival_ID = n.Festival_ID GROUP BY fd.Festival_ID, fd.Festival_Name", "source_tables": ["festival_detail", "nomination", "artwork"], "error_info": "Result not equal"}, {"sample_id": 4613, "db_id": "entertainment_awards", "score": 1, "gold_sql": "SELECT TYPE, COUNT(*) FROM artwork GROUP BY TYPE", "pred_sql": "SELECT Type, COUNT(*) AS Number_of_Artworks FROM artwork GROUP BY Type", "source_tables": ["artwork"], "error_info": ""}, {"sample_id": 4614, "db_id": "entertainment_awards", "score": 0, "gold_sql": "SELECT TYPE FROM artwork GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Type, COUNT(*) AS Count FROM artwork GROUP BY Type ORDER BY Count DESC", "source_tables": ["artwork"], "error_info": "Result not equal"}, {"sample_id": 4615, "db_id": "entertainment_awards", "score": 1, "gold_sql": "SELECT YEAR FROM festival_detail GROUP BY YEAR HAVING COUNT(*) > 1", "pred_sql": "SELECT Year FROM festival_detail GROUP BY Year HAVING COUNT(Festival_ID) > 1", "source_tables": ["festival_detail"], "error_info": ""}, {"sample_id": 4616, "db_id": "entertainment_awards", "score": 1, "gold_sql": "SELECT Name FROM Artwork WHERE NOT Artwork_ID IN (SELECT Artwork_ID FROM nomination)", "pred_sql": "SELECT a.Name FROM artwork AS a LEFT JOIN nomination AS n ON a.Artwork_ID = n.Artwork_ID WHERE n.Artwork_ID IS NULL", "source_tables": ["nomination", "artwork"], "error_info": ""}, {"sample_id": 4617, "db_id": "entertainment_awards", "score": 1, "gold_sql": "SELECT Num_of_Audience FROM festival_detail WHERE YEAR = 2008 OR YEAR = 2010", "pred_sql": "SELECT Num_of_Audience FROM festival_detail WHERE Year IN ('2008', '2010')", "source_tables": ["festival_detail"], "error_info": ""}, {"sample_id": 4618, "db_id": "entertainment_awards", "score": 1, "gold_sql": "SELECT SUM(Num_of_Audience) FROM festival_detail", "pred_sql": "SELECT SUM(Num_of_Audience) AS Total_Audience FROM festival_detail", "source_tables": ["festival_detail"], "error_info": ""}, {"sample_id": 4619, "db_id": "entertainment_awards", "score": 1, "gold_sql": "SELECT YEAR FROM festival_detail WHERE LOCATION = 'United States' INTERSECT SELECT YEAR FROM festival_detail WHERE LOCATION <> 'United States'", "pred_sql": "SELECT DISTINCT Year FROM festival_detail WHERE Location = 'United States' OR Location <> 'United States' GROUP BY Year HAVING COUNT(DISTINCT CASE WHEN Location = 'United States' THEN 1 END) > 0 AND COUNT(DISTINCT CASE WHEN Location <> 'United States' THEN 1 END) > 0", "source_tables": ["festival_detail"], "error_info": ""}, {"sample_id": 4620, "db_id": "customers_campaigns_ecommerce", "score": 1, "gold_sql": "SELECT COUNT(*) FROM premises", "pred_sql": "SELECT COUNT(*) AS total_premises FROM Premises", "source_tables": ["premises"], "error_info": ""}, {"sample_id": 4621, "db_id": "customers_campaigns_ecommerce", "score": 1, "gold_sql": "SELECT DISTINCT premises_type FROM premises", "pred_sql": "SELECT DISTINCT premises_type FROM Premises", "source_tables": ["premises"], "error_info": ""}, {"sample_id": 4622, "db_id": "customers_campaigns_ecommerce", "score": 1, "gold_sql": "SELECT premises_type, premise_details FROM premises ORDER BY premises_type", "pred_sql": "SELECT premises_type, premise_details FROM Premises ORDER BY premises_type", "source_tables": ["premises"], "error_info": ""}, {"sample_id": 4623, "db_id": "customers_campaigns_ecommerce", "score": 1, "gold_sql": "SELECT premises_type, COUNT(*) FROM premises GROUP BY premises_type", "pred_sql": "SELECT premises_type, COUNT(premise_id) AS number_of_premises FROM Premises GROUP BY premises_type", "source_tables": ["premises"], "error_info": ""}, {"sample_id": 4624, "db_id": "customers_campaigns_ecommerce", "score": 1, "gold_sql": "SELECT product_category, COUNT(*) FROM mailshot_campaigns GROUP BY product_category", "pred_sql": "SELECT DISTINCT product_category, COUNT(mailshot_id) AS mailshot_count FROM Mailshot_Campaigns GROUP BY product_category", "source_tables": ["mailshot_campaigns"], "error_info": ""}, {"sample_id": 4625, "db_id": "customers_campaigns_ecommerce", "score": 1, "gold_sql": "SELECT customer_name, customer_phone FROM customers WHERE NOT customer_id IN (SELECT customer_id FROM mailshot_customers)", "pred_sql": "SELECT customer_name, customer_phone FROM Customers WHERE NOT customer_id IN (SELECT customer_id FROM Mailshot_Customers)", "source_tables": ["customers", "mailshot_customers"], "error_info": ""}, {"sample_id": 4626, "db_id": "customers_campaigns_ecommerce", "score": 1, "gold_sql": "SELECT T1.customer_name, T1.customer_phone FROM customers AS T1 JOIN mailshot_customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.outcome_code = 'No Response'", "pred_sql": "SELECT Customers.customer_name, Customers.customer_phone FROM Customers JOIN Mailshot_Customers ON Customers.customer_id = Mailshot_Customers.customer_id WHERE Mailshot_Customers.outcome_code = 'No Response'", "source_tables": ["customers", "mailshot_customers"], "error_info": ""}, {"sample_id": 4627, "db_id": "customers_campaigns_ecommerce", "score": 1, "gold_sql": "SELECT outcome_code, COUNT(*) FROM mailshot_customers GROUP BY outcome_code", "pred_sql": "SELECT outcome_code, COUNT(mailshot_id) AS number_of_mailshots FROM Mailshot_Customers GROUP BY outcome_code", "source_tables": ["mailshot_customers"], "error_info": ""}, {"sample_id": 4628, "db_id": "customers_campaigns_ecommerce", "score": 1, "gold_sql": "SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id WHERE outcome_code = 'Order' GROUP BY T1.customer_id HAVING COUNT(*) >= 2", "pred_sql": "SELECT c.customer_name FROM Customers AS c JOIN Mailshot_Customers AS mc ON c.customer_id = mc.customer_id WHERE mc.outcome_code = 'Order' GROUP BY c.customer_id HAVING COUNT(mc.mailshot_id) >= 2", "source_tables": ["customers", "mailshot_customers"], "error_info": ""}, {"sample_id": 4629, "db_id": "customers_campaigns_ecommerce", "score": 1, "gold_sql": "SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT C.customer_name FROM Customers AS C JOIN Mailshot_Customers AS MC ON C.customer_id = MC.customer_id GROUP BY C.customer_id ORDER BY COUNT(MC.mailshot_id) DESC LIMIT 1", "source_tables": ["customers", "mailshot_customers"], "error_info": ""}, {"sample_id": 4630, "db_id": "customers_campaigns_ecommerce", "score": 1, "gold_sql": "SELECT T2.customer_name, T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.outcome_code = 'Order' INTERSECT SELECT T2.customer_name, T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.outcome_code = 'No Response'", "pred_sql": "SELECT DISTINCT c.customer_name, c.payment_method FROM Customers AS c JOIN Mailshot_Customers AS mc1 ON c.customer_id = mc1.customer_id JOIN Mailshot_Campaigns AS m1 ON mc1.mailshot_id = m1.mailshot_id JOIN Mailshot_Customers AS mc2 ON c.customer_id = mc2.customer_id JOIN Mailshot_Campaigns AS m2 ON mc2.mailshot_id = m2.mailshot_id WHERE mc1.outcome_code = 'Order' AND mc2.outcome_code = 'No Response'", "source_tables": ["customers", "mailshot_customers"], "error_info": ""}, {"sample_id": 4631, "db_id": "customers_campaigns_ecommerce", "score": 1, "gold_sql": "SELECT T2.premises_type, T1.address_type_code FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id", "pred_sql": "SELECT P.premises_type, CA.address_type_code FROM Customer_Addresses AS CA JOIN Premises AS P ON CA.premise_id = P.premise_id", "source_tables": ["premises", "customer_addresses"], "error_info": ""}, {"sample_id": 4632, "db_id": "customers_campaigns_ecommerce", "score": 1, "gold_sql": "SELECT DISTINCT address_type_code FROM customer_addresses", "pred_sql": "SELECT DISTINCT address_type_code FROM Customer_Addresses", "source_tables": ["customer_addresses"], "error_info": ""}, {"sample_id": 4633, "db_id": "customers_campaigns_ecommerce", "score": 1, "gold_sql": "SELECT order_shipping_charges, customer_id FROM customer_orders WHERE order_status_code = 'Cancelled' OR order_status_code = 'Paid'", "pred_sql": "SELECT customer_id, order_shipping_charges FROM Customer_Orders WHERE order_status_code IN ('Cancelled', 'Paid')", "source_tables": ["customer_orders"], "error_info": ""}, {"sample_id": 4634, "db_id": "customers_campaigns_ecommerce", "score": 1, "gold_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE shipping_method_code = 'FedEx' AND order_status_code = 'Paid'", "pred_sql": "SELECT DISTINCT Customers.customer_name FROM Customers JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id WHERE Customer_Orders.shipping_method_code = 'FedEx' AND Customer_Orders.order_status_code = 'Paid'", "source_tables": ["customer_orders", "customers"], "error_info": ""}, {"sample_id": 4635, "db_id": "college_3", "score": 1, "gold_sql": "SELECT COUNT(*) FROM COURSE", "pred_sql": "SELECT COUNT(*) AS total_courses FROM Course", "source_tables": ["course"], "error_info": ""}, {"sample_id": 4636, "db_id": "college_3", "score": 1, "gold_sql": "SELECT COUNT(*) FROM COURSE", "pred_sql": "SELECT COUNT(*) AS CourseCount FROM Course", "source_tables": ["course"], "error_info": ""}, {"sample_id": 4637, "db_id": "college_3", "score": 1, "gold_sql": "SELECT COUNT(*) FROM COURSE WHERE Credits > 2", "pred_sql": "SELECT COUNT(*) FROM Course WHERE Credits > 2", "source_tables": ["course"], "error_info": ""}, {"sample_id": 4638, "db_id": "college_3", "score": 1, "gold_sql": "SELECT COUNT(*) FROM COURSE WHERE Credits > 2", "pred_sql": "SELECT COUNT(*) FROM Course WHERE Credits > 2", "source_tables": ["course"], "error_info": ""}, {"sample_id": 4639, "db_id": "college_3", "score": 1, "gold_sql": "SELECT CName FROM COURSE WHERE Credits = 1", "pred_sql": "SELECT CName FROM Course WHERE Credits = 1", "source_tables": ["course"], "error_info": ""}, {"sample_id": 4640, "db_id": "college_3", "score": 1, "gold_sql": "SELECT CName FROM COURSE WHERE Credits = 1", "pred_sql": "SELECT CName FROM Course WHERE Credits = 1", "source_tables": ["course"], "error_info": ""}, {"sample_id": 4641, "db_id": "college_3", "score": 1, "gold_sql": "SELECT CName FROM COURSE WHERE Days = 'MTW'", "pred_sql": "SELECT CName FROM Course WHERE Days LIKE '%M%' AND Days LIKE '%T%' AND Days LIKE '%W%'", "source_tables": ["course"], "error_info": ""}, {"sample_id": 4642, "db_id": "college_3", "score": 1, "gold_sql": "SELECT CName FROM COURSE WHERE Days = 'MTW'", "pred_sql": "SELECT CName FROM Course WHERE Days LIKE '%M%' AND Days LIKE '%T%' AND Days LIKE '%W%'", "source_tables": ["course"], "error_info": ""}, {"sample_id": 4643, "db_id": "college_3", "score": 1, "gold_sql": "SELECT COUNT(*) FROM DEPARTMENT WHERE Division = 'AS'", "pred_sql": "SELECT COUNT(*) AS NumberOfDepartments FROM Department WHERE Division = 'AS'", "source_tables": ["department"], "error_info": ""}, {"sample_id": 4644, "db_id": "college_3", "score": 1, "gold_sql": "SELECT COUNT(*) FROM DEPARTMENT WHERE Division = 'AS'", "pred_sql": "SELECT COUNT(*) AS DepartmentCount FROM Department WHERE Division = 'AS'", "source_tables": ["department"], "error_info": ""}, {"sample_id": 4645, "db_id": "college_3", "score": 1, "gold_sql": "SELECT DPhone FROM DEPARTMENT WHERE Room = 268", "pred_sql": "SELECT DPhone FROM Department WHERE Room = '268'", "source_tables": ["department"], "error_info": ""}, {"sample_id": 4646, "db_id": "college_3", "score": 1, "gold_sql": "SELECT DPhone FROM DEPARTMENT WHERE Room = 268", "pred_sql": "SELECT DPhone FROM Department WHERE Room = '268'", "source_tables": ["department"], "error_info": ""}, {"sample_id": 4647, "db_id": "college_3", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade = 'B'", "pred_sql": "SELECT COUNT(DISTINCT E.StuID) AS NumberOfStudentsWithB FROM Enrolled_in AS E JOIN Gradeconversion AS G ON E.Grade = G.lettergrade WHERE G.gradepoint = 3.0", "source_tables": ["enrolled_in"], "error_info": ""}, {"sample_id": 4648, "db_id": "college_3", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade = 'B'", "pred_sql": "SELECT COUNT(DISTINCT StuID) AS StudentCount FROM Enrolled_in WHERE Grade = 'B'", "source_tables": ["enrolled_in"], "error_info": ""}, {"sample_id": 4649, "db_id": "college_3", "score": 1, "gold_sql": "SELECT MAX(gradepoint), MIN(gradepoint) FROM GRADECONVERSION", "pred_sql": "SELECT MAX(gradepoint) AS MaxGradePoint, MIN(gradepoint) AS MinGradePoint FROM Gradeconversion", "source_tables": ["gradeconversion"], "error_info": ""}, {"sample_id": 4650, "db_id": "college_3", "score": 1, "gold_sql": "SELECT MAX(gradepoint), MIN(gradepoint) FROM GRADECONVERSION", "pred_sql": "SELECT MAX(gradepoint) AS MaxGradePoint, MIN(gradepoint) AS MinGradePoint FROM Gradeconversion", "source_tables": ["gradeconversion"], "error_info": ""}, {"sample_id": 4651, "db_id": "college_3", "score": 0, "gold_sql": "SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'", "pred_sql": "SELECT Fname FROM Student WHERE Fname LIKE '%a%'", "source_tables": ["student"], "error_info": "Result not equal"}, {"sample_id": 4652, "db_id": "college_3", "score": 0, "gold_sql": "SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'", "pred_sql": "SELECT Fname FROM Student WHERE Fname LIKE '%a%'", "source_tables": ["student"], "error_info": "Result not equal"}, {"sample_id": 4653, "db_id": "college_3", "score": 1, "gold_sql": "SELECT Fname, Lname FROM FACULTY WHERE sex = 'M' AND Building = 'NEB'", "pred_sql": "SELECT Fname, Lname FROM Faculty WHERE Sex = 'M' AND Building = 'NEB'", "source_tables": ["faculty"], "error_info": ""}, {"sample_id": 4654, "db_id": "college_3", "score": 0, "gold_sql": "SELECT Fname, Lname FROM FACULTY WHERE sex = 'M' AND Building = 'NEB'", "pred_sql": "SELECT Fname || ' ' || Lname AS FullName FROM Faculty WHERE Sex = 'M' AND Building = 'NEB'", "source_tables": ["faculty"], "error_info": "Result not equal"}, {"sample_id": 4655, "db_id": "college_3", "score": 0, "gold_sql": "SELECT Room FROM FACULTY WHERE Rank = 'Professor' AND Building = 'NEB'", "pred_sql": "SELECT Room FROM Faculty WHERE Rank = 'professor' AND Building = 'NEB'", "source_tables": ["faculty"], "error_info": "Result not equal"}, {"sample_id": 4656, "db_id": "college_3", "score": 1, "gold_sql": "SELECT Room FROM FACULTY WHERE Rank = 'Professor' AND Building = 'NEB'", "pred_sql": "SELECT Room FROM Faculty WHERE Rank = 'Professor' AND Building = 'NEB'", "source_tables": ["faculty"], "error_info": ""}, {"sample_id": 4657, "db_id": "college_3", "score": 1, "gold_sql": "SELECT DName FROM DEPARTMENT WHERE Building = 'Mergenthaler'", "pred_sql": "SELECT DName FROM Department WHERE Building = 'Mergenthaler'", "source_tables": ["department"], "error_info": ""}, {"sample_id": 4658, "db_id": "college_3", "score": 1, "gold_sql": "SELECT DName FROM DEPARTMENT WHERE Building = 'Mergenthaler'", "pred_sql": "SELECT DName FROM Department WHERE Building = 'Mergenthaler'", "source_tables": ["department"], "error_info": ""}, {"sample_id": 4659, "db_id": "college_3", "score": 1, "gold_sql": "SELECT * FROM COURSE ORDER BY Credits", "pred_sql": "SELECT * FROM Course ORDER BY Credits ASC", "source_tables": ["course"], "error_info": ""}, {"sample_id": 4660, "db_id": "college_3", "score": 1, "gold_sql": "SELECT * FROM COURSE ORDER BY Credits", "pred_sql": "SELECT * FROM Course ORDER BY Credits ASC", "source_tables": ["course"], "error_info": ""}, {"sample_id": 4661, "db_id": "college_3", "score": 1, "gold_sql": "SELECT CName FROM COURSE ORDER BY Credits", "pred_sql": "SELECT CName FROM Course ORDER BY Credits", "source_tables": ["course"], "error_info": ""}, {"sample_id": 4662, "db_id": "college_3", "score": 1, "gold_sql": "SELECT CName FROM COURSE ORDER BY Credits", "pred_sql": "SELECT CName FROM Course ORDER BY Credits", "source_tables": ["course"], "error_info": ""}, {"sample_id": 4663, "db_id": "college_3", "score": 1, "gold_sql": "SELECT Fname FROM STUDENT ORDER BY Age DESC", "pred_sql": "SELECT Fname FROM Student ORDER BY Age DESC", "source_tables": ["student"], "error_info": ""}, {"sample_id": 4664, "db_id": "college_3", "score": 1, "gold_sql": "SELECT Fname FROM STUDENT ORDER BY Age DESC", "pred_sql": "SELECT Fname FROM Student ORDER BY Age DESC", "source_tables": ["student"], "error_info": ""}, {"sample_id": 4665, "db_id": "college_3", "score": 1, "gold_sql": "SELECT LName FROM STUDENT WHERE Sex = 'F' ORDER BY Age DESC", "pred_sql": "SELECT LName FROM Student WHERE Sex = 'F' ORDER BY Age DESC", "source_tables": ["student"], "error_info": ""}, {"sample_id": 4666, "db_id": "college_3", "score": 0, "gold_sql": "SELECT LName FROM STUDENT WHERE Sex = 'F' ORDER BY Age DESC", "pred_sql": "SELECT LName FROM Student WHERE Sex = 'Female' ORDER BY Age DESC", "source_tables": ["student"], "error_info": "Result not equal"}, {"sample_id": 4667, "db_id": "college_3", "score": 1, "gold_sql": "SELECT Lname FROM FACULTY WHERE Building = 'Barton' ORDER BY Lname", "pred_sql": "SELECT Lname FROM Faculty WHERE Building = 'Barton' ORDER BY Lname ASC", "source_tables": ["faculty"], "error_info": ""}, {"sample_id": 4668, "db_id": "college_3", "score": 1, "gold_sql": "SELECT Lname FROM FACULTY WHERE Building = 'Barton' ORDER BY Lname", "pred_sql": "SELECT Lname FROM Faculty WHERE Building = 'Barton' ORDER BY Lname", "source_tables": ["faculty"], "error_info": ""}, {"sample_id": 4669, "db_id": "college_3", "score": 1, "gold_sql": "SELECT Fname FROM FACULTY WHERE Rank = 'Professor' ORDER BY Fname", "pred_sql": "SELECT Fname FROM Faculty WHERE Rank = 'Professor' ORDER BY Fname ASC", "source_tables": ["faculty"], "error_info": ""}, {"sample_id": 4670, "db_id": "college_3", "score": 1, "gold_sql": "SELECT Fname FROM FACULTY WHERE Rank = 'Professor' ORDER BY Fname", "pred_sql": "SELECT Fname FROM Faculty WHERE Rank = 'Professor' ORDER BY Fname", "source_tables": ["faculty"], "error_info": ""}, {"sample_id": 4671, "db_id": "college_3", "score": 1, "gold_sql": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO = T2.DNO GROUP BY T2.DNO ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT D.DName FROM Department AS D JOIN Minor_in AS M ON D.DNO = M.DNO GROUP BY D.DName ORDER BY COUNT(M.StuID) DESC LIMIT 1", "source_tables": ["department", "minor_in"], "error_info": ""}, {"sample_id": 4672, "db_id": "college_3", "score": 1, "gold_sql": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO = T2.DNO GROUP BY T2.DNO ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT D.DName FROM Department AS D JOIN Minor_in AS M ON D.DNO = M.DNO GROUP BY D.DName ORDER BY COUNT(M.StuID) DESC LIMIT 1", "source_tables": ["department", "minor_in"], "error_info": ""}, {"sample_id": 4673, "db_id": "college_3", "score": 1, "gold_sql": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO = T2.DNO", "pred_sql": "SELECT D.DName FROM Department AS D LEFT JOIN Minor_in AS M ON D.DNO = M.DNO WHERE M.StuID IS NULL", "source_tables": ["department", "minor_in"], "error_info": ""}, {"sample_id": 4674, "db_id": "college_3", "score": 1, "gold_sql": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO = T2.DNO", "pred_sql": "SELECT DName FROM Department WHERE NOT DNO IN (SELECT DNO FROM Minor_in)", "source_tables": ["department", "minor_in"], "error_info": ""}, {"sample_id": 4675, "db_id": "college_3", "score": 1, "gold_sql": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO = T2.DNO GROUP BY T2.DNO ORDER BY COUNT(*) ASC LIMIT 1", "pred_sql": "SELECT DName FROM Department WHERE DNO = (SELECT DNO FROM Member_of GROUP BY DNO ORDER BY COUNT(FacID) ASC LIMIT 1)", "source_tables": ["department", "member_of"], "error_info": ""}, {"sample_id": 4676, "db_id": "college_3", "score": 1, "gold_sql": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO = T2.DNO GROUP BY T2.DNO ORDER BY COUNT(*) ASC LIMIT 1", "pred_sql": "SELECT DName FROM Department WHERE DNO = (SELECT DNO FROM Member_of GROUP BY DNO ORDER BY COUNT(FacID) ASC LIMIT 1)", "source_tables": ["department", "member_of"], "error_info": ""}, {"sample_id": 4677, "db_id": "college_3", "score": 1, "gold_sql": "SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY COUNT(*) ASC LIMIT 1", "pred_sql": "SELECT Rank FROM Faculty GROUP BY Rank ORDER BY COUNT(FacID) ASC LIMIT 1", "source_tables": ["faculty"], "error_info": ""}, {"sample_id": 4678, "db_id": "college_3", "score": 1, "gold_sql": "SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY COUNT(*) ASC LIMIT 1", "pred_sql": "SELECT Rank FROM Faculty GROUP BY Rank ORDER BY COUNT(*) ASC LIMIT 1", "source_tables": ["faculty"], "error_info": ""}, {"sample_id": 4679, "db_id": "college_3", "score": 0, "gold_sql": "SELECT T2.Fname, T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY T1.Instructor ORDER BY COUNT(*) DESC LIMIT 3", "pred_sql": "SELECT Fname, Lname FROM Faculty WHERE FacID IN (SELECT Instructor FROM Course GROUP BY Instructor ORDER BY COUNT(CID) DESC LIMIT 3)", "source_tables": ["course", "faculty"], "error_info": "Result not equal"}, {"sample_id": 4680, "db_id": "college_3", "score": 0, "gold_sql": "SELECT T2.Fname, T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY T1.Instructor ORDER BY COUNT(*) DESC LIMIT 3", "pred_sql": "SELECT Fname || ' ' || Lname AS FullName FROM Faculty WHERE FacID IN (SELECT Instructor FROM Course GROUP BY Instructor ORDER BY COUNT(CID) DESC LIMIT 3)", "source_tables": ["course", "faculty"], "error_info": "Result not equal"}, {"sample_id": 4681, "db_id": "college_3", "score": 1, "gold_sql": "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY T1.Instructor ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Faculty.Building FROM Faculty JOIN Course ON Faculty.FacID = Course.Instructor GROUP BY Faculty.FacID ORDER BY COUNT(Course.CID) DESC LIMIT 1", "source_tables": ["course", "faculty"], "error_info": ""}, {"sample_id": 4682, "db_id": "college_3", "score": 1, "gold_sql": "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY T1.Instructor ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Faculty.Building FROM Faculty JOIN Course ON Faculty.FacID = Course.Instructor GROUP BY Faculty.FacID ORDER BY COUNT(Course.CID) DESC LIMIT 1", "source_tables": ["course", "faculty"], "error_info": ""}, {"sample_id": 4683, "db_id": "college_3", "score": 1, "gold_sql": "SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID = T2.CID GROUP BY T2.CID HAVING COUNT(*) >= 5", "pred_sql": "SELECT C.CName FROM Course AS C JOIN Enrolled_in AS E ON C.CID = E.CID GROUP BY C.CID HAVING COUNT(E.StuID) >= 5", "source_tables": ["course", "enrolled_in"], "error_info": ""}, {"sample_id": 4684, "db_id": "college_3", "score": 1, "gold_sql": "SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID = T2.CID GROUP BY T2.CID HAVING COUNT(*) >= 5", "pred_sql": "SELECT CName FROM Course WHERE CID IN (SELECT CID FROM Enrolled_in GROUP BY CID HAVING COUNT(StuID) >= 5)", "source_tables": ["course", "enrolled_in"], "error_info": ""}, {"sample_id": 4685, "db_id": "college_3", "score": 0, "gold_sql": "SELECT T2.Fname, T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID WHERE T1.CName = 'COMPUTER LITERACY'", "pred_sql": "SELECT Faculty.Fname, Faculty.Lname FROM Faculty JOIN Course ON Faculty.FacID = Course.Instructor WHERE Course.CName = ?", "source_tables": ["course", "faculty"], "error_info": "Predction Execution Error:Incorrect number of bindings supplied. The current statement uses 1, and there are 0 supplied."}, {"sample_id": 4686, "db_id": "college_3", "score": 0, "gold_sql": "SELECT T2.Fname, T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID WHERE T1.CName = 'COMPUTER LITERACY'", "pred_sql": "SELECT Faculty.Fname || ' ' || Faculty.Lname AS FullName FROM Faculty JOIN Course ON Faculty.FacID = Course.Instructor WHERE Course.CName = 'COMPUTER LITERACY'", "source_tables": ["course", "faculty"], "error_info": "Result not equal"}, {"sample_id": 4687, "db_id": "college_3", "score": 1, "gold_sql": "SELECT T2.Dname, T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO = T2.DNO WHERE T1.CName = 'INTRODUCTION TO COMPUTER SCIENCE'", "pred_sql": "SELECT Department.DName, Department.Room FROM Course JOIN Department ON Course.DNO = Department.DNO WHERE Course.CName = 'INTRODUCTION TO COMPUTER SCIENCE'", "source_tables": ["course", "department"], "error_info": ""}, {"sample_id": 4688, "db_id": "college_3", "score": 1, "gold_sql": "SELECT T2.Dname, T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO = T2.DNO WHERE T1.CName = 'INTRODUCTION TO COMPUTER SCIENCE'", "pred_sql": "SELECT Department.DName, Department.Room FROM Course JOIN Department ON Course.DNO = Department.DNO WHERE Course.CName = 'INTRODUCTION TO COMPUTER SCIENCE'", "source_tables": ["course", "department"], "error_info": ""}, {"sample_id": 4689, "db_id": "college_3", "score": 1, "gold_sql": "SELECT T3.Fname, T3.LName, T2.gradepoint FROM ENROLLED_IN AS T1, GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID", "pred_sql": "SELECT Student.Fname, Student.LName, Gradeconversion.gradepoint FROM Student JOIN Enrolled_in ON Student.StuID = Enrolled_in.StuID JOIN Gradeconversion ON Enrolled_in.Grade = Gradeconversion.lettergrade", "source_tables": ["gradeconversion", "enrolled_in", "student"], "error_info": ""}, {"sample_id": 4690, "db_id": "college_3", "score": 0, "gold_sql": "SELECT T3.Fname, T3.LName, T2.gradepoint FROM ENROLLED_IN AS T1, GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID", "pred_sql": "SELECT Student.Fname || ' ' || Student.LName AS FullName, Gradeconversion.gradepoint FROM Enrolled_in JOIN Student ON Enrolled_in.StuID = Student.StuID JOIN Gradeconversion ON Enrolled_in.Grade = Gradeconversion.lettergrade", "source_tables": ["gradeconversion", "enrolled_in", "student"], "error_info": "Result not equal"}, {"sample_id": 4691, "db_id": "college_3", "score": 1, "gold_sql": "SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1, GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T2.gradepoint >= 3.8", "pred_sql": "SELECT DISTINCT Student.Fname FROM Student JOIN Enrolled_in ON Student.StuID = Enrolled_in.StuID JOIN Gradeconversion ON Enrolled_in.Grade = Gradeconversion.lettergrade WHERE Gradeconversion.gradepoint >= 3.8", "source_tables": ["gradeconversion", "enrolled_in", "student"], "error_info": ""}, {"sample_id": 4692, "db_id": "college_3", "score": 1, "gold_sql": "SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1, GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T2.gradepoint >= 3.8", "pred_sql": "SELECT DISTINCT Student.Fname FROM Student JOIN Enrolled_in ON Student.StuID = Enrolled_in.StuID JOIN Gradeconversion ON Enrolled_in.Grade = Gradeconversion.lettergrade WHERE Gradeconversion.gradepoint >= 3.8", "source_tables": ["gradeconversion", "enrolled_in", "student"], "error_info": ""}, {"sample_id": 4693, "db_id": "college_3", "score": 1, "gold_sql": "SELECT T1.Fname, T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID = T2.FacID WHERE T2.DNO = 520", "pred_sql": "SELECT Fname, Lname FROM Faculty INNER JOIN Member_of ON Faculty.FacID = Member_of.FacID WHERE Member_of.DNO = '520'", "source_tables": ["faculty", "member_of"], "error_info": ""}, {"sample_id": 4694, "db_id": "college_3", "score": 0, "gold_sql": "SELECT T1.Fname, T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID = T2.FacID WHERE T2.DNO = 520", "pred_sql": "SELECT Fname || ' ' || Lname AS FullName FROM Faculty INNER JOIN Member_of ON Faculty.FacID = Member_of.FacID WHERE Member_of.DNO = '520'", "source_tables": ["faculty", "member_of"], "error_info": "Result not equal"}, {"sample_id": 4695, "db_id": "college_3", "score": 1, "gold_sql": "SELECT T2.Fname, T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID = T2.StuID WHERE T1.DNO = 140", "pred_sql": "SELECT Student.Fname, Student.LName FROM Student JOIN Minor_in ON Student.StuID = Minor_in.StuID WHERE Minor_in.DNO = '140'", "source_tables": ["student", "minor_in"], "error_info": ""}, {"sample_id": 4696, "db_id": "college_3", "score": 0, "gold_sql": "SELECT T2.Fname, T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID = T2.StuID WHERE T1.DNO = 140", "pred_sql": "SELECT Fname || ' ' || LName AS FullName FROM Student INNER JOIN Minor_in ON Student.StuID = Minor_in.StuID WHERE Minor_in.DNO = '140'", "source_tables": ["student", "minor_in"], "error_info": "Result not equal"}, {"sample_id": 4697, "db_id": "college_3", "score": 1, "gold_sql": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO = T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID = T3.FacID WHERE T1.DName = 'Computer Science'", "pred_sql": "SELECT Faculty.Lname FROM Faculty JOIN Member_of ON Faculty.FacID = Member_of.FacID JOIN Department ON Member_of.DNO = Department.DNO WHERE Department.DName = 'Computer Science'", "source_tables": ["department", "member_of", "faculty"], "error_info": ""}, {"sample_id": 4698, "db_id": "college_3", "score": 1, "gold_sql": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO = T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID = T3.FacID WHERE T1.DName = 'Computer Science'", "pred_sql": "SELECT Faculty.Lname FROM Faculty JOIN Member_of ON Faculty.FacID = Member_of.FacID JOIN Department ON Member_of.DNO = Department.DNO WHERE Department.DName = 'Computer Science'", "source_tables": ["department", "member_of", "faculty"], "error_info": ""}, {"sample_id": 4699, "db_id": "college_3", "score": 1, "gold_sql": "SELECT AVG(T2.gradepoint) FROM ENROLLED_IN AS T1, GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T3.LName = 'Smith'", "pred_sql": "SELECT AVG(gc.gradepoint) AS average_grade_point FROM Student AS s JOIN Enrolled_in AS ei ON s.StuID = ei.StuID JOIN Gradeconversion AS gc ON ei.Grade = gc.lettergrade WHERE s.LName = 'Smith'", "source_tables": ["gradeconversion", "enrolled_in", "student"], "error_info": ""}, {"sample_id": 4700, "db_id": "college_3", "score": 1, "gold_sql": "SELECT AVG(T2.gradepoint) FROM ENROLLED_IN AS T1, GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T3.LName = 'Smith'", "pred_sql": "SELECT AVG(gc.gradepoint) AS average_gradepoint FROM Student AS s JOIN Enrolled_in AS ei ON s.StuID = ei.StuID JOIN Gradeconversion AS gc ON ei.Grade = gc.lettergrade WHERE s.LName = 'Smith'", "source_tables": ["gradeconversion", "enrolled_in", "student"], "error_info": ""}, {"sample_id": 4701, "db_id": "college_3", "score": 1, "gold_sql": "SELECT MAX(T2.gradepoint), MIN(T2.gradepoint) FROM ENROLLED_IN AS T1, GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T3.city_code = 'NYC'", "pred_sql": "SELECT MAX(gc.gradepoint) AS MaxGradePoint, MIN(gc.gradepoint) AS MinGradePoint FROM Student AS s JOIN Enrolled_in AS ei ON s.StuID = ei.StuID JOIN Gradeconversion AS gc ON ei.Grade = gc.lettergrade WHERE s.city_code = 'NYC'", "source_tables": ["gradeconversion", "enrolled_in", "student"], "error_info": ""}, {"sample_id": 4702, "db_id": "college_3", "score": 1, "gold_sql": "SELECT MAX(T2.gradepoint), MIN(T2.gradepoint) FROM ENROLLED_IN AS T1, GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T3.city_code = 'NYC'", "pred_sql": "SELECT MAX(gc.gradepoint) AS MaxGradePoint, MIN(gc.gradepoint) AS MinGradePoint FROM Student AS s JOIN Enrolled_in AS ei ON s.StuID = ei.StuID JOIN Gradeconversion AS gc ON ei.Grade = gc.lettergrade WHERE s.city_code = 'NYC'", "source_tables": ["gradeconversion", "enrolled_in", "student"], "error_info": ""}, {"sample_id": 4703, "db_id": "college_3", "score": 0, "gold_sql": "SELECT CName FROM COURSE WHERE Credits = 3 UNION SELECT CName FROM COURSE WHERE Credits = 1 AND Hours = 4", "pred_sql": "SELECT CName FROM Course WHERE Credits = 3 OR (Credits = 1 AND Hours = 4)", "source_tables": ["course"], "error_info": "Result not equal"}, {"sample_id": 4704, "db_id": "college_3", "score": 0, "gold_sql": "SELECT CName FROM COURSE WHERE Credits = 3 UNION SELECT CName FROM COURSE WHERE Credits = 1 AND Hours = 4", "pred_sql": "SELECT CName FROM Course WHERE Credits = 3 OR (Credits = 1 AND Hours = 4)", "source_tables": ["course"], "error_info": "Result not equal"}, {"sample_id": 4705, "db_id": "college_3", "score": 0, "gold_sql": "SELECT DName FROM DEPARTMENT WHERE Division = 'AS' UNION SELECT DName FROM DEPARTMENT WHERE Division = 'EN' AND Building = 'NEB'", "pred_sql": "SELECT DName FROM Department WHERE (Division = 'AS' OR Division = 'EN') AND Building = 'NEB'", "source_tables": ["department"], "error_info": "Result not equal"}, {"sample_id": 4706, "db_id": "college_3", "score": 1, "gold_sql": "SELECT DName FROM DEPARTMENT WHERE Division = 'AS' UNION SELECT DName FROM DEPARTMENT WHERE Division = 'EN' AND Building = 'NEB'", "pred_sql": "SELECT DName FROM Department WHERE Division = 'AS' OR (Division = 'EN' AND Building = 'NEB')", "source_tables": ["department"], "error_info": ""}, {"sample_id": 4707, "db_id": "college_3", "score": 1, "gold_sql": "SELECT Fname FROM STUDENT WHERE NOT StuID IN (SELECT StuID FROM ENROLLED_IN)", "pred_sql": "SELECT Fname FROM Student WHERE NOT StuID IN (SELECT StuID FROM Enrolled_in)", "source_tables": ["enrolled_in", "student"], "error_info": ""}, {"sample_id": 4708, "db_id": "college_3", "score": 1, "gold_sql": "SELECT Fname FROM STUDENT WHERE NOT StuID IN (SELECT StuID FROM ENROLLED_IN)", "pred_sql": "SELECT Fname FROM Student WHERE NOT StuID IN (SELECT StuID FROM Enrolled_in)", "source_tables": ["enrolled_in", "student"], "error_info": ""}, {"sample_id": 4709, "db_id": "department_store", "score": 0, "gold_sql": "SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3", "pred_sql": "SELECT product_id FROM Order_Items GROUP BY product_id ORDER BY SUM(order_item_id) DESC LIMIT 3", "source_tables": ["product_suppliers"], "error_info": "Result not equal"}, {"sample_id": 4710, "db_id": "department_store", "score": 1, "gold_sql": "SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3", "pred_sql": "SELECT product_id FROM Product_Suppliers ORDER BY total_amount_purchased DESC LIMIT 3", "source_tables": ["product_suppliers"], "error_info": ""}, {"sample_id": 4711, "db_id": "department_store", "score": 1, "gold_sql": "SELECT product_id, product_type_code FROM products ORDER BY product_price LIMIT 1", "pred_sql": "SELECT product_id, product_type_code FROM Products WHERE product_price = (SELECT MIN(product_price) FROM Products)", "source_tables": ["products"], "error_info": ""}, {"sample_id": 4712, "db_id": "department_store", "score": 1, "gold_sql": "SELECT product_id, product_type_code FROM products ORDER BY product_price LIMIT 1", "pred_sql": "SELECT product_id, product_type_code FROM Products ORDER BY product_price ASC LIMIT 1", "source_tables": ["products"], "error_info": ""}, {"sample_id": 4713, "db_id": "department_store", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT product_type_code) FROM products", "pred_sql": "SELECT COUNT(DISTINCT product_type_code) AS number_of_different_product_types FROM Products", "source_tables": ["products"], "error_info": ""}, {"sample_id": 4714, "db_id": "department_store", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT product_type_code) FROM products", "pred_sql": "SELECT COUNT(DISTINCT product_type_code) AS distinct_product_types FROM Products", "source_tables": ["products"], "error_info": ""}, {"sample_id": 4715, "db_id": "department_store", "score": 1, "gold_sql": "SELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id = T2.address_id WHERE T2.customer_id = 10", "pred_sql": "SELECT a.address_details FROM Addresses AS a JOIN Customer_Addresses AS ca ON a.address_id = ca.address_id WHERE ca.customer_id = '10'", "source_tables": ["addresses", "customer_addresses"], "error_info": ""}, {"sample_id": 4716, "db_id": "department_store", "score": 1, "gold_sql": "SELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id = T2.address_id WHERE T2.customer_id = 10", "pred_sql": "SELECT a.address_details FROM Addresses AS a JOIN Customer_Addresses AS ca ON a.address_id = ca.address_id WHERE ca.customer_id = '10'", "source_tables": ["addresses", "customer_addresses"], "error_info": ""}, {"sample_id": 4717, "db_id": "department_store", "score": 0, "gold_sql": "SELECT T1.staff_id, T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code = 'Department Manager'", "pred_sql": "SELECT staff_id, staff_gender FROM Staff_Department_Assignments WHERE job_title_code = 'Department Manager'", "source_tables": ["staff_department_assignments", "staff"], "error_info": "Predction Execution Error:no such column: staff_gender"}, {"sample_id": 4718, "db_id": "department_store", "score": 1, "gold_sql": "SELECT T1.staff_id, T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code = 'Department Manager'", "pred_sql": "SELECT Staff.staff_id, Staff.staff_gender FROM Staff JOIN Staff_Department_Assignments ON Staff.staff_id = Staff_Department_Assignments.staff_id WHERE Staff_Department_Assignments.job_title_code = 'Department Manager'", "source_tables": ["staff_department_assignments", "staff"], "error_info": ""}, {"sample_id": 4719, "db_id": "department_store", "score": 1, "gold_sql": "SELECT payment_method_code, COUNT(*) FROM customers GROUP BY payment_method_code", "pred_sql": "SELECT payment_method_code, COUNT(customer_id) AS customer_count FROM Customers GROUP BY payment_method_code", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 4720, "db_id": "department_store", "score": 1, "gold_sql": "SELECT payment_method_code, COUNT(*) FROM customers GROUP BY payment_method_code", "pred_sql": "SELECT payment_method_code, COUNT(customer_id) AS customer_count FROM Customers GROUP BY payment_method_code", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 4721, "db_id": "department_store", "score": 1, "gold_sql": "SELECT product_id FROM order_items GROUP BY product_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT order_items.product_id FROM order_items JOIN customer_orders ON order_items.order_id = customer_orders.order_id GROUP BY order_items.product_id ORDER BY COUNT(order_items.order_item_id) DESC LIMIT 1", "source_tables": ["order_items"], "error_info": ""}, {"sample_id": 4722, "db_id": "department_store", "score": 1, "gold_sql": "SELECT product_id FROM order_items GROUP BY product_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT product_id FROM Order_Items GROUP BY product_id ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["order_items"], "error_info": ""}, {"sample_id": 4723, "db_id": "department_store", "score": 1, "gold_sql": "SELECT T1.customer_name, T1.customer_phone, T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT c.customer_name, c.customer_phone, c.customer_email FROM Customers AS c JOIN Customer_Orders AS co ON c.customer_id = co.customer_id GROUP BY c.customer_id ORDER BY COUNT(co.order_id) DESC LIMIT 1", "source_tables": ["customer_orders", "customers"], "error_info": ""}, {"sample_id": 4724, "db_id": "department_store", "score": 1, "gold_sql": "SELECT T1.customer_name, T1.customer_phone, T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT c.customer_name, c.customer_phone, c.customer_email FROM Customers AS c JOIN Customer_Orders AS co ON c.customer_id = co.customer_id GROUP BY c.customer_id ORDER BY COUNT(co.order_id) DESC LIMIT 1", "source_tables": ["customer_orders", "customers"], "error_info": ""}, {"sample_id": 4725, "db_id": "department_store", "score": 1, "gold_sql": "SELECT product_type_code, AVG(product_price) FROM products GROUP BY product_type_code", "pred_sql": "SELECT product_type_code, AVG(product_price) AS average_price FROM Products GROUP BY product_type_code", "source_tables": ["products"], "error_info": ""}, {"sample_id": 4726, "db_id": "department_store", "score": 1, "gold_sql": "SELECT product_type_code, AVG(product_price) FROM products GROUP BY product_type_code", "pred_sql": "SELECT product_type_code, AVG(product_price) AS average_price FROM Products GROUP BY product_type_code", "source_tables": ["products"], "error_info": ""}, {"sample_id": 4727, "db_id": "department_store", "score": 1, "gold_sql": "SELECT COUNT(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id = T2.dept_store_chain_id WHERE T2.dept_store_chain_name = 'South'", "pred_sql": "SELECT COUNT(*) AS number_of_stores FROM Department_Stores AS ds JOIN Department_Store_Chain AS dsc ON ds.dept_store_chain_id = dsc.dept_store_chain_id WHERE dsc.dept_store_chain_name = 'South'", "source_tables": ["department_store_chain", "department_stores"], "error_info": ""}, {"sample_id": 4728, "db_id": "department_store", "score": 1, "gold_sql": "SELECT COUNT(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id = T2.dept_store_chain_id WHERE T2.dept_store_chain_name = 'South'", "pred_sql": "SELECT COUNT(*) AS store_count FROM Department_Stores AS ds JOIN Department_Store_Chain AS dsc ON ds.dept_store_chain_id = dsc.dept_store_chain_id WHERE dsc.dept_store_chain_name = 'South'", "source_tables": ["department_store_chain", "department_stores"], "error_info": ""}, {"sample_id": 4729, "db_id": "department_store", "score": 0, "gold_sql": "SELECT T1.staff_name, T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1", "pred_sql": "SELECT s.staff_name, sda.job_title_code FROM Staff AS s JOIN Staff_Department_Assignments AS sda ON s.staff_id = sda.staff_id ORDER BY sda.date_assigned_from DESC LIMIT 1", "source_tables": ["staff_department_assignments", "staff"], "error_info": "Result not equal"}, {"sample_id": 4730, "db_id": "department_store", "score": 0, "gold_sql": "SELECT T1.staff_name, T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1", "pred_sql": "SELECT s.staff_name, sda.job_title_code FROM Staff AS s JOIN Staff_Department_Assignments AS sda ON s.staff_id = sda.staff_id WHERE sda.date_assigned_from = (SELECT MAX(date_assigned_from) FROM Staff_Department_Assignments)", "source_tables": ["staff_department_assignments", "staff"], "error_info": "Result not equal"}, {"sample_id": 4731, "db_id": "department_store", "score": 1, "gold_sql": "SELECT T2.product_type_code, T2.product_name, T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3", "pred_sql": "SELECT Products.product_type_code, Products.product_name, Products.product_price FROM Products JOIN Product_Suppliers ON Products.product_id = Product_Suppliers.product_id WHERE Product_Suppliers.supplier_id = '3'", "source_tables": ["product_suppliers", "products"], "error_info": ""}, {"sample_id": 4732, "db_id": "department_store", "score": 1, "gold_sql": "SELECT T2.product_type_code, T2.product_name, T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3", "pred_sql": "SELECT Products.product_type_code, Products.product_name, Products.product_price FROM Products JOIN Product_Suppliers ON Products.product_id = Product_Suppliers.product_id WHERE Product_Suppliers.supplier_id = '3'", "source_tables": ["product_suppliers", "products"], "error_info": ""}, {"sample_id": 4733, "db_id": "department_store", "score": 0, "gold_sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = 'Pending' ORDER BY T2.customer_id", "pred_sql": "SELECT DISTINCT customer_name FROM Customers INNER JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id WHERE order_status_code = 'Pending' ORDER BY customer_id", "source_tables": ["customer_orders", "customers"], "error_info": "Predction Execution Error:ambiguous column name: customer_id"}, {"sample_id": 4734, "db_id": "department_store", "score": 1, "gold_sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = 'Pending' ORDER BY T2.customer_id", "pred_sql": "SELECT DISTINCT c.customer_name FROM Customers AS c JOIN Customer_Orders AS o ON c.customer_id = o.customer_id WHERE o.order_status_code = 'Pending' ORDER BY c.customer_id", "source_tables": ["customer_orders", "customers"], "error_info": ""}, {"sample_id": 4735, "db_id": "department_store", "score": 0, "gold_sql": "SELECT T1.customer_name, T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = 'New' INTERSECT SELECT T1.customer_name, T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = 'Pending'", "pred_sql": "SELECT DISTINCT c.customer_name, ca.address_id FROM Customers AS c JOIN Customer_Orders AS co ON c.customer_id = co.customer_id JOIN Customer_Addresses AS ca ON c.customer_id = ca.customer_id WHERE co.order_status_code IN ('New', 'Pending') GROUP BY c.customer_id HAVING COUNT(DISTINCT co.order_status_code) = 2", "source_tables": ["customer_orders", "customers"], "error_info": "Result not equal"}, {"sample_id": 4736, "db_id": "department_store", "score": 0, "gold_sql": "SELECT T1.customer_name, T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = 'New' INTERSECT SELECT T1.customer_name, T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = 'Pending'", "pred_sql": "SELECT DISTINCT c.customer_name, ca.address_id FROM Customers AS c JOIN Customer_Orders AS co ON c.customer_id = co.customer_id JOIN Customer_Addresses AS ca ON c.customer_id = ca.customer_id WHERE co.order_status_code IN ('New', 'Pending') GROUP BY c.customer_id HAVING COUNT(DISTINCT co.order_status_code) = 2", "source_tables": ["customer_orders", "customers"], "error_info": "Result not equal"}, {"sample_id": 4737, "db_id": "department_store", "score": 1, "gold_sql": "SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 2 AND T2.product_price > (SELECT AVG(product_price) FROM products)", "pred_sql": "SELECT product_id FROM Products WHERE product_id IN (SELECT product_id FROM Product_Suppliers WHERE supplier_id = '2') AND product_price > (SELECT AVG(product_price) FROM Products)", "source_tables": ["product_suppliers", "products"], "error_info": ""}, {"sample_id": 4738, "db_id": "department_store", "score": 1, "gold_sql": "SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 2 AND T2.product_price > (SELECT AVG(product_price) FROM products)", "pred_sql": "SELECT p.product_id FROM Products AS p JOIN Product_Suppliers AS ps ON p.product_id = ps.product_id WHERE ps.supplier_id = '2' AND p.product_price > (SELECT AVG(product_price) FROM Products)", "source_tables": ["product_suppliers", "products"], "error_info": ""}, {"sample_id": 4739, "db_id": "department_store", "score": 0, "gold_sql": "SELECT T2.dept_store_id, T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id = T2.dept_store_id WHERE T1.department_name = 'marketing' INTERSECT SELECT T2.dept_store_id, T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id = T2.dept_store_id WHERE T1.department_name = 'managing'", "pred_sql": "SELECT ds.dept_store_id, ds.store_name FROM Department_Stores AS ds JOIN Departments AS d1 ON ds.dept_store_id = d1.dept_store_id JOIN Departments AS d2 ON ds.dept_store_id = d2.dept_store_id WHERE d1.department_name = 'Marketing' AND d2.department_name = 'Managing'", "source_tables": ["departments", "department_stores"], "error_info": "Result not equal"}, {"sample_id": 4740, "db_id": "department_store", "score": 0, "gold_sql": "SELECT T2.dept_store_id, T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id = T2.dept_store_id WHERE T1.department_name = 'marketing' INTERSECT SELECT T2.dept_store_id, T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id = T2.dept_store_id WHERE T1.department_name = 'managing'", "pred_sql": "SELECT DISTINCT ds.dept_store_id, ds.store_name FROM Department_Stores AS ds JOIN Departments AS d1 ON ds.dept_store_id = d1.dept_store_id JOIN Departments AS d2 ON ds.dept_store_id = d2.dept_store_id WHERE d1.department_name = 'Marketing' AND d2.department_name = 'Managing'", "source_tables": ["departments", "department_stores"], "error_info": "Result not equal"}, {"sample_id": 4741, "db_id": "department_store", "score": 1, "gold_sql": "SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY COUNT(*) DESC LIMIT 2", "pred_sql": "SELECT dept_store_chain_id FROM Department_Stores GROUP BY dept_store_chain_id ORDER BY COUNT(dept_store_id) DESC LIMIT 2", "source_tables": ["department_stores"], "error_info": ""}, {"sample_id": 4742, "db_id": "department_store", "score": 1, "gold_sql": "SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY COUNT(*) DESC LIMIT 2", "pred_sql": "SELECT dept_store_chain_id FROM Department_Stores GROUP BY dept_store_chain_id ORDER BY COUNT(dept_store_id) DESC LIMIT 2", "source_tables": ["department_stores"], "error_info": ""}, {"sample_id": 4743, "db_id": "department_store", "score": 1, "gold_sql": "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY COUNT(*) LIMIT 1", "pred_sql": "SELECT department_id FROM Staff_Department_Assignments GROUP BY department_id ORDER BY COUNT(staff_id) ASC LIMIT 1", "source_tables": ["staff_department_assignments"], "error_info": ""}, {"sample_id": 4744, "db_id": "department_store", "score": 1, "gold_sql": "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY COUNT(*) LIMIT 1", "pred_sql": "SELECT department_id FROM Staff_Department_Assignments GROUP BY department_id ORDER BY COUNT(staff_id) ASC LIMIT 1", "source_tables": ["staff_department_assignments"], "error_info": ""}, {"sample_id": 4745, "db_id": "department_store", "score": 1, "gold_sql": "SELECT product_type_code, MAX(product_price), MIN(product_price) FROM products GROUP BY product_type_code", "pred_sql": "SELECT product_type_code, MAX(product_price) AS max_price, MIN(product_price) AS min_price FROM Products GROUP BY product_type_code", "source_tables": ["products"], "error_info": ""}, {"sample_id": 4746, "db_id": "department_store", "score": 1, "gold_sql": "SELECT product_type_code, MAX(product_price), MIN(product_price) FROM products GROUP BY product_type_code", "pred_sql": "SELECT product_type_code, MAX(product_price) AS max_price, MIN(product_price) AS min_price FROM Products GROUP BY product_type_code", "source_tables": ["products"], "error_info": ""}, {"sample_id": 4747, "db_id": "department_store", "score": 1, "gold_sql": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING AVG(product_price) > (SELECT AVG(product_price) FROM products)", "pred_sql": "SELECT product_type_code FROM Products GROUP BY product_type_code HAVING AVG(product_price) > (SELECT AVG(product_price) FROM Products)", "source_tables": ["products"], "error_info": ""}, {"sample_id": 4748, "db_id": "department_store", "score": 1, "gold_sql": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING AVG(product_price) > (SELECT AVG(product_price) FROM products)", "pred_sql": "SELECT product_type_code FROM Products GROUP BY product_type_code HAVING AVG(product_price) > (SELECT AVG(product_price) FROM Products)", "source_tables": ["products"], "error_info": ""}, {"sample_id": 4749, "db_id": "department_store", "score": 0, "gold_sql": "SELECT T1.staff_id, T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1", "pred_sql": "SELECT staff_id, staff_name FROM Staff_Department_Assignments ORDER BY (date_assigned_to - date_assigned_from) ASC LIMIT 1", "source_tables": ["staff_department_assignments", "staff"], "error_info": "Predction Execution Error:no such column: staff_name"}, {"sample_id": 4750, "db_id": "department_store", "score": 0, "gold_sql": "SELECT T1.staff_id, T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1", "pred_sql": "SELECT staff_id, staff_name FROM Staff_Department_Assignments ORDER BY (date_assigned_to - date_assigned_from) ASC LIMIT 1", "source_tables": ["staff_department_assignments", "staff"], "error_info": "Predction Execution Error:no such column: staff_name"}, {"sample_id": 4751, "db_id": "department_store", "score": 1, "gold_sql": "SELECT product_name, product_id FROM products WHERE product_price BETWEEN 600 AND 700", "pred_sql": "SELECT product_id, product_name FROM Products WHERE product_price BETWEEN '600' AND '700'", "source_tables": ["products"], "error_info": ""}, {"sample_id": 4752, "db_id": "department_store", "score": 1, "gold_sql": "SELECT product_name, product_id FROM products WHERE product_price BETWEEN 600 AND 700", "pred_sql": "SELECT product_id, product_name FROM Products WHERE product_price BETWEEN '600' AND '700'", "source_tables": ["products"], "error_info": ""}, {"sample_id": 4753, "db_id": "department_store", "score": 0, "gold_sql": "SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date > (SELECT MIN(order_date) FROM Customer_Orders WHERE order_status_code = 'Cancelled')", "pred_sql": "SELECT DISTINCT co.customer_id FROM Customer_Orders AS co WHERE co.order_date > (SELECT MAX(co2.order_date) FROM Customer_Orders AS co2 WHERE co2.order_status_code = 'Cancelled')", "source_tables": ["customer_orders"], "error_info": "Result not equal"}, {"sample_id": 4754, "db_id": "department_store", "score": 0, "gold_sql": "SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date > (SELECT MIN(order_date) FROM Customer_Orders WHERE order_status_code = 'Cancelled')", "pred_sql": "SELECT DISTINCT co.customer_id FROM Customer_Orders AS co WHERE co.order_date > (SELECT MAX(co2.order_date) FROM Customer_Orders AS co2 WHERE co2.order_status_code = 'Cancelled')", "source_tables": ["customer_orders"], "error_info": "Result not equal"}, {"sample_id": 4755, "db_id": "department_store", "score": 0, "gold_sql": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to < (SELECT MAX(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code = 'Clerical Staff')", "pred_sql": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_from < (SELECT MIN(date_assigned_from) FROM Staff_Department_Assignments WHERE job_title_code = 'Clerical')", "source_tables": ["staff_department_assignments"], "error_info": "Result not equal"}, {"sample_id": 4756, "db_id": "department_store", "score": 0, "gold_sql": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to < (SELECT MAX(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code = 'Clerical Staff')", "pred_sql": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_from < (SELECT MIN(date_assigned_from) FROM Staff_Department_Assignments WHERE job_title_code = 'Clerical')", "source_tables": ["staff_department_assignments"], "error_info": "Result not equal"}, {"sample_id": 4757, "db_id": "department_store", "score": 1, "gold_sql": "SELECT customer_name, customer_id FROM customers WHERE customer_address LIKE '%TN%'", "pred_sql": "SELECT customer_name, customer_id FROM Customers WHERE customer_address LIKE '%TN%'", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 4758, "db_id": "department_store", "score": 0, "gold_sql": "SELECT customer_name, customer_id FROM customers WHERE customer_address LIKE '%TN%'", "pred_sql": "SELECT Customers.customer_id, Customers.customer_name FROM Customers JOIN Customer_Addresses ON Customers.customer_id = Customer_Addresses.customer_id JOIN Addresses ON Customer_Addresses.address_id = Addresses.address_id WHERE Addresses.address_details LIKE '%TN%'", "source_tables": ["customers"], "error_info": "Result not equal"}, {"sample_id": 4759, "db_id": "department_store", "score": 0, "gold_sql": "SELECT T1.staff_name, T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.date_assigned_from LIKE '2016%'", "pred_sql": "SELECT Staff.staff_name, Staff.staff_gender FROM Staff JOIN Staff_Department_Assignments ON Staff.staff_id = Staff_Department_Assignments.staff_id WHERE Staff_Department_Assignment.date_assigned_from >= '2016-01-01' AND Staff_Department_Assignment.date_assigned_to <= '2016-12-31'", "source_tables": ["staff_department_assignments", "staff"], "error_info": "Predction Execution Error:no such column: Staff_Department_Assignment.date_assigned_from"}, {"sample_id": 4760, "db_id": "department_store", "score": 0, "gold_sql": "SELECT T1.staff_name, T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.date_assigned_from LIKE '2016%'", "pred_sql": "SELECT Staff.staff_name, Staff.staff_gender FROM Staff JOIN Staff_Department_Assignments ON Staff.staff_id = Staff_Department_Assignments.staff_id WHERE Staff_Department_Assignment.date_assigned_from >= '2016-01-01' AND Staff_Department_Assignment.date_assigned_to <= '2016-12-31'", "source_tables": ["staff_department_assignments", "staff"], "error_info": "Predction Execution Error:no such column: Staff_Department_Assignment.date_assigned_from"}, {"sample_id": 4761, "db_id": "department_store", "score": 1, "gold_sql": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id GROUP BY T2.staff_id HAVING COUNT(*) > 1", "pred_sql": "SELECT staff_name FROM Staff WHERE staff_id IN (SELECT staff_id FROM Staff_Department_Assignments GROUP BY staff_id HAVING COUNT(DISTINCT department_id) > 1)", "source_tables": ["staff_department_assignments", "staff"], "error_info": ""}, {"sample_id": 4762, "db_id": "department_store", "score": 0, "gold_sql": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id GROUP BY T2.staff_id HAVING COUNT(*) > 1", "pred_sql": "SELECT staff_name FROM Staff WHERE staff_id IN (SELECT staff_id FROM Staff_Department_Assignments GROUP BY staff_id HAVING COUNT(DISTINCT job_title_code) > 1)", "source_tables": ["staff_department_assignments", "staff"], "error_info": "Result not equal"}, {"sample_id": 4763, "db_id": "department_store", "score": 1, "gold_sql": "SELECT T1.supplier_name, T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id = T2.supplier_id JOIN addresses AS T3 ON T2.address_id = T3.address_id ORDER BY T3.address_details", "pred_sql": "SELECT Suppliers.supplier_name, Suppliers.supplier_phone FROM Suppliers JOIN Supplier_Addresses ON Suppliers.supplier_id = Supplier_Addresses.supplier_id JOIN Addresses ON Supplier_Addresses.address_id = Addresses.address_id ORDER BY Addresses.address_details ASC", "source_tables": ["addresses", "suppliers", "supplier_addresses"], "error_info": ""}, {"sample_id": 4764, "db_id": "department_store", "score": 1, "gold_sql": "SELECT T1.supplier_name, T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id = T2.supplier_id JOIN addresses AS T3 ON T2.address_id = T3.address_id ORDER BY T3.address_details", "pred_sql": "SELECT Suppliers.supplier_name, Suppliers.supplier_phone FROM Suppliers JOIN Supplier_Addresses ON Suppliers.supplier_id = Supplier_Addresses.supplier_id JOIN Addresses ON Supplier_Addresses.address_id = Addresses.address_id ORDER BY Addresses.address_details ASC", "source_tables": ["addresses", "suppliers", "supplier_addresses"], "error_info": ""}, {"sample_id": 4765, "db_id": "department_store", "score": 1, "gold_sql": "SELECT customer_phone FROM customers UNION SELECT supplier_phone FROM suppliers", "pred_sql": "SELECT customer_phone AS phone_number FROM Customers UNION SELECT supplier_phone AS phone_number FROM Suppliers", "source_tables": ["customers", "suppliers"], "error_info": ""}, {"sample_id": 4766, "db_id": "department_store", "score": 1, "gold_sql": "SELECT customer_phone FROM customers UNION SELECT supplier_phone FROM suppliers", "pred_sql": "SELECT customer_phone AS phone_number FROM Customers UNION SELECT supplier_phone AS phone_number FROM Suppliers", "source_tables": ["customers", "suppliers"], "error_info": ""}, {"sample_id": 4767, "db_id": "department_store", "score": 1, "gold_sql": "SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(*) > 3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING SUM(total_amount_purchased) > 80000", "pred_sql": "SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(order_id) > 3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING SUM(total_amount_purchased) > 80000", "source_tables": ["product_suppliers", "order_items"], "error_info": ""}, {"sample_id": 4768, "db_id": "department_store", "score": 1, "gold_sql": "SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(*) > 3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING SUM(total_amount_purchased) > 80000", "pred_sql": "SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(order_id) > 3 OR product_id IN (SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING SUM(total_amount_purchased) > 80000)", "source_tables": ["product_suppliers", "order_items"], "error_info": ""}, {"sample_id": 4769, "db_id": "department_store", "score": 1, "gold_sql": "SELECT product_id, product_name FROM products WHERE product_price < 600 OR product_price > 900", "pred_sql": "SELECT product_id, product_name FROM Products WHERE product_price < 600 OR product_price > 900", "source_tables": ["products"], "error_info": ""}, {"sample_id": 4770, "db_id": "department_store", "score": 1, "gold_sql": "SELECT product_id, product_name FROM products WHERE product_price < 600 OR product_price > 900", "pred_sql": "SELECT product_id, product_name FROM Products WHERE product_price < 600 OR product_price > 900", "source_tables": ["products"], "error_info": ""}, {"sample_id": 4771, "db_id": "department_store", "score": 1, "gold_sql": "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING AVG(total_amount_purchased) > 50000 OR AVG(total_amount_purchased) < 30000", "pred_sql": "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING AVG(total_amount_purchased) > 50000 OR AVG(total_amount_purchased) < 30000", "source_tables": ["product_suppliers"], "error_info": ""}, {"sample_id": 4772, "db_id": "department_store", "score": 1, "gold_sql": "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING AVG(total_amount_purchased) > 50000 OR AVG(total_amount_purchased) < 30000", "pred_sql": "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING AVG(total_amount_purchased) > 50000 OR AVG(total_amount_purchased) < 30000", "source_tables": ["product_suppliers"], "error_info": ""}, {"sample_id": 4773, "db_id": "department_store", "score": 1, "gold_sql": "SELECT AVG(total_amount_purchased), AVG(total_value_purchased) FROM Product_Suppliers WHERE supplier_id = (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY COUNT(*) DESC LIMIT 1)", "pred_sql": "SELECT AVG(total_amount_purchased) AS average_amount_purchased, AVG(total_value_purchased) AS average_value_purchased FROM Product_Suppliers WHERE supplier_id = (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY COUNT(product_id) DESC LIMIT 1)", "source_tables": ["product_suppliers"], "error_info": ""}, {"sample_id": 4774, "db_id": "department_store", "score": 1, "gold_sql": "SELECT AVG(total_amount_purchased), AVG(total_value_purchased) FROM Product_Suppliers WHERE supplier_id = (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY COUNT(*) DESC LIMIT 1)", "pred_sql": "SELECT AVG(total_amount_purchased) AS average_total_amount, AVG(total_value_purchased) AS average_total_value FROM Product_Suppliers WHERE supplier_id = (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY COUNT(product_id) DESC LIMIT 1)", "source_tables": ["product_suppliers"], "error_info": ""}, {"sample_id": 4775, "db_id": "department_store", "score": 1, "gold_sql": "SELECT MAX(customer_code), MIN(customer_code) FROM Customers", "pred_sql": "SELECT MAX(customer_code) AS largest_customer_code, MIN(customer_code) AS smallest_customer_code FROM Customers", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 4776, "db_id": "department_store", "score": 1, "gold_sql": "SELECT MAX(customer_code), MIN(customer_code) FROM Customers", "pred_sql": "SELECT MAX(customer_code) AS max_customer_code, MIN(customer_code) AS min_customer_code FROM Customers", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 4777, "db_id": "department_store", "score": 1, "gold_sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T2.order_id = T3.order_id JOIN products AS T4 ON T3.product_id = T4.product_id WHERE T4.product_name = 'keyboard'", "pred_sql": "SELECT DISTINCT Customers.customer_name FROM Customers JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id JOIN Order_Items ON Customer_Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id WHERE Products.product_name = 'keyboard'", "source_tables": ["products", "customer_orders", "customers", "order_items"], "error_info": ""}, {"sample_id": 4778, "db_id": "department_store", "score": 1, "gold_sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T2.order_id = T3.order_id JOIN products AS T4 ON T3.product_id = T4.product_id WHERE T4.product_name = 'keyboard'", "pred_sql": "SELECT DISTINCT Customers.customer_name FROM Customers JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id JOIN Order_Items ON Customer_Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id WHERE Products.product_name LIKE '%keyboard%'", "source_tables": ["products", "customer_orders", "customers", "order_items"], "error_info": ""}, {"sample_id": 4779, "db_id": "department_store", "score": 1, "gold_sql": "SELECT DISTINCT T1.supplier_name, T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id = T2.supplier_id JOIN products AS T3 ON T2.product_id = T3.product_id WHERE T3.product_name = 'red jeans'", "pred_sql": "SELECT DISTINCT Suppliers.supplier_name, Suppliers.supplier_phone FROM Suppliers JOIN Product_Suppliers ON Suppliers.supplier_id = Product_Suppliers.supplier_id JOIN Products ON Product_Suppliers.product_id = Products.product_id WHERE Products.product_name = 'red jeans'", "source_tables": ["product_suppliers", "products", "suppliers"], "error_info": ""}, {"sample_id": 4780, "db_id": "department_store", "score": 1, "gold_sql": "SELECT DISTINCT T1.supplier_name, T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id = T2.supplier_id JOIN products AS T3 ON T2.product_id = T3.product_id WHERE T3.product_name = 'red jeans'", "pred_sql": "SELECT DISTINCT Suppliers.supplier_name, Suppliers.supplier_phone FROM Suppliers JOIN Product_Suppliers ON Suppliers.supplier_id = Product_Suppliers.supplier_id JOIN Products ON Product_Suppliers.product_id = Products.product_id WHERE Products.product_name LIKE '%red jeans%'", "source_tables": ["product_suppliers", "products", "suppliers"], "error_info": ""}, {"sample_id": 4781, "db_id": "department_store", "score": 1, "gold_sql": "SELECT MAX(product_price), MIN(product_price), product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code", "pred_sql": "SELECT product_type_code, MAX(product_price) AS highest_price, MIN(product_price) AS lowest_price FROM Products GROUP BY product_type_code ORDER BY product_type_code ASC", "source_tables": ["products"], "error_info": ""}, {"sample_id": 4782, "db_id": "department_store", "score": 1, "gold_sql": "SELECT MAX(product_price), MIN(product_price), product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code", "pred_sql": "SELECT product_type_code, MAX(product_price) AS max_price, MIN(product_price) AS min_price FROM Products GROUP BY product_type_code ORDER BY product_type_code", "source_tables": ["products"], "error_info": ""}, {"sample_id": 4783, "db_id": "department_store", "score": 1, "gold_sql": "SELECT order_id, customer_id FROM customer_orders WHERE order_status_code = 'Cancelled' ORDER BY order_date", "pred_sql": "SELECT order_id, customer_id FROM Customer_Orders WHERE order_status_code = 'Cancelled' ORDER BY order_date", "source_tables": ["customer_orders"], "error_info": ""}, {"sample_id": 4784, "db_id": "department_store", "score": 1, "gold_sql": "SELECT order_id, customer_id FROM customer_orders WHERE order_status_code = 'Cancelled' ORDER BY order_date", "pred_sql": "SELECT order_id, customer_id FROM Customer_Orders WHERE order_status_code = 'Cancelled' ORDER BY order_date", "source_tables": ["customer_orders"], "error_info": ""}, {"sample_id": 4785, "db_id": "department_store", "score": 1, "gold_sql": "SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id JOIN products AS T3 ON T2.product_id = T3.product_id GROUP BY T3.product_id HAVING COUNT(DISTINCT T1.customer_id) >= 2", "pred_sql": "SELECT DISTINCT p.product_name FROM Products AS p JOIN Order_Items AS oi ON p.product_id = oi.product_id JOIN Customer_Orders AS co ON oi.order_id = co.order_id JOIN Customers AS c ON co.customer_id = c.customer_id GROUP BY p.product_id HAVING COUNT(DISTINCT c.customer_id) >= 2", "source_tables": ["products", "customer_orders", "order_items"], "error_info": ""}, {"sample_id": 4786, "db_id": "department_store", "score": 1, "gold_sql": "SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id JOIN products AS T3 ON T2.product_id = T3.product_id GROUP BY T3.product_id HAVING COUNT(DISTINCT T1.customer_id) >= 2", "pred_sql": "SELECT DISTINCT p.product_name FROM Products AS p JOIN Order_Items AS oi ON p.product_id = oi.product_id JOIN Customer_Orders AS co ON oi.order_id = co.order_id JOIN Customers AS c ON co.customer_id = c.customer_id GROUP BY p.product_id HAVING COUNT(DISTINCT c.customer_id) >= 2", "source_tables": ["products", "customer_orders", "order_items"], "error_info": ""}, {"sample_id": 4787, "db_id": "department_store", "score": 1, "gold_sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T2.order_id = T3.order_id GROUP BY T1.customer_id HAVING COUNT(DISTINCT T3.product_id) >= 3", "pred_sql": "SELECT c.customer_name FROM Customers AS c JOIN Customer_Orders AS co ON c.customer_id = co.customer_id JOIN Order_Items AS oi ON co.order_id = oi.order_id GROUP BY c.customer_id HAVING COUNT(DISTINCT oi.product_id) >= 3", "source_tables": ["customer_orders", "customers", "order_items"], "error_info": ""}, {"sample_id": 4788, "db_id": "department_store", "score": 1, "gold_sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T2.order_id = T3.order_id GROUP BY T1.customer_id HAVING COUNT(DISTINCT T3.product_id) >= 3", "pred_sql": "SELECT DISTINCT c.customer_name FROM Customers AS c JOIN Customer_Orders AS co ON c.customer_id = co.customer_id JOIN Order_Items AS oi ON co.order_id = oi.order_id GROUP BY c.customer_id HAVING COUNT(DISTINCT oi.product_id) >= 3", "source_tables": ["customer_orders", "customers", "order_items"], "error_info": ""}, {"sample_id": 4789, "db_id": "department_store", "score": 1, "gold_sql": "SELECT T1.staff_name, T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code = 'Sales Person' EXCEPT SELECT T1.staff_name, T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code = 'Clerical Staff'", "pred_sql": "SELECT s.staff_name, s.staff_gender FROM Staff AS s JOIN Staff_Department_Assignments AS sda ON s.staff_id = sda.staff_id WHERE sda.job_title_code = 'Sales Person' AND NOT s.staff_id IN (SELECT sda2.staff_id FROM Staff_Department_Assignments AS sda2 WHERE sda2.job_title_code = 'Clerical Staff')", "source_tables": ["staff_department_assignments", "staff"], "error_info": ""}, {"sample_id": 4790, "db_id": "department_store", "score": 1, "gold_sql": "SELECT T1.staff_name, T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code = 'Sales Person' EXCEPT SELECT T1.staff_name, T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code = 'Clerical Staff'", "pred_sql": "SELECT s.staff_name, s.staff_gender FROM Staff AS s JOIN Staff_Department_Assignments AS sda ON s.staff_id = sda.staff_id WHERE sda.job_title_code = 'Sales Person' AND NOT s.staff_id IN (SELECT sda2.staff_id FROM Staff_Department_Assignments AS sda2 WHERE sda2.job_title_code = 'Clerical Staff')", "source_tables": ["staff_department_assignments", "staff"], "error_info": ""}, {"sample_id": 4791, "db_id": "department_store", "score": 0, "gold_sql": "SELECT customer_id, customer_name FROM customers WHERE customer_address LIKE '%WY%' AND payment_method_code <> 'Credit Card'", "pred_sql": "SELECT customer_id, customer_name FROM Customers WHERE customer_address LIKE '%WY%' AND payment_method_code <> 'credit_card'", "source_tables": ["customers"], "error_info": "Result not equal"}, {"sample_id": 4792, "db_id": "department_store", "score": 0, "gold_sql": "SELECT customer_id, customer_name FROM customers WHERE customer_address LIKE '%WY%' AND payment_method_code <> 'Credit Card'", "pred_sql": "SELECT customer_id, customer_name FROM Customers WHERE customer_address LIKE '%WY%' AND payment_method_code <> 'CREDIT_CARD'", "source_tables": ["customers"], "error_info": "Result not equal"}, {"sample_id": 4793, "db_id": "department_store", "score": 0, "gold_sql": "SELECT AVG(product_price) FROM products WHERE product_type_code = 'Clothes'", "pred_sql": "SELECT AVG(product_price) AS average_price FROM Products WHERE product_type_code = 'clothes'", "source_tables": ["products"], "error_info": "Result not equal"}, {"sample_id": 4794, "db_id": "department_store", "score": 0, "gold_sql": "SELECT AVG(product_price) FROM products WHERE product_type_code = 'Clothes'", "pred_sql": "SELECT AVG(product_price) AS average_price FROM Products WHERE product_type_code = 'clothes'", "source_tables": ["products"], "error_info": "Result not equal"}, {"sample_id": 4795, "db_id": "department_store", "score": 0, "gold_sql": "SELECT product_name FROM products WHERE product_type_code = 'Hardware' ORDER BY product_price DESC LIMIT 1", "pred_sql": "SELECT product_name FROM Products WHERE product_type_code = 'hardware' ORDER BY product_price DESC LIMIT 1", "source_tables": ["products"], "error_info": "Result not equal"}, {"sample_id": 4796, "db_id": "department_store", "score": 1, "gold_sql": "SELECT product_name FROM products WHERE product_type_code = 'Hardware' ORDER BY product_price DESC LIMIT 1", "pred_sql": "SELECT product_name FROM Products ORDER BY product_price DESC LIMIT 1", "source_tables": ["products"], "error_info": ""}, {"sample_id": 4797, "db_id": "aircraft", "score": 1, "gold_sql": "SELECT COUNT(*) FROM aircraft", "pred_sql": "SELECT COUNT(*) AS Total_Aircraft FROM aircraft", "source_tables": ["aircraft"], "error_info": ""}, {"sample_id": 4798, "db_id": "aircraft", "score": 1, "gold_sql": "SELECT COUNT(*) FROM aircraft", "pred_sql": "SELECT COUNT(*) AS Number_of_Aircraft FROM aircraft", "source_tables": ["aircraft"], "error_info": ""}, {"sample_id": 4799, "db_id": "aircraft", "score": 1, "gold_sql": "SELECT Description FROM aircraft", "pred_sql": "SELECT Description FROM aircraft", "source_tables": ["aircraft"], "error_info": ""}, {"sample_id": 4800, "db_id": "aircraft", "score": 1, "gold_sql": "SELECT Description FROM aircraft", "pred_sql": "SELECT Description FROM aircraft", "source_tables": ["aircraft"], "error_info": ""}, {"sample_id": 4801, "db_id": "aircraft", "score": 1, "gold_sql": "SELECT AVG(International_Passengers) FROM airport", "pred_sql": "SELECT AVG(International_Passengers) AS Average_International_Passengers FROM airport", "source_tables": ["airport"], "error_info": ""}, {"sample_id": 4802, "db_id": "aircraft", "score": 1, "gold_sql": "SELECT AVG(International_Passengers) FROM airport", "pred_sql": "SELECT AVG(International_Passengers) AS Average_International_Passengers FROM airport", "source_tables": ["airport"], "error_info": ""}, {"sample_id": 4803, "db_id": "aircraft", "score": 1, "gold_sql": "SELECT International_Passengers, Domestic_Passengers FROM airport WHERE Airport_Name = 'London Heathrow'", "pred_sql": "SELECT International_Passengers, Domestic_Passengers FROM airport WHERE Airport_Name = 'London Heathrow'", "source_tables": ["airport"], "error_info": ""}, {"sample_id": 4804, "db_id": "aircraft", "score": 1, "gold_sql": "SELECT International_Passengers, Domestic_Passengers FROM airport WHERE Airport_Name = 'London Heathrow'", "pred_sql": "SELECT International_Passengers, Domestic_Passengers FROM airport WHERE Airport_Name = 'London Heathrow'", "source_tables": ["airport"], "error_info": ""}, {"sample_id": 4805, "db_id": "aircraft", "score": 1, "gold_sql": "SELECT SUM(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE '%London%'", "pred_sql": "SELECT SUM(Domestic_Passengers) AS Total_Domestic_Passengers FROM airport WHERE Airport_Name LIKE '%London%'", "source_tables": ["airport"], "error_info": ""}, {"sample_id": 4806, "db_id": "aircraft", "score": 1, "gold_sql": "SELECT SUM(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE '%London%'", "pred_sql": "SELECT SUM(Domestic_Passengers) AS Total_Domestic_Passengers FROM airport WHERE Airport_Name LIKE '%London%'", "source_tables": ["airport"], "error_info": ""}, {"sample_id": 4807, "db_id": "aircraft", "score": 1, "gold_sql": "SELECT MAX(Transit_Passengers), MIN(Transit_Passengers) FROM airport", "pred_sql": "SELECT MAX(Transit_Passengers) AS Max_Transit_Passengers, MIN(Transit_Passengers) AS Min_Transit_Passengers FROM airport", "source_tables": ["airport"], "error_info": ""}, {"sample_id": 4808, "db_id": "aircraft", "score": 1, "gold_sql": "SELECT MAX(Transit_Passengers), MIN(Transit_Passengers) FROM airport", "pred_sql": "SELECT MAX(Transit_Passengers) AS Max_Transit_Passengers, MIN(Transit_Passengers) AS Min_Transit_Passengers FROM airport", "source_tables": ["airport"], "error_info": ""}, {"sample_id": 4809, "db_id": "aircraft", "score": 1, "gold_sql": "SELECT Name FROM pilot WHERE Age >= 25", "pred_sql": "SELECT Name FROM pilot WHERE Age >= '25'", "source_tables": ["pilot"], "error_info": ""}, {"sample_id": 4810, "db_id": "aircraft", "score": 1, "gold_sql": "SELECT Name FROM pilot WHERE Age >= 25", "pred_sql": "SELECT Name FROM pilot WHERE Age >= '25'", "source_tables": ["pilot"], "error_info": ""}, {"sample_id": 4811, "db_id": "aircraft", "score": 1, "gold_sql": "SELECT Name FROM pilot ORDER BY Name ASC", "pred_sql": "SELECT Name FROM pilot ORDER BY Name ASC", "source_tables": ["pilot"], "error_info": ""}, {"sample_id": 4812, "db_id": "aircraft", "score": 1, "gold_sql": "SELECT Name FROM pilot ORDER BY Name ASC", "pred_sql": "SELECT Name FROM pilot ORDER BY Name ASC", "source_tables": ["pilot"], "error_info": ""}, {"sample_id": 4813, "db_id": "aircraft", "score": 1, "gold_sql": "SELECT Name FROM pilot WHERE Age <= 30 ORDER BY Name DESC", "pred_sql": "SELECT Name FROM pilot WHERE Age <= '30' ORDER BY Name DESC", "source_tables": ["pilot"], "error_info": ""}, {"sample_id": 4814, "db_id": "aircraft", "score": 1, "gold_sql": "SELECT Name FROM pilot WHERE Age <= 30 ORDER BY Name DESC", "pred_sql": "SELECT Name FROM pilot WHERE Age <= '30' ORDER BY Name DESC", "source_tables": ["pilot"], "error_info": ""}, {"sample_id": 4815, "db_id": "aircraft", "score": 1, "gold_sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Airport_Name = 'London Gatwick'", "pred_sql": "SELECT aircraft.Aircraft FROM aircraft INNER JOIN airport_aircraft ON aircraft.Aircraft_ID = airport_aircraft.Aircraft_ID INNER JOIN airport ON airport_aircraft.Airport_ID = airport.Airport_ID WHERE airport.Airport_Name = 'London Gatwick'", "source_tables": ["aircraft", "airport", "airport_aircraft"], "error_info": ""}, {"sample_id": 4816, "db_id": "aircraft", "score": 1, "gold_sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Airport_Name = 'London Gatwick'", "pred_sql": "SELECT aircraft.Aircraft FROM aircraft JOIN airport_aircraft ON aircraft.Aircraft_ID = airport_aircraft.Aircraft_ID JOIN airport ON airport_aircraft.Airport_ID = airport.Airport_ID WHERE airport.Airport_Name = 'London Gatwick'", "source_tables": ["aircraft", "airport", "airport_aircraft"], "error_info": ""}, {"sample_id": 4817, "db_id": "aircraft", "score": 0, "gold_sql": "SELECT T1.Aircraft, T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Total_Passengers > 10000000", "pred_sql": "SELECT aircraft.Name, aircraft.Description FROM aircraft JOIN airport_aircraft ON aircraft.Aircraft_ID = airport_aircraft.Aircraft_ID JOIN airport ON airport_aircraft.Airport_ID = airport.Airport_ID WHERE airport.Total_Passengers > 10000000", "source_tables": ["aircraft", "airport", "airport_aircraft"], "error_info": "Predction Execution Error:no such column: aircraft.Name"}, {"sample_id": 4818, "db_id": "aircraft", "score": 1, "gold_sql": "SELECT T1.Aircraft, T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Total_Passengers > 10000000", "pred_sql": "SELECT aircraft.Aircraft, aircraft.Description FROM aircraft JOIN airport_aircraft ON aircraft.Aircraft_ID = airport_aircraft.Aircraft_ID JOIN airport ON airport_aircraft.Airport_ID = airport.Airport_ID WHERE airport.Total_Passengers > 10000000", "source_tables": ["aircraft", "airport", "airport_aircraft"], "error_info": ""}, {"sample_id": 4819, "db_id": "aircraft", "score": 1, "gold_sql": "SELECT AVG(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T1.Aircraft = 'Robinson R-22'", "pred_sql": "SELECT AVG(a.Total_Passengers) AS Average_Total_Passengers FROM airport AS a JOIN airport_aircraft AS aa ON a.Airport_ID = aa.Airport_ID JOIN aircraft AS ac ON aa.Aircraft_ID = ac.Aircraft_ID WHERE ac.Aircraft = 'Robinson R-22'", "source_tables": ["aircraft", "airport", "airport_aircraft"], "error_info": ""}, {"sample_id": 4820, "db_id": "aircraft", "score": 1, "gold_sql": "SELECT AVG(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T1.Aircraft = 'Robinson R-22'", "pred_sql": "SELECT AVG(a.Total_Passengers) AS Average_Total_Passengers FROM airport AS a JOIN airport_aircraft AS aa ON a.Airport_ID = aa.Airport_ID JOIN aircraft AS ac ON aa.Aircraft_ID = ac.Aircraft_ID WHERE ac.Aircraft = 'Robinson R-22'", "source_tables": ["aircraft", "airport", "airport_aircraft"], "error_info": ""}, {"sample_id": 4821, "db_id": "aircraft", "score": 0, "gold_sql": "SELECT T2.Location, T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft", "pred_sql": "SELECT Location, Winning_Aircraft FROM match", "source_tables": ["aircraft", "match"], "error_info": "Result not equal"}, {"sample_id": 4822, "db_id": "aircraft", "score": 0, "gold_sql": "SELECT T2.Location, T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft", "pred_sql": "SELECT Location, Winning_Aircraft FROM match", "source_tables": ["aircraft", "match"], "error_info": "Result not equal"}, {"sample_id": 4823, "db_id": "aircraft", "score": 0, "gold_sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Winning_Aircraft, COUNT(*) AS Win_Count FROM match GROUP BY Winning_Aircraft ORDER BY Win_Count DESC LIMIT 1", "source_tables": ["aircraft", "match"], "error_info": "Result not equal"}, {"sample_id": 4824, "db_id": "aircraft", "score": 0, "gold_sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Winning_Aircraft, COUNT(*) AS Award_Count FROM match GROUP BY Winning_Aircraft ORDER BY Award_Count DESC LIMIT 1", "source_tables": ["aircraft", "match"], "error_info": "Result not equal"}, {"sample_id": 4825, "db_id": "aircraft", "score": 0, "gold_sql": "SELECT T1.Aircraft, COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft", "pred_sql": "SELECT match.Winning_Aircraft, COUNT(*) AS Wins FROM match GROUP BY match.Winning_Aircraft", "source_tables": ["aircraft", "match"], "error_info": "Result not equal"}, {"sample_id": 4826, "db_id": "aircraft", "score": 1, "gold_sql": "SELECT T1.Aircraft, COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft", "pred_sql": "SELECT aircraft.Aircraft AS Aircraft_Name, COUNT(match.Winning_Aircraft) AS Times_Won FROM match JOIN aircraft ON match.Winning_Aircraft = aircraft.Aircraft_ID GROUP BY aircraft.Aircraft", "source_tables": ["aircraft", "match"], "error_info": ""}, {"sample_id": 4827, "db_id": "aircraft", "score": 1, "gold_sql": "SELECT Name FROM pilot ORDER BY Age DESC", "pred_sql": "SELECT Name FROM pilot ORDER BY Age DESC", "source_tables": ["pilot"], "error_info": ""}, {"sample_id": 4828, "db_id": "aircraft", "score": 1, "gold_sql": "SELECT Name FROM pilot ORDER BY Age DESC", "pred_sql": "SELECT Name FROM pilot ORDER BY Age DESC", "source_tables": ["pilot"], "error_info": ""}, {"sample_id": 4829, "db_id": "aircraft", "score": 0, "gold_sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*) >= 2", "pred_sql": "SELECT Winning_Aircraft, COUNT(*) AS Match_Wins FROM match GROUP BY Winning_Aircraft HAVING COUNT(*) >= 2", "source_tables": ["aircraft", "match"], "error_info": "Result not equal"}, {"sample_id": 4830, "db_id": "aircraft", "score": 1, "gold_sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*) >= 2", "pred_sql": "SELECT aircraft.Aircraft FROM aircraft JOIN match ON aircraft.Aircraft_ID = match.Winning_Aircraft GROUP BY aircraft.Aircraft HAVING COUNT(match.Winning_Aircraft) >= 2", "source_tables": ["aircraft", "match"], "error_info": ""}, {"sample_id": 4831, "db_id": "aircraft", "score": 1, "gold_sql": "SELECT Aircraft FROM aircraft WHERE NOT Aircraft_ID IN (SELECT Winning_Aircraft FROM MATCH)", "pred_sql": "SELECT a.Aircraft FROM aircraft AS a LEFT JOIN match AS m ON a.Aircraft_ID = m.Winning_Aircraft WHERE m.Winning_Aircraft IS NULL", "source_tables": ["aircraft", "match"], "error_info": ""}, {"sample_id": 4832, "db_id": "aircraft", "score": 1, "gold_sql": "SELECT Aircraft FROM aircraft WHERE NOT Aircraft_ID IN (SELECT Winning_Aircraft FROM MATCH)", "pred_sql": "SELECT DISTINCT aircraft.Aircraft FROM aircraft LEFT JOIN match ON aircraft.Aircraft_ID = match.Winning_Aircraft WHERE match.Winning_Aircraft IS NULL", "source_tables": ["aircraft", "match"], "error_info": ""}, {"sample_id": 4833, "db_id": "aircraft", "score": 1, "gold_sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Airport_Name = 'London Heathrow' INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Airport_Name = 'London Gatwick'", "pred_sql": "SELECT DISTINCT a.Aircraft FROM aircraft AS a JOIN airport_aircraft AS aa1 ON a.Aircraft_ID = aa1.Aircraft_ID JOIN airport AS ap1 ON aa1.Airport_ID = ap1.Airport_ID JOIN airport_aircraft AS aa2 ON a.Aircraft_ID = aa2.Aircraft_ID JOIN airport AS ap2 ON aa2.Airport_ID = ap2.Airport_ID WHERE ap1.Airport_Name = 'London Heathrow' AND ap2.Airport_Name = 'London Gatwick'", "source_tables": ["aircraft", "airport", "airport_aircraft"], "error_info": ""}, {"sample_id": 4834, "db_id": "aircraft", "score": 1, "gold_sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Airport_Name = 'London Heathrow' INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Airport_Name = 'London Gatwick'", "pred_sql": "SELECT DISTINCT a.Aircraft FROM aircraft AS a JOIN airport_aircraft AS aa1 ON a.Aircraft_ID = aa1.Aircraft_ID JOIN airport AS ap1 ON aa1.Airport_ID = ap1.Airport_ID JOIN airport_aircraft AS aa2 ON a.Aircraft_ID = aa2.Aircraft_ID JOIN airport AS ap2 ON aa2.Airport_ID = ap2.Airport_ID WHERE ap1.Airport_Name = 'London Heathrow' AND ap2.Airport_Name = 'Gatwick'", "source_tables": ["aircraft", "airport", "airport_aircraft"], "error_info": ""}, {"sample_id": 4835, "db_id": "aircraft", "score": 1, "gold_sql": "SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1", "pred_sql": "SELECT * FROM airport WHERE International_Passengers = (SELECT MAX(International_Passengers) FROM airport)", "source_tables": ["airport"], "error_info": ""}, {"sample_id": 4836, "db_id": "aircraft", "score": 1, "gold_sql": "SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1", "pred_sql": "SELECT * FROM airport WHERE International_Passengers = (SELECT MAX(International_Passengers) FROM airport)", "source_tables": ["airport"], "error_info": ""}, {"sample_id": 4837, "db_id": "aircraft", "score": 1, "gold_sql": "SELECT t1.name, t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id = t2.winning_pilot WHERE t1.age < 30 GROUP BY t2.winning_pilot ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT p.Name, p.Age FROM pilot AS p JOIN match AS m ON p.Pilot_Id = m.Winning_Pilot WHERE p.Age < '30' GROUP BY p.Pilot_Id ORDER BY COUNT(m.Round) DESC LIMIT 1", "source_tables": ["pilot", "match"], "error_info": ""}, {"sample_id": 4838, "db_id": "aircraft", "score": 1, "gold_sql": "SELECT t1.name, t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id = t2.winning_pilot WHERE t1.age < 30 GROUP BY t2.winning_pilot ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT p.Name, p.Age FROM pilot AS p JOIN match AS m ON p.Pilot_Id = m.Winning_Pilot WHERE p.Age < '30' GROUP BY p.Pilot_Id ORDER BY COUNT(m.Round) DESC LIMIT 1", "source_tables": ["pilot", "match"], "error_info": ""}, {"sample_id": 4839, "db_id": "aircraft", "score": 0, "gold_sql": "SELECT t1.name, t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id = t2.winning_pilot ORDER BY t1.age LIMIT 1", "pred_sql": "SELECT Name, Age FROM pilot WHERE Pilot_Id = (SELECT Winning_Pilot FROM match ORDER BY Date ASC LIMIT 1)", "source_tables": ["pilot", "match"], "error_info": "Result not equal"}, {"sample_id": 4840, "db_id": "aircraft", "score": 1, "gold_sql": "SELECT t1.name, t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id = t2.winning_pilot ORDER BY t1.age LIMIT 1", "pred_sql": "SELECT Name, Age FROM pilot WHERE Pilot_Id IN (SELECT Winning_Pilot FROM match) ORDER BY Age ASC LIMIT 1", "source_tables": ["pilot", "match"], "error_info": ""}, {"sample_id": 4841, "db_id": "aircraft", "score": 1, "gold_sql": "SELECT name FROM pilot WHERE NOT pilot_id IN (SELECT Winning_Pilot FROM MATCH WHERE country = 'Australia')", "pred_sql": "SELECT Name FROM pilot WHERE NOT Pilot_Id IN (SELECT Winning_Pilot FROM match WHERE Country = 'Australia')", "source_tables": ["pilot", "match"], "error_info": ""}, {"sample_id": 4842, "db_id": "aircraft", "score": 1, "gold_sql": "SELECT name FROM pilot WHERE NOT pilot_id IN (SELECT Winning_Pilot FROM MATCH WHERE country = 'Australia')", "pred_sql": "SELECT Name FROM pilot WHERE NOT Pilot_Id IN (SELECT Winning_Pilot FROM match WHERE Country = 'Australia')", "source_tables": ["pilot", "match"], "error_info": ""}, {"sample_id": 4843, "db_id": "local_govt_and_lot", "score": 1, "gold_sql": "SELECT T1.property_id, COUNT(*) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id = T2.property_id GROUP BY T1.property_id", "pred_sql": "SELECT property_id, COUNT(resident_id) AS resident_count FROM Residents GROUP BY property_id", "source_tables": ["properties", "residents"], "error_info": ""}, {"sample_id": 4844, "db_id": "local_govt_and_lot", "score": 1, "gold_sql": "SELECT DISTINCT T1.service_type_code FROM services AS T1 JOIN organizations AS T2 ON T1.organization_id = T2.organization_id WHERE T2.organization_details = 'Denesik and Sons Party'", "pred_sql": "SELECT DISTINCT service_type_code FROM Services WHERE organization_id = (SELECT organization_id FROM Organizations WHERE organization_details = 'Denesik and Sons Party')", "source_tables": ["services", "organizations"], "error_info": ""}, {"sample_id": 4845, "db_id": "local_govt_and_lot", "score": 0, "gold_sql": "SELECT T1.resident_id, T1.other_details, COUNT(*) FROM Residents AS T1 JOIN Residents_Services AS T2 ON T1.resident_id = T2.resident_id GROUP BY T1.resident_id ORDER BY COUNT(*) DESC", "pred_sql": "SELECT r.resident_id, r.other_details, COUNT(rs.service_id) AS service_count FROM Residents AS r LEFT JOIN Residents_Services AS rs ON r.resident_id = rs.resident_id GROUP BY r.resident_id, r.other_details ORDER BY service_count DESC", "source_tables": ["residents_services", "residents"], "error_info": "Result not equal"}, {"sample_id": 4846, "db_id": "local_govt_and_lot", "score": 0, "gold_sql": "SELECT T1.service_id, T1.service_details, COUNT(*) FROM Services AS T1 JOIN Residents_Services AS T2 ON T1.service_id = T2.service_id GROUP BY T1.service_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT service_id, service_details, COUNT(*) AS number FROM Residents_Services GROUP BY service_id, service_details ORDER BY number DESC LIMIT 1", "source_tables": ["services", "residents_services"], "error_info": "Predction Execution Error:no such column: service_details"}, {"sample_id": 4847, "db_id": "local_govt_and_lot", "score": 1, "gold_sql": "SELECT T1.thing_id, T1.type_of_Thing_Code, T2.organization_details FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id", "pred_sql": "SELECT Things.thing_id, Things.Type_of_Thing_Code, Organizations.organization_details FROM Things JOIN Organizations ON Things.organization_id = Organizations.organization_id", "source_tables": ["things", "organizations"], "error_info": ""}, {"sample_id": 4848, "db_id": "local_govt_and_lot", "score": 1, "gold_sql": "SELECT T1.customer_id, T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING COUNT(*) >= 3", "pred_sql": "SELECT c.customer_id, c.customer_details FROM Customers AS c JOIN Customer_Events AS ce ON c.customer_id = ce.customer_id GROUP BY c.customer_id HAVING COUNT(ce.Customer_Event_ID) >= 3", "source_tables": ["customers", "customer_events"], "error_info": ""}, {"sample_id": 4849, "db_id": "local_govt_and_lot", "score": 0, "gold_sql": "SELECT T2.date_moved_in, T1.customer_id, T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id", "pred_sql": "SELECT customer_id, date_moved_in, customer_details FROM Customers JOIN Customer_Events ON Customers.customer_id = Customer_Events.customer_id", "source_tables": ["customers", "customer_events"], "error_info": "Predction Execution Error:ambiguous column name: customer_id"}, {"sample_id": 4850, "db_id": "local_govt_and_lot", "score": 1, "gold_sql": "SELECT T1.Customer_Event_ID, T1.property_id FROM Customer_Events AS T1 JOIN Customer_Event_Notes AS T2 ON T1.Customer_Event_ID = T2.Customer_Event_ID GROUP BY T1.customer_event_id HAVING COUNT(*) BETWEEN 1 AND 3", "pred_sql": "SELECT ce.Customer_Event_ID, ce.property_id FROM Customer_Events AS ce JOIN Customer_Event_Notes AS cen ON ce.Customer_Event_ID = cen.Customer_Event_ID GROUP BY ce.Customer_Event_ID, ce.property_id HAVING COUNT(cen.Customer_Event_Note_ID) BETWEEN 1 AND 3", "source_tables": ["customer_event_notes", "customer_events"], "error_info": ""}, {"sample_id": 4851, "db_id": "local_govt_and_lot", "score": 1, "gold_sql": "SELECT DISTINCT T2.thing_id, T2.Type_of_Thing_Code FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id = T2.thing_id WHERE T1.Status_of_Thing_Code = 'Close' OR T1.Date_and_Date < '2017-06-19 02:59:21'", "pred_sql": "SELECT DISTINCT t.thing_id, t.Type_of_Thing_Code FROM Things AS t JOIN Timed_Status_of_Things AS ts ON t.thing_id = ts.thing_id WHERE ts.Status_of_Thing_Code = 'Close' OR ts.Date_and_Date < '2017-06-19 02:59:21'", "source_tables": ["timed_status_of_things", "things"], "error_info": ""}, {"sample_id": 4852, "db_id": "local_govt_and_lot", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT T2.Location_Code) FROM Things AS T1 JOIN Timed_Locations_of_Things AS T2 ON T1.thing_id = T2.thing_id WHERE T1.service_details = 'Unsatisfied'", "pred_sql": "SELECT COUNT(DISTINCT Timed_Locations_of_Things.Location_Code) AS distinct_locations FROM Timed_Locations_of_Things JOIN Things ON Timed_Locations_of_Things.thing_id = Things.thing_id JOIN Services ON Things.service_type_code = Services.service_type_code WHERE Services.service_details = 'Unsatisfied'", "source_tables": ["things", "timed_locations_of_things"], "error_info": ""}, {"sample_id": 4853, "db_id": "local_govt_and_lot", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT Status_of_Thing_Code) FROM Timed_Status_of_Things", "pred_sql": "SELECT COUNT(DISTINCT Status_of_Thing_Code) AS different_status_codes FROM Timed_Status_of_Things", "source_tables": ["timed_status_of_things"], "error_info": ""}, {"sample_id": 4854, "db_id": "local_govt_and_lot", "score": 0, "gold_sql": "SELECT organization_id FROM organizations EXCEPT SELECT parent_organization_id FROM organizations", "pred_sql": "SELECT organization_id FROM Organizations WHERE parent_organization_id IS NULL", "source_tables": ["organizations"], "error_info": "Result not equal"}, {"sample_id": 4855, "db_id": "local_govt_and_lot", "score": 1, "gold_sql": "SELECT MAX(date_moved_in) FROM Residents", "pred_sql": "SELECT MAX(date_moved_in) AS last_move_in_date FROM Residents", "source_tables": ["residents"], "error_info": ""}, {"sample_id": 4856, "db_id": "local_govt_and_lot", "score": 0, "gold_sql": "SELECT other_details FROM Residents WHERE other_details LIKE '%Miss%'", "pred_sql": "SELECT * FROM Residents WHERE other_details LIKE '%Miss%'", "source_tables": ["residents"], "error_info": "Result not equal"}, {"sample_id": 4857, "db_id": "local_govt_and_lot", "score": 1, "gold_sql": "SELECT customer_event_id, date_moved_in, property_id FROM customer_events", "pred_sql": "SELECT Customer_Event_ID, date_moved_in, property_id FROM Customer_Events", "source_tables": ["customer_events"], "error_info": ""}, {"sample_id": 4858, "db_id": "local_govt_and_lot", "score": 1, "gold_sql": "SELECT COUNT(*) FROM customers WHERE NOT customer_id IN (SELECT customer_id FROM customer_events)", "pred_sql": "SELECT COUNT(*) AS customer_count FROM Customers WHERE NOT customer_id IN (SELECT DISTINCT customer_id FROM Customer_Events)", "source_tables": ["customers", "customer_events"], "error_info": ""}, {"sample_id": 4859, "db_id": "local_govt_and_lot", "score": 1, "gold_sql": "SELECT DISTINCT date_moved_in FROM residents", "pred_sql": "SELECT DISTINCT date_moved_in FROM Residents", "source_tables": ["residents"], "error_info": ""}, {"sample_id": 4860, "db_id": "school_player", "score": 1, "gold_sql": "SELECT COUNT(*) FROM school", "pred_sql": "SELECT COUNT(*) AS total_schools FROM school", "source_tables": ["school"], "error_info": ""}, {"sample_id": 4861, "db_id": "school_player", "score": 1, "gold_sql": "SELECT COUNT(*) FROM school", "pred_sql": "SELECT COUNT(*) AS Number_of_Schools FROM school", "source_tables": ["school"], "error_info": ""}, {"sample_id": 4862, "db_id": "school_player", "score": 1, "gold_sql": "SELECT LOCATION FROM school ORDER BY Enrollment ASC", "pred_sql": "SELECT Location FROM school ORDER BY Enrollment ASC", "source_tables": ["school"], "error_info": ""}, {"sample_id": 4863, "db_id": "school_player", "score": 1, "gold_sql": "SELECT LOCATION FROM school ORDER BY Enrollment ASC", "pred_sql": "SELECT Location FROM school ORDER BY Enrollment ASC", "source_tables": ["school"], "error_info": ""}, {"sample_id": 4864, "db_id": "school_player", "score": 1, "gold_sql": "SELECT LOCATION FROM school ORDER BY Founded DESC", "pred_sql": "SELECT Location FROM school ORDER BY Founded DESC", "source_tables": ["school"], "error_info": ""}, {"sample_id": 4865, "db_id": "school_player", "score": 1, "gold_sql": "SELECT LOCATION FROM school ORDER BY Founded DESC", "pred_sql": "SELECT Location FROM school ORDER BY Founded DESC", "source_tables": ["school"], "error_info": ""}, {"sample_id": 4866, "db_id": "school_player", "score": 0, "gold_sql": "SELECT Enrollment FROM school WHERE Denomination <> 'Catholic'", "pred_sql": "SELECT School, Enrollment FROM school WHERE Denomination <> 'Catholic'", "source_tables": ["school"], "error_info": "Result not equal"}, {"sample_id": 4867, "db_id": "school_player", "score": 0, "gold_sql": "SELECT Enrollment FROM school WHERE Denomination <> 'Catholic'", "pred_sql": "SELECT School, Enrollment FROM school WHERE Denomination <> 'Catholic'", "source_tables": ["school"], "error_info": "Result not equal"}, {"sample_id": 4868, "db_id": "school_player", "score": 1, "gold_sql": "SELECT AVG(Enrollment) FROM school", "pred_sql": "SELECT AVG(Enrollment) AS Average_Enrollment FROM school", "source_tables": ["school"], "error_info": ""}, {"sample_id": 4869, "db_id": "school_player", "score": 1, "gold_sql": "SELECT AVG(Enrollment) FROM school", "pred_sql": "SELECT AVG(Enrollment) AS Average_Enrollment FROM school", "source_tables": ["school"], "error_info": ""}, {"sample_id": 4870, "db_id": "school_player", "score": 0, "gold_sql": "SELECT Team FROM player ORDER BY Team ASC", "pred_sql": "SELECT DISTINCT Team FROM player ORDER BY Team ASC", "source_tables": ["player"], "error_info": "Result not equal"}, {"sample_id": 4871, "db_id": "school_player", "score": 1, "gold_sql": "SELECT Team FROM player ORDER BY Team ASC", "pred_sql": "SELECT Team FROM player ORDER BY Team ASC", "source_tables": ["player"], "error_info": ""}, {"sample_id": 4872, "db_id": "school_player", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT POSITION) FROM player", "pred_sql": "SELECT COUNT(DISTINCT Position) AS Different_Positions FROM player", "source_tables": ["player"], "error_info": ""}, {"sample_id": 4873, "db_id": "school_player", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT POSITION) FROM player", "pred_sql": "SELECT COUNT(DISTINCT Position) AS distinct_player_positions FROM player", "source_tables": ["player"], "error_info": ""}, {"sample_id": 4874, "db_id": "school_player", "score": 1, "gold_sql": "SELECT Team FROM player ORDER BY Age DESC LIMIT 1", "pred_sql": "SELECT Team FROM player WHERE Age = (SELECT MAX(Age) FROM player)", "source_tables": ["player"], "error_info": ""}, {"sample_id": 4875, "db_id": "school_player", "score": 1, "gold_sql": "SELECT Team FROM player ORDER BY Age DESC LIMIT 1", "pred_sql": "SELECT Team FROM player WHERE Age = (SELECT MAX(Age) FROM player)", "source_tables": ["player"], "error_info": ""}, {"sample_id": 4876, "db_id": "school_player", "score": 0, "gold_sql": "SELECT Team FROM player ORDER BY Age DESC LIMIT 5", "pred_sql": "SELECT Team FROM player WHERE Player_ID IN (SELECT Player_ID FROM player ORDER BY Age DESC LIMIT 5)", "source_tables": ["player"], "error_info": "Result not equal"}, {"sample_id": 4877, "db_id": "school_player", "score": 0, "gold_sql": "SELECT Team FROM player ORDER BY Age DESC LIMIT 5", "pred_sql": "SELECT Team FROM player WHERE Player_ID IN (SELECT Player_ID FROM player ORDER BY Age ASC LIMIT 5)", "source_tables": ["player"], "error_info": "Result not equal"}, {"sample_id": 4878, "db_id": "school_player", "score": 1, "gold_sql": "SELECT T1.Team, T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID", "pred_sql": "SELECT player.Team, school.Location FROM player JOIN school ON player.School_ID = school.School_ID", "source_tables": ["player", "school"], "error_info": ""}, {"sample_id": 4879, "db_id": "school_player", "score": 1, "gold_sql": "SELECT T1.Team, T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID", "pred_sql": "SELECT player.Team, school.Location FROM player JOIN school ON player.School_ID = school.School_ID", "source_tables": ["player", "school"], "error_info": ""}, {"sample_id": 4880, "db_id": "school_player", "score": 1, "gold_sql": "SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*) > 1", "pred_sql": "SELECT school.Location FROM school JOIN player ON school.School_ID = player.School_ID GROUP BY school.School_ID HAVING COUNT(player.Player_ID) > 1", "source_tables": ["player", "school"], "error_info": ""}, {"sample_id": 4881, "db_id": "school_player", "score": 1, "gold_sql": "SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*) > 1", "pred_sql": "SELECT school.Location FROM school JOIN player ON school.School_ID = player.School_ID GROUP BY school.School_ID HAVING COUNT(player.Player_ID) > 1", "source_tables": ["player", "school"], "error_info": ""}, {"sample_id": 4882, "db_id": "school_player", "score": 1, "gold_sql": "SELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT s.Denomination FROM school AS s JOIN player AS p ON s.School_ID = p.School_ID GROUP BY s.School_ID ORDER BY COUNT(p.Player_ID) DESC LIMIT 1", "source_tables": ["player", "school"], "error_info": ""}, {"sample_id": 4883, "db_id": "school_player", "score": 1, "gold_sql": "SELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT s.Denomination FROM school AS s JOIN player AS p ON s.School_ID = p.School_ID GROUP BY s.Denomination ORDER BY COUNT(p.Player_ID) DESC LIMIT 1", "source_tables": ["player", "school"], "error_info": ""}, {"sample_id": 4884, "db_id": "school_player", "score": 1, "gold_sql": "SELECT T1.Location, T2.Nickname FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID = T2.School_ID", "pred_sql": "SELECT school.Location, school_details.Nickname FROM school JOIN school_details ON school.School_ID = school_details.School_ID", "source_tables": ["school_details", "school"], "error_info": ""}, {"sample_id": 4885, "db_id": "school_player", "score": 1, "gold_sql": "SELECT T1.Location, T2.Nickname FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID = T2.School_ID", "pred_sql": "SELECT school.Location, school_details.Nickname FROM school JOIN school_details ON school.School_ID = school_details.School_ID", "source_tables": ["school_details", "school"], "error_info": ""}, {"sample_id": 4886, "db_id": "school_player", "score": 1, "gold_sql": "SELECT Denomination, COUNT(*) FROM school GROUP BY Denomination", "pred_sql": "SELECT Denomination, COUNT(*) AS Number_of_Schools FROM school GROUP BY Denomination", "source_tables": ["school"], "error_info": ""}, {"sample_id": 4887, "db_id": "school_player", "score": 1, "gold_sql": "SELECT Denomination, COUNT(*) FROM school GROUP BY Denomination", "pred_sql": "SELECT Denomination, COUNT(*) AS School_Count FROM school GROUP BY Denomination", "source_tables": ["school"], "error_info": ""}, {"sample_id": 4888, "db_id": "school_player", "score": 1, "gold_sql": "SELECT Denomination, COUNT(*) FROM school GROUP BY Denomination ORDER BY COUNT(*) DESC", "pred_sql": "SELECT Denomination, COUNT(*) AS Number_of_Schools FROM school GROUP BY Denomination ORDER BY Number_of_Schools DESC", "source_tables": ["school"], "error_info": ""}, {"sample_id": 4889, "db_id": "school_player", "score": 1, "gold_sql": "SELECT Denomination, COUNT(*) FROM school GROUP BY Denomination ORDER BY COUNT(*) DESC", "pred_sql": "SELECT Denomination, COUNT(*) AS School_Count FROM school GROUP BY Denomination ORDER BY School_Count DESC", "source_tables": ["school"], "error_info": ""}, {"sample_id": 4890, "db_id": "school_player", "score": 1, "gold_sql": "SELECT School_Colors FROM school ORDER BY Enrollment DESC LIMIT 1", "pred_sql": "SELECT school.School_Colors FROM school ORDER BY CAST(school.Enrollment AS INT) DESC LIMIT 1", "source_tables": ["school"], "error_info": ""}, {"sample_id": 4891, "db_id": "school_player", "score": 1, "gold_sql": "SELECT School_Colors FROM school ORDER BY Enrollment DESC LIMIT 1", "pred_sql": "SELECT school.School_Colors FROM school ORDER BY CAST(school.Enrollment AS INT) DESC LIMIT 1", "source_tables": ["school"], "error_info": ""}, {"sample_id": 4892, "db_id": "school_player", "score": 1, "gold_sql": "SELECT LOCATION FROM school WHERE NOT School_ID IN (SELECT School_ID FROM Player)", "pred_sql": "SELECT Location FROM school WHERE NOT School_ID IN (SELECT DISTINCT School_ID FROM player)", "source_tables": ["player", "school"], "error_info": ""}, {"sample_id": 4893, "db_id": "school_player", "score": 1, "gold_sql": "SELECT LOCATION FROM school WHERE NOT School_ID IN (SELECT School_ID FROM Player)", "pred_sql": "SELECT school.Location FROM school LEFT JOIN player ON school.School_ID = player.School_ID WHERE player.Player_ID IS NULL", "source_tables": ["player", "school"], "error_info": ""}, {"sample_id": 4894, "db_id": "school_player", "score": 1, "gold_sql": "SELECT Denomination FROM school WHERE Founded < 1890 INTERSECT SELECT Denomination FROM school WHERE Founded > 1900", "pred_sql": "SELECT DISTINCT s1.Denomination FROM school AS s1 JOIN school AS s2 ON s1.Denomination = s2.Denomination WHERE s1.Founded < '1890' AND s2.Founded > '1900'", "source_tables": ["school"], "error_info": ""}, {"sample_id": 4895, "db_id": "school_player", "score": 0, "gold_sql": "SELECT Denomination FROM school WHERE Founded < 1890 INTERSECT SELECT Denomination FROM school WHERE Founded > 1900", "pred_sql": "SELECT DISTINCT Denomination FROM school WHERE Founded < '1890' UNION SELECT DISTINCT Denomination FROM school WHERE Founded > '1900'", "source_tables": ["school"], "error_info": "Result not equal"}, {"sample_id": 4896, "db_id": "school_player", "score": 0, "gold_sql": "SELECT Nickname FROM school_details WHERE Division <> 'Division 1'", "pred_sql": "SELECT sd.Nickname FROM school_details AS sd JOIN school AS s ON sd.School_ID = s.School_ID WHERE sd.Division <> 1", "source_tables": ["school_details"], "error_info": "Result not equal"}, {"sample_id": 4897, "db_id": "school_player", "score": 0, "gold_sql": "SELECT Nickname FROM school_details WHERE Division <> 'Division 1'", "pred_sql": "SELECT sd.Nickname FROM school_details AS sd WHERE sd.Division <> 1", "source_tables": ["school_details"], "error_info": "Result not equal"}, {"sample_id": 4898, "db_id": "school_player", "score": 1, "gold_sql": "SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*) > 1", "pred_sql": "SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(School_ID) > 1", "source_tables": ["school"], "error_info": ""}, {"sample_id": 4899, "db_id": "school_player", "score": 1, "gold_sql": "SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*) > 1", "pred_sql": "SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(School_ID) > 1", "source_tables": ["school"], "error_info": ""}, {"sample_id": 4900, "db_id": "store_product", "score": 1, "gold_sql": "SELECT DISTINCT District_name FROM district ORDER BY city_area DESC", "pred_sql": "SELECT DISTINCT District_name FROM district ORDER BY City_Area DESC", "source_tables": ["district"], "error_info": ""}, {"sample_id": 4901, "db_id": "store_product", "score": 1, "gold_sql": "SELECT DISTINCT District_name FROM district ORDER BY city_area DESC", "pred_sql": "SELECT District_name FROM district ORDER BY City_Area DESC", "source_tables": ["district"], "error_info": ""}, {"sample_id": 4902, "db_id": "store_product", "score": 0, "gold_sql": "SELECT max_page_size FROM product GROUP BY max_page_size HAVING COUNT(*) > 3", "pred_sql": "SELECT max_page_size FROM product WHERE product_id IN (SELECT Product_ID FROM store_product GROUP BY Product_ID HAVING COUNT(Store_ID) > 3)", "source_tables": ["product"], "error_info": "Result not equal"}, {"sample_id": 4903, "db_id": "store_product", "score": 0, "gold_sql": "SELECT max_page_size FROM product GROUP BY max_page_size HAVING COUNT(*) > 3", "pred_sql": "SELECT MAX(p.max_page_size) AS max_page_size FROM product AS p JOIN store_product AS sp ON p.product_id = sp.Product_ID JOIN store AS s ON sp.Store_ID = s.Store_ID GROUP BY s.Store_ID HAVING COUNT(sp.Product_ID) > 3", "source_tables": ["product"], "error_info": "Result not equal"}, {"sample_id": 4904, "db_id": "store_product", "score": 1, "gold_sql": "SELECT District_name, City_Population FROM district WHERE City_Population BETWEEN 200000 AND 2000000", "pred_sql": "SELECT District_name, City_Population FROM district WHERE City_Population BETWEEN '200000' AND '2000000'", "source_tables": ["district"], "error_info": ""}, {"sample_id": 4905, "db_id": "store_product", "score": 1, "gold_sql": "SELECT District_name, City_Population FROM district WHERE City_Population BETWEEN 200000 AND 2000000", "pred_sql": "SELECT District_name, City_Population FROM district WHERE City_Population BETWEEN '200000' AND '2000000'", "source_tables": ["district"], "error_info": ""}, {"sample_id": 4906, "db_id": "store_product", "score": 1, "gold_sql": "SELECT district_name FROM district WHERE city_area > 10 OR City_Population > 100000", "pred_sql": "SELECT District_name FROM district WHERE City_Area > 10 OR City_Population > 100000", "source_tables": ["district"], "error_info": ""}, {"sample_id": 4907, "db_id": "store_product", "score": 1, "gold_sql": "SELECT district_name FROM district WHERE city_area > 10 OR City_Population > 100000", "pred_sql": "SELECT District_name FROM district WHERE City_Area > 10 OR City_Population > 100000", "source_tables": ["district"], "error_info": ""}, {"sample_id": 4908, "db_id": "store_product", "score": 1, "gold_sql": "SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1", "pred_sql": "SELECT District_name FROM district ORDER BY City_Population DESC LIMIT 1", "source_tables": ["district"], "error_info": ""}, {"sample_id": 4909, "db_id": "store_product", "score": 1, "gold_sql": "SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1", "pred_sql": "SELECT District_name FROM district ORDER BY City_Population DESC LIMIT 1", "source_tables": ["district"], "error_info": ""}, {"sample_id": 4910, "db_id": "store_product", "score": 1, "gold_sql": "SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1", "pred_sql": "SELECT District_name FROM district ORDER BY City_Area ASC LIMIT 1", "source_tables": ["district"], "error_info": ""}, {"sample_id": 4911, "db_id": "store_product", "score": 1, "gold_sql": "SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1", "pred_sql": "SELECT District_name FROM district ORDER BY City_Area ASC LIMIT 1", "source_tables": ["district"], "error_info": ""}, {"sample_id": 4912, "db_id": "store_product", "score": 1, "gold_sql": "SELECT SUM(city_population) FROM district ORDER BY city_area DESC LIMIT 3", "pred_sql": "SELECT SUM(City_Population) AS Total_Population FROM district ORDER BY City_Area DESC LIMIT 3", "source_tables": ["district"], "error_info": ""}, {"sample_id": 4913, "db_id": "store_product", "score": 0, "gold_sql": "SELECT SUM(city_population) FROM district ORDER BY city_area DESC LIMIT 3", "pred_sql": "SELECT SUM(City_Population) AS Total_Residents FROM district WHERE District_ID IN (SELECT District_ID FROM district ORDER BY City_Area DESC LIMIT 3)", "source_tables": ["district"], "error_info": "Result not equal"}, {"sample_id": 4914, "db_id": "store_product", "score": 1, "gold_sql": "SELECT TYPE, COUNT(*) FROM store GROUP BY TYPE", "pred_sql": "SELECT Type, COUNT(*) AS Number_of_Stores FROM store GROUP BY Type", "source_tables": ["store"], "error_info": ""}, {"sample_id": 4915, "db_id": "store_product", "score": 1, "gold_sql": "SELECT TYPE, COUNT(*) FROM store GROUP BY TYPE", "pred_sql": "SELECT Type, COUNT(*) AS Store_Count FROM store GROUP BY Type", "source_tables": ["store"], "error_info": ""}, {"sample_id": 4916, "db_id": "store_product", "score": 0, "gold_sql": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t3.district_name = 'Khanewal District'", "pred_sql": "SELECT store.Store_Name FROM store JOIN store_district ON store.Store_ID = store_district.Store_ID JOIN district ON store_district.District_ID = district.District_ID WHERE district.District_name = 'Khanewal'", "source_tables": ["store_district", "store", "district"], "error_info": "Result not equal"}, {"sample_id": 4917, "db_id": "store_product", "score": 0, "gold_sql": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t3.district_name = 'Khanewal District'", "pred_sql": "SELECT store.Store_Name FROM store INNER JOIN store_district ON store.Store_ID = store_district.Store_ID INNER JOIN district ON store_district.District_ID = district.District_ID WHERE district.District_name = 'Khanewal'", "source_tables": ["store_district", "store", "district"], "error_info": "Result not equal"}, {"sample_id": 4918, "db_id": "store_product", "score": 1, "gold_sql": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id WHERE district_id = (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)", "pred_sql": "SELECT store.Store_Name FROM store JOIN store_district ON store.Store_ID = store_district.Store_ID JOIN district ON store_district.District_ID = district.District_ID WHERE district.City_Population = (SELECT MAX(City_Population) FROM district)", "source_tables": ["store_district", "store", "district"], "error_info": ""}, {"sample_id": 4919, "db_id": "store_product", "score": 1, "gold_sql": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id WHERE district_id = (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)", "pred_sql": "SELECT store.Store_Name FROM store JOIN store_district ON store.Store_ID = store_district.Store_ID JOIN district ON store_district.District_ID = district.District_ID WHERE district.City_Population = (SELECT MAX(City_Population) FROM district)", "source_tables": ["store_district", "store", "district"], "error_info": ""}, {"sample_id": 4920, "db_id": "store_product", "score": 1, "gold_sql": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t1.store_name = 'Blackville'", "pred_sql": "SELECT d.Headquartered_City FROM store AS s JOIN store_district AS sd ON s.Store_ID = sd.Store_ID JOIN district AS d ON sd.District_ID = d.District_ID WHERE s.Store_Name = 'Blackville'", "source_tables": ["store_district", "store", "district"], "error_info": ""}, {"sample_id": 4921, "db_id": "store_product", "score": 1, "gold_sql": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t1.store_name = 'Blackville'", "pred_sql": "SELECT d.Headquartered_City FROM store AS s JOIN store_district AS sd ON s.Store_ID = sd.Store_ID JOIN district AS d ON sd.District_ID = d.District_ID WHERE s.Store_Name = 'Blackville'", "source_tables": ["store_district", "store", "district"], "error_info": ""}, {"sample_id": 4922, "db_id": "store_product", "score": 0, "gold_sql": "SELECT t3.headquartered_city, COUNT(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY t3.headquartered_city", "pred_sql": "SELECT d.District_name, COUNT(s.Store_ID) AS Number_of_Stores FROM store AS s JOIN store_district AS sd ON s.Store_ID = sd.Store_ID JOIN district AS d ON sd.District_ID = d.District_ID GROUP BY d.District_name", "source_tables": ["store_district", "store", "district"], "error_info": "Result not equal"}, {"sample_id": 4923, "db_id": "store_product", "score": 1, "gold_sql": "SELECT t3.headquartered_city, COUNT(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY t3.headquartered_city", "pred_sql": "SELECT d.Headquartered_City, COUNT(s.Store_ID) AS Number_of_Stores FROM store AS s JOIN store_district AS sd ON s.Store_ID = sd.Store_ID JOIN district AS d ON sd.District_ID = d.District_ID GROUP BY d.Headquartered_City", "source_tables": ["store_district", "store", "district"], "error_info": ""}, {"sample_id": 4924, "db_id": "store_product", "score": 0, "gold_sql": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY t3.headquartered_city ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT d.Headquartered_City, COUNT(s.Store_ID) AS Number_of_Stores FROM store AS s JOIN store_district AS sd ON s.Store_ID = sd.Store_ID JOIN district AS d ON sd.District_ID = d.District_ID GROUP BY d.Headquartered_City ORDER BY Number_of_Stores DESC LIMIT 1", "source_tables": ["store_district", "store", "district"], "error_info": "Result not equal"}, {"sample_id": 4925, "db_id": "store_product", "score": 0, "gold_sql": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY t3.headquartered_city ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT d.District_name, COUNT(s.Store_ID) AS flagship_store_count FROM store AS s JOIN store_district AS sd ON s.Store_ID = sd.Store_ID JOIN district AS d ON sd.District_ID = d.District_ID WHERE s.Type = 'flagship' GROUP BY d.District_name ORDER BY flagship_store_count DESC LIMIT 1", "source_tables": ["store_district", "store", "district"], "error_info": "Result not equal"}, {"sample_id": 4926, "db_id": "store_product", "score": 1, "gold_sql": "SELECT AVG(pages_per_minute_color) FROM product", "pred_sql": "SELECT AVG(pages_per_minute_color) AS average_pages_per_minute_color FROM product", "source_tables": ["product"], "error_info": ""}, {"sample_id": 4927, "db_id": "store_product", "score": 1, "gold_sql": "SELECT AVG(pages_per_minute_color) FROM product", "pred_sql": "SELECT AVG(pages_per_minute_color) AS average_pages_per_minute_color FROM product", "source_tables": ["product"], "error_info": ""}, {"sample_id": 4928, "db_id": "store_product", "score": 0, "gold_sql": "SELECT t1.product FROM product AS t1 JOIN store_product AS t2 ON t1.product_id = t2.product_id JOIN store AS t3 ON t2.store_id = t3.store_id WHERE t3.store_name = 'Miramichi'", "pred_sql": "SELECT product.product_id, product.product, product.dimensions, product.dpi, product.pages_per_minute_color, product.max_page_size, product.interface FROM product JOIN store_product ON product.product_id = store_product.Product_ID JOIN store ON store_product.Store_ID = store.Store_ID WHERE store.Store_Name = 'Miramichi'", "source_tables": ["store", "store_product", "product"], "error_info": "Result not equal"}, {"sample_id": 4929, "db_id": "store_product", "score": 1, "gold_sql": "SELECT t1.product FROM product AS t1 JOIN store_product AS t2 ON t1.product_id = t2.product_id JOIN store AS t3 ON t2.store_id = t3.store_id WHERE t3.store_name = 'Miramichi'", "pred_sql": "SELECT product.product FROM product JOIN store_product ON product.product_id = store_product.Product_ID JOIN store ON store_product.Store_ID = store.Store_ID WHERE store.Store_Name = 'Miramichi'", "source_tables": ["store", "store_product", "product"], "error_info": ""}, {"sample_id": 4930, "db_id": "store_product", "score": 0, "gold_sql": "SELECT product FROM product WHERE max_page_size = 'A4' AND pages_per_minute_color < 5", "pred_sql": "SELECT * FROM product WHERE max_page_size = 'A4' AND pages_per_minute_color < '5'", "source_tables": ["product"], "error_info": "Result not equal"}, {"sample_id": 4931, "db_id": "store_product", "score": 0, "gold_sql": "SELECT product FROM product WHERE max_page_size = 'A4' AND pages_per_minute_color < 5", "pred_sql": "SELECT product.product_id, product.product, product.dimensions, product.dpi, product.pages_per_minute_color, product.max_page_size, product.interface FROM product WHERE product.max_page_size = 'A4' AND product.pages_per_minute_color < '5'", "source_tables": ["product"], "error_info": "Result not equal"}, {"sample_id": 4932, "db_id": "store_product", "score": 0, "gold_sql": "SELECT product FROM product WHERE max_page_size = 'A4' OR pages_per_minute_color < 5", "pred_sql": "SELECT * FROM product WHERE max_page_size = 'A4' OR pages_per_minute_color < '5'", "source_tables": ["product"], "error_info": "Result not equal"}, {"sample_id": 4933, "db_id": "store_product", "score": 0, "gold_sql": "SELECT product FROM product WHERE max_page_size = 'A4' OR pages_per_minute_color < 5", "pred_sql": "SELECT * FROM product WHERE max_page_size = 'A4' OR pages_per_minute_color < '5'", "source_tables": ["product"], "error_info": "Result not equal"}, {"sample_id": 4934, "db_id": "store_product", "score": 0, "gold_sql": "SELECT product FROM product WHERE product LIKE '%Scanner%'", "pred_sql": "SELECT * FROM product WHERE product LIKE '%Scanner%'", "source_tables": ["product"], "error_info": "Result not equal"}, {"sample_id": 4935, "db_id": "store_product", "score": 0, "gold_sql": "SELECT product FROM product WHERE product LIKE '%Scanner%'", "pred_sql": "SELECT * FROM product WHERE product LIKE '%Scanner%'", "source_tables": ["product"], "error_info": "Result not equal"}, {"sample_id": 4936, "db_id": "store_product", "score": 1, "gold_sql": "SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT MAX(max_page_size) AS most_prominent_max_page_size FROM product", "source_tables": ["product"], "error_info": ""}, {"sample_id": 4937, "db_id": "store_product", "score": 0, "gold_sql": "SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT max_page_size, COUNT(*) AS count FROM product GROUP BY max_page_size ORDER BY count DESC LIMIT 1", "source_tables": ["product"], "error_info": "Result not equal"}, {"sample_id": 4938, "db_id": "store_product", "score": 0, "gold_sql": "SELECT product FROM product WHERE product <> (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY COUNT(*) DESC LIMIT 1)", "pred_sql": "SELECT product.product FROM product WHERE NOT product.max_page_size IN (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY COUNT(*) DESC LIMIT 1)", "source_tables": ["product"], "error_info": "Result not equal"}, {"sample_id": 4939, "db_id": "store_product", "score": 0, "gold_sql": "SELECT product FROM product WHERE product <> (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY COUNT(*) DESC LIMIT 1)", "pred_sql": "SELECT product.product FROM product WHERE NOT product.max_page_size IN (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY COUNT(*) DESC LIMIT 1)", "source_tables": ["product"], "error_info": "Result not equal"}, {"sample_id": 4940, "db_id": "store_product", "score": 1, "gold_sql": "SELECT SUM(city_population) FROM district WHERE city_area > (SELECT AVG(city_area) FROM district)", "pred_sql": "SELECT SUM(City_Population) AS Total_Population FROM district WHERE City_Area > (SELECT AVG(City_Area) FROM district)", "source_tables": ["district"], "error_info": ""}, {"sample_id": 4941, "db_id": "store_product", "score": 1, "gold_sql": "SELECT SUM(city_population) FROM district WHERE city_area > (SELECT AVG(city_area) FROM district)", "pred_sql": "SELECT SUM(City_Population) AS Total_Population FROM district WHERE City_Area > (SELECT AVG(City_Area) FROM district)", "source_tables": ["district"], "error_info": ""}, {"sample_id": 4942, "db_id": "store_product", "score": 0, "gold_sql": "SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t1.Type = 'City Mall' INTERSECT SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t1.Type = 'Village Store'", "pred_sql": "SELECT DISTINCT d.District_name FROM district AS d JOIN store_district AS sd ON d.District_ID = sd.District_ID JOIN store AS s ON sd.Store_ID = s.Store_ID WHERE s.Type IN ('city mall', 'village store') GROUP BY d.District_name HAVING COUNT(DISTINCT s.Type) = 2", "source_tables": ["store_district", "store", "district"], "error_info": "Result not equal"}, {"sample_id": 4943, "db_id": "store_product", "score": 0, "gold_sql": "SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t1.Type = 'City Mall' INTERSECT SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t1.Type = 'Village Store'", "pred_sql": "SELECT DISTINCT d.District_name FROM district AS d JOIN store_district AS sd ON d.District_ID = sd.District_ID JOIN store AS s ON sd.Store_ID = s.Store_ID WHERE s.Type IN ('mall', 'village') GROUP BY d.District_name HAVING COUNT(DISTINCT s.Type) = 2", "source_tables": ["store_district", "store", "district"], "error_info": "Result not equal"}, {"sample_id": 4944, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT SUM(enr) FROM College", "pred_sql": "SELECT SUM(enr) AS total_enrollment FROM College", "source_tables": ["college"], "error_info": ""}, {"sample_id": 4945, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT SUM(enr) FROM College", "pred_sql": "SELECT SUM(enr) AS total_enrollment FROM College", "source_tables": ["college"], "error_info": ""}, {"sample_id": 4946, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT AVG(enr) FROM College", "pred_sql": "SELECT AVG(enr) AS average_enrollment FROM College", "source_tables": ["college"], "error_info": ""}, {"sample_id": 4947, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT AVG(enr) FROM College", "pred_sql": "SELECT cName, AVG(enr) AS average_enrollment FROM College GROUP BY cName", "source_tables": ["college"], "error_info": "Result not equal"}, {"sample_id": 4948, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT COUNT(*) FROM College", "pred_sql": "SELECT COUNT(*) AS total_colleges FROM College", "source_tables": ["college"], "error_info": ""}, {"sample_id": 4949, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT COUNT(*) FROM College", "pred_sql": "SELECT COUNT(DISTINCT cName) AS different_colleges FROM College", "source_tables": ["college"], "error_info": ""}, {"sample_id": 4950, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT COUNT(*) FROM Player WHERE HS > 1000", "pred_sql": "SELECT COUNT(*) AS player_count FROM Player WHERE training_hours > 1000", "source_tables": ["player"], "error_info": "Predction Execution Error:no such column: training_hours"}, {"sample_id": 4951, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT COUNT(*) FROM Player WHERE HS > 1000", "pred_sql": "SELECT COUNT(DISTINCT pID) AS num_players FROM Training WHERE hours > 1000", "source_tables": ["player"], "error_info": "Predction Execution Error:no such table: Training"}, {"sample_id": 4952, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT COUNT(*) FROM College WHERE enr > 15000", "pred_sql": "SELECT COUNT(*) FROM College WHERE enr > '15000'", "source_tables": ["college"], "error_info": ""}, {"sample_id": 4953, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT COUNT(*) FROM College WHERE enr > 15000", "pred_sql": "SELECT COUNT(*) FROM College WHERE enr > '15000'", "source_tables": ["college"], "error_info": ""}, {"sample_id": 4954, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT AVG(HS) FROM Player", "pred_sql": "SELECT AVG(training_hours) AS average_training_hours FROM Player", "source_tables": ["player"], "error_info": "Predction Execution Error:no such column: training_hours"}, {"sample_id": 4955, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT AVG(HS) FROM Player", "pred_sql": "SELECT AVG(training_hours) AS average_training_hours FROM Player", "source_tables": ["player"], "error_info": "Predction Execution Error:no such column: training_hours"}, {"sample_id": 4956, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT pName, HS FROM Player WHERE HS < 1500", "pred_sql": "SELECT pName FROM Player WHERE training_hours < 1500", "source_tables": ["player"], "error_info": "Predction Execution Error:no such column: training_hours"}, {"sample_id": 4957, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT pName, HS FROM Player WHERE HS < 1500", "pred_sql": "SELECT pName, training_hours FROM Player WHERE training_hours < 1500", "source_tables": ["player"], "error_info": "Predction Execution Error:no such column: training_hours"}, {"sample_id": 4958, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT cName) FROM tryout", "pred_sql": "SELECT COUNT(DISTINCT cName) AS different_colleges FROM Tryout", "source_tables": ["tryout"], "error_info": ""}, {"sample_id": 4959, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT cName) FROM tryout", "pred_sql": "SELECT COUNT(DISTINCT cName) AS different_colleges FROM Tryout", "source_tables": ["tryout"], "error_info": ""}, {"sample_id": 4960, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT COUNT(DISTINCT pPos) FROM tryout", "pred_sql": "SELECT DISTINCT pPos FROM Tryout", "source_tables": ["tryout"], "error_info": "Result not equal"}, {"sample_id": 4961, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT COUNT(DISTINCT pPos) FROM tryout", "pred_sql": "SELECT DISTINCT pPos FROM Tryout", "source_tables": ["tryout"], "error_info": "Result not equal"}, {"sample_id": 4962, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT COUNT(*) FROM tryout WHERE decision = 'yes'", "pred_sql": "SELECT COUNT(*) AS accepted_students FROM Tryout WHERE decision = 'accepted'", "source_tables": ["tryout"], "error_info": "Result not equal"}, {"sample_id": 4963, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT COUNT(*) FROM tryout WHERE decision = 'yes'", "pred_sql": "SELECT COUNT(*) AS yes_count FROM Tryout WHERE decision = 'yes'", "source_tables": ["tryout"], "error_info": ""}, {"sample_id": 4964, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT COUNT(*) FROM tryout WHERE pPos = 'goalie'", "pred_sql": "SELECT COUNT(*) AS goalie_count FROM Player WHERE pPos = 'goalie'", "source_tables": ["tryout"], "error_info": "Predction Execution Error:no such column: pPos"}, {"sample_id": 4965, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT COUNT(*) FROM tryout WHERE pPos = 'goalie'", "pred_sql": "SELECT COUNT(*) AS number_of_goalies FROM Player WHERE pPos = 'goalie'", "source_tables": ["tryout"], "error_info": "Predction Execution Error:no such column: pPos"}, {"sample_id": 4966, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT AVG(HS), MAX(HS), MIN(HS) FROM Player", "pred_sql": "SELECT MAX(training_hours) AS max_hours, AVG(training_hours) AS avg_hours, MIN(training_hours) AS min_hours FROM Player", "source_tables": ["player"], "error_info": "Predction Execution Error:no such column: training_hours"}, {"sample_id": 4967, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT AVG(HS), MAX(HS), MIN(HS) FROM Player", "pred_sql": "SELECT AVG(training_hours) AS average_training_hours, MAX(training_hours) AS max_training_hours, MIN(training_hours) AS min_training_hours FROM Training", "source_tables": ["player"], "error_info": "Predction Execution Error:no such table: Training"}, {"sample_id": 4968, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT AVG(enr) FROM College WHERE state = 'FL'", "pred_sql": "SELECT AVG(enr) AS average_enrollment FROM College WHERE state = 'FL'", "source_tables": ["college"], "error_info": ""}, {"sample_id": 4969, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT AVG(enr) FROM College WHERE state = 'FL'", "pred_sql": "SELECT AVG(enr) AS average_enrollment FROM College WHERE state = 'Florida'", "source_tables": ["college"], "error_info": "Result not equal"}, {"sample_id": 4970, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500", "pred_sql": "SELECT pName FROM Player WHERE training_hours BETWEEN 500 AND 1500", "source_tables": ["player"], "error_info": "Predction Execution Error:no such column: training_hours"}, {"sample_id": 4971, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500", "pred_sql": "SELECT pName FROM Player WHERE pID IN (SELECT pID FROM Tryout WHERE pPos BETWEEN '500' AND '1500')", "source_tables": ["player"], "error_info": "Result not equal"}, {"sample_id": 4972, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%'", "pred_sql": "SELECT * FROM Player WHERE pName LIKE '%a%'", "source_tables": ["player"], "error_info": "Result not equal"}, {"sample_id": 4973, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%'", "pred_sql": "SELECT pName FROM Player WHERE pName LIKE '%a%'", "source_tables": ["player"], "error_info": ""}, {"sample_id": 4974, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT cName, enr FROM College WHERE enr > 10000 AND state = 'LA'", "pred_sql": "SELECT cName, enr FROM College WHERE enr > '10000' AND state = 'LA'", "source_tables": ["college"], "error_info": ""}, {"sample_id": 4975, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT cName, enr FROM College WHERE enr > 10000 AND state = 'LA'", "pred_sql": "SELECT cName, enr FROM College WHERE enr > '10000' AND state = 'Louisiana'", "source_tables": ["college"], "error_info": "Result not equal"}, {"sample_id": 4976, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT * FROM College ORDER BY enr", "pred_sql": "SELECT * FROM College ORDER BY enr ASC", "source_tables": ["college"], "error_info": ""}, {"sample_id": 4977, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT * FROM College ORDER BY enr", "pred_sql": "SELECT cName, state, enr FROM College ORDER BY CAST(enr AS INT) ASC", "source_tables": ["college"], "error_info": ""}, {"sample_id": 4978, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT cName FROM College WHERE enr > 18000 ORDER BY cName", "pred_sql": "SELECT cName FROM College WHERE enr > '18000' ORDER BY cName", "source_tables": ["college"], "error_info": ""}, {"sample_id": 4979, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT cName FROM College WHERE enr > 18000 ORDER BY cName", "pred_sql": "SELECT cName FROM College WHERE enr > '18000' ORDER BY cName ASC", "source_tables": ["college"], "error_info": ""}, {"sample_id": 4980, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT pName FROM Player WHERE yCard = 'yes' ORDER BY HS DESC", "pred_sql": "SELECT pName FROM Player WHERE yCard = 'yes' ORDER BY training_hours DESC", "source_tables": ["player"], "error_info": "Predction Execution Error:no such column: training_hours"}, {"sample_id": 4981, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT pName FROM Player WHERE yCard = 'yes' ORDER BY HS DESC", "pred_sql": "SELECT pName FROM Player ORDER BY yCard DESC", "source_tables": ["player"], "error_info": "Result not equal"}, {"sample_id": 4982, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT DISTINCT cName FROM tryout ORDER BY cName", "pred_sql": "SELECT DISTINCT cName FROM Tryout ORDER BY cName ASC", "source_tables": ["tryout"], "error_info": ""}, {"sample_id": 4983, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT DISTINCT cName FROM tryout ORDER BY cName", "pred_sql": "SELECT DISTINCT cName FROM Tryout ORDER BY cName ASC", "source_tables": ["tryout"], "error_info": ""}, {"sample_id": 4984, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT pPos FROM tryout GROUP BY pPos ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT pPos, COUNT(*) AS position_count FROM Tryout GROUP BY pPos ORDER BY position_count DESC LIMIT 1", "source_tables": ["tryout"], "error_info": "Result not equal"}, {"sample_id": 4985, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT pPos FROM tryout GROUP BY pPos ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT pPos, COUNT(*) AS position_count FROM Tryout GROUP BY pPos ORDER BY position_count DESC LIMIT 1", "source_tables": ["tryout"], "error_info": "Result not equal"}, {"sample_id": 4986, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT COUNT(*), cName FROM tryout GROUP BY cName ORDER BY COUNT(*) DESC", "pred_sql": "SELECT cName, COUNT(pID) AS participant_count FROM Tryout GROUP BY cName ORDER BY participant_count DESC", "source_tables": ["tryout"], "error_info": ""}, {"sample_id": 4987, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT COUNT(*), cName FROM tryout GROUP BY cName ORDER BY COUNT(*) DESC", "pred_sql": "SELECT cName, COUNT(pID) AS student_count FROM Tryout GROUP BY cName ORDER BY student_count DESC", "source_tables": ["tryout"], "error_info": ""}, {"sample_id": 4988, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT MIN(T2.HS), T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID GROUP BY T1.pPos", "pred_sql": "SELECT pPos, MIN(hours) AS min_hours FROM Player GROUP BY pPos", "source_tables": ["player", "tryout"], "error_info": "Predction Execution Error:no such column: pPos"}, {"sample_id": 4989, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT MIN(T2.HS), T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID GROUP BY T1.pPos", "pred_sql": "SELECT pPos, MIN(practice_time) AS min_practice_time FROM Practice GROUP BY pPos", "source_tables": ["player", "tryout"], "error_info": "Predction Execution Error:no such table: Practice"}, {"sample_id": 4990, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT cName FROM college ORDER BY enr DESC LIMIT 3", "pred_sql": "SELECT cName FROM College ORDER BY CAST(enr AS INT) DESC LIMIT 3", "source_tables": ["college"], "error_info": ""}, {"sample_id": 4991, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT cName FROM college ORDER BY enr DESC LIMIT 3", "pred_sql": "SELECT cName FROM College ORDER BY CAST(enr AS INT) DESC LIMIT 3", "source_tables": ["college"], "error_info": ""}, {"sample_id": 4992, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT cName, state, MIN(enr) FROM college GROUP BY state", "pred_sql": "SELECT state, cName FROM College WHERE enr = (SELECT MIN(enr) FROM College AS c2 WHERE c2.state = College.state)", "source_tables": ["college"], "error_info": "Result not equal"}, {"sample_id": 4993, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT cName, state, MIN(enr) FROM college GROUP BY state", "pred_sql": "SELECT state, cName FROM College WHERE enr = (SELECT MIN(enr) FROM College AS c2 WHERE c2.state = College.state)", "source_tables": ["college"], "error_info": "Result not equal"}, {"sample_id": 4994, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName", "pred_sql": "SELECT DISTINCT College.state FROM College JOIN Tryout ON College.cName = Tryout.cName", "source_tables": ["tryout", "college"], "error_info": ""}, {"sample_id": 4995, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName", "pred_sql": "SELECT DISTINCT College.state FROM College JOIN Tryout ON College.cName = Tryout.cName", "source_tables": ["tryout", "college"], "error_info": ""}, {"sample_id": 4996, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes'", "pred_sql": "SELECT DISTINCT College.state FROM College JOIN Tryout ON College.cName = Tryout.cName WHERE Tryout.decision = 'yes'", "source_tables": ["tryout", "college"], "error_info": ""}, {"sample_id": 4997, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes'", "pred_sql": "SELECT DISTINCT College.state FROM Tryout JOIN College ON Tryout.cName = College.cName WHERE Tryout.decision = 'success'", "source_tables": ["tryout", "college"], "error_info": "Result not equal"}, {"sample_id": 4998, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT T1.pName, T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes'", "pred_sql": "SELECT Player.pName, Tryout.cName FROM Player JOIN Tryout ON Player.pID = Tryout.pID WHERE Tryout.decision = 'yes'", "source_tables": ["player", "tryout"], "error_info": ""}, {"sample_id": 4999, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT T1.pName, T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes'", "pred_sql": "SELECT Player.pName, Tryout.cName FROM Player JOIN Tryout ON Player.pID = Tryout.pID WHERE Tryout.decision = 'yes'", "source_tables": ["player", "tryout"], "error_info": ""}, {"sample_id": 5000, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID ORDER BY T1.pName", "pred_sql": "SELECT DISTINCT Player.pName FROM Player JOIN Tryout ON Player.pID = Tryout.pID ORDER BY Player.pName ASC", "source_tables": ["player", "tryout"], "error_info": "Result not equal"}, {"sample_id": 5001, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID ORDER BY T1.pName", "pred_sql": "SELECT DISTINCT Player.pName FROM Player JOIN Tryout ON Player.pID = Tryout.pID ORDER BY Player.pName ASC", "source_tables": ["player", "tryout"], "error_info": "Result not equal"}, {"sample_id": 5002, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT T1.pName, T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes'", "pred_sql": "SELECT Player.pName, Tryout.decision FROM Player JOIN Tryout ON Player.pID = Tryout.pID WHERE Tryout.decision = 'yes'", "source_tables": ["player", "tryout"], "error_info": "Result not equal"}, {"sample_id": 5003, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT T1.pName, T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes'", "pred_sql": "SELECT Player.pName, Tryout.decision FROM Player JOIN Tryout ON Player.pID = Tryout.pID WHERE Tryout.decision = 'yes'", "source_tables": ["player", "tryout"], "error_info": "Result not equal"}, {"sample_id": 5004, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'striker'", "pred_sql": "SELECT DISTINCT College.state FROM College JOIN Tryout ON College.cName = Tryout.cName WHERE Tryout.pPos = 'striker'", "source_tables": ["tryout", "college"], "error_info": ""}, {"sample_id": 5005, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'striker'", "pred_sql": "SELECT DISTINCT College.state FROM College JOIN Tryout ON College.cName = Tryout.cName WHERE Tryout.pPos = 'striker'", "source_tables": ["tryout", "college"], "error_info": ""}, {"sample_id": 5006, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes' AND T2.pPos = 'striker'", "pred_sql": "SELECT Player.pName FROM Player JOIN Tryout ON Player.pID = Tryout.pID WHERE Tryout.pPos = 'striker' AND Tryout.decision = 'yes'", "source_tables": ["player", "tryout"], "error_info": ""}, {"sample_id": 5007, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes' AND T2.pPos = 'striker'", "pred_sql": "SELECT Player.pName FROM Player JOIN Tryout ON Player.pID = Tryout.pID WHERE Tryout.pPos = 'striker' AND Tryout.decision = 'success'", "source_tables": ["player", "tryout"], "error_info": "Result not equal"}, {"sample_id": 5008, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName JOIN player AS T3 ON T2.pID = T3.pID WHERE T3.pName = 'Charles'", "pred_sql": "SELECT College.state FROM College JOIN Tryout ON College.cName = Tryout.cName JOIN Player ON Tryout.pID = Player.pID WHERE Player.pName = 'Charles'", "source_tables": ["player", "tryout", "college"], "error_info": ""}, {"sample_id": 5009, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName JOIN player AS T3 ON T2.pID = T3.pID WHERE T3.pName = 'Charles'", "pred_sql": "SELECT College.state FROM College JOIN Player ON College.cName = Player.HS WHERE Player.pName = 'Charles'", "source_tables": ["player", "tryout", "college"], "error_info": "Result not equal"}, {"sample_id": 5010, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT AVG(T1.HS), MAX(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes'", "pred_sql": "SELECT AVG(hours) AS average_hours, MAX(hours) AS maximum_hours FROM Tryout WHERE decision = 'yes'", "source_tables": ["player", "tryout"], "error_info": "Predction Execution Error:no such column: hours"}, {"sample_id": 5011, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT AVG(T1.HS), MAX(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes'", "pred_sql": "SELECT AVG(practice_hours) AS average_practice_hours, MAX(practice_hours) AS max_practice_hours FROM Practice WHERE decision = 'made the team'", "source_tables": ["player", "tryout"], "error_info": "Predction Execution Error:no such table: Practice"}, {"sample_id": 5012, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT AVG(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'no'", "pred_sql": "SELECT AVG(enr) AS average_enrollment FROM College WHERE cName IN (SELECT cName FROM Tryout WHERE decision = 'no')", "source_tables": ["player", "tryout"], "error_info": "Result not equal"}, {"sample_id": 5013, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT AVG(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'no'", "pred_sql": "SELECT AVG(practice_hours) AS average_practice_hours FROM Player JOIN Tryout ON Player.pID = Tryout.pID WHERE Tryout.decision = 'rejected'", "source_tables": ["player", "tryout"], "error_info": "Predction Execution Error:no such column: practice_hours"}, {"sample_id": 5014, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT MAX(T1.HS), pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T1.HS > 1000 GROUP BY T2.pPos", "pred_sql": "SELECT MAX(training_hours) FROM (SELECT pPos, SUM(training_hours) AS training_hours FROM Tryout GROUP BY pPos HAVING SUM(training_hours) > 1000) AS subquery", "source_tables": ["player", "tryout"], "error_info": "Predction Execution Error:no such column: training_hours"}, {"sample_id": 5015, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT MAX(T1.HS), pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T1.HS > 1000 GROUP BY T2.pPos", "pred_sql": "SELECT pPos, MAX(training_hours) AS max_training_hours FROM (SELECT pPos, SUM(training_hours) AS training_hours FROM Player JOIN Tryout ON Player.pID = Tryout.pID WHERE training_hours > 1000 GROUP BY pPos) AS training_summary GROUP BY pPos", "source_tables": ["player", "tryout"], "error_info": "Predction Execution Error:no such column: training_hours"}, {"sample_id": 5016, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT T1.cName FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID WHERE T2.pName LIKE 'D%'", "pred_sql": "SELECT DISTINCT College.cName FROM College JOIN Tryout ON College.cName = Tryout.cName JOIN Player ON Tryout.pID = Player.pID WHERE Player.pName LIKE 'D%'", "source_tables": ["player", "tryout"], "error_info": ""}, {"sample_id": 5017, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT T1.cName FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID WHERE T2.pName LIKE 'D%'", "pred_sql": "SELECT DISTINCT College.cName FROM College JOIN Tryout ON College.cName = Tryout.cName JOIN Player ON Tryout.pID = Player.pID WHERE Player.pName LIKE 'D%'", "source_tables": ["player", "tryout"], "error_info": ""}, {"sample_id": 5018, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT cName FROM tryout WHERE decision = 'yes' AND pPos = 'goalie'", "pred_sql": "SELECT DISTINCT College.cName FROM College JOIN Tryout ON College.cName = Tryout.cName JOIN Player ON Tryout.pID = Player.pID WHERE Player.pPos = 'goalie' AND Tryout.decision = 'succeeded'", "source_tables": ["tryout"], "error_info": "Predction Execution Error:no such column: Player.pPos"}, {"sample_id": 5019, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT cName FROM tryout WHERE decision = 'yes' AND pPos = 'goalie'", "pred_sql": "SELECT College.cName FROM College JOIN Tryout ON College.cName = Tryout.cName JOIN Player ON Tryout.pID = Player.pID WHERE Tryout.decision = 'success' AND Tryout.pPos = 'goalie'", "source_tables": ["tryout"], "error_info": "Result not equal"}, {"sample_id": 5020, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT T2.pName FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID WHERE T1.cName = (SELECT cName FROM college ORDER BY enr DESC LIMIT 1)", "pred_sql": "SELECT Player.pName FROM Player JOIN Tryout ON Player.pID = Tryout.pID JOIN College ON Tryout.cName = College.cName WHERE College.enr = (SELECT MAX(enr) FROM College)", "source_tables": ["college", "player", "tryout"], "error_info": ""}, {"sample_id": 5021, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT T2.pName FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID WHERE T1.cName = (SELECT cName FROM college ORDER BY enr DESC LIMIT 1)", "pred_sql": "SELECT Player.pName FROM Player JOIN Tryout ON Player.pID = Tryout.pID WHERE Tryout.cName = (SELECT cName FROM College ORDER BY CAST(enr AS INT) DESC LIMIT 1)", "source_tables": ["college", "player", "tryout"], "error_info": ""}, {"sample_id": 5022, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT DISTINCT T1.state, T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes'", "pred_sql": "SELECT College.state, College.enr FROM College JOIN Tryout ON College.cName = Tryout.cName WHERE Tryout.decision = 'accepted'", "source_tables": ["tryout", "college"], "error_info": "Result not equal"}, {"sample_id": 5023, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT DISTINCT T1.state, T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes'", "pred_sql": "SELECT College.state, SUM(CAST(College.enr AS INT)) AS total_enrollment FROM College JOIN Tryout ON College.cName = Tryout.cName WHERE Tryout.decision = 'accepted' GROUP BY College.state", "source_tables": ["tryout", "college"], "error_info": "Result not equal"}, {"sample_id": 5024, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT cName FROM College WHERE enr < 13000 AND state = 'AZ' UNION SELECT cName FROM College WHERE enr > 15000 AND state = 'LA'", "pred_sql": "SELECT cName FROM College WHERE (state = 'CA' AND enr > '15000') OR (state = 'AZ' AND enr < '13000')", "source_tables": ["college"], "error_info": "Result not equal"}, {"sample_id": 5025, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT cName FROM College WHERE enr < 13000 AND state = 'AZ' UNION SELECT cName FROM College WHERE enr > 15000 AND state = 'LA'", "pred_sql": "SELECT cName FROM College WHERE (state = 'LA' AND enr > '15000') OR (state = 'AZ' AND enr < '13000')", "source_tables": ["college"], "error_info": ""}, {"sample_id": 5026, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT cName FROM tryout WHERE pPos = 'goalie' INTERSECT SELECT cName FROM tryout WHERE pPos = 'mid'", "pred_sql": "SELECT DISTINCT College.cName FROM College JOIN Tryout ON College.cName = Tryout.cName WHERE Tryout.pPos IN ('goalie', 'mid')", "source_tables": ["tryout"], "error_info": "Result not equal"}, {"sample_id": 5027, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT cName FROM tryout WHERE pPos = 'goalie' INTERSECT SELECT cName FROM tryout WHERE pPos = 'mid'", "pred_sql": "SELECT DISTINCT College.cName FROM College JOIN Tryout ON College.cName = Tryout.cName WHERE Tryout.pPos IN ('goal', 'mid')", "source_tables": ["tryout"], "error_info": "Result not equal"}, {"sample_id": 5028, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'mid'", "pred_sql": "SELECT DISTINCT College.state FROM College JOIN Tryout ON College.cName = Tryout.cName WHERE Tryout.pPos IN ('goalie', 'mid')", "source_tables": ["tryout", "college"], "error_info": "Result not equal"}, {"sample_id": 5029, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'mid'", "pred_sql": "SELECT DISTINCT College.state FROM College JOIN Tryout ON College.cName = Tryout.cName WHERE Tryout.pPos IN ('goalie', 'mid-field')", "source_tables": ["tryout", "college"], "error_info": "Result not equal"}, {"sample_id": 5030, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT COUNT(*) FROM (SELECT cName FROM tryout WHERE pPos = 'goalie' INTERSECT SELECT cName FROM tryout WHERE pPos = 'mid')", "pred_sql": "SELECT COUNT(DISTINCT cName) AS school_count FROM Tryout WHERE pPos IN ('goalie', 'mid')", "source_tables": ["tryout"], "error_info": "Result not equal"}, {"sample_id": 5031, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT COUNT(*) FROM (SELECT cName FROM tryout WHERE pPos = 'goalie' INTERSECT SELECT cName FROM tryout WHERE pPos = 'mid')", "pred_sql": "SELECT COUNT(DISTINCT cName) AS school_count FROM Tryout WHERE pPos IN ('goalie', 'mid-field')", "source_tables": ["tryout"], "error_info": "Result not equal"}, {"sample_id": 5032, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT cName FROM tryout WHERE pPos = 'mid' EXCEPT SELECT cName FROM tryout WHERE pPos = 'goalie'", "pred_sql": "SELECT DISTINCT c.cName FROM College AS c JOIN Tryout AS t ON c.cName = t.cName WHERE t.pPos = 'mid' AND NOT c.cName IN (SELECT cName FROM Tryout WHERE pPos = 'goalie')", "source_tables": ["tryout"], "error_info": ""}, {"sample_id": 5033, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT cName FROM tryout WHERE pPos = 'mid' EXCEPT SELECT cName FROM tryout WHERE pPos = 'goalie'", "pred_sql": "SELECT DISTINCT c.cName FROM College AS c JOIN Tryout AS t ON c.cName = t.cName WHERE t.pPos = 'mid' AND NOT c.cName IN (SELECT DISTINCT cName FROM Tryout WHERE pPos = 'goalie')", "source_tables": ["tryout"], "error_info": ""}, {"sample_id": 5034, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'goalie'", "pred_sql": "SELECT DISTINCT College.state FROM College JOIN Tryout ON College.cName = Tryout.cName WHERE Tryout.pPos = 'mid' AND NOT College.cName IN (SELECT Tryout.cName FROM Tryout WHERE Tryout.pPos = 'goalie')", "source_tables": ["tryout", "college"], "error_info": ""}, {"sample_id": 5035, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'goalie'", "pred_sql": "SELECT DISTINCT College.state FROM College JOIN Tryout ON College.cName = Tryout.cName JOIN Player ON Tryout.pID = Player.pID WHERE Tryout.pPos = 'mid' AND NOT Tryout.pID IN (SELECT pID FROM Tryout WHERE pPos = 'goalie')", "source_tables": ["tryout", "college"], "error_info": "Result not equal"}, {"sample_id": 5036, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'goalie')", "pred_sql": "SELECT COUNT(DISTINCT College.state) AS state_count FROM College JOIN Tryout ON College.cName = Tryout.cName WHERE Tryout.pPos = 'mid' AND NOT College.cName IN (SELECT cName FROM Tryout WHERE pPos = 'goalie')", "source_tables": ["tryout", "college"], "error_info": ""}, {"sample_id": 5037, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'goalie')", "pred_sql": "SELECT COUNT(DISTINCT College.state) AS state_count FROM College JOIN Tryout ON College.cName = Tryout.cName JOIN Player ON Tryout.pID = Player.pID WHERE Tryout.pPos = 'mid' AND Tryout.pPos <> 'goalie'", "source_tables": ["tryout", "college"], "error_info": "Result not equal"}, {"sample_id": 5038, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT DISTINCT state FROM college WHERE enr < (SELECT MAX(enr) FROM college)", "pred_sql": "SELECT DISTINCT state FROM College WHERE enr < (SELECT MAX(enr) FROM College)", "source_tables": ["college"], "error_info": ""}, {"sample_id": 5039, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT DISTINCT state FROM college WHERE enr < (SELECT MAX(enr) FROM college)", "pred_sql": "SELECT DISTINCT state FROM College WHERE enr < (SELECT MIN(enr) FROM College)", "source_tables": ["college"], "error_info": "Result not equal"}, {"sample_id": 5040, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT DISTINCT cName FROM college WHERE enr > (SELECT MIN(enr) FROM college WHERE state = 'FL')", "pred_sql": "SELECT c1.cName FROM College AS c1 WHERE c1.enr > (SELECT MAX(c2.enr) FROM College AS c2 WHERE c2.state = 'FL')", "source_tables": ["college"], "error_info": ""}, {"sample_id": 5041, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT DISTINCT cName FROM college WHERE enr > (SELECT MIN(enr) FROM college WHERE state = 'FL')", "pred_sql": "SELECT DISTINCT c1.cName FROM College AS c1 WHERE c1.enr > (SELECT MAX(c2.enr) FROM College AS c2 WHERE c2.state = 'Florida')", "source_tables": ["college"], "error_info": "Result not equal"}, {"sample_id": 5042, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT cName FROM college WHERE enr > (SELECT MAX(enr) FROM college WHERE state = 'FL')", "pred_sql": "SELECT cName FROM College WHERE enr > (SELECT MAX(enr) FROM College WHERE state = 'FL')", "source_tables": ["college"], "error_info": ""}, {"sample_id": 5043, "db_id": "soccer_2", "score": 0, "gold_sql": "SELECT cName FROM college WHERE enr > (SELECT MAX(enr) FROM college WHERE state = 'FL')", "pred_sql": "SELECT cName FROM College WHERE enr > (SELECT MAX(enr) FROM College WHERE state = 'Florida')", "source_tables": ["college"], "error_info": "Result not equal"}, {"sample_id": 5044, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT SUM(enr) FROM college WHERE NOT cName IN (SELECT cName FROM tryout WHERE pPos = 'goalie')", "pred_sql": "SELECT SUM(CAST(enr AS INT)) AS total_enrollment FROM College WHERE NOT cName IN (SELECT DISTINCT cName FROM Tryout WHERE pPos = 'goalie')", "source_tables": ["tryout", "college"], "error_info": ""}, {"sample_id": 5045, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT SUM(enr) FROM college WHERE NOT cName IN (SELECT cName FROM tryout WHERE pPos = 'goalie')", "pred_sql": "SELECT SUM(CAST(enr AS INT)) AS total_enrollment FROM College WHERE NOT cName IN (SELECT DISTINCT cName FROM Tryout WHERE pPos = 'goalie')", "source_tables": ["tryout", "college"], "error_info": ""}, {"sample_id": 5046, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT state) FROM college WHERE enr > (SELECT AVG(enr) FROM college)", "pred_sql": "SELECT COUNT(DISTINCT state) FROM College WHERE enr > (SELECT AVG(enr) FROM College)", "source_tables": ["college"], "error_info": ""}, {"sample_id": 5047, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT state) FROM college WHERE enr > (SELECT AVG(enr) FROM college)", "pred_sql": "SELECT COUNT(DISTINCT state) FROM College WHERE CAST(enr AS INT) > (SELECT AVG(CAST(enr AS INT)) FROM College)", "source_tables": ["college"], "error_info": ""}, {"sample_id": 5048, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT state) FROM college WHERE enr < (SELECT AVG(enr) FROM college)", "pred_sql": "SELECT COUNT(DISTINCT state) FROM College WHERE enr < (SELECT AVG(enr) FROM College)", "source_tables": ["college"], "error_info": ""}, {"sample_id": 5049, "db_id": "soccer_2", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT state) FROM college WHERE enr < (SELECT AVG(enr) FROM college)", "pred_sql": "SELECT COUNT(DISTINCT state) AS num_states FROM College WHERE CAST(enr AS INT) < (SELECT AVG(CAST(enr AS INT)) FROM College)", "source_tables": ["college"], "error_info": ""}, {"sample_id": 5050, "db_id": "device", "score": 1, "gold_sql": "SELECT COUNT(*) FROM device", "pred_sql": "SELECT COUNT(*) AS Total_Devices FROM device", "source_tables": ["device"], "error_info": ""}, {"sample_id": 5051, "db_id": "device", "score": 1, "gold_sql": "SELECT COUNT(*) FROM device", "pred_sql": "SELECT COUNT(*) AS device_count FROM device", "source_tables": ["device"], "error_info": ""}, {"sample_id": 5052, "db_id": "device", "score": 1, "gold_sql": "SELECT Carrier FROM device ORDER BY Carrier ASC", "pred_sql": "SELECT DISTINCT Carrier FROM device ORDER BY Carrier ASC", "source_tables": ["device"], "error_info": ""}, {"sample_id": 5053, "db_id": "device", "score": 1, "gold_sql": "SELECT Carrier FROM device ORDER BY Carrier ASC", "pred_sql": "SELECT DISTINCT Carrier FROM device ORDER BY Carrier ASC", "source_tables": ["device"], "error_info": ""}, {"sample_id": 5054, "db_id": "device", "score": 1, "gold_sql": "SELECT Carrier FROM device WHERE Software_Platform <> 'Android'", "pred_sql": "SELECT DISTINCT Carrier FROM device WHERE Software_Platform <> 'Android'", "source_tables": ["device"], "error_info": ""}, {"sample_id": 5055, "db_id": "device", "score": 1, "gold_sql": "SELECT Carrier FROM device WHERE Software_Platform <> 'Android'", "pred_sql": "SELECT DISTINCT Carrier FROM device WHERE Software_Platform <> 'Android'", "source_tables": ["device"], "error_info": ""}, {"sample_id": 5056, "db_id": "device", "score": 1, "gold_sql": "SELECT Shop_Name FROM shop ORDER BY Open_Year ASC", "pred_sql": "SELECT Shop_Name FROM shop ORDER BY Open_Year ASC", "source_tables": ["shop"], "error_info": ""}, {"sample_id": 5057, "db_id": "device", "score": 1, "gold_sql": "SELECT Shop_Name FROM shop ORDER BY Open_Year ASC", "pred_sql": "SELECT Shop_Name FROM shop ORDER BY Open_Year ASC", "source_tables": ["shop"], "error_info": ""}, {"sample_id": 5058, "db_id": "device", "score": 1, "gold_sql": "SELECT AVG(Quantity) FROM stock", "pred_sql": "SELECT AVG(Quantity) AS Average_Stock FROM stock", "source_tables": ["stock"], "error_info": ""}, {"sample_id": 5059, "db_id": "device", "score": 1, "gold_sql": "SELECT AVG(Quantity) FROM stock", "pred_sql": "SELECT AVG(Quantity) AS Average_Quantity FROM stock", "source_tables": ["stock"], "error_info": ""}, {"sample_id": 5060, "db_id": "device", "score": 1, "gold_sql": "SELECT Shop_Name, LOCATION FROM shop ORDER BY Shop_Name ASC", "pred_sql": "SELECT Shop_Name, Location FROM shop ORDER BY Shop_Name ASC", "source_tables": ["shop"], "error_info": ""}, {"sample_id": 5061, "db_id": "device", "score": 1, "gold_sql": "SELECT Shop_Name, LOCATION FROM shop ORDER BY Shop_Name ASC", "pred_sql": "SELECT Shop_Name, Location FROM shop ORDER BY Shop_Name ASC", "source_tables": ["shop"], "error_info": ""}, {"sample_id": 5062, "db_id": "device", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT Software_Platform) FROM device", "pred_sql": "SELECT COUNT(DISTINCT Software_Platform) AS Different_Platforms FROM device", "source_tables": ["device"], "error_info": ""}, {"sample_id": 5063, "db_id": "device", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT Software_Platform) FROM device", "pred_sql": "SELECT COUNT(DISTINCT Software_Platform) AS NumberOfDifferentPlatforms FROM device", "source_tables": ["device"], "error_info": ""}, {"sample_id": 5064, "db_id": "device", "score": 1, "gold_sql": "SELECT Open_Date, Open_Year FROM shop WHERE Shop_Name = 'Apple'", "pred_sql": "SELECT Open_Date, Open_Year FROM shop WHERE Shop_Name = 'Apple'", "source_tables": ["shop"], "error_info": ""}, {"sample_id": 5065, "db_id": "device", "score": 1, "gold_sql": "SELECT Open_Date, Open_Year FROM shop WHERE Shop_Name = 'Apple'", "pred_sql": "SELECT Open_Date, Open_Year FROM shop WHERE Shop_Name = 'Apple'", "source_tables": ["shop"], "error_info": ""}, {"sample_id": 5066, "db_id": "device", "score": 1, "gold_sql": "SELECT Shop_Name FROM shop ORDER BY Open_Year DESC LIMIT 1", "pred_sql": "SELECT Shop_Name FROM shop WHERE Open_Year = (SELECT MAX(Open_Year) FROM shop)", "source_tables": ["shop"], "error_info": ""}, {"sample_id": 5067, "db_id": "device", "score": 1, "gold_sql": "SELECT Shop_Name FROM shop ORDER BY Open_Year DESC LIMIT 1", "pred_sql": "SELECT Shop_Name FROM shop WHERE Open_Year = (SELECT MAX(Open_Year) FROM shop)", "source_tables": ["shop"], "error_info": ""}, {"sample_id": 5068, "db_id": "device", "score": 1, "gold_sql": "SELECT T3.Shop_Name, T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID = T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID = T3.Shop_ID", "pred_sql": "SELECT shop.Shop_Name, device.Carrier FROM shop JOIN stock ON shop.Shop_ID = stock.Shop_ID JOIN device ON stock.Device_ID = device.Device_ID", "source_tables": ["device", "shop", "stock"], "error_info": ""}, {"sample_id": 5069, "db_id": "device", "score": 1, "gold_sql": "SELECT T3.Shop_Name, T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID = T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID = T3.Shop_ID", "pred_sql": "SELECT shop.Shop_Name, device.Carrier FROM shop JOIN stock ON shop.Shop_ID = stock.Shop_ID JOIN device ON stock.Device_ID = device.Device_ID", "source_tables": ["device", "shop", "stock"], "error_info": ""}, {"sample_id": 5070, "db_id": "device", "score": 1, "gold_sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT(*) > 1", "pred_sql": "SELECT shop.Shop_Name FROM shop JOIN stock ON shop.Shop_ID = stock.Shop_ID JOIN device ON stock.Device_ID = device.Device_ID GROUP BY shop.Shop_ID HAVING COUNT(DISTINCT stock.Device_ID) > 1", "source_tables": ["shop", "stock"], "error_info": ""}, {"sample_id": 5071, "db_id": "device", "score": 1, "gold_sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT(*) > 1", "pred_sql": "SELECT shop.Shop_Name FROM shop JOIN stock ON shop.Shop_ID = stock.Shop_ID JOIN device ON stock.Device_ID = device.Device_ID GROUP BY shop.Shop_ID HAVING COUNT(DISTINCT stock.Device_ID) > 1", "source_tables": ["shop", "stock"], "error_info": ""}, {"sample_id": 5072, "db_id": "device", "score": 1, "gold_sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT shop.Shop_Name FROM shop JOIN stock ON shop.Shop_ID = stock.Shop_ID GROUP BY shop.Shop_ID ORDER BY COUNT(DISTINCT stock.Device_ID) DESC LIMIT 1", "source_tables": ["shop", "stock"], "error_info": ""}, {"sample_id": 5073, "db_id": "device", "score": 0, "gold_sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT shop.Shop_Name FROM shop JOIN stock ON shop.Shop_ID = stock.Shop_ID JOIN device ON stock.Device_ID = device.Device_ID GROUP BY shop.Shop_ID ORDER BY COUNT(DISTINCT stock.Device_ID) DESC LIMIT 1", "source_tables": ["shop", "stock"], "error_info": "Result not equal"}, {"sample_id": 5074, "db_id": "device", "score": 1, "gold_sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM(T1.quantity) DESC LIMIT 1", "pred_sql": "SELECT shop.Shop_Name FROM shop JOIN stock ON shop.Shop_ID = stock.Shop_ID GROUP BY shop.Shop_ID ORDER BY SUM(stock.Quantity) DESC LIMIT 1", "source_tables": ["shop", "stock"], "error_info": ""}, {"sample_id": 5075, "db_id": "device", "score": 1, "gold_sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM(T1.quantity) DESC LIMIT 1", "pred_sql": "SELECT shop.Shop_Name FROM shop JOIN stock ON shop.Shop_ID = stock.Shop_ID GROUP BY shop.Shop_ID ORDER BY SUM(stock.Quantity) DESC LIMIT 1", "source_tables": ["shop", "stock"], "error_info": ""}, {"sample_id": 5076, "db_id": "device", "score": 1, "gold_sql": "SELECT Software_Platform, COUNT(*) FROM device GROUP BY Software_Platform", "pred_sql": "SELECT Software_Platform, COUNT(Device_ID) AS Number_of_Devices FROM device GROUP BY Software_Platform", "source_tables": ["device"], "error_info": ""}, {"sample_id": 5077, "db_id": "device", "score": 1, "gold_sql": "SELECT Software_Platform, COUNT(*) FROM device GROUP BY Software_Platform", "pred_sql": "SELECT Software_Platform, COUNT(Device_ID) AS Device_Count FROM device GROUP BY Software_Platform", "source_tables": ["device"], "error_info": ""}, {"sample_id": 5078, "db_id": "device", "score": 0, "gold_sql": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC", "pred_sql": "SELECT Software_Platform, COUNT(*) AS Platform_Count FROM device GROUP BY Software_Platform ORDER BY Platform_Count DESC", "source_tables": ["device"], "error_info": "Result not equal"}, {"sample_id": 5079, "db_id": "device", "score": 0, "gold_sql": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC", "pred_sql": "SELECT Software_Platform, COUNT(*) AS Frequency FROM device GROUP BY Software_Platform ORDER BY Frequency DESC", "source_tables": ["device"], "error_info": "Result not equal"}, {"sample_id": 5080, "db_id": "device", "score": 1, "gold_sql": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(Device_ID) DESC LIMIT 1", "source_tables": ["device"], "error_info": ""}, {"sample_id": 5081, "db_id": "device", "score": 0, "gold_sql": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Software_Platform, COUNT(*) AS Platform_Count FROM device GROUP BY Software_Platform ORDER BY Platform_Count DESC LIMIT 1", "source_tables": ["device"], "error_info": "Result not equal"}, {"sample_id": 5082, "db_id": "device", "score": 1, "gold_sql": "SELECT Shop_Name FROM shop WHERE NOT Shop_ID IN (SELECT Shop_ID FROM stock)", "pred_sql": "SELECT shop.Shop_Name FROM shop LEFT JOIN stock ON shop.Shop_ID = stock.Shop_ID WHERE stock.Device_ID IS NULL", "source_tables": ["stock", "shop"], "error_info": ""}, {"sample_id": 5083, "db_id": "device", "score": 1, "gold_sql": "SELECT Shop_Name FROM shop WHERE NOT Shop_ID IN (SELECT Shop_ID FROM stock)", "pred_sql": "SELECT shop.Shop_Name FROM shop LEFT JOIN stock ON shop.Shop_ID = stock.Shop_ID WHERE stock.Device_ID IS NULL", "source_tables": ["stock", "shop"], "error_info": ""}, {"sample_id": 5084, "db_id": "device", "score": 1, "gold_sql": "SELECT LOCATION FROM shop WHERE Open_Year > 2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year < 2008", "pred_sql": "SELECT DISTINCT s1.Location FROM shop AS s1 JOIN shop AS s2 ON s1.Location = s2.Location WHERE s1.Open_Year > 2012 AND s2.Open_Year < 2008", "source_tables": ["shop"], "error_info": ""}, {"sample_id": 5085, "db_id": "device", "score": 1, "gold_sql": "SELECT LOCATION FROM shop WHERE Open_Year > 2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year < 2008", "pred_sql": "SELECT DISTINCT s1.Location FROM shop AS s1 JOIN shop AS s2 ON s1.Location = s2.Location WHERE s1.Open_Year > 2012 AND s2.Open_Year < 2008", "source_tables": ["shop"], "error_info": ""}, {"sample_id": 5086, "db_id": "device", "score": 1, "gold_sql": "SELECT Carrier FROM device WHERE NOT Device_ID IN (SELECT Device_ID FROM stock)", "pred_sql": "SELECT DISTINCT d.Carrier FROM device AS d LEFT JOIN stock AS s ON d.Device_ID = s.Device_ID WHERE s.Device_ID IS NULL", "source_tables": ["device", "stock"], "error_info": ""}, {"sample_id": 5087, "db_id": "device", "score": 1, "gold_sql": "SELECT Carrier FROM device WHERE NOT Device_ID IN (SELECT Device_ID FROM stock)", "pred_sql": "SELECT DISTINCT d.Carrier FROM device AS d LEFT JOIN stock AS s ON d.Device_ID = s.Device_ID WHERE s.Device_ID IS NULL", "source_tables": ["device", "stock"], "error_info": ""}, {"sample_id": 5088, "db_id": "device", "score": 1, "gold_sql": "SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID = T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT(*) > 1", "pred_sql": "SELECT DISTINCT d.Carrier FROM device AS d JOIN stock AS s ON d.Device_ID = s.Device_ID GROUP BY d.Carrier HAVING COUNT(DISTINCT s.Shop_ID) > 1", "source_tables": ["device", "stock"], "error_info": ""}, {"sample_id": 5089, "db_id": "device", "score": 1, "gold_sql": "SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID = T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT(*) > 1", "pred_sql": "SELECT DISTINCT d.Carrier FROM device AS d JOIN stock AS s ON d.Device_ID = s.Device_ID GROUP BY d.Carrier HAVING COUNT(DISTINCT s.Shop_ID) > 1", "source_tables": ["device", "stock"], "error_info": ""}, {"sample_id": 5090, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT COUNT(*) FROM BOOKINGS", "pred_sql": "SELECT COUNT(*) AS total_bookings FROM Bookings", "source_tables": ["bookings"], "error_info": ""}, {"sample_id": 5091, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT COUNT(*) FROM BOOKINGS", "pred_sql": "SELECT COUNT(*) AS total_bookings FROM Bookings", "source_tables": ["bookings"], "error_info": ""}, {"sample_id": 5092, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT Order_Date FROM BOOKINGS", "pred_sql": "SELECT Order_Date FROM Bookings", "source_tables": ["bookings"], "error_info": ""}, {"sample_id": 5093, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT Order_Date FROM BOOKINGS", "pred_sql": "SELECT Order_Date FROM Bookings", "source_tables": ["bookings"], "error_info": ""}, {"sample_id": 5094, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT Planned_Delivery_Date, Actual_Delivery_Date FROM BOOKINGS", "pred_sql": "SELECT Planned_Delivery_Date, Actual_Delivery_Date FROM Bookings", "source_tables": ["bookings"], "error_info": ""}, {"sample_id": 5095, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT Planned_Delivery_Date, Actual_Delivery_Date FROM BOOKINGS", "pred_sql": "SELECT Planned_Delivery_Date, Actual_Delivery_Date FROM Bookings", "source_tables": ["bookings"], "error_info": ""}, {"sample_id": 5096, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT COUNT(*) FROM CUSTOMERS", "pred_sql": "SELECT COUNT(*) AS total_customers FROM Customers", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 5097, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT COUNT(*) FROM CUSTOMERS", "pred_sql": "SELECT COUNT(*) AS customer_count FROM Customers", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 5098, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT Customer_Phone, Customer_Email_Address FROM CUSTOMERS WHERE Customer_Name = 'Harold'", "pred_sql": "SELECT Customer_Phone, Customer_Email_Address FROM Customers WHERE Customer_Name = 'Harold'", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 5099, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT Customer_Phone, Customer_Email_Address FROM CUSTOMERS WHERE Customer_Name = 'Harold'", "pred_sql": "SELECT Customer_Phone, Customer_Email_Address FROM Customers WHERE Customer_Name = 'Harold'", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 5100, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT Store_Name FROM Drama_Workshop_Groups", "pred_sql": "SELECT DISTINCT d.Store_Name FROM Drama_Workshop_Groups AS d", "source_tables": ["drama_workshop_groups"], "error_info": ""}, {"sample_id": 5101, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT Store_Name FROM Drama_Workshop_Groups", "pred_sql": "SELECT Store_Name FROM Drama_Workshop_Groups", "source_tables": ["drama_workshop_groups"], "error_info": ""}, {"sample_id": 5102, "db_id": "cre_Drama_Workshop_Groups", "score": 0, "gold_sql": "SELECT MIN(Order_Quantity), AVG(Order_Quantity), MAX(Order_Quantity) FROM INVOICES", "pred_sql": "SELECT MIN(Order_Quantity) AS Min_Quantity, AVG(Order_Quantity) AS Avg_Quantity, MAX(Order_Quantity) AS Max_Quantity FROM Invoice_Items", "source_tables": ["invoices"], "error_info": "Result not equal"}, {"sample_id": 5103, "db_id": "cre_Drama_Workshop_Groups", "score": 0, "gold_sql": "SELECT MIN(Order_Quantity), AVG(Order_Quantity), MAX(Order_Quantity) FROM INVOICES", "pred_sql": "SELECT MIN(Order_Quantity) AS Min_Quantity, AVG(Order_Quantity) AS Avg_Quantity, MAX(Order_Quantity) AS Max_Quantity FROM Invoice_Items", "source_tables": ["invoices"], "error_info": "Result not equal"}, {"sample_id": 5104, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT DISTINCT payment_method_code FROM INVOICES", "pred_sql": "SELECT DISTINCT payment_method_code FROM Invoices", "source_tables": ["invoices"], "error_info": ""}, {"sample_id": 5105, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT DISTINCT payment_method_code FROM INVOICES", "pred_sql": "SELECT DISTINCT payment_method_code FROM Invoices", "source_tables": ["invoices"], "error_info": ""}, {"sample_id": 5106, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT Marketing_Region_Descriptrion FROM Marketing_Regions WHERE Marketing_Region_Name = 'China'", "pred_sql": "SELECT Marketing_Region_Descriptrion FROM Marketing_Regions WHERE Marketing_Region_Name = 'China'", "source_tables": ["marketing_regions"], "error_info": ""}, {"sample_id": 5107, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT Marketing_Region_Descriptrion FROM Marketing_Regions WHERE Marketing_Region_Name = 'China'", "pred_sql": "SELECT Marketing_Region_Descriptrion FROM Marketing_Regions WHERE Marketing_Region_Name = 'China'", "source_tables": ["marketing_regions"], "error_info": ""}, {"sample_id": 5108, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT DISTINCT Product_Name FROM PRODUCTS WHERE Product_Price > (SELECT AVG(Product_Price) FROM PRODUCTS)", "pred_sql": "SELECT DISTINCT Product_Name FROM Products WHERE Product_Price > (SELECT AVG(Product_Price) FROM Products)", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5109, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT DISTINCT Product_Name FROM PRODUCTS WHERE Product_Price > (SELECT AVG(Product_Price) FROM PRODUCTS)", "pred_sql": "SELECT DISTINCT Product_Name FROM Products WHERE Product_Price > (SELECT AVG(Product_Price) FROM Products)", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5110, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT Product_Name FROM PRODUCTS ORDER BY Product_Price DESC LIMIT 1", "pred_sql": "SELECT Product_Name FROM Products ORDER BY Product_Price DESC LIMIT 1", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5111, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT Product_Name FROM PRODUCTS ORDER BY Product_Price DESC LIMIT 1", "pred_sql": "SELECT Product_Name FROM Products ORDER BY Product_Price DESC LIMIT 1", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5112, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT Product_Name FROM Products ORDER BY Product_Price ASC", "pred_sql": "SELECT Product_Name FROM Products ORDER BY Product_Price ASC", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5113, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT Product_Name FROM Products ORDER BY Product_Price ASC", "pred_sql": "SELECT Product_Name FROM Products ORDER BY Product_Price ASC", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5114, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT Customer_Phone FROM PERFORMERS WHERE Customer_Name = 'Ashley'", "pred_sql": "SELECT Customer_Phone FROM Performers WHERE Customer_Name = 'Ashley'", "source_tables": ["performers"], "error_info": ""}, {"sample_id": 5115, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT Customer_Phone FROM PERFORMERS WHERE Customer_Name = 'Ashley'", "pred_sql": "SELECT Customer_Phone FROM Performers WHERE Customer_Name = 'Ashley'", "source_tables": ["performers"], "error_info": ""}, {"sample_id": 5116, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT payment_method_code, COUNT(*) FROM INVOICES GROUP BY payment_method_code", "pred_sql": "SELECT Invoices.payment_method_code, COUNT(Customer_Orders.Order_ID) AS number_of_orders FROM Invoices JOIN Customer_Orders ON Invoices.Order_ID = Customer_Orders.Order_ID GROUP BY Invoices.payment_method_code", "source_tables": ["invoices"], "error_info": ""}, {"sample_id": 5117, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT payment_method_code, COUNT(*) FROM INVOICES GROUP BY payment_method_code", "pred_sql": "SELECT DISTINCT Invoices.payment_method_code, COUNT(Customer_Orders.Order_ID) AS number_of_orders FROM Invoices JOIN Customer_Orders ON Invoices.Order_ID = Customer_Orders.Order_ID GROUP BY Invoices.payment_method_code", "source_tables": ["invoices"], "error_info": ""}, {"sample_id": 5118, "db_id": "cre_Drama_Workshop_Groups", "score": 0, "gold_sql": "SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT payment_method_code, COUNT(*) AS order_count FROM Invoices GROUP BY payment_method_code ORDER BY order_count DESC LIMIT 1", "source_tables": ["invoices"], "error_info": "Result not equal"}, {"sample_id": 5119, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT payment_method_code FROM Invoices GROUP BY payment_method_code ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["invoices"], "error_info": ""}, {"sample_id": 5120, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID = T2.Address_ID WHERE T2.Store_Name = 'FJA Filming'", "pred_sql": "SELECT a.City_Town FROM Stores AS s JOIN Addresses AS a ON s.Address_ID = a.Address_ID WHERE s.Store_Name = 'FJA Filming'", "source_tables": ["addresses", "stores"], "error_info": ""}, {"sample_id": 5121, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID = T2.Address_ID WHERE T2.Store_Name = 'FJA Filming'", "pred_sql": "SELECT Addresses.City_Town FROM Stores JOIN Addresses ON Stores.Address_ID = Addresses.Address_ID WHERE Stores.Store_Name = 'FJA Filming'", "source_tables": ["addresses", "stores"], "error_info": ""}, {"sample_id": 5122, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID = T2.Address_ID WHERE T2.Marketing_Region_Code = 'CA'", "pred_sql": "SELECT DISTINCT Addresses.State_County FROM Stores JOIN Addresses ON Stores.Address_ID = Addresses.Address_ID WHERE Stores.Marketing_Region_Code = 'CA'", "source_tables": ["addresses", "stores"], "error_info": ""}, {"sample_id": 5123, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID = T2.Address_ID WHERE T2.Marketing_Region_Code = 'CA'", "pred_sql": "SELECT DISTINCT Addresses.State_County FROM Stores JOIN Addresses ON Stores.Address_ID = Addresses.Address_ID WHERE Stores.Marketing_Region_Code = 'CA'", "source_tables": ["addresses", "stores"], "error_info": ""}, {"sample_id": 5124, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT T1.Marketing_Region_Name FROM Marketing_Regions AS T1 JOIN Stores AS T2 ON T1.Marketing_Region_Code = T2.Marketing_Region_Code WHERE T2.Store_Name = 'Rob Dinning'", "pred_sql": "SELECT Marketing_Region_Name FROM Stores JOIN Marketing_Regions ON Stores.Marketing_Region_Code = Marketing_Regions.Marketing_Region_Code WHERE Stores.Store_Name = 'Rob Dinning'", "source_tables": ["stores", "marketing_regions"], "error_info": ""}, {"sample_id": 5125, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT T1.Marketing_Region_Name FROM Marketing_Regions AS T1 JOIN Stores AS T2 ON T1.Marketing_Region_Code = T2.Marketing_Region_Code WHERE T2.Store_Name = 'Rob Dinning'", "pred_sql": "SELECT Marketing_Region_Name FROM Marketing_Regions INNER JOIN Stores ON Marketing_Regions.Marketing_Region_Code = Stores.Marketing_Region_Code WHERE Stores.Store_Name = 'Rob Dinning'", "source_tables": ["stores", "marketing_regions"], "error_info": ""}, {"sample_id": 5126, "db_id": "cre_Drama_Workshop_Groups", "score": 0, "gold_sql": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Price > 100", "pred_sql": "SELECT DISTINCT Ref_Service_Types.Service_Type_Description FROM Ref_Service_Types JOIN Services ON Ref_Service_Types.Service_Type_Code = Services.Service_Type_Code WHERE Services.Product_Price > 100", "source_tables": ["services", "ref_service_types"], "error_info": "Result not equal"}, {"sample_id": 5127, "db_id": "cre_Drama_Workshop_Groups", "score": 0, "gold_sql": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Price > 100", "pred_sql": "SELECT Service_Type_Description FROM Services WHERE Product_Price > 100", "source_tables": ["services", "ref_service_types"], "error_info": "Predction Execution Error:no such column: Service_Type_Description"}, {"sample_id": 5128, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT T1.Service_Type_Description, T2.Service_Type_Code, COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY T2.Service_Type_Code", "pred_sql": "SELECT Ref_Service_Types.Service_Type_Description, Ref_Service_Types.Service_Type_Code, COUNT(Services.Service_ID) AS Service_Count FROM Ref_Service_Types LEFT JOIN Services ON Ref_Service_Types.Service_Type_Code = Services.Service_Type_Code GROUP BY Ref_Service_Types.Service_Type_Code, Ref_Service_Types.Service_Type_Description", "source_tables": ["services", "ref_service_types"], "error_info": ""}, {"sample_id": 5129, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT T1.Service_Type_Description, T2.Service_Type_Code, COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY T2.Service_Type_Code", "pred_sql": "SELECT Ref_Service_Types.Service_Type_Description, Ref_Service_Types.Service_Type_Code, COUNT(Services.Service_ID) AS Number_of_Services FROM Ref_Service_Types LEFT JOIN Services ON Ref_Service_Types.Service_Type_Code = Services.Service_Type_Code GROUP BY Ref_Service_Types.Service_Type_Description, Ref_Service_Types.Service_Type_Code", "source_tables": ["services", "ref_service_types"], "error_info": ""}, {"sample_id": 5130, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT T1.Service_Type_Description, T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Ref_Service_Types.Service_Type_Code, Ref_Service_Types.Service_Type_Description FROM Ref_Service_Types JOIN Services ON Ref_Service_Types.Service_Type_Code = Services.Service_Type_Code JOIN Bookings_Services ON Services.Service_ID = Bookings_Services.Product_ID GROUP BY Ref_Service_Types.Service_Type_Code, Ref_Service_Types.Service_Type_Description ORDER BY COUNT(Bookings_Services.Order_ID) DESC LIMIT 1", "source_tables": ["services", "ref_service_types"], "error_info": ""}, {"sample_id": 5131, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT T1.Service_Type_Description, T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Ref_Service_Types.Service_Type_Description, Ref_Service_Types.Service_Type_Code FROM Ref_Service_Types JOIN Services ON Ref_Service_Types.Service_Type_Code = Services.Service_Type_Code JOIN Bookings_Services ON Services.Service_ID = Bookings_Services.Product_ID GROUP BY Ref_Service_Types.Service_Type_Code ORDER BY COUNT(Bookings_Services.Order_ID) DESC LIMIT 1", "source_tables": ["services", "ref_service_types"], "error_info": ""}, {"sample_id": 5132, "db_id": "cre_Drama_Workshop_Groups", "score": 0, "gold_sql": "SELECT T1.Store_Phone, T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID", "pred_sql": "SELECT DISTINCT dg.Store_Phone, dg.Store_Email_Address FROM Drama_Workshop_Groups AS dg JOIN Services AS s ON dg.Workshop_Group_ID = s.Workshop_Group_ID JOIN Bookings_Services AS bs ON s.Service_ID = bs.Product_ID", "source_tables": ["services", "drama_workshop_groups"], "error_info": "Result not equal"}, {"sample_id": 5133, "db_id": "cre_Drama_Workshop_Groups", "score": 0, "gold_sql": "SELECT T1.Store_Phone, T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID", "pred_sql": "SELECT DISTINCT dg.Store_Phone, dg.Store_Email_Address FROM Drama_Workshop_Groups AS dg JOIN Services AS s ON dg.Workshop_Group_ID = s.Workshop_Group_ID JOIN Bookings AS b ON s.Workshop_Group_ID = b.Workshop_Group_ID JOIN Performers_in_Bookings AS pb ON b.Booking_ID = pb.Order_ID", "source_tables": ["services", "drama_workshop_groups"], "error_info": "Result not equal"}, {"sample_id": 5134, "db_id": "cre_Drama_Workshop_Groups", "score": 0, "gold_sql": "SELECT T1.Store_Phone, T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID WHERE T2.Product_Name = 'film'", "pred_sql": "SELECT DISTINCT d.Store_Name FROM Drama_Workshop_Groups AS d JOIN Services AS s ON d.Workshop_Group_ID = s.Workshop_Group_ID WHERE s.Product_Name = 'film'", "source_tables": ["services", "drama_workshop_groups"], "error_info": "Result not equal"}, {"sample_id": 5135, "db_id": "cre_Drama_Workshop_Groups", "score": 0, "gold_sql": "SELECT T1.Store_Phone, T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID WHERE T2.Product_Name = 'film'", "pred_sql": "SELECT DISTINCT d.Store_Name FROM Drama_Workshop_Groups AS d JOIN Services AS s ON d.Workshop_Group_ID = s.Workshop_Group_ID WHERE s.Product_Name = 'film'", "source_tables": ["services", "drama_workshop_groups"], "error_info": "Result not equal"}, {"sample_id": 5136, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT Product_Name, AVG(Product_Price) FROM PRODUCTS GROUP BY Product_Name", "pred_sql": "SELECT Product_Name, AVG(Product_Price) AS Average_Product_Price FROM Products GROUP BY Product_Name", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5137, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT Product_Name, AVG(Product_Price) FROM PRODUCTS GROUP BY Product_Name", "pred_sql": "SELECT Product_Name, AVG(Product_Price) AS Average_Price FROM Products GROUP BY Product_Name", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5138, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT Product_Name FROM PRODUCTS GROUP BY Product_Name HAVING AVG(Product_Price) < 1000000", "pred_sql": "SELECT Product_Name FROM Products GROUP BY Product_Name HAVING AVG(Product_Price) < 1000000", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5139, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT Product_Name FROM PRODUCTS GROUP BY Product_Name HAVING AVG(Product_Price) < 1000000", "pred_sql": "SELECT Product_Name FROM Products GROUP BY Product_Name HAVING AVG(Product_Price) < 1000000", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5140, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT SUM(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID = T2.Product_ID WHERE T2.Product_Name = 'photo'", "pred_sql": "SELECT SUM(Order_Items.Order_Quantity) AS Total_Order_Quantity FROM Order_Items JOIN Products ON Order_Items.Product_ID = Products.Product_ID WHERE Products.Product_Name LIKE '%photo%'", "source_tables": ["products", "order_items"], "error_info": ""}, {"sample_id": 5141, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT SUM(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID = T2.Product_ID WHERE T2.Product_Name = 'photo'", "pred_sql": "SELECT SUM(Order_Items.Order_Quantity) AS Total_Quantity FROM Order_Items JOIN Products ON Order_Items.Product_ID = Products.Product_ID WHERE Products.Product_Name = 'photo'", "source_tables": ["products", "order_items"], "error_info": ""}, {"sample_id": 5142, "db_id": "cre_Drama_Workshop_Groups", "score": 0, "gold_sql": "SELECT T1.Other_Item_Details FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID = T2.Product_ID WHERE T2.Product_price > 2000", "pred_sql": "SELECT Order_Items.Order_Item_ID, Order_Items.Order_ID, Order_Items.Product_ID, Order_Items.Order_Quantity, Products.Product_Name, Products.Product_Price FROM Order_Items JOIN Products ON Order_Items.Product_ID = Products.Product_ID WHERE Products.Product_Price > 2000", "source_tables": ["products", "order_items"], "error_info": "Result not equal"}, {"sample_id": 5143, "db_id": "cre_Drama_Workshop_Groups", "score": 0, "gold_sql": "SELECT T1.Other_Item_Details FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID = T2.Product_ID WHERE T2.Product_price > 2000", "pred_sql": "SELECT Order_Items.Order_Item_ID, Order_Items.Order_ID, Order_Items.Product_ID, Order_Items.Order_Quantity, Products.Product_Name, Products.Product_Price FROM Order_Items JOIN Products ON Order_Items.Product_ID = Products.Product_ID WHERE Products.Product_Price > 2000", "source_tables": ["products", "order_items"], "error_info": "Result not equal"}, {"sample_id": 5144, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID = T2.Order_ID WHERE T2.Order_Quantity = 1", "pred_sql": "SELECT Customer_Orders.Actual_Delivery_Date FROM Customer_Orders JOIN Order_Items ON Customer_Orders.Order_ID = Order_Items.Order_ID WHERE Order_Items.Order_Quantity = '1'", "source_tables": ["customer_orders", "order_items"], "error_info": ""}, {"sample_id": 5145, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID = T2.Order_ID WHERE T2.Order_Quantity = 1", "pred_sql": "SELECT Customer_Orders.Actual_Delivery_Date FROM Customer_Orders JOIN Order_Items ON Customer_Orders.Order_ID = Order_Items.Order_ID WHERE Order_Items.Order_Quantity = '1'", "source_tables": ["customer_orders", "order_items"], "error_info": ""}, {"sample_id": 5146, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID = T2.Order_ID JOIN Products AS T3 ON T2.Product_ID = T3.Product_ID WHERE T3.Product_price > 1000", "pred_sql": "SELECT Customer_Orders.Order_Date FROM Customer_Orders JOIN Order_Items ON Customer_Orders.Order_ID = Order_Items.Order_ID JOIN Products ON Order_Items.Product_ID = Products.Product_ID WHERE Products.Product_Price > 1000", "source_tables": ["products", "customer_orders", "order_items"], "error_info": ""}, {"sample_id": 5147, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID = T2.Order_ID JOIN Products AS T3 ON T2.Product_ID = T3.Product_ID WHERE T3.Product_price > 1000", "pred_sql": "SELECT Customer_Orders.Order_Date FROM Customer_Orders JOIN Order_Items ON Customer_Orders.Order_ID = Order_Items.Order_ID JOIN Products ON Order_Items.Product_ID = Products.Product_ID WHERE Products.Product_Price > 1000", "source_tables": ["products", "customer_orders", "order_items"], "error_info": ""}, {"sample_id": 5148, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT Currency_Code) FROM Drama_Workshop_Groups", "pred_sql": "SELECT COUNT(DISTINCT Currency_Code) AS distinct_currency_count FROM Drama_Workshop_Groups", "source_tables": ["drama_workshop_groups"], "error_info": ""}, {"sample_id": 5149, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT Currency_Code) FROM Drama_Workshop_Groups", "pred_sql": "SELECT COUNT(DISTINCT Currency_Code) AS distinct_currency_count FROM Drama_Workshop_Groups", "source_tables": ["drama_workshop_groups"], "error_info": ""}, {"sample_id": 5150, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID WHERE T1.City_Town = 'Feliciaberg'", "pred_sql": "SELECT DWG.Store_Name FROM Drama_Workshop_Groups AS DWG JOIN Addresses AS A ON DWG.Address_ID = A.Address_ID WHERE A.City_Town = 'Feliciaberg'", "source_tables": ["addresses", "drama_workshop_groups"], "error_info": ""}, {"sample_id": 5151, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID WHERE T1.City_Town = 'Feliciaberg'", "pred_sql": "SELECT Store_Name FROM Drama_Workshop_Groups AS DWG JOIN Addresses AS A ON DWG.Address_ID = A.Address_ID WHERE A.City_Town = 'Feliciaberg'", "source_tables": ["addresses", "drama_workshop_groups"], "error_info": ""}, {"sample_id": 5152, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT T2.Store_Email_Address FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID WHERE T1.State_County = 'Alaska'", "pred_sql": "SELECT DWG.Store_Email_Address FROM Drama_Workshop_Groups AS DWG JOIN Addresses AS A ON DWG.Address_ID = A.Address_ID WHERE A.State_County = 'Alaska'", "source_tables": ["addresses", "drama_workshop_groups"], "error_info": ""}, {"sample_id": 5153, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT T2.Store_Email_Address FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID WHERE T1.State_County = 'Alaska'", "pred_sql": "SELECT DISTINCT d.Store_Email_Address FROM Drama_Workshop_Groups AS d JOIN Addresses AS a ON d.Address_ID = a.Address_ID WHERE a.State_County = 'Alaska'", "source_tables": ["addresses", "drama_workshop_groups"], "error_info": ""}, {"sample_id": 5154, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT T1.City_Town, COUNT(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID GROUP BY T1.City_Town", "pred_sql": "SELECT Addresses.City_Town, COUNT(Drama_Workshop_Groups.Workshop_Group_ID) AS Number_of_Workshop_Groups FROM Drama_Workshop_Groups JOIN Addresses ON Drama_Workshop_Groups.Address_ID = Addresses.Address_ID GROUP BY Addresses.City_Town", "source_tables": ["addresses", "drama_workshop_groups"], "error_info": ""}, {"sample_id": 5155, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT T1.City_Town, COUNT(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID GROUP BY T1.City_Town", "pred_sql": "SELECT a.City_Town, COUNT(d.Workshop_Group_ID) AS Group_Count FROM Drama_Workshop_Groups AS d JOIN Addresses AS a ON d.Address_ID = a.Address_ID GROUP BY a.City_Town", "source_tables": ["addresses", "drama_workshop_groups"], "error_info": ""}, {"sample_id": 5156, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["drama_workshop_groups"], "error_info": ""}, {"sample_id": 5157, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["drama_workshop_groups"], "error_info": ""}, {"sample_id": 5158, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID = T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID = T2.Address_ID", "pred_sql": "SELECT DISTINCT a.City_Town FROM Addresses AS a JOIN Customers AS c ON a.Address_ID = c.Address_ID LEFT JOIN Performers AS p ON a.Address_ID = p.Address_ID WHERE p.Address_ID IS NULL", "source_tables": ["addresses", "customers", "performers"], "error_info": ""}, {"sample_id": 5159, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID = T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID = T2.Address_ID", "pred_sql": "SELECT DISTINCT a.City_Town FROM Addresses AS a JOIN Customers AS c ON a.Address_ID = c.Address_ID LEFT JOIN Performers AS p ON a.Address_ID = p.Address_ID WHERE p.Address_ID IS NULL", "source_tables": ["addresses", "customers", "performers"], "error_info": ""}, {"sample_id": 5160, "db_id": "cre_Drama_Workshop_Groups", "score": 0, "gold_sql": "SELECT Status_Code FROM BOOKINGS GROUP BY Status_Code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Status_Code, COUNT(*) AS Frequency FROM Bookings GROUP BY Status_Code ORDER BY Frequency DESC LIMIT 1", "source_tables": ["bookings"], "error_info": "Result not equal"}, {"sample_id": 5161, "db_id": "cre_Drama_Workshop_Groups", "score": 0, "gold_sql": "SELECT Status_Code FROM BOOKINGS GROUP BY Status_Code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Status_Code, COUNT(*) AS Count FROM Bookings GROUP BY Status_Code ORDER BY Count DESC LIMIT 1", "source_tables": ["bookings"], "error_info": "Result not equal"}, {"sample_id": 5162, "db_id": "cre_Drama_Workshop_Groups", "score": 0, "gold_sql": "SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID WHERE T1.Status_Code = 'stop'", "pred_sql": "SELECT DISTINCT Drama_Workshop_Groups.Store_Name FROM Drama_Workshop_Groups JOIN Bookings ON Drama_Workshop_Groups.Workshop_Group_ID = Bookings.Workshop_Group_ID WHERE Bookings.Status_Code = 'stop'", "source_tables": ["drama_workshop_groups", "bookings"], "error_info": "Result not equal"}, {"sample_id": 5163, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID WHERE T1.Status_Code = 'stop'", "pred_sql": "SELECT DWG.Store_Name FROM Drama_Workshop_Groups AS DWG JOIN Bookings AS B ON DWG.Workshop_Group_ID = B.Workshop_Group_ID WHERE B.Status_Code = 'stop'", "source_tables": ["drama_workshop_groups", "bookings"], "error_info": ""}, {"sample_id": 5164, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID = T2.Client_ID", "pred_sql": "SELECT Customer_Name FROM Clients WHERE NOT Client_ID IN (SELECT Customer_ID FROM Bookings)", "source_tables": ["clients", "bookings"], "error_info": ""}, {"sample_id": 5165, "db_id": "cre_Drama_Workshop_Groups", "score": 1, "gold_sql": "SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID = T2.Client_ID", "pred_sql": "SELECT Customer_Name FROM Clients WHERE NOT Client_ID IN (SELECT Customer_ID FROM Bookings)", "source_tables": ["clients", "bookings"], "error_info": ""}, {"sample_id": 5166, "db_id": "cre_Drama_Workshop_Groups", "score": 0, "gold_sql": "SELECT AVG(Order_Quantity) FROM Invoices WHERE payment_method_code = 'MasterCard'", "pred_sql": "SELECT AVG(Invoice_Items.Order_Quantity) AS Average_Quantity FROM Invoices JOIN Invoice_Items ON Invoices.Invoice_ID = Invoice_Items.Invoice_ID WHERE Invoices.payment_method_code = 'MasterCard'", "source_tables": ["invoices"], "error_info": "Result not equal"}, {"sample_id": 5167, "db_id": "cre_Drama_Workshop_Groups", "score": 0, "gold_sql": "SELECT AVG(Order_Quantity) FROM Invoices WHERE payment_method_code = 'MasterCard'", "pred_sql": "SELECT AVG(Order_Quantity) AS Average_Quantity FROM Invoices JOIN Customer_Orders ON Invoices.Order_ID = Customer_Orders.Order_ID JOIN Order_Items ON Customer_Orders.Order_ID = Order_Items.Order_ID WHERE Invoices.payment_method_code = (SELECT payment_method_code FROM Ref_Payment_Methods WHERE payment_method_description = 'MasterCard')", "source_tables": ["invoices"], "error_info": "Predction Execution Error:ambiguous column name: Order_Quantity"}, {"sample_id": 5168, "db_id": "cre_Drama_Workshop_Groups", "score": 0, "gold_sql": "SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Product_ID, COUNT(*) AS Order_Count FROM Invoice_Items GROUP BY Product_ID ORDER BY Order_Count DESC LIMIT 1", "source_tables": ["invoices"], "error_info": "Result not equal"}, {"sample_id": 5169, "db_id": "cre_Drama_Workshop_Groups", "score": 0, "gold_sql": "SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Product_ID, SUM(Order_Quantity) AS Total_Ordered FROM Invoices GROUP BY Product_ID ORDER BY Total_Ordered DESC LIMIT 1", "source_tables": ["invoices"], "error_info": "Result not equal"}, {"sample_id": 5170, "db_id": "cre_Drama_Workshop_Groups", "score": 0, "gold_sql": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Name = 'photo' INTERSECT SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Name = 'film'", "pred_sql": "SELECT DISTINCT rst.Service_Type_Description FROM Ref_Service_Types AS rst JOIN Services AS s ON rst.Service_Type_Code = s.Service_Type_Code JOIN Products AS p ON s.Product_ID = p.Product_ID WHERE p.Product_Name IN ('photo product', 'film product') GROUP BY rst.Service_Type_Description HAVING COUNT(DISTINCT p.Product_Name) = 2", "source_tables": ["services", "ref_service_types"], "error_info": "Predction Execution Error:no such column: s.Product_ID"}, {"sample_id": 5171, "db_id": "cre_Drama_Workshop_Groups", "score": 0, "gold_sql": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Name = 'photo' INTERSECT SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Name = 'film'", "pred_sql": "SELECT DISTINCT rst.Service_Type_Description FROM Ref_Service_Types AS rst JOIN Services AS s ON rst.Service_Type_Code = s.Service_Type_Code JOIN Products AS p ON s.Product_ID = p.Product_ID WHERE p.Product_Name IN ('photo', 'film') GROUP BY rst.Service_Type_Description HAVING COUNT(DISTINCT p.Product_Name) = 2", "source_tables": ["services", "ref_service_types"], "error_info": "Predction Execution Error:no such column: s.Product_ID"}, {"sample_id": 5172, "db_id": "music_2", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Band", "pred_sql": "SELECT COUNT(DISTINCT Id) AS BandCount FROM Band", "source_tables": ["band"], "error_info": ""}, {"sample_id": 5173, "db_id": "music_2", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Band", "pred_sql": "SELECT COUNT(DISTINCT Id) AS NumberOfBands FROM Band", "source_tables": ["band"], "error_info": ""}, {"sample_id": 5174, "db_id": "music_2", "score": 1, "gold_sql": "SELECT DISTINCT label FROM Albums", "pred_sql": "SELECT DISTINCT Label FROM Albums", "source_tables": ["albums"], "error_info": ""}, {"sample_id": 5175, "db_id": "music_2", "score": 1, "gold_sql": "SELECT DISTINCT label FROM Albums", "pred_sql": "SELECT DISTINCT Label FROM Albums", "source_tables": ["albums"], "error_info": ""}, {"sample_id": 5176, "db_id": "music_2", "score": 1, "gold_sql": "SELECT * FROM Albums WHERE YEAR = 2012", "pred_sql": "SELECT * FROM Albums WHERE Year = 2012", "source_tables": ["albums"], "error_info": ""}, {"sample_id": 5177, "db_id": "music_2", "score": 1, "gold_sql": "SELECT * FROM Albums WHERE YEAR = 2012", "pred_sql": "SELECT * FROM Albums WHERE Year = 2012", "source_tables": ["albums"], "error_info": ""}, {"sample_id": 5178, "db_id": "music_2", "score": 1, "gold_sql": "SELECT DISTINCT T1.stageposition FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id WHERE Firstname = 'Solveig'", "pred_sql": "SELECT Performance.StagePosition FROM Performance JOIN Band ON Performance.Bandmate = Band.Id WHERE Band.Firstname = 'Solveig'", "source_tables": ["performance", "band"], "error_info": ""}, {"sample_id": 5179, "db_id": "music_2", "score": 1, "gold_sql": "SELECT DISTINCT T1.stageposition FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id WHERE Firstname = 'Solveig'", "pred_sql": "SELECT Performance.StagePosition FROM Performance JOIN Band ON Performance.Bandmate = Band.Id WHERE Band.Firstname = 'Solveig'", "source_tables": ["performance", "band"], "error_info": ""}, {"sample_id": 5180, "db_id": "music_2", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Songs", "pred_sql": "SELECT COUNT(*) AS TotalSongs FROM Songs", "source_tables": ["songs"], "error_info": ""}, {"sample_id": 5181, "db_id": "music_2", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Songs", "pred_sql": "SELECT COUNT(*) AS NumberOfSongs FROM Songs", "source_tables": ["songs"], "error_info": ""}, {"sample_id": 5182, "db_id": "music_2", "score": 1, "gold_sql": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T2.Lastname = 'Heilo'", "pred_sql": "SELECT Songs.Title FROM Songs JOIN Performance ON Songs.SongId = Performance.SongId JOIN Band ON Performance.Bandmate = Band.Id WHERE Band.Lastname = 'Heilo'", "source_tables": ["songs", "performance", "band"], "error_info": ""}, {"sample_id": 5183, "db_id": "music_2", "score": 1, "gold_sql": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T2.Lastname = 'Heilo'", "pred_sql": "SELECT Songs.Title FROM Songs JOIN Vocals ON Songs.SongId = Vocals.SongId JOIN Band ON Vocals.Bandmate = Band.Id WHERE Band.Lastname = 'Heilo'", "source_tables": ["songs", "performance", "band"], "error_info": ""}, {"sample_id": 5184, "db_id": "music_2", "score": 1, "gold_sql": "SELECT COUNT(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate = T2.id JOIN songs AS T3 ON T3.songid = T1.songid WHERE T3.Title = 'Flash'", "pred_sql": "SELECT COUNT(DISTINCT Bandmate) AS MusicianCount FROM Performance WHERE SongId IN (SELECT SongId FROM Songs WHERE Title = 'Flash')", "source_tables": ["songs", "performance", "band"], "error_info": ""}, {"sample_id": 5185, "db_id": "music_2", "score": 1, "gold_sql": "SELECT COUNT(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate = T2.id JOIN songs AS T3 ON T3.songid = T1.songid WHERE T3.Title = 'Flash'", "pred_sql": "SELECT COUNT(DISTINCT BandmateId) AS MusicianCount FROM Instruments WHERE SongId = (SELECT SongId FROM Songs WHERE Title = 'Flash')", "source_tables": ["songs", "performance", "band"], "error_info": ""}, {"sample_id": 5186, "db_id": "music_2", "score": 1, "gold_sql": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T2.firstname = 'Marianne'", "pred_sql": "SELECT Songs.Title FROM Songs JOIN Vocals ON Songs.SongId = Vocals.SongId JOIN Band ON Vocals.Bandmate = Band.Id WHERE Band.Firstname = 'Marianne'", "source_tables": ["songs", "performance", "band"], "error_info": ""}, {"sample_id": 5187, "db_id": "music_2", "score": 1, "gold_sql": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T2.firstname = 'Marianne'", "pred_sql": "SELECT Songs.Title FROM Songs JOIN Instruments ON Songs.SongId = Instruments.SongId JOIN Band ON Instruments.BandmateId = Band.Id WHERE Band.Firstname = 'Marianne'", "source_tables": ["songs", "performance", "band"], "error_info": ""}, {"sample_id": 5188, "db_id": "music_2", "score": 1, "gold_sql": "SELECT T2.firstname, T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T3.Title = 'Badlands'", "pred_sql": "SELECT Band.Firstname, Band.Lastname FROM Performance JOIN Songs ON Performance.SongId = Songs.SongId JOIN Band ON Performance.Bandmate = Band.Id WHERE Songs.Title = 'Badlands'", "source_tables": ["songs", "performance", "band"], "error_info": ""}, {"sample_id": 5189, "db_id": "music_2", "score": 1, "gold_sql": "SELECT T2.firstname, T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T3.Title = 'Badlands'", "pred_sql": "SELECT Band.Firstname, Band.Lastname FROM Band JOIN Performance ON Band.Id = Performance.Bandmate JOIN Songs ON Performance.SongId = Songs.SongId WHERE Songs.Title = 'Badlands'", "source_tables": ["songs", "performance", "band"], "error_info": ""}, {"sample_id": 5190, "db_id": "music_2", "score": 1, "gold_sql": "SELECT T2.firstname, T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T3.Title = 'Badlands' AND T1.StagePosition = 'back'", "pred_sql": "SELECT Band.Firstname, Band.Lastname FROM Performance JOIN Band ON Performance.Bandmate = Band.Id WHERE Performance.StagePosition = 'back' AND Performance.SongId = (SELECT SongId FROM Songs WHERE Title = 'Badlands')", "source_tables": ["songs", "performance", "band"], "error_info": ""}, {"sample_id": 5191, "db_id": "music_2", "score": 1, "gold_sql": "SELECT T2.firstname, T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T3.Title = 'Badlands' AND T1.StagePosition = 'back'", "pred_sql": "SELECT Band.Firstname, Band.Lastname FROM Performance JOIN Songs ON Performance.SongId = Songs.SongId JOIN Band ON Performance.Bandmate = Band.Id WHERE Performance.StagePosition = 'back' AND Songs.Title = 'Badlands'", "source_tables": ["songs", "performance", "band"], "error_info": ""}, {"sample_id": 5192, "db_id": "music_2", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT label) FROM albums", "pred_sql": "SELECT COUNT(DISTINCT Label) AS UniqueLabelCount FROM Albums", "source_tables": ["albums"], "error_info": ""}, {"sample_id": 5193, "db_id": "music_2", "score": 0, "gold_sql": "SELECT COUNT(DISTINCT label) FROM albums", "pred_sql": "SELECT DISTINCT Label FROM Albums", "source_tables": ["albums"], "error_info": "Result not equal"}, {"sample_id": 5194, "db_id": "music_2", "score": 1, "gold_sql": "SELECT label FROM albums GROUP BY label ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Label, COUNT(*) AS AlbumCount FROM Albums GROUP BY Label ORDER BY AlbumCount DESC LIMIT 1", "source_tables": ["albums"], "error_info": ""}, {"sample_id": 5195, "db_id": "music_2", "score": 1, "gold_sql": "SELECT label FROM albums GROUP BY label ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Label, COUNT(*) AS AlbumCount FROM Albums GROUP BY Label ORDER BY AlbumCount DESC LIMIT 1", "source_tables": ["albums"], "error_info": ""}, {"sample_id": 5196, "db_id": "music_2", "score": 1, "gold_sql": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId GROUP BY lastname ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Band.Lastname FROM Band JOIN Instruments ON Band.Id = Instruments.BandmateId JOIN Songs ON Instruments.SongId = Songs.SongId GROUP BY Band.Lastname ORDER BY COUNT(Songs.SongId) DESC LIMIT 1", "source_tables": ["songs", "performance", "band"], "error_info": ""}, {"sample_id": 5197, "db_id": "music_2", "score": 1, "gold_sql": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId GROUP BY lastname ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Band.Lastname FROM Band JOIN Instruments ON Band.Id = Instruments.BandmateId GROUP BY Band.Lastname ORDER BY COUNT(Instruments.SongId) DESC LIMIT 1", "source_tables": ["songs", "performance", "band"], "error_info": ""}, {"sample_id": 5198, "db_id": "music_2", "score": 1, "gold_sql": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id WHERE stageposition = 'back' GROUP BY lastname ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Lastname FROM Band WHERE Id = (SELECT Bandmate FROM Performance GROUP BY Bandmate ORDER BY COUNT(CASE WHEN StagePosition = 'back' THEN 1 END) DESC LIMIT 1)", "source_tables": ["performance", "band"], "error_info": ""}, {"sample_id": 5199, "db_id": "music_2", "score": 1, "gold_sql": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id WHERE stageposition = 'back' GROUP BY lastname ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Band.Lastname FROM Performance JOIN Band ON Performance.Bandmate = Band.Id WHERE Performance.StagePosition = 'back' GROUP BY Band.Lastname ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["performance", "band"], "error_info": ""}, {"sample_id": 5200, "db_id": "music_2", "score": 1, "gold_sql": "SELECT title FROM songs WHERE title LIKE '% the %'", "pred_sql": "SELECT * FROM Songs WHERE Title LIKE '%the%'", "source_tables": ["songs"], "error_info": ""}, {"sample_id": 5201, "db_id": "music_2", "score": 1, "gold_sql": "SELECT title FROM songs WHERE title LIKE '% the %'", "pred_sql": "SELECT Title FROM Songs WHERE Title LIKE '%the%'", "source_tables": ["songs"], "error_info": ""}, {"sample_id": 5202, "db_id": "music_2", "score": 1, "gold_sql": "SELECT DISTINCT instrument FROM Instruments", "pred_sql": "SELECT DISTINCT Instrument FROM Instruments", "source_tables": ["instruments"], "error_info": ""}, {"sample_id": 5203, "db_id": "music_2", "score": 1, "gold_sql": "SELECT DISTINCT instrument FROM Instruments", "pred_sql": "SELECT DISTINCT Instrument FROM Instruments", "source_tables": ["instruments"], "error_info": ""}, {"sample_id": 5204, "db_id": "music_2", "score": 1, "gold_sql": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId JOIN Instruments AS T4 ON T4.songid = T3.songid AND T4.bandmateid = T2.id WHERE T2.lastname = 'Heilo' AND T3.title = 'Le Pop'", "pred_sql": "SELECT Instruments.Instrument FROM Instruments JOIN Band ON Instruments.BandmateId = Band.Id JOIN Songs ON Instruments.SongId = Songs.SongId WHERE Band.Lastname = 'Heilo' AND Songs.Title = 'Le Pop'", "source_tables": ["instruments", "songs", "performance", "band"], "error_info": ""}, {"sample_id": 5205, "db_id": "music_2", "score": 1, "gold_sql": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId JOIN Instruments AS T4 ON T4.songid = T3.songid AND T4.bandmateid = T2.id WHERE T2.lastname = 'Heilo' AND T3.title = 'Le Pop'", "pred_sql": "SELECT Instruments.Instrument FROM Instruments JOIN Band ON Instruments.BandmateId = Band.Id JOIN Songs ON Instruments.SongId = Songs.SongId WHERE Band.Lastname = 'Heilo' AND Songs.Title = 'Le Pop'", "source_tables": ["instruments", "songs", "performance", "band"], "error_info": ""}, {"sample_id": 5206, "db_id": "music_2", "score": 1, "gold_sql": "SELECT instrument FROM instruments GROUP BY instrument ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Instrument, COUNT(*) AS UsageCount FROM Instruments GROUP BY Instrument ORDER BY UsageCount DESC LIMIT 1", "source_tables": ["instruments"], "error_info": ""}, {"sample_id": 5207, "db_id": "music_2", "score": 1, "gold_sql": "SELECT instrument FROM instruments GROUP BY instrument ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Instrument, COUNT(*) AS UsageCount FROM Instruments GROUP BY Instrument ORDER BY UsageCount DESC LIMIT 1", "source_tables": ["instruments"], "error_info": ""}, {"sample_id": 5208, "db_id": "music_2", "score": 1, "gold_sql": "SELECT COUNT(*) FROM instruments WHERE instrument = 'drums'", "pred_sql": "SELECT COUNT(DISTINCT Songs.SongId) AS NumberOfSongs FROM Instruments JOIN Songs ON Instruments.SongId = Songs.SongId WHERE Instruments.Instrument = 'drums'", "source_tables": ["instruments"], "error_info": ""}, {"sample_id": 5209, "db_id": "music_2", "score": 1, "gold_sql": "SELECT COUNT(*) FROM instruments WHERE instrument = 'drums'", "pred_sql": "SELECT COUNT(*) AS NumberOfSongs FROM Instruments WHERE Instrument = 'drums'", "source_tables": ["instruments"], "error_info": ""}, {"sample_id": 5210, "db_id": "music_2", "score": 1, "gold_sql": "SELECT instrument FROM instruments AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = 'Le Pop'", "pred_sql": "SELECT Instruments.Instrument FROM Instruments JOIN Songs ON Instruments.SongId = Songs.SongId WHERE Songs.Title = 'Le Pop'", "source_tables": ["instruments", "songs"], "error_info": ""}, {"sample_id": 5211, "db_id": "music_2", "score": 1, "gold_sql": "SELECT instrument FROM instruments AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = 'Le Pop'", "pred_sql": "SELECT Instruments.Instrument FROM Instruments JOIN Songs ON Instruments.SongId = Songs.SongId WHERE Songs.Title = 'Le Pop'", "source_tables": ["instruments", "songs"], "error_info": ""}, {"sample_id": 5212, "db_id": "music_2", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = 'Le Pop'", "pred_sql": "SELECT COUNT(DISTINCT Instruments.Instrument) AS InstrumentCount FROM Songs JOIN Instruments ON Songs.SongId = Instruments.SongId WHERE Songs.Title = 'Le Pop'", "source_tables": ["instruments", "songs"], "error_info": ""}, {"sample_id": 5213, "db_id": "music_2", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = 'Le Pop'", "pred_sql": "SELECT COUNT(DISTINCT Instrument) AS DifferentInstruments FROM Instruments WHERE SongId IN (SELECT SongId FROM Songs WHERE Title = 'Le Pop')", "source_tables": ["instruments", "songs"], "error_info": ""}, {"sample_id": 5214, "db_id": "music_2", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid = T2.id WHERE T2.lastname = 'Heilo'", "pred_sql": "SELECT COUNT(DISTINCT Instruments.Instrument) AS InstrumentCount FROM Instruments JOIN Band ON Instruments.BandmateId = Band.Id WHERE Band.Lastname = 'Heilo'", "source_tables": ["instruments", "band"], "error_info": ""}, {"sample_id": 5215, "db_id": "music_2", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid = T2.id WHERE T2.lastname = 'Heilo'", "pred_sql": "SELECT COUNT(DISTINCT Instruments.Instrument) AS DifferentInstruments FROM Instruments JOIN Band ON Instruments.BandmateId = Band.Id WHERE Band.Lastname = 'Heilo'", "source_tables": ["instruments", "band"], "error_info": ""}, {"sample_id": 5216, "db_id": "music_2", "score": 1, "gold_sql": "SELECT instrument FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid = T2.id WHERE T2.lastname = 'Heilo'", "pred_sql": "SELECT DISTINCT Instruments.Instrument FROM Instruments JOIN Band ON Instruments.BandmateId = Band.Id WHERE Band.Lastname = 'Heilo'", "source_tables": ["instruments", "band"], "error_info": ""}, {"sample_id": 5217, "db_id": "music_2", "score": 1, "gold_sql": "SELECT instrument FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid = T2.id WHERE T2.lastname = 'Heilo'", "pred_sql": "SELECT Instruments.Instrument FROM Instruments JOIN Band ON Instruments.BandmateId = Band.Id WHERE Band.Lastname = 'Heilo'", "source_tables": ["instruments", "band"], "error_info": ""}, {"sample_id": 5218, "db_id": "music_2", "score": 1, "gold_sql": "SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid GROUP BY T1.songid ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Songs.Title, COUNT(Vocals.Bandmate) AS VocalCount FROM Songs JOIN Vocals ON Songs.SongId = Vocals.SongId GROUP BY Songs.SongId ORDER BY VocalCount DESC LIMIT 1", "source_tables": ["songs", "vocals"], "error_info": ""}, {"sample_id": 5219, "db_id": "music_2", "score": 1, "gold_sql": "SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid GROUP BY T1.songid ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Songs.Title, COUNT(Vocals.Bandmate) AS VocalCount FROM Songs JOIN Vocals ON Songs.SongId = Vocals.SongId GROUP BY Songs.SongId ORDER BY VocalCount DESC LIMIT 1", "source_tables": ["songs", "vocals"], "error_info": ""}, {"sample_id": 5220, "db_id": "music_2", "score": 1, "gold_sql": "SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Type, COUNT(*) AS Frequency FROM Vocals GROUP BY Type ORDER BY Frequency DESC LIMIT 1", "source_tables": ["vocals"], "error_info": ""}, {"sample_id": 5221, "db_id": "music_2", "score": 1, "gold_sql": "SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Type, COUNT(*) AS Frequency FROM Vocals GROUP BY Type ORDER BY Frequency DESC LIMIT 1", "source_tables": ["vocals"], "error_info": ""}, {"sample_id": 5222, "db_id": "music_2", "score": 1, "gold_sql": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate = T2.id WHERE lastname = 'Heilo' GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Type, COUNT(Type) AS Count FROM Vocals WHERE Bandmate IN (SELECT Id FROM Band WHERE Lastname = 'Heilo') GROUP BY Type ORDER BY Count DESC LIMIT 1", "source_tables": ["band", "vocals"], "error_info": ""}, {"sample_id": 5223, "db_id": "music_2", "score": 1, "gold_sql": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate = T2.id WHERE lastname = 'Heilo' GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Type, COUNT(Type) AS TypeCount FROM Vocals JOIN Band ON Vocals.Bandmate = Band.Id WHERE Band.Lastname = 'Heilo' GROUP BY Type ORDER BY TypeCount DESC LIMIT 1", "source_tables": ["band", "vocals"], "error_info": ""}, {"sample_id": 5224, "db_id": "music_2", "score": 1, "gold_sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = 'Le Pop'", "pred_sql": "SELECT Type FROM Vocals WHERE SongId = (SELECT SongId FROM Songs WHERE Title = 'Le Pop')", "source_tables": ["songs", "vocals"], "error_info": ""}, {"sample_id": 5225, "db_id": "music_2", "score": 1, "gold_sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = 'Le Pop'", "pred_sql": "SELECT DISTINCT Type FROM Vocals INNER JOIN Songs ON Vocals.SongId = Songs.SongId WHERE Songs.Title = 'Le Pop'", "source_tables": ["songs", "vocals"], "error_info": ""}, {"sample_id": 5226, "db_id": "music_2", "score": 1, "gold_sql": "SELECT COUNT(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = 'Demon Kitty Rag'", "pred_sql": "SELECT COUNT(DISTINCT Type) AS NumberOfVocalTypes FROM Vocals JOIN Songs ON Vocals.SongId = Songs.SongId WHERE Songs.Title = 'Demon Kitty Rag'", "source_tables": ["songs", "vocals"], "error_info": ""}, {"sample_id": 5227, "db_id": "music_2", "score": 0, "gold_sql": "SELECT COUNT(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = 'Demon Kitty Rag'", "pred_sql": "SELECT Type FROM Vocals WHERE SongId = (SELECT SongId FROM Songs WHERE Title = 'Demon Kitty Rag')", "source_tables": ["songs", "vocals"], "error_info": "Result not equal"}, {"sample_id": 5228, "db_id": "music_2", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE TYPE = 'lead'", "pred_sql": "SELECT COUNT(*) AS LeadVocalCount FROM Vocals WHERE Type = 'lead'", "source_tables": ["songs", "vocals"], "error_info": ""}, {"sample_id": 5229, "db_id": "music_2", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE TYPE = 'lead'", "pred_sql": "SELECT COUNT(*) AS LeadVocalsCount FROM Vocals WHERE Type = 'lead'", "source_tables": ["songs", "vocals"], "error_info": ""}, {"sample_id": 5230, "db_id": "music_2", "score": 1, "gold_sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid JOIN band AS T3 ON T1.bandmate = T3.id WHERE T3.firstname = 'Solveig' AND T2.title = 'A Bar In Amsterdam'", "pred_sql": "SELECT Vocals.Type FROM Vocals JOIN Songs ON Vocals.SongId = Songs.SongId JOIN Band ON Vocals.Bandmate = Band.Id WHERE Band.Firstname = 'Solveig' AND Songs.Title = 'A Bar in Amsterdam'", "source_tables": ["band", "songs", "vocals"], "error_info": ""}, {"sample_id": 5231, "db_id": "music_2", "score": 1, "gold_sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid JOIN band AS T3 ON T1.bandmate = T3.id WHERE T3.firstname = 'Solveig' AND T2.title = 'A Bar In Amsterdam'", "pred_sql": "SELECT Vocals.Type FROM Vocals JOIN Songs ON Vocals.SongId = Songs.SongId JOIN Band ON Vocals.Bandmate = Band.Id WHERE Band.Firstname = 'Solveig' AND Songs.Title = 'A Bar in Amsterdam'", "source_tables": ["band", "songs", "vocals"], "error_info": ""}, {"sample_id": 5232, "db_id": "music_2", "score": 1, "gold_sql": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE TYPE = 'lead'", "pred_sql": "SELECT Songs.Title FROM Songs LEFT JOIN Vocals ON Songs.SongId = Vocals.SongId AND Vocals.Type = 'lead' WHERE Vocals.SongId IS NULL", "source_tables": ["songs", "vocals"], "error_info": ""}, {"sample_id": 5233, "db_id": "music_2", "score": 1, "gold_sql": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE TYPE = 'lead'", "pred_sql": "SELECT Songs.Title FROM Songs LEFT JOIN Vocals ON Songs.SongId = Vocals.SongId WHERE Vocals.Type IS NULL OR Vocals.Type <> 'lead'", "source_tables": ["songs", "vocals"], "error_info": ""}, {"sample_id": 5234, "db_id": "music_2", "score": 1, "gold_sql": "SELECT DISTINCT TYPE FROM vocals", "pred_sql": "SELECT DISTINCT Type FROM Vocals", "source_tables": ["vocals"], "error_info": ""}, {"sample_id": 5235, "db_id": "music_2", "score": 1, "gold_sql": "SELECT DISTINCT TYPE FROM vocals", "pred_sql": "SELECT DISTINCT Type FROM Vocals", "source_tables": ["vocals"], "error_info": ""}, {"sample_id": 5236, "db_id": "music_2", "score": 1, "gold_sql": "SELECT * FROM Albums WHERE YEAR = 2010", "pred_sql": "SELECT Title FROM Albums WHERE Year = 2010", "source_tables": ["albums"], "error_info": ""}, {"sample_id": 5237, "db_id": "music_2", "score": 1, "gold_sql": "SELECT * FROM Albums WHERE YEAR = 2010", "pred_sql": "SELECT * FROM Albums WHERE Year = 2010", "source_tables": ["albums"], "error_info": ""}, {"sample_id": 5238, "db_id": "music_2", "score": 1, "gold_sql": "SELECT T2.firstname, T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T3.Title = 'Le Pop'", "pred_sql": "SELECT Performance.Bandmate FROM Performance JOIN Songs ON Performance.SongId = Songs.SongId WHERE Songs.Title = 'Le Pop'", "source_tables": ["songs", "performance", "band"], "error_info": ""}, {"sample_id": 5239, "db_id": "music_2", "score": 1, "gold_sql": "SELECT T2.firstname, T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T3.Title = 'Le Pop'", "pred_sql": "SELECT Band.Firstname, Band.Lastname FROM Band JOIN Performance ON Band.Id = Performance.Bandmate JOIN Songs ON Performance.SongId = Songs.SongId WHERE Songs.Title = 'Le Pop'", "source_tables": ["songs", "performance", "band"], "error_info": ""}, {"sample_id": 5240, "db_id": "music_2", "score": 1, "gold_sql": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId GROUP BY lastname ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Band.Lastname FROM Band JOIN Instruments ON Band.Id = Instruments.BandmateId JOIN Songs ON Instruments.SongId = Songs.SongId GROUP BY Band.Lastname ORDER BY COUNT(Songs.SongId) DESC LIMIT 1", "source_tables": ["songs", "performance", "band"], "error_info": ""}, {"sample_id": 5241, "db_id": "music_2", "score": 1, "gold_sql": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId GROUP BY lastname ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Band.Lastname FROM Band JOIN Vocals ON Band.Id = Vocals.Bandmate GROUP BY Band.Lastname ORDER BY COUNT(Vocals.SongId) DESC LIMIT 1", "source_tables": ["songs", "performance", "band"], "error_info": ""}, {"sample_id": 5242, "db_id": "music_2", "score": 1, "gold_sql": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId JOIN Instruments AS T4 ON T4.songid = T3.songid AND T4.bandmateid = T2.id WHERE T2.lastname = 'Heilo' AND T3.title = 'Badlands'", "pred_sql": "SELECT Instruments.Instrument FROM Instruments JOIN Band ON Instruments.BandmateId = Band.Id JOIN Songs ON Instruments.SongId = Songs.SongId WHERE Band.Lastname = 'Heilo' AND Songs.Title = 'Badlands'", "source_tables": ["instruments", "songs", "performance", "band"], "error_info": ""}, {"sample_id": 5243, "db_id": "music_2", "score": 1, "gold_sql": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId JOIN Instruments AS T4 ON T4.songid = T3.songid AND T4.bandmateid = T2.id WHERE T2.lastname = 'Heilo' AND T3.title = 'Badlands'", "pred_sql": "SELECT Instruments.Instrument FROM Instruments JOIN Band ON Instruments.BandmateId = Band.Id JOIN Performance ON Instruments.SongId = Performance.SongId JOIN Songs ON Instruments.SongId = Songs.SongId JOIN Tracklists ON Songs.SongId = Tracklists.SongId JOIN Albums ON Tracklists.AlbumId = Albums.AId WHERE Band.Lastname = 'Heilo' AND Albums.Title = 'Badlands'", "source_tables": ["instruments", "songs", "performance", "band"], "error_info": ""}, {"sample_id": 5244, "db_id": "music_2", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = 'Badlands'", "pred_sql": "SELECT COUNT(*) AS InstrumentCount FROM Instruments WHERE SongId IN (SELECT SongId FROM Songs WHERE Title = 'Badlands')", "source_tables": ["instruments", "songs"], "error_info": ""}, {"sample_id": 5245, "db_id": "music_2", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = 'Badlands'", "pred_sql": "SELECT COUNT(DISTINCT Instrument) AS DifferentInstruments FROM Instruments JOIN Songs ON Instruments.SongId = Songs.SongId WHERE Songs.Title = 'Badlands'", "source_tables": ["instruments", "songs"], "error_info": ""}, {"sample_id": 5246, "db_id": "music_2", "score": 1, "gold_sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = 'Badlands'", "pred_sql": "SELECT Type FROM Vocals WHERE SongId = (SELECT SongId FROM Songs WHERE Title = 'Badlands')", "source_tables": ["songs", "vocals"], "error_info": ""}, {"sample_id": 5247, "db_id": "music_2", "score": 1, "gold_sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = 'Badlands'", "pred_sql": "SELECT Type FROM Vocals WHERE SongId = (SELECT SongId FROM Songs WHERE Title = 'Badlands')", "source_tables": ["songs", "vocals"], "error_info": ""}, {"sample_id": 5248, "db_id": "music_2", "score": 1, "gold_sql": "SELECT COUNT(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = 'Le Pop'", "pred_sql": "SELECT COUNT(DISTINCT Type) AS NumberOfVocalTypes FROM Vocals JOIN Songs ON Vocals.SongId = Songs.SongId WHERE Songs.Title = 'Le Pop'", "source_tables": ["songs", "vocals"], "error_info": ""}, {"sample_id": 5249, "db_id": "music_2", "score": 1, "gold_sql": "SELECT COUNT(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = 'Le Pop'", "pred_sql": "SELECT COUNT(DISTINCT Type) AS VocalTypeCount FROM Vocals WHERE SongId IN (SELECT SongId FROM Songs WHERE Title = 'Le Pop')", "source_tables": ["songs", "vocals"], "error_info": ""}, {"sample_id": 5250, "db_id": "music_2", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE TYPE = 'shared'", "pred_sql": "SELECT COUNT(DISTINCT v1.SongId) AS SharedVocalCount FROM Vocals AS v1 JOIN Vocals AS v2 ON v1.SongId = v2.SongId AND v1.Bandmate <> v2.Bandmate", "source_tables": ["songs", "vocals"], "error_info": ""}, {"sample_id": 5251, "db_id": "music_2", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE TYPE = 'shared'", "pred_sql": "SELECT COUNT(DISTINCT SongId) AS DifferentSongsWithSharedVocals FROM Vocals WHERE Type = 'shared'", "source_tables": ["songs", "vocals"], "error_info": ""}, {"sample_id": 5252, "db_id": "music_2", "score": 1, "gold_sql": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE TYPE = 'back'", "pred_sql": "SELECT Songs.Title FROM Songs LEFT JOIN Vocals ON Songs.SongId = Vocals.SongId AND Vocals.Type = 'backing' WHERE Vocals.SongId IS NULL", "source_tables": ["songs", "vocals"], "error_info": ""}, {"sample_id": 5253, "db_id": "music_2", "score": 1, "gold_sql": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE TYPE = 'back'", "pred_sql": "SELECT DISTINCT Songs.Title FROM Songs LEFT JOIN Vocals ON Songs.SongId = Vocals.SongId WHERE Vocals.Type IS NULL OR Vocals.Type <> 'backing'", "source_tables": ["songs", "vocals"], "error_info": ""}, {"sample_id": 5254, "db_id": "music_2", "score": 1, "gold_sql": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate = T2.id WHERE firstname = 'Solveig' GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Type, COUNT(Type) AS VocalCount FROM Vocals JOIN Band ON Vocals.Bandmate = Band.Id WHERE Band.Firstname = 'Solveig' GROUP BY Type ORDER BY VocalCount DESC LIMIT 1", "source_tables": ["band", "vocals"], "error_info": ""}, {"sample_id": 5255, "db_id": "music_2", "score": 1, "gold_sql": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate = T2.id WHERE firstname = 'Solveig' GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Type, COUNT(Type) AS VocalCount FROM Vocals JOIN Band ON Vocals.Bandmate = Band.Id WHERE Band.Firstname = 'Solveig' GROUP BY Type ORDER BY VocalCount DESC LIMIT 1", "source_tables": ["band", "vocals"], "error_info": ""}, {"sample_id": 5256, "db_id": "music_2", "score": 1, "gold_sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid JOIN band AS T3 ON T1.bandmate = T3.id WHERE T3.lastname = 'Heilo' AND T2.title = 'Der Kapitan'", "pred_sql": "SELECT Vocals.Type FROM Vocals JOIN Songs ON Vocals.SongId = Songs.SongId JOIN Band ON Vocals.Bandmate = Band.Id WHERE Band.Lastname = 'Heilo' AND Songs.Title = 'Der Kapitan'", "source_tables": ["band", "songs", "vocals"], "error_info": ""}, {"sample_id": 5257, "db_id": "music_2", "score": 1, "gold_sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid JOIN band AS T3 ON T1.bandmate = T3.id WHERE T3.lastname = 'Heilo' AND T2.title = 'Der Kapitan'", "pred_sql": "SELECT Vocals.Type FROM Vocals JOIN Songs ON Vocals.SongId = Songs.SongId JOIN Band ON Vocals.Bandmate = Band.Id WHERE Band.Lastname = 'Heilo' AND Songs.Title = 'Der Kapitan'", "source_tables": ["band", "songs", "vocals"], "error_info": ""}, {"sample_id": 5258, "db_id": "music_2", "score": 1, "gold_sql": "SELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate = t2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId GROUP BY firstname ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Band.Firstname FROM Band JOIN Performance ON Band.Id = Performance.Bandmate GROUP BY Band.Firstname ORDER BY COUNT(Performance.SongId) DESC LIMIT 1", "source_tables": ["songs", "performance", "band"], "error_info": ""}, {"sample_id": 5259, "db_id": "music_2", "score": 1, "gold_sql": "SELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate = t2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId GROUP BY firstname ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT B.Firstname FROM Band AS B JOIN Performance AS P ON B.Id = P.Bandmate GROUP BY B.Firstname ORDER BY COUNT(P.SongId) DESC LIMIT 1", "source_tables": ["songs", "performance", "band"], "error_info": ""}, {"sample_id": 5260, "db_id": "music_2", "score": 1, "gold_sql": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate = T2.id WHERE firstname = 'Marianne' GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Type, COUNT(Type) AS TypeCount FROM Vocals JOIN Band ON Vocals.Bandmate = Band.Id WHERE Band.Firstname = 'Marianne' GROUP BY Type ORDER BY TypeCount DESC LIMIT 1", "source_tables": ["band", "vocals"], "error_info": ""}, {"sample_id": 5261, "db_id": "music_2", "score": 1, "gold_sql": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate = T2.id WHERE firstname = 'Marianne' GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT v.Type FROM Vocals AS v JOIN Band AS b ON v.Bandmate = b.Id WHERE b.Firstname = 'Marianne' ORDER BY v.SongId LIMIT 1", "source_tables": ["band", "vocals"], "error_info": ""}, {"sample_id": 5262, "db_id": "music_2", "score": 1, "gold_sql": "SELECT T2.firstname, T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T3.Title = 'Der Kapitan' AND T1.StagePosition = 'back'", "pred_sql": "SELECT Band.Firstname, Band.Lastname FROM Performance JOIN Band ON Performance.Bandmate = Band.Id JOIN Songs ON Performance.SongId = Songs.SongId WHERE Performance.StagePosition = 'back' AND Songs.Title = 'Der Kapitan'", "source_tables": ["songs", "performance", "band"], "error_info": ""}, {"sample_id": 5263, "db_id": "music_2", "score": 1, "gold_sql": "SELECT T2.firstname, T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T3.Title = 'Der Kapitan' AND T1.StagePosition = 'back'", "pred_sql": "SELECT Band.Firstname, Band.Lastname FROM Band JOIN Performance ON Band.Id = Performance.Bandmate JOIN Songs ON Performance.SongId = Songs.SongId WHERE Performance.StagePosition = 'back' AND Songs.Title = 'Der Kapitan'", "source_tables": ["songs", "performance", "band"], "error_info": ""}, {"sample_id": 5264, "db_id": "music_2", "score": 1, "gold_sql": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE TYPE = 'back'", "pred_sql": "SELECT Title FROM Songs WHERE NOT SongId IN (SELECT SongId FROM Vocals WHERE Type = 'backing')", "source_tables": ["songs", "vocals"], "error_info": ""}, {"sample_id": 5265, "db_id": "music_2", "score": 1, "gold_sql": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE TYPE = 'back'", "pred_sql": "SELECT Songs.Title FROM Songs LEFT JOIN Vocals ON Songs.SongId = Vocals.SongId AND Vocals.Type = 'backing' WHERE Vocals.SongId IS NULL", "source_tables": ["songs", "vocals"], "error_info": ""}, {"sample_id": 5266, "db_id": "music_2", "score": 1, "gold_sql": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid = T2.albumid JOIN songs AS T3 ON T2.songid = T3.songid WHERE T1.title = 'A Kiss Before You Go: Live in Hamburg'", "pred_sql": "SELECT Songs.Title FROM Songs JOIN Tracklists ON Songs.SongId = Tracklists.SongId JOIN Albums ON Tracklists.AlbumId = Albums.AId WHERE Albums.Title = 'A Kiss Before You Go: Live in Hamburg'", "source_tables": ["songs", "albums", "tracklists"], "error_info": ""}, {"sample_id": 5267, "db_id": "music_2", "score": 1, "gold_sql": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid = T2.albumid JOIN songs AS T3 ON T2.songid = T3.songid WHERE T1.title = 'A Kiss Before You Go: Live in Hamburg'", "pred_sql": "SELECT Songs.Title FROM Songs JOIN Tracklists ON Songs.SongId = Tracklists.SongId JOIN Albums ON Tracklists.AlbumId = Albums.AId WHERE Albums.Title = 'A Kiss Before You Go: Live in Hamburg'", "source_tables": ["songs", "albums", "tracklists"], "error_info": ""}, {"sample_id": 5268, "db_id": "music_2", "score": 1, "gold_sql": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid = T2.albumid JOIN songs AS T3 ON T2.songid = T3.songid WHERE t1.label = 'Universal Music Group'", "pred_sql": "SELECT Songs.Title FROM Songs JOIN Tracklists ON Songs.SongId = Tracklists.SongId JOIN Albums ON Tracklists.AlbumId = Albums.AId WHERE Albums.Label = 'Universal Music Group'", "source_tables": ["songs", "albums", "tracklists"], "error_info": ""}, {"sample_id": 5269, "db_id": "music_2", "score": 1, "gold_sql": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid = T2.albumid JOIN songs AS T3 ON T2.songid = T3.songid WHERE t1.label = 'Universal Music Group'", "pred_sql": "SELECT Songs.Title FROM Songs JOIN Tracklists ON Songs.SongId = Tracklists.SongId JOIN Albums ON Tracklists.AlbumId = Albums.AId WHERE Albums.Label = 'Universal Music Group'", "source_tables": ["songs", "albums", "tracklists"], "error_info": ""}, {"sample_id": 5270, "db_id": "music_2", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT T3.title) FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid = T2.albumid JOIN songs AS T3 ON T2.songid = T3.songid WHERE t1.type = 'Studio'", "pred_sql": "SELECT COUNT(Songs.SongId) AS NumberOfSongs FROM Songs JOIN Tracklists ON Songs.SongId = Tracklists.SongId JOIN Albums ON Tracklists.AlbumId = Albums.AId WHERE Albums.Type = 'studio'", "source_tables": ["songs", "albums", "tracklists"], "error_info": ""}, {"sample_id": 5271, "db_id": "music_2", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT T3.title) FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid = T2.albumid JOIN songs AS T3 ON T2.songid = T3.songid WHERE t1.type = 'Studio'", "pred_sql": "SELECT COUNT(DISTINCT Songs.SongId) AS NumberOfSongs FROM Songs JOIN Tracklists ON Songs.SongId = Tracklists.SongId JOIN Albums ON Tracklists.AlbumId = Albums.AId WHERE Albums.Type = 'studio'", "source_tables": ["songs", "albums", "tracklists"], "error_info": ""}, {"sample_id": 5272, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT founder FROM manufacturers WHERE name = 'Sony'", "pred_sql": "SELECT Founder FROM Manufacturers WHERE Name = 'Sony'", "source_tables": ["manufacturers"], "error_info": ""}, {"sample_id": 5273, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT founder FROM manufacturers WHERE name = 'Sony'", "pred_sql": "SELECT Founder FROM Manufacturers WHERE Name = 'Sony'", "source_tables": ["manufacturers"], "error_info": ""}, {"sample_id": 5274, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT headquarter FROM manufacturers WHERE founder = 'James'", "pred_sql": "SELECT Headquarter FROM Manufacturers WHERE Founder = 'James'", "source_tables": ["manufacturers"], "error_info": ""}, {"sample_id": 5275, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT headquarter FROM manufacturers WHERE founder = 'James'", "pred_sql": "SELECT Headquarter FROM Manufacturers WHERE Founder = 'James'", "source_tables": ["manufacturers"], "error_info": ""}, {"sample_id": 5276, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT name, headquarter FROM manufacturers ORDER BY revenue DESC", "pred_sql": "SELECT Name, Headquarter FROM Manufacturers ORDER BY Revenue DESC", "source_tables": ["manufacturers"], "error_info": ""}, {"sample_id": 5277, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT name, headquarter FROM manufacturers ORDER BY revenue DESC", "pred_sql": "SELECT Name, Headquarter FROM Manufacturers ORDER BY Revenue DESC", "source_tables": ["manufacturers"], "error_info": ""}, {"sample_id": 5278, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT AVG(revenue), MAX(revenue), SUM(revenue) FROM manufacturers", "pred_sql": "SELECT AVG(Revenue) AS Average_Revenue, MAX(Revenue) AS Maximum_Revenue, SUM(Revenue) AS Total_Revenue FROM Manufacturers", "source_tables": ["manufacturers"], "error_info": ""}, {"sample_id": 5279, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT AVG(revenue), MAX(revenue), SUM(revenue) FROM manufacturers", "pred_sql": "SELECT AVG(Revenue) AS Average_Revenue, MAX(Revenue) AS Maximum_Revenue, SUM(Revenue) AS Total_Revenue FROM Manufacturers", "source_tables": ["manufacturers"], "error_info": ""}, {"sample_id": 5280, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM manufacturers WHERE founder = 'Andy'", "pred_sql": "SELECT COUNT(*) AS CompanyCount FROM Manufacturers WHERE Founder = 'Andy'", "source_tables": ["manufacturers"], "error_info": ""}, {"sample_id": 5281, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM manufacturers WHERE founder = 'Andy'", "pred_sql": "SELECT COUNT(*) AS NumberOfCompanies FROM Manufacturers WHERE Founder = 'Andy'", "source_tables": ["manufacturers"], "error_info": ""}, {"sample_id": 5282, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT SUM(revenue) FROM manufacturers WHERE headquarter = 'Austin'", "pred_sql": "SELECT SUM(Revenue) AS Total_Revenue FROM Manufacturers WHERE Headquarter = 'Austin'", "source_tables": ["manufacturers"], "error_info": ""}, {"sample_id": 5283, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT SUM(revenue) FROM manufacturers WHERE headquarter = 'Austin'", "pred_sql": "SELECT SUM(Revenue) AS Total_Revenue FROM Manufacturers WHERE Headquarter = 'Austin'", "source_tables": ["manufacturers"], "error_info": ""}, {"sample_id": 5284, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT DISTINCT headquarter FROM manufacturers", "pred_sql": "SELECT DISTINCT Headquarter FROM Manufacturers", "source_tables": ["manufacturers"], "error_info": ""}, {"sample_id": 5285, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT DISTINCT headquarter FROM manufacturers", "pred_sql": "SELECT DISTINCT Headquarter FROM Manufacturers", "source_tables": ["manufacturers"], "error_info": ""}, {"sample_id": 5286, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM manufacturers WHERE headquarter = 'Tokyo' OR headquarter = 'Beijing'", "pred_sql": "SELECT COUNT(*) AS NumberOfManufacturers FROM Manufacturers WHERE Headquarter IN ('Tokyo', 'Beijing')", "source_tables": ["manufacturers"], "error_info": ""}, {"sample_id": 5287, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM manufacturers WHERE headquarter = 'Tokyo' OR headquarter = 'Beijing'", "pred_sql": "SELECT COUNT(*) FROM Manufacturers WHERE Headquarter IN ('Tokyo', 'Beijing')", "source_tables": ["manufacturers"], "error_info": ""}, {"sample_id": 5288, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT founder FROM manufacturers WHERE name LIKE 'S%'", "pred_sql": "SELECT Founder FROM Manufacturers WHERE Name LIKE 'S%'", "source_tables": ["manufacturers"], "error_info": ""}, {"sample_id": 5289, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT founder FROM manufacturers WHERE name LIKE 'S%'", "pred_sql": "SELECT Founder FROM Manufacturers WHERE Name LIKE 'S%'", "source_tables": ["manufacturers"], "error_info": ""}, {"sample_id": 5290, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT name FROM manufacturers WHERE revenue BETWEEN 100 AND 150", "pred_sql": "SELECT Name FROM Manufacturers WHERE Revenue BETWEEN '100' AND '150'", "source_tables": ["manufacturers"], "error_info": ""}, {"sample_id": 5291, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT name FROM manufacturers WHERE revenue BETWEEN 100 AND 150", "pred_sql": "SELECT Name FROM Manufacturers WHERE Revenue BETWEEN '100' AND '150'", "source_tables": ["manufacturers"], "error_info": ""}, {"sample_id": 5292, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT SUM(revenue) FROM manufacturers WHERE Headquarter = 'Tokyo' OR Headquarter = 'Taiwan'", "pred_sql": "SELECT SUM(Revenue) AS Total_Revenue FROM Manufacturers WHERE Headquarter IN ('Tokyo', 'Taiwan')", "source_tables": ["manufacturers"], "error_info": ""}, {"sample_id": 5293, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT SUM(revenue) FROM manufacturers WHERE Headquarter = 'Tokyo' OR Headquarter = 'Taiwan'", "pred_sql": "SELECT SUM(Revenue) AS Total_Revenue FROM Manufacturers WHERE Headquarter IN ('Tokyo', 'Taiwan')", "source_tables": ["manufacturers"], "error_info": ""}, {"sample_id": 5294, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T2.name = 'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T2.name = 'Sony'", "pred_sql": "SELECT p.Name FROM Products AS p JOIN Manufacturers AS m ON p.Manufacturer = m.Code WHERE m.Name IN ('Creative Labs', 'Sony') GROUP BY p.Name HAVING COUNT(DISTINCT m.Name) = 2", "source_tables": ["manufacturers", "products"], "error_info": ""}, {"sample_id": 5295, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T2.name = 'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T2.name = 'Sony'", "pred_sql": "SELECT p1.Name FROM Products AS p1 JOIN Manufacturers AS m1 ON p1.Manufacturer = m1.Code WHERE m1.Name = 'Creative Labs' INTERSECT SELECT p2.Name FROM Products AS p2 JOIN Manufacturers AS m2 ON p2.Manufacturer = m2.Code WHERE m2.Name = 'Sony'", "source_tables": ["manufacturers", "products"], "error_info": ""}, {"sample_id": 5296, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT name, headquarter, founder FROM manufacturers ORDER BY revenue DESC LIMIT 1", "pred_sql": "SELECT Name, Headquarter, Founder FROM Manufacturers WHERE Revenue = (SELECT MAX(Revenue) FROM Manufacturers)", "source_tables": ["manufacturers"], "error_info": ""}, {"sample_id": 5297, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT name, headquarter, founder FROM manufacturers ORDER BY revenue DESC LIMIT 1", "pred_sql": "SELECT Name, Headquarter, Founder FROM Manufacturers WHERE Revenue = (SELECT MAX(Revenue) FROM Manufacturers)", "source_tables": ["manufacturers"], "error_info": ""}, {"sample_id": 5298, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT name, headquarter, revenue FROM manufacturers ORDER BY revenue DESC", "pred_sql": "SELECT Name, Headquarter, Revenue FROM Manufacturers ORDER BY Revenue DESC", "source_tables": ["manufacturers"], "error_info": ""}, {"sample_id": 5299, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT name, headquarter, revenue FROM manufacturers ORDER BY revenue DESC", "pred_sql": "SELECT Name, Headquarter, Revenue FROM Manufacturers ORDER BY Revenue DESC", "source_tables": ["manufacturers"], "error_info": ""}, {"sample_id": 5300, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT name FROM manufacturers WHERE revenue > (SELECT AVG(revenue) FROM manufacturers)", "pred_sql": "SELECT Name FROM Manufacturers WHERE Revenue > (SELECT AVG(Revenue) FROM Manufacturers)", "source_tables": ["manufacturers"], "error_info": ""}, {"sample_id": 5301, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT name FROM manufacturers WHERE revenue > (SELECT AVG(revenue) FROM manufacturers)", "pred_sql": "SELECT Name FROM Manufacturers WHERE Revenue > (SELECT AVG(Revenue) FROM Manufacturers)", "source_tables": ["manufacturers"], "error_info": ""}, {"sample_id": 5302, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT name FROM manufacturers WHERE revenue < (SELECT MIN(revenue) FROM manufacturers WHERE headquarter = 'Austin')", "pred_sql": "SELECT Name FROM Manufacturers WHERE Revenue < (SELECT MIN(Revenue) FROM Manufacturers WHERE Headquarter = 'Austin')", "source_tables": ["manufacturers"], "error_info": ""}, {"sample_id": 5303, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT name FROM manufacturers WHERE revenue < (SELECT MIN(revenue) FROM manufacturers WHERE headquarter = 'Austin')", "pred_sql": "SELECT Name FROM Manufacturers WHERE Revenue < (SELECT MIN(Revenue) FROM Manufacturers WHERE Headquarter = 'Austin')", "source_tables": ["manufacturers"], "error_info": ""}, {"sample_id": 5304, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT SUM(revenue) FROM manufacturers WHERE revenue > (SELECT MIN(revenue) FROM manufacturers WHERE headquarter = 'Austin')", "pred_sql": "SELECT SUM(Revenue) AS Total_Revenue FROM Manufacturers WHERE Revenue > (SELECT MAX(Revenue) FROM Manufacturers WHERE Headquarter = 'Austin')", "source_tables": ["manufacturers"], "error_info": ""}, {"sample_id": 5305, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT SUM(revenue) FROM manufacturers WHERE revenue > (SELECT MIN(revenue) FROM manufacturers WHERE headquarter = 'Austin')", "pred_sql": "SELECT SUM(Revenue) AS Total_Revenue FROM Manufacturers WHERE Revenue > (SELECT MIN(Revenue) FROM Manufacturers WHERE Headquarter = 'Austin')", "source_tables": ["manufacturers"], "error_info": ""}, {"sample_id": 5306, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT SUM(revenue), founder FROM manufacturers GROUP BY founder", "pred_sql": "SELECT Founder, SUM(Revenue) AS Total_Revenue FROM Manufacturers GROUP BY Founder", "source_tables": ["manufacturers"], "error_info": ""}, {"sample_id": 5307, "db_id": "manufactory_1", "score": 0, "gold_sql": "SELECT SUM(revenue), founder FROM manufacturers GROUP BY founder", "pred_sql": "SELECT SUM(Revenue) AS Total_Revenue FROM Manufacturers WHERE Founder = ?", "source_tables": ["manufacturers"], "error_info": "Predction Execution Error:Incorrect number of bindings supplied. The current statement uses 1, and there are 0 supplied."}, {"sample_id": 5308, "db_id": "manufactory_1", "score": 0, "gold_sql": "SELECT name, MAX(revenue), Headquarter FROM manufacturers GROUP BY Headquarter", "pred_sql": "SELECT Headquarter, Name, Revenue FROM Manufacturers WHERE Revenue = (SELECT MAX(Revenue) FROM Manufacturers GROUP BY Headquarter)", "source_tables": ["manufacturers"], "error_info": "Result not equal"}, {"sample_id": 5309, "db_id": "manufactory_1", "score": 0, "gold_sql": "SELECT name, MAX(revenue), Headquarter FROM manufacturers GROUP BY Headquarter", "pred_sql": "SELECT Name, Revenue FROM Manufacturers WHERE (Headquarter, Revenue) IN (SELECT Headquarter, MAX(Revenue) FROM Manufacturers GROUP BY Headquarter)", "source_tables": ["manufacturers"], "error_info": "Result not equal"}, {"sample_id": 5310, "db_id": "manufactory_1", "score": 0, "gold_sql": "SELECT SUM(revenue), name FROM manufacturers GROUP BY name", "pred_sql": "SELECT Manufacturers.Name, SUM(Products.Price) AS Total_Revenue FROM Manufacturers JOIN Products ON Manufacturers.Code = Products.Manufacturer GROUP BY Manufacturers.Name", "source_tables": ["manufacturers"], "error_info": "Result not equal"}, {"sample_id": 5311, "db_id": "manufactory_1", "score": 0, "gold_sql": "SELECT SUM(revenue), name FROM manufacturers GROUP BY name", "pred_sql": "SELECT Manufacturers.Name, SUM(Products.Price) AS Total_Revenue FROM Manufacturers JOIN Products ON Manufacturers.Code = Products.Manufacturer GROUP BY Manufacturers.Name", "source_tables": ["manufacturers"], "error_info": "Result not equal"}, {"sample_id": 5312, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT AVG(T1.price), T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name", "pred_sql": "SELECT Manufacturers.Name, AVG(Products.Price) AS Average_Price FROM Manufacturers JOIN Products ON Manufacturers.Code = Products.Manufacturer GROUP BY Manufacturers.Name", "source_tables": ["manufacturers", "products"], "error_info": ""}, {"sample_id": 5313, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT AVG(T1.price), T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name", "pred_sql": "SELECT Manufacturers.Name, AVG(Products.Price) AS Average_Price FROM Products JOIN Manufacturers ON Products.Manufacturer = Manufacturers.Code GROUP BY Manufacturers.Name", "source_tables": ["manufacturers", "products"], "error_info": ""}, {"sample_id": 5314, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT T1.name), T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.Headquarter", "pred_sql": "SELECT COUNT(DISTINCT Products.Code) AS NumberOfDifferentProducts, Manufacturers.Headquarter FROM Products JOIN Manufacturers ON Products.Manufacturer = Manufacturers.Code GROUP BY Manufacturers.Headquarter", "source_tables": ["manufacturers", "products"], "error_info": ""}, {"sample_id": 5315, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT T1.name), T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.Headquarter", "pred_sql": "SELECT m.Headquarter, COUNT(DISTINCT p.Code) AS ProductCount FROM Manufacturers AS m JOIN Products AS p ON m.Code = p.Manufacturer GROUP BY m.Headquarter", "source_tables": ["manufacturers", "products"], "error_info": ""}, {"sample_id": 5316, "db_id": "manufactory_1", "score": 0, "gold_sql": "SELECT COUNT(DISTINCT name) FROM products WHERE NOT name IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T2.name = 'Sony')", "pred_sql": "SELECT COUNT(*) AS NumberOfProducts FROM Products WHERE NOT Manufacturer IN (SELECT Code FROM Manufacturers WHERE Name = 'Sony')", "source_tables": ["manufacturers", "products"], "error_info": "Result not equal"}, {"sample_id": 5317, "db_id": "manufactory_1", "score": 0, "gold_sql": "SELECT COUNT(DISTINCT name) FROM products WHERE NOT name IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T2.name = 'Sony')", "pred_sql": "SELECT COUNT(*) FROM Products WHERE Manufacturer <> (SELECT Code FROM Manufacturers WHERE Name = 'Sony')", "source_tables": ["manufacturers", "products"], "error_info": "Result not equal"}, {"sample_id": 5318, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T1.name = 'DVD drive'", "pred_sql": "SELECT Name FROM Manufacturers WHERE NOT Code IN (SELECT Manufacturer FROM Products WHERE Name LIKE '%DVD drive%')", "source_tables": ["manufacturers", "products"], "error_info": ""}, {"sample_id": 5319, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T1.name = 'DVD drive'", "pred_sql": "SELECT Name FROM Manufacturers WHERE NOT Code IN (SELECT Manufacturer FROM Products WHERE Name LIKE '%DVD drive%')", "source_tables": ["manufacturers", "products"], "error_info": ""}, {"sample_id": 5320, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT COUNT(*), T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name", "pred_sql": "SELECT Manufacturers.Name, COUNT(Products.Code) AS NumberOfProducts FROM Manufacturers LEFT JOIN Products ON Manufacturers.Code = Products.Manufacturer GROUP BY Manufacturers.Name", "source_tables": ["manufacturers", "products"], "error_info": ""}, {"sample_id": 5321, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT COUNT(*), T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name", "pred_sql": "SELECT Manufacturers.Name, COUNT(Products.Code) AS ProductCount FROM Manufacturers LEFT JOIN Products ON Manufacturers.Code = Products.Manufacturer GROUP BY Manufacturers.Name", "source_tables": ["manufacturers", "products"], "error_info": ""}, {"sample_id": 5322, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT Name FROM Products", "pred_sql": "SELECT Name FROM Products", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5323, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT Name FROM Products", "pred_sql": "SELECT Name FROM Products", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5324, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT name, price FROM products", "pred_sql": "SELECT Name, Price FROM Products", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5325, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT name, price FROM products", "pred_sql": "SELECT Name, Price FROM Products", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5326, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT name FROM products WHERE price <= 200", "pred_sql": "SELECT Name FROM Products WHERE Price <= 200", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5327, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT name FROM products WHERE price <= 200", "pred_sql": "SELECT Name FROM Products WHERE Price <= 200", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5328, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT * FROM products WHERE price BETWEEN 60 AND 120", "pred_sql": "SELECT * FROM Products WHERE Price BETWEEN 60 AND 120", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5329, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT * FROM products WHERE price BETWEEN 60 AND 120", "pred_sql": "SELECT * FROM Products WHERE Price BETWEEN 60 AND 120", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5330, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT AVG(price) FROM products", "pred_sql": "SELECT AVG(Price) AS AveragePrice FROM Products", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5331, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT AVG(price) FROM products", "pred_sql": "SELECT AVG(Price) AS AveragePrice FROM Products", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5332, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT AVG(price) FROM products WHERE Manufacturer = 2", "pred_sql": "SELECT AVG(Price) AS AveragePrice FROM Products WHERE Manufacturer = 2", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5333, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT AVG(price) FROM products WHERE Manufacturer = 2", "pred_sql": "SELECT AVG(Price) AS AveragePrice FROM Products WHERE Manufacturer = 2", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5334, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM products WHERE price >= 180", "pred_sql": "SELECT COUNT(*) AS product_count FROM Products WHERE Price >= 180", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5335, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM products WHERE price >= 180", "pred_sql": "SELECT COUNT(*) AS ProductCount FROM Products WHERE Price >= 180", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5336, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT name, price FROM products WHERE price >= 180 ORDER BY price DESC, name ASC", "pred_sql": "SELECT Name, Price FROM Products WHERE Price >= 180 ORDER BY Price DESC, Name ASC", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5337, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT name, price FROM products WHERE price >= 180 ORDER BY price DESC, name ASC", "pred_sql": "SELECT Name, Price FROM Products WHERE Price >= 180 ORDER BY Price DESC, Name ASC", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5338, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT * FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code", "pred_sql": "SELECT Products.*, Manufacturers.* FROM Products JOIN Manufacturers ON Products.Manufacturer = Manufacturers.Code", "source_tables": ["manufacturers", "products"], "error_info": ""}, {"sample_id": 5339, "db_id": "manufactory_1", "score": 0, "gold_sql": "SELECT * FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code", "pred_sql": "SELECT Products.*, Manufacturers.Name AS ManufacturerName FROM Products JOIN Manufacturers ON Products.Manufacturer = Manufacturers.Code", "source_tables": ["manufacturers", "products"], "error_info": "Result not equal"}, {"sample_id": 5340, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT AVG(Price), Manufacturer FROM Products GROUP BY Manufacturer", "pred_sql": "SELECT Products.Manufacturer, AVG(Products.Price) AS AveragePrice FROM Products GROUP BY Products.Manufacturer", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5341, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT AVG(Price), Manufacturer FROM Products GROUP BY Manufacturer", "pred_sql": "SELECT Manufacturer, AVG(Price) AS Average_Price FROM Products GROUP BY Manufacturer", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5342, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT AVG(T1.Price), T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.name", "pred_sql": "SELECT Manufacturers.Name, AVG(Products.Price) AS Average_Price FROM Manufacturers JOIN Products ON Manufacturers.Code = Products.Manufacturer GROUP BY Manufacturers.Name", "source_tables": ["manufacturers", "products"], "error_info": ""}, {"sample_id": 5343, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT AVG(T1.Price), T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.name", "pred_sql": "SELECT Manufacturers.Name, AVG(Products.Price) AS Average_Price FROM Products JOIN Manufacturers ON Products.Manufacturer = Manufacturers.Code GROUP BY Manufacturers.Name", "source_tables": ["manufacturers", "products"], "error_info": ""}, {"sample_id": 5344, "db_id": "manufactory_1", "score": 0, "gold_sql": "SELECT AVG(T1.Price), T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.name HAVING AVG(T1.price) >= 150", "pred_sql": "SELECT m.Name FROM Manufacturers AS m JOIN Products AS p ON m.Code = p.Manufacturer GROUP BY m.Name HAVING AVG(p.Price) >= 150", "source_tables": ["manufacturers", "products"], "error_info": "Result not equal"}, {"sample_id": 5345, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT AVG(T1.Price), T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.name HAVING AVG(T1.price) >= 150", "pred_sql": "SELECT m.Name, AVG(p.Price) AS AveragePrice FROM Manufacturers AS m JOIN Products AS p ON m.Code = p.Manufacturer GROUP BY m.Name HAVING AVG(p.Price) >= 150", "source_tables": ["manufacturers", "products"], "error_info": ""}, {"sample_id": 5346, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT name, price FROM Products ORDER BY price ASC LIMIT 1", "pred_sql": "SELECT Name, Price FROM Products ORDER BY Price ASC LIMIT 1", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5347, "db_id": "manufactory_1", "score": 1, "gold_sql": "SELECT name, price FROM Products ORDER BY price ASC LIMIT 1", "pred_sql": "SELECT Name, Price FROM Products ORDER BY Price ASC LIMIT 1", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5348, "db_id": "manufactory_1", "score": 0, "gold_sql": "SELECT T1.Name, MAX(T1.Price), T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.name", "pred_sql": "SELECT m.Name AS ManufacturerName, p.Name AS ProductName, p.Price FROM Manufacturers AS m JOIN Products AS p ON m.Code = p.Manufacturer WHERE p.Price = (SELECT MAX(Price) FROM Products WHERE Manufacturer = m.Code)", "source_tables": ["manufacturers", "products"], "error_info": "Result not equal"}, {"sample_id": 5349, "db_id": "manufactory_1", "score": 0, "gold_sql": "SELECT T1.Name, MAX(T1.Price), T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.name", "pred_sql": "SELECT m.Name AS ManufacturerName, p.Name AS ProductName, p.Price FROM Manufacturers AS m JOIN Products AS p ON m.Code = p.Manufacturer WHERE p.Price IN (SELECT MAX(Price) FROM Products WHERE Manufacturer = m.Code) ORDER BY m.Name", "source_tables": ["manufacturers", "products"], "error_info": "Result not equal"}, {"sample_id": 5350, "db_id": "manufactory_1", "score": 0, "gold_sql": "SELECT code, name, MIN(price) FROM products GROUP BY name", "pred_sql": "SELECT Code FROM Products WHERE Price = (SELECT MIN(Price) FROM Products GROUP BY Manufacturer)", "source_tables": ["products"], "error_info": "Result not equal"}, {"sample_id": 5351, "db_id": "manufactory_1", "score": 0, "gold_sql": "SELECT code, name, MIN(price) FROM products GROUP BY name", "pred_sql": "SELECT Code, Name FROM Products WHERE Price = (SELECT MIN(Price) FROM Products GROUP BY Manufacturer)", "source_tables": ["products"], "error_info": "Result not equal"}, {"sample_id": 5352, "db_id": "tracking_software_problems", "score": 1, "gold_sql": "SELECT problem_log_id FROM problem_log ORDER BY log_entry_date DESC LIMIT 1", "pred_sql": "SELECT problem_log_id FROM Problem_Log ORDER BY log_entry_date DESC LIMIT 1", "source_tables": ["problem_log"], "error_info": ""}, {"sample_id": 5353, "db_id": "tracking_software_problems", "score": 1, "gold_sql": "SELECT problem_log_id FROM problem_log ORDER BY log_entry_date DESC LIMIT 1", "pred_sql": "SELECT problem_log_id FROM Problem_Log ORDER BY log_entry_date DESC LIMIT 1", "source_tables": ["problem_log"], "error_info": ""}, {"sample_id": 5354, "db_id": "tracking_software_problems", "score": 1, "gold_sql": "SELECT problem_log_id, problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1", "pred_sql": "SELECT problem_log_id, problem_id FROM Problem_Log ORDER BY log_entry_date ASC LIMIT 1", "source_tables": ["problem_log"], "error_info": ""}, {"sample_id": 5355, "db_id": "tracking_software_problems", "score": 1, "gold_sql": "SELECT problem_log_id, problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1", "pred_sql": "SELECT problem_log_id, problem_id FROM Problem_Log ORDER BY log_entry_date ASC LIMIT 1", "source_tables": ["problem_log"], "error_info": ""}, {"sample_id": 5356, "db_id": "tracking_software_problems", "score": 1, "gold_sql": "SELECT problem_log_id, log_entry_date FROM problem_log WHERE problem_id = 10", "pred_sql": "SELECT problem_log_id, log_entry_date FROM Problem_Log WHERE problem_id = '10'", "source_tables": ["problem_log"], "error_info": ""}, {"sample_id": 5357, "db_id": "tracking_software_problems", "score": 1, "gold_sql": "SELECT problem_log_id, log_entry_date FROM problem_log WHERE problem_id = 10", "pred_sql": "SELECT problem_log_id, log_entry_date FROM Problem_Log WHERE problem_id = '10'", "source_tables": ["problem_log"], "error_info": ""}, {"sample_id": 5358, "db_id": "tracking_software_problems", "score": 1, "gold_sql": "SELECT problem_log_id, log_entry_description FROM problem_log", "pred_sql": "SELECT problem_log_id, log_entry_description FROM Problem_Log", "source_tables": ["problem_log"], "error_info": ""}, {"sample_id": 5359, "db_id": "tracking_software_problems", "score": 1, "gold_sql": "SELECT problem_log_id, log_entry_description FROM problem_log", "pred_sql": "SELECT problem_log_id, log_entry_description FROM Problem_Log", "source_tables": ["problem_log"], "error_info": ""}, {"sample_id": 5360, "db_id": "tracking_software_problems", "score": 1, "gold_sql": "SELECT DISTINCT staff_first_name, staff_last_name FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T2.problem_id = 1", "pred_sql": "SELECT DISTINCT Staff.staff_first_name, Staff.staff_last_name FROM Staff JOIN Problem_Log ON Staff.staff_id = Problem_Log.assigned_to_staff_id WHERE Problem_Log.problem_id = '1'", "source_tables": ["problem_log", "staff"], "error_info": ""}, {"sample_id": 5361, "db_id": "tracking_software_problems", "score": 1, "gold_sql": "SELECT DISTINCT staff_first_name, staff_last_name FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T2.problem_id = 1", "pred_sql": "SELECT Staff.staff_first_name, Staff.staff_last_name FROM Problem_Log JOIN Staff ON Problem_Log.assigned_to_staff_id = Staff.staff_id WHERE Problem_Log.problem_id = '1'", "source_tables": ["problem_log", "staff"], "error_info": ""}, {"sample_id": 5362, "db_id": "tracking_software_problems", "score": 1, "gold_sql": "SELECT DISTINCT T2.problem_id, T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = 'Rylan' AND T1.staff_last_name = 'Homenick'", "pred_sql": "SELECT pl.problem_id, pl.problem_log_id FROM Problem_Log AS pl JOIN Staff AS s ON pl.assigned_to_staff_id = s.staff_id WHERE s.staff_first_name = 'Rylan' AND s.staff_last_name = 'Homenick'", "source_tables": ["problem_log", "staff"], "error_info": ""}, {"sample_id": 5363, "db_id": "tracking_software_problems", "score": 1, "gold_sql": "SELECT DISTINCT T2.problem_id, T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = 'Rylan' AND T1.staff_last_name = 'Homenick'", "pred_sql": "SELECT p.problem_id, pl.problem_log_id FROM Staff AS s JOIN Problem_Log AS pl ON s.staff_id = pl.assigned_to_staff_id JOIN Problems AS p ON pl.problem_id = p.problem_id WHERE s.staff_first_name = 'Rylan' AND s.staff_last_name = 'Homenick'", "source_tables": ["problem_log", "staff"], "error_info": ""}, {"sample_id": 5364, "db_id": "tracking_software_problems", "score": 1, "gold_sql": "SELECT COUNT(*) FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = 'voluptatem'", "pred_sql": "SELECT COUNT(*) AS problem_count FROM Problems WHERE product_id = (SELECT product_id FROM Product WHERE product_name = 'voluptatem')", "source_tables": ["product", "problems"], "error_info": ""}, {"sample_id": 5365, "db_id": "tracking_software_problems", "score": 1, "gold_sql": "SELECT COUNT(*) FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = 'voluptatem'", "pred_sql": "SELECT COUNT(*) AS problem_count FROM Problems JOIN Product ON Problems.product_id = Product.product_id WHERE Product.product_name = 'voluptatem'", "source_tables": ["product", "problems"], "error_info": ""}, {"sample_id": 5366, "db_id": "tracking_software_problems", "score": 1, "gold_sql": "SELECT COUNT(*), T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT COUNT(p.problem_id) AS number_of_problems, pr.product_name FROM Problems AS p JOIN Product AS pr ON p.product_id = pr.product_id GROUP BY p.product_id ORDER BY number_of_problems DESC LIMIT 1", "source_tables": ["product", "problems"], "error_info": ""}, {"sample_id": 5367, "db_id": "tracking_software_problems", "score": 1, "gold_sql": "SELECT COUNT(*), T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Product.product_name, COUNT(Problems.problem_id) AS number_of_problems FROM Problems JOIN Product ON Problems.product_id = Product.product_id GROUP BY Product.product_name ORDER BY number_of_problems DESC LIMIT 1", "source_tables": ["product", "problems"], "error_info": ""}, {"sample_id": 5368, "db_id": "tracking_software_problems", "score": 1, "gold_sql": "SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = 'Christop'", "pred_sql": "SELECT Problems.problem_description FROM Problems JOIN Staff ON Problems.reported_by_staff_id = Staff.staff_id WHERE Staff.staff_first_name = 'Christop'", "source_tables": ["staff", "problems"], "error_info": ""}, {"sample_id": 5369, "db_id": "tracking_software_problems", "score": 1, "gold_sql": "SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = 'Christop'", "pred_sql": "SELECT Problems.problem_description FROM Problems JOIN Staff ON Problems.reported_by_staff_id = Staff.staff_id WHERE Staff.staff_first_name = 'Christop'", "source_tables": ["staff", "problems"], "error_info": ""}, {"sample_id": 5370, "db_id": "tracking_software_problems", "score": 1, "gold_sql": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_last_name = 'Bosco'", "pred_sql": "SELECT problem_id FROM Problems WHERE reported_by_staff_id IN (SELECT staff_id FROM Staff WHERE staff_last_name = 'Bosco')", "source_tables": ["staff", "problems"], "error_info": ""}, {"sample_id": 5371, "db_id": "tracking_software_problems", "score": 1, "gold_sql": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_last_name = 'Bosco'", "pred_sql": "SELECT problem_id FROM Problems WHERE reported_by_staff_id IN (SELECT staff_id FROM Staff WHERE staff_last_name = 'Bosco')", "source_tables": ["staff", "problems"], "error_info": ""}, {"sample_id": 5372, "db_id": "tracking_software_problems", "score": 1, "gold_sql": "SELECT problem_id FROM problems WHERE date_problem_reported > '1978-06-26'", "pred_sql": "SELECT problem_id FROM Problems WHERE date_problem_reported > '1978-06-26'", "source_tables": ["problems"], "error_info": ""}, {"sample_id": 5373, "db_id": "tracking_software_problems", "score": 1, "gold_sql": "SELECT problem_id FROM problems WHERE date_problem_reported > '1978-06-26'", "pred_sql": "SELECT problem_id FROM Problems WHERE date_problem_reported > '1978-06-26'", "source_tables": ["problems"], "error_info": ""}, {"sample_id": 5374, "db_id": "tracking_software_problems", "score": 1, "gold_sql": "SELECT problem_id FROM problems WHERE date_problem_reported < '1978-06-26'", "pred_sql": "SELECT problem_id FROM Problems WHERE date_problem_reported < '1978-06-26'", "source_tables": ["problems"], "error_info": ""}, {"sample_id": 5375, "db_id": "tracking_software_problems", "score": 1, "gold_sql": "SELECT problem_id FROM problems WHERE date_problem_reported < '1978-06-26'", "pred_sql": "SELECT problem_id FROM Problems WHERE date_problem_reported < '1978-06-26'", "source_tables": ["problems"], "error_info": ""}, {"sample_id": 5376, "db_id": "tracking_software_problems", "score": 1, "gold_sql": "SELECT COUNT(*), T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id", "pred_sql": "SELECT p.product_id, COUNT(pr.problem_id) AS number_of_problems FROM Problems AS pr JOIN Product AS p ON pr.product_id = p.product_id GROUP BY p.product_id", "source_tables": ["product", "problems"], "error_info": ""}, {"sample_id": 5377, "db_id": "tracking_software_problems", "score": 1, "gold_sql": "SELECT COUNT(*), T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id", "pred_sql": "SELECT product_id, COUNT(problem_id) AS problem_count FROM Problems GROUP BY product_id HAVING COUNT(problem_id) > 0", "source_tables": ["product", "problems"], "error_info": ""}, {"sample_id": 5378, "db_id": "tracking_software_problems", "score": 1, "gold_sql": "SELECT COUNT(*), T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > '1986-11-13' GROUP BY T2.product_id", "pred_sql": "SELECT p.product_id, COUNT(pr.problem_id) AS number_of_problems FROM Problems AS pr JOIN Product AS p ON pr.product_id = p.product_id WHERE pr.date_problem_reported > '1986-11-13' GROUP BY p.product_id", "source_tables": ["product", "problems"], "error_info": ""}, {"sample_id": 5379, "db_id": "tracking_software_problems", "score": 1, "gold_sql": "SELECT COUNT(*), T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > '1986-11-13' GROUP BY T2.product_id", "pred_sql": "SELECT product_id, COUNT(problem_id) AS problem_count FROM Problems WHERE date_problem_reported > '1986-11-13' GROUP BY product_id", "source_tables": ["product", "problems"], "error_info": ""}, {"sample_id": 5380, "db_id": "tracking_software_problems", "score": 1, "gold_sql": "SELECT DISTINCT product_name FROM product ORDER BY product_name", "pred_sql": "SELECT DISTINCT product_name FROM Product ORDER BY product_name ASC", "source_tables": ["product"], "error_info": ""}, {"sample_id": 5381, "db_id": "tracking_software_problems", "score": 1, "gold_sql": "SELECT DISTINCT product_name FROM product ORDER BY product_name", "pred_sql": "SELECT DISTINCT product_name FROM Product ORDER BY product_name ASC", "source_tables": ["product"], "error_info": ""}, {"sample_id": 5382, "db_id": "tracking_software_problems", "score": 1, "gold_sql": "SELECT DISTINCT product_name FROM product ORDER BY product_id", "pred_sql": "SELECT DISTINCT product_name FROM Product ORDER BY product_id", "source_tables": ["product"], "error_info": ""}, {"sample_id": 5383, "db_id": "tracking_software_problems", "score": 1, "gold_sql": "SELECT DISTINCT product_name FROM product ORDER BY product_id", "pred_sql": "SELECT DISTINCT product_name FROM Product ORDER BY product_id", "source_tables": ["product"], "error_info": ""}, {"sample_id": 5384, "db_id": "tracking_software_problems", "score": 0, "gold_sql": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = 'Dameon' AND T2.staff_last_name = 'Frami' UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = 'Jolie' AND T2.staff_last_name = 'Weber'", "pred_sql": "SELECT Problems.problem_id FROM Problems JOIN Staff ON Problems.reported_by_staff_id = Staff.staff_id WHERE Staff.staff_first_name IN ('Dameon', 'Jolie') AND Staff.staff_last_name IN ('Frami', 'Weber')", "source_tables": ["staff", "problems"], "error_info": "Result not equal"}, {"sample_id": 5385, "db_id": "tracking_software_problems", "score": 0, "gold_sql": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = 'Dameon' AND T2.staff_last_name = 'Frami' UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = 'Jolie' AND T2.staff_last_name = 'Weber'", "pred_sql": "SELECT problem_id FROM Problems JOIN Staff ON Problems.reported_by_staff_id = Staff.staff_id WHERE Staff.staff_first_name IN ('Dameon', 'Jolie') AND Staff.staff_last_name IN ('Frami', 'Weber')", "source_tables": ["staff", "problems"], "error_info": "Result not equal"}, {"sample_id": 5386, "db_id": "tracking_software_problems", "score": 1, "gold_sql": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = 'Christop' AND T2.staff_last_name = 'Berge' INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = 'Ashley' AND T2.staff_last_name = 'Medhurst'", "pred_sql": "SELECT DISTINCT Problems.product_id FROM Problems JOIN Staff AS Reporter ON Problems.reported_by_staff_id = Reporter.staff_id JOIN Staff AS Authorizer ON Problems.closure_authorised_by_staff_id = Authorizer.staff_id WHERE Reporter.staff_first_name = 'Christop' AND Reporter.staff_last_name = 'Berge' AND Authorizer.staff_first_name = 'Ashley' AND Authorizer.staff_last_name = 'Medhurst'", "source_tables": ["staff", "problems"], "error_info": ""}, {"sample_id": 5387, "db_id": "tracking_software_problems", "score": 1, "gold_sql": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = 'Christop' AND T2.staff_last_name = 'Berge' INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = 'Ashley' AND T2.staff_last_name = 'Medhurst'", "pred_sql": "SELECT p.product_id FROM Problems AS p JOIN Staff AS s1 ON p.reported_by_staff_id = s1.staff_id JOIN Staff AS s2 ON p.closure_authorised_by_staff_id = s2.staff_id WHERE s1.staff_first_name = 'Christop' AND s1.staff_last_name = 'Berge' AND s2.staff_first_name = 'Ashley' AND s2.staff_last_name = 'Medhurst'", "source_tables": ["staff", "problems"], "error_info": ""}, {"sample_id": 5388, "db_id": "tracking_software_problems", "score": 1, "gold_sql": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported < (SELECT MIN(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = 'Lysanne' AND T4.staff_last_name = 'Turcotte')", "pred_sql": "SELECT problem_id FROM Problems WHERE date_problem_reported < (SELECT MIN(date_problem_reported) FROM Problems WHERE reported_by_staff_id = (SELECT staff_id FROM Staff WHERE staff_first_name = 'Lysanne' AND staff_last_name = 'Turcotte'))", "source_tables": ["staff", "problems"], "error_info": ""}, {"sample_id": 5389, "db_id": "tracking_software_problems", "score": 1, "gold_sql": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported < (SELECT MIN(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = 'Lysanne' AND T4.staff_last_name = 'Turcotte')", "pred_sql": "SELECT p.problem_id FROM Problems AS p WHERE p.date_problem_reported < (SELECT MIN(p2.date_problem_reported) FROM Problems AS p2 WHERE p2.reported_by_staff_id = (SELECT s.staff_id FROM Staff AS s WHERE s.staff_first_name = 'Lysanne' AND s.staff_last_name = 'Turcotte'))", "source_tables": ["staff", "problems"], "error_info": ""}, {"sample_id": 5390, "db_id": "tracking_software_problems", "score": 1, "gold_sql": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported > (SELECT MAX(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = 'Rylan' AND T4.staff_last_name = 'Homenick')", "pred_sql": "SELECT problem_id FROM Problems WHERE date_problem_reported > (SELECT MAX(date_problem_reported) FROM Problems WHERE reported_by_staff_id = (SELECT staff_id FROM Staff WHERE staff_first_name = 'Rylan' AND staff_last_name = 'Homenick'))", "source_tables": ["staff", "problems"], "error_info": ""}, {"sample_id": 5391, "db_id": "tracking_software_problems", "score": 1, "gold_sql": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported > (SELECT MAX(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = 'Rylan' AND T4.staff_last_name = 'Homenick')", "pred_sql": "SELECT p.problem_id FROM Problems AS p WHERE p.date_problem_reported > (SELECT MIN(p2.date_problem_reported) FROM Problems AS p2 WHERE p2.reported_by_staff_id = (SELECT s.staff_id FROM Staff AS s WHERE s.staff_first_name = 'Rylan' AND s.staff_last_name = 'Homenick'))", "source_tables": ["staff", "problems"], "error_info": ""}, {"sample_id": 5392, "db_id": "tracking_software_problems", "score": 0, "gold_sql": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY COUNT(*) DESC LIMIT 3", "pred_sql": "SELECT Product.product_id, Product.product_name, COUNT(Problems.problem_id) AS problem_count FROM Product JOIN Problems ON Product.product_id = Problems.product_id GROUP BY Product.product_id, Product.product_name ORDER BY problem_count DESC LIMIT 3", "source_tables": ["product", "problems"], "error_info": "Result not equal"}, {"sample_id": 5393, "db_id": "tracking_software_problems", "score": 0, "gold_sql": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY COUNT(*) DESC LIMIT 3", "pred_sql": "SELECT Product.product_name, COUNT(Problems.problem_id) AS problem_count FROM Product JOIN Problems ON Product.product_id = Problems.product_id GROUP BY Product.product_id ORDER BY problem_count DESC LIMIT 3", "source_tables": ["product", "problems"], "error_info": "Result not equal"}, {"sample_id": 5394, "db_id": "tracking_software_problems", "score": 1, "gold_sql": "SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = 'voluptatem' AND T1.date_problem_reported > '1995'", "pred_sql": "SELECT p.problem_id FROM Problems AS p JOIN Product AS pr ON p.product_id = pr.product_id WHERE pr.product_name = 'voluptatem' AND p.date_problem_reported > '1995-01-01'", "source_tables": ["product", "problems"], "error_info": ""}, {"sample_id": 5395, "db_id": "tracking_software_problems", "score": 1, "gold_sql": "SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = 'voluptatem' AND T1.date_problem_reported > '1995'", "pred_sql": "SELECT problem_id FROM Problems WHERE product_id IN (SELECT product_id FROM Product WHERE product_name = 'voluptatem') AND date_problem_reported > '1995-01-01'", "source_tables": ["product", "problems"], "error_info": ""}, {"sample_id": 5396, "db_id": "tracking_software_problems", "score": 1, "gold_sql": "SELECT T3.staff_first_name, T3.staff_last_name FROM problems AS T1, product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = 'rem' EXCEPT SELECT T3.staff_first_name, T3.staff_last_name FROM problems AS T1, product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = 'aut'", "pred_sql": "SELECT DISTINCT Staff.staff_first_name, Staff.staff_last_name FROM Problems JOIN Staff ON Problems.reported_by_staff_id = Staff.staff_id JOIN Product ON Problems.product_id = Product.product_id WHERE Product.product_name = 'rem' AND NOT Problems.problem_id IN (SELECT Problems.problem_id FROM Problems JOIN Product ON Problems.product_id = Product.product_id WHERE Product.product_name = 'aut')", "source_tables": ["staff", "product", "problems"], "error_info": ""}, {"sample_id": 5397, "db_id": "tracking_software_problems", "score": 1, "gold_sql": "SELECT T3.staff_first_name, T3.staff_last_name FROM problems AS T1, product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = 'rem' EXCEPT SELECT T3.staff_first_name, T3.staff_last_name FROM problems AS T1, product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = 'aut'", "pred_sql": "SELECT DISTINCT Staff.staff_first_name, Staff.staff_last_name FROM Staff JOIN Problems ON Staff.staff_id = Problems.reported_by_staff_id JOIN Product ON Problems.product_id = Product.product_id WHERE Product.product_name = 'rem' AND NOT Problems.problem_id IN (SELECT Problems.problem_id FROM Problems JOIN Product ON Problems.product_id = Product.product_id WHERE Product.product_name = 'aut')", "source_tables": ["staff", "product", "problems"], "error_info": ""}, {"sample_id": 5398, "db_id": "tracking_software_problems", "score": 0, "gold_sql": "SELECT T2.product_name FROM problems AS T1, product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = 'Lacey' AND T3.staff_last_name = 'Bosco' INTERSECT SELECT T2.product_name FROM problems AS T1, product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = 'Kenton' AND T3.staff_last_name = 'Champlin'", "pred_sql": "SELECT DISTINCT p.product_id, pr.product_name FROM Problems AS p JOIN Staff AS s1 ON p.reported_by_staff_id = s1.staff_id JOIN Staff AS s2 ON p.reported_by_staff_id = s2.staff_id JOIN Product AS pr ON p.product_id = pr.product_id WHERE s1.staff_first_name = 'Lacey' AND s1.staff_last_name = 'Bosco' AND s2.staff_first_name = 'Kenton' AND s2.staff_last_name = 'Champlin'", "source_tables": ["staff", "product", "problems"], "error_info": "Result not equal"}, {"sample_id": 5399, "db_id": "tracking_software_problems", "score": 0, "gold_sql": "SELECT T2.product_name FROM problems AS T1, product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = 'Lacey' AND T3.staff_last_name = 'Bosco' INTERSECT SELECT T2.product_name FROM problems AS T1, product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = 'Kenton' AND T3.staff_last_name = 'Champlin'", "pred_sql": "SELECT DISTINCT p.product_id, pr.product_name FROM Problems AS p JOIN Staff AS s1 ON p.reported_by_staff_id = s1.staff_id JOIN Staff AS s2 ON p.reported_by_staff_id = s2.staff_id JOIN Product AS pr ON p.product_id = pr.product_id WHERE s1.staff_first_name = 'Lacey' AND s1.staff_last_name = 'Bosco' AND s2.staff_first_name = 'Kenton' AND s2.staff_last_name = 'Champlin'", "source_tables": ["staff", "product", "problems"], "error_info": "Result not equal"}, {"sample_id": 5400, "db_id": "shop_membership", "score": 1, "gold_sql": "SELECT COUNT(*) FROM branch WHERE membership_amount > (SELECT AVG(membership_amount) FROM branch)", "pred_sql": "SELECT COUNT(*) AS Branch_Count FROM branch WHERE membership_amount > (SELECT AVG(membership_amount) FROM branch)", "source_tables": ["branch"], "error_info": ""}, {"sample_id": 5401, "db_id": "shop_membership", "score": 1, "gold_sql": "SELECT COUNT(*) FROM branch WHERE membership_amount > (SELECT AVG(membership_amount) FROM branch)", "pred_sql": "SELECT COUNT(*) FROM branch WHERE membership_amount > (SELECT AVG(membership_amount) FROM branch)", "source_tables": ["branch"], "error_info": ""}, {"sample_id": 5402, "db_id": "shop_membership", "score": 1, "gold_sql": "SELECT name, address_road, city FROM branch ORDER BY open_year", "pred_sql": "SELECT Name, Address_road, City FROM branch ORDER BY Open_year", "source_tables": ["branch"], "error_info": ""}, {"sample_id": 5403, "db_id": "shop_membership", "score": 1, "gold_sql": "SELECT name, address_road, city FROM branch ORDER BY open_year", "pred_sql": "SELECT Name, Address_road, City FROM branch ORDER BY Open_year", "source_tables": ["branch"], "error_info": ""}, {"sample_id": 5404, "db_id": "shop_membership", "score": 1, "gold_sql": "SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3", "pred_sql": "SELECT Name FROM branch ORDER BY membership_amount DESC LIMIT 3", "source_tables": ["branch"], "error_info": ""}, {"sample_id": 5405, "db_id": "shop_membership", "score": 1, "gold_sql": "SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3", "pred_sql": "SELECT Name FROM branch ORDER BY membership_amount DESC LIMIT 3", "source_tables": ["branch"], "error_info": ""}, {"sample_id": 5406, "db_id": "shop_membership", "score": 1, "gold_sql": "SELECT DISTINCT city FROM branch WHERE membership_amount >= 100", "pred_sql": "SELECT DISTINCT branch.City FROM branch WHERE branch.membership_amount >= 100", "source_tables": ["branch"], "error_info": ""}, {"sample_id": 5407, "db_id": "shop_membership", "score": 1, "gold_sql": "SELECT DISTINCT city FROM branch WHERE membership_amount >= 100", "pred_sql": "SELECT DISTINCT City FROM branch WHERE membership_amount > 100", "source_tables": ["branch"], "error_info": ""}, {"sample_id": 5408, "db_id": "shop_membership", "score": 1, "gold_sql": "SELECT open_year FROM branch GROUP BY open_year HAVING COUNT(*) >= 2", "pred_sql": "SELECT Open_year FROM branch GROUP BY Open_year HAVING COUNT(Branch_ID) >= 2", "source_tables": ["branch"], "error_info": ""}, {"sample_id": 5409, "db_id": "shop_membership", "score": 1, "gold_sql": "SELECT open_year FROM branch GROUP BY open_year HAVING COUNT(*) >= 2", "pred_sql": "SELECT Open_year FROM branch GROUP BY Open_year HAVING COUNT(Branch_ID) >= 2", "source_tables": ["branch"], "error_info": ""}, {"sample_id": 5410, "db_id": "shop_membership", "score": 1, "gold_sql": "SELECT MIN(membership_amount), MAX(membership_amount) FROM branch WHERE open_year = 2011 OR city = 'London'", "pred_sql": "SELECT MIN(membership_amount) AS Min_Memberships, MAX(membership_amount) AS Max_Memberships FROM branch WHERE Open_year = 2011 OR City = 'London'", "source_tables": ["branch"], "error_info": ""}, {"sample_id": 5411, "db_id": "shop_membership", "score": 1, "gold_sql": "SELECT MIN(membership_amount), MAX(membership_amount) FROM branch WHERE open_year = 2011 OR city = 'London'", "pred_sql": "SELECT MIN(membership_amount) AS Min_Membership_Amount, MAX(membership_amount) AS Max_Membership_Amount FROM branch WHERE Open_year = 2011 OR City = 'London'", "source_tables": ["branch"], "error_info": ""}, {"sample_id": 5412, "db_id": "shop_membership", "score": 1, "gold_sql": "SELECT city, COUNT(*) FROM branch WHERE open_year < 2010 GROUP BY city", "pred_sql": "SELECT City, COUNT(*) AS Number_of_Branches FROM branch WHERE Open_year < 2010 GROUP BY City", "source_tables": ["branch"], "error_info": ""}, {"sample_id": 5413, "db_id": "shop_membership", "score": 1, "gold_sql": "SELECT city, COUNT(*) FROM branch WHERE open_year < 2010 GROUP BY city", "pred_sql": "SELECT City, COUNT(*) AS Branch_Count FROM branch WHERE Open_year < 2010 GROUP BY City", "source_tables": ["branch"], "error_info": ""}, {"sample_id": 5414, "db_id": "shop_membership", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT LEVEL) FROM member", "pred_sql": "SELECT COUNT(DISTINCT Level) AS Different_Levels FROM member", "source_tables": ["member"], "error_info": ""}, {"sample_id": 5415, "db_id": "shop_membership", "score": 0, "gold_sql": "SELECT COUNT(DISTINCT LEVEL) FROM member", "pred_sql": "SELECT DISTINCT Level FROM member", "source_tables": ["member"], "error_info": "Result not equal"}, {"sample_id": 5416, "db_id": "shop_membership", "score": 1, "gold_sql": "SELECT card_number, name, hometown FROM member ORDER BY LEVEL DESC", "pred_sql": "SELECT Card_Number, Name, Hometown FROM member ORDER BY Level DESC", "source_tables": ["member"], "error_info": ""}, {"sample_id": 5417, "db_id": "shop_membership", "score": 1, "gold_sql": "SELECT card_number, name, hometown FROM member ORDER BY LEVEL DESC", "pred_sql": "SELECT Card_Number, Name, Hometown FROM member ORDER BY Level DESC", "source_tables": ["member"], "error_info": ""}, {"sample_id": 5418, "db_id": "shop_membership", "score": 0, "gold_sql": "SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Level, COUNT(*) AS Member_Count FROM member GROUP BY Level ORDER BY Member_Count DESC LIMIT 1", "source_tables": ["member"], "error_info": "Result not equal"}, {"sample_id": 5419, "db_id": "shop_membership", "score": 0, "gold_sql": "SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Level, COUNT(*) AS MemberCount FROM member GROUP BY Level ORDER BY MemberCount DESC LIMIT 1", "source_tables": ["member"], "error_info": "Result not equal"}, {"sample_id": 5420, "db_id": "shop_membership", "score": 1, "gold_sql": "SELECT T3.name, T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id JOIN member AS T3 ON T1.member_id = T3.member_id ORDER BY T1.register_year", "pred_sql": "SELECT member.Name, branch.Name FROM member JOIN membership_register_branch ON member.Member_ID = membership_register_branch.Member_ID JOIN branch ON membership_register_branch.Branch_ID = branch.Branch_ID ORDER BY membership_register_branch.Register_Year", "source_tables": ["branch", "member", "membership_register_branch"], "error_info": ""}, {"sample_id": 5421, "db_id": "shop_membership", "score": 1, "gold_sql": "SELECT T3.name, T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id JOIN member AS T3 ON T1.member_id = T3.member_id ORDER BY T1.register_year", "pred_sql": "SELECT member.Name, branch.Name FROM member JOIN membership_register_branch ON member.Member_ID = membership_register_branch.Member_ID JOIN branch ON membership_register_branch.Branch_ID = branch.Branch_ID ORDER BY membership_register_branch.Register_Year", "source_tables": ["branch", "member", "membership_register_branch"], "error_info": ""}, {"sample_id": 5422, "db_id": "shop_membership", "score": 1, "gold_sql": "SELECT T2.name, COUNT(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T1.register_year > 2015 GROUP BY T2.branch_id", "pred_sql": "SELECT b.Name, COUNT(m.Member_ID) AS Number_of_Members FROM branch AS b LEFT JOIN membership_register_branch AS mrb ON b.Branch_ID = mrb.Branch_ID LEFT JOIN member AS m ON m.Member_ID = mrb.Member_ID WHERE mrb.Register_Year > '2015' GROUP BY b.Name", "source_tables": ["branch", "membership_register_branch"], "error_info": ""}, {"sample_id": 5423, "db_id": "shop_membership", "score": 0, "gold_sql": "SELECT T2.name, COUNT(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T1.register_year > 2015 GROUP BY T2.branch_id", "pred_sql": "SELECT b.Branch_ID, b.Name FROM branch AS b JOIN membership_register_branch AS mrb ON b.Branch_ID = mrb.Branch_ID WHERE mrb.Register_Year > '2015'", "source_tables": ["branch", "membership_register_branch"], "error_info": "Result not equal"}, {"sample_id": 5424, "db_id": "shop_membership", "score": 1, "gold_sql": "SELECT name FROM member WHERE NOT member_id IN (SELECT member_id FROM membership_register_branch)", "pred_sql": "SELECT Name FROM member WHERE NOT Member_ID IN (SELECT Member_ID FROM membership_register_branch)", "source_tables": ["member", "membership_register_branch"], "error_info": ""}, {"sample_id": 5425, "db_id": "shop_membership", "score": 1, "gold_sql": "SELECT name FROM member WHERE NOT member_id IN (SELECT member_id FROM membership_register_branch)", "pred_sql": "SELECT Name FROM member WHERE NOT Member_ID IN (SELECT Member_ID FROM membership_register_branch)", "source_tables": ["member", "membership_register_branch"], "error_info": ""}, {"sample_id": 5426, "db_id": "shop_membership", "score": 1, "gold_sql": "SELECT name, city FROM branch WHERE NOT branch_id IN (SELECT branch_id FROM membership_register_branch)", "pred_sql": "SELECT branch.Name, branch.City FROM branch LEFT JOIN membership_register_branch ON branch.Branch_ID = membership_register_branch.Branch_ID WHERE membership_register_branch.Member_ID IS NULL", "source_tables": ["branch", "membership_register_branch"], "error_info": ""}, {"sample_id": 5427, "db_id": "shop_membership", "score": 1, "gold_sql": "SELECT name, city FROM branch WHERE NOT branch_id IN (SELECT branch_id FROM membership_register_branch)", "pred_sql": "SELECT branch.Name, branch.City FROM branch LEFT JOIN membership_register_branch ON branch.Branch_ID = membership_register_branch.Branch_ID WHERE membership_register_branch.Member_ID IS NULL", "source_tables": ["branch", "membership_register_branch"], "error_info": ""}, {"sample_id": 5428, "db_id": "shop_membership", "score": 1, "gold_sql": "SELECT T2.name, T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T1.register_year = 2016 GROUP BY T2.branch_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT b.Name, b.Open_year FROM branch AS b JOIN membership_register_branch AS mrb ON b.Branch_ID = mrb.Branch_ID WHERE mrb.Register_Year = '2016' GROUP BY b.Branch_ID ORDER BY COUNT(mrb.Member_ID) DESC LIMIT 1", "source_tables": ["branch", "membership_register_branch"], "error_info": ""}, {"sample_id": 5429, "db_id": "shop_membership", "score": 1, "gold_sql": "SELECT T2.name, T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T1.register_year = 2016 GROUP BY T2.branch_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT b.Name, b.Open_year FROM branch AS b JOIN membership_register_branch AS mrb ON b.Branch_ID = mrb.Branch_ID WHERE mrb.Register_Year = '2016' GROUP BY b.Branch_ID ORDER BY COUNT(mrb.Member_ID) DESC LIMIT 1", "source_tables": ["branch", "membership_register_branch"], "error_info": ""}, {"sample_id": 5430, "db_id": "shop_membership", "score": 1, "gold_sql": "SELECT T2.name, T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id = T2.member_id WHERE T1.register_year = 2016", "pred_sql": "SELECT m.Name, m.Hometown FROM member AS m JOIN membership_register_branch AS mr ON m.Member_ID = mr.Member_ID WHERE mr.Register_Year = '2016'", "source_tables": ["member", "membership_register_branch"], "error_info": ""}, {"sample_id": 5431, "db_id": "shop_membership", "score": 1, "gold_sql": "SELECT T2.name, T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id = T2.member_id WHERE T1.register_year = 2016", "pred_sql": "SELECT m.Name, m.Hometown FROM member AS m JOIN membership_register_branch AS mr ON m.Member_ID = mr.Member_ID WHERE mr.Register_Year = '2016'", "source_tables": ["member", "membership_register_branch"], "error_info": ""}, {"sample_id": 5432, "db_id": "shop_membership", "score": 1, "gold_sql": "SELECT city FROM branch WHERE open_year = 2001 AND membership_amount > 100", "pred_sql": "SELECT DISTINCT b.City FROM branch AS b WHERE b.Open_year = 2001 AND b.membership_amount > 100", "source_tables": ["branch"], "error_info": ""}, {"sample_id": 5433, "db_id": "shop_membership", "score": 1, "gold_sql": "SELECT city FROM branch WHERE open_year = 2001 AND membership_amount > 100", "pred_sql": "SELECT DISTINCT b.City FROM branch AS b WHERE b.Open_year = 2001 AND b.membership_amount > 100", "source_tables": ["branch"], "error_info": ""}, {"sample_id": 5434, "db_id": "shop_membership", "score": 1, "gold_sql": "SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount > 100", "pred_sql": "SELECT DISTINCT City FROM branch WHERE membership_amount <= 100", "source_tables": ["branch"], "error_info": ""}, {"sample_id": 5435, "db_id": "shop_membership", "score": 1, "gold_sql": "SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount > 100", "pred_sql": "SELECT DISTINCT b.City FROM branch AS b WHERE NOT b.Branch_ID IN (SELECT Branch_ID FROM branch WHERE membership_amount > 100)", "source_tables": ["branch"], "error_info": ""}, {"sample_id": 5436, "db_id": "shop_membership", "score": 1, "gold_sql": "SELECT SUM(total_pounds) FROM purchase AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T2.city = 'London' AND T1.year = 2018", "pred_sql": "SELECT SUM(p.Total_pounds) AS total_pounds FROM purchase AS p JOIN branch AS b ON p.Branch_ID = b.Branch_ID WHERE p.Year = '2018' AND b.City = 'London'", "source_tables": ["branch", "purchase"], "error_info": ""}, {"sample_id": 5437, "db_id": "shop_membership", "score": 1, "gold_sql": "SELECT SUM(total_pounds) FROM purchase AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T2.city = 'London' AND T1.year = 2018", "pred_sql": "SELECT SUM(Total_pounds) AS Total_Pounds_Purchased FROM purchase AS p JOIN branch AS b ON p.Branch_ID = b.Branch_ID WHERE b.City = 'London' AND p.Year = '2018'", "source_tables": ["branch", "purchase"], "error_info": ""}, {"sample_id": 5438, "db_id": "shop_membership", "score": 1, "gold_sql": "SELECT COUNT(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id = T2.member_id WHERE T2.level = 6", "pred_sql": "SELECT COUNT(*) AS total_purchases FROM purchase WHERE Member_ID IN (SELECT Member_ID FROM member WHERE Level = '6')", "source_tables": ["member", "purchase"], "error_info": ""}, {"sample_id": 5439, "db_id": "shop_membership", "score": 0, "gold_sql": "SELECT COUNT(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id = T2.member_id WHERE T2.level = 6", "pred_sql": "SELECT SUM(p.Total_pounds) AS Total_Purchases FROM member AS m JOIN purchase AS p ON m.Member_ID = p.Member_ID WHERE m.Level = '6'", "source_tables": ["member", "purchase"], "error_info": "Result not equal"}, {"sample_id": 5440, "db_id": "shop_membership", "score": 1, "gold_sql": "SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id JOIN member AS T3 ON T1.member_id = T3.member_id WHERE T3.Hometown = 'Louisville ,  Kentucky' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id JOIN member AS T3 ON T1.member_id = T3.member_id WHERE T3.Hometown = 'Hiram ,  Georgia'", "pred_sql": "SELECT DISTINCT b.Name FROM branch AS b JOIN membership_register_branch AS mrb ON b.Branch_ID = mrb.Branch_ID JOIN member AS m ON m.Member_ID = mrb.Member_ID WHERE m.Hometown IN ('Louisville, Kentucky', 'Hiram, Georgia') GROUP BY b.Branch_ID HAVING COUNT(DISTINCT CASE WHEN m.Hometown = 'Louisville, Kentucky' THEN m.Member_ID END) > 0 AND COUNT(DISTINCT CASE WHEN m.Hometown = 'Hiram, Georgia' THEN m.Member_ID END) > 0", "source_tables": ["branch", "member", "membership_register_branch"], "error_info": ""}, {"sample_id": 5441, "db_id": "shop_membership", "score": 0, "gold_sql": "SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id JOIN member AS T3 ON T1.member_id = T3.member_id WHERE T3.Hometown = 'Louisville ,  Kentucky' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id JOIN member AS T3 ON T1.member_id = T3.member_id WHERE T3.Hometown = 'Hiram ,  Georgia'", "pred_sql": "SELECT DISTINCT branch.Name FROM branch JOIN membership_register_branch ON branch.Branch_ID = membership_register_branch.Branch_ID JOIN member ON membership_register_branch.Member_ID = member.Member_ID WHERE member.Hometown IN ('Louisville, Kentucky', 'Hiram, Georgia')", "source_tables": ["branch", "member", "membership_register_branch"], "error_info": "Result not equal"}, {"sample_id": 5442, "db_id": "shop_membership", "score": 1, "gold_sql": "SELECT card_number FROM member WHERE Hometown LIKE '%Kentucky%'", "pred_sql": "SELECT Card_Number FROM member WHERE Hometown LIKE '%Kentucky%'", "source_tables": ["member"], "error_info": ""}, {"sample_id": 5443, "db_id": "shop_membership", "score": 0, "gold_sql": "SELECT card_number FROM member WHERE Hometown LIKE '%Kentucky%'", "pred_sql": "SELECT Card_Number FROM member WHERE Hometown = 'Kentucky'", "source_tables": ["member"], "error_info": "Result not equal"}, {"sample_id": 5444, "db_id": "voter_2", "score": 1, "gold_sql": "SELECT COUNT(*) FROM STUDENT", "pred_sql": "SELECT COUNT(*) AS total_students FROM Student", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5445, "db_id": "voter_2", "score": 1, "gold_sql": "SELECT COUNT(*) FROM STUDENT", "pred_sql": "SELECT COUNT(*) AS total_students FROM Student", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5446, "db_id": "voter_2", "score": 1, "gold_sql": "SELECT COUNT(*) FROM VOTING_RECORD", "pred_sql": "SELECT COUNT(*) AS total_voting_records FROM Voting_record", "source_tables": ["voting_record"], "error_info": ""}, {"sample_id": 5447, "db_id": "voter_2", "score": 1, "gold_sql": "SELECT COUNT(*) FROM VOTING_RECORD", "pred_sql": "SELECT COUNT(*) FROM Voting_record", "source_tables": ["voting_record"], "error_info": ""}, {"sample_id": 5448, "db_id": "voter_2", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT President_Vote) FROM VOTING_RECORD", "pred_sql": "SELECT COUNT(DISTINCT President_Vote) AS distinct_president_votes FROM Voting_record", "source_tables": ["voting_record"], "error_info": ""}, {"sample_id": 5449, "db_id": "voter_2", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT President_Vote) FROM VOTING_RECORD", "pred_sql": "SELECT COUNT(DISTINCT President_Vote) AS distinct_president_votes FROM Voting_record", "source_tables": ["voting_record"], "error_info": ""}, {"sample_id": 5450, "db_id": "voter_2", "score": 1, "gold_sql": "SELECT MAX(Age) FROM STUDENT", "pred_sql": "SELECT MAX(Age) AS Max_Age FROM Student", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5451, "db_id": "voter_2", "score": 1, "gold_sql": "SELECT MAX(Age) FROM STUDENT", "pred_sql": "SELECT MAX(Age) AS Oldest_Age FROM Student", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5452, "db_id": "voter_2", "score": 1, "gold_sql": "SELECT LName FROM STUDENT WHERE Major = 50", "pred_sql": "SELECT LName FROM Student WHERE Major = '50'", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5453, "db_id": "voter_2", "score": 1, "gold_sql": "SELECT LName FROM STUDENT WHERE Major = 50", "pred_sql": "SELECT LName FROM Student WHERE Major = '50'", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5454, "db_id": "voter_2", "score": 1, "gold_sql": "SELECT Fname FROM STUDENT WHERE Age > 22", "pred_sql": "SELECT Fname FROM Student WHERE Age > '22'", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5455, "db_id": "voter_2", "score": 1, "gold_sql": "SELECT Fname FROM STUDENT WHERE Age > 22", "pred_sql": "SELECT Fname FROM Student WHERE Age > '22'", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5456, "db_id": "voter_2", "score": 1, "gold_sql": "SELECT Major FROM STUDENT WHERE Sex = 'M'", "pred_sql": "SELECT Major FROM Student WHERE Sex = 'M'", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5457, "db_id": "voter_2", "score": 0, "gold_sql": "SELECT Major FROM STUDENT WHERE Sex = 'M'", "pred_sql": "SELECT Major FROM Student WHERE Sex = 'male'", "source_tables": ["student"], "error_info": "Result not equal"}, {"sample_id": 5458, "db_id": "voter_2", "score": 1, "gold_sql": "SELECT AVG(Age) FROM STUDENT WHERE Sex = 'F'", "pred_sql": "SELECT AVG(Age) AS Average_Age FROM Student WHERE Sex = 'F'", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5459, "db_id": "voter_2", "score": 0, "gold_sql": "SELECT AVG(Age) FROM STUDENT WHERE Sex = 'F'", "pred_sql": "SELECT AVG(Age) AS Average_Age FROM Student WHERE Sex = 'Female'", "source_tables": ["student"], "error_info": "Result not equal"}, {"sample_id": 5460, "db_id": "voter_2", "score": 1, "gold_sql": "SELECT MAX(Age), MIN(Age) FROM STUDENT WHERE Major = 600", "pred_sql": "SELECT MAX(Age) AS Max_Age, MIN(Age) AS Min_Age FROM Student WHERE Major = '600'", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5461, "db_id": "voter_2", "score": 1, "gold_sql": "SELECT MAX(Age), MIN(Age) FROM STUDENT WHERE Major = 600", "pred_sql": "SELECT MIN(Age) AS Youngest_Age, MAX(Age) AS Oldest_Age FROM Student WHERE Major = '600'", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5462, "db_id": "voter_2", "score": 1, "gold_sql": "SELECT Advisor FROM STUDENT WHERE city_code = 'BAL'", "pred_sql": "SELECT DISTINCT Advisor FROM Student WHERE city_code = 'BAL'", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5463, "db_id": "voter_2", "score": 1, "gold_sql": "SELECT Advisor FROM STUDENT WHERE city_code = 'BAL'", "pred_sql": "SELECT DISTINCT Advisor FROM Student WHERE city_code = 'BAL'", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5464, "db_id": "voter_2", "score": 0, "gold_sql": "SELECT DISTINCT Secretary_Vote FROM VOTING_RECORD WHERE ELECTION_CYCLE = 'Fall'", "pred_sql": "SELECT DISTINCT Secretary_Vote FROM Voting_record WHERE Election_Cycle = 'fall'", "source_tables": ["voting_record"], "error_info": "Result not equal"}, {"sample_id": 5465, "db_id": "voter_2", "score": 0, "gold_sql": "SELECT DISTINCT Secretary_Vote FROM VOTING_RECORD WHERE ELECTION_CYCLE = 'Fall'", "pred_sql": "SELECT DISTINCT Secretary_Vote FROM Voting_record WHERE Election_Cycle = 'fall'", "source_tables": ["voting_record"], "error_info": "Result not equal"}, {"sample_id": 5466, "db_id": "voter_2", "score": 0, "gold_sql": "SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date = '08/30/2015'", "pred_sql": "SELECT DISTINCT President_Vote FROM Voting_record WHERE Registration_Date = '2015-08-30'", "source_tables": ["voting_record"], "error_info": "Result not equal"}, {"sample_id": 5467, "db_id": "voter_2", "score": 0, "gold_sql": "SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date = '08/30/2015'", "pred_sql": "SELECT DISTINCT President_Vote FROM Voting_record WHERE Registration_Date = '2015-08-30'", "source_tables": ["voting_record"], "error_info": "Result not equal"}, {"sample_id": 5468, "db_id": "voter_2", "score": 1, "gold_sql": "SELECT DISTINCT Registration_Date, Election_Cycle FROM VOTING_RECORD", "pred_sql": "SELECT DISTINCT Registration_Date, Election_Cycle FROM Voting_record", "source_tables": ["voting_record"], "error_info": ""}, {"sample_id": 5469, "db_id": "voter_2", "score": 1, "gold_sql": "SELECT DISTINCT Registration_Date, Election_Cycle FROM VOTING_RECORD", "pred_sql": "SELECT DISTINCT Registration_Date, Election_Cycle FROM Voting_record", "source_tables": ["voting_record"], "error_info": ""}, {"sample_id": 5470, "db_id": "voter_2", "score": 1, "gold_sql": "SELECT DISTINCT President_Vote, VICE_President_Vote FROM VOTING_RECORD", "pred_sql": "SELECT DISTINCT President_Vote, Vice_President_Vote FROM Voting_record", "source_tables": ["voting_record"], "error_info": ""}, {"sample_id": 5471, "db_id": "voter_2", "score": 1, "gold_sql": "SELECT DISTINCT President_Vote, VICE_President_Vote FROM VOTING_RECORD", "pred_sql": "SELECT DISTINCT President_Vote, Vice_President_Vote FROM Voting_record", "source_tables": ["voting_record"], "error_info": ""}, {"sample_id": 5472, "db_id": "voter_2", "score": 1, "gold_sql": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.CLASS_President_VOTE", "pred_sql": "SELECT DISTINCT S.LName FROM Student AS S JOIN Voting_record AS V ON S.StuID = V.Class_President_Vote WHERE NOT V.Class_President_Vote IS NULL", "source_tables": ["student", "voting_record"], "error_info": ""}, {"sample_id": 5473, "db_id": "voter_2", "score": 1, "gold_sql": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.CLASS_President_VOTE", "pred_sql": "SELECT DISTINCT S.LName FROM Student AS S JOIN Voting_record AS V ON S.StuID = V.Class_President_Vote", "source_tables": ["student", "voting_record"], "error_info": ""}, {"sample_id": 5474, "db_id": "voter_2", "score": 1, "gold_sql": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.CLASS_Senator_VOTE", "pred_sql": "SELECT DISTINCT Fname FROM Student INNER JOIN Voting_record ON Student.StuID = Voting_record.Class_Senator_Vote", "source_tables": ["student", "voting_record"], "error_info": ""}, {"sample_id": 5475, "db_id": "voter_2", "score": 0, "gold_sql": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.CLASS_Senator_VOTE", "pred_sql": "SELECT DISTINCT Fname FROM Student INNER JOIN Voting_record ON Student.StuID = Voting_record.Class_President_Vote", "source_tables": ["student", "voting_record"], "error_info": "Result not equal"}, {"sample_id": 5476, "db_id": "voter_2", "score": 0, "gold_sql": "SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Secretary_Vote WHERE T2.Election_Cycle = 'Fall'", "pred_sql": "SELECT DISTINCT S.Age FROM Student AS S JOIN Voting_record AS V ON S.StuID = V.StuID WHERE NOT V.Secretary_Vote IS NULL AND V.Election_Cycle = 'fall'", "source_tables": ["student", "voting_record"], "error_info": "Result not equal"}, {"sample_id": 5477, "db_id": "voter_2", "score": 0, "gold_sql": "SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Secretary_Vote WHERE T2.Election_Cycle = 'Fall'", "pred_sql": "SELECT DISTINCT s.Age FROM Student AS s JOIN Voting_record AS v ON s.StuID = v.StuID WHERE NOT v.Secretary_Vote IS NULL AND v.Election_Cycle = 'fall'", "source_tables": ["student", "voting_record"], "error_info": "Result not equal"}, {"sample_id": 5478, "db_id": "voter_2", "score": 0, "gold_sql": "SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Treasurer_Vote WHERE T2.Election_Cycle = 'Spring'", "pred_sql": "SELECT DISTINCT S.Advisor FROM Student AS S JOIN Voting_record AS V ON S.StuID = V.StuID WHERE NOT V.Treasurer_Vote IS NULL AND V.Election_Cycle = 'spring'", "source_tables": ["student", "voting_record"], "error_info": "Result not equal"}, {"sample_id": 5479, "db_id": "voter_2", "score": 0, "gold_sql": "SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Treasurer_Vote WHERE T2.Election_Cycle = 'Spring'", "pred_sql": "SELECT DISTINCT S.Advisor FROM Student AS S JOIN Voting_record AS V ON S.StuID = V.StuID WHERE NOT V.Treasurer_Vote IS NULL AND V.Election_Cycle = 'spring'", "source_tables": ["student", "voting_record"], "error_info": "Result not equal"}, {"sample_id": 5480, "db_id": "voter_2", "score": 1, "gold_sql": "SELECT DISTINCT T1.Major FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Treasurer_Vote", "pred_sql": "SELECT DISTINCT Major FROM Student INNER JOIN Voting_record ON Student.StuID = Voting_record.Treasurer_Vote WHERE NOT Voting_record.Treasurer_Vote IS NULL", "source_tables": ["student", "voting_record"], "error_info": ""}, {"sample_id": 5481, "db_id": "voter_2", "score": 1, "gold_sql": "SELECT DISTINCT T1.Major FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Treasurer_Vote", "pred_sql": "SELECT DISTINCT Major FROM Student INNER JOIN Voting_record ON Student.StuID = Voting_record.Treasurer_Vote WHERE NOT Voting_record.Treasurer_Vote IS NULL", "source_tables": ["student", "voting_record"], "error_info": ""}, {"sample_id": 5482, "db_id": "voter_2", "score": 0, "gold_sql": "SELECT DISTINCT T1.Fname, T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.President_VOTE WHERE T1.sex = 'F'", "pred_sql": "SELECT Fname, LName FROM Student INNER JOIN Voting_record ON Student.StuID = Voting_record.StuID WHERE Sex = 'F' AND NOT President_Vote IS NULL", "source_tables": ["student", "voting_record"], "error_info": "Result not equal"}, {"sample_id": 5483, "db_id": "voter_2", "score": 0, "gold_sql": "SELECT DISTINCT T1.Fname, T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.President_VOTE WHERE T1.sex = 'F'", "pred_sql": "SELECT Fname, LName FROM Student INNER JOIN Voting_record ON Student.StuID = Voting_record.StuID WHERE Sex = 'Female' AND NOT President_Vote IS NULL", "source_tables": ["student", "voting_record"], "error_info": "Result not equal"}, {"sample_id": 5484, "db_id": "voter_2", "score": 0, "gold_sql": "SELECT DISTINCT T1.Fname, T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.VICE_President_VOTE WHERE T1.age = 18", "pred_sql": "SELECT Fname, LName FROM Student JOIN Voting_record ON Student.StuID = Voting_record.StuID WHERE Age = '18' AND NOT Vice_President_Vote IS NULL", "source_tables": ["student", "voting_record"], "error_info": "Result not equal"}, {"sample_id": 5485, "db_id": "voter_2", "score": 0, "gold_sql": "SELECT DISTINCT T1.Fname, T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.VICE_President_VOTE WHERE T1.age = 18", "pred_sql": "SELECT Fname, LName FROM Student JOIN Voting_record ON Student.StuID = Voting_record.StuID WHERE Age = '18' AND NOT Vice_President_Vote IS NULL", "source_tables": ["student", "voting_record"], "error_info": "Result not equal"}, {"sample_id": 5486, "db_id": "voter_2", "score": 0, "gold_sql": "SELECT COUNT(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = Class_Senator_Vote WHERE T1.Sex = 'M' AND T2.Election_Cycle = 'Fall'", "pred_sql": "SELECT COUNT(*) FROM Student INNER JOIN Voting_record ON Student.StuID = Voting_record.StuID WHERE Student.Sex = 'M' AND Voting_record.Election_Cycle = 'fall'", "source_tables": ["student", "voting_record"], "error_info": "Result not equal"}, {"sample_id": 5487, "db_id": "voter_2", "score": 0, "gold_sql": "SELECT COUNT(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = Class_Senator_Vote WHERE T1.Sex = 'M' AND T2.Election_Cycle = 'Fall'", "pred_sql": "SELECT COUNT(DISTINCT Student.StuID) AS Male_Students_Count FROM Student JOIN Voting_record ON Student.StuID = Voting_record.Class_Senator_Vote WHERE Student.Sex = 'Male' AND Voting_record.Election_Cycle = 'Fall'", "source_tables": ["student", "voting_record"], "error_info": "Result not equal"}, {"sample_id": 5488, "db_id": "voter_2", "score": 1, "gold_sql": "SELECT COUNT(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = Class_Senator_Vote WHERE T1.city_code = 'NYC' AND T2.Election_Cycle = 'Spring'", "pred_sql": "SELECT COUNT(*) FROM Student AS s JOIN Voting_record AS v ON s.StuID = v.StuID WHERE s.city_code = 'NYC' AND v.Election_Cycle = 'spring' AND NOT v.Class_Senator_Vote IS NULL", "source_tables": ["student", "voting_record"], "error_info": ""}, {"sample_id": 5489, "db_id": "voter_2", "score": 1, "gold_sql": "SELECT COUNT(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = Class_Senator_Vote WHERE T1.city_code = 'NYC' AND T2.Election_Cycle = 'Spring'", "pred_sql": "SELECT COUNT(*) FROM Student JOIN Voting_record ON Student.StuID = Voting_record.StuID WHERE Student.city_code = 'NYC' AND Voting_record.Election_Cycle = 'spring' AND NOT Voting_record.Class_Senator_Vote IS NULL", "source_tables": ["student", "voting_record"], "error_info": ""}, {"sample_id": 5490, "db_id": "voter_2", "score": 0, "gold_sql": "SELECT AVG(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = SECRETARY_Vote WHERE T1.city_code = 'NYC' AND T2.Election_Cycle = 'Spring'", "pred_sql": "SELECT AVG(Age) AS Average_Age FROM Student JOIN Voting_record ON Student.StuID = Voting_record.StuID WHERE Student.city_code = 'NYC' AND NOT Voting_record.Secretary_Vote IS NULL AND Voting_record.Election_Cycle = 'spring'", "source_tables": ["student", "voting_record"], "error_info": "Result not equal"}, {"sample_id": 5491, "db_id": "voter_2", "score": 0, "gold_sql": "SELECT AVG(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = SECRETARY_Vote WHERE T1.city_code = 'NYC' AND T2.Election_Cycle = 'Spring'", "pred_sql": "SELECT AVG(Age) AS Average_Age FROM Student JOIN Voting_record ON Student.StuID = Voting_record.StuID WHERE Student.city_code = 'NYC' AND NOT Voting_record.Secretary_Vote IS NULL AND Voting_record.Election_Cycle = 'spring'", "source_tables": ["student", "voting_record"], "error_info": "Result not equal"}, {"sample_id": 5492, "db_id": "voter_2", "score": 0, "gold_sql": "SELECT AVG(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = SECRETARY_Vote WHERE T1.Sex = 'F' AND T2.Election_Cycle = 'Spring'", "pred_sql": "SELECT AVG(Age) AS Average_Age FROM Student JOIN Voting_record ON Student.StuID = Voting_record.StuID WHERE Student.Sex = 'F' AND NOT Voting_record.Secretary_Vote IS NULL AND Voting_record.Election_Cycle = 'spring'", "source_tables": ["student", "voting_record"], "error_info": "Result not equal"}, {"sample_id": 5493, "db_id": "voter_2", "score": 0, "gold_sql": "SELECT AVG(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = SECRETARY_Vote WHERE T1.Sex = 'F' AND T2.Election_Cycle = 'Spring'", "pred_sql": "SELECT AVG(Age) AS Average_Age FROM Student JOIN Voting_record ON Student.StuID = Voting_record.StuID WHERE Sex = 'Female' AND NOT Secretary_Vote IS NULL AND Election_Cycle = 'Spring'", "source_tables": ["student", "voting_record"], "error_info": "Result not equal"}, {"sample_id": 5494, "db_id": "voter_2", "score": 0, "gold_sql": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code = 'PIT'", "pred_sql": "SELECT DISTINCT Fname FROM Student JOIN Voting_record ON Student.StuID = Voting_record.StuID WHERE NOT Vice_President_Vote IS NULL AND city_code <> 'PIT'", "source_tables": ["student", "voting_record"], "error_info": "Result not equal"}, {"sample_id": 5495, "db_id": "voter_2", "score": 0, "gold_sql": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code = 'PIT'", "pred_sql": "SELECT DISTINCT Fname FROM Student JOIN Voting_record ON Student.StuID = Voting_record.StuID WHERE NOT Vice_President_Vote IS NULL AND city_code <> 'PIT'", "source_tables": ["student", "voting_record"], "error_info": "Result not equal"}, {"sample_id": 5496, "db_id": "voter_2", "score": 0, "gold_sql": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor = '2192'", "pred_sql": "SELECT DISTINCT LName FROM Student JOIN Voting_record ON Student.StuID = Voting_record.StuID WHERE NOT President_Vote IS NULL AND Advisor <> '2192'", "source_tables": ["student", "voting_record"], "error_info": "Result not equal"}, {"sample_id": 5497, "db_id": "voter_2", "score": 0, "gold_sql": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor = '2192'", "pred_sql": "SELECT DISTINCT LName FROM Student WHERE StuID IN (SELECT StuID FROM Voting_record WHERE NOT President_Vote IS NULL) AND Advisor <> '2192'", "source_tables": ["student", "voting_record"], "error_info": "Result not equal"}, {"sample_id": 5498, "db_id": "voter_2", "score": 0, "gold_sql": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor = '8741'", "pred_sql": "SELECT DISTINCT LName FROM Student JOIN Voting_record ON Student.StuID = Voting_record.StuID WHERE NOT President_Vote IS NULL AND Advisor = '8741'", "source_tables": ["student", "voting_record"], "error_info": "Result not equal"}, {"sample_id": 5499, "db_id": "voter_2", "score": 0, "gold_sql": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor = '8741'", "pred_sql": "SELECT DISTINCT LName FROM Student INNER JOIN Voting_record ON Student.StuID = Voting_record.StuID WHERE NOT President_Vote IS NULL AND Advisor = '8741'", "source_tables": ["student", "voting_record"], "error_info": "Result not equal"}, {"sample_id": 5500, "db_id": "voter_2", "score": 1, "gold_sql": "SELECT Advisor, COUNT(*) FROM STUDENT GROUP BY Advisor", "pred_sql": "SELECT Advisor, COUNT(*) AS Total_Students FROM Student GROUP BY Advisor", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5501, "db_id": "voter_2", "score": 1, "gold_sql": "SELECT Advisor, COUNT(*) FROM STUDENT GROUP BY Advisor", "pred_sql": "SELECT Advisor, COUNT(*) AS Student_Count FROM Student GROUP BY Advisor", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5502, "db_id": "voter_2", "score": 1, "gold_sql": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING COUNT(*) > 2", "pred_sql": "SELECT Advisor FROM Student GROUP BY Advisor HAVING COUNT(StuID) > 2", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5503, "db_id": "voter_2", "score": 1, "gold_sql": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING COUNT(*) > 2", "pred_sql": "SELECT Advisor FROM Student GROUP BY Advisor HAVING COUNT(StuID) > 2", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5504, "db_id": "voter_2", "score": 1, "gold_sql": "SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*) < 3", "pred_sql": "SELECT Major FROM Student GROUP BY Major HAVING COUNT(StuID) < 3", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5505, "db_id": "voter_2", "score": 1, "gold_sql": "SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*) < 3", "pred_sql": "SELECT Major FROM Student GROUP BY Major HAVING COUNT(*) < 3", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5506, "db_id": "voter_2", "score": 1, "gold_sql": "SELECT Election_Cycle, COUNT(*) FROM VOTING_RECORD GROUP BY Election_Cycle", "pred_sql": "SELECT Election_Cycle, COUNT(*) AS Number_of_Voting_Records FROM Voting_record GROUP BY Election_Cycle", "source_tables": ["voting_record"], "error_info": ""}, {"sample_id": 5507, "db_id": "voter_2", "score": 1, "gold_sql": "SELECT Election_Cycle, COUNT(*) FROM VOTING_RECORD GROUP BY Election_Cycle", "pred_sql": "SELECT Election_Cycle, COUNT(*) AS Voting_Record_Count FROM Voting_record GROUP BY Election_Cycle", "source_tables": ["voting_record"], "error_info": ""}, {"sample_id": 5508, "db_id": "voter_2", "score": 0, "gold_sql": "SELECT Major FROM STUDENT GROUP BY major ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Major, COUNT(*) AS StudentCount FROM Student GROUP BY Major ORDER BY StudentCount DESC LIMIT 1", "source_tables": ["student"], "error_info": "Result not equal"}, {"sample_id": 5509, "db_id": "voter_2", "score": 1, "gold_sql": "SELECT Major FROM STUDENT GROUP BY major ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Major FROM Student GROUP BY Major ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5510, "db_id": "voter_2", "score": 0, "gold_sql": "SELECT Major FROM STUDENT WHERE Sex = 'F' GROUP BY major ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Major, COUNT(*) AS MajorCount FROM Student WHERE Sex = 'F' GROUP BY Major ORDER BY MajorCount DESC LIMIT 1", "source_tables": ["student"], "error_info": "Result not equal"}, {"sample_id": 5511, "db_id": "voter_2", "score": 0, "gold_sql": "SELECT Major FROM STUDENT WHERE Sex = 'F' GROUP BY major ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Major, COUNT(*) AS Female_Student_Count FROM Student WHERE Sex = 'Female' GROUP BY Major ORDER BY Female_Student_Count DESC LIMIT 1", "source_tables": ["student"], "error_info": "Result not equal"}, {"sample_id": 5512, "db_id": "voter_2", "score": 1, "gold_sql": "SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT city_code FROM Student GROUP BY city_code ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5513, "db_id": "voter_2", "score": 1, "gold_sql": "SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT city_code FROM Student GROUP BY city_code ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5514, "db_id": "voter_2", "score": 1, "gold_sql": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING COUNT(*) > 2", "pred_sql": "SELECT DISTINCT Advisor FROM Student GROUP BY Advisor HAVING COUNT(StuID) > 2", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5515, "db_id": "voter_2", "score": 1, "gold_sql": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING COUNT(*) > 2", "pred_sql": "SELECT Advisor FROM Student GROUP BY Advisor HAVING COUNT(StuID) > 2", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5516, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT COUNT(*) FROM products", "pred_sql": "SELECT COUNT(*) AS product_count FROM Products", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5517, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT COUNT(*) FROM products", "pred_sql": "SELECT COUNT(*) AS product_count FROM Products", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5518, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT COUNT(*) FROM ref_colors", "pred_sql": "SELECT COUNT(*) AS color_count FROM Ref_Colors", "source_tables": ["ref_colors"], "error_info": ""}, {"sample_id": 5519, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT COUNT(*) FROM ref_colors", "pred_sql": "SELECT COUNT(*) AS color_count FROM Ref_Colors", "source_tables": ["ref_colors"], "error_info": ""}, {"sample_id": 5520, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT COUNT(*) FROM CHARACTERISTICS", "pred_sql": "SELECT COUNT(*) AS total_characteristics FROM Characteristics", "source_tables": ["characteristics"], "error_info": ""}, {"sample_id": 5521, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT COUNT(*) FROM CHARACTERISTICS", "pred_sql": "SELECT COUNT(*) AS characteristic_count FROM Characteristics", "source_tables": ["characteristics"], "error_info": ""}, {"sample_id": 5522, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT product_name, typical_buying_price FROM products", "pred_sql": "SELECT product_name, typical_buying_price FROM Products", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5523, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT product_name, typical_buying_price FROM products", "pred_sql": "SELECT product_name, typical_buying_price FROM Products", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5524, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT color_description FROM ref_colors", "pred_sql": "SELECT color_description FROM Ref_Colors", "source_tables": ["ref_colors"], "error_info": ""}, {"sample_id": 5525, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT color_description FROM ref_colors", "pred_sql": "SELECT color_description FROM Ref_Colors", "source_tables": ["ref_colors"], "error_info": ""}, {"sample_id": 5526, "db_id": "products_gen_characteristics", "score": 0, "gold_sql": "SELECT DISTINCT characteristic_name FROM CHARACTERISTICS", "pred_sql": "SELECT characteristic_name FROM Characteristics", "source_tables": ["characteristics"], "error_info": "Result not equal"}, {"sample_id": 5527, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT DISTINCT characteristic_name FROM CHARACTERISTICS", "pred_sql": "SELECT DISTINCT characteristic_name FROM Characteristics", "source_tables": ["characteristics"], "error_info": ""}, {"sample_id": 5528, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT product_name FROM products WHERE product_category_code = 'Spices'", "pred_sql": "SELECT product_name FROM Products WHERE product_category_code = (SELECT product_category_code FROM Ref_Product_Categories WHERE product_category_description = 'Spices')", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5529, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT product_name FROM products WHERE product_category_code = 'Spices'", "pred_sql": "SELECT product_name FROM Products WHERE product_category_code = (SELECT product_category_code FROM Ref_Product_Categories WHERE product_category_description = 'Spices')", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5530, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT T1.product_name, T2.color_description, T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code = T2.color_code WHERE product_category_code = 'Herbs'", "pred_sql": "SELECT Products.product_name, Ref_Colors.color_description, Products.product_description FROM Products JOIN Ref_Product_Categories ON Products.product_category_code = Ref_Product_Categories.product_category_code JOIN Ref_Colors ON Products.color_code = Ref_Colors.color_code WHERE Ref_Product_Categories.product_category_description = 'Herbs'", "source_tables": ["products", "ref_colors"], "error_info": ""}, {"sample_id": 5531, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT T1.product_name, T2.color_description, T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code = T2.color_code WHERE product_category_code = 'Herbs'", "pred_sql": "SELECT Products.product_name, Ref_Colors.color_description, Products.product_description FROM Products JOIN Ref_Product_Categories ON Products.product_category_code = Ref_Product_Categories.product_category_code JOIN Ref_Colors ON Products.color_code = Ref_Colors.color_code WHERE Ref_Product_Categories.product_category_description = 'Herbs'", "source_tables": ["products", "ref_colors"], "error_info": ""}, {"sample_id": 5532, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT COUNT(*) FROM products WHERE product_category_code = 'Seeds'", "pred_sql": "SELECT COUNT(*) AS product_count FROM Products WHERE product_category_code = (SELECT product_category_code FROM Ref_Product_Categories WHERE product_category_description = 'Seeds')", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5533, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT COUNT(*) FROM products WHERE product_category_code = 'Seeds'", "pred_sql": "SELECT COUNT(*) AS product_count FROM Products WHERE product_category_code = (SELECT product_category_code FROM Ref_Product_Categories WHERE product_category_description = 'Seeds')", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5534, "db_id": "products_gen_characteristics", "score": 0, "gold_sql": "SELECT COUNT(*) FROM products WHERE product_category_code = 'Spices' AND typical_buying_price > 1000", "pred_sql": "SELECT COUNT(*) AS product_count FROM Products AS p JOIN Ref_Product_Categories AS c ON p.product_category_code = c.product_category_code WHERE c.product_category_description = 'Spices' AND p.typical_selling_price > 1000", "source_tables": ["products"], "error_info": "Result not equal"}, {"sample_id": 5535, "db_id": "products_gen_characteristics", "score": 0, "gold_sql": "SELECT COUNT(*) FROM products WHERE product_category_code = 'Spices' AND typical_buying_price > 1000", "pred_sql": "SELECT COUNT(*) AS product_count FROM Products WHERE product_category_code = (SELECT product_category_code FROM Ref_Product_Categories WHERE product_category_description = 'Spices') AND typical_selling_price > 1000", "source_tables": ["products"], "error_info": "Result not equal"}, {"sample_id": 5536, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT product_category_code, typical_buying_price FROM products WHERE product_name = 'cumin'", "pred_sql": "SELECT rpc.product_category_description, p.typical_buying_price FROM Products AS p JOIN Ref_Product_Categories AS rpc ON p.product_category_code = rpc.product_category_code WHERE p.product_name = 'cumin'", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5537, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT product_category_code, typical_buying_price FROM products WHERE product_name = 'cumin'", "pred_sql": "SELECT p.product_category_code, p.typical_buying_price FROM Products AS p WHERE p.product_name = 'cumin'", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5538, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT product_category_code FROM products WHERE product_name = 'flax'", "pred_sql": "SELECT Ref_Product_Categories.product_category_description FROM Products JOIN Ref_Product_Categories ON Products.product_category_code = Ref_Product_Categories.product_category_code WHERE Products.product_name = 'flax'", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5539, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT product_category_code FROM products WHERE product_name = 'flax'", "pred_sql": "SELECT product_category_code FROM Products WHERE product_name = 'flax'", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5540, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT T1.product_name FROM products AS T1 JOIN ref_colors AS T2 ON T1.color_code = T2.color_code WHERE T2.color_description = 'yellow'", "pred_sql": "SELECT product_name FROM Products INNER JOIN Ref_Colors ON Products.color_code = Ref_Colors.color_code WHERE Ref_Colors.color_description = 'yellow'", "source_tables": ["products", "ref_colors"], "error_info": ""}, {"sample_id": 5541, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT T1.product_name FROM products AS T1 JOIN ref_colors AS T2 ON T1.color_code = T2.color_code WHERE T2.color_description = 'yellow'", "pred_sql": "SELECT product_name FROM Products INNER JOIN Ref_Colors ON Products.color_code = Ref_Colors.color_code WHERE Ref_Colors.color_description = 'yellow'", "source_tables": ["products", "ref_colors"], "error_info": ""}, {"sample_id": 5542, "db_id": "products_gen_characteristics", "score": 0, "gold_sql": "SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_description LIKE '%t%'", "pred_sql": "SELECT DISTINCT rpc.product_category_description FROM Ref_Product_Categories AS rpc JOIN Products AS p ON rpc.product_category_code = p.product_category_code WHERE p.product_description LIKE '%t%'", "source_tables": ["products", "ref_product_categories"], "error_info": "Result not equal"}, {"sample_id": 5543, "db_id": "products_gen_characteristics", "score": 0, "gold_sql": "SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_description LIKE '%t%'", "pred_sql": "SELECT DISTINCT rpc.product_category_description FROM Ref_Product_Categories AS rpc JOIN Products AS p ON rpc.product_category_code = p.product_category_code WHERE p.product_description LIKE '%t%'", "source_tables": ["products", "ref_product_categories"], "error_info": "Result not equal"}, {"sample_id": 5544, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t1.product_name = 'catnip'", "pred_sql": "SELECT Ref_Colors.color_description FROM Products JOIN Ref_Colors ON Products.color_code = Ref_Colors.color_code WHERE Products.product_name = 'catnip'", "source_tables": ["products", "ref_colors"], "error_info": ""}, {"sample_id": 5545, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t1.product_name = 'catnip'", "pred_sql": "SELECT Ref_Colors.color_description FROM Products JOIN Ref_Colors ON Products.color_code = Ref_Colors.color_code WHERE Products.product_name = 'catnip'", "source_tables": ["products", "ref_colors"], "error_info": ""}, {"sample_id": 5546, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT t1.color_code, t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t1.product_name = 'chervil'", "pred_sql": "SELECT Products.color_code, Ref_Colors.color_description FROM Products JOIN Ref_Colors ON Products.color_code = Ref_Colors.color_code WHERE Products.product_name = 'chervil'", "source_tables": ["products", "ref_colors"], "error_info": ""}, {"sample_id": 5547, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT t1.color_code, t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t1.product_name = 'chervil'", "pred_sql": "SELECT Products.color_code, Ref_Colors.color_description FROM Products JOIN Ref_Colors ON Products.color_code = Ref_Colors.color_code WHERE Products.product_name = 'chervil'", "source_tables": ["products", "ref_colors"], "error_info": ""}, {"sample_id": 5548, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT t1.product_id, t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code JOIN product_characteristics AS t3 ON t1.product_id = t3.product_id GROUP BY t1.product_id HAVING COUNT(*) >= 2", "pred_sql": "SELECT p.product_id, rc.color_description FROM Products AS p JOIN Ref_Colors AS rc ON p.color_code = rc.color_code JOIN Product_Characteristics AS pc ON p.product_id = pc.product_id GROUP BY p.product_id, rc.color_description HAVING COUNT(pc.characteristic_id) >= 2", "source_tables": ["products", "ref_colors", "product_characteristics"], "error_info": ""}, {"sample_id": 5549, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT t1.product_id, t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code JOIN product_characteristics AS t3 ON t1.product_id = t3.product_id GROUP BY t1.product_id HAVING COUNT(*) >= 2", "pred_sql": "SELECT p.product_id, c.color_description FROM Products AS p JOIN Ref_Colors AS c ON p.color_code = c.color_code JOIN Product_Characteristics AS pc ON p.product_id = pc.product_id GROUP BY p.product_id, c.color_description HAVING COUNT(pc.characteristic_id) >= 2", "source_tables": ["products", "ref_colors", "product_characteristics"], "error_info": ""}, {"sample_id": 5550, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = 'white'", "pred_sql": "SELECT Products.product_name FROM Products JOIN Ref_Colors ON Products.color_code = Ref_Colors.color_code WHERE Ref_Colors.color_description = 'white'", "source_tables": ["products", "ref_colors"], "error_info": ""}, {"sample_id": 5551, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = 'white'", "pred_sql": "SELECT product_name FROM Products JOIN Ref_Colors ON Products.color_code = Ref_Colors.color_code WHERE Ref_Colors.color_description = 'white'", "source_tables": ["products", "ref_colors"], "error_info": ""}, {"sample_id": 5552, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT t1.product_name, t1.typical_buying_price, t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = 'yellow'", "pred_sql": "SELECT Products.product_name, Products.typical_buying_price, Products.typical_selling_price FROM Products JOIN Ref_Colors ON Products.color_code = Ref_Colors.color_code WHERE Ref_Colors.color_description = 'yellow'", "source_tables": ["products", "ref_colors"], "error_info": ""}, {"sample_id": 5553, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT t1.product_name, t1.typical_buying_price, t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = 'yellow'", "pred_sql": "SELECT Products.product_name, Products.typical_buying_price, Products.typical_selling_price FROM Products JOIN Ref_Colors ON Products.color_code = Ref_Colors.color_code WHERE Ref_Colors.color_description = 'yellow'", "source_tables": ["products", "ref_colors"], "error_info": ""}, {"sample_id": 5554, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT COUNT(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id WHERE t1.product_name = 'sesame'", "pred_sql": "SELECT COUNT(pc.characteristic_id) AS characteristic_count FROM Products AS p JOIN Product_Characteristics AS pc ON p.product_id = pc.product_id WHERE p.product_name = 'sesame'", "source_tables": ["products", "product_characteristics"], "error_info": ""}, {"sample_id": 5555, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT COUNT(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id WHERE t1.product_name = 'sesame'", "pred_sql": "SELECT COUNT(pc.characteristic_id) AS characteristic_count FROM Products AS p JOIN Product_Characteristics AS pc ON p.product_id = pc.product_id WHERE p.product_name = 'sesame'", "source_tables": ["products", "product_characteristics"], "error_info": ""}, {"sample_id": 5556, "db_id": "products_gen_characteristics", "score": 0, "gold_sql": "SELECT COUNT(DISTINCT t3.characteristic_name) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = 'sesame'", "pred_sql": "SELECT COUNT(DISTINCT Characteristics.characteristic_name) AS distinct_characteristic_count FROM Products JOIN Product_Characteristics ON Products.product_id = Product_Characteristics.product_id JOIN Characteristics ON Product_Characteristics.characteristic_id = Characteristics.characteristic_id WHERE Products.product_name = 'cumin'", "source_tables": ["products", "characteristics", "product_characteristics"], "error_info": "Result not equal"}, {"sample_id": 5557, "db_id": "products_gen_characteristics", "score": 0, "gold_sql": "SELECT COUNT(DISTINCT t3.characteristic_name) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = 'sesame'", "pred_sql": "SELECT COUNT(DISTINCT c.characteristic_name) AS distinct_characteristic_count FROM Products AS p JOIN Product_Characteristics AS pc ON p.product_id = pc.product_id JOIN Characteristics AS c ON pc.characteristic_id = c.characteristic_id WHERE p.product_name = 'cumin'", "source_tables": ["products", "characteristics", "product_characteristics"], "error_info": "Result not equal"}, {"sample_id": 5558, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = 'sesame'", "pred_sql": "SELECT Characteristics.characteristic_name FROM Products JOIN Product_Characteristics ON Products.product_id = Product_Characteristics.product_id JOIN Characteristics ON Product_Characteristics.characteristic_id = Characteristics.characteristic_id WHERE Products.product_name = 'sesame'", "source_tables": ["products", "characteristics", "product_characteristics"], "error_info": ""}, {"sample_id": 5559, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = 'sesame'", "pred_sql": "SELECT Characteristics.characteristic_name FROM Products JOIN Product_Characteristics ON Products.product_id = Product_Characteristics.product_id JOIN Characteristics ON Product_Characteristics.characteristic_id = Characteristics.characteristic_id WHERE Products.product_name = 'sesame'", "source_tables": ["products", "characteristics", "product_characteristics"], "error_info": ""}, {"sample_id": 5560, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT t3.characteristic_name, t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = 'cumin'", "pred_sql": "SELECT Characteristics.characteristic_name, Characteristics.characteristic_data_type FROM Products JOIN Product_Characteristics ON Products.product_id = Product_Characteristics.product_id JOIN Characteristics ON Product_Characteristics.characteristic_id = Characteristics.characteristic_id WHERE Products.product_name = 'cumin'", "source_tables": ["products", "characteristics", "product_characteristics"], "error_info": ""}, {"sample_id": 5561, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT t3.characteristic_name, t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = 'cumin'", "pred_sql": "SELECT Characteristics.characteristic_name, Characteristics.characteristic_data_type FROM Products JOIN Product_Characteristics ON Products.product_id = Product_Characteristics.product_id JOIN Characteristics ON Product_Characteristics.characteristic_id = Characteristics.characteristic_id WHERE Products.product_name = 'cumin'", "source_tables": ["products", "characteristics", "product_characteristics"], "error_info": ""}, {"sample_id": 5562, "db_id": "products_gen_characteristics", "score": 0, "gold_sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = 'sesame' AND t3.characteristic_type_code = 'Grade'", "pred_sql": "SELECT c.characteristic_name, pc.product_characteristic_value FROM Products AS p JOIN Product_Characteristics AS pc ON p.product_id = pc.product_id JOIN Characteristics AS c ON pc.characteristic_id = c.characteristic_id JOIN Ref_Characteristic_Types AS rct ON c.characteristic_type_code = rct.characteristic_type_code WHERE p.product_name = 'sesame' AND rct.characteristic_type_code = 'Grade'", "source_tables": ["products", "characteristics", "product_characteristics"], "error_info": "Result not equal"}, {"sample_id": 5563, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = 'sesame' AND t3.characteristic_type_code = 'Grade'", "pred_sql": "SELECT Characteristics.characteristic_name FROM Products JOIN Product_Characteristics ON Products.product_id = Product_Characteristics.product_id JOIN Characteristics ON Product_Characteristics.characteristic_id = Characteristics.characteristic_id JOIN Ref_Characteristic_Types ON Characteristics.characteristic_type_code = Ref_Characteristic_Types.characteristic_type_code WHERE Products.product_name = 'sesame' AND Ref_Characteristic_Types.characteristic_type_code = 'Grade'", "source_tables": ["products", "characteristics", "product_characteristics"], "error_info": ""}, {"sample_id": 5564, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT COUNT(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = 'laurel'", "pred_sql": "SELECT COUNT(pc.characteristic_id) AS characteristic_count FROM Products AS p JOIN Product_Characteristics AS pc ON p.product_id = pc.product_id WHERE p.product_name = 'laurel'", "source_tables": ["products", "characteristics", "product_characteristics"], "error_info": ""}, {"sample_id": 5565, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT COUNT(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = 'laurel'", "pred_sql": "SELECT COUNT(DISTINCT pc.characteristic_id) AS characteristic_count FROM Products AS p JOIN Product_Characteristics AS pc ON p.product_id = pc.product_id WHERE p.product_name = 'laurel'", "source_tables": ["products", "characteristics", "product_characteristics"], "error_info": ""}, {"sample_id": 5566, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT COUNT(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = 'flax'", "pred_sql": "SELECT COUNT(pc.characteristic_id) AS characteristic_count FROM Products AS p JOIN Product_Characteristics AS pc ON p.product_id = pc.product_id WHERE p.product_name = 'flax'", "source_tables": ["products", "characteristics", "product_characteristics"], "error_info": ""}, {"sample_id": 5567, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT COUNT(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = 'flax'", "pred_sql": "SELECT COUNT(pc.characteristic_id) AS characteristic_count FROM Products AS p JOIN Product_Characteristics AS pc ON p.product_id = pc.product_id WHERE p.product_name = 'flax'", "source_tables": ["products", "characteristics", "product_characteristics"], "error_info": ""}, {"sample_id": 5568, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code WHERE t4.color_description = 'red' AND t3.characteristic_name = 'fast'", "pred_sql": "SELECT p.product_name FROM Products AS p JOIN Ref_Colors AS c ON p.color_code = c.color_code JOIN Product_Characteristics AS pc ON p.product_id = pc.product_id JOIN Characteristics AS ch ON pc.characteristic_id = ch.characteristic_id WHERE c.color_description = 'red' AND ch.characteristic_name = 'fast'", "source_tables": ["products", "ref_colors", "characteristics", "product_characteristics"], "error_info": ""}, {"sample_id": 5569, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code WHERE t4.color_description = 'red' AND t3.characteristic_name = 'fast'", "pred_sql": "SELECT Products.product_name FROM Products JOIN Ref_Colors ON Products.color_code = Ref_Colors.color_code JOIN Product_Characteristics ON Products.product_id = Product_Characteristics.product_id JOIN Characteristics ON Product_Characteristics.characteristic_id = Characteristics.characteristic_id WHERE Ref_Colors.color_description = 'red' AND Characteristics.characteristic_name = 'fast'", "source_tables": ["products", "ref_colors", "characteristics", "product_characteristics"], "error_info": ""}, {"sample_id": 5570, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT COUNT(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t3.characteristic_name = 'hot'", "pred_sql": "SELECT COUNT(DISTINCT p.product_id) AS product_count FROM Products AS p JOIN Product_Characteristics AS pc ON p.product_id = pc.product_id JOIN Characteristics AS c ON pc.characteristic_id = c.characteristic_id WHERE c.characteristic_name = 'hot'", "source_tables": ["products", "characteristics", "product_characteristics"], "error_info": ""}, {"sample_id": 5571, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT COUNT(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t3.characteristic_name = 'hot'", "pred_sql": "SELECT COUNT(DISTINCT p.product_id) AS product_count FROM Products AS p JOIN Product_Characteristics AS pc ON p.product_id = pc.product_id JOIN Characteristics AS c ON pc.characteristic_id = c.characteristic_id WHERE c.characteristic_name = 'hot'", "source_tables": ["products", "characteristics", "product_characteristics"], "error_info": ""}, {"sample_id": 5572, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t3.characteristic_name = 'warm'", "pred_sql": "SELECT DISTINCT p.product_name FROM Products AS p JOIN Product_Characteristics AS pc ON p.product_id = pc.product_id JOIN Characteristics AS c ON pc.characteristic_id = c.characteristic_id WHERE c.characteristic_name = 'warm'", "source_tables": ["products", "characteristics", "product_characteristics"], "error_info": ""}, {"sample_id": 5573, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t3.characteristic_name = 'warm'", "pred_sql": "SELECT DISTINCT p.product_name FROM Products AS p JOIN Product_Characteristics AS pc ON p.product_id = pc.product_id JOIN Characteristics AS c ON pc.characteristic_id = c.characteristic_id WHERE c.characteristic_name = 'warm'", "source_tables": ["products", "characteristics", "product_characteristics"], "error_info": ""}, {"sample_id": 5574, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT COUNT(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code WHERE t4.color_description = 'red' AND t3.characteristic_name = 'slow'", "pred_sql": "SELECT COUNT(DISTINCT p.product_id) AS product_count FROM Products AS p JOIN Ref_Colors AS c ON p.color_code = c.color_code JOIN Product_Characteristics AS pc ON p.product_id = pc.product_id JOIN Characteristics AS ch ON pc.characteristic_id = ch.characteristic_id WHERE c.color_description = 'red' AND ch.characteristic_name = 'slow'", "source_tables": ["products", "ref_colors", "characteristics", "product_characteristics"], "error_info": ""}, {"sample_id": 5575, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT COUNT(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code WHERE t4.color_description = 'red' AND t3.characteristic_name = 'slow'", "pred_sql": "SELECT COUNT(DISTINCT p.product_id) AS product_count FROM Products AS p JOIN Ref_Colors AS c ON p.color_code = c.color_code JOIN Product_Characteristics AS pc ON p.product_id = pc.product_id JOIN Characteristics AS ch ON pc.characteristic_id = ch.characteristic_id WHERE c.color_description = 'red' AND ch.characteristic_name = 'slow'", "source_tables": ["products", "ref_colors", "characteristics", "product_characteristics"], "error_info": ""}, {"sample_id": 5576, "db_id": "products_gen_characteristics", "score": 0, "gold_sql": "SELECT COUNT(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code WHERE t4.color_description = 'white' OR t3.characteristic_name = 'hot'", "pred_sql": "SELECT COUNT(DISTINCT p.product_id) AS product_count FROM Products AS p LEFT JOIN Ref_Colors AS c ON p.color_code = c.color_code LEFT JOIN Product_Characteristics AS pc ON p.product_id = pc.product_id LEFT JOIN Characteristics AS ch ON pc.characteristic_id = ch.characteristic_id WHERE c.color_description = 'white' OR ch.characteristic_name = 'hot'", "source_tables": ["products", "ref_colors", "characteristics", "product_characteristics"], "error_info": "Result not equal"}, {"sample_id": 5577, "db_id": "products_gen_characteristics", "score": 0, "gold_sql": "SELECT COUNT(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code WHERE t4.color_description = 'white' OR t3.characteristic_name = 'hot'", "pred_sql": "SELECT COUNT(DISTINCT p.product_id) AS product_count FROM Products AS p LEFT JOIN Product_Characteristics AS pc ON p.product_id = pc.product_id LEFT JOIN Characteristics AS c ON pc.characteristic_id = c.characteristic_id WHERE p.color_code = (SELECT color_code FROM Ref_Colors WHERE color_description = 'white') OR c.characteristic_name = 'hot'", "source_tables": ["products", "ref_colors", "characteristics", "product_characteristics"], "error_info": "Result not equal"}, {"sample_id": 5578, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code = 'Herbs'", "pred_sql": "SELECT unit_of_measure FROM Ref_Product_Categories WHERE product_category_code = 'Herbs'", "source_tables": ["ref_product_categories"], "error_info": ""}, {"sample_id": 5579, "db_id": "products_gen_characteristics", "score": 0, "gold_sql": "SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code = 'Herbs'", "pred_sql": "SELECT Ref_Product_Categories.unit_of_measure FROM Products JOIN Ref_Product_Categories ON Products.product_category_code = Ref_Product_Categories.product_category_code WHERE Products.product_name LIKE '%Herb%'", "source_tables": ["ref_product_categories"], "error_info": "Result not equal"}, {"sample_id": 5580, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT product_category_description FROM ref_product_categories WHERE product_category_code = 'Spices'", "pred_sql": "SELECT product_category_description FROM Ref_Product_Categories WHERE product_category_code = 'Spices'", "source_tables": ["ref_product_categories"], "error_info": ""}, {"sample_id": 5581, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT product_category_description FROM ref_product_categories WHERE product_category_code = 'Spices'", "pred_sql": "SELECT product_category_description FROM Ref_Product_Categories WHERE product_category_code = 'Spices'", "source_tables": ["ref_product_categories"], "error_info": ""}, {"sample_id": 5582, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT product_category_description, unit_of_measure FROM ref_product_categories WHERE product_category_code = 'Herbs'", "pred_sql": "SELECT product_category_description, unit_of_measure FROM Ref_Product_Categories WHERE product_category_code = 'Herbs'", "source_tables": ["ref_product_categories"], "error_info": ""}, {"sample_id": 5583, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT product_category_description, unit_of_measure FROM ref_product_categories WHERE product_category_code = 'Herbs'", "pred_sql": "SELECT rpc.product_category_description, rpc.unit_of_measure FROM Ref_Product_Categories AS rpc WHERE rpc.product_category_code = (SELECT product_category_code FROM Ref_Product_Categories WHERE product_category_description = 'Herbs')", "source_tables": ["ref_product_categories"], "error_info": ""}, {"sample_id": 5584, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code WHERE t1.product_name = 'cumin'", "pred_sql": "SELECT Ref_Product_Categories.unit_of_measure FROM Products JOIN Ref_Product_Categories ON Products.product_category_code = Ref_Product_Categories.product_category_code WHERE Products.product_name = 'cumin'", "source_tables": ["products", "ref_product_categories"], "error_info": ""}, {"sample_id": 5585, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code WHERE t1.product_name = 'cumin'", "pred_sql": "SELECT Ref_Product_Categories.unit_of_measure FROM Products JOIN Ref_Product_Categories ON Products.product_category_code = Ref_Product_Categories.product_category_code WHERE Products.product_name = 'cumin'", "source_tables": ["products", "ref_product_categories"], "error_info": ""}, {"sample_id": 5586, "db_id": "products_gen_characteristics", "score": 0, "gold_sql": "SELECT t2.unit_of_measure, t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code WHERE t1.product_name = 'chervil'", "pred_sql": "SELECT pc.product_category_code, rc.unit_of_measure FROM Products AS p JOIN Ref_Product_Categories AS rc ON p.product_category_code = rc.product_category_code WHERE p.product_name = 'chervil'", "source_tables": ["products", "ref_product_categories"], "error_info": "Predction Execution Error:no such column: pc.product_category_code"}, {"sample_id": 5587, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT t2.unit_of_measure, t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code WHERE t1.product_name = 'chervil'", "pred_sql": "SELECT Ref_Product_Categories.unit_of_measure, Ref_Product_Categories.product_category_code FROM Products JOIN Ref_Product_Categories ON Products.product_category_code = Ref_Product_Categories.product_category_code WHERE Products.product_name = 'chervil'", "source_tables": ["products", "ref_product_categories"], "error_info": ""}, {"sample_id": 5588, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code = t3.color_code WHERE t3.color_description = 'white' AND t2.unit_of_measure <> 'Handful'", "pred_sql": "SELECT p.product_name FROM Products AS p JOIN Ref_Colors AS c ON p.color_code = c.color_code JOIN Ref_Product_Categories AS pc ON p.product_category_code = pc.product_category_code WHERE c.color_description = 'white' AND pc.unit_of_measure <> 'Handful'", "source_tables": ["products", "ref_colors", "ref_product_categories"], "error_info": ""}, {"sample_id": 5589, "db_id": "products_gen_characteristics", "score": 0, "gold_sql": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code = t3.color_code WHERE t3.color_description = 'white' AND t2.unit_of_measure <> 'Handful'", "pred_sql": "SELECT product_name FROM Products WHERE color_code <> (SELECT color_code FROM Ref_Colors WHERE color_description = 'white') AND product_category_code <> (SELECT product_category_code FROM Ref_Product_Categories WHERE unit_of_measure = 'Handful')", "source_tables": ["products", "ref_colors", "ref_product_categories"], "error_info": "Result not equal"}, {"sample_id": 5590, "db_id": "products_gen_characteristics", "score": 0, "gold_sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code GROUP BY t2.color_description ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Ref_Colors.color_description, COUNT(Products.product_id) AS product_count FROM Products JOIN Ref_Colors ON Products.color_code = Ref_Colors.color_code GROUP BY Ref_Colors.color_description ORDER BY product_count DESC LIMIT 1", "source_tables": ["products", "ref_colors"], "error_info": "Result not equal"}, {"sample_id": 5591, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code GROUP BY t2.color_description ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT color_description FROM Ref_Colors WHERE color_code IN (SELECT color_code FROM Products GROUP BY color_code ORDER BY COUNT(*) DESC LIMIT 1)", "source_tables": ["products", "ref_colors"], "error_info": ""}, {"sample_id": 5592, "db_id": "products_gen_characteristics", "score": 0, "gold_sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code GROUP BY t2.color_description ORDER BY COUNT(*) ASC LIMIT 1", "pred_sql": "SELECT rc.color_description FROM Ref_Colors AS rc JOIN Products AS p ON rc.color_code = p.color_code GROUP BY rc.color_code ORDER BY COUNT(p.product_id) ASC LIMIT 1", "source_tables": ["products", "ref_colors"], "error_info": "Result not equal"}, {"sample_id": 5593, "db_id": "products_gen_characteristics", "score": 0, "gold_sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code GROUP BY t2.color_description ORDER BY COUNT(*) ASC LIMIT 1", "pred_sql": "SELECT color_description FROM Ref_Colors WHERE color_code IN (SELECT color_code FROM Products GROUP BY color_code HAVING COUNT(*) = (SELECT MIN(color_count) FROM (SELECT COUNT(*) AS color_count FROM Products GROUP BY color_code)))", "source_tables": ["products", "ref_colors"], "error_info": "Result not equal"}, {"sample_id": 5594, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT C.characteristic_name FROM Characteristics AS C JOIN Product_Characteristics AS PC ON C.characteristic_id = PC.characteristic_id GROUP BY C.characteristic_name ORDER BY COUNT(PC.product_id) DESC LIMIT 1", "source_tables": ["products", "characteristics", "product_characteristics"], "error_info": ""}, {"sample_id": 5595, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT characteristic_name FROM Characteristics WHERE characteristic_id IN (SELECT characteristic_id FROM Product_Characteristics GROUP BY characteristic_id ORDER BY COUNT(*) DESC LIMIT 1)", "source_tables": ["products", "characteristics", "product_characteristics"], "error_info": ""}, {"sample_id": 5596, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT characteristic_name, other_characteristic_details, characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name, t1.other_characteristic_details, t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id = t2.characteristic_id", "pred_sql": "SELECT C.characteristic_name, C.other_characteristic_details, C.characteristic_data_type FROM Characteristics AS C LEFT JOIN Product_Characteristics AS PC ON C.characteristic_id = PC.characteristic_id WHERE PC.product_id IS NULL", "source_tables": ["characteristics", "product_characteristics"], "error_info": ""}, {"sample_id": 5597, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT characteristic_name, other_characteristic_details, characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name, t1.other_characteristic_details, t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id = t2.characteristic_id", "pred_sql": "SELECT C.characteristic_name, C.other_characteristic_details, C.characteristic_data_type FROM Characteristics AS C LEFT JOIN Product_Characteristics AS PC ON C.characteristic_id = PC.characteristic_id WHERE PC.product_id IS NULL", "source_tables": ["characteristics", "product_characteristics"], "error_info": ""}, {"sample_id": 5598, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id GROUP BY t3.characteristic_name HAVING COUNT(*) >= 2", "pred_sql": "SELECT c.characteristic_name FROM Characteristics AS c JOIN Product_Characteristics AS pc ON c.characteristic_id = pc.characteristic_id GROUP BY c.characteristic_name HAVING COUNT(pc.product_id) >= 2", "source_tables": ["products", "characteristics", "product_characteristics"], "error_info": ""}, {"sample_id": 5599, "db_id": "products_gen_characteristics", "score": 0, "gold_sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id GROUP BY t3.characteristic_name HAVING COUNT(*) >= 2", "pred_sql": "SELECT c.characteristic_name FROM Characteristics AS c JOIN Product_Characteristics AS pc ON c.characteristic_id = pc.characteristic_id GROUP BY c.characteristic_id HAVING COUNT(DISTINCT pc.product_id) >= 2", "source_tables": ["products", "characteristics", "product_characteristics"], "error_info": "Result not equal"}, {"sample_id": 5600, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Ref_colors WHERE NOT color_code IN (SELECT color_code FROM products)", "pred_sql": "SELECT COUNT(*) AS unused_color_count FROM Ref_Colors WHERE NOT color_code IN (SELECT DISTINCT color_code FROM Products)", "source_tables": ["products", "ref_colors"], "error_info": ""}, {"sample_id": 5601, "db_id": "products_gen_characteristics", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Ref_colors WHERE NOT color_code IN (SELECT color_code FROM products)", "pred_sql": "SELECT COUNT(*) AS unused_color_count FROM Ref_Colors WHERE NOT color_code IN (SELECT DISTINCT color_code FROM Products)", "source_tables": ["products", "ref_colors"], "error_info": ""}, {"sample_id": 5602, "db_id": "swimming", "score": 1, "gold_sql": "SELECT COUNT(*) FROM event", "pred_sql": "SELECT COUNT(*) AS event_count FROM event", "source_tables": ["event"], "error_info": ""}, {"sample_id": 5603, "db_id": "swimming", "score": 0, "gold_sql": "SELECT name FROM event ORDER BY YEAR DESC", "pred_sql": "SELECT Name, Year FROM event ORDER BY Year DESC", "source_tables": ["event"], "error_info": "Result not equal"}, {"sample_id": 5604, "db_id": "swimming", "score": 1, "gold_sql": "SELECT name FROM event ORDER BY YEAR DESC LIMIT 1", "pred_sql": "SELECT Name FROM event WHERE Year = (SELECT MAX(Year) FROM event)", "source_tables": ["event"], "error_info": ""}, {"sample_id": 5605, "db_id": "swimming", "score": 1, "gold_sql": "SELECT COUNT(*) FROM stadium", "pred_sql": "SELECT COUNT(*) AS total_stadiums FROM stadium", "source_tables": ["stadium"], "error_info": ""}, {"sample_id": 5606, "db_id": "swimming", "score": 1, "gold_sql": "SELECT name FROM stadium ORDER BY capacity DESC LIMIT 1", "pred_sql": "SELECT name FROM stadium WHERE Capacity = (SELECT MAX(Capacity) FROM stadium)", "source_tables": ["stadium"], "error_info": ""}, {"sample_id": 5607, "db_id": "swimming", "score": 1, "gold_sql": "SELECT name FROM stadium WHERE capacity < (SELECT AVG(capacity) FROM stadium)", "pred_sql": "SELECT name FROM stadium WHERE Capacity < (SELECT AVG(Capacity) FROM stadium)", "source_tables": ["stadium"], "error_info": ""}, {"sample_id": 5608, "db_id": "swimming", "score": 0, "gold_sql": "SELECT country FROM stadium GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Country, COUNT(*) AS StadiumCount FROM stadium GROUP BY Country ORDER BY StadiumCount DESC LIMIT 1", "source_tables": ["stadium"], "error_info": "Result not equal"}, {"sample_id": 5609, "db_id": "swimming", "score": 1, "gold_sql": "SELECT country FROM stadium GROUP BY country HAVING COUNT(*) <= 3", "pred_sql": "SELECT Country FROM stadium GROUP BY Country HAVING COUNT(ID) <= 3", "source_tables": ["stadium"], "error_info": ""}, {"sample_id": 5610, "db_id": "swimming", "score": 1, "gold_sql": "SELECT country FROM stadium WHERE capacity > 60000 INTERSECT SELECT country FROM stadium WHERE capacity < 50000", "pred_sql": "SELECT DISTINCT s.Country FROM stadium AS s WHERE s.Capacity > 60000 INTERSECT SELECT DISTINCT s.Country FROM stadium AS s WHERE s.Capacity < 50000", "source_tables": ["stadium"], "error_info": ""}, {"sample_id": 5611, "db_id": "swimming", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT city) FROM stadium WHERE opening_year < 2006", "pred_sql": "SELECT COUNT(DISTINCT City) AS CityCount FROM stadium WHERE Opening_year < 2006", "source_tables": ["stadium"], "error_info": ""}, {"sample_id": 5612, "db_id": "swimming", "score": 1, "gold_sql": "SELECT country, COUNT(*) FROM stadium GROUP BY country", "pred_sql": "SELECT Country, COUNT(*) AS Stadium_Count FROM stadium GROUP BY Country", "source_tables": ["stadium"], "error_info": ""}, {"sample_id": 5613, "db_id": "swimming", "score": 0, "gold_sql": "SELECT country FROM stadium EXCEPT SELECT country FROM stadium WHERE opening_year > 2006", "pred_sql": "SELECT DISTINCT swimmer.Nationality FROM swimmer WHERE NOT swimmer.Nationality IN (SELECT DISTINCT stadium.Country FROM stadium WHERE stadium.Opening_year > 2006)", "source_tables": ["stadium"], "error_info": "Result not equal"}, {"sample_id": 5614, "db_id": "swimming", "score": 1, "gold_sql": "SELECT COUNT(*) FROM stadium WHERE country <> 'Russia'", "pred_sql": "SELECT COUNT(*) FROM stadium WHERE Country <> 'Russia'", "source_tables": ["stadium"], "error_info": ""}, {"sample_id": 5615, "db_id": "swimming", "score": 1, "gold_sql": "SELECT name FROM swimmer ORDER BY meter_100", "pred_sql": "SELECT name FROM swimmer ORDER BY meter_100 ASC", "source_tables": ["swimmer"], "error_info": ""}, {"sample_id": 5616, "db_id": "swimming", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT nationality) FROM swimmer", "pred_sql": "SELECT COUNT(DISTINCT Nationality) AS different_countries FROM swimmer", "source_tables": ["swimmer"], "error_info": ""}, {"sample_id": 5617, "db_id": "swimming", "score": 0, "gold_sql": "SELECT nationality, COUNT(*) FROM swimmer GROUP BY nationality HAVING COUNT(*) > 1", "pred_sql": "SELECT Nationality FROM swimmer GROUP BY Nationality HAVING COUNT(ID) > 1", "source_tables": ["swimmer"], "error_info": "Result not equal"}, {"sample_id": 5618, "db_id": "swimming", "score": 0, "gold_sql": "SELECT meter_200, meter_300 FROM swimmer WHERE nationality = 'Australia'", "pred_sql": "SELECT name, meter_200, meter_300 FROM swimmer WHERE Nationality = 'Australia'", "source_tables": ["swimmer"], "error_info": "Result not equal"}, {"sample_id": 5619, "db_id": "swimming", "score": 0, "gold_sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win'", "pred_sql": "SELECT swimmer.name FROM swimmer JOIN record ON swimmer.ID = record.Swimmer_ID WHERE record.Result = 'win'", "source_tables": ["record", "swimmer"], "error_info": "Result not equal"}, {"sample_id": 5620, "db_id": "swimming", "score": 1, "gold_sql": "SELECT t1.name FROM stadium AS t1 JOIN event AS t2 ON t1.id = t2.stadium_id GROUP BY t2.stadium_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT stadium.name FROM stadium JOIN event ON stadium.ID = event.Stadium_ID GROUP BY stadium.ID ORDER BY COUNT(event.ID) DESC LIMIT 1", "source_tables": ["event", "stadium"], "error_info": ""}, {"sample_id": 5621, "db_id": "swimming", "score": 1, "gold_sql": "SELECT t1.name, t1.capacity FROM stadium AS t1 JOIN event AS t2 ON t1.id = t2.stadium_id WHERE t2.name = 'World Junior'", "pred_sql": "SELECT stadium.name, stadium.Capacity FROM stadium JOIN event ON stadium.ID = event.Stadium_ID WHERE event.Name = 'World Junior'", "source_tables": ["event", "stadium"], "error_info": ""}, {"sample_id": 5622, "db_id": "swimming", "score": 1, "gold_sql": "SELECT name FROM stadium WHERE NOT id IN (SELECT stadium_id FROM event)", "pred_sql": "SELECT name FROM stadium WHERE NOT ID IN (SELECT Stadium_ID FROM event)", "source_tables": ["event", "stadium"], "error_info": ""}, {"sample_id": 5623, "db_id": "swimming", "score": 1, "gold_sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id GROUP BY t2.swimmer_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT swimmer.name FROM swimmer JOIN record ON swimmer.ID = record.Swimmer_ID GROUP BY swimmer.ID ORDER BY COUNT(record.ID) DESC LIMIT 1", "source_tables": ["record", "swimmer"], "error_info": ""}, {"sample_id": 5624, "db_id": "swimming", "score": 1, "gold_sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id GROUP BY t2.swimmer_id HAVING COUNT(*) >= 2", "pred_sql": "SELECT swimmer.name FROM swimmer JOIN record ON swimmer.ID = record.Swimmer_ID GROUP BY swimmer.ID HAVING COUNT(record.ID) >= 2", "source_tables": ["record", "swimmer"], "error_info": ""}, {"sample_id": 5625, "db_id": "swimming", "score": 0, "gold_sql": "SELECT t1.name, t1.nationality FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' GROUP BY t2.swimmer_id HAVING COUNT(*) > 1", "pred_sql": "SELECT swimmer.name, swimmer.Nationality FROM swimmer JOIN record ON swimmer.ID = record.Swimmer_ID WHERE record.Result = 'win' GROUP BY swimmer.ID HAVING COUNT(record.ID) > 1", "source_tables": ["record", "swimmer"], "error_info": "Result not equal"}, {"sample_id": 5626, "db_id": "swimming", "score": 1, "gold_sql": "SELECT name FROM swimmer WHERE NOT id IN (SELECT swimmer_id FROM record)", "pred_sql": "SELECT name FROM swimmer WHERE NOT ID IN (SELECT Swimmer_ID FROM record)", "source_tables": ["record", "swimmer"], "error_info": ""}, {"sample_id": 5627, "db_id": "swimming", "score": 0, "gold_sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' INTERSECT SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Loss'", "pred_sql": "SELECT DISTINCT s.name FROM swimmer AS s JOIN record AS r ON s.ID = r.Swimmer_ID WHERE r.Result IN ('win', 'loss') GROUP BY s.ID HAVING COUNT(DISTINCT r.Result) = 2", "source_tables": ["record", "swimmer"], "error_info": "Result not equal"}, {"sample_id": 5628, "db_id": "swimming", "score": 0, "gold_sql": "SELECT t4.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia'", "pred_sql": "SELECT DISTINCT stadium.name FROM stadium JOIN event ON stadium.ID = event.Stadium_ID JOIN record ON event.ID = record.Event_ID JOIN swimmer ON record.Swimmer_ID = swimmer.ID WHERE swimmer.Nationality = 'Australian'", "source_tables": ["record", "event", "swimmer", "stadium"], "error_info": "Result not equal"}, {"sample_id": 5629, "db_id": "swimming", "score": 1, "gold_sql": "SELECT t3.name FROM record AS t1 JOIN event AS t2 ON t1.event_id = t2.id JOIN stadium AS t3 ON t3.id = t2.stadium_id GROUP BY t2.stadium_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT stadium.name FROM stadium JOIN event ON stadium.ID = event.Stadium_ID JOIN record ON event.ID = record.Event_ID JOIN swimmer ON record.Swimmer_ID = swimmer.ID GROUP BY stadium.ID ORDER BY COUNT(swimmer.ID) DESC LIMIT 1", "source_tables": ["record", "event", "stadium"], "error_info": ""}, {"sample_id": 5630, "db_id": "swimming", "score": 1, "gold_sql": "SELECT * FROM swimmer", "pred_sql": "SELECT * FROM swimmer", "source_tables": ["swimmer"], "error_info": ""}, {"sample_id": 5631, "db_id": "swimming", "score": 1, "gold_sql": "SELECT AVG(capacity) FROM stadium WHERE opening_year = 2005", "pred_sql": "SELECT AVG(Capacity) AS average_capacity FROM stadium WHERE Opening_year = 2005", "source_tables": ["stadium"], "error_info": ""}, {"sample_id": 5632, "db_id": "railway", "score": 1, "gold_sql": "SELECT COUNT(*) FROM railway", "pred_sql": "SELECT COUNT(*) AS total_railways FROM railway", "source_tables": ["railway"], "error_info": ""}, {"sample_id": 5633, "db_id": "railway", "score": 0, "gold_sql": "SELECT Builder FROM railway ORDER BY Builder ASC", "pred_sql": "SELECT DISTINCT Builder FROM railway ORDER BY Builder ASC", "source_tables": ["railway"], "error_info": "Result not equal"}, {"sample_id": 5634, "db_id": "railway", "score": 1, "gold_sql": "SELECT Wheels, LOCATION FROM railway", "pred_sql": "SELECT Wheels, Location FROM railway", "source_tables": ["railway"], "error_info": ""}, {"sample_id": 5635, "db_id": "railway", "score": 0, "gold_sql": "SELECT MAX(LEVEL) FROM manager WHERE Country <> 'Australia\t'", "pred_sql": "SELECT MAX(Level) AS Max_Level FROM manager WHERE Country <> 'Australia'", "source_tables": ["manager"], "error_info": "Result not equal"}, {"sample_id": 5636, "db_id": "railway", "score": 1, "gold_sql": "SELECT AVG(Age) FROM manager", "pred_sql": "SELECT AVG(Age) AS Average_Age FROM manager", "source_tables": ["manager"], "error_info": ""}, {"sample_id": 5637, "db_id": "railway", "score": 1, "gold_sql": "SELECT Name FROM manager ORDER BY LEVEL ASC", "pred_sql": "SELECT Name FROM manager ORDER BY Level ASC", "source_tables": ["manager"], "error_info": ""}, {"sample_id": 5638, "db_id": "railway", "score": 1, "gold_sql": "SELECT Name, Arrival FROM train", "pred_sql": "SELECT Name, Arrival FROM train", "source_tables": ["train"], "error_info": ""}, {"sample_id": 5639, "db_id": "railway", "score": 0, "gold_sql": "SELECT Name FROM manager ORDER BY Age DESC LIMIT 1", "pred_sql": "SELECT Name FROM manager ORDER BY Working_year_starts ASC LIMIT 1", "source_tables": ["manager"], "error_info": "Result not equal"}, {"sample_id": 5640, "db_id": "railway", "score": 1, "gold_sql": "SELECT T2.Name, T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID", "pred_sql": "SELECT train.Name AS Train_Name, railway.Location AS Railway_Location FROM train JOIN railway ON train.Railway_ID = railway.Railway_ID", "source_tables": ["train", "railway"], "error_info": ""}, {"sample_id": 5641, "db_id": "railway", "score": 1, "gold_sql": "SELECT T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID WHERE T2.Name = 'Andaman Exp'", "pred_sql": "SELECT railway.Builder FROM railway JOIN train ON railway.Railway_ID = train.Railway_ID WHERE train.Name = 'Andaman Exp'", "source_tables": ["train", "railway"], "error_info": ""}, {"sample_id": 5642, "db_id": "railway", "score": 1, "gold_sql": "SELECT T2.Railway_ID, T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID GROUP BY T2.Railway_ID HAVING COUNT(*) > 1", "pred_sql": "SELECT railway.Railway_ID, railway.Location FROM railway JOIN train ON railway.Railway_ID = train.Railway_ID GROUP BY railway.Railway_ID, railway.Location HAVING COUNT(train.Train_ID) > 1", "source_tables": ["train", "railway"], "error_info": ""}, {"sample_id": 5643, "db_id": "railway", "score": 0, "gold_sql": "SELECT T2.Railway_ID, T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID GROUP BY T2.Railway_ID ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT r.Railway_ID, r.Builder FROM railway AS r JOIN train AS t ON r.Railway_ID = t.Railway_ID GROUP BY r.Railway_ID, r.Builder ORDER BY COUNT(t.Train_ID) DESC LIMIT 1", "source_tables": ["train", "railway"], "error_info": "Result not equal"}, {"sample_id": 5644, "db_id": "railway", "score": 1, "gold_sql": "SELECT Builder, COUNT(*) FROM railway GROUP BY Builder", "pred_sql": "SELECT Builder, COUNT(Railway_ID) AS Number_of_Railways FROM railway GROUP BY Builder", "source_tables": ["railway"], "error_info": ""}, {"sample_id": 5645, "db_id": "railway", "score": 0, "gold_sql": "SELECT Builder FROM railway GROUP BY Builder ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Builder, COUNT(*) AS BuilderCount FROM railway GROUP BY Builder ORDER BY BuilderCount DESC LIMIT 1", "source_tables": ["railway"], "error_info": "Result not equal"}, {"sample_id": 5646, "db_id": "railway", "score": 1, "gold_sql": "SELECT LOCATION, COUNT(*) FROM railway GROUP BY LOCATION", "pred_sql": "SELECT Location, COUNT(Railway_ID) AS Number_of_Railways FROM railway GROUP BY Location", "source_tables": ["railway"], "error_info": ""}, {"sample_id": 5647, "db_id": "railway", "score": 1, "gold_sql": "SELECT LOCATION FROM railway GROUP BY LOCATION HAVING COUNT(*) > 1", "pred_sql": "SELECT Location FROM railway GROUP BY Location HAVING COUNT(Railway_ID) > 1", "source_tables": ["railway"], "error_info": ""}, {"sample_id": 5648, "db_id": "railway", "score": 1, "gold_sql": "SELECT ObjectNumber FROM railway WHERE NOT Railway_ID IN (SELECT Railway_ID FROM train)", "pred_sql": "SELECT ObjectNumber FROM railway WHERE NOT Railway_ID IN (SELECT DISTINCT Railway_ID FROM train)", "source_tables": ["train", "railway"], "error_info": ""}, {"sample_id": 5649, "db_id": "railway", "score": 1, "gold_sql": "SELECT Country FROM manager WHERE Age > 50 INTERSECT SELECT Country FROM manager WHERE Age < 46", "pred_sql": "SELECT DISTINCT m1.Country FROM manager AS m1 JOIN railway_manage AS rm1 ON m1.Manager_ID = rm1.Manager_ID JOIN railway AS r1 ON rm1.Railway_ID = r1.Railway_ID WHERE m1.Age > '50' AND m1.Country IN (SELECT m2.Country FROM manager AS m2 JOIN railway_manage AS rm2 ON m2.Manager_ID = rm2.Manager_ID JOIN railway AS r2 ON rm2.Railway_ID = r2.Railway_ID WHERE m2.Age < '46')", "source_tables": ["manager"], "error_info": ""}, {"sample_id": 5650, "db_id": "railway", "score": 1, "gold_sql": "SELECT DISTINCT Country FROM manager", "pred_sql": "SELECT DISTINCT Country FROM manager", "source_tables": ["manager"], "error_info": ""}, {"sample_id": 5651, "db_id": "railway", "score": 0, "gold_sql": "SELECT Working_year_starts FROM manager ORDER BY LEVEL DESC", "pred_sql": "SELECT Name, Working_year_starts, Level FROM manager ORDER BY Level DESC", "source_tables": ["manager"], "error_info": "Result not equal"}, {"sample_id": 5652, "db_id": "railway", "score": 0, "gold_sql": "SELECT Country FROM manager WHERE Age > 50 OR Age < 46", "pred_sql": "SELECT DISTINCT Country FROM manager WHERE Age > '50' OR Age < '46'", "source_tables": ["manager"], "error_info": "Result not equal"}, {"sample_id": 5653, "db_id": "customers_and_products_contacts", "score": 1, "gold_sql": "SELECT COUNT(*) FROM addresses WHERE country = 'USA'", "pred_sql": "SELECT COUNT(*) AS address_count FROM Addresses WHERE country = 'USA'", "source_tables": ["addresses"], "error_info": ""}, {"sample_id": 5654, "db_id": "customers_and_products_contacts", "score": 1, "gold_sql": "SELECT DISTINCT city FROM addresses", "pred_sql": "SELECT DISTINCT city FROM Addresses", "source_tables": ["addresses"], "error_info": ""}, {"sample_id": 5655, "db_id": "customers_and_products_contacts", "score": 1, "gold_sql": "SELECT state_province_county, COUNT(*) FROM addresses GROUP BY state_province_county", "pred_sql": "SELECT state_province_county, COUNT(*) AS address_count FROM Addresses GROUP BY state_province_county", "source_tables": ["addresses"], "error_info": ""}, {"sample_id": 5656, "db_id": "customers_and_products_contacts", "score": 0, "gold_sql": "SELECT customer_name, customer_phone FROM customers WHERE NOT customer_id IN (SELECT customer_id FROM customer_address_history)", "pred_sql": "SELECT customer_name, customer_phone FROM Customers WHERE customer_address IS NULL OR customer_address = ''", "source_tables": ["customers", "customer_address_history"], "error_info": "Result not equal"}, {"sample_id": 5657, "db_id": "customers_and_products_contacts", "score": 1, "gold_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT customer_name FROM Customers WHERE customer_id = (SELECT customer_id FROM Customer_Orders GROUP BY customer_id ORDER BY COUNT(order_id) DESC LIMIT 1)", "source_tables": ["customer_orders", "customers"], "error_info": ""}, {"sample_id": 5658, "db_id": "customers_and_products_contacts", "score": 1, "gold_sql": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING COUNT(*) >= 2", "pred_sql": "SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_id) >= 2", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5659, "db_id": "customers_and_products_contacts", "score": 0, "gold_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = 'Completed' INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = 'Part'", "pred_sql": "SELECT DISTINCT c.customer_name FROM Customers AS c JOIN Customer_Orders AS co ON c.customer_id = co.customer_id WHERE co.order_status_code IN ('completed', 'part') GROUP BY c.customer_id HAVING COUNT(DISTINCT co.order_status_code) = 2", "source_tables": ["customer_orders", "customers"], "error_info": "Result not equal"}, {"sample_id": 5660, "db_id": "customers_and_products_contacts", "score": 1, "gold_sql": "SELECT customer_name, customer_phone, payment_method_code FROM customers ORDER BY customer_number DESC", "pred_sql": "SELECT customer_name, customer_phone, payment_method_code FROM Customers ORDER BY customer_number DESC", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 5661, "db_id": "customers_and_products_contacts", "score": 0, "gold_sql": "SELECT T1.product_name, SUM(T2.order_quantity) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_id", "pred_sql": "SELECT Products.product_name, SUM(Order_Items.order_quantity) AS total_order_quantity FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY Products.product_name", "source_tables": ["products", "order_items"], "error_info": "Result not equal"}, {"sample_id": 5662, "db_id": "customers_and_products_contacts", "score": 1, "gold_sql": "SELECT MIN(product_price), MAX(product_price), AVG(product_price) FROM products", "pred_sql": "SELECT MIN(product_price) AS min_price, MAX(product_price) AS max_price, AVG(product_price) AS avg_price FROM Products", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5663, "db_id": "customers_and_products_contacts", "score": 1, "gold_sql": "SELECT COUNT(*) FROM products WHERE product_price > (SELECT AVG(product_price) FROM products)", "pred_sql": "SELECT COUNT(*) AS product_count FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products)", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5664, "db_id": "customers_and_products_contacts", "score": 1, "gold_sql": "SELECT T2.customer_name, T3.city, T1.date_from, T1.date_to FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id JOIN addresses AS T3 ON T1.address_id = T3.address_id", "pred_sql": "SELECT Customers.customer_name, Addresses.city, Customer_Address_History.date_from, Customer_Address_History.date_to FROM Customer_Address_History JOIN Customers ON Customer_Address_History.customer_id = Customers.customer_id JOIN Addresses ON Customer_Address_History.address_id = Addresses.address_id", "source_tables": ["addresses", "customers", "customer_address_history"], "error_info": ""}, {"sample_id": 5665, "db_id": "customers_and_products_contacts", "score": 1, "gold_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.payment_method_code = 'Credit Card' GROUP BY T1.customer_id HAVING COUNT(*) > 2", "pred_sql": "SELECT customer_name FROM Customers WHERE payment_method_code = 'Credit Card' AND customer_id IN (SELECT customer_id FROM Customer_Orders GROUP BY customer_id HAVING COUNT(order_id) > 2)", "source_tables": ["customer_orders", "customers"], "error_info": ""}, {"sample_id": 5666, "db_id": "customers_and_products_contacts", "score": 1, "gold_sql": "SELECT T1.customer_name, T1.customer_phone FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T3.order_id = T2.order_id GROUP BY T1.customer_id ORDER BY SUM(T3.order_quantity) DESC LIMIT 1", "pred_sql": "SELECT c.customer_name, c.customer_phone FROM Customers AS c JOIN Customer_Orders AS co ON c.customer_id = co.customer_id JOIN Order_Items AS oi ON co.order_id = oi.order_id GROUP BY c.customer_id ORDER BY SUM(oi.order_quantity) DESC LIMIT 1", "source_tables": ["customer_orders", "customers", "order_items"], "error_info": ""}, {"sample_id": 5667, "db_id": "customers_and_products_contacts", "score": 1, "gold_sql": "SELECT product_type_code, product_name FROM products WHERE product_price > 1000 OR product_price < 500", "pred_sql": "SELECT product_type_code, product_name FROM Products WHERE product_price > 1000 OR product_price < 500", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5668, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT dorm_name FROM dorm WHERE gender = 'F'", "pred_sql": "SELECT dorm_name FROM Dorm WHERE gender = 'F'", "source_tables": ["dorm"], "error_info": ""}, {"sample_id": 5669, "db_id": "dorm_1", "score": 0, "gold_sql": "SELECT dorm_name FROM dorm WHERE gender = 'F'", "pred_sql": "SELECT dorm_name FROM Dorm WHERE gender = 'female'", "source_tables": ["dorm"], "error_info": "Result not equal"}, {"sample_id": 5670, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT dorm_name FROM dorm WHERE student_capacity > 300", "pred_sql": "SELECT dorm_name FROM Dorm WHERE student_capacity > 300", "source_tables": ["dorm"], "error_info": ""}, {"sample_id": 5671, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT dorm_name FROM dorm WHERE student_capacity > 300", "pred_sql": "SELECT dorm_name FROM Dorm WHERE student_capacity > 300", "source_tables": ["dorm"], "error_info": ""}, {"sample_id": 5672, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM student WHERE sex = 'F' AND age < 25", "pred_sql": "SELECT COUNT(*) FROM Student WHERE Sex = 'F' AND Age < '25'", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5673, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM student WHERE sex = 'F' AND age < 25", "pred_sql": "SELECT COUNT(*) AS girl_students_count FROM Student WHERE Sex = 'F' AND Age < '25'", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5674, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT fname FROM student WHERE age > 20", "pred_sql": "SELECT Fname FROM Student WHERE Age > '20'", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5675, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT fname FROM student WHERE age > 20", "pred_sql": "SELECT Fname FROM Student WHERE Age > '20'", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5676, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT fname FROM student WHERE city_code = 'PHL' AND age BETWEEN 20 AND 25", "pred_sql": "SELECT Fname FROM Student WHERE city_code = 'PHL' AND Age BETWEEN '20' AND '25'", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5677, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT fname FROM student WHERE city_code = 'PHL' AND age BETWEEN 20 AND 25", "pred_sql": "SELECT Fname FROM Student WHERE Age BETWEEN '20' AND '25' AND city_code = 'PHL'", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5678, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM dorm", "pred_sql": "SELECT COUNT(*) AS total_dorms FROM Dorm", "source_tables": ["dorm"], "error_info": ""}, {"sample_id": 5679, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM dorm", "pred_sql": "SELECT COUNT(*) AS total_dorms FROM Dorm", "source_tables": ["dorm"], "error_info": ""}, {"sample_id": 5680, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM dorm_amenity", "pred_sql": "SELECT COUNT(DISTINCT amenid) AS distinct_amenities FROM Dorm_amenity", "source_tables": ["dorm_amenity"], "error_info": ""}, {"sample_id": 5681, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM dorm_amenity", "pred_sql": "SELECT COUNT(DISTINCT amenid) AS different_amenities FROM Dorm_amenity", "source_tables": ["dorm_amenity"], "error_info": ""}, {"sample_id": 5682, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT SUM(student_capacity) FROM dorm", "pred_sql": "SELECT SUM(student_capacity) AS total_capacity FROM Dorm", "source_tables": ["dorm"], "error_info": ""}, {"sample_id": 5683, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT SUM(student_capacity) FROM dorm", "pred_sql": "SELECT SUM(student_capacity) AS total_capacity FROM Dorm", "source_tables": ["dorm"], "error_info": ""}, {"sample_id": 5684, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM student", "pred_sql": "SELECT COUNT(*) AS total_students FROM Student", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5685, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM student", "pred_sql": "SELECT COUNT(*) AS total_students FROM Student", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5686, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT AVG(age), city_code FROM student GROUP BY city_code", "pred_sql": "SELECT city_code, AVG(Age) AS average_age FROM Student GROUP BY city_code", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5687, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT AVG(age), city_code FROM student GROUP BY city_code", "pred_sql": "SELECT city_code, AVG(Age) AS average_age FROM Student GROUP BY city_code", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5688, "db_id": "dorm_1", "score": 0, "gold_sql": "SELECT AVG(student_capacity), SUM(student_capacity) FROM dorm WHERE gender = 'X'", "pred_sql": "SELECT AVG(Dorm.student_capacity) AS average_capacity, SUM(Dorm.student_capacity) AS total_capacity FROM Dorm JOIN Lives_in ON Dorm.dormid = Lives_in.dormid JOIN Student ON Lives_in.stuid = Student.StuID WHERE Student.Sex = 'X'", "source_tables": ["dorm"], "error_info": "Result not equal"}, {"sample_id": 5689, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT AVG(student_capacity), SUM(student_capacity) FROM dorm WHERE gender = 'X'", "pred_sql": "SELECT AVG(student_capacity) AS average_capacity, SUM(student_capacity) AS total_capacity FROM Dorm WHERE gender = 'X'", "source_tables": ["dorm"], "error_info": ""}, {"sample_id": 5690, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT dormid) FROM has_amenity", "pred_sql": "SELECT COUNT(DISTINCT d.dormid) AS number_of_dorms_with_amenities FROM Dorm AS d JOIN Has_amenity AS ha ON d.dormid = ha.dormid", "source_tables": ["has_amenity"], "error_info": ""}, {"sample_id": 5691, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT dormid) FROM has_amenity", "pred_sql": "SELECT COUNT(DISTINCT d.dormid) AS number_of_dorms_with_amenities FROM Dorm AS d JOIN Has_amenity AS ha ON d.dormid = ha.dormid", "source_tables": ["has_amenity"], "error_info": ""}, {"sample_id": 5692, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT dorm_name FROM dorm WHERE NOT dormid IN (SELECT dormid FROM has_amenity)", "pred_sql": "SELECT dorm_name FROM Dorm WHERE NOT dormid IN (SELECT dormid FROM Has_amenity)", "source_tables": ["has_amenity", "dorm"], "error_info": ""}, {"sample_id": 5693, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT dorm_name FROM dorm WHERE NOT dormid IN (SELECT dormid FROM has_amenity)", "pred_sql": "SELECT dorm_name FROM Dorm WHERE NOT dormid IN (SELECT dormid FROM Has_amenity)", "source_tables": ["has_amenity", "dorm"], "error_info": ""}, {"sample_id": 5694, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT gender) FROM dorm", "pred_sql": "SELECT COUNT(DISTINCT gender) AS distinct_gender_count FROM Dorm", "source_tables": ["dorm"], "error_info": ""}, {"sample_id": 5695, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT gender) FROM dorm", "pred_sql": "SELECT COUNT(DISTINCT gender) AS different_genders FROM Dorm", "source_tables": ["dorm"], "error_info": ""}, {"sample_id": 5696, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT student_capacity, gender FROM dorm WHERE dorm_name LIKE '%Donor%'", "pred_sql": "SELECT student_capacity, gender FROM Dorm WHERE dorm_name LIKE '%Donor%'", "source_tables": ["dorm"], "error_info": ""}, {"sample_id": 5697, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT student_capacity, gender FROM dorm WHERE dorm_name LIKE '%Donor%'", "pred_sql": "SELECT student_capacity, gender FROM Dorm WHERE dorm_name LIKE '%Donor%'", "source_tables": ["dorm"], "error_info": ""}, {"sample_id": 5698, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT dorm_name, gender FROM dorm WHERE student_capacity > 300 OR student_capacity < 100", "pred_sql": "SELECT dorm_name, gender FROM Dorm WHERE student_capacity > 300 OR student_capacity < 100", "source_tables": ["dorm"], "error_info": ""}, {"sample_id": 5699, "db_id": "dorm_1", "score": 0, "gold_sql": "SELECT dorm_name, gender FROM dorm WHERE student_capacity > 300 OR student_capacity < 100", "pred_sql": "SELECT dorm_name, student_capacity FROM Dorm WHERE student_capacity > 300 OR student_capacity < 100", "source_tables": ["dorm"], "error_info": "Result not equal"}, {"sample_id": 5700, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT major), COUNT(DISTINCT city_code) FROM student", "pred_sql": "SELECT COUNT(DISTINCT Major) AS num_of_majors, COUNT(DISTINCT city_code) AS num_of_cities FROM Student", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5701, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT major), COUNT(DISTINCT city_code) FROM student", "pred_sql": "SELECT COUNT(DISTINCT Major) AS different_majors, COUNT(DISTINCT city_code) AS different_city_codes FROM Student", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5702, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'Study Room'", "pred_sql": "SELECT d.dorm_name FROM Dorm AS d JOIN Has_amenity AS ha1 ON d.dormid = ha1.dormid JOIN Dorm_amenity AS da1 ON ha1.amenid = da1.amenid JOIN Has_amenity AS ha2 ON d.dormid = ha2.dormid JOIN Dorm_amenity AS da2 ON ha2.amenid = da2.amenid WHERE da1.amenity_name = 'TV Lounge' AND da2.amenity_name = 'Study Room' GROUP BY d.dorm_name", "source_tables": ["dorm_amenity", "has_amenity", "dorm"], "error_info": ""}, {"sample_id": 5703, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'Study Room'", "pred_sql": "SELECT d.dorm_name FROM Dorm AS d JOIN Has_amenity AS ha1 ON d.dormid = ha1.dormid JOIN Dorm_amenity AS da1 ON ha1.amenid = da1.amenid JOIN Has_amenity AS ha2 ON d.dormid = ha2.dormid JOIN Dorm_amenity AS da2 ON ha2.amenid = da2.amenid WHERE da1.amenity_name = 'TV Lounge' AND da2.amenity_name = 'Study Room'", "source_tables": ["dorm_amenity", "has_amenity", "dorm"], "error_info": ""}, {"sample_id": 5704, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'Study Room'", "pred_sql": "SELECT d.dorm_name FROM Dorm AS d JOIN Has_amenity AS ha ON d.dormid = ha.dormid JOIN Dorm_amenity AS da ON ha.amenid = da.amenid WHERE da.amenity_name = 'TV Lounge' AND NOT d.dormid IN (SELECT ha2.dormid FROM Has_amenity AS ha2 JOIN Dorm_amenity AS da2 ON ha2.amenid = da2.amenid WHERE da2.amenity_name = 'Study Room')", "source_tables": ["dorm_amenity", "has_amenity", "dorm"], "error_info": ""}, {"sample_id": 5705, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'Study Room'", "pred_sql": "SELECT d.dorm_name FROM Dorm AS d JOIN Has_amenity AS ha ON d.dormid = ha.dormid JOIN Dorm_amenity AS da ON ha.amenid = da.amenid WHERE da.amenity_name = 'TV Lounge' AND NOT d.dormid IN (SELECT ha2.dormid FROM Has_amenity AS ha2 JOIN Dorm_amenity AS da2 ON ha2.amenid = da2.amenid WHERE da2.amenity_name = 'Study Room')", "source_tables": ["dorm_amenity", "has_amenity", "dorm"], "error_info": ""}, {"sample_id": 5706, "db_id": "dorm_1", "score": 0, "gold_sql": "SELECT lname FROM student WHERE sex = 'F' AND city_code = 'BAL' UNION SELECT lname FROM student WHERE sex = 'M' AND age < 20", "pred_sql": "SELECT LName FROM Student WHERE (Sex = 'F' AND city_code = 'BAL') OR (Sex = 'M' AND Age < '20')", "source_tables": ["student"], "error_info": "Result not equal"}, {"sample_id": 5707, "db_id": "dorm_1", "score": 0, "gold_sql": "SELECT lname FROM student WHERE sex = 'F' AND city_code = 'BAL' UNION SELECT lname FROM student WHERE sex = 'M' AND age < 20", "pred_sql": "SELECT LName FROM Student WHERE (Sex = 'Female') OR (city_code = 'BAL') OR (Sex = 'Male' AND Age < '20')", "source_tables": ["student"], "error_info": "Result not equal"}, {"sample_id": 5708, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT dorm_name FROM dorm ORDER BY student_capacity DESC LIMIT 1", "pred_sql": "SELECT dorm_name FROM Dorm ORDER BY student_capacity DESC LIMIT 1", "source_tables": ["dorm"], "error_info": ""}, {"sample_id": 5709, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT dorm_name FROM dorm ORDER BY student_capacity DESC LIMIT 1", "pred_sql": "SELECT dorm_name FROM Dorm WHERE student_capacity = (SELECT MAX(student_capacity) FROM Dorm)", "source_tables": ["dorm"], "error_info": ""}, {"sample_id": 5710, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name", "pred_sql": "SELECT DISTINCT amenity_name FROM Dorm_amenity ORDER BY amenity_name", "source_tables": ["dorm_amenity"], "error_info": ""}, {"sample_id": 5711, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name", "pred_sql": "SELECT DISTINCT amenity_name FROM Dorm_amenity ORDER BY amenity_name ASC", "source_tables": ["dorm_amenity"], "error_info": ""}, {"sample_id": 5712, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT city_code FROM student GROUP BY city_code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT city_code FROM Student GROUP BY city_code ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5713, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT city_code FROM student GROUP BY city_code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT city_code FROM Student GROUP BY city_code ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5714, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT fname, lname FROM student WHERE age < (SELECT AVG(age) FROM student)", "pred_sql": "SELECT Fname, LName FROM Student WHERE Age < (SELECT AVG(Age) FROM Student)", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5715, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT fname, lname FROM student WHERE age < (SELECT AVG(age) FROM student)", "pred_sql": "SELECT Fname, LName FROM Student WHERE Age < (SELECT AVG(CAST(Age AS INT)) FROM Student)", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5716, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT fname, lname FROM student WHERE city_code <> 'HKG' ORDER BY age", "pred_sql": "SELECT Fname, LName FROM Student WHERE city_code <> 'HKG' ORDER BY Age", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5717, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT fname, lname FROM student WHERE city_code <> 'HKG' ORDER BY age", "pred_sql": "SELECT Fname, LName FROM Student WHERE city_code <> 'HKG' ORDER BY Age", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5718, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T2.amenid = T1.amenid JOIN dorm AS T3 ON T2.dormid = T3.dormid WHERE T3.dorm_name = 'Anonymous Donor Hall' ORDER BY T1.amenity_name", "pred_sql": "SELECT a.amenity_name FROM Dorm AS d JOIN Has_amenity AS ha ON d.dormid = ha.dormid JOIN Dorm_amenity AS a ON ha.amenid = a.amenid WHERE d.dorm_name = 'Anonymous Donor Hall' ORDER BY a.amenity_name ASC", "source_tables": ["dorm", "has_amenity", "dorm_amenity"], "error_info": ""}, {"sample_id": 5719, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T2.amenid = T1.amenid JOIN dorm AS T3 ON T2.dormid = T3.dormid WHERE T3.dorm_name = 'Anonymous Donor Hall' ORDER BY T1.amenity_name", "pred_sql": "SELECT a.amenity_name FROM Dorm_amenity AS a JOIN Has_amenity AS ha ON a.amenid = ha.amenid JOIN Dorm AS d ON ha.dormid = d.dormid WHERE d.dorm_name = 'Anonymous Donor Hall' ORDER BY a.amenity_name ASC", "source_tables": ["dorm", "has_amenity", "dorm_amenity"], "error_info": ""}, {"sample_id": 5720, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT COUNT(*), SUM(student_capacity), gender FROM dorm GROUP BY gender", "pred_sql": "SELECT gender, COUNT(dormid) AS number_of_dorms, SUM(student_capacity) AS total_capacity FROM Dorm GROUP BY gender", "source_tables": ["dorm"], "error_info": ""}, {"sample_id": 5721, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT COUNT(*), SUM(student_capacity), gender FROM dorm GROUP BY gender", "pred_sql": "SELECT gender, COUNT(dormid) AS total_dorms, SUM(student_capacity) AS total_capacity FROM Dorm GROUP BY gender", "source_tables": ["dorm"], "error_info": ""}, {"sample_id": 5722, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT AVG(age), MAX(age), sex FROM student GROUP BY sex", "pred_sql": "SELECT Sex, AVG(Age) AS average_age, MAX(Age) AS oldest_age FROM Student GROUP BY Sex", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5723, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT AVG(age), MAX(age), sex FROM student GROUP BY sex", "pred_sql": "SELECT Sex, AVG(Age) AS average_age, MAX(Age) AS oldest_age FROM Student GROUP BY Sex", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5724, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT COUNT(*), major FROM student GROUP BY major", "pred_sql": "SELECT Major, COUNT(*) AS NumberOfStudents FROM Student GROUP BY Major", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5725, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT COUNT(*), major FROM student GROUP BY major", "pred_sql": "SELECT Major, COUNT(*) AS student_count FROM Student GROUP BY Major", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5726, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT COUNT(*), AVG(age), city_code FROM student GROUP BY city_code", "pred_sql": "SELECT city_code, COUNT(*) AS number_of_students, AVG(Age) AS average_age FROM Student GROUP BY city_code", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5727, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT COUNT(*), AVG(age), city_code FROM student GROUP BY city_code", "pred_sql": "SELECT city_code, COUNT(StuID) AS student_count, AVG(Age) AS average_age FROM Student GROUP BY city_code", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5728, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT COUNT(*), AVG(age), city_code FROM student WHERE sex = 'M' GROUP BY city_code", "pred_sql": "SELECT city_code, AVG(Age) AS average_age, COUNT(*) AS male_student_count FROM Student WHERE Sex = 'M' GROUP BY city_code", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5729, "db_id": "dorm_1", "score": 0, "gold_sql": "SELECT COUNT(*), AVG(age), city_code FROM student WHERE sex = 'M' GROUP BY city_code", "pred_sql": "SELECT city_code, AVG(Age) AS average_age, COUNT(CASE WHEN Sex = 'Male' THEN 1 END) AS male_count FROM Student GROUP BY city_code", "source_tables": ["student"], "error_info": "Result not equal"}, {"sample_id": 5730, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT COUNT(*), city_code FROM student GROUP BY city_code HAVING COUNT(*) > 1", "pred_sql": "SELECT city_code, COUNT(*) AS student_count FROM Student GROUP BY city_code HAVING COUNT(*) > 1", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5731, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT COUNT(*), city_code FROM student GROUP BY city_code HAVING COUNT(*) > 1", "pred_sql": "SELECT city_code, COUNT(StuID) AS student_count FROM Student GROUP BY city_code HAVING COUNT(StuID) > 1", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5732, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT fname, lname FROM student WHERE major <> (SELECT major FROM student GROUP BY major ORDER BY COUNT(*) DESC LIMIT 1)", "pred_sql": "SELECT Fname, LName FROM Student WHERE Major <> (SELECT Major FROM Student GROUP BY Major ORDER BY COUNT(*) DESC LIMIT 1)", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5733, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT fname, lname FROM student WHERE major <> (SELECT major FROM student GROUP BY major ORDER BY COUNT(*) DESC LIMIT 1)", "pred_sql": "SELECT Fname, LName FROM Student WHERE Major <> (SELECT Major FROM Student GROUP BY Major ORDER BY COUNT(*) DESC LIMIT 1)", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5734, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT COUNT(*), sex FROM student WHERE age > (SELECT AVG(age) FROM student) GROUP BY sex", "pred_sql": "SELECT Sex, COUNT(*) AS num_students FROM Student WHERE Age > (SELECT AVG(CAST(Age AS INT)) FROM Student) GROUP BY Sex", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5735, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT COUNT(*), sex FROM student WHERE age > (SELECT AVG(age) FROM student) GROUP BY sex", "pred_sql": "SELECT Sex, COUNT(*) AS num_students FROM Student WHERE Age > (SELECT AVG(CAST(Age AS INT)) FROM Student) GROUP BY Sex", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5736, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT AVG(T1.age), T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name", "pred_sql": "SELECT Dorm.dorm_name, AVG(CAST(Student.Age AS INT)) AS average_age FROM Lives_in JOIN Student ON Lives_in.stuid = Student.StuID JOIN Dorm ON Lives_in.dormid = Dorm.dormid GROUP BY Dorm.dorm_name", "source_tables": ["student", "lives_in", "dorm"], "error_info": ""}, {"sample_id": 5737, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT AVG(T1.age), T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name", "pred_sql": "SELECT Dorm.dorm_name, AVG(CAST(Student.Age AS INT)) AS average_age FROM Dorm JOIN Lives_in ON Dorm.dormid = Lives_in.dormid JOIN Student ON Lives_in.stuid = Student.StuID GROUP BY Dorm.dorm_name", "source_tables": ["student", "lives_in", "dorm"], "error_info": ""}, {"sample_id": 5738, "db_id": "dorm_1", "score": 0, "gold_sql": "SELECT COUNT(*), T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid WHERE T1.student_capacity > 100 GROUP BY T1.dormid", "pred_sql": "SELECT Dorm.dorm_name, COUNT(Has_amenity.amenid) AS number_of_amenities FROM Dorm JOIN Has_amenity ON Dorm.dormid = Has_amenity.dormid WHERE Dorm.student_capacity > 100 GROUP BY Dorm.dorm_name", "source_tables": ["has_amenity", "dorm"], "error_info": "Result not equal"}, {"sample_id": 5739, "db_id": "dorm_1", "score": 0, "gold_sql": "SELECT COUNT(*), T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid WHERE T1.student_capacity > 100 GROUP BY T1.dormid", "pred_sql": "SELECT Dorm.dorm_name, COUNT(Has_amenity.amenid) AS amenity_count FROM Dorm LEFT JOIN Has_amenity ON Dorm.dormid = Has_amenity.dormid GROUP BY Dorm.dormid", "source_tables": ["has_amenity", "dorm"], "error_info": "Result not equal"}, {"sample_id": 5740, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT COUNT(*), T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name", "pred_sql": "SELECT d.dorm_name, COUNT(s.StuID) AS number_of_students FROM Dorm AS d LEFT JOIN Lives_in AS l ON d.dormid = l.dormid LEFT JOIN Student AS s ON l.stuid = s.StuID WHERE s.Age > '20' GROUP BY d.dorm_name", "source_tables": ["student", "lives_in", "dorm"], "error_info": ""}, {"sample_id": 5741, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT COUNT(*), T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name", "pred_sql": "SELECT d.dorm_name, COUNT(s.StuID) AS student_count FROM Student AS s JOIN Lives_in AS l ON s.StuID = l.stuid JOIN Dorm AS d ON l.dormid = d.dormid WHERE s.Age > '20' GROUP BY d.dorm_name", "source_tables": ["student", "lives_in", "dorm"], "error_info": ""}, {"sample_id": 5742, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall'", "pred_sql": "SELECT Fname FROM Student INNER JOIN Lives_in ON Student.StuID = Lives_in.stuid INNER JOIN Dorm ON Lives_in.dormid = Dorm.dormid WHERE Dorm.dorm_name = 'Smith Hall'", "source_tables": ["student", "lives_in", "dorm"], "error_info": ""}, {"sample_id": 5743, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall'", "pred_sql": "SELECT Fname FROM Student INNER JOIN Lives_in ON Student.StuID = Lives_in.stuid INNER JOIN Dorm ON Lives_in.dormid = Dorm.dormid WHERE Dorm.dorm_name = 'Smith Hall'", "source_tables": ["student", "lives_in", "dorm"], "error_info": ""}, {"sample_id": 5744, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT AVG(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.student_capacity = (SELECT MAX(student_capacity) FROM dorm)", "pred_sql": "SELECT AVG(Age) AS average_age FROM Student WHERE StuID IN (SELECT stuid FROM Lives_in WHERE dormid = (SELECT dormid FROM Dorm ORDER BY student_capacity DESC LIMIT 1))", "source_tables": ["student", "lives_in", "dorm"], "error_info": ""}, {"sample_id": 5745, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT AVG(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.student_capacity = (SELECT MAX(student_capacity) FROM dorm)", "pred_sql": "SELECT AVG(CAST(Student.Age AS INT)) AS average_age FROM Student JOIN Lives_in ON Student.StuID = Lives_in.stuid JOIN Dorm ON Lives_in.dormid = Dorm.dormid WHERE Dorm.student_capacity = (SELECT MAX(student_capacity) FROM Dorm)", "source_tables": ["student", "lives_in", "dorm"], "error_info": ""}, {"sample_id": 5746, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.gender = 'M'", "pred_sql": "SELECT COUNT(*) AS total_students FROM Lives_in AS li JOIN Dorm AS d ON li.dormid = d.dormid WHERE d.gender = 'M'", "source_tables": ["student", "lives_in", "dorm"], "error_info": ""}, {"sample_id": 5747, "db_id": "dorm_1", "score": 0, "gold_sql": "SELECT COUNT(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.gender = 'M'", "pred_sql": "SELECT COUNT(DISTINCT Lives_in.stuid) AS total_students_in_male_dorm FROM Lives_in JOIN Dorm ON Lives_in.dormid = Dorm.dormid WHERE Dorm.gender = 'male'", "source_tables": ["student", "lives_in", "dorm"], "error_info": "Result not equal"}, {"sample_id": 5748, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall' AND T1.sex = 'F'", "pred_sql": "SELECT COUNT(Student.StuID) AS female_student_count FROM Student JOIN Lives_in ON Student.StuID = Lives_in.stuid JOIN Dorm ON Lives_in.dormid = Dorm.dormid WHERE Student.Sex = 'F' AND Dorm.dorm_name = 'Smith Hall'", "source_tables": ["student", "lives_in", "dorm"], "error_info": ""}, {"sample_id": 5749, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall' AND T1.sex = 'F'", "pred_sql": "SELECT COUNT(*) AS female_student_count FROM Student JOIN Lives_in ON Student.StuID = Lives_in.stuid JOIN Dorm ON Lives_in.dormid = Dorm.dormid WHERE Student.Sex = 'F' AND Dorm.dorm_name = 'Smith Hall'", "source_tables": ["student", "lives_in", "dorm"], "error_info": ""}, {"sample_id": 5750, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T1.dorm_name = 'Smith Hall'", "pred_sql": "SELECT a.amenity_name FROM Dorm AS d JOIN Has_amenity AS ha ON d.dormid = ha.dormid JOIN Dorm_amenity AS a ON ha.amenid = a.amenid WHERE d.dorm_name = 'Smith Hall'", "source_tables": ["dorm_amenity", "has_amenity", "dorm"], "error_info": ""}, {"sample_id": 5751, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T1.dorm_name = 'Smith Hall'", "pred_sql": "SELECT a.amenity_name FROM Dorm AS d JOIN Has_amenity AS ha ON d.dormid = ha.dormid JOIN Dorm_amenity AS a ON ha.amenid = a.amenid WHERE d.dorm_name = 'Smith Hall'", "source_tables": ["dorm_amenity", "has_amenity", "dorm"], "error_info": ""}, {"sample_id": 5752, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T1.dorm_name = 'Smith Hall' ORDER BY T3.amenity_name", "pred_sql": "SELECT a.amenity_name FROM Dorm AS d JOIN Has_amenity AS ha ON d.dormid = ha.dormid JOIN Dorm_amenity AS a ON ha.amenid = a.amenid WHERE d.dorm_name = 'Smith Hall' ORDER BY a.amenity_name", "source_tables": ["dorm_amenity", "has_amenity", "dorm"], "error_info": ""}, {"sample_id": 5753, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T1.dorm_name = 'Smith Hall' ORDER BY T3.amenity_name", "pred_sql": "SELECT a.amenity_name FROM Dorm_amenity AS a JOIN Has_amenity AS ha ON a.amenid = ha.amenid JOIN Dorm AS d ON ha.dormid = d.dormid WHERE d.dorm_name = 'Smith Hall' ORDER BY a.amenity_name", "source_tables": ["dorm_amenity", "has_amenity", "dorm"], "error_info": ""}, {"sample_id": 5754, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid = T2.amenid GROUP BY T2.amenid ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT a.amenity_name FROM Dorm_amenity AS a JOIN Has_amenity AS ha ON a.amenid = ha.amenid GROUP BY a.amenity_name ORDER BY COUNT(ha.dormid) DESC LIMIT 1", "source_tables": ["has_amenity", "dorm_amenity"], "error_info": ""}, {"sample_id": 5755, "db_id": "dorm_1", "score": 0, "gold_sql": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid = T2.amenid GROUP BY T2.amenid ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT amenity_name, COUNT(*) AS amenity_count FROM Has_amenity JOIN Dorm_amenity ON Has_amenity.amenid = Dorm_amenity.amenid GROUP BY amenity_name ORDER BY amenity_count DESC LIMIT 1", "source_tables": ["has_amenity", "dorm_amenity"], "error_info": "Result not equal"}, {"sample_id": 5756, "db_id": "dorm_1", "score": 0, "gold_sql": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid = T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid = T5.amenid GROUP BY T3.dormid ORDER BY COUNT(*) DESC LIMIT 1)", "pred_sql": "SELECT S.Fname FROM Student AS S JOIN Lives_in AS L ON S.StuID = L.stuid JOIN Dorm AS D ON L.dormid = D.dormid JOIN Has_amenity AS HA ON D.dormid = HA.dormid GROUP BY D.dormid HAVING COUNT(HA.amenid) = (SELECT MAX(amenity_count) FROM (SELECT COUNT(HA2.amenid) AS amenity_count FROM Dorm AS D2 JOIN Has_amenity AS HA2 ON D2.dormid = HA2.dormid GROUP BY D2.dormid))", "source_tables": ["has_amenity", "lives_in", "student", "dorm_amenity", "dorm"], "error_info": "Result not equal"}, {"sample_id": 5757, "db_id": "dorm_1", "score": 0, "gold_sql": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid = T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid = T5.amenid GROUP BY T3.dormid ORDER BY COUNT(*) DESC LIMIT 1)", "pred_sql": "SELECT DISTINCT Student.Fname FROM Student JOIN Lives_in ON Student.StuID = Lives_in.stuid JOIN Dorm ON Lives_in.dormid = Dorm.dormid JOIN Has_amenity ON Dorm.dormid = Has_amenity.dormid GROUP BY Dorm.dormid ORDER BY COUNT(Has_amenity.amenid) DESC LIMIT 1", "source_tables": ["has_amenity", "lives_in", "student", "dorm_amenity", "dorm"], "error_info": "Result not equal"}, {"sample_id": 5758, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT T1.dorm_name, T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid GROUP BY T2.dormid ORDER BY COUNT(*) LIMIT 1", "pred_sql": "SELECT d.dorm_name, d.student_capacity FROM Dorm AS d JOIN Has_amenity AS ha ON d.dormid = ha.dormid GROUP BY d.dormid ORDER BY COUNT(ha.amenid) ASC LIMIT 1", "source_tables": ["dorm_amenity", "has_amenity", "dorm"], "error_info": ""}, {"sample_id": 5759, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT T1.dorm_name, T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid GROUP BY T2.dormid ORDER BY COUNT(*) LIMIT 1", "pred_sql": "SELECT d.dorm_name, d.student_capacity FROM Dorm AS d JOIN Has_amenity AS ha ON d.dormid = ha.dormid GROUP BY d.dormid ORDER BY COUNT(ha.amenid) ASC LIMIT 1", "source_tables": ["dorm_amenity", "has_amenity", "dorm"], "error_info": ""}, {"sample_id": 5760, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge'", "pred_sql": "SELECT dorm_name FROM Dorm WHERE NOT dormid IN (SELECT dormid FROM Has_amenity WHERE amenid = (SELECT amenid FROM Dorm_amenity WHERE amenity_name = 'TV Lounge'))", "source_tables": ["dorm_amenity", "has_amenity", "dorm"], "error_info": ""}, {"sample_id": 5761, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge'", "pred_sql": "SELECT dorm_name FROM Dorm WHERE NOT dormid IN (SELECT dormid FROM Has_amenity WHERE amenid = (SELECT amenid FROM Dorm_amenity WHERE amenity_name = 'TV Lounge'))", "source_tables": ["dorm_amenity", "has_amenity", "dorm"], "error_info": ""}, {"sample_id": 5762, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT T1.fname, T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid = T4.amenid WHERE T4.amenity_name = 'TV Lounge')", "pred_sql": "SELECT Student.Fname, Student.LName FROM Student JOIN Lives_in ON Student.StuID = Lives_in.stuid JOIN Dorm ON Lives_in.dormid = Dorm.dormid JOIN Has_amenity ON Dorm.dormid = Has_amenity.dormid JOIN Dorm_amenity ON Has_amenity.amenid = Dorm_amenity.amenid WHERE Dorm_amenity.amenity_name = 'TV Lounge'", "source_tables": ["has_amenity", "student", "lives_in", "dorm_amenity"], "error_info": ""}, {"sample_id": 5763, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT T1.fname, T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid = T4.amenid WHERE T4.amenity_name = 'TV Lounge')", "pred_sql": "SELECT Student.Fname, Student.LName FROM Student JOIN Lives_in ON Student.StuID = Lives_in.stuid JOIN Dorm ON Lives_in.dormid = Dorm.dormid JOIN Has_amenity ON Dorm.dormid = Has_amenity.dormid JOIN Dorm_amenity ON Has_amenity.amenid = Dorm_amenity.amenid WHERE Dorm_amenity.amenity_name = 'TV Lounge'", "source_tables": ["has_amenity", "student", "lives_in", "dorm_amenity"], "error_info": ""}, {"sample_id": 5764, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT T1.fname, T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid WHERE NOT T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid = T4.amenid WHERE T4.amenity_name = 'TV Lounge')", "pred_sql": "SELECT Student.Fname, Student.Age FROM Student JOIN Lives_in ON Student.StuID = Lives_in.stuid JOIN Dorm ON Lives_in.dormid = Dorm.dormid WHERE NOT Dorm.dormid IN (SELECT Has_amenity.dormid FROM Has_amenity JOIN Dorm_amenity ON Has_amenity.amenid = Dorm_amenity.amenid WHERE Dorm_amenity.amenity_name = 'TV Lounge')", "source_tables": ["has_amenity", "student", "lives_in", "dorm_amenity"], "error_info": ""}, {"sample_id": 5765, "db_id": "dorm_1", "score": 0, "gold_sql": "SELECT T1.fname, T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid WHERE NOT T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid = T4.amenid WHERE T4.amenity_name = 'TV Lounge')", "pred_sql": "SELECT Student.Fname, Student.Age FROM Student JOIN Lives_in ON Student.StuID = Lives_in.stuid JOIN Dorm ON Lives_in.dormid = Dorm.dormid JOIN Has_amenity ON Dorm.dormid = Has_amenity.dormid JOIN Dorm_amenity ON Has_amenity.amenid = Dorm_amenity.amenid WHERE Dorm_amenity.amenity_name = 'TV Lounge'", "source_tables": ["has_amenity", "student", "lives_in", "dorm_amenity"], "error_info": "Result not equal"}, {"sample_id": 5766, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid JOIN lives_in AS T4 ON T4.dormid = T1.dormid JOIN student AS T5 ON T5.stuid = T4.stuid WHERE T5.lname = 'Smith'", "pred_sql": "SELECT da.amenity_name FROM Student AS s JOIN Lives_in AS li ON s.StuID = li.stuid JOIN Dorm AS d ON li.dormid = d.dormid JOIN Has_amenity AS ha ON d.dormid = ha.dormid JOIN Dorm_amenity AS da ON ha.amenid = da.amenid WHERE s.LName = 'Smith'", "source_tables": ["has_amenity", "lives_in", "student", "dorm_amenity", "dorm"], "error_info": ""}, {"sample_id": 5767, "db_id": "dorm_1", "score": 1, "gold_sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid JOIN lives_in AS T4 ON T4.dormid = T1.dormid JOIN student AS T5 ON T5.stuid = T4.stuid WHERE T5.lname = 'Smith'", "pred_sql": "SELECT da.amenity_name FROM Student AS s JOIN Lives_in AS li ON s.StuID = li.stuid JOIN Dorm AS d ON li.dormid = d.dormid JOIN Has_amenity AS ha ON d.dormid = ha.dormid JOIN Dorm_amenity AS da ON ha.amenid = da.amenid WHERE s.LName = 'Smith'", "source_tables": ["has_amenity", "lives_in", "student", "dorm_amenity", "dorm"], "error_info": ""}, {"sample_id": 5768, "db_id": "customer_complaints", "score": 1, "gold_sql": "SELECT COUNT(*) FROM customers", "pred_sql": "SELECT COUNT(*) AS total_customers FROM Customers", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 5769, "db_id": "customer_complaints", "score": 1, "gold_sql": "SELECT COUNT(*) FROM customers", "pred_sql": "SELECT COUNT(*) AS customer_count FROM Customers", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 5770, "db_id": "customer_complaints", "score": 1, "gold_sql": "SELECT email_address, phone_number FROM customers ORDER BY email_address, phone_number", "pred_sql": "SELECT email_address, phone_number FROM Customers ORDER BY email_address, phone_number", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 5771, "db_id": "customer_complaints", "score": 1, "gold_sql": "SELECT email_address, phone_number FROM customers ORDER BY email_address, phone_number", "pred_sql": "SELECT email_address, phone_number FROM Customers ORDER BY email_address, phone_number", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 5772, "db_id": "customer_complaints", "score": 0, "gold_sql": "SELECT town_city FROM customers WHERE customer_type_code = 'Good Credit Rating' GROUP BY town_city ORDER BY COUNT(*) LIMIT 1", "pred_sql": "SELECT town_city, COUNT(customer_id) AS customer_count FROM Customers WHERE customer_type_code = 'Good Credit Rating' GROUP BY town_city ORDER BY customer_count ASC LIMIT 1", "source_tables": ["customers"], "error_info": "Result not equal"}, {"sample_id": 5773, "db_id": "customer_complaints", "score": 1, "gold_sql": "SELECT town_city FROM customers WHERE customer_type_code = 'Good Credit Rating' GROUP BY town_city ORDER BY COUNT(*) LIMIT 1", "pred_sql": "SELECT town_city FROM Customers WHERE customer_type_code = 'Good Credit Rating' GROUP BY town_city ORDER BY COUNT(customer_id) ASC LIMIT 1", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 5774, "db_id": "customer_complaints", "score": 1, "gold_sql": "SELECT t1.product_name, COUNT(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_name", "pred_sql": "SELECT Products.product_name, COUNT(Complaints.complaint_id) AS complaint_count FROM Products LEFT JOIN Complaints ON Products.product_id = Complaints.product_id GROUP BY Products.product_id", "source_tables": ["complaints", "products"], "error_info": ""}, {"sample_id": 5775, "db_id": "customer_complaints", "score": 1, "gold_sql": "SELECT t1.product_name, COUNT(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_name", "pred_sql": "SELECT Products.product_name, COUNT(Complaints.complaint_id) AS complaint_count FROM Products LEFT JOIN Complaints ON Products.product_id = Complaints.product_id GROUP BY Products.product_name", "source_tables": ["complaints", "products"], "error_info": ""}, {"sample_id": 5776, "db_id": "customer_complaints", "score": 0, "gold_sql": "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY COUNT(*) LIMIT 1", "pred_sql": "SELECT DISTINCT c.email_address FROM Customers AS c JOIN Complaints AS co ON c.customer_id = co.customer_id WHERE co.product_id = (SELECT product_id FROM Complaints GROUP BY product_id ORDER BY COUNT(*) DESC LIMIT 1)", "source_tables": ["complaints", "customers"], "error_info": "Result not equal"}, {"sample_id": 5777, "db_id": "customer_complaints", "score": 0, "gold_sql": "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY COUNT(*) LIMIT 1", "pred_sql": "SELECT DISTINCT c.email_address FROM Customers AS c JOIN Complaints AS co ON c.customer_id = co.customer_id WHERE co.product_id = (SELECT product_id FROM Complaints GROUP BY product_id ORDER BY COUNT(*) DESC LIMIT 1)", "source_tables": ["complaints", "customers"], "error_info": "Result not equal"}, {"sample_id": 5778, "db_id": "customer_complaints", "score": 0, "gold_sql": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id, customers AS t3 GROUP BY t3.customer_id ORDER BY COUNT(*) LIMIT 1", "pred_sql": "SELECT p.product_id, p.product_name FROM Products AS p JOIN Complaints AS c ON p.product_id = c.product_id WHERE c.customer_id = (SELECT customer_id FROM Complaints GROUP BY customer_id ORDER BY COUNT(complaint_id) ASC LIMIT 1)", "source_tables": ["complaints", "products", "customers"], "error_info": "Result not equal"}, {"sample_id": 5779, "db_id": "customer_complaints", "score": 0, "gold_sql": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id, customers AS t3 GROUP BY t3.customer_id ORDER BY COUNT(*) LIMIT 1", "pred_sql": "SELECT DISTINCT p.product_name FROM Products AS p JOIN Complaints AS c ON p.product_id = c.product_id WHERE c.customer_id = (SELECT customer_id FROM Complaints GROUP BY customer_id ORDER BY COUNT(*) ASC LIMIT 1)", "source_tables": ["complaints", "products", "customers"], "error_info": "Result not equal"}, {"sample_id": 5780, "db_id": "customer_complaints", "score": 1, "gold_sql": "SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id = t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1", "pred_sql": "SELECT Customers.phone_number FROM Customers JOIN Complaints ON Customers.customer_id = Complaints.customer_id ORDER BY Complaints.date_complaint_raised DESC LIMIT 1", "source_tables": ["complaints", "customers"], "error_info": ""}, {"sample_id": 5781, "db_id": "customer_complaints", "score": 1, "gold_sql": "SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id = t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1", "pred_sql": "SELECT Customers.phone_number FROM Customers JOIN Complaints ON Customers.customer_id = Complaints.customer_id ORDER BY Complaints.date_complaint_raised DESC LIMIT 1", "source_tables": ["complaints", "customers"], "error_info": ""}, {"sample_id": 5782, "db_id": "customer_complaints", "score": 1, "gold_sql": "SELECT email_address, phone_number FROM customers WHERE NOT customer_id IN (SELECT customer_id FROM complaints)", "pred_sql": "SELECT email_address, phone_number FROM Customers WHERE NOT customer_id IN (SELECT DISTINCT customer_id FROM Complaints)", "source_tables": ["complaints", "customers"], "error_info": ""}, {"sample_id": 5783, "db_id": "customer_complaints", "score": 1, "gold_sql": "SELECT email_address, phone_number FROM customers WHERE NOT customer_id IN (SELECT customer_id FROM complaints)", "pred_sql": "SELECT email_address, phone_number FROM Customers WHERE NOT customer_id IN (SELECT DISTINCT customer_id FROM Complaints)", "source_tables": ["complaints", "customers"], "error_info": ""}, {"sample_id": 5784, "db_id": "customer_complaints", "score": 1, "gold_sql": "SELECT phone_number FROM customers UNION SELECT phone_number FROM staff", "pred_sql": "SELECT phone_number FROM Customers UNION SELECT phone_number FROM Staff", "source_tables": ["staff", "customers"], "error_info": ""}, {"sample_id": 5785, "db_id": "customer_complaints", "score": 1, "gold_sql": "SELECT phone_number FROM customers UNION SELECT phone_number FROM staff", "pred_sql": "SELECT phone_number FROM Customers UNION SELECT phone_number FROM Staff", "source_tables": ["staff", "customers"], "error_info": ""}, {"sample_id": 5786, "db_id": "customer_complaints", "score": 1, "gold_sql": "SELECT product_description FROM products WHERE product_name = 'Chocolate'", "pred_sql": "SELECT product_description FROM Products WHERE product_name = 'Chocolate'", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5787, "db_id": "customer_complaints", "score": 1, "gold_sql": "SELECT product_description FROM products WHERE product_name = 'Chocolate'", "pred_sql": "SELECT product_description FROM Products WHERE product_name = 'Chocolate'", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5788, "db_id": "customer_complaints", "score": 1, "gold_sql": "SELECT product_name, product_category_code FROM products ORDER BY product_price DESC LIMIT 1", "pred_sql": "SELECT product_name, product_category_code FROM Products ORDER BY product_price DESC LIMIT 1", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5789, "db_id": "customer_complaints", "score": 1, "gold_sql": "SELECT product_name, product_category_code FROM products ORDER BY product_price DESC LIMIT 1", "pred_sql": "SELECT product_name, product_category_code FROM Products WHERE product_price = (SELECT MAX(product_price) FROM Products)", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5790, "db_id": "customer_complaints", "score": 1, "gold_sql": "SELECT product_price FROM products WHERE NOT product_id IN (SELECT product_id FROM complaints)", "pred_sql": "SELECT product_id, product_price FROM Products WHERE NOT product_id IN (SELECT product_id FROM Complaints)", "source_tables": ["complaints", "products"], "error_info": ""}, {"sample_id": 5791, "db_id": "customer_complaints", "score": 1, "gold_sql": "SELECT product_price FROM products WHERE NOT product_id IN (SELECT product_id FROM complaints)", "pred_sql": "SELECT product_id, product_name, product_price FROM Products WHERE NOT product_id IN (SELECT product_id FROM Complaints)", "source_tables": ["complaints", "products"], "error_info": ""}, {"sample_id": 5792, "db_id": "customer_complaints", "score": 1, "gold_sql": "SELECT AVG(product_price), product_category_code FROM products GROUP BY product_category_code", "pred_sql": "SELECT product_category_code, AVG(product_price) AS average_price FROM Products GROUP BY product_category_code", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5793, "db_id": "customer_complaints", "score": 1, "gold_sql": "SELECT AVG(product_price), product_category_code FROM products GROUP BY product_category_code", "pred_sql": "SELECT product_category_code, AVG(product_price) AS average_price FROM Products GROUP BY product_category_code", "source_tables": ["products"], "error_info": ""}, {"sample_id": 5794, "db_id": "customer_complaints", "score": 0, "gold_sql": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id = t2.staff_id JOIN products AS t3 ON t2.product_id = t3.product_id ORDER BY t3.product_price LIMIT 1", "pred_sql": "SELECT s.last_name FROM Staff AS s JOIN Complaints AS c ON s.staff_id = c.staff_id JOIN Products AS p ON c.product_id = p.product_id WHERE p.product_price = (SELECT MIN(product_price) FROM Products)", "source_tables": ["complaints", "products", "staff"], "error_info": "Result not equal"}, {"sample_id": 5795, "db_id": "customer_complaints", "score": 0, "gold_sql": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id = t2.staff_id JOIN products AS t3 ON t2.product_id = t3.product_id ORDER BY t3.product_price LIMIT 1", "pred_sql": "SELECT Staff.last_name FROM Staff JOIN Complaints ON Staff.staff_id = Complaints.staff_id JOIN Products ON Complaints.product_id = Products.product_id WHERE Products.product_price = (SELECT MIN(product_price) FROM Products)", "source_tables": ["complaints", "products", "staff"], "error_info": "Result not equal"}, {"sample_id": 5796, "db_id": "customer_complaints", "score": 0, "gold_sql": "SELECT complaint_status_code FROM complaints GROUP BY complaint_status_code HAVING COUNT(*) > 3", "pred_sql": "SELECT complaint_status_code, COUNT(*) AS record_count FROM Complaints GROUP BY complaint_status_code HAVING COUNT(*) > 3", "source_tables": ["complaints"], "error_info": "Result not equal"}, {"sample_id": 5797, "db_id": "customer_complaints", "score": 1, "gold_sql": "SELECT complaint_status_code FROM complaints GROUP BY complaint_status_code HAVING COUNT(*) > 3", "pred_sql": "SELECT complaint_status_code FROM Complaints GROUP BY complaint_status_code HAVING COUNT(complaint_id) > 3", "source_tables": ["complaints"], "error_info": ""}, {"sample_id": 5798, "db_id": "customer_complaints", "score": 1, "gold_sql": "SELECT last_name FROM staff WHERE email_address LIKE '%wrau%'", "pred_sql": "SELECT last_name FROM Staff WHERE email_address LIKE '%wrau%'", "source_tables": ["staff"], "error_info": ""}, {"sample_id": 5799, "db_id": "customer_complaints", "score": 1, "gold_sql": "SELECT last_name FROM staff WHERE email_address LIKE '%wrau%'", "pred_sql": "SELECT last_name FROM Staff WHERE email_address LIKE '%wrau%'", "source_tables": ["staff"], "error_info": ""}, {"sample_id": 5800, "db_id": "customer_complaints", "score": 0, "gold_sql": "SELECT COUNT(*) FROM customers GROUP BY customer_type_code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT customer_type_code, COUNT(customer_id) AS customer_count FROM Customers GROUP BY customer_type_code ORDER BY customer_count DESC LIMIT 1", "source_tables": ["customers"], "error_info": "Result not equal"}, {"sample_id": 5801, "db_id": "customer_complaints", "score": 0, "gold_sql": "SELECT COUNT(*) FROM customers GROUP BY customer_type_code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT customer_type_code, COUNT(customer_id) AS customer_count FROM Customers GROUP BY customer_type_code ORDER BY customer_count DESC LIMIT 1", "source_tables": ["customers"], "error_info": "Result not equal"}, {"sample_id": 5802, "db_id": "customer_complaints", "score": 0, "gold_sql": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id = t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1", "pred_sql": "SELECT Staff.last_name FROM Staff JOIN Complaints ON Staff.staff_id = Complaints.staff_id WHERE Complaints.date_complaint_raised = (SELECT MIN(date_complaint_raised) FROM Complaints)", "source_tables": ["complaints", "staff"], "error_info": "Result not equal"}, {"sample_id": 5803, "db_id": "customer_complaints", "score": 1, "gold_sql": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id = t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1", "pred_sql": "SELECT last_name FROM Staff WHERE staff_id = (SELECT staff_id FROM Complaints ORDER BY date_complaint_raised ASC LIMIT 1)", "source_tables": ["complaints", "staff"], "error_info": ""}, {"sample_id": 5804, "db_id": "customer_complaints", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT complaint_type_code) FROM complaints", "pred_sql": "SELECT COUNT(DISTINCT complaint_type_code) AS distinct_complaint_type_count FROM Complaints", "source_tables": ["complaints"], "error_info": ""}, {"sample_id": 5805, "db_id": "customer_complaints", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT complaint_type_code) FROM complaints", "pred_sql": "SELECT COUNT(DISTINCT complaint_type_code) AS different_complaint_types FROM Complaints", "source_tables": ["complaints"], "error_info": ""}, {"sample_id": 5806, "db_id": "customer_complaints", "score": 1, "gold_sql": "SELECT address_line_1, address_line_2 FROM customers WHERE email_address = 'vbogisich@example.org'", "pred_sql": "SELECT address_line_1, address_line_2 FROM Customers WHERE email_address = 'vbogisich@example.org'", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 5807, "db_id": "customer_complaints", "score": 1, "gold_sql": "SELECT address_line_1, address_line_2 FROM customers WHERE email_address = 'vbogisich@example.org'", "pred_sql": "SELECT address_line_1, address_line_2 FROM Customers WHERE email_address = 'vbogisich@example.org'", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 5808, "db_id": "customer_complaints", "score": 1, "gold_sql": "SELECT complaint_status_code, COUNT(*) FROM complaints WHERE complaint_type_code = 'Product Failure' GROUP BY complaint_status_code", "pred_sql": "SELECT complaint_status_code, COUNT(*) AS number_of_complaints FROM Complaints WHERE complaint_type_code = 'Product Failure' GROUP BY complaint_status_code", "source_tables": ["complaints"], "error_info": ""}, {"sample_id": 5809, "db_id": "customer_complaints", "score": 1, "gold_sql": "SELECT complaint_status_code, COUNT(*) FROM complaints WHERE complaint_type_code = 'Product Failure' GROUP BY complaint_status_code", "pred_sql": "SELECT complaint_status_code, COUNT(*) AS complaint_count FROM Complaints WHERE complaint_type_code = 'Product Failure' GROUP BY complaint_status_code", "source_tables": ["complaints"], "error_info": ""}, {"sample_id": 5810, "db_id": "customer_complaints", "score": 0, "gold_sql": "SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id = t2.staff_id GROUP BY t2.staff_id ORDER BY COUNT(*) LIMIT 5", "pred_sql": "SELECT first_name FROM Staff WHERE staff_id IN (SELECT staff_id FROM Complaints GROUP BY staff_id ORDER BY COUNT(complaint_id) DESC LIMIT 5)", "source_tables": ["complaints", "staff"], "error_info": "Result not equal"}, {"sample_id": 5811, "db_id": "customer_complaints", "score": 0, "gold_sql": "SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id = t2.staff_id GROUP BY t2.staff_id ORDER BY COUNT(*) LIMIT 5", "pred_sql": "SELECT first_name FROM Staff WHERE staff_id IN (SELECT staff_id FROM Complaints GROUP BY staff_id ORDER BY COUNT(complaint_id) DESC LIMIT 5)", "source_tables": ["complaints", "staff"], "error_info": "Result not equal"}, {"sample_id": 5812, "db_id": "customer_complaints", "score": 0, "gold_sql": "SELECT state FROM customers GROUP BY state ORDER BY COUNT(*) LIMIT 1", "pred_sql": "SELECT state, COUNT(customer_id) AS customer_count FROM Customers GROUP BY state ORDER BY customer_count DESC LIMIT 1", "source_tables": ["customers"], "error_info": "Result not equal"}, {"sample_id": 5813, "db_id": "customer_complaints", "score": 0, "gold_sql": "SELECT state FROM customers GROUP BY state ORDER BY COUNT(*) LIMIT 1", "pred_sql": "SELECT state, COUNT(customer_id) AS customer_count FROM Customers GROUP BY state ORDER BY customer_count DESC LIMIT 1", "source_tables": ["customers"], "error_info": "Result not equal"}, {"sample_id": 5814, "db_id": "workshop_paper", "score": 1, "gold_sql": "SELECT COUNT(*) FROM submission", "pred_sql": "SELECT COUNT(*) AS total_submissions FROM submission", "source_tables": ["submission"], "error_info": ""}, {"sample_id": 5815, "db_id": "workshop_paper", "score": 1, "gold_sql": "SELECT COUNT(*) FROM submission", "pred_sql": "SELECT COUNT(*) AS NumberOfSubmissions FROM submission", "source_tables": ["submission"], "error_info": ""}, {"sample_id": 5816, "db_id": "workshop_paper", "score": 1, "gold_sql": "SELECT Author FROM submission ORDER BY Scores ASC", "pred_sql": "SELECT Author FROM submission ORDER BY Scores ASC", "source_tables": ["submission"], "error_info": ""}, {"sample_id": 5817, "db_id": "workshop_paper", "score": 1, "gold_sql": "SELECT Author FROM submission ORDER BY Scores ASC", "pred_sql": "SELECT submission.Author FROM submission ORDER BY submission.Scores ASC", "source_tables": ["submission"], "error_info": ""}, {"sample_id": 5818, "db_id": "workshop_paper", "score": 1, "gold_sql": "SELECT Author, College FROM submission", "pred_sql": "SELECT submission.Author, submission.College FROM submission", "source_tables": ["submission"], "error_info": ""}, {"sample_id": 5819, "db_id": "workshop_paper", "score": 1, "gold_sql": "SELECT Author, College FROM submission", "pred_sql": "SELECT Author, College FROM submission", "source_tables": ["submission"], "error_info": ""}, {"sample_id": 5820, "db_id": "workshop_paper", "score": 0, "gold_sql": "SELECT Author FROM submission WHERE College = 'Florida' OR College = 'Temple'", "pred_sql": "SELECT DISTINCT submission.Author FROM submission JOIN Acceptance ON submission.Submission_ID = Acceptance.Submission_ID JOIN workshop ON Acceptance.Workshop_ID = workshop.Workshop_ID WHERE submission.College IN (SELECT College FROM submission WHERE College IN ('Florida', 'Temple'))", "source_tables": ["submission"], "error_info": "Result not equal"}, {"sample_id": 5821, "db_id": "workshop_paper", "score": 0, "gold_sql": "SELECT Author FROM submission WHERE College = 'Florida' OR College = 'Temple'", "pred_sql": "SELECT DISTINCT submission.Author FROM submission JOIN Acceptance ON submission.Submission_ID = Acceptance.Submission_ID WHERE submission.College IN (SELECT College_ID FROM college WHERE College_Name IN ('Florida', 'Temple'))", "source_tables": ["submission"], "error_info": "Predction Execution Error:no such table: college"}, {"sample_id": 5822, "db_id": "workshop_paper", "score": 1, "gold_sql": "SELECT AVG(Scores) FROM submission", "pred_sql": "SELECT AVG(Scores) AS Average_Score FROM submission", "source_tables": ["submission"], "error_info": ""}, {"sample_id": 5823, "db_id": "workshop_paper", "score": 1, "gold_sql": "SELECT AVG(Scores) FROM submission", "pred_sql": "SELECT AVG(Scores) AS Average_Score FROM submission", "source_tables": ["submission"], "error_info": ""}, {"sample_id": 5824, "db_id": "workshop_paper", "score": 1, "gold_sql": "SELECT Author FROM submission ORDER BY Scores DESC LIMIT 1", "pred_sql": "SELECT Author FROM submission WHERE Scores = (SELECT MAX(Scores) FROM submission)", "source_tables": ["submission"], "error_info": ""}, {"sample_id": 5825, "db_id": "workshop_paper", "score": 1, "gold_sql": "SELECT Author FROM submission ORDER BY Scores DESC LIMIT 1", "pred_sql": "SELECT Author FROM submission WHERE Scores = (SELECT MAX(Scores) FROM submission)", "source_tables": ["submission"], "error_info": ""}, {"sample_id": 5826, "db_id": "workshop_paper", "score": 1, "gold_sql": "SELECT College, COUNT(*) FROM submission GROUP BY College", "pred_sql": "SELECT college, COUNT(DISTINCT Author) AS NumberOfAuthors FROM submission GROUP BY college", "source_tables": ["submission"], "error_info": ""}, {"sample_id": 5827, "db_id": "workshop_paper", "score": 1, "gold_sql": "SELECT College, COUNT(*) FROM submission GROUP BY College", "pred_sql": "SELECT College, COUNT(DISTINCT Author) AS Author_Count FROM submission GROUP BY College", "source_tables": ["submission"], "error_info": ""}, {"sample_id": 5828, "db_id": "workshop_paper", "score": 0, "gold_sql": "SELECT College FROM submission GROUP BY College ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT College, COUNT(*) AS SubmissionCount FROM submission GROUP BY College ORDER BY SubmissionCount DESC LIMIT 1", "source_tables": ["submission"], "error_info": "Result not equal"}, {"sample_id": 5829, "db_id": "workshop_paper", "score": 0, "gold_sql": "SELECT College FROM submission GROUP BY College ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT College, COUNT(DISTINCT Author) AS AuthorCount FROM submission GROUP BY College ORDER BY AuthorCount DESC LIMIT 1", "source_tables": ["submission"], "error_info": "Result not equal"}, {"sample_id": 5830, "db_id": "workshop_paper", "score": 1, "gold_sql": "SELECT College FROM submission WHERE Scores > 90 INTERSECT SELECT College FROM submission WHERE Scores < 80", "pred_sql": "SELECT DISTINCT s.College FROM submission AS s WHERE s.Scores > 90 AND s.College IN (SELECT s2.College FROM submission AS s2 WHERE s2.Scores < 80)", "source_tables": ["submission"], "error_info": ""}, {"sample_id": 5831, "db_id": "workshop_paper", "score": 1, "gold_sql": "SELECT College FROM submission WHERE Scores > 90 INTERSECT SELECT College FROM submission WHERE Scores < 80", "pred_sql": "SELECT DISTINCT s1.College FROM submission AS s1 JOIN submission AS s2 ON s1.College = s2.College WHERE s1.Scores > 90 AND s2.Scores < 80", "source_tables": ["submission"], "error_info": ""}, {"sample_id": 5832, "db_id": "workshop_paper", "score": 1, "gold_sql": "SELECT T2.Author, T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID", "pred_sql": "SELECT submission.Author, Acceptance.Result FROM submission JOIN Acceptance ON submission.Submission_ID = Acceptance.Submission_ID", "source_tables": ["acceptance", "submission"], "error_info": ""}, {"sample_id": 5833, "db_id": "workshop_paper", "score": 1, "gold_sql": "SELECT T2.Author, T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID", "pred_sql": "SELECT submission.Author, Acceptance.Result FROM submission JOIN Acceptance ON submission.Submission_ID = Acceptance.Submission_ID", "source_tables": ["acceptance", "submission"], "error_info": ""}, {"sample_id": 5834, "db_id": "workshop_paper", "score": 0, "gold_sql": "SELECT T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY T2.Scores DESC LIMIT 1", "pred_sql": "SELECT * FROM submission WHERE Scores = (SELECT MAX(Scores) FROM submission)", "source_tables": ["acceptance", "submission"], "error_info": "Result not equal"}, {"sample_id": 5835, "db_id": "workshop_paper", "score": 0, "gold_sql": "SELECT T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY T2.Scores DESC LIMIT 1", "pred_sql": "SELECT submission.Submission_ID, submission.Scores, Acceptance.Result FROM submission JOIN Acceptance ON submission.Submission_ID = Acceptance.Submission_ID WHERE Acceptance.Result = 'accepted' ORDER BY submission.Scores DESC LIMIT 1", "source_tables": ["acceptance", "submission"], "error_info": "Result not equal"}, {"sample_id": 5836, "db_id": "workshop_paper", "score": 1, "gold_sql": "SELECT T2.Author, COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID GROUP BY T2.Author", "pred_sql": "SELECT submission.Author, COUNT(DISTINCT Acceptance.Workshop_ID) AS Number_of_Workshops FROM submission JOIN Acceptance ON submission.Submission_ID = Acceptance.Submission_ID GROUP BY submission.Author", "source_tables": ["acceptance", "submission"], "error_info": ""}, {"sample_id": 5837, "db_id": "workshop_paper", "score": 1, "gold_sql": "SELECT T2.Author, COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID GROUP BY T2.Author", "pred_sql": "SELECT submission.Author, COUNT(DISTINCT Acceptance.Workshop_ID) AS Workshop_Count FROM submission JOIN Acceptance ON submission.Submission_ID = Acceptance.Submission_ID GROUP BY submission.Author", "source_tables": ["acceptance", "submission"], "error_info": ""}, {"sample_id": 5838, "db_id": "workshop_paper", "score": 1, "gold_sql": "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id) > 1", "pred_sql": "SELECT s.Author FROM submission AS s JOIN Acceptance AS a ON s.Submission_ID = a.Submission_ID GROUP BY s.Author HAVING COUNT(DISTINCT a.Workshop_ID) > 1", "source_tables": ["acceptance", "submission"], "error_info": ""}, {"sample_id": 5839, "db_id": "workshop_paper", "score": 1, "gold_sql": "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id) > 1", "pred_sql": "SELECT submission.Author FROM submission JOIN Acceptance ON submission.Submission_ID = Acceptance.Submission_ID GROUP BY submission.Author HAVING COUNT(DISTINCT Acceptance.Workshop_ID) > 1", "source_tables": ["acceptance", "submission"], "error_info": ""}, {"sample_id": 5840, "db_id": "workshop_paper", "score": 1, "gold_sql": "SELECT Date, Venue FROM workshop ORDER BY Venue", "pred_sql": "SELECT Date, Venue FROM workshop ORDER BY Venue ASC", "source_tables": ["workshop"], "error_info": ""}, {"sample_id": 5841, "db_id": "workshop_paper", "score": 1, "gold_sql": "SELECT Date, Venue FROM workshop ORDER BY Venue", "pred_sql": "SELECT Date, Venue FROM workshop ORDER BY Venue ASC", "source_tables": ["workshop"], "error_info": ""}, {"sample_id": 5842, "db_id": "workshop_paper", "score": 1, "gold_sql": "SELECT Author FROM submission WHERE NOT Submission_ID IN (SELECT Submission_ID FROM acceptance)", "pred_sql": "SELECT DISTINCT Author FROM submission WHERE NOT Author IN (SELECT DISTINCT Author FROM submission INNER JOIN Acceptance ON submission.Submission_ID = Acceptance.Submission_ID)", "source_tables": ["acceptance", "submission"], "error_info": ""}, {"sample_id": 5843, "db_id": "workshop_paper", "score": 1, "gold_sql": "SELECT Author FROM submission WHERE NOT Submission_ID IN (SELECT Submission_ID FROM acceptance)", "pred_sql": "SELECT DISTINCT Author FROM submission WHERE NOT Author IN (SELECT DISTINCT Author FROM submission INNER JOIN Acceptance ON submission.Submission_ID = Acceptance.Submission_ID)", "source_tables": ["acceptance", "submission"], "error_info": ""}, {"sample_id": 5844, "db_id": "tracking_share_transactions", "score": 1, "gold_sql": "SELECT COUNT(*) FROM INVESTORS", "pred_sql": "SELECT COUNT(*) AS total_investors FROM Investors", "source_tables": ["investors"], "error_info": ""}, {"sample_id": 5845, "db_id": "tracking_share_transactions", "score": 0, "gold_sql": "SELECT Investor_details FROM INVESTORS", "pred_sql": "SELECT * FROM Investors", "source_tables": ["investors"], "error_info": "Result not equal"}, {"sample_id": 5846, "db_id": "tracking_share_transactions", "score": 1, "gold_sql": "SELECT DISTINCT lot_details FROM LOTS", "pred_sql": "SELECT DISTINCT lot_details FROM Lots", "source_tables": ["lots"], "error_info": ""}, {"sample_id": 5847, "db_id": "tracking_share_transactions", "score": 1, "gold_sql": "SELECT MAX(amount_of_transaction) FROM TRANSACTIONS", "pred_sql": "SELECT MAX(amount_of_transaction) AS max_transaction_amount FROM Transactions", "source_tables": ["transactions"], "error_info": ""}, {"sample_id": 5848, "db_id": "tracking_share_transactions", "score": 1, "gold_sql": "SELECT date_of_transaction, share_count FROM TRANSACTIONS", "pred_sql": "SELECT date_of_transaction, share_count FROM Transactions", "source_tables": ["transactions"], "error_info": ""}, {"sample_id": 5849, "db_id": "tracking_share_transactions", "score": 1, "gold_sql": "SELECT SUM(share_count) FROM TRANSACTIONS", "pred_sql": "SELECT SUM(share_count) AS total_shares FROM Transactions", "source_tables": ["transactions"], "error_info": ""}, {"sample_id": 5850, "db_id": "tracking_share_transactions", "score": 1, "gold_sql": "SELECT transaction_id FROM TRANSACTIONS WHERE transaction_type_code = 'PUR'", "pred_sql": "SELECT transaction_id FROM Transactions WHERE transaction_type_code = 'PUR'", "source_tables": ["transactions"], "error_info": ""}, {"sample_id": 5851, "db_id": "tracking_share_transactions", "score": 0, "gold_sql": "SELECT date_of_transaction FROM TRANSACTIONS WHERE transaction_type_code = 'SALE'", "pred_sql": "SELECT date_of_transaction FROM Transactions WHERE transaction_type_code = (SELECT transaction_type_code FROM Ref_Transaction_Types WHERE transaction_type_description = 'SALE')", "source_tables": ["transactions"], "error_info": "Result not equal"}, {"sample_id": 5852, "db_id": "tracking_share_transactions", "score": 1, "gold_sql": "SELECT AVG(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code = 'SALE'", "pred_sql": "SELECT AVG(amount_of_transaction) AS average_transaction_amount FROM Transactions WHERE transaction_type_code = 'SALE'", "source_tables": ["transactions"], "error_info": ""}, {"sample_id": 5853, "db_id": "tracking_share_transactions", "score": 1, "gold_sql": "SELECT transaction_type_description FROM Ref_Transaction_Types WHERE transaction_type_code = 'PUR'", "pred_sql": "SELECT transaction_type_description FROM Ref_Transaction_Types WHERE transaction_type_code = 'PUR'", "source_tables": ["ref_transaction_types"], "error_info": ""}, {"sample_id": 5854, "db_id": "tracking_share_transactions", "score": 1, "gold_sql": "SELECT MIN(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code = 'PUR' AND share_count > 50", "pred_sql": "SELECT MIN(amount_of_transaction) AS min_transaction_amount FROM Transactions WHERE transaction_type_code = 'PUR' AND share_count > 50", "source_tables": ["transactions"], "error_info": ""}, {"sample_id": 5855, "db_id": "tracking_share_transactions", "score": 1, "gold_sql": "SELECT MAX(share_count) FROM TRANSACTIONS WHERE amount_of_transaction < 10000", "pred_sql": "SELECT MAX(share_count) AS max_share_count FROM Transactions WHERE amount_of_transaction < 10000", "source_tables": ["transactions"], "error_info": ""}, {"sample_id": 5856, "db_id": "tracking_share_transactions", "score": 1, "gold_sql": "SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count > 100 OR amount_of_transaction > 1000", "pred_sql": "SELECT date_of_transaction FROM Transactions WHERE share_count > 100 OR amount_of_transaction > 1000", "source_tables": ["transactions"], "error_info": ""}, {"sample_id": 5857, "db_id": "tracking_share_transactions", "score": 1, "gold_sql": "SELECT T1.transaction_type_description, T2.date_of_transaction FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code = T2.transaction_type_code WHERE T2.share_count < 10", "pred_sql": "SELECT Ref_Transaction_Types.transaction_type_description, Transactions.date_of_transaction FROM Transactions JOIN Ref_Transaction_Types ON Transactions.transaction_type_code = Ref_Transaction_Types.transaction_type_code WHERE Transactions.share_count < 10", "source_tables": ["transactions", "ref_transaction_types"], "error_info": ""}, {"sample_id": 5858, "db_id": "tracking_share_transactions", "score": 0, "gold_sql": "SELECT T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100", "pred_sql": "SELECT DISTINCT Investors.investor_id, Investors.Investor_details FROM Investors JOIN Transactions ON Investors.investor_id = Transactions.investor_id WHERE Transactions.share_count > 100", "source_tables": ["transactions", "investors"], "error_info": "Result not equal"}, {"sample_id": 5859, "db_id": "tracking_share_transactions", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT transaction_type_code) FROM TRANSACTIONS", "pred_sql": "SELECT COUNT(DISTINCT transaction_type_code) AS distinct_transaction_types FROM Transactions", "source_tables": ["transactions"], "error_info": ""}, {"sample_id": 5860, "db_id": "tracking_share_transactions", "score": 1, "gold_sql": "SELECT lot_details, investor_id FROM LOTS", "pred_sql": "SELECT Lots.lot_details, Lots.investor_id FROM Lots", "source_tables": ["lots"], "error_info": ""}, {"sample_id": 5861, "db_id": "tracking_share_transactions", "score": 1, "gold_sql": "SELECT T2.lot_details FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = 'l'", "pred_sql": "SELECT Lots.lot_details FROM Lots JOIN Investors ON Lots.investor_id = Investors.investor_id WHERE Investors.Investor_details = 'l'", "source_tables": ["lots", "investors"], "error_info": ""}, {"sample_id": 5862, "db_id": "tracking_share_transactions", "score": 1, "gold_sql": "SELECT T1.purchase_details FROM PURCHASES AS T1 JOIN TRANSACTIONS AS T2 ON T1.purchase_transaction_id = T2.transaction_id WHERE T2.amount_of_transaction > 10000", "pred_sql": "SELECT Purchases.purchase_details FROM Transactions JOIN Purchases ON Transactions.transaction_id = Purchases.purchase_transaction_id WHERE Transactions.amount_of_transaction > 10000", "source_tables": ["purchases", "transactions"], "error_info": ""}, {"sample_id": 5863, "db_id": "tracking_share_transactions", "score": 1, "gold_sql": "SELECT T1.sales_details, T2.date_of_transaction FROM SALES AS T1 JOIN TRANSACTIONS AS T2 ON T1.sales_transaction_id = T2.transaction_id WHERE T2.amount_of_transaction < 3000", "pred_sql": "SELECT Sales.sales_details, Transactions.date_of_transaction FROM Transactions JOIN Sales ON Transactions.transaction_id = Sales.sales_transaction_id WHERE Transactions.amount_of_transaction < 3000", "source_tables": ["sales", "transactions"], "error_info": ""}, {"sample_id": 5864, "db_id": "tracking_share_transactions", "score": 0, "gold_sql": "SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON T1.lot_id = T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id = T3.transaction_id WHERE T3.share_count < 50", "pred_sql": "SELECT Lots.lot_details FROM Lots JOIN Transactions_Lots ON Lots.lot_id = Transactions_Lots.lot_id JOIN Transactions ON Transactions_Lots.transaction_id = Transactions.transaction_id WHERE Transactions.share_count < 50", "source_tables": ["lots", "transactions_lots", "transactions"], "error_info": "Result not equal"}, {"sample_id": 5865, "db_id": "tracking_share_transactions", "score": 0, "gold_sql": "SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON T1.lot_id = T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id = T3.transaction_id WHERE T3.share_count > 100 AND T3.transaction_type_code = 'PUR'", "pred_sql": "SELECT Lots.lot_details FROM Lots JOIN Transactions_Lots ON Lots.lot_id = Transactions_Lots.lot_id JOIN Transactions ON Transactions_Lots.transaction_id = Transactions.transaction_id WHERE Transactions.share_count > 100 AND Transactions.transaction_type_code = 'PUR'", "source_tables": ["lots", "transactions_lots", "transactions"], "error_info": "Result not equal"}, {"sample_id": 5866, "db_id": "tracking_share_transactions", "score": 0, "gold_sql": "SELECT transaction_type_code, AVG(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code", "pred_sql": "SELECT rt.transaction_type_description, AVG(t.amount_of_transaction) AS average_transaction_amount FROM Transactions AS t JOIN Ref_Transaction_Types AS rt ON t.transaction_type_code = rt.transaction_type_code GROUP BY rt.transaction_type_description", "source_tables": ["transactions"], "error_info": "Result not equal"}, {"sample_id": 5867, "db_id": "tracking_share_transactions", "score": 0, "gold_sql": "SELECT transaction_type_code, MAX(share_count), MIN(share_count) FROM TRANSACTIONS GROUP BY transaction_type_code", "pred_sql": "SELECT rt.transaction_type_description, MAX(t.share_count) AS max_share_count, MIN(t.share_count) AS min_share_count FROM Transactions AS t JOIN Ref_Transaction_Types AS rt ON t.transaction_type_code = rt.transaction_type_code GROUP BY rt.transaction_type_description", "source_tables": ["transactions"], "error_info": "Result not equal"}, {"sample_id": 5868, "db_id": "tracking_share_transactions", "score": 1, "gold_sql": "SELECT investor_id, AVG(share_count) FROM TRANSACTIONS GROUP BY investor_id", "pred_sql": "SELECT investor_id, AVG(share_count) AS average_share_count FROM Transactions GROUP BY investor_id", "source_tables": ["transactions"], "error_info": ""}, {"sample_id": 5869, "db_id": "tracking_share_transactions", "score": 1, "gold_sql": "SELECT investor_id, AVG(share_count) FROM TRANSACTIONS GROUP BY investor_id ORDER BY AVG(share_count)", "pred_sql": "SELECT investor_id, AVG(share_count) AS average_share_count FROM Transactions GROUP BY investor_id ORDER BY average_share_count", "source_tables": ["transactions"], "error_info": ""}, {"sample_id": 5870, "db_id": "tracking_share_transactions", "score": 1, "gold_sql": "SELECT investor_id, AVG(amount_of_transaction) FROM TRANSACTIONS GROUP BY investor_id", "pred_sql": "SELECT investor_id, AVG(amount_of_transaction) AS average_transaction_amount FROM Transactions GROUP BY investor_id", "source_tables": ["transactions"], "error_info": ""}, {"sample_id": 5871, "db_id": "tracking_share_transactions", "score": 1, "gold_sql": "SELECT T2.lot_id, AVG(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id = T2.transaction_id GROUP BY T2.lot_id", "pred_sql": "SELECT Lots.lot_id, AVG(Transactions.amount_of_transaction) AS average_transaction_amount FROM Transactions JOIN Transactions_Lots ON Transactions.transaction_id = Transactions_Lots.transaction_id JOIN Lots ON Transactions_Lots.lot_id = Lots.lot_id GROUP BY Lots.lot_id", "source_tables": ["transactions_lots", "transactions"], "error_info": ""}, {"sample_id": 5872, "db_id": "tracking_share_transactions", "score": 1, "gold_sql": "SELECT T2.lot_id, AVG(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id = T2.transaction_id GROUP BY T2.lot_id ORDER BY AVG(amount_of_transaction)", "pred_sql": "SELECT Lots.lot_id, AVG(Transactions.amount_of_transaction) AS average_transaction_amount FROM Transactions JOIN Transactions_Lots ON Transactions.transaction_id = Transactions_Lots.transaction_id JOIN Lots ON Transactions_Lots.lot_id = Lots.lot_id GROUP BY Lots.lot_id ORDER BY average_transaction_amount", "source_tables": ["transactions_lots", "transactions"], "error_info": ""}, {"sample_id": 5873, "db_id": "tracking_share_transactions", "score": 0, "gold_sql": "SELECT investor_id, COUNT(*) FROM TRANSACTIONS WHERE transaction_type_code = 'SALE' GROUP BY investor_id", "pred_sql": "SELECT Investors.investor_id, COUNT(Transactions.transaction_id) AS transaction_count FROM Investors JOIN Transactions ON Investors.investor_id = Transactions.investor_id JOIN Ref_Transaction_Types ON Transactions.transaction_type_code = Ref_Transaction_Types.transaction_type_code WHERE Ref_Transaction_Types.transaction_type_description = 'SALE' GROUP BY Investors.investor_id HAVING transaction_count > 0", "source_tables": ["transactions"], "error_info": "Result not equal"}, {"sample_id": 5874, "db_id": "tracking_share_transactions", "score": 1, "gold_sql": "SELECT investor_id, COUNT(*) FROM TRANSACTIONS GROUP BY investor_id", "pred_sql": "SELECT investor_id, COUNT(transaction_id) AS transaction_count FROM Transactions GROUP BY investor_id", "source_tables": ["transactions"], "error_info": ""}, {"sample_id": 5875, "db_id": "tracking_share_transactions", "score": 1, "gold_sql": "SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) ASC LIMIT 1", "pred_sql": "SELECT transaction_type_code FROM Transactions GROUP BY transaction_type_code ORDER BY COUNT(*) ASC LIMIT 1", "source_tables": ["transactions"], "error_info": ""}, {"sample_id": 5876, "db_id": "tracking_share_transactions", "score": 0, "gold_sql": "SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT transaction_type_code, COUNT(*) AS frequency FROM Transactions GROUP BY transaction_type_code ORDER BY frequency DESC LIMIT 1", "source_tables": ["transactions"], "error_info": "Result not equal"}, {"sample_id": 5877, "db_id": "tracking_share_transactions", "score": 1, "gold_sql": "SELECT T1.transaction_type_description FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code = T2.transaction_type_code GROUP BY T1.transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT transaction_type_description FROM Ref_Transaction_Types WHERE transaction_type_code = (SELECT transaction_type_code FROM Transactions GROUP BY transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1)", "source_tables": ["transactions", "ref_transaction_types"], "error_info": ""}, {"sample_id": 5878, "db_id": "tracking_share_transactions", "score": 1, "gold_sql": "SELECT T2.investor_id, T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Investors.investor_id, Investors.Investor_details FROM Investors JOIN Transactions ON Investors.investor_id = Transactions.investor_id GROUP BY Investors.investor_id, Investors.Investor_details ORDER BY COUNT(Transactions.transaction_id) DESC LIMIT 1", "source_tables": ["transactions", "investors"], "error_info": ""}, {"sample_id": 5879, "db_id": "tracking_share_transactions", "score": 1, "gold_sql": "SELECT T2.investor_id, T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3", "pred_sql": "SELECT Investors.investor_id, Investors.Investor_details FROM Investors JOIN Transactions ON Investors.investor_id = Transactions.investor_id GROUP BY Investors.investor_id ORDER BY COUNT(Transactions.transaction_id) DESC LIMIT 3", "source_tables": ["transactions", "investors"], "error_info": ""}, {"sample_id": 5880, "db_id": "tracking_share_transactions", "score": 1, "gold_sql": "SELECT T2.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id GROUP BY T2.investor_id HAVING COUNT(*) >= 2", "pred_sql": "SELECT investor_id FROM Transactions GROUP BY investor_id HAVING COUNT(transaction_id) >= 2", "source_tables": ["transactions", "investors"], "error_info": ""}, {"sample_id": 5881, "db_id": "tracking_share_transactions", "score": 1, "gold_sql": "SELECT T2.investor_id, T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = 'SALE' GROUP BY T2.investor_id HAVING COUNT(*) >= 2", "pred_sql": "SELECT Investors.investor_id, Investors.Investor_details FROM Investors JOIN Transactions ON Investors.investor_id = Transactions.investor_id WHERE Transactions.transaction_type_code = 'SALE' GROUP BY Investors.investor_id HAVING COUNT(Transactions.transaction_id) >= 2", "source_tables": ["transactions", "investors"], "error_info": ""}, {"sample_id": 5882, "db_id": "tracking_share_transactions", "score": 1, "gold_sql": "SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count >= 100 OR amount_of_transaction >= 100", "pred_sql": "SELECT date_of_transaction FROM Transactions WHERE share_count >= 100 OR amount_of_transaction > 100", "source_tables": ["transactions"], "error_info": ""}, {"sample_id": 5883, "db_id": "tracking_share_transactions", "score": 0, "gold_sql": "SELECT sales_details FROM sales UNION SELECT purchase_details FROM purchases", "pred_sql": "SELECT Sales.sales_transaction_id, Sales.sales_details, Purchases.purchase_transaction_id, Purchases.purchase_details FROM Sales LEFT JOIN Transactions ON Sales.sales_transaction_id = Transactions.transaction_id LEFT JOIN Purchases ON Transactions.transaction_id = Purchases.purchase_transaction_id", "source_tables": ["sales", "purchases"], "error_info": "Result not equal"}, {"sample_id": 5884, "db_id": "tracking_share_transactions", "score": 0, "gold_sql": "SELECT lot_details FROM Lots EXCEPT SELECT T1.lot_details FROM Lots AS T1 JOIN transactions_lots AS T2 ON T1.lot_id = T2.lot_id", "pred_sql": "SELECT * FROM Lots WHERE NOT lot_id IN (SELECT lot_id FROM Transactions_Lots)", "source_tables": ["lots", "transactions_lots"], "error_info": "Result not equal"}, {"sample_id": 5885, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT COUNT(*) FROM HOTELS", "pred_sql": "SELECT COUNT(*) AS total_available_hotels FROM Hotels", "source_tables": ["hotels"], "error_info": ""}, {"sample_id": 5886, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT COUNT(*) FROM HOTELS", "pred_sql": "SELECT COUNT(*) AS total_hotels FROM Hotels", "source_tables": ["hotels"], "error_info": ""}, {"sample_id": 5887, "db_id": "cre_Theme_park", "score": 0, "gold_sql": "SELECT price_range FROM HOTELS", "pred_sql": "SELECT DISTINCT price_range FROM Hotels", "source_tables": ["hotels"], "error_info": "Result not equal"}, {"sample_id": 5888, "db_id": "cre_Theme_park", "score": 0, "gold_sql": "SELECT price_range FROM HOTELS", "pred_sql": "SELECT DISTINCT price_range FROM Hotels", "source_tables": ["hotels"], "error_info": "Result not equal"}, {"sample_id": 5889, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT DISTINCT Location_Name FROM LOCATIONS", "pred_sql": "SELECT DISTINCT Location_Name FROM Locations", "source_tables": ["locations"], "error_info": ""}, {"sample_id": 5890, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT DISTINCT Location_Name FROM LOCATIONS", "pred_sql": "SELECT DISTINCT Location_Name FROM Locations", "source_tables": ["locations"], "error_info": ""}, {"sample_id": 5891, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT Name, Other_Details FROM Staff", "pred_sql": "SELECT Name, Other_Details FROM Staff", "source_tables": ["staff"], "error_info": ""}, {"sample_id": 5892, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT Name, Other_Details FROM Staff", "pred_sql": "SELECT Name, Other_Details FROM Staff", "source_tables": ["staff"], "error_info": ""}, {"sample_id": 5893, "db_id": "cre_Theme_park", "score": 0, "gold_sql": "SELECT Tourist_Details FROM VISITORS", "pred_sql": "SELECT * FROM Visitors", "source_tables": ["visitors"], "error_info": "Result not equal"}, {"sample_id": 5894, "db_id": "cre_Theme_park", "score": 0, "gold_sql": "SELECT Tourist_Details FROM VISITORS", "pred_sql": "SELECT * FROM Visitors", "source_tables": ["visitors"], "error_info": "Result not equal"}, {"sample_id": 5895, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT price_range FROM HOTELS WHERE star_rating_code = '5'", "pred_sql": "SELECT price_range FROM Hotels WHERE star_rating_code = '5'", "source_tables": ["hotels"], "error_info": ""}, {"sample_id": 5896, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT price_range FROM HOTELS WHERE star_rating_code = '5'", "pred_sql": "SELECT DISTINCT price_range FROM Hotels WHERE star_rating_code = '5'", "source_tables": ["hotels"], "error_info": ""}, {"sample_id": 5897, "db_id": "cre_Theme_park", "score": 0, "gold_sql": "SELECT AVG(price_range) FROM HOTELS WHERE star_rating_code = '5' AND pets_allowed_yn = 1", "pred_sql": "SELECT AVG(price_range) AS average_price_range FROM Hotels WHERE star_rating_code = '5' AND pets_allowed_yn = 'Yes'", "source_tables": ["hotels"], "error_info": "Result not equal"}, {"sample_id": 5898, "db_id": "cre_Theme_park", "score": 0, "gold_sql": "SELECT AVG(price_range) FROM HOTELS WHERE star_rating_code = '5' AND pets_allowed_yn = 1", "pred_sql": "SELECT AVG(price_range) AS average_price_range FROM Hotels WHERE star_rating_code = '5' AND pets_allowed_yn = 'Yes'", "source_tables": ["hotels"], "error_info": "Result not equal"}, {"sample_id": 5899, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT Address FROM LOCATIONS WHERE Location_Name = 'UK Gallery'", "pred_sql": "SELECT Address FROM Locations WHERE Location_Name = 'UK Gallery'", "source_tables": ["locations"], "error_info": ""}, {"sample_id": 5900, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT Address FROM LOCATIONS WHERE Location_Name = 'UK Gallery'", "pred_sql": "SELECT Address FROM Locations WHERE Location_Name = 'UK Gallery'", "source_tables": ["locations"], "error_info": ""}, {"sample_id": 5901, "db_id": "cre_Theme_park", "score": 0, "gold_sql": "SELECT Other_Details FROM LOCATIONS WHERE Location_Name = 'UK Gallery'", "pred_sql": "SELECT * FROM Locations WHERE Location_Name = 'UK Gallery'", "source_tables": ["locations"], "error_info": "Result not equal"}, {"sample_id": 5902, "db_id": "cre_Theme_park", "score": 0, "gold_sql": "SELECT Other_Details FROM LOCATIONS WHERE Location_Name = 'UK Gallery'", "pred_sql": "SELECT * FROM Locations WHERE Location_Name = 'UK Gallery'", "source_tables": ["locations"], "error_info": "Result not equal"}, {"sample_id": 5903, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE '%film%'", "pred_sql": "SELECT Location_Name FROM Locations WHERE Location_Name LIKE '%film%'", "source_tables": ["locations"], "error_info": ""}, {"sample_id": 5904, "db_id": "cre_Theme_park", "score": 0, "gold_sql": "SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE '%film%'", "pred_sql": "SELECT * FROM Locations WHERE Location_Name LIKE '%film%'", "source_tables": ["locations"], "error_info": "Result not equal"}, {"sample_id": 5905, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT Name) FROM PHOTOS", "pred_sql": "SELECT COUNT(DISTINCT Name) AS distinct_photo_names_count FROM Photos", "source_tables": ["photos"], "error_info": ""}, {"sample_id": 5906, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT Name) FROM PHOTOS", "pred_sql": "SELECT COUNT(DISTINCT Name) AS distinct_photo_names_count FROM Photos", "source_tables": ["photos"], "error_info": ""}, {"sample_id": 5907, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT DISTINCT Visit_Date FROM VISITS", "pred_sql": "SELECT DISTINCT Visit_Date FROM Visits", "source_tables": ["visits"], "error_info": ""}, {"sample_id": 5908, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT DISTINCT Visit_Date FROM VISITS", "pred_sql": "SELECT DISTINCT Visit_Date FROM Visits", "source_tables": ["visits"], "error_info": ""}, {"sample_id": 5909, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There = 'bus'", "pred_sql": "SELECT Name FROM Tourist_Attractions WHERE How_to_Get_There LIKE '%bus%'", "source_tables": ["tourist_attractions"], "error_info": ""}, {"sample_id": 5910, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There = 'bus'", "pred_sql": "SELECT Name FROM Tourist_Attractions WHERE How_to_Get_There LIKE '%bus%'", "source_tables": ["tourist_attractions"], "error_info": ""}, {"sample_id": 5911, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT Name, Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There = 'bus' OR How_to_Get_There = 'walk'", "pred_sql": "SELECT Name, Opening_Hours FROM Tourist_Attractions WHERE How_to_Get_There LIKE '%bus%' OR How_to_Get_There LIKE '%walk%'", "source_tables": ["tourist_attractions"], "error_info": ""}, {"sample_id": 5912, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT Name, Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There = 'bus' OR How_to_Get_There = 'walk'", "pred_sql": "SELECT Name, Opening_Hours FROM Tourist_Attractions WHERE How_to_Get_There LIKE '%bus%' OR How_to_Get_There LIKE '%walk%'", "source_tables": ["tourist_attractions"], "error_info": ""}, {"sample_id": 5913, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code = T2.star_rating_code WHERE T1.price_range > 10000", "pred_sql": "SELECT Ref_Hotel_Star_Ratings.star_rating_description FROM Hotels JOIN Ref_Hotel_Star_Ratings ON Hotels.star_rating_code = Ref_Hotel_Star_Ratings.star_rating_code WHERE Hotels.price_range > '10000'", "source_tables": ["ref_hotel_star_ratings", "hotels"], "error_info": ""}, {"sample_id": 5914, "db_id": "cre_Theme_park", "score": 0, "gold_sql": "SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code = T2.star_rating_code WHERE T1.price_range > 10000", "pred_sql": "SELECT Ref_Hotel_Star_Ratings.star_rating_description FROM Hotels JOIN Ref_Hotel_Star_Ratings ON Hotels.star_rating_code = Ref_Hotel_Star_Ratings.star_rating_code WHERE Hotels.price_range = 'More than 10000'", "source_tables": ["ref_hotel_star_ratings", "hotels"], "error_info": "Result not equal"}, {"sample_id": 5915, "db_id": "cre_Theme_park", "score": 0, "gold_sql": "SELECT T1.Museum_Details, T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID = T2.Tourist_Attraction_ID", "pred_sql": "SELECT Museum_ID, Museum_Details FROM Museums", "source_tables": ["tourist_attractions", "museums"], "error_info": "Result not equal"}, {"sample_id": 5916, "db_id": "cre_Theme_park", "score": 0, "gold_sql": "SELECT T1.Museum_Details, T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID = T2.Tourist_Attraction_ID", "pred_sql": "SELECT Museum_ID, Museum_Details FROM Museums", "source_tables": ["tourist_attractions", "museums"], "error_info": "Result not equal"}, {"sample_id": 5917, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T1.Name = 'game1'", "pred_sql": "SELECT ta.Name FROM Photos AS p JOIN Tourist_Attractions AS ta ON p.Tourist_Attraction_ID = ta.Tourist_Attraction_ID WHERE p.Name = 'game1'", "source_tables": ["photos", "tourist_attractions"], "error_info": ""}, {"sample_id": 5918, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T1.Name = 'game1'", "pred_sql": "SELECT Tourist_Attractions.Name FROM Photos JOIN Tourist_Attractions ON Photos.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID WHERE Photos.Name = 'game1'", "source_tables": ["photos", "tourist_attractions"], "error_info": ""}, {"sample_id": 5919, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT T1.Name, T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T2.Name = 'film festival'", "pred_sql": "SELECT p.Name, p.Description FROM Photos AS p JOIN Tourist_Attractions AS ta ON p.Tourist_Attraction_ID = ta.Tourist_Attraction_ID WHERE ta.Name = 'film festival'", "source_tables": ["photos", "tourist_attractions"], "error_info": ""}, {"sample_id": 5920, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT T1.Name, T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T2.Name = 'film festival'", "pred_sql": "SELECT p.Name, p.Description FROM Photos AS p JOIN Tourist_Attractions AS ta ON p.Tourist_Attraction_ID = ta.Tourist_Attraction_ID WHERE ta.Name = 'film festival'", "source_tables": ["photos", "tourist_attractions"], "error_info": ""}, {"sample_id": 5921, "db_id": "cre_Theme_park", "score": 0, "gold_sql": "SELECT T1.Royal_Family_Details, T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID = T2.Tourist_Attraction_ID", "pred_sql": "SELECT Tourist_Attractions.Name, Tourist_Attractions.Description, Tourist_Attractions.How_to_Get_There, Tourist_Attractions.Other_Details FROM Tourist_Attractions JOIN Royal_Family ON Tourist_Attractions.Tourist_Attraction_ID = Royal_Family.Royal_Family_ID", "source_tables": ["royal_family", "tourist_attractions"], "error_info": "Result not equal"}, {"sample_id": 5922, "db_id": "cre_Theme_park", "score": 0, "gold_sql": "SELECT T1.Royal_Family_Details, T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID = T2.Tourist_Attraction_ID", "pred_sql": "SELECT Tourist_Attractions.*, Tourist_Attractions.How_to_Get_There FROM Tourist_Attractions INNER JOIN Royal_Family ON Tourist_Attractions.Tourist_Attraction_ID = Royal_Family.Royal_Family_ID", "source_tables": ["royal_family", "tourist_attractions"], "error_info": "Result not equal"}, {"sample_id": 5923, "db_id": "cre_Theme_park", "score": 0, "gold_sql": "SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID = T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There = 'walk'", "pred_sql": "SELECT Shop_ID, Shop_Details FROM Shops WHERE Shop_ID IN (SELECT Tourist_Attraction_ID FROM Tourist_Attractions WHERE How_to_Get_There LIKE '%walk%')", "source_tables": ["shops", "tourist_attractions"], "error_info": "Result not equal"}, {"sample_id": 5924, "db_id": "cre_Theme_park", "score": 0, "gold_sql": "SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID = T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There = 'walk'", "pred_sql": "SELECT * FROM Shops WHERE Shop_ID IN (SELECT Tourist_Attraction_ID FROM Tourist_Attractions WHERE How_to_Get_There LIKE '%walk%')", "source_tables": ["shops", "tourist_attractions"], "error_info": "Result not equal"}, {"sample_id": 5925, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT T1.Name FROM STAFF AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T2.Name = 'US museum'", "pred_sql": "SELECT Staff.Name FROM Staff JOIN Tourist_Attractions ON Staff.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID WHERE Tourist_Attractions.Name = 'US museum'", "source_tables": ["staff", "tourist_attractions"], "error_info": ""}, {"sample_id": 5926, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT T1.Name FROM STAFF AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T2.Name = 'US museum'", "pred_sql": "SELECT Staff.Name FROM Staff JOIN Tourist_Attractions ON Staff.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID WHERE Tourist_Attractions.Name = 'US museum'", "source_tables": ["staff", "tourist_attractions"], "error_info": ""}, {"sample_id": 5927, "db_id": "cre_Theme_park", "score": 0, "gold_sql": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID = T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There = 'walk' OR T2.How_to_Get_There = 'bus'", "pred_sql": "SELECT Market_ID, Market_Details FROM Street_Markets WHERE Market_ID IN (SELECT Tourist_Attraction_ID FROM Tourist_Attractions WHERE How_to_Get_There LIKE '%walk%' OR How_to_Get_There LIKE '%bus%')", "source_tables": ["street_markets", "tourist_attractions"], "error_info": "Result not equal"}, {"sample_id": 5928, "db_id": "cre_Theme_park", "score": 0, "gold_sql": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID = T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There = 'walk' OR T2.How_to_Get_There = 'bus'", "pred_sql": "SELECT * FROM Street_Markets WHERE Market_Details LIKE '%walk%' OR Market_Details LIKE '%bus%'", "source_tables": ["street_markets", "tourist_attractions"], "error_info": "Result not equal"}, {"sample_id": 5929, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT T2.Visit_Date, T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID = T2.Tourist_ID WHERE T1.Tourist_Details = 'Vincent'", "pred_sql": "SELECT Visits.Visit_Date, Visits.Visit_Details FROM Visits JOIN Visitors ON Visits.Tourist_ID = Visitors.Tourist_ID WHERE Visitors.Tourist_Details = 'Vincent'", "source_tables": ["visits", "visitors"], "error_info": ""}, {"sample_id": 5930, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT T2.Visit_Date, T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID = T2.Tourist_ID WHERE T1.Tourist_Details = 'Vincent'", "pred_sql": "SELECT Visits.Visit_Date, Visits.Visit_Details FROM Visits JOIN Visitors ON Visits.Tourist_ID = Visitors.Tourist_ID WHERE Visitors.Tourist_Details = 'Vincent'", "source_tables": ["visits", "visitors"], "error_info": ""}, {"sample_id": 5931, "db_id": "cre_Theme_park", "score": 0, "gold_sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID = T3.Tourist_ID WHERE T3.Tourist_Details = 'Vincent'", "pred_sql": "SELECT ta.Name, ta.Description, ta.Opening_Hours FROM Tourist_Attractions AS ta JOIN Visits AS v ON ta.Tourist_Attraction_ID = v.Tourist_Attraction_ID JOIN Visitors AS vi ON v.Tourist_ID = vi.Tourist_ID WHERE vi.Tourist_Details = 'Vincent'", "source_tables": ["visits", "visitors", "tourist_attractions"], "error_info": "Result not equal"}, {"sample_id": 5932, "db_id": "cre_Theme_park", "score": 0, "gold_sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID = T3.Tourist_ID WHERE T3.Tourist_Details = 'Vincent'", "pred_sql": "SELECT Tourist_Attractions.Name, Tourist_Attractions.Description, Visits.Visit_Date FROM Visits JOIN Visitors ON Visits.Tourist_ID = Visitors.Tourist_ID JOIN Tourist_Attractions ON Visits.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID WHERE Visitors.Tourist_Details = 'Vincent'", "source_tables": ["visits", "visitors", "tourist_attractions"], "error_info": "Result not equal"}, {"sample_id": 5933, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT T1.Name, T3.Visit_Date FROM Tourist_Attractions AS T1, VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = 'Vincent' OR T2.Tourist_Details = 'Vivian'", "pred_sql": "SELECT ta.Name AS Tourist_Attraction_Name, v.Visit_Date FROM Visits AS v JOIN Tourist_Attractions AS ta ON v.Tourist_Attraction_ID = ta.Tourist_Attraction_ID JOIN Visitors AS vi ON v.Tourist_ID = vi.Tourist_ID WHERE vi.Tourist_Details IN ('Vincent', 'Vivian')", "source_tables": ["visits", "visitors", "tourist_attractions"], "error_info": ""}, {"sample_id": 5934, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT T1.Name, T3.Visit_Date FROM Tourist_Attractions AS T1, VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = 'Vincent' OR T2.Tourist_Details = 'Vivian'", "pred_sql": "SELECT ta.Name, v.Visit_Date FROM Tourist_Attractions AS ta JOIN Visits AS v ON ta.Tourist_Attraction_ID = v.Tourist_Attraction_ID JOIN Visitors AS vi ON v.Tourist_ID = vi.Tourist_ID WHERE vi.Tourist_Details IN ('Vincent', 'Vivian')", "source_tables": ["visits", "visitors", "tourist_attractions"], "error_info": ""}, {"sample_id": 5935, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT star_rating_code, AVG(price_range) FROM HOTELS GROUP BY star_rating_code", "pred_sql": "SELECT star_rating_code, AVG(price_range) AS average_price FROM Hotels GROUP BY star_rating_code", "source_tables": ["hotels"], "error_info": ""}, {"sample_id": 5936, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT star_rating_code, AVG(price_range) FROM HOTELS GROUP BY star_rating_code", "pred_sql": "SELECT h.star_rating_code, AVG(h.price_range) AS average_price_range FROM Hotels AS h GROUP BY h.star_rating_code", "source_tables": ["hotels"], "error_info": ""}, {"sample_id": 5937, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT pets_allowed_yn, AVG(price_range) FROM HOTELS GROUP BY pets_allowed_yn", "pred_sql": "SELECT pets_allowed_yn, AVG(price_range) AS average_price FROM Hotels GROUP BY pets_allowed_yn", "source_tables": ["hotels"], "error_info": ""}, {"sample_id": 5938, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT pets_allowed_yn, AVG(price_range) FROM HOTELS GROUP BY pets_allowed_yn", "pred_sql": "SELECT pets_allowed_yn, AVG(price_range) AS average_price FROM Hotels GROUP BY pets_allowed_yn", "source_tables": ["hotels"], "error_info": ""}, {"sample_id": 5939, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT hotel_id, star_rating_code FROM HOTELS ORDER BY price_range ASC", "pred_sql": "SELECT hotel_id, star_rating_code FROM Hotels ORDER BY price_range ASC", "source_tables": ["hotels"], "error_info": ""}, {"sample_id": 5940, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT hotel_id, star_rating_code FROM HOTELS ORDER BY price_range ASC", "pred_sql": "SELECT hotel_id, star_rating_code FROM Hotels ORDER BY price_range ASC", "source_tables": ["hotels"], "error_info": ""}, {"sample_id": 5941, "db_id": "cre_Theme_park", "score": 0, "gold_sql": "SELECT other_hotel_details FROM HOTELS ORDER BY price_range DESC LIMIT 3", "pred_sql": "SELECT * FROM Hotels ORDER BY price_range DESC LIMIT 3", "source_tables": ["hotels"], "error_info": "Result not equal"}, {"sample_id": 5942, "db_id": "cre_Theme_park", "score": 0, "gold_sql": "SELECT other_hotel_details FROM HOTELS ORDER BY price_range DESC LIMIT 3", "pred_sql": "SELECT * FROM Hotels ORDER BY price_range DESC LIMIT 3", "source_tables": ["hotels"], "error_info": "Result not equal"}, {"sample_id": 5943, "db_id": "cre_Theme_park", "score": 0, "gold_sql": "SELECT other_hotel_details, star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3", "pred_sql": "SELECT Hotels.hotel_id, Hotels.other_hotel_details, Ref_Hotel_Star_Ratings.star_rating_description FROM Hotels JOIN Ref_Hotel_Star_Ratings ON Hotels.star_rating_code = Ref_Hotel_Star_Ratings.star_rating_code ORDER BY Hotels.price_range ASC LIMIT 3", "source_tables": ["hotels"], "error_info": "Result not equal"}, {"sample_id": 5944, "db_id": "cre_Theme_park", "score": 0, "gold_sql": "SELECT other_hotel_details, star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3", "pred_sql": "SELECT Hotels.hotel_id, Hotels.other_hotel_details, Ref_Hotel_Star_Ratings.star_rating_description FROM Hotels JOIN Ref_Hotel_Star_Ratings ON Hotels.star_rating_code = Ref_Hotel_Star_Ratings.star_rating_code ORDER BY Hotels.price_range ASC LIMIT 3", "source_tables": ["hotels"], "error_info": "Result not equal"}, {"sample_id": 5945, "db_id": "cre_Theme_park", "score": 0, "gold_sql": "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT How_to_Get_There, COUNT(*) AS Count FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY Count DESC LIMIT 1", "source_tables": ["tourist_attractions"], "error_info": "Result not equal"}, {"sample_id": 5946, "db_id": "cre_Theme_park", "score": 0, "gold_sql": "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT How_to_Get_There, COUNT(*) AS usage_count FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY usage_count DESC LIMIT 1", "source_tables": ["tourist_attractions"], "error_info": "Result not equal"}, {"sample_id": 5947, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT T1.Attraction_Type_Description, T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code = T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Ref_Attraction_Types.Attraction_Type_Code, Ref_Attraction_Types.Attraction_Type_Description FROM Ref_Attraction_Types JOIN Tourist_Attractions ON Ref_Attraction_Types.Attraction_Type_Code = Tourist_Attractions.Attraction_Type_Code GROUP BY Ref_Attraction_Types.Attraction_Type_Code ORDER BY COUNT(Tourist_Attractions.Tourist_Attraction_ID) DESC LIMIT 1", "source_tables": ["tourist_attractions", "ref_attraction_types"], "error_info": ""}, {"sample_id": 5948, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT T1.Attraction_Type_Description, T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code = T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Ref_Attraction_Types.Attraction_Type_Code, Ref_Attraction_Types.Attraction_Type_Description FROM Ref_Attraction_Types JOIN Tourist_Attractions ON Ref_Attraction_Types.Attraction_Type_Code = Tourist_Attractions.Attraction_Type_Code GROUP BY Ref_Attraction_Types.Attraction_Type_Code, Ref_Attraction_Types.Attraction_Type_Description ORDER BY COUNT(Tourist_Attractions.Tourist_Attraction_ID) DESC LIMIT 1", "source_tables": ["tourist_attractions", "ref_attraction_types"], "error_info": ""}, {"sample_id": 5949, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT How_to_Get_There, COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There", "pred_sql": "SELECT How_to_Get_There, COUNT(Tourist_Attraction_ID) AS Number_of_Attractions FROM Tourist_Attractions GROUP BY How_to_Get_There", "source_tables": ["tourist_attractions"], "error_info": ""}, {"sample_id": 5950, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT How_to_Get_There, COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There", "pred_sql": "SELECT How_to_Get_There, COUNT(*) AS Number_of_Attractions FROM Tourist_Attractions GROUP BY How_to_Get_There", "source_tables": ["tourist_attractions"], "error_info": ""}, {"sample_id": 5951, "db_id": "cre_Theme_park", "score": 0, "gold_sql": "SELECT T1.Name, T2.Tourist_Attraction_ID, COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID", "pred_sql": "SELECT Tourist_Attraction_ID, Name, COUNT(Visit_ID) AS Number_of_Visits FROM Tourist_Attractions LEFT JOIN Visits ON Tourist_Attractions.Tourist_Attraction_ID = Visits.Tourist_Attraction_ID GROUP BY Tourist_Attraction_ID, Name", "source_tables": ["visits", "tourist_attractions"], "error_info": "Predction Execution Error:ambiguous column name: Tourist_Attraction_ID"}, {"sample_id": 5952, "db_id": "cre_Theme_park", "score": 0, "gold_sql": "SELECT T1.Name, T2.Tourist_Attraction_ID, COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID", "pred_sql": "SELECT Tourist_Attraction_ID, Name, COUNT(Visit_ID) AS Number_of_Visits FROM Tourist_Attractions LEFT JOIN Visits ON Tourist_Attractions.Tourist_Attraction_ID = Visits.Tourist_Attraction_ID GROUP BY Tourist_Attraction_ID, Name", "source_tables": ["visits", "tourist_attractions"], "error_info": "Predction Execution Error:ambiguous column name: Tourist_Attraction_ID"}, {"sample_id": 5953, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT T1.Name, T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING COUNT(*) >= 2", "pred_sql": "SELECT Tourist_Attraction_ID, Name FROM Tourist_Attractions WHERE Tourist_Attraction_ID IN (SELECT Tourist_Attraction_ID FROM Visits GROUP BY Tourist_Attraction_ID HAVING COUNT(*) >= 2)", "source_tables": ["visits", "tourist_attractions"], "error_info": ""}, {"sample_id": 5954, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT T1.Name, T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING COUNT(*) >= 2", "pred_sql": "SELECT Tourist_Attraction_ID, Name FROM Tourist_Attractions WHERE Tourist_Attraction_ID IN (SELECT Tourist_Attraction_ID FROM Visits GROUP BY Tourist_Attraction_ID HAVING COUNT(*) >= 2)", "source_tables": ["visits", "tourist_attractions"], "error_info": ""}, {"sample_id": 5955, "db_id": "cre_Theme_park", "score": 0, "gold_sql": "SELECT T1.Name, T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING COUNT(*) <= 1", "pred_sql": "SELECT Tourist_Attraction_ID, Name FROM Tourist_Attractions WHERE NOT Tourist_Attraction_ID IN (SELECT Tourist_Attraction_ID FROM Visits GROUP BY Tourist_Attraction_ID HAVING COUNT(Tourist_ID) > 1)", "source_tables": ["visits", "tourist_attractions"], "error_info": "Result not equal"}, {"sample_id": 5956, "db_id": "cre_Theme_park", "score": 0, "gold_sql": "SELECT T1.Name, T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING COUNT(*) <= 1", "pred_sql": "SELECT Name, Tourist_Attraction_ID FROM Tourist_Attractions WHERE NOT Tourist_Attraction_ID IN (SELECT Tourist_Attraction_ID FROM Visits GROUP BY Tourist_Attraction_ID HAVING COUNT(*) > 1)", "source_tables": ["visits", "tourist_attractions"], "error_info": "Result not equal"}, {"sample_id": 5957, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = '660 Shea Crescent' OR T2.How_to_Get_There = 'walk'", "pred_sql": "SELECT Name FROM Tourist_Attractions WHERE How_to_Get_There LIKE '%walk%' OR Location_ID IN (SELECT Location_ID FROM Locations WHERE Address = '660 Shea Crescent')", "source_tables": ["tourist_attractions", "locations"], "error_info": ""}, {"sample_id": 5958, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = '660 Shea Crescent' OR T2.How_to_Get_There = 'walk'", "pred_sql": "SELECT Name FROM Tourist_Attractions WHERE How_to_Get_There LIKE '%walk%' OR Location_ID IN (SELECT Location_ID FROM Locations WHERE Address = '660 Shea Crescent')", "source_tables": ["tourist_attractions", "locations"], "error_info": ""}, {"sample_id": 5959, "db_id": "cre_Theme_park", "score": 0, "gold_sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id = T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID = T3.Feature_ID WHERE T3.feature_Details = 'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id = T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID = T3.Feature_ID WHERE T3.feature_Details = 'shopping'", "pred_sql": "SELECT ta.Name FROM Tourist_Attractions AS ta JOIN Tourist_Attraction_Features AS taf ON ta.Tourist_Attraction_ID = taf.Tourist_Attraction_ID JOIN Features AS f ON taf.Feature_ID = f.Feature_ID WHERE f.Feature_Details IN ('parking', 'shopping')", "source_tables": ["features", "tourist_attractions", "tourist_attraction_features"], "error_info": "Result not equal"}, {"sample_id": 5960, "db_id": "cre_Theme_park", "score": 0, "gold_sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id = T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID = T3.Feature_ID WHERE T3.feature_Details = 'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id = T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID = T3.Feature_ID WHERE T3.feature_Details = 'shopping'", "pred_sql": "SELECT ta.Name FROM Tourist_Attractions AS ta JOIN Tourist_Attraction_Features AS taf ON ta.Tourist_Attraction_ID = taf.Tourist_Attraction_ID JOIN Features AS f ON taf.Feature_ID = f.Feature_ID WHERE f.Feature_Details IN ('parking', 'shopping')", "source_tables": ["features", "tourist_attractions", "tourist_attraction_features"], "error_info": "Result not equal"}, {"sample_id": 5961, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = '254 Ottilie Junction' OR T2.How_to_Get_There = 'bus'", "pred_sql": "SELECT Name FROM Tourist_Attractions WHERE How_to_Get_There LIKE '%bus%' OR Location_ID IN (SELECT Location_ID FROM Locations WHERE Address = '254 Ottilie Junction')", "source_tables": ["tourist_attractions", "locations"], "error_info": ""}, {"sample_id": 5962, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = '254 Ottilie Junction' OR T2.How_to_Get_There = 'bus'", "pred_sql": "SELECT Name FROM Tourist_Attractions WHERE How_to_Get_There LIKE '%bus%' OR Location_ID IN (SELECT Location_ID FROM Locations WHERE Address = '254 Ottilie Junction')", "source_tables": ["tourist_attractions", "locations"], "error_info": ""}, {"sample_id": 5963, "db_id": "cre_Theme_park", "score": 0, "gold_sql": "SELECT T1.Name FROM Tourist_Attractions AS T1, VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = 'Vincent' INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1, VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = 'Marcelle'", "pred_sql": "SELECT ta.Name FROM Tourist_Attractions AS ta JOIN Visits AS v ON ta.Tourist_Attraction_ID = v.Tourist_Attraction_ID JOIN Visitors AS vi ON v.Tourist_ID = vi.Tourist_ID WHERE vi.Tourist_Details IN ('Vincent', 'Marcelle')", "source_tables": ["visits", "visitors", "tourist_attractions"], "error_info": "Result not equal"}, {"sample_id": 5964, "db_id": "cre_Theme_park", "score": 0, "gold_sql": "SELECT T1.Name FROM Tourist_Attractions AS T1, VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = 'Vincent' INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1, VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = 'Marcelle'", "pred_sql": "SELECT ta.Name FROM Tourist_Attractions AS ta JOIN Visits AS v ON ta.Tourist_Attraction_ID = v.Tourist_Attraction_ID JOIN Visitors AS vi ON v.Tourist_ID = vi.Tourist_ID WHERE vi.Tourist_Details IN ('Vincent', 'Marcelle')", "source_tables": ["visits", "visitors", "tourist_attractions"], "error_info": "Result not equal"}, {"sample_id": 5965, "db_id": "cre_Theme_park", "score": 0, "gold_sql": "SELECT T1.Name FROM Tourist_Attractions AS T1, VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = 'Alison' EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1, VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = 'Rosalind'", "pred_sql": "SELECT ta.Name FROM Tourist_Attractions AS ta JOIN Visits AS v1 ON ta.Tourist_Attraction_ID = v1.Tourist_Attraction_ID JOIN Visitors AS vi1 ON v1.Tourist_ID = vi1.Tourist_ID WHERE vi1.Tourist_Details = 'Alison' AND NOT ta.Tourist_Attraction_ID IN (SELECT ta2.Tourist_Attraction_ID FROM Visits AS v2 JOIN Visitors AS vi2 ON v2.Tourist_ID = vi2.Tourist_ID WHERE vi2.Tourist_Details = 'Rosalind')", "source_tables": ["visits", "visitors", "tourist_attractions"], "error_info": "Predction Execution Error:no such column: ta2.Tourist_Attraction_ID"}, {"sample_id": 5966, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT T1.Name FROM Tourist_Attractions AS T1, VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = 'Alison' EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1, VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = 'Rosalind'", "pred_sql": "SELECT ta.Name FROM Tourist_Attractions AS ta JOIN Visits AS v1 ON ta.Tourist_Attraction_ID = v1.Tourist_Attraction_ID JOIN Visitors AS vi1 ON v1.Tourist_ID = vi1.Tourist_ID WHERE vi1.Tourist_Details = 'Alison' AND NOT ta.Tourist_Attraction_ID IN (SELECT ta2.Tourist_Attraction_ID FROM Tourist_Attractions AS ta2 JOIN Visits AS v2 ON ta2.Tourist_Attraction_ID = v2.Tourist_Attraction_ID JOIN Visitors AS vi2 ON v2.Tourist_ID = vi2.Tourist_ID WHERE vi2.Tourist_Details = 'Rosalind')", "source_tables": ["visits", "visitors", "tourist_attractions"], "error_info": ""}, {"sample_id": 5967, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Visitors WHERE NOT Tourist_ID IN (SELECT Tourist_ID FROM Visits)", "pred_sql": "SELECT COUNT(*) AS Tourist_Count FROM Visitors WHERE NOT Tourist_ID IN (SELECT Tourist_ID FROM Visits)", "source_tables": ["visits", "visitors"], "error_info": ""}, {"sample_id": 5968, "db_id": "cre_Theme_park", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Visitors WHERE NOT Tourist_ID IN (SELECT Tourist_ID FROM Visits)", "pred_sql": "SELECT COUNT(*) AS Tourist_Count FROM Visitors WHERE NOT Tourist_ID IN (SELECT Tourist_ID FROM Visits)", "source_tables": ["visits", "visitors"], "error_info": ""}, {"sample_id": 5969, "db_id": "game_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Video_games", "pred_sql": "SELECT COUNT(*) AS Total_Video_Games FROM Video_Games", "source_tables": ["video_games"], "error_info": ""}, {"sample_id": 5970, "db_id": "game_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Video_games", "pred_sql": "SELECT COUNT(*) AS Total_Video_Games FROM Video_Games", "source_tables": ["video_games"], "error_info": ""}, {"sample_id": 5971, "db_id": "game_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT gtype) FROM Video_games", "pred_sql": "SELECT COUNT(DISTINCT GType) AS NumberOfGameTypes FROM Video_Games", "source_tables": ["video_games"], "error_info": ""}, {"sample_id": 5972, "db_id": "game_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT gtype) FROM Video_games", "pred_sql": "SELECT COUNT(DISTINCT GType) AS DifferentGameTypes FROM Video_Games", "source_tables": ["video_games"], "error_info": ""}, {"sample_id": 5973, "db_id": "game_1", "score": 1, "gold_sql": "SELECT DISTINCT gtype FROM Video_games", "pred_sql": "SELECT DISTINCT GType FROM Video_Games", "source_tables": ["video_games"], "error_info": ""}, {"sample_id": 5974, "db_id": "game_1", "score": 1, "gold_sql": "SELECT DISTINCT gtype FROM Video_games", "pred_sql": "SELECT DISTINCT GType FROM Video_Games", "source_tables": ["video_games"], "error_info": ""}, {"sample_id": 5975, "db_id": "game_1", "score": 1, "gold_sql": "SELECT gname, gtype FROM Video_games ORDER BY gname", "pred_sql": "SELECT GName, GType FROM Video_Games ORDER BY GName", "source_tables": ["video_games"], "error_info": ""}, {"sample_id": 5976, "db_id": "game_1", "score": 1, "gold_sql": "SELECT gname, gtype FROM Video_games ORDER BY gname", "pred_sql": "SELECT GName, GType FROM Video_Games ORDER BY GName ASC", "source_tables": ["video_games"], "error_info": ""}, {"sample_id": 5977, "db_id": "game_1", "score": 0, "gold_sql": "SELECT gname FROM Video_games WHERE gtype = 'Collectible card game'", "pred_sql": "SELECT * FROM Video_Games WHERE GType = 'Collectible card game'", "source_tables": ["video_games"], "error_info": "Result not equal"}, {"sample_id": 5978, "db_id": "game_1", "score": 0, "gold_sql": "SELECT gname FROM Video_games WHERE gtype = 'Collectible card game'", "pred_sql": "SELECT GName FROM Video_Games WHERE GType = 'collectible cards'", "source_tables": ["video_games"], "error_info": "Result not equal"}, {"sample_id": 5979, "db_id": "game_1", "score": 1, "gold_sql": "SELECT gtype FROM Video_games WHERE gname = 'Call of Destiny'", "pred_sql": "SELECT GType FROM Video_Games WHERE GName = 'Call of Destiny'", "source_tables": ["video_games"], "error_info": ""}, {"sample_id": 5980, "db_id": "game_1", "score": 1, "gold_sql": "SELECT gtype FROM Video_games WHERE gname = 'Call of Destiny'", "pred_sql": "SELECT GType FROM Video_Games WHERE GName = 'Call of Destiny'", "source_tables": ["video_games"], "error_info": ""}, {"sample_id": 5981, "db_id": "game_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Video_games WHERE gtype = 'Massively multiplayer online game'", "pred_sql": "SELECT COUNT(*) AS NumberOfGames FROM Video_Games WHERE GType = 'Massively multiplayer online game'", "source_tables": ["video_games"], "error_info": ""}, {"sample_id": 5982, "db_id": "game_1", "score": 0, "gold_sql": "SELECT COUNT(*) FROM Video_games WHERE gtype = 'Massively multiplayer online game'", "pred_sql": "SELECT COUNT(*) AS NumberOfGames FROM Video_Games WHERE GType = 'Massively multiplayer online'", "source_tables": ["video_games"], "error_info": "Result not equal"}, {"sample_id": 5983, "db_id": "game_1", "score": 1, "gold_sql": "SELECT gtype, COUNT(*) FROM Video_games GROUP BY gtype", "pred_sql": "SELECT GType, COUNT(GameID) AS NumberOfGames FROM Video_Games GROUP BY GType", "source_tables": ["video_games"], "error_info": ""}, {"sample_id": 5984, "db_id": "game_1", "score": 1, "gold_sql": "SELECT gtype, COUNT(*) FROM Video_games GROUP BY gtype", "pred_sql": "SELECT GType, COUNT(*) AS GameCount FROM Video_Games GROUP BY GType", "source_tables": ["video_games"], "error_info": ""}, {"sample_id": 5985, "db_id": "game_1", "score": 0, "gold_sql": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT GType, COUNT(*) AS NumberOfGames FROM Video_Games GROUP BY GType ORDER BY NumberOfGames DESC LIMIT 1", "source_tables": ["video_games"], "error_info": "Result not equal"}, {"sample_id": 5986, "db_id": "game_1", "score": 0, "gold_sql": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT GType, COUNT(GameID) AS TotalGames FROM Video_Games GROUP BY GType ORDER BY TotalGames DESC LIMIT 1", "source_tables": ["video_games"], "error_info": "Result not equal"}, {"sample_id": 5987, "db_id": "game_1", "score": 1, "gold_sql": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY COUNT(*) LIMIT 1", "pred_sql": "SELECT GType FROM Video_Games GROUP BY GType ORDER BY COUNT(GameID) ASC LIMIT 1", "source_tables": ["video_games"], "error_info": ""}, {"sample_id": 5988, "db_id": "game_1", "score": 0, "gold_sql": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY COUNT(*) LIMIT 1", "pred_sql": "SELECT GType, COUNT(GameID) AS GameCount FROM Video_Games GROUP BY GType ORDER BY GameCount ASC LIMIT 1", "source_tables": ["video_games"], "error_info": "Result not equal"}, {"sample_id": 5989, "db_id": "game_1", "score": 1, "gold_sql": "SELECT StuID FROM Student WHERE city_code = 'CHI'", "pred_sql": "SELECT StuID FROM Student WHERE city_code = 'CHI'", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5990, "db_id": "game_1", "score": 1, "gold_sql": "SELECT StuID FROM Student WHERE city_code = 'CHI'", "pred_sql": "SELECT StuID FROM Student WHERE city_code = 'CHI'", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5991, "db_id": "game_1", "score": 1, "gold_sql": "SELECT StuID FROM Student WHERE Advisor = 1121", "pred_sql": "SELECT StuID FROM Student WHERE Advisor = '1121'", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5992, "db_id": "game_1", "score": 1, "gold_sql": "SELECT StuID FROM Student WHERE Advisor = 1121", "pred_sql": "SELECT StuID FROM Student WHERE Advisor = '1121'", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5993, "db_id": "game_1", "score": 1, "gold_sql": "SELECT Fname FROM Student WHERE Major = 600", "pred_sql": "SELECT Fname FROM Student WHERE Major = '600'", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5994, "db_id": "game_1", "score": 1, "gold_sql": "SELECT Fname FROM Student WHERE Major = 600", "pred_sql": "SELECT Fname FROM Student WHERE Major = '600'", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5995, "db_id": "game_1", "score": 1, "gold_sql": "SELECT major, AVG(age), MIN(age), MAX(age) FROM Student GROUP BY major", "pred_sql": "SELECT Major, AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM Student GROUP BY Major", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5996, "db_id": "game_1", "score": 1, "gold_sql": "SELECT major, AVG(age), MIN(age), MAX(age) FROM Student GROUP BY major", "pred_sql": "SELECT Major, AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM Student GROUP BY Major", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5997, "db_id": "game_1", "score": 1, "gold_sql": "SELECT advisor FROM Student GROUP BY advisor HAVING COUNT(*) >= 2", "pred_sql": "SELECT Advisor FROM Student GROUP BY Advisor HAVING COUNT(StuID) >= 2", "source_tables": ["student"], "error_info": ""}, {"sample_id": 5998, "db_id": "game_1", "score": 0, "gold_sql": "SELECT advisor FROM Student GROUP BY advisor HAVING COUNT(*) >= 2", "pred_sql": "SELECT DISTINCT Advisor FROM Student", "source_tables": ["student"], "error_info": "Result not equal"}, {"sample_id": 5999, "db_id": "game_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT sportname) FROM Sportsinfo", "pred_sql": "SELECT COUNT(DISTINCT SportName) AS TotalSports FROM SportsInfo", "source_tables": ["sportsinfo"], "error_info": ""}, {"sample_id": 6000, "db_id": "game_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT sportname) FROM Sportsinfo", "pred_sql": "SELECT COUNT(DISTINCT SportName) AS DifferentSports FROM SportsInfo", "source_tables": ["sportsinfo"], "error_info": ""}, {"sample_id": 6001, "db_id": "game_1", "score": 0, "gold_sql": "SELECT COUNT(DISTINCT StuID) FROM Sportsinfo", "pred_sql": "SELECT COUNT(*) AS NumberOfStudents FROM SportsInfo", "source_tables": ["sportsinfo"], "error_info": "Result not equal"}, {"sample_id": 6002, "db_id": "game_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT StuID) FROM Sportsinfo", "pred_sql": "SELECT COUNT(DISTINCT StuID) AS NumberOfStudents FROM SportsInfo", "source_tables": ["sportsinfo"], "error_info": ""}, {"sample_id": 6003, "db_id": "game_1", "score": 0, "gold_sql": "SELECT StuID FROM Sportsinfo WHERE onscholarship = 'Y'", "pred_sql": "SELECT StuID FROM SportsInfo WHERE OnScholarship = 'Yes'", "source_tables": ["sportsinfo"], "error_info": "Result not equal"}, {"sample_id": 6004, "db_id": "game_1", "score": 0, "gold_sql": "SELECT StuID FROM Sportsinfo WHERE onscholarship = 'Y'", "pred_sql": "SELECT StuID FROM SportsInfo WHERE OnScholarship = 'Yes'", "source_tables": ["sportsinfo"], "error_info": "Result not equal"}, {"sample_id": 6005, "db_id": "game_1", "score": 0, "gold_sql": "SELECT T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T1.onscholarship = 'Y'", "pred_sql": "SELECT LName FROM Student INNER JOIN SportsInfo ON Student.StuID = SportsInfo.StuID WHERE SportsInfo.OnScholarship = 'Yes'", "source_tables": ["sportsinfo", "student"], "error_info": "Result not equal"}, {"sample_id": 6006, "db_id": "game_1", "score": 0, "gold_sql": "SELECT T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T1.onscholarship = 'Y'", "pred_sql": "SELECT Student.LName FROM Student JOIN SportsInfo ON Student.StuID = SportsInfo.StuID WHERE SportsInfo.OnScholarship = 'Yes'", "source_tables": ["sportsinfo", "student"], "error_info": "Result not equal"}, {"sample_id": 6007, "db_id": "game_1", "score": 1, "gold_sql": "SELECT SUM(gamesplayed) FROM Sportsinfo", "pred_sql": "SELECT SUM(GamesPlayed) AS TotalGamesPlayed FROM SportsInfo", "source_tables": ["sportsinfo"], "error_info": ""}, {"sample_id": 6008, "db_id": "game_1", "score": 1, "gold_sql": "SELECT SUM(gamesplayed) FROM Sportsinfo", "pred_sql": "SELECT SUM(GamesPlayed) AS TotalGamesPlayed FROM SportsInfo", "source_tables": ["sportsinfo"], "error_info": ""}, {"sample_id": 6009, "db_id": "game_1", "score": 0, "gold_sql": "SELECT SUM(gamesplayed) FROM Sportsinfo WHERE sportname = 'Football' AND onscholarship = 'Y'", "pred_sql": "SELECT SUM(SportsInfo.GamesPlayed) AS TotalGamesPlayed FROM SportsInfo JOIN Student ON SportsInfo.StuID = Student.StuID WHERE SportsInfo.SportName = 'Football' AND SportsInfo.OnScholarship = 'Yes'", "source_tables": ["sportsinfo"], "error_info": "Result not equal"}, {"sample_id": 6010, "db_id": "game_1", "score": 0, "gold_sql": "SELECT SUM(gamesplayed) FROM Sportsinfo WHERE sportname = 'Football' AND onscholarship = 'Y'", "pred_sql": "SELECT SUM(GamesPlayed) AS TotalFootballGames FROM SportsInfo JOIN Student ON SportsInfo.StuID = Student.StuID WHERE SportName = 'Football' AND OnScholarship = 'Yes'", "source_tables": ["sportsinfo"], "error_info": "Result not equal"}, {"sample_id": 6011, "db_id": "game_1", "score": 1, "gold_sql": "SELECT sportname, COUNT(*) FROM Sportsinfo GROUP BY sportname", "pred_sql": "SELECT SportName, COUNT(StuID) AS NumberOfStudents FROM SportsInfo GROUP BY SportName", "source_tables": ["sportsinfo"], "error_info": ""}, {"sample_id": 6012, "db_id": "game_1", "score": 1, "gold_sql": "SELECT sportname, COUNT(*) FROM Sportsinfo GROUP BY sportname", "pred_sql": "SELECT SportName, COUNT(StuID) AS NumberOfStudents FROM SportsInfo GROUP BY SportName", "source_tables": ["sportsinfo"], "error_info": ""}, {"sample_id": 6013, "db_id": "game_1", "score": 0, "gold_sql": "SELECT StuID, COUNT(*), SUM(gamesplayed) FROM Sportsinfo GROUP BY StuID", "pred_sql": "SELECT Student.StuID, COUNT(SportsInfo.SportName) AS NumberOfSports, SUM(SportsInfo.GamesPlayed) AS TotalGamesPlayed FROM Student LEFT JOIN SportsInfo ON Student.StuID = SportsInfo.StuID GROUP BY Student.StuID", "source_tables": ["sportsinfo"], "error_info": "Result not equal"}, {"sample_id": 6014, "db_id": "game_1", "score": 0, "gold_sql": "SELECT StuID, COUNT(*), SUM(gamesplayed) FROM Sportsinfo GROUP BY StuID", "pred_sql": "SELECT Student.StuID, COUNT(DISTINCT SportsInfo.SportName) AS SportsCount, COUNT(DISTINCT Plays_Games.GameID) AS GamesCount FROM Student LEFT JOIN SportsInfo ON Student.StuID = SportsInfo.StuID LEFT JOIN Plays_Games ON Student.StuID = Plays_Games.StuID GROUP BY Student.StuID", "source_tables": ["sportsinfo"], "error_info": "Result not equal"}, {"sample_id": 6015, "db_id": "game_1", "score": 1, "gold_sql": "SELECT StuID FROM Sportsinfo GROUP BY StuID HAVING SUM(hoursperweek) > 10", "pred_sql": "SELECT StuID FROM SportsInfo GROUP BY StuID HAVING SUM(HoursPerWeek) > 10", "source_tables": ["sportsinfo"], "error_info": ""}, {"sample_id": 6016, "db_id": "game_1", "score": 1, "gold_sql": "SELECT StuID FROM Sportsinfo GROUP BY StuID HAVING SUM(hoursperweek) > 10", "pred_sql": "SELECT StuID FROM SportsInfo WHERE HoursPerWeek > 10", "source_tables": ["sportsinfo"], "error_info": ""}, {"sample_id": 6017, "db_id": "game_1", "score": 0, "gold_sql": "SELECT T2.Fname, T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Fname, LName FROM Student WHERE StuID IN (SELECT StuID FROM SportsInfo ORDER BY GamesPlayed DESC LIMIT 1)", "source_tables": ["sportsinfo", "student"], "error_info": "Result not equal"}, {"sample_id": 6018, "db_id": "game_1", "score": 0, "gold_sql": "SELECT T2.Fname, T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Fname, LName FROM Student WHERE StuID = (SELECT StuID FROM SportsInfo ORDER BY GamesPlayed DESC LIMIT 1)", "source_tables": ["sportsinfo", "student"], "error_info": "Result not equal"}, {"sample_id": 6019, "db_id": "game_1", "score": 0, "gold_sql": "SELECT sportname FROM Sportsinfo WHERE onscholarship = 'Y' GROUP BY sportname ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT SportName, COUNT(StuID) AS NumberOfStudentsOnScholarship FROM SportsInfo WHERE OnScholarship = 'Yes' GROUP BY SportName ORDER BY NumberOfStudentsOnScholarship DESC LIMIT 1", "source_tables": ["sportsinfo"], "error_info": "Result not equal"}, {"sample_id": 6020, "db_id": "game_1", "score": 0, "gold_sql": "SELECT sportname FROM Sportsinfo WHERE onscholarship = 'Y' GROUP BY sportname ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT SportName FROM SportsInfo WHERE OnScholarship = 'Yes' GROUP BY SportName ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["sportsinfo"], "error_info": "Result not equal"}, {"sample_id": 6021, "db_id": "game_1", "score": 1, "gold_sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Sportsinfo", "pred_sql": "SELECT StuID FROM Student WHERE NOT StuID IN (SELECT StuID FROM SportsInfo)", "source_tables": ["sportsinfo", "student"], "error_info": ""}, {"sample_id": 6022, "db_id": "game_1", "score": 1, "gold_sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Sportsinfo", "pred_sql": "SELECT StuID FROM Student WHERE NOT StuID IN (SELECT StuID FROM SportsInfo)", "source_tables": ["sportsinfo", "student"], "error_info": ""}, {"sample_id": 6023, "db_id": "game_1", "score": 0, "gold_sql": "SELECT StuID FROM Student WHERE major = 600 INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship = 'Y'", "pred_sql": "SELECT StuID FROM SportsInfo WHERE OnScholarship = 'Yes' AND StuID IN (SELECT StuID FROM Student WHERE Major = '600')", "source_tables": ["sportsinfo", "student"], "error_info": "Result not equal"}, {"sample_id": 6024, "db_id": "game_1", "score": 0, "gold_sql": "SELECT StuID FROM Student WHERE major = 600 INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship = 'Y'", "pred_sql": "SELECT StuID FROM Student WHERE Major = '600' AND StuID IN (SELECT StuID FROM SportsInfo WHERE OnScholarship = 'Yes')", "source_tables": ["sportsinfo", "student"], "error_info": "Result not equal"}, {"sample_id": 6025, "db_id": "game_1", "score": 0, "gold_sql": "SELECT StuID FROM Student WHERE sex = 'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname = 'Football'", "pred_sql": "SELECT Student.StuID FROM Student JOIN SportsInfo ON Student.StuID = SportsInfo.StuID WHERE Student.Sex = 'female' AND SportsInfo.SportName = 'football'", "source_tables": ["sportsinfo", "student"], "error_info": "Result not equal"}, {"sample_id": 6026, "db_id": "game_1", "score": 0, "gold_sql": "SELECT StuID FROM Student WHERE sex = 'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname = 'Football'", "pred_sql": "SELECT Student.StuID FROM Student JOIN SportsInfo ON Student.StuID = SportsInfo.StuID WHERE Student.Sex = 'Female' AND SportsInfo.SportName = 'Football'", "source_tables": ["sportsinfo", "student"], "error_info": "Result not equal"}, {"sample_id": 6027, "db_id": "game_1", "score": 0, "gold_sql": "SELECT StuID FROM Student WHERE sex = 'M' EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname = 'Football'", "pred_sql": "SELECT StuID FROM Student WHERE Sex = 'Male' AND NOT StuID IN (SELECT StuID FROM SportsInfo WHERE SportName = 'Football')", "source_tables": ["sportsinfo", "student"], "error_info": "Result not equal"}, {"sample_id": 6028, "db_id": "game_1", "score": 0, "gold_sql": "SELECT StuID FROM Student WHERE sex = 'M' EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname = 'Football'", "pred_sql": "SELECT StuID FROM Student WHERE Sex = 'Male' AND NOT StuID IN (SELECT StuID FROM SportsInfo WHERE SportName = 'Football')", "source_tables": ["sportsinfo", "student"], "error_info": "Result not equal"}, {"sample_id": 6029, "db_id": "game_1", "score": 0, "gold_sql": "SELECT SUM(hoursperweek), SUM(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Fname = 'David' AND T2.Lname = 'Shieber'", "pred_sql": "SELECT S.Fname, S.LName, SI.HoursPerWeek, SI.GamesPlayed FROM Student AS S JOIN SportsInfo AS SI ON S.StuID = SI.StuID WHERE S.Fname = 'David' AND S.LName = 'Shieber'", "source_tables": ["sportsinfo", "student"], "error_info": "Result not equal"}, {"sample_id": 6030, "db_id": "game_1", "score": 1, "gold_sql": "SELECT SUM(hoursperweek), SUM(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Fname = 'David' AND T2.Lname = 'Shieber'", "pred_sql": "SELECT SUM(SportsInfo.HoursPerWeek) AS Total_Hours_Per_Week, SUM(SportsInfo.GamesPlayed) AS Total_Games_Played FROM SportsInfo JOIN Student ON SportsInfo.StuID = Student.StuID WHERE Student.Fname = 'David' AND Student.LName = 'Shieber'", "source_tables": ["sportsinfo", "student"], "error_info": ""}, {"sample_id": 6031, "db_id": "game_1", "score": 0, "gold_sql": "SELECT SUM(hoursperweek), SUM(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.age < 20", "pred_sql": "SELECT S.Fname, S.LName, SI.HoursPerWeek, SI.GamesPlayed FROM Student AS S JOIN SportsInfo AS SI ON S.StuID = SI.StuID WHERE S.Age < '20'", "source_tables": ["sportsinfo", "student"], "error_info": "Result not equal"}, {"sample_id": 6032, "db_id": "game_1", "score": 1, "gold_sql": "SELECT SUM(hoursperweek), SUM(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.age < 20", "pred_sql": "SELECT SUM(HoursPerWeek) AS Total_Hours_Per_Week, SUM(GamesPlayed) AS Total_Games_Played FROM SportsInfo JOIN Student ON SportsInfo.StuID = Student.StuID WHERE CAST(Age AS INT) < 20", "source_tables": ["sportsinfo", "student"], "error_info": ""}, {"sample_id": 6033, "db_id": "game_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT StuID) FROM Plays_games", "pred_sql": "SELECT COUNT(DISTINCT StuID) AS NumberOfStudentsPlayingGames FROM Plays_Games", "source_tables": ["plays_games"], "error_info": ""}, {"sample_id": 6034, "db_id": "game_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT StuID) FROM Plays_games", "pred_sql": "SELECT COUNT(DISTINCT StuID) AS DifferentStudentsPlayingGames FROM Plays_Games", "source_tables": ["plays_games"], "error_info": ""}, {"sample_id": 6035, "db_id": "game_1", "score": 1, "gold_sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Plays_games", "pred_sql": "SELECT StuID FROM Student WHERE NOT StuID IN (SELECT StuID FROM Plays_Games)", "source_tables": ["plays_games", "student"], "error_info": ""}, {"sample_id": 6036, "db_id": "game_1", "score": 1, "gold_sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Plays_games", "pred_sql": "SELECT StuID FROM Student WHERE NOT StuID IN (SELECT StuID FROM Plays_Games)", "source_tables": ["plays_games", "student"], "error_info": ""}, {"sample_id": 6037, "db_id": "game_1", "score": 1, "gold_sql": "SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games", "pred_sql": "SELECT DISTINCT Student.StuID FROM Student JOIN Plays_Games ON Student.StuID = Plays_Games.StuID JOIN SportsInfo ON Student.StuID = SportsInfo.StuID", "source_tables": ["plays_games", "sportsinfo"], "error_info": ""}, {"sample_id": 6038, "db_id": "game_1", "score": 1, "gold_sql": "SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games", "pred_sql": "SELECT DISTINCT Student.StuID FROM Student JOIN Plays_Games ON Student.StuID = Plays_Games.StuID JOIN SportsInfo ON Student.StuID = SportsInfo.StuID", "source_tables": ["plays_games", "sportsinfo"], "error_info": ""}, {"sample_id": 6039, "db_id": "game_1", "score": 1, "gold_sql": "SELECT gameid, SUM(hours_played) FROM Plays_games GROUP BY gameid", "pred_sql": "SELECT GameID, SUM(Hours_Played) AS Total_Hours_Played FROM Plays_Games GROUP BY GameID", "source_tables": ["plays_games"], "error_info": ""}, {"sample_id": 6040, "db_id": "game_1", "score": 1, "gold_sql": "SELECT gameid, SUM(hours_played) FROM Plays_games GROUP BY gameid", "pred_sql": "SELECT GameID, SUM(Hours_Played) AS Total_Hours_Played FROM Plays_Games GROUP BY GameID", "source_tables": ["plays_games"], "error_info": ""}, {"sample_id": 6041, "db_id": "game_1", "score": 1, "gold_sql": "SELECT Stuid, SUM(hours_played) FROM Plays_games GROUP BY Stuid", "pred_sql": "SELECT StuID, SUM(Hours_Played) AS Total_Hours_Played FROM Plays_Games GROUP BY StuID", "source_tables": ["plays_games"], "error_info": ""}, {"sample_id": 6042, "db_id": "game_1", "score": 1, "gold_sql": "SELECT Stuid, SUM(hours_played) FROM Plays_games GROUP BY Stuid", "pred_sql": "SELECT Student.StuID, SUM(Plays_Games.Hours_Played) AS Total_Hours_Played FROM Student JOIN Plays_Games ON Student.StuID = Plays_Games.StuID GROUP BY Student.StuID", "source_tables": ["plays_games"], "error_info": ""}, {"sample_id": 6043, "db_id": "game_1", "score": 1, "gold_sql": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid GROUP BY T1.gameid ORDER BY SUM(hours_played) DESC LIMIT 1", "pred_sql": "SELECT G.GName FROM Video_Games AS G JOIN Plays_Games AS P ON G.GameID = P.GameID GROUP BY G.GName ORDER BY SUM(P.Hours_Played) DESC LIMIT 1", "source_tables": ["plays_games", "video_games"], "error_info": ""}, {"sample_id": 6044, "db_id": "game_1", "score": 1, "gold_sql": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid GROUP BY T1.gameid ORDER BY SUM(hours_played) DESC LIMIT 1", "pred_sql": "SELECT GName FROM Video_Games WHERE GameID = (SELECT GameID FROM Plays_Games GROUP BY GameID ORDER BY SUM(Hours_Played) DESC LIMIT 1)", "source_tables": ["plays_games", "video_games"], "error_info": ""}, {"sample_id": 6045, "db_id": "game_1", "score": 1, "gold_sql": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid GROUP BY T1.gameid HAVING SUM(hours_played) >= 1000", "pred_sql": "SELECT GName FROM Video_Games WHERE GameID IN (SELECT GameID FROM Plays_Games WHERE Hours_Played >= '1000')", "source_tables": ["plays_games", "video_games"], "error_info": ""}, {"sample_id": 6046, "db_id": "game_1", "score": 1, "gold_sql": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid GROUP BY T1.gameid HAVING SUM(hours_played) >= 1000", "pred_sql": "SELECT GName FROM Video_Games WHERE GameID IN (SELECT GameID FROM Plays_Games WHERE Hours_Played >= '1000')", "source_tables": ["plays_games", "video_games"], "error_info": ""}, {"sample_id": 6047, "db_id": "game_1", "score": 1, "gold_sql": "SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid JOIN Student AS T3 ON T3.Stuid = T1.Stuid WHERE T3.Lname = 'Smith' AND T3.Fname = 'Linda'", "pred_sql": "SELECT Video_Games.GName FROM Video_Games JOIN Plays_Games ON Video_Games.GameID = Plays_Games.GameID JOIN Student ON Plays_Games.StuID = Student.StuID WHERE Student.LName = 'Smith' AND Student.Fname = 'Linda'", "source_tables": ["plays_games", "student", "video_games"], "error_info": ""}, {"sample_id": 6048, "db_id": "game_1", "score": 1, "gold_sql": "SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid JOIN Student AS T3 ON T3.Stuid = T1.Stuid WHERE T3.Lname = 'Smith' AND T3.Fname = 'Linda'", "pred_sql": "SELECT Video_Games.GName FROM Video_Games JOIN Plays_Games ON Video_Games.GameID = Plays_Games.GameID JOIN Student ON Plays_Games.StuID = Student.StuID WHERE Student.Fname = 'Linda' AND Student.LName = 'Smith'", "source_tables": ["plays_games", "student", "video_games"], "error_info": ""}, {"sample_id": 6049, "db_id": "game_1", "score": 1, "gold_sql": "SELECT T2.lname, T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T1.SportName = 'Football' OR T1.SportName = 'Lacrosse'", "pred_sql": "SELECT Student.LName, Student.Fname FROM Student JOIN SportsInfo ON Student.StuID = SportsInfo.StuID WHERE SportsInfo.SportName IN ('Football', 'Lacrosse')", "source_tables": ["sportsinfo", "student"], "error_info": ""}, {"sample_id": 6050, "db_id": "game_1", "score": 1, "gold_sql": "SELECT T2.lname, T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T1.SportName = 'Football' OR T1.SportName = 'Lacrosse'", "pred_sql": "SELECT Fname, LName FROM Student WHERE StuID IN (SELECT StuID FROM SportsInfo WHERE SportName IN ('Football', 'Lacrosse'))", "source_tables": ["sportsinfo", "student"], "error_info": ""}, {"sample_id": 6051, "db_id": "game_1", "score": 1, "gold_sql": "SELECT fname, age FROM Student WHERE StuID IN (SELECT StuID FROM Sportsinfo WHERE SportName = 'Football' INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName = 'Lacrosse')", "pred_sql": "SELECT S.Fname, S.Age FROM Student AS S JOIN SportsInfo AS SI1 ON S.StuID = SI1.StuID JOIN SportsInfo AS SI2 ON S.StuID = SI2.StuID WHERE SI1.SportName = 'Football' AND SI2.SportName = 'Lacrosse'", "source_tables": ["sportsinfo", "student"], "error_info": ""}, {"sample_id": 6052, "db_id": "game_1", "score": 1, "gold_sql": "SELECT fname, age FROM Student WHERE StuID IN (SELECT StuID FROM Sportsinfo WHERE SportName = 'Football' INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName = 'Lacrosse')", "pred_sql": "SELECT DISTINCT S.Fname, S.Age FROM Student AS S JOIN SportsInfo AS SI1 ON S.StuID = SI1.StuID JOIN SportsInfo AS SI2 ON S.StuID = SI2.StuID WHERE SI1.SportName = 'Football' AND SI2.SportName = 'Lacrosse'", "source_tables": ["sportsinfo", "student"], "error_info": ""}, {"sample_id": 6053, "db_id": "game_1", "score": 1, "gold_sql": "SELECT lname, sex FROM Student WHERE StuID IN (SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID = T2.GameID WHERE T2.Gname = 'Call of Destiny' INTERSECT SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID = T2.GameID WHERE T2.Gname = 'Works of Widenius')", "pred_sql": "SELECT DISTINCT S.LName, S.Sex FROM Student AS S JOIN Plays_Games AS PG1 ON S.StuID = PG1.StuID JOIN Video_Games AS VG1 ON PG1.GameID = VG1.GameID JOIN Plays_Games AS PG2 ON S.StuID = PG2.StuID JOIN Video_Games AS VG2 ON PG2.GameID = VG2.GameID WHERE VG1.GName = 'Call of Destiny' AND VG2.GName = 'Works of Widenius'", "source_tables": ["plays_games", "student", "video_games"], "error_info": ""}, {"sample_id": 6054, "db_id": "game_1", "score": 1, "gold_sql": "SELECT lname, sex FROM Student WHERE StuID IN (SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID = T2.GameID WHERE T2.Gname = 'Call of Destiny' INTERSECT SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID = T2.GameID WHERE T2.Gname = 'Works of Widenius')", "pred_sql": "SELECT DISTINCT s.LName, s.Sex FROM Student AS s JOIN Plays_Games AS pg1 ON s.StuID = pg1.StuID JOIN Video_Games AS vg1 ON pg1.GameID = vg1.GameID JOIN Plays_Games AS pg2 ON s.StuID = pg2.StuID JOIN Video_Games AS vg2 ON pg2.GameID = vg2.GameID WHERE vg1.GName = 'Call of Destiny' AND vg2.GName = 'Works of Widenius'", "source_tables": ["plays_games", "student", "video_games"], "error_info": ""}, {"sample_id": 6055, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT customer_name FROM customers", "pred_sql": "SELECT customer_name FROM Customers", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 6056, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT customer_name FROM customers", "pred_sql": "SELECT customer_name FROM Customers", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 6057, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT COUNT(*) FROM customers", "pred_sql": "SELECT COUNT(*) AS total_customers FROM Customers", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 6058, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT COUNT(*) FROM customers", "pred_sql": "SELECT COUNT(DISTINCT customer_id) AS total_distinct_customers FROM Customers", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 6059, "db_id": "customers_and_addresses", "score": 0, "gold_sql": "SELECT AVG(order_quantity) FROM order_items", "pred_sql": "SELECT AVG(order_quantity) AS average_items_per_order FROM Order_Items GROUP BY order_id", "source_tables": ["order_items"], "error_info": "Result not equal"}, {"sample_id": 6060, "db_id": "customers_and_addresses", "score": 0, "gold_sql": "SELECT AVG(order_quantity) FROM order_items", "pred_sql": "SELECT AVG(order_quantity) AS average_order_quantity FROM Order_Items GROUP BY order_id", "source_tables": ["order_items"], "error_info": "Result not equal"}, {"sample_id": 6061, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT customer_name FROM customers WHERE payment_method = 'Cash'", "pred_sql": "SELECT customer_name FROM Customers WHERE payment_method = 'Cash'", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 6062, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT customer_name FROM customers WHERE payment_method = 'Cash'", "pred_sql": "SELECT customer_name FROM Customers WHERE payment_method = 'Cash'", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 6063, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20", "pred_sql": "SELECT date_became_customer FROM Customers WHERE customer_id BETWEEN '10' AND '20'", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 6064, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20", "pred_sql": "SELECT date_became_customer FROM Customers WHERE customer_id BETWEEN '10' AND '20'", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 6065, "db_id": "customers_and_addresses", "score": 0, "gold_sql": "SELECT payment_method FROM customers GROUP BY payment_method ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT payment_method, COUNT(customer_id) AS customer_count FROM Customers GROUP BY payment_method ORDER BY customer_count DESC LIMIT 1", "source_tables": ["customers"], "error_info": "Result not equal"}, {"sample_id": 6066, "db_id": "customers_and_addresses", "score": 0, "gold_sql": "SELECT payment_method FROM customers GROUP BY payment_method ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT payment_method, COUNT(payment_method) AS frequency FROM Customers GROUP BY payment_method ORDER BY frequency DESC LIMIT 1", "source_tables": ["customers"], "error_info": "Result not equal"}, {"sample_id": 6067, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT customer_name FROM customers WHERE payment_method = (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY COUNT(*) DESC LIMIT 1)", "pred_sql": "SELECT customer_name FROM Customers WHERE payment_method = (SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY COUNT(*) DESC LIMIT 1)", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 6068, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT customer_name FROM customers WHERE payment_method = (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY COUNT(*) DESC LIMIT 1)", "pred_sql": "SELECT customer_name FROM Customers WHERE payment_method = (SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY COUNT(*) DESC LIMIT 1)", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 6069, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT DISTINCT payment_method FROM customers", "pred_sql": "SELECT DISTINCT payment_method FROM Customers", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 6070, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT DISTINCT payment_method FROM customers", "pred_sql": "SELECT DISTINCT payment_method FROM Customers", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 6071, "db_id": "customers_and_addresses", "score": 0, "gold_sql": "SELECT DISTINCT product_details FROM products", "pred_sql": "SELECT * FROM Products", "source_tables": ["products"], "error_info": "Result not equal"}, {"sample_id": 6072, "db_id": "customers_and_addresses", "score": 0, "gold_sql": "SELECT DISTINCT product_details FROM products", "pred_sql": "SELECT * FROM Products", "source_tables": ["products"], "error_info": "Result not equal"}, {"sample_id": 6073, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT customer_name FROM customers WHERE customer_name LIKE '%Alex%'", "pred_sql": "SELECT customer_name FROM Customers WHERE customer_name LIKE '%Alex%'", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 6074, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT customer_name FROM customers WHERE customer_name LIKE '%Alex%'", "pred_sql": "SELECT customer_name FROM Customers WHERE customer_name LIKE '%Alex%'", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 6075, "db_id": "customers_and_addresses", "score": 0, "gold_sql": "SELECT product_details FROM products WHERE product_details LIKE '%Latte%' OR product_details LIKE '%Americano%'", "pred_sql": "SELECT * FROM Products WHERE product_details LIKE '%Latte%' OR product_details LIKE '%Americano%'", "source_tables": ["products"], "error_info": "Result not equal"}, {"sample_id": 6076, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT product_details FROM products WHERE product_details LIKE '%Latte%' OR product_details LIKE '%Americano%'", "pred_sql": "SELECT product_details FROM Products WHERE product_details LIKE '%Latte%' OR product_details LIKE '%Americano%'", "source_tables": ["products"], "error_info": ""}, {"sample_id": 6077, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t1.customer_name = 'Maudie Kertzmann'", "pred_sql": "SELECT a.address_content FROM Addresses AS a JOIN Customer_Addresses AS ca ON a.address_id = ca.address_id JOIN Customers AS c ON ca.customer_id = c.customer_id WHERE c.customer_name = 'Maudie Kertzmann'", "source_tables": ["addresses", "customers", "customer_addresses"], "error_info": ""}, {"sample_id": 6078, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t1.customer_name = 'Maudie Kertzmann'", "pred_sql": "SELECT Addresses.address_content FROM Addresses JOIN Customer_Addresses ON Addresses.address_id = Customer_Addresses.address_id JOIN Customers ON Customer_Addresses.customer_id = Customers.customer_id WHERE Customers.customer_name = 'Maudie Kertzmann'", "source_tables": ["addresses", "customers", "customer_addresses"], "error_info": ""}, {"sample_id": 6079, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT COUNT(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.city = 'Lake Geovannyton'", "pred_sql": "SELECT COUNT(DISTINCT c.customer_id) AS customer_count FROM Customers AS c JOIN Customer_Addresses AS ca ON c.customer_id = ca.customer_id JOIN Addresses AS a ON ca.address_id = a.address_id WHERE a.city = 'Lake Geovannyton'", "source_tables": ["addresses", "customers", "customer_addresses"], "error_info": ""}, {"sample_id": 6080, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT COUNT(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.city = 'Lake Geovannyton'", "pred_sql": "SELECT COUNT(DISTINCT c.customer_id) AS number_of_customers FROM Customers AS c JOIN Customer_Addresses AS ca ON c.customer_id = ca.customer_id JOIN Addresses AS a ON ca.address_id = a.address_id WHERE a.city = 'Lake Geovannyton'", "source_tables": ["addresses", "customers", "customer_addresses"], "error_info": ""}, {"sample_id": 6081, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = 'Colorado'", "pred_sql": "SELECT customer_name FROM Customers AS c JOIN Customer_Addresses AS ca ON c.customer_id = ca.customer_id JOIN Addresses AS a ON ca.address_id = a.address_id WHERE a.state_province_county = 'Colorado'", "source_tables": ["addresses", "customers", "customer_addresses"], "error_info": ""}, {"sample_id": 6082, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = 'Colorado'", "pred_sql": "SELECT DISTINCT Customers.customer_name FROM Customers JOIN Customer_Addresses ON Customers.customer_id = Customer_Addresses.customer_id JOIN Addresses ON Customer_Addresses.address_id = Addresses.address_id WHERE Addresses.state_province_county = 'Colorado'", "source_tables": ["addresses", "customers", "customer_addresses"], "error_info": ""}, {"sample_id": 6083, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT city FROM addresses WHERE NOT city IN (SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id)", "pred_sql": "SELECT DISTINCT city FROM Addresses WHERE NOT address_id IN (SELECT address_id FROM Customer_Addresses)", "source_tables": ["addresses", "customers", "customer_addresses"], "error_info": ""}, {"sample_id": 6084, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT city FROM addresses WHERE NOT city IN (SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id)", "pred_sql": "SELECT DISTINCT city FROM Addresses WHERE NOT address_id IN (SELECT address_id FROM Customer_Addresses)", "source_tables": ["addresses", "customers", "customer_addresses"], "error_info": ""}, {"sample_id": 6085, "db_id": "customers_and_addresses", "score": 0, "gold_sql": "SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id GROUP BY t3.city ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT city, COUNT(DISTINCT customer_id) AS customer_count FROM Customer_Addresses JOIN Addresses ON Customer_Addresses.address_id = Addresses.address_id GROUP BY city ORDER BY customer_count DESC LIMIT 1", "source_tables": ["addresses", "customers", "customer_addresses"], "error_info": "Result not equal"}, {"sample_id": 6086, "db_id": "customers_and_addresses", "score": 0, "gold_sql": "SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id GROUP BY t3.city ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT city, COUNT(DISTINCT customer_id) AS customer_count FROM Customer_Addresses JOIN Addresses ON Customer_Addresses.address_id = Addresses.address_id GROUP BY city ORDER BY customer_count DESC LIMIT 1", "source_tables": ["addresses", "customers", "customer_addresses"], "error_info": "Result not equal"}, {"sample_id": 6087, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT DISTINCT city FROM addresses", "pred_sql": "SELECT DISTINCT city FROM Addresses", "source_tables": ["addresses"], "error_info": ""}, {"sample_id": 6088, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT DISTINCT city FROM addresses", "pred_sql": "SELECT DISTINCT city FROM Addresses", "source_tables": ["addresses"], "error_info": ""}, {"sample_id": 6089, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT city FROM addresses WHERE zip_postcode = 255", "pred_sql": "SELECT city FROM Addresses WHERE zip_postcode = '255'", "source_tables": ["addresses"], "error_info": ""}, {"sample_id": 6090, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT city FROM addresses WHERE zip_postcode = 255", "pred_sql": "SELECT city FROM Addresses WHERE zip_postcode = '255'", "source_tables": ["addresses"], "error_info": ""}, {"sample_id": 6091, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT state_province_county, country FROM addresses WHERE zip_postcode LIKE '4%'", "pred_sql": "SELECT DISTINCT state_province_county, country FROM Addresses WHERE zip_postcode LIKE '4%'", "source_tables": ["addresses"], "error_info": ""}, {"sample_id": 6092, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT state_province_county, country FROM addresses WHERE zip_postcode LIKE '4%'", "pred_sql": "SELECT DISTINCT state_province_county, country FROM Addresses WHERE zip_postcode LIKE '4%'", "source_tables": ["addresses"], "error_info": ""}, {"sample_id": 6093, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT country FROM addresses GROUP BY country HAVING COUNT(address_id) > 4", "pred_sql": "SELECT country FROM Addresses GROUP BY country HAVING COUNT(address_id) > 4", "source_tables": ["addresses"], "error_info": ""}, {"sample_id": 6094, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT country FROM addresses GROUP BY country HAVING COUNT(address_id) > 4", "pred_sql": "SELECT country FROM Addresses GROUP BY country HAVING COUNT(DISTINCT address_id) > 4", "source_tables": ["addresses"], "error_info": ""}, {"sample_id": 6095, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING COUNT(customer_id) < 5", "pred_sql": "SELECT channel_code FROM Customer_Contact_Channels GROUP BY channel_code HAVING COUNT(*) < 5", "source_tables": ["customer_contact_channels"], "error_info": ""}, {"sample_id": 6096, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING COUNT(customer_id) < 5", "pred_sql": "SELECT channel_code FROM Customer_Contact_Channels GROUP BY channel_code HAVING COUNT(*) < 5", "source_tables": ["customer_contact_channels"], "error_info": ""}, {"sample_id": 6097, "db_id": "customers_and_addresses", "score": 0, "gold_sql": "SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = 'Tillman Ernser'", "pred_sql": "SELECT channel_code, contact_number FROM Customer_Contact_Channels WHERE customer_id = (SELECT customer_id FROM Customers WHERE customer_name = 'Tillman Ernser')", "source_tables": ["customer_contact_channels", "customers"], "error_info": "Result not equal"}, {"sample_id": 6098, "db_id": "customers_and_addresses", "score": 0, "gold_sql": "SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = 'Tillman Ernser'", "pred_sql": "SELECT Customer_Contact_Channels.channel_code FROM Customers JOIN Customer_Contact_Channels ON Customers.customer_id = Customer_Contact_Channels.customer_id WHERE Customers.customer_name = 'Tillman Ernser'", "source_tables": ["customer_contact_channels", "customers"], "error_info": "Result not equal"}, {"sample_id": 6099, "db_id": "customers_and_addresses", "score": 0, "gold_sql": "SELECT MAX(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = 'Tillman Ernser'", "pred_sql": "SELECT active_to_date FROM Customer_Contact_Channels WHERE customer_id = (SELECT customer_id FROM Customers WHERE customer_name = 'Tillman Ernser') ORDER BY active_from_date DESC LIMIT 1", "source_tables": ["customer_contact_channels", "customers"], "error_info": "Result not equal"}, {"sample_id": 6100, "db_id": "customers_and_addresses", "score": 0, "gold_sql": "SELECT MAX(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = 'Tillman Ernser'", "pred_sql": "SELECT active_to_date FROM Customer_Contact_Channels WHERE customer_id = (SELECT customer_id FROM Customers WHERE customer_name = 'Tillman Ernser') ORDER BY active_from_date DESC LIMIT 1", "source_tables": ["customer_contact_channels", "customers"], "error_info": "Result not equal"}, {"sample_id": 6101, "db_id": "customers_and_addresses", "score": 0, "gold_sql": "SELECT AVG(active_to_date - active_from_date) FROM customer_contact_channels", "pred_sql": "SELECT AVG(JULIANDAY(active_to_date) - JULIANDAY(active_from_date)) AS average_time_span FROM Customer_Contact_Channels WHERE NOT active_to_date IS NULL", "source_tables": ["customer_contact_channels"], "error_info": "Result not equal"}, {"sample_id": 6102, "db_id": "customers_and_addresses", "score": 0, "gold_sql": "SELECT AVG(active_to_date - active_from_date) FROM customer_contact_channels", "pred_sql": "SELECT AVG(JULIANDAY(active_to_date) - JULIANDAY(active_from_date)) AS average_active_time_span FROM Customer_Contact_Channels WHERE NOT active_to_date IS NULL", "source_tables": ["customer_contact_channels"], "error_info": "Result not equal"}, {"sample_id": 6103, "db_id": "customers_and_addresses", "score": 0, "gold_sql": "SELECT channel_code, contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date = (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)", "pred_sql": "SELECT channel_code, contact_number FROM Customer_Contact_Channels WHERE active_from_date = (SELECT MIN(active_from_date) FROM Customer_Contact_Channels)", "source_tables": ["customer_contact_channels"], "error_info": "Result not equal"}, {"sample_id": 6104, "db_id": "customers_and_addresses", "score": 0, "gold_sql": "SELECT channel_code, contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date = (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)", "pred_sql": "SELECT channel_code, contact_number FROM Customer_Contact_Channels ORDER BY (JULIANDAY(active_to_date) - JULIANDAY(active_from_date)) DESC LIMIT 1", "source_tables": ["customer_contact_channels"], "error_info": "Result not equal"}, {"sample_id": 6105, "db_id": "customers_and_addresses", "score": 0, "gold_sql": "SELECT t1.customer_name, t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email'", "pred_sql": "SELECT c.customer_name, cc.active_from_date FROM Customers AS c JOIN Customer_Contact_Channels AS cc ON c.customer_id = cc.customer_id WHERE cc.channel_code = 'email' AND cc.active_to_date IS NULL", "source_tables": ["customer_contact_channels", "customers"], "error_info": "Result not equal"}, {"sample_id": 6106, "db_id": "customers_and_addresses", "score": 0, "gold_sql": "SELECT t1.customer_name, t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email'", "pred_sql": "SELECT Customers.customer_name, Customer_Contact_Channels.active_from_date FROM Customers JOIN Customer_Contact_Channels ON Customers.customer_id = Customer_Contact_Channels.customer_id WHERE Customer_Contact_Channels.channel_code = 'email'", "source_tables": ["customer_contact_channels", "customers"], "error_info": "Result not equal"}, {"sample_id": 6107, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE t3.order_quantity = (SELECT MAX(order_quantity) FROM order_items)", "pred_sql": "SELECT c.customer_name FROM Customers AS c JOIN Customer_Orders AS co ON c.customer_id = co.customer_id JOIN Order_Items AS oi ON co.order_id = oi.order_id WHERE oi.order_quantity = (SELECT MAX(order_quantity) FROM Order_Items)", "source_tables": ["customer_orders", "customers", "order_items"], "error_info": ""}, {"sample_id": 6108, "db_id": "customers_and_addresses", "score": 0, "gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE t3.order_quantity = (SELECT MAX(order_quantity) FROM order_items)", "pred_sql": "SELECT c.customer_name FROM Customers AS c JOIN Customer_Orders AS co ON c.customer_id = co.customer_id JOIN Order_Items AS oi ON co.order_id = oi.order_id GROUP BY c.customer_id ORDER BY SUM(oi.order_quantity) DESC LIMIT 1", "source_tables": ["customer_orders", "customers", "order_items"], "error_info": "Result not equal"}, {"sample_id": 6109, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_name ORDER BY SUM(t3.order_quantity) DESC LIMIT 1", "pred_sql": "SELECT c.customer_name FROM Customers AS c JOIN Customer_Orders AS co ON c.customer_id = co.customer_id JOIN Order_Items AS oi ON co.order_id = oi.order_id GROUP BY c.customer_id ORDER BY SUM(oi.order_quantity) DESC LIMIT 1", "source_tables": ["customer_orders", "customers", "order_items"], "error_info": ""}, {"sample_id": 6110, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_name ORDER BY SUM(t3.order_quantity) DESC LIMIT 1", "pred_sql": "SELECT c.customer_name FROM Customers AS c JOIN Customer_Orders AS co ON c.customer_id = co.customer_id JOIN Order_Items AS oi ON co.order_id = oi.order_id GROUP BY c.customer_id ORDER BY SUM(oi.order_quantity) DESC LIMIT 1", "source_tables": ["customer_orders", "customers", "order_items"], "error_info": ""}, {"sample_id": 6111, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_name ORDER BY SUM(t3.order_quantity) LIMIT 1", "pred_sql": "SELECT c.payment_method FROM Customers AS c JOIN Customer_Orders AS co ON c.customer_id = co.customer_id JOIN Order_Items AS oi ON co.order_id = oi.order_id GROUP BY c.customer_id ORDER BY SUM(oi.order_quantity) ASC LIMIT 1", "source_tables": ["customer_orders", "customers", "order_items"], "error_info": ""}, {"sample_id": 6112, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_name ORDER BY SUM(t3.order_quantity) LIMIT 1", "pred_sql": "SELECT c.payment_method FROM Customers AS c JOIN Customer_Orders AS co ON c.customer_id = co.customer_id JOIN Order_Items AS oi ON co.order_id = oi.order_id GROUP BY c.customer_id ORDER BY SUM(oi.order_quantity) ASC LIMIT 1", "source_tables": ["customer_orders", "customers", "order_items"], "error_info": ""}, {"sample_id": 6113, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE t1.customer_name = 'Rodrick Heaney'", "pred_sql": "SELECT COUNT(DISTINCT oi.product_id) AS product_types_bought FROM Customers AS c JOIN Customer_Orders AS co ON c.customer_id = co.customer_id JOIN Order_Items AS oi ON co.order_id = oi.order_id WHERE c.customer_name = 'Rodrick Heaney'", "source_tables": ["customer_orders", "customers", "order_items"], "error_info": ""}, {"sample_id": 6114, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE t1.customer_name = 'Rodrick Heaney'", "pred_sql": "SELECT COUNT(DISTINCT oi.product_id) AS distinct_product_count FROM Customers AS c JOIN Customer_Orders AS co ON c.customer_id = co.customer_id JOIN Order_Items AS oi ON co.order_id = oi.order_id WHERE c.customer_name = 'Rodrick Heaney'", "source_tables": ["customer_orders", "customers", "order_items"], "error_info": ""}, {"sample_id": 6115, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT SUM(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE t1.customer_name = 'Rodrick Heaney'", "pred_sql": "SELECT SUM(Order_Items.order_quantity) AS total_quantity FROM Customers JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id JOIN Order_Items ON Customer_Orders.order_id = Order_Items.order_id WHERE Customers.customer_name = 'Rodrick Heaney'", "source_tables": ["customer_orders", "customers", "order_items"], "error_info": ""}, {"sample_id": 6116, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT SUM(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE t1.customer_name = 'Rodrick Heaney'", "pred_sql": "SELECT SUM(Order_Items.order_quantity) AS total_quantity FROM Customers JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id JOIN Order_Items ON Customer_Orders.order_id = Order_Items.order_id WHERE Customers.customer_name = 'Rodrick Heaney'", "source_tables": ["customer_orders", "customers", "order_items"], "error_info": ""}, {"sample_id": 6117, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT customer_id) FROM customer_orders WHERE order_status = 'Cancelled'", "pred_sql": "SELECT COUNT(DISTINCT customer_id) AS customer_count FROM Customer_Orders WHERE order_status = 'Cancelled'", "source_tables": ["customer_orders"], "error_info": ""}, {"sample_id": 6118, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT customer_id) FROM customer_orders WHERE order_status = 'Cancelled'", "pred_sql": "SELECT COUNT(DISTINCT customer_id) AS number_of_customers FROM Customer_Orders WHERE order_status = 'Cancelled'", "source_tables": ["customer_orders"], "error_info": ""}, {"sample_id": 6119, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT COUNT(*) FROM customer_orders WHERE order_details = 'Second time'", "pred_sql": "SELECT COUNT(*) AS order_count FROM Customer_Orders WHERE order_details = 'Second time'", "source_tables": ["customer_orders"], "error_info": ""}, {"sample_id": 6120, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT COUNT(*) FROM customer_orders WHERE order_details = 'Second time'", "pred_sql": "SELECT COUNT(*) AS order_count FROM Customer_Orders WHERE order_details LIKE '%Second time%'", "source_tables": ["customer_orders"], "error_info": ""}, {"sample_id": 6121, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT t1.customer_name, t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id WHERE order_status = 'Delivered'", "pred_sql": "SELECT Customers.customer_name, Customer_Orders.order_date FROM Customer_Orders JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id WHERE Customer_Orders.order_status = 'Delivered'", "source_tables": ["customer_orders", "customers"], "error_info": ""}, {"sample_id": 6122, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT t1.customer_name, t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id WHERE order_status = 'Delivered'", "pred_sql": "SELECT Customers.customer_name, Customer_Orders.order_date FROM Customer_Orders JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id WHERE Customer_Orders.order_status = 'Delivered'", "source_tables": ["customer_orders", "customers"], "error_info": ""}, {"sample_id": 6123, "db_id": "customers_and_addresses", "score": 0, "gold_sql": "SELECT SUM(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id WHERE t1.order_status = 'Cancelled'", "pred_sql": "SELECT COUNT(DISTINCT oi.product_id) AS total_products FROM Customer_Orders AS co JOIN Order_Items AS oi ON co.order_id = oi.order_id WHERE co.order_status = 'Cancelled'", "source_tables": ["customer_orders", "order_items"], "error_info": "Result not equal"}, {"sample_id": 6124, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT SUM(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id WHERE t1.order_status = 'Cancelled'", "pred_sql": "SELECT SUM(Order_Items.order_quantity) AS total_quantity FROM Customer_Orders JOIN Order_Items ON Customer_Orders.order_id = Order_Items.order_id WHERE Customer_Orders.order_status = 'Cancelled'", "source_tables": ["customer_orders", "order_items"], "error_info": ""}, {"sample_id": 6125, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT SUM(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id WHERE t1.order_date < '2018-03-17 07:13:53'", "pred_sql": "SELECT SUM(order_quantity) AS total_products_ordered FROM Order_Items AS oi JOIN Customer_Orders AS co ON oi.order_id = co.order_id WHERE co.order_date < '2018-03-17 07:13:53'", "source_tables": ["customer_orders", "order_items"], "error_info": ""}, {"sample_id": 6126, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT SUM(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id WHERE t1.order_date < '2018-03-17 07:13:53'", "pred_sql": "SELECT SUM(order_quantity) AS total_products_purchased FROM Order_Items AS oi JOIN Customer_Orders AS co ON oi.order_id = co.order_id WHERE co.order_date < '2018-03-17 07:13:53'", "source_tables": ["customer_orders", "order_items"], "error_info": ""}, {"sample_id": 6127, "db_id": "customers_and_addresses", "score": 0, "gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id ORDER BY t2.order_date DESC LIMIT 1", "pred_sql": "SELECT customer_id FROM Customer_Orders ORDER BY order_date DESC LIMIT 1", "source_tables": ["customer_orders", "customers"], "error_info": "Result not equal"}, {"sample_id": 6128, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id ORDER BY t2.order_date DESC LIMIT 1", "pred_sql": "SELECT customer_name FROM Customers WHERE customer_id = (SELECT customer_id FROM Customer_Orders ORDER BY order_date DESC LIMIT 1)", "source_tables": ["customer_orders", "customers"], "error_info": ""}, {"sample_id": 6129, "db_id": "customers_and_addresses", "score": 0, "gold_sql": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT product_id, SUM(order_quantity) AS total_ordered FROM Order_Items GROUP BY product_id ORDER BY total_ordered DESC LIMIT 1", "source_tables": ["products", "order_items"], "error_info": "Result not equal"}, {"sample_id": 6130, "db_id": "customers_and_addresses", "score": 0, "gold_sql": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Products.product_id, Products.product_details, COUNT(Order_Items.product_id) AS order_count FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Order_Items.product_id ORDER BY order_count DESC LIMIT 1", "source_tables": ["products", "order_items"], "error_info": "Result not equal"}, {"sample_id": 6131, "db_id": "customers_and_addresses", "score": 0, "gold_sql": "SELECT t2.product_details, t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_id ORDER BY SUM(t1.order_quantity) LIMIT 1", "pred_sql": "SELECT oi.product_id, SUM(oi.order_quantity) AS total_quantity FROM Order_Items AS oi JOIN Customer_Orders AS co ON oi.order_id = co.order_id GROUP BY oi.product_id ORDER BY total_quantity DESC LIMIT 1", "source_tables": ["products", "order_items"], "error_info": "Result not equal"}, {"sample_id": 6132, "db_id": "customers_and_addresses", "score": 0, "gold_sql": "SELECT t2.product_details, t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_id ORDER BY SUM(t1.order_quantity) LIMIT 1", "pred_sql": "SELECT oi.product_id, COUNT(oi.product_id) AS purchase_count FROM Order_Items AS oi GROUP BY oi.product_id ORDER BY purchase_count DESC LIMIT 1", "source_tables": ["products", "order_items"], "error_info": "Result not equal"}, {"sample_id": 6133, "db_id": "customers_and_addresses", "score": 0, "gold_sql": "SELECT address_content FROM addresses WHERE city = 'East Julianaside' AND state_province_county = 'Texas' UNION SELECT address_content FROM addresses WHERE city = 'Gleasonmouth' AND state_province_county = 'Arizona'", "pred_sql": "SELECT * FROM Addresses WHERE (city = 'East Julianaside' AND state_province_county = 'Texas') OR (city = 'Gleasonmouth' AND state_province_county = 'Arizona')", "source_tables": ["addresses"], "error_info": "Result not equal"}, {"sample_id": 6134, "db_id": "customers_and_addresses", "score": 0, "gold_sql": "SELECT address_content FROM addresses WHERE city = 'East Julianaside' AND state_province_county = 'Texas' UNION SELECT address_content FROM addresses WHERE city = 'Gleasonmouth' AND state_province_county = 'Arizona'", "pred_sql": "SELECT * FROM Addresses WHERE (city = 'East Julianaside' AND state_province_county = 'Texas') OR (city = 'Gleasonmouth' AND state_province_county = 'Arizona')", "source_tables": ["addresses"], "error_info": "Result not equal"}, {"sample_id": 6135, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT customer_name FROM customers WHERE payment_method <> 'Cash'", "pred_sql": "SELECT customer_name FROM Customers WHERE payment_method <> 'Cash'", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 6136, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT customer_name FROM customers WHERE payment_method <> 'Cash'", "pred_sql": "SELECT customer_name FROM Customers WHERE payment_method <> 'Cash'", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 6137, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE t4.product_details = 'Latte'", "pred_sql": "SELECT customer_name FROM Customers WHERE NOT customer_id IN (SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_id IN (SELECT order_id FROM Order_Items WHERE product_id = (SELECT product_id FROM Products WHERE product_details = 'Latte')))", "source_tables": ["products", "customer_orders", "customers", "order_items"], "error_info": ""}, {"sample_id": 6138, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE t4.product_details = 'Latte'", "pred_sql": "SELECT customer_name FROM Customers WHERE NOT customer_id IN (SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_id IN (SELECT order_id FROM Order_Items WHERE product_id = (SELECT product_id FROM Products WHERE product_details = 'Latte')))", "source_tables": ["products", "customer_orders", "customers", "order_items"], "error_info": ""}, {"sample_id": 6139, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id", "pred_sql": "SELECT customer_name FROM Customers WHERE NOT customer_id IN (SELECT customer_id FROM Customer_Orders)", "source_tables": ["customer_orders", "customers"], "error_info": ""}, {"sample_id": 6140, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id", "pred_sql": "SELECT customer_name FROM Customers WHERE NOT customer_id IN (SELECT customer_id FROM Customer_Orders)", "source_tables": ["customer_orders", "customers"], "error_info": ""}, {"sample_id": 6141, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE t4.product_details = 'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE t4.product_details = 'Americano'", "pred_sql": "SELECT DISTINCT c.customer_name FROM Customers AS c JOIN Customer_Orders AS co ON c.customer_id = co.customer_id JOIN Order_Items AS oi ON co.order_id = oi.order_id JOIN Products AS p ON oi.product_id = p.product_id WHERE p.product_details IN ('Latte', 'Americano') GROUP BY c.customer_id HAVING COUNT(DISTINCT p.product_details) = 2", "source_tables": ["products", "customer_orders", "customers", "order_items"], "error_info": ""}, {"sample_id": 6142, "db_id": "customers_and_addresses", "score": 1, "gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE t4.product_details = 'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE t4.product_details = 'Americano'", "pred_sql": "SELECT DISTINCT c.customer_name FROM Customers AS c JOIN Customer_Orders AS co ON c.customer_id = co.customer_id JOIN Order_Items AS oi ON co.order_id = oi.order_id JOIN Products AS p ON oi.product_id = p.product_id WHERE p.product_details IN ('Latte', 'Americano') GROUP BY c.customer_id HAVING COUNT(DISTINCT p.product_details) = 2", "source_tables": ["products", "customer_orders", "customers", "order_items"], "error_info": ""}, {"sample_id": 6143, "db_id": "music_4", "score": 1, "gold_sql": "SELECT COUNT(*) FROM artist", "pred_sql": "SELECT COUNT(*) AS Artist_Count FROM artist", "source_tables": ["artist"], "error_info": ""}, {"sample_id": 6144, "db_id": "music_4", "score": 1, "gold_sql": "SELECT COUNT(*) FROM artist", "pred_sql": "SELECT COUNT(*) AS Artist_Count FROM artist", "source_tables": ["artist"], "error_info": ""}, {"sample_id": 6145, "db_id": "music_4", "score": 1, "gold_sql": "SELECT Age FROM artist", "pred_sql": "SELECT Age FROM artist", "source_tables": ["artist"], "error_info": ""}, {"sample_id": 6146, "db_id": "music_4", "score": 1, "gold_sql": "SELECT Age FROM artist", "pred_sql": "SELECT Age FROM artist", "source_tables": ["artist"], "error_info": ""}, {"sample_id": 6147, "db_id": "music_4", "score": 1, "gold_sql": "SELECT AVG(Age) FROM artist", "pred_sql": "SELECT AVG(Age) AS Average_Age FROM artist", "source_tables": ["artist"], "error_info": ""}, {"sample_id": 6148, "db_id": "music_4", "score": 1, "gold_sql": "SELECT AVG(Age) FROM artist", "pred_sql": "SELECT AVG(Age) AS Average_Age FROM artist", "source_tables": ["artist"], "error_info": ""}, {"sample_id": 6149, "db_id": "music_4", "score": 1, "gold_sql": "SELECT Famous_Title FROM artist WHERE Artist = 'Triumfall'", "pred_sql": "SELECT Famous_Title FROM artist WHERE Artist = 'Triumfall'", "source_tables": ["artist"], "error_info": ""}, {"sample_id": 6150, "db_id": "music_4", "score": 1, "gold_sql": "SELECT Famous_Title FROM artist WHERE Artist = 'Triumfall'", "pred_sql": "SELECT Famous_Title FROM artist WHERE Artist = 'Triumfall'", "source_tables": ["artist"], "error_info": ""}, {"sample_id": 6151, "db_id": "music_4", "score": 1, "gold_sql": "SELECT DISTINCT (Famous_Release_date) FROM artist", "pred_sql": "SELECT DISTINCT Famous_Release_date FROM artist", "source_tables": ["artist"], "error_info": ""}, {"sample_id": 6152, "db_id": "music_4", "score": 1, "gold_sql": "SELECT DISTINCT (Famous_Release_date) FROM artist", "pred_sql": "SELECT DISTINCT Famous_Release_date FROM artist", "source_tables": ["artist"], "error_info": ""}, {"sample_id": 6153, "db_id": "music_4", "score": 1, "gold_sql": "SELECT Date_of_ceremony, RESULT FROM music_festival", "pred_sql": "SELECT Date_of_ceremony, Result FROM music_festival", "source_tables": ["music_festival"], "error_info": ""}, {"sample_id": 6154, "db_id": "music_4", "score": 1, "gold_sql": "SELECT Date_of_ceremony, RESULT FROM music_festival", "pred_sql": "SELECT Date_of_ceremony, Result FROM music_festival", "source_tables": ["music_festival"], "error_info": ""}, {"sample_id": 6155, "db_id": "music_4", "score": 0, "gold_sql": "SELECT Category FROM music_festival WHERE RESULT = 'Awarded'", "pred_sql": "SELECT DISTINCT Category FROM music_festival WHERE Result = 'Awarded'", "source_tables": ["music_festival"], "error_info": "Result not equal"}, {"sample_id": 6156, "db_id": "music_4", "score": 0, "gold_sql": "SELECT Category FROM music_festival WHERE RESULT = 'Awarded'", "pred_sql": "SELECT DISTINCT Category FROM music_festival WHERE Result = 'Awarded'", "source_tables": ["music_festival"], "error_info": "Result not equal"}, {"sample_id": 6157, "db_id": "music_4", "score": 1, "gold_sql": "SELECT MAX(Weeks_on_Top), MIN(Weeks_on_Top) FROM volume", "pred_sql": "SELECT MAX(Weeks_on_Top) AS Max_Weeks, MIN(Weeks_on_Top) AS Min_Weeks FROM volume", "source_tables": ["volume"], "error_info": ""}, {"sample_id": 6158, "db_id": "music_4", "score": 1, "gold_sql": "SELECT MAX(Weeks_on_Top), MIN(Weeks_on_Top) FROM volume", "pred_sql": "SELECT MAX(Weeks_on_Top) AS Max_Weeks, MIN(Weeks_on_Top) AS Min_Weeks FROM volume", "source_tables": ["volume"], "error_info": ""}, {"sample_id": 6159, "db_id": "music_4", "score": 1, "gold_sql": "SELECT Song FROM volume WHERE Weeks_on_Top > 1", "pred_sql": "SELECT volume.Song FROM volume WHERE volume.Weeks_on_Top > 1", "source_tables": ["volume"], "error_info": ""}, {"sample_id": 6160, "db_id": "music_4", "score": 1, "gold_sql": "SELECT Song FROM volume WHERE Weeks_on_Top > 1", "pred_sql": "SELECT volume.Song FROM volume WHERE volume.Weeks_on_Top > 1", "source_tables": ["volume"], "error_info": ""}, {"sample_id": 6161, "db_id": "music_4", "score": 1, "gold_sql": "SELECT Song FROM volume ORDER BY Song", "pred_sql": "SELECT Song FROM volume ORDER BY Song ASC", "source_tables": ["volume"], "error_info": ""}, {"sample_id": 6162, "db_id": "music_4", "score": 0, "gold_sql": "SELECT Song FROM volume ORDER BY Song", "pred_sql": "SELECT Song FROM volume ORDER BY Volume_ID ASC", "source_tables": ["volume"], "error_info": "Result not equal"}, {"sample_id": 6163, "db_id": "music_4", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT Artist_ID) FROM volume", "pred_sql": "SELECT COUNT(DISTINCT Artist_ID) AS distinct_artists FROM volume", "source_tables": ["volume"], "error_info": ""}, {"sample_id": 6164, "db_id": "music_4", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT Artist_ID) FROM volume", "pred_sql": "SELECT COUNT(DISTINCT artist.Artist_ID) AS distinct_artist_count FROM artist JOIN volume ON artist.Artist_ID = volume.Artist_ID", "source_tables": ["volume"], "error_info": ""}, {"sample_id": 6165, "db_id": "music_4", "score": 0, "gold_sql": "SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume = T2.Volume_ID WHERE T2.Weeks_on_Top > 2", "pred_sql": "SELECT DISTINCT mf.Date_of_ceremony FROM music_festival AS mf JOIN volume AS v ON mf.Volume = v.Volume_ID WHERE v.Weeks_on_Top > 2", "source_tables": ["music_festival", "volume"], "error_info": "Result not equal"}, {"sample_id": 6166, "db_id": "music_4", "score": 1, "gold_sql": "SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume = T2.Volume_ID WHERE T2.Weeks_on_Top > 2", "pred_sql": "SELECT mf.Date_of_ceremony FROM music_festival AS mf JOIN volume AS v ON mf.Volume = v.Volume_ID WHERE v.Weeks_on_Top > 2", "source_tables": ["music_festival", "volume"], "error_info": ""}, {"sample_id": 6167, "db_id": "music_4", "score": 0, "gold_sql": "SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume = T2.Volume_ID WHERE T1.Result = 'Nominated'", "pred_sql": "SELECT volume.Song FROM volume JOIN music_festival ON volume.Volume_ID = music_festival.Volume WHERE music_festival.Result = 'nominated'", "source_tables": ["music_festival", "volume"], "error_info": "Result not equal"}, {"sample_id": 6168, "db_id": "music_4", "score": 1, "gold_sql": "SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume = T2.Volume_ID WHERE T1.Result = 'Nominated'", "pred_sql": "SELECT volume.Song FROM volume JOIN music_festival ON volume.Volume_ID = music_festival.Volume WHERE music_festival.Result = 'Nominated'", "source_tables": ["music_festival", "volume"], "error_info": ""}, {"sample_id": 6169, "db_id": "music_4", "score": 1, "gold_sql": "SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Artist = 'Gorgoroth'", "pred_sql": "SELECT volume.Issue_Date FROM volume JOIN artist ON volume.Artist_ID = artist.Artist_ID WHERE artist.Artist = 'Gorgoroth'", "source_tables": ["artist", "volume"], "error_info": ""}, {"sample_id": 6170, "db_id": "music_4", "score": 1, "gold_sql": "SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Artist = 'Gorgoroth'", "pred_sql": "SELECT v.Issue_Date FROM volume AS v JOIN artist AS a ON v.Artist_ID = a.Artist_ID WHERE a.Artist = 'Gorgoroth'", "source_tables": ["artist", "volume"], "error_info": ""}, {"sample_id": 6171, "db_id": "music_4", "score": 1, "gold_sql": "SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.age >= 32", "pred_sql": "SELECT volume.Song FROM volume JOIN artist ON volume.Artist_ID = artist.Artist_ID WHERE artist.Age >= '32'", "source_tables": ["artist", "volume"], "error_info": ""}, {"sample_id": 6172, "db_id": "music_4", "score": 1, "gold_sql": "SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.age >= 32", "pred_sql": "SELECT v.Song FROM volume AS v JOIN artist AS a ON v.Artist_ID = a.Artist_ID WHERE a.Age >= '32'", "source_tables": ["artist", "volume"], "error_info": ""}, {"sample_id": 6173, "db_id": "music_4", "score": 1, "gold_sql": "SELECT AVG(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.age <= 25", "pred_sql": "SELECT AVG(v.Weeks_on_Top) AS Average_Weeks_On_Top FROM artist AS a JOIN volume AS v ON a.Artist_ID = v.Artist_ID WHERE a.Age <= '25'", "source_tables": ["artist", "volume"], "error_info": ""}, {"sample_id": 6174, "db_id": "music_4", "score": 1, "gold_sql": "SELECT AVG(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.age <= 25", "pred_sql": "SELECT AVG(v.Weeks_on_Top) AS Average_Weeks_On_Top FROM volume AS v JOIN artist AS a ON v.Artist_ID = a.Artist_ID WHERE a.Age <= '25'", "source_tables": ["artist", "volume"], "error_info": ""}, {"sample_id": 6175, "db_id": "music_4", "score": 1, "gold_sql": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top > 2", "pred_sql": "SELECT artist.Famous_Title FROM artist JOIN volume ON artist.Artist_ID = volume.Artist_ID WHERE volume.Weeks_on_Top > 2", "source_tables": ["artist", "volume"], "error_info": ""}, {"sample_id": 6176, "db_id": "music_4", "score": 1, "gold_sql": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top > 2", "pred_sql": "SELECT artist.Famous_Title FROM artist JOIN volume ON artist.Artist_ID = volume.Artist_ID WHERE volume.Weeks_on_Top > 2", "source_tables": ["artist", "volume"], "error_info": ""}, {"sample_id": 6177, "db_id": "music_4", "score": 1, "gold_sql": "SELECT Famous_Title, Age FROM artist ORDER BY Age DESC", "pred_sql": "SELECT Age, Famous_Title FROM artist ORDER BY Age DESC", "source_tables": ["artist"], "error_info": ""}, {"sample_id": 6178, "db_id": "music_4", "score": 1, "gold_sql": "SELECT Famous_Title, Age FROM artist ORDER BY Age DESC", "pred_sql": "SELECT Famous_Title, Age FROM artist ORDER BY Age DESC", "source_tables": ["artist"], "error_info": ""}, {"sample_id": 6179, "db_id": "music_4", "score": 1, "gold_sql": "SELECT Famous_Release_date FROM artist ORDER BY Age DESC LIMIT 1", "pred_sql": "SELECT Famous_Release_date FROM artist WHERE Age = (SELECT MAX(Age) FROM artist)", "source_tables": ["artist"], "error_info": ""}, {"sample_id": 6180, "db_id": "music_4", "score": 0, "gold_sql": "SELECT Famous_Release_date FROM artist ORDER BY Age DESC LIMIT 1", "pred_sql": "SELECT Famous_Release_date FROM artist ORDER BY Age ASC LIMIT 1", "source_tables": ["artist"], "error_info": "Result not equal"}, {"sample_id": 6181, "db_id": "music_4", "score": 1, "gold_sql": "SELECT Category, COUNT(*) FROM music_festival GROUP BY Category", "pred_sql": "SELECT Category, COUNT(*) AS Count FROM music_festival GROUP BY Category", "source_tables": ["music_festival"], "error_info": ""}, {"sample_id": 6182, "db_id": "music_4", "score": 1, "gold_sql": "SELECT Category, COUNT(*) FROM music_festival GROUP BY Category", "pred_sql": "SELECT Category, COUNT(*) AS Number_of_Festivals FROM music_festival GROUP BY Category", "source_tables": ["music_festival"], "error_info": ""}, {"sample_id": 6183, "db_id": "music_4", "score": 0, "gold_sql": "SELECT RESULT FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Result, COUNT(Result) AS Count FROM music_festival GROUP BY Result ORDER BY Count DESC LIMIT 1", "source_tables": ["music_festival"], "error_info": "Result not equal"}, {"sample_id": 6184, "db_id": "music_4", "score": 0, "gold_sql": "SELECT RESULT FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Artist, COUNT(*) AS Frequency FROM music_festival AS mf JOIN volume AS v ON mf.Volume = v.Volume_ID JOIN artist AS a ON v.Artist_ID = a.Artist_ID GROUP BY Artist ORDER BY Frequency DESC LIMIT 1", "source_tables": ["music_festival"], "error_info": "Result not equal"}, {"sample_id": 6185, "db_id": "music_4", "score": 0, "gold_sql": "SELECT Category FROM music_festival GROUP BY Category HAVING COUNT(*) > 1", "pred_sql": "SELECT Category, COUNT(*) AS Count FROM music_festival GROUP BY Category HAVING COUNT(*) > 1", "source_tables": ["music_festival"], "error_info": "Result not equal"}, {"sample_id": 6186, "db_id": "music_4", "score": 1, "gold_sql": "SELECT Category FROM music_festival GROUP BY Category HAVING COUNT(*) > 1", "pred_sql": "SELECT Category FROM music_festival GROUP BY Category HAVING COUNT(ID) > 1", "source_tables": ["music_festival"], "error_info": ""}, {"sample_id": 6187, "db_id": "music_4", "score": 0, "gold_sql": "SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1", "pred_sql": "SELECT Song FROM volume WHERE Weeks_on_Top = (SELECT MAX(Weeks_on_Top) FROM volume)", "source_tables": ["volume"], "error_info": "Result not equal"}, {"sample_id": 6188, "db_id": "music_4", "score": 0, "gold_sql": "SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1", "pred_sql": "SELECT Song FROM volume WHERE Weeks_on_Top = (SELECT MAX(Weeks_on_Top) FROM volume)", "source_tables": ["volume"], "error_info": "Result not equal"}, {"sample_id": 6189, "db_id": "music_4", "score": 1, "gold_sql": "SELECT Famous_Title FROM artist WHERE NOT Artist_ID IN (SELECT Artist_ID FROM volume)", "pred_sql": "SELECT artist.Famous_Title FROM artist LEFT JOIN volume ON artist.Artist_ID = volume.Artist_ID WHERE volume.Artist_ID IS NULL", "source_tables": ["artist", "volume"], "error_info": ""}, {"sample_id": 6190, "db_id": "music_4", "score": 1, "gold_sql": "SELECT Famous_Title FROM artist WHERE NOT Artist_ID IN (SELECT Artist_ID FROM volume)", "pred_sql": "SELECT artist.Famous_Title FROM artist LEFT JOIN volume ON artist.Artist_ID = volume.Artist_ID WHERE volume.Artist_ID IS NULL", "source_tables": ["artist", "volume"], "error_info": ""}, {"sample_id": 6191, "db_id": "music_4", "score": 0, "gold_sql": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top > 2 INTERSECT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top < 2", "pred_sql": "SELECT a.Famous_Title FROM artist AS a JOIN volume AS v ON a.Artist_ID = v.Artist_ID WHERE v.Weeks_on_Top > 2 OR v.Weeks_on_Top < 2", "source_tables": ["artist", "volume"], "error_info": "Result not equal"}, {"sample_id": 6192, "db_id": "music_4", "score": 1, "gold_sql": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top > 2 INTERSECT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top < 2", "pred_sql": "SELECT DISTINCT a.Famous_Title FROM artist AS a JOIN volume AS v ON a.Artist_ID = v.Artist_ID WHERE a.Artist_ID IN (SELECT Artist_ID FROM volume GROUP BY Artist_ID HAVING SUM(CASE WHEN Weeks_on_Top > 2 THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN Weeks_on_Top < 2 THEN 1 ELSE 0 END) > 0)", "source_tables": ["artist", "volume"], "error_info": ""}, {"sample_id": 6193, "db_id": "music_4", "score": 1, "gold_sql": "SELECT Date_of_ceremony FROM music_festival WHERE Category = 'Best Song' AND RESULT = 'Awarded'", "pred_sql": "SELECT Date_of_ceremony FROM music_festival WHERE Category = 'Best Song' AND Result = 'Awarded'", "source_tables": ["music_festival"], "error_info": ""}, {"sample_id": 6194, "db_id": "music_4", "score": 1, "gold_sql": "SELECT Date_of_ceremony FROM music_festival WHERE Category = 'Best Song' AND RESULT = 'Awarded'", "pred_sql": "SELECT Date_of_ceremony FROM music_festival WHERE Category = 'Best Song' AND Result = 'Awarded'", "source_tables": ["music_festival"], "error_info": ""}, {"sample_id": 6195, "db_id": "music_4", "score": 0, "gold_sql": "SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1", "pred_sql": "SELECT Issue_Date FROM volume WHERE Weeks_on_Top = (SELECT MIN(Weeks_on_Top) FROM volume)", "source_tables": ["volume"], "error_info": "Result not equal"}, {"sample_id": 6196, "db_id": "music_4", "score": 1, "gold_sql": "SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1", "pred_sql": "SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1", "source_tables": ["volume"], "error_info": ""}, {"sample_id": 6197, "db_id": "music_4", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT Artist_ID) FROM volume", "pred_sql": "SELECT COUNT(DISTINCT artist.Artist_ID) AS distinct_artists_with_volumes FROM artist JOIN volume ON artist.Artist_ID = volume.Artist_ID", "source_tables": ["volume"], "error_info": ""}, {"sample_id": 6198, "db_id": "music_4", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT Artist_ID) FROM volume", "pred_sql": "SELECT COUNT(DISTINCT artist.Artist_ID) AS Number_of_Artists FROM artist JOIN volume ON artist.Artist_ID = volume.Artist_ID", "source_tables": ["volume"], "error_info": ""}, {"sample_id": 6199, "db_id": "music_4", "score": 0, "gold_sql": "SELECT RESULT, COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC", "pred_sql": "SELECT artist.Artist, COUNT(music_festival.ID) AS Festival_Count FROM artist LEFT JOIN volume ON artist.Artist_ID = volume.Artist_ID LEFT JOIN music_festival ON volume.Volume_ID = music_festival.Volume GROUP BY artist.Artist ORDER BY Festival_Count DESC", "source_tables": ["music_festival"], "error_info": "Result not equal"}, {"sample_id": 6200, "db_id": "music_4", "score": 1, "gold_sql": "SELECT RESULT, COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC", "pred_sql": "SELECT Result, COUNT(*) AS Count FROM music_festival GROUP BY Result ORDER BY Count DESC", "source_tables": ["music_festival"], "error_info": ""}, {"sample_id": 6201, "db_id": "music_4", "score": 1, "gold_sql": "SELECT Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.age <= 23", "pred_sql": "SELECT DISTINCT v.Issue_Date FROM volume AS v JOIN artist AS a ON v.Artist_ID = a.Artist_ID WHERE a.Age <= '23'", "source_tables": ["artist", "volume"], "error_info": ""}, {"sample_id": 6202, "db_id": "music_4", "score": 1, "gold_sql": "SELECT Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.age <= 23", "pred_sql": "SELECT v.Issue_Date FROM volume AS v JOIN artist AS a ON v.Artist_ID = a.Artist_ID WHERE a.Age <= '23'", "source_tables": ["artist", "volume"], "error_info": ""}, {"sample_id": 6203, "db_id": "roller_coaster", "score": 1, "gold_sql": "SELECT COUNT(*) FROM roller_coaster", "pred_sql": "SELECT COUNT(*) AS total_roller_coasters FROM roller_coaster", "source_tables": ["roller_coaster"], "error_info": ""}, {"sample_id": 6204, "db_id": "roller_coaster", "score": 1, "gold_sql": "SELECT Name FROM roller_coaster ORDER BY LENGTH ASC", "pred_sql": "SELECT Name FROM roller_coaster ORDER BY Length ASC", "source_tables": ["roller_coaster"], "error_info": ""}, {"sample_id": 6205, "db_id": "roller_coaster", "score": 1, "gold_sql": "SELECT LENGTH, Height FROM roller_coaster", "pred_sql": "SELECT Length, Height FROM roller_coaster", "source_tables": ["roller_coaster"], "error_info": ""}, {"sample_id": 6206, "db_id": "roller_coaster", "score": 1, "gold_sql": "SELECT Name FROM country WHERE Languages <> 'German'", "pred_sql": "SELECT Name FROM country WHERE Languages <> 'German'", "source_tables": ["country"], "error_info": ""}, {"sample_id": 6207, "db_id": "roller_coaster", "score": 1, "gold_sql": "SELECT Status FROM roller_coaster WHERE LENGTH > 3300 OR Height > 100", "pred_sql": "SELECT Status FROM roller_coaster WHERE Length > 3300 OR Height > 100", "source_tables": ["roller_coaster"], "error_info": ""}, {"sample_id": 6208, "db_id": "roller_coaster", "score": 1, "gold_sql": "SELECT Speed FROM roller_coaster ORDER BY LENGTH DESC LIMIT 1", "pred_sql": "SELECT Speed FROM roller_coaster WHERE Length = (SELECT MAX(Length) FROM roller_coaster)", "source_tables": ["roller_coaster"], "error_info": ""}, {"sample_id": 6209, "db_id": "roller_coaster", "score": 1, "gold_sql": "SELECT AVG(Speed) FROM roller_coaster", "pred_sql": "SELECT AVG(Speed) AS Average_Speed FROM roller_coaster", "source_tables": ["roller_coaster"], "error_info": ""}, {"sample_id": 6210, "db_id": "roller_coaster", "score": 1, "gold_sql": "SELECT Status, COUNT(*) FROM roller_coaster GROUP BY Status", "pred_sql": "SELECT Status, COUNT(*) AS Number_of_Roller_Coasters FROM roller_coaster GROUP BY Status", "source_tables": ["roller_coaster"], "error_info": ""}, {"sample_id": 6211, "db_id": "roller_coaster", "score": 0, "gold_sql": "SELECT Status FROM roller_coaster GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Status, COUNT(*) AS Count FROM roller_coaster GROUP BY Status ORDER BY Count DESC LIMIT 1", "source_tables": ["roller_coaster"], "error_info": "Result not equal"}, {"sample_id": 6212, "db_id": "roller_coaster", "score": 1, "gold_sql": "SELECT Status FROM roller_coaster GROUP BY Status HAVING COUNT(*) > 2", "pred_sql": "SELECT Status FROM roller_coaster GROUP BY Status HAVING COUNT(*) > 2", "source_tables": ["roller_coaster"], "error_info": ""}, {"sample_id": 6213, "db_id": "roller_coaster", "score": 1, "gold_sql": "SELECT Park FROM roller_coaster ORDER BY Speed DESC LIMIT 1", "pred_sql": "SELECT Park FROM roller_coaster WHERE Speed = (SELECT MAX(Speed) FROM roller_coaster)", "source_tables": ["roller_coaster"], "error_info": ""}, {"sample_id": 6214, "db_id": "roller_coaster", "score": 1, "gold_sql": "SELECT T2.Name, T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID", "pred_sql": "SELECT roller_coaster.Name AS Roller_Coaster_Name, country.Name AS Country_Name FROM roller_coaster JOIN country ON roller_coaster.Country_ID = country.Country_ID", "source_tables": ["country", "roller_coaster"], "error_info": ""}, {"sample_id": 6215, "db_id": "roller_coaster", "score": 1, "gold_sql": "SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID GROUP BY T1.Name HAVING COUNT(*) > 1", "pred_sql": "SELECT c.Name FROM country AS c JOIN roller_coaster AS r ON c.Country_ID = r.Country_ID GROUP BY c.Country_ID HAVING COUNT(r.Roller_Coaster_ID) > 1", "source_tables": ["country", "roller_coaster"], "error_info": ""}, {"sample_id": 6216, "db_id": "roller_coaster", "score": 1, "gold_sql": "SELECT T1.Name, T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID ORDER BY T2.Height DESC LIMIT 1", "pred_sql": "SELECT country.Name, country.Population FROM country JOIN roller_coaster ON country.Country_ID = roller_coaster.Country_ID WHERE roller_coaster.Height = (SELECT MAX(Height) FROM roller_coaster)", "source_tables": ["country", "roller_coaster"], "error_info": ""}, {"sample_id": 6217, "db_id": "roller_coaster", "score": 1, "gold_sql": "SELECT T1.Name, AVG(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID GROUP BY T1.Name", "pred_sql": "SELECT c.Name AS Country_Name, AVG(r.Speed) AS Average_Speed FROM country AS c JOIN roller_coaster AS r ON c.Country_ID = r.Country_ID GROUP BY c.Name", "source_tables": ["country", "roller_coaster"], "error_info": ""}, {"sample_id": 6218, "db_id": "roller_coaster", "score": 1, "gold_sql": "SELECT COUNT(*) FROM country WHERE NOT country_id IN (SELECT country_id FROM roller_coaster WHERE LENGTH > 3000)", "pred_sql": "SELECT COUNT(DISTINCT c.Country_ID) AS Country_Count FROM country AS c LEFT JOIN roller_coaster AS r ON c.Country_ID = r.Country_ID AND r.Length > 3000 WHERE r.Roller_Coaster_ID IS NULL", "source_tables": ["country", "roller_coaster"], "error_info": ""}, {"sample_id": 6219, "db_id": "roller_coaster", "score": 0, "gold_sql": "SELECT T1.name, T1.area, T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID WHERE T2.speed > 60 INTERSECT SELECT T1.name, T1.area, T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID WHERE T2.speed < 55", "pred_sql": "SELECT c.Name, c.Area, c.Population FROM country AS c JOIN roller_coaster AS r ON c.Country_ID = r.Country_ID WHERE r.Speed > (SELECT AVG(Speed) FROM roller_coaster) GROUP BY c.Country_ID, c.Name, c.Area, c.Population", "source_tables": ["country", "roller_coaster"], "error_info": "Result not equal"}, {"sample_id": 6220, "db_id": "ship_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT rank) FROM captain", "pred_sql": "SELECT COUNT(DISTINCT Rank) AS Different_Captain_Ranks FROM captain", "source_tables": ["captain"], "error_info": ""}, {"sample_id": 6221, "db_id": "ship_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT rank) FROM captain", "pred_sql": "SELECT COUNT(DISTINCT Rank) AS Different_Rank_Count FROM captain", "source_tables": ["captain"], "error_info": ""}, {"sample_id": 6222, "db_id": "ship_1", "score": 1, "gold_sql": "SELECT COUNT(*), rank FROM captain GROUP BY rank", "pred_sql": "SELECT Rank, COUNT(*) AS Captain_Count FROM captain GROUP BY Rank", "source_tables": ["captain"], "error_info": ""}, {"sample_id": 6223, "db_id": "ship_1", "score": 1, "gold_sql": "SELECT COUNT(*), rank FROM captain GROUP BY rank", "pred_sql": "SELECT Rank, COUNT(*) AS Captain_Count FROM captain GROUP BY Rank", "source_tables": ["captain"], "error_info": ""}, {"sample_id": 6224, "db_id": "ship_1", "score": 1, "gold_sql": "SELECT COUNT(*), rank FROM captain WHERE age < 50 GROUP BY rank", "pred_sql": "SELECT Rank, COUNT(*) AS Captain_Count FROM captain WHERE age < '50' GROUP BY Rank", "source_tables": ["captain"], "error_info": ""}, {"sample_id": 6225, "db_id": "ship_1", "score": 1, "gold_sql": "SELECT COUNT(*), rank FROM captain WHERE age < 50 GROUP BY rank", "pred_sql": "SELECT Rank, COUNT(*) AS Captain_Count FROM captain WHERE age < '50' GROUP BY Rank", "source_tables": ["captain"], "error_info": ""}, {"sample_id": 6226, "db_id": "ship_1", "score": 1, "gold_sql": "SELECT name FROM captain ORDER BY age DESC", "pred_sql": "SELECT Name FROM captain ORDER BY age DESC", "source_tables": ["captain"], "error_info": ""}, {"sample_id": 6227, "db_id": "ship_1", "score": 1, "gold_sql": "SELECT name FROM captain ORDER BY age DESC", "pred_sql": "SELECT Name FROM captain ORDER BY age DESC", "source_tables": ["captain"], "error_info": ""}, {"sample_id": 6228, "db_id": "ship_1", "score": 1, "gold_sql": "SELECT name, CLASS, rank FROM captain", "pred_sql": "SELECT Name, Class, Rank FROM captain", "source_tables": ["captain"], "error_info": ""}, {"sample_id": 6229, "db_id": "ship_1", "score": 1, "gold_sql": "SELECT name, CLASS, rank FROM captain", "pred_sql": "SELECT Name, Class, Rank FROM captain", "source_tables": ["captain"], "error_info": ""}, {"sample_id": 6230, "db_id": "ship_1", "score": 0, "gold_sql": "SELECT rank FROM captain GROUP BY rank ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Rank, COUNT(*) AS Count FROM captain GROUP BY Rank ORDER BY Count DESC LIMIT 1", "source_tables": ["captain"], "error_info": "Result not equal"}, {"sample_id": 6231, "db_id": "ship_1", "score": 0, "gold_sql": "SELECT rank FROM captain GROUP BY rank ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Rank FROM captain GROUP BY Rank ORDER BY COUNT(Captain_ID) ASC LIMIT 1", "source_tables": ["captain"], "error_info": "Result not equal"}, {"sample_id": 6232, "db_id": "ship_1", "score": 1, "gold_sql": "SELECT CLASS FROM captain GROUP BY CLASS HAVING COUNT(*) > 2", "pred_sql": "SELECT Class FROM captain GROUP BY Class HAVING COUNT(Captain_ID) > 2", "source_tables": ["captain"], "error_info": ""}, {"sample_id": 6233, "db_id": "ship_1", "score": 1, "gold_sql": "SELECT CLASS FROM captain GROUP BY CLASS HAVING COUNT(*) > 2", "pred_sql": "SELECT Class FROM captain GROUP BY Class HAVING COUNT(Captain_ID) > 2", "source_tables": ["captain"], "error_info": ""}, {"sample_id": 6234, "db_id": "ship_1", "score": 1, "gold_sql": "SELECT name FROM captain WHERE rank = 'Midshipman' OR rank = 'Lieutenant'", "pred_sql": "SELECT Name FROM captain WHERE Rank IN ('Midshipman', 'Lieutenant')", "source_tables": ["captain"], "error_info": ""}, {"sample_id": 6235, "db_id": "ship_1", "score": 1, "gold_sql": "SELECT name FROM captain WHERE rank = 'Midshipman' OR rank = 'Lieutenant'", "pred_sql": "SELECT Name FROM captain WHERE Rank IN ('Midshipman', 'Lieutenant')", "source_tables": ["captain"], "error_info": ""}, {"sample_id": 6236, "db_id": "ship_1", "score": 1, "gold_sql": "SELECT AVG(age), MIN(age), CLASS FROM captain GROUP BY CLASS", "pred_sql": "SELECT Class, AVG(age) AS Average_Age, MIN(age) AS Minimum_Age FROM captain GROUP BY Class", "source_tables": ["captain"], "error_info": ""}, {"sample_id": 6237, "db_id": "ship_1", "score": 1, "gold_sql": "SELECT AVG(age), MIN(age), CLASS FROM captain GROUP BY CLASS", "pred_sql": "SELECT Class, AVG(age) AS Average_Age, MIN(age) AS Minimum_Age FROM captain GROUP BY Class", "source_tables": ["captain"], "error_info": ""}, {"sample_id": 6238, "db_id": "ship_1", "score": 0, "gold_sql": "SELECT rank FROM captain WHERE CLASS = 'Cutter' INTERSECT SELECT rank FROM captain WHERE CLASS = 'Armed schooner'", "pred_sql": "SELECT DISTINCT c.Rank FROM captain AS c JOIN Ship AS s ON c.Ship_ID = s.Ship_ID WHERE s.Class IN ('Cutter', 'Armed schooner') GROUP BY c.Rank HAVING COUNT(DISTINCT s.Class) = 2", "source_tables": ["captain"], "error_info": "Result not equal"}, {"sample_id": 6239, "db_id": "ship_1", "score": 0, "gold_sql": "SELECT rank FROM captain WHERE CLASS = 'Cutter' INTERSECT SELECT rank FROM captain WHERE CLASS = 'Armed schooner'", "pred_sql": "SELECT DISTINCT c.Rank FROM captain AS c JOIN Ship AS s ON c.Ship_ID = s.Ship_ID WHERE s.Class IN ('Cutter', 'Armed schooner')", "source_tables": ["captain"], "error_info": "Result not equal"}, {"sample_id": 6240, "db_id": "ship_1", "score": 0, "gold_sql": "SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE CLASS = 'Third-rate ship of the line'", "pred_sql": "SELECT DISTINCT Rank FROM captain WHERE NOT Ship_ID IN (SELECT Ship_ID FROM Ship WHERE Class = 'Third-rate ship of the line')", "source_tables": ["captain"], "error_info": "Result not equal"}, {"sample_id": 6241, "db_id": "ship_1", "score": 0, "gold_sql": "SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE CLASS = 'Third-rate ship of the line'", "pred_sql": "SELECT DISTINCT c.Rank FROM captain AS c JOIN Ship AS s ON c.Ship_ID = s.Ship_ID WHERE s.Class = 'Third-rate ship of the line' AND NOT c.Captain_ID IN (SELECT Captain_ID FROM captain)", "source_tables": ["captain"], "error_info": "Result not equal"}, {"sample_id": 6242, "db_id": "ship_1", "score": 1, "gold_sql": "SELECT name FROM captain ORDER BY age LIMIT 1", "pred_sql": "SELECT Name FROM captain ORDER BY age ASC LIMIT 1", "source_tables": ["captain"], "error_info": ""}, {"sample_id": 6243, "db_id": "ship_1", "score": 1, "gold_sql": "SELECT name FROM captain ORDER BY age LIMIT 1", "pred_sql": "SELECT Name FROM captain ORDER BY age ASC LIMIT 1", "source_tables": ["captain"], "error_info": ""}, {"sample_id": 6244, "db_id": "ship_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM ship", "pred_sql": "SELECT COUNT(*) AS total_ships FROM Ship", "source_tables": ["ship"], "error_info": ""}, {"sample_id": 6245, "db_id": "ship_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM ship", "pred_sql": "SELECT COUNT(*) AS NumberOfShips FROM Ship", "source_tables": ["ship"], "error_info": ""}, {"sample_id": 6246, "db_id": "ship_1", "score": 0, "gold_sql": "SELECT name, TYPE, flag FROM ship ORDER BY built_year DESC LIMIT 1", "pred_sql": "SELECT Name, Type, Flag FROM Ship WHERE Built_Year = (SELECT MAX(Built_Year) FROM Ship)", "source_tables": ["ship"], "error_info": "Result not equal"}, {"sample_id": 6247, "db_id": "ship_1", "score": 0, "gold_sql": "SELECT name, TYPE, flag FROM ship ORDER BY built_year DESC LIMIT 1", "pred_sql": "SELECT Name, Type, Flag FROM Ship WHERE Built_Year = (SELECT MAX(Built_Year) FROM Ship)", "source_tables": ["ship"], "error_info": "Result not equal"}, {"sample_id": 6248, "db_id": "ship_1", "score": 1, "gold_sql": "SELECT COUNT(*), flag FROM ship GROUP BY flag", "pred_sql": "SELECT Flag, COUNT(*) AS Number_of_Ships FROM Ship GROUP BY Flag", "source_tables": ["ship"], "error_info": ""}, {"sample_id": 6249, "db_id": "ship_1", "score": 1, "gold_sql": "SELECT COUNT(*), flag FROM ship GROUP BY flag", "pred_sql": "SELECT Flag, COUNT(*) AS Ship_Count FROM Ship GROUP BY Flag", "source_tables": ["ship"], "error_info": ""}, {"sample_id": 6250, "db_id": "ship_1", "score": 0, "gold_sql": "SELECT flag FROM ship GROUP BY flag ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Flag, COUNT(*) AS Flag_Count FROM Ship GROUP BY Flag ORDER BY Flag_Count DESC LIMIT 1", "source_tables": ["ship"], "error_info": "Result not equal"}, {"sample_id": 6251, "db_id": "ship_1", "score": 1, "gold_sql": "SELECT flag FROM ship GROUP BY flag ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Flag FROM Ship GROUP BY Flag ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["ship"], "error_info": ""}, {"sample_id": 6252, "db_id": "ship_1", "score": 1, "gold_sql": "SELECT name FROM ship ORDER BY built_year, CLASS", "pred_sql": "SELECT Name FROM Ship ORDER BY Built_Year, Class", "source_tables": ["ship"], "error_info": ""}, {"sample_id": 6253, "db_id": "ship_1", "score": 1, "gold_sql": "SELECT name FROM ship ORDER BY built_year, CLASS", "pred_sql": "SELECT Name FROM Ship ORDER BY Built_Year, Class", "source_tables": ["ship"], "error_info": ""}, {"sample_id": 6254, "db_id": "ship_1", "score": 1, "gold_sql": "SELECT TYPE FROM ship WHERE flag = 'Panama' INTERSECT SELECT TYPE FROM ship WHERE flag = 'Malta'", "pred_sql": "SELECT DISTINCT s1.Type FROM Ship AS s1 JOIN Ship AS s2 ON s1.Type = s2.Type WHERE s1.Flag = 'Panama' AND s2.Flag = 'Malta'", "source_tables": ["ship"], "error_info": ""}, {"sample_id": 6255, "db_id": "ship_1", "score": 1, "gold_sql": "SELECT TYPE FROM ship WHERE flag = 'Panama' INTERSECT SELECT TYPE FROM ship WHERE flag = 'Malta'", "pred_sql": "SELECT DISTINCT s.Type FROM Ship AS s WHERE s.Flag = 'Panama' OR s.Flag = 'Malta' GROUP BY s.Type HAVING COUNT(DISTINCT s.Flag) = 2", "source_tables": ["ship"], "error_info": ""}, {"sample_id": 6256, "db_id": "ship_1", "score": 0, "gold_sql": "SELECT built_year FROM ship GROUP BY built_year ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Built_Year, COUNT(*) AS Ship_Count FROM Ship GROUP BY Built_Year ORDER BY Ship_Count DESC LIMIT 1", "source_tables": ["ship"], "error_info": "Result not equal"}, {"sample_id": 6257, "db_id": "ship_1", "score": 0, "gold_sql": "SELECT built_year FROM ship GROUP BY built_year ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Built_Year, COUNT(*) AS Ship_Count FROM Ship GROUP BY Built_Year ORDER BY Ship_Count DESC LIMIT 1", "source_tables": ["ship"], "error_info": "Result not equal"}, {"sample_id": 6258, "db_id": "ship_1", "score": 1, "gold_sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id GROUP BY t2.ship_id HAVING COUNT(*) > 1", "pred_sql": "SELECT Ship.Name FROM Ship JOIN captain ON Ship.Ship_ID = captain.Ship_ID GROUP BY Ship.Ship_ID HAVING COUNT(captain.Captain_ID) > 1", "source_tables": ["captain", "ship"], "error_info": ""}, {"sample_id": 6259, "db_id": "ship_1", "score": 1, "gold_sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id GROUP BY t2.ship_id HAVING COUNT(*) > 1", "pred_sql": "SELECT Ship.Name FROM Ship JOIN captain ON Ship.Ship_ID = captain.Ship_ID GROUP BY Ship.Ship_ID HAVING COUNT(captain.Captain_ID) > 1", "source_tables": ["captain", "ship"], "error_info": ""}, {"sample_id": 6260, "db_id": "ship_1", "score": 1, "gold_sql": "SELECT name, CLASS FROM ship WHERE NOT ship_id IN (SELECT ship_id FROM captain)", "pred_sql": "SELECT Ship.Name, Ship.Class FROM Ship LEFT JOIN captain ON Ship.Ship_ID = captain.Ship_ID WHERE captain.Ship_ID IS NULL", "source_tables": ["captain", "ship"], "error_info": ""}, {"sample_id": 6261, "db_id": "ship_1", "score": 1, "gold_sql": "SELECT name, CLASS FROM ship WHERE NOT ship_id IN (SELECT ship_id FROM captain)", "pred_sql": "SELECT Ship.Name, Ship.Class FROM Ship LEFT JOIN captain ON Ship.Ship_ID = captain.Ship_ID WHERE captain.Ship_ID IS NULL", "source_tables": ["captain", "ship"], "error_info": ""}, {"sample_id": 6262, "db_id": "ship_1", "score": 1, "gold_sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id ORDER BY t2.age LIMIT 1", "pred_sql": "SELECT Ship.Name FROM Ship JOIN captain ON Ship.Ship_ID = captain.Ship_ID ORDER BY captain.age ASC LIMIT 1", "source_tables": ["captain", "ship"], "error_info": ""}, {"sample_id": 6263, "db_id": "ship_1", "score": 0, "gold_sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id ORDER BY t2.age LIMIT 1", "pred_sql": "SELECT Ship.Name FROM Ship JOIN captain ON Ship.Ship_ID = captain.Ship_ID WHERE captain.age = (SELECT MIN(age) FROM captain)", "source_tables": ["captain", "ship"], "error_info": "Result not equal"}, {"sample_id": 6264, "db_id": "ship_1", "score": 0, "gold_sql": "SELECT name, flag FROM ship WHERE NOT ship_id IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman')", "pred_sql": "SELECT Ship.Name, Ship.Flag FROM Ship LEFT JOIN captain ON Ship.Ship_ID = captain.Ship_ID WHERE captain.Rank <> 'Midshipman' OR captain.Rank IS NULL", "source_tables": ["captain", "ship"], "error_info": "Result not equal"}, {"sample_id": 6265, "db_id": "ship_1", "score": 0, "gold_sql": "SELECT name, flag FROM ship WHERE NOT ship_id IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman')", "pred_sql": "SELECT Ship.Name, Ship.Flag FROM Ship LEFT JOIN captain ON Ship.Ship_ID = captain.Ship_ID WHERE captain.Rank <> 'Midshipman' OR captain.Rank IS NULL", "source_tables": ["captain", "ship"], "error_info": "Result not equal"}, {"sample_id": 6266, "db_id": "ship_1", "score": 1, "gold_sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id WHERE t2.rank = 'Midshipman' INTERSECT SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id WHERE t2.rank = 'Lieutenant'", "pred_sql": "SELECT DISTINCT s.Name FROM Ship AS s JOIN captain AS c1 ON s.Ship_ID = c1.Ship_ID JOIN captain AS c2 ON s.Ship_ID = c2.Ship_ID WHERE c1.Rank = 'Midshipman' AND c2.Rank = 'Lieutenant'", "source_tables": ["captain", "ship"], "error_info": ""}, {"sample_id": 6267, "db_id": "ship_1", "score": 1, "gold_sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id WHERE t2.rank = 'Midshipman' INTERSECT SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id WHERE t2.rank = 'Lieutenant'", "pred_sql": "SELECT DISTINCT Ship.Name FROM captain JOIN Ship ON captain.Ship_ID = Ship.Ship_ID WHERE captain.Rank IN ('Midshipman', 'Lieutenant') GROUP BY Ship.Name HAVING COUNT(DISTINCT captain.Rank) = 2", "source_tables": ["captain", "ship"], "error_info": ""}, {"sample_id": 6268, "db_id": "city_record", "score": 1, "gold_sql": "SELECT host_city FROM hosting_city ORDER BY YEAR DESC LIMIT 1", "pred_sql": "SELECT Host_City FROM hosting_city WHERE Year = (SELECT MAX(Year) FROM hosting_city)", "source_tables": ["hosting_city"], "error_info": ""}, {"sample_id": 6269, "db_id": "city_record", "score": 1, "gold_sql": "SELECT host_city FROM hosting_city ORDER BY YEAR DESC LIMIT 1", "pred_sql": "SELECT Host_City FROM hosting_city WHERE Year = (SELECT MAX(Year) FROM hosting_city)", "source_tables": ["hosting_city"], "error_info": ""}, {"sample_id": 6270, "db_id": "city_record", "score": 1, "gold_sql": "SELECT match_id FROM MATCH WHERE competition = '1994 FIFA World Cup qualification'", "pred_sql": "SELECT hosting_city.Match_ID FROM hosting_city JOIN match ON hosting_city.Match_ID = match.Match_ID WHERE match.Competition = (SELECT Competition FROM match WHERE Competition = '1994 FIFA World Cup qualification')", "source_tables": ["match"], "error_info": ""}, {"sample_id": 6271, "db_id": "city_record", "score": 0, "gold_sql": "SELECT match_id FROM MATCH WHERE competition = '1994 FIFA World Cup qualification'", "pred_sql": "SELECT Match_ID FROM match WHERE Competition = (SELECT Competition FROM match WHERE Result = 'win' AND Match_ID IN (SELECT Match_ID FROM hosting_city WHERE Host_City = (SELECT City_ID FROM city WHERE City = '1994 FIFA World Cup qualification')))", "source_tables": ["match"], "error_info": "Result not equal"}, {"sample_id": 6272, "db_id": "city_record", "score": 1, "gold_sql": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T2.year > 2010", "pred_sql": "SELECT DISTINCT c.City FROM city AS c JOIN hosting_city AS h ON c.City_ID = h.Host_City WHERE h.Year > '2010'", "source_tables": ["hosting_city", "city"], "error_info": ""}, {"sample_id": 6273, "db_id": "city_record", "score": 1, "gold_sql": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T2.year > 2010", "pred_sql": "SELECT DISTINCT c.City FROM hosting_city AS hc JOIN city AS c ON hc.Host_City = c.City_ID WHERE hc.Year > '2010'", "source_tables": ["hosting_city", "city"], "error_info": ""}, {"sample_id": 6274, "db_id": "city_record", "score": 0, "gold_sql": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city GROUP BY T2.host_city ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Host_City, COUNT(*) AS Event_Count FROM hosting_city GROUP BY Host_City ORDER BY Event_Count DESC LIMIT 1", "source_tables": ["hosting_city", "city"], "error_info": "Result not equal"}, {"sample_id": 6275, "db_id": "city_record", "score": 0, "gold_sql": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city GROUP BY T2.host_city ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Host_City, COUNT(Match_ID) AS Event_Count FROM hosting_city GROUP BY Host_City ORDER BY Event_Count DESC LIMIT 1", "source_tables": ["hosting_city", "city"], "error_info": "Result not equal"}, {"sample_id": 6276, "db_id": "city_record", "score": 0, "gold_sql": "SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = 'Nanjing ( Jiangsu )' AND T3.competition = '1994 FIFA World Cup qualification'", "pred_sql": "SELECT match.Venue FROM match JOIN hosting_city ON match.Match_ID = hosting_city.Match_ID JOIN city ON hosting_city.Host_City = city.City_ID WHERE hosting_city.Year = '1994' AND match.Competition = (SELECT Match_ID FROM match WHERE Competition = '1994 FIFA World Cup qualification') AND city.City = 'Nanjing ( Jiangsu )'", "source_tables": ["hosting_city", "city", "match"], "error_info": "Result not equal"}, {"sample_id": 6277, "db_id": "city_record", "score": 1, "gold_sql": "SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = 'Nanjing ( Jiangsu )' AND T3.competition = '1994 FIFA World Cup qualification'", "pred_sql": "SELECT match.Venue FROM match JOIN hosting_city ON match.Match_ID = hosting_city.Match_ID JOIN city ON hosting_city.Host_City = city.City_ID WHERE hosting_city.Host_City = (SELECT City_ID FROM city WHERE City = 'Nanjing ( Jiangsu )') AND match.Competition = (SELECT Competition FROM match WHERE Competition = '1994 FIFA World Cup qualification')", "source_tables": ["hosting_city", "city", "match"], "error_info": ""}, {"sample_id": 6278, "db_id": "city_record", "score": 1, "gold_sql": "SELECT T2.Jan FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T1.city = 'Shanghai'", "pred_sql": "SELECT temperature.Jan FROM temperature JOIN city ON temperature.City_ID = city.City_ID WHERE city.City = 'Shanghai'", "source_tables": ["city", "temperature"], "error_info": ""}, {"sample_id": 6279, "db_id": "city_record", "score": 1, "gold_sql": "SELECT T2.Jan FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T1.city = 'Shanghai'", "pred_sql": "SELECT temperature.Jan FROM temperature JOIN city ON temperature.City_ID = city.City_ID WHERE city.City = 'Shanghai'", "source_tables": ["city", "temperature"], "error_info": ""}, {"sample_id": 6280, "db_id": "city_record", "score": 1, "gold_sql": "SELECT T2.year FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T1.city = 'Taizhou ( Zhejiang )'", "pred_sql": "SELECT Year FROM hosting_city WHERE Host_City = (SELECT City_ID FROM city WHERE City = 'Taizhou ( Zhejiang )')", "source_tables": ["hosting_city", "city"], "error_info": ""}, {"sample_id": 6281, "db_id": "city_record", "score": 1, "gold_sql": "SELECT T2.year FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T1.city = 'Taizhou ( Zhejiang )'", "pred_sql": "SELECT Year FROM hosting_city WHERE Host_City = (SELECT City_ID FROM city WHERE City = 'Taizhou ( Zhejiang )')", "source_tables": ["hosting_city", "city"], "error_info": ""}, {"sample_id": 6282, "db_id": "city_record", "score": 0, "gold_sql": "SELECT city FROM city ORDER BY regional_population DESC LIMIT 3", "pred_sql": "SELECT City, Regional_Population FROM city ORDER BY Regional_Population DESC LIMIT 3", "source_tables": ["city"], "error_info": "Result not equal"}, {"sample_id": 6283, "db_id": "city_record", "score": 0, "gold_sql": "SELECT city FROM city ORDER BY regional_population DESC LIMIT 3", "pred_sql": "SELECT City, Regional_Population FROM city ORDER BY Regional_Population DESC LIMIT 3", "source_tables": ["city"], "error_info": "Result not equal"}, {"sample_id": 6284, "db_id": "city_record", "score": 1, "gold_sql": "SELECT city, GDP FROM city ORDER BY GDP LIMIT 1", "pred_sql": "SELECT City, GDP FROM city ORDER BY GDP ASC LIMIT 1", "source_tables": ["city"], "error_info": ""}, {"sample_id": 6285, "db_id": "city_record", "score": 1, "gold_sql": "SELECT city, GDP FROM city ORDER BY GDP LIMIT 1", "pred_sql": "SELECT City, GDP FROM city ORDER BY GDP ASC LIMIT 1", "source_tables": ["city"], "error_info": ""}, {"sample_id": 6286, "db_id": "city_record", "score": 0, "gold_sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id ORDER BY T2.Feb DESC LIMIT 1", "pred_sql": "SELECT c.City, t.Feb FROM city AS c JOIN temperature AS t ON c.City_ID = t.City_ID ORDER BY t.Feb DESC LIMIT 1", "source_tables": ["city", "temperature"], "error_info": "Result not equal"}, {"sample_id": 6287, "db_id": "city_record", "score": 0, "gold_sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id ORDER BY T2.Feb DESC LIMIT 1", "pred_sql": "SELECT c.City, t.Feb FROM city AS c JOIN temperature AS t ON c.City_ID = t.City_ID ORDER BY t.Feb DESC LIMIT 1", "source_tables": ["city", "temperature"], "error_info": "Result not equal"}, {"sample_id": 6288, "db_id": "city_record", "score": 0, "gold_sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T2.Mar < T2.Jul OR T2.Mar > T2.Oct", "pred_sql": "SELECT c.City, t.Mar, t.Jul, t.Oct FROM city AS c JOIN temperature AS t ON c.City_ID = t.City_ID WHERE t.Mar < t.Jul OR t.Mar > t.Oct", "source_tables": ["city", "temperature"], "error_info": "Result not equal"}, {"sample_id": 6289, "db_id": "city_record", "score": 0, "gold_sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T2.Mar < T2.Jul OR T2.Mar > T2.Oct", "pred_sql": "SELECT c.City, t.Mar, t.Jul, t.Oct FROM city AS c JOIN temperature AS t ON c.City_ID = t.City_ID WHERE t.Mar < t.Jul OR t.Mar > t.Oct", "source_tables": ["city", "temperature"], "error_info": "Result not equal"}, {"sample_id": 6290, "db_id": "city_record", "score": 0, "gold_sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T2.Mar < T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id = T4.host_city", "pred_sql": "SELECT c.City FROM city AS c JOIN temperature AS t ON c.City_ID = t.City_ID JOIN hosting_city AS h ON c.City_ID = h.Host_City WHERE t.Mar < t.Jul", "source_tables": ["hosting_city", "city", "temperature"], "error_info": "Result not equal"}, {"sample_id": 6291, "db_id": "city_record", "score": 0, "gold_sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T2.Mar < T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id = T4.host_city", "pred_sql": "SELECT c.City, c.Hanzi, c.Hanyu_Pinyin FROM city AS c JOIN temperature AS t ON c.City_ID = t.City_ID JOIN hosting_city AS h ON c.City_ID = h.Host_City WHERE t.Mar < t.Jul", "source_tables": ["hosting_city", "city", "temperature"], "error_info": "Result not equal"}, {"sample_id": 6292, "db_id": "city_record", "score": 0, "gold_sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T2.Mar < T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id = T4.host_city", "pred_sql": "SELECT c.City_ID, c.City, c.Hanzi, c.Hanyu_Pinyin, c.Regional_Population, c.GDP FROM city AS c JOIN temperature AS t ON c.City_ID = t.City_ID WHERE t.Mar < t.Dec AND NOT c.City_ID IN (SELECT Host_City FROM hosting_city)", "source_tables": ["hosting_city", "city", "temperature"], "error_info": "Result not equal"}, {"sample_id": 6293, "db_id": "city_record", "score": 0, "gold_sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T2.Mar < T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id = T4.host_city", "pred_sql": "SELECT c.City, c.Hanzi, c.Hanyu_Pinyin, c.Regional_Population, c.GDP FROM city AS c JOIN temperature AS t ON c.City_ID = t.City_ID WHERE t.Mar < t.Dec AND NOT c.City_ID IN (SELECT Host_City FROM hosting_city)", "source_tables": ["hosting_city", "city", "temperature"], "error_info": "Result not equal"}, {"sample_id": 6294, "db_id": "city_record", "score": 1, "gold_sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T2.Feb > T2.Jun UNION SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id = T4.host_city", "pred_sql": "SELECT DISTINCT c.City FROM city AS c JOIN temperature AS t ON c.City_ID = t.City_ID WHERE t.Feb > t.Jun UNION SELECT DISTINCT c.City FROM city AS c JOIN hosting_city AS h ON c.City_ID = h.Host_City", "source_tables": ["hosting_city", "city", "temperature"], "error_info": ""}, {"sample_id": 6295, "db_id": "city_record", "score": 0, "gold_sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T2.Feb > T2.Jun UNION SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id = T4.host_city", "pred_sql": "SELECT DISTINCT c.City FROM city AS c JOIN temperature AS t ON c.City_ID = t.City_ID LEFT JOIN hosting_city AS h ON c.City_ID = h.Host_City WHERE (t.Feb > t.Jun) OR (NOT h.Host_City IS NULL)", "source_tables": ["hosting_city", "city", "temperature"], "error_info": "Result not equal"}, {"sample_id": 6296, "db_id": "city_record", "score": 1, "gold_sql": "SELECT city FROM city WHERE regional_population > 10000000", "pred_sql": "SELECT City FROM city WHERE Regional_Population > '10000000'", "source_tables": ["city"], "error_info": ""}, {"sample_id": 6297, "db_id": "city_record", "score": 1, "gold_sql": "SELECT city FROM city WHERE regional_population > 10000000", "pred_sql": "SELECT City FROM city WHERE Regional_Population > '10000000'", "source_tables": ["city"], "error_info": ""}, {"sample_id": 6298, "db_id": "city_record", "score": 0, "gold_sql": "SELECT city FROM city WHERE regional_population > 10000000 UNION SELECT city FROM city WHERE regional_population < 5000000", "pred_sql": "SELECT City FROM city WHERE Regional_Population > 8000000 OR Regional_Population < 5000000", "source_tables": ["city"], "error_info": "Result not equal"}, {"sample_id": 6299, "db_id": "city_record", "score": 0, "gold_sql": "SELECT city FROM city WHERE regional_population > 10000000 UNION SELECT city FROM city WHERE regional_population < 5000000", "pred_sql": "SELECT City FROM city WHERE Regional_Population > 8000000 OR Regional_Population < 5000000", "source_tables": ["city"], "error_info": "Result not equal"}, {"sample_id": 6300, "db_id": "city_record", "score": 1, "gold_sql": "SELECT COUNT(*), Competition FROM MATCH GROUP BY Competition", "pred_sql": "SELECT Competition, COUNT(*) AS Number_of_Matches FROM match GROUP BY Competition", "source_tables": ["match"], "error_info": ""}, {"sample_id": 6301, "db_id": "city_record", "score": 1, "gold_sql": "SELECT COUNT(*), Competition FROM MATCH GROUP BY Competition", "pred_sql": "SELECT Competition, COUNT(Match_ID) AS Match_Count FROM match GROUP BY Competition", "source_tables": ["match"], "error_info": ""}, {"sample_id": 6302, "db_id": "city_record", "score": 1, "gold_sql": "SELECT venue FROM MATCH ORDER BY date DESC", "pred_sql": "SELECT Venue FROM match ORDER BY Date DESC", "source_tables": ["match"], "error_info": ""}, {"sample_id": 6303, "db_id": "city_record", "score": 1, "gold_sql": "SELECT venue FROM MATCH ORDER BY date DESC", "pred_sql": "SELECT Venue FROM match ORDER BY Date DESC", "source_tables": ["match"], "error_info": ""}, {"sample_id": 6304, "db_id": "city_record", "score": 1, "gold_sql": "SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1", "pred_sql": "SELECT GDP FROM city WHERE Regional_Population = (SELECT MAX(Regional_Population) FROM city)", "source_tables": ["city"], "error_info": ""}, {"sample_id": 6305, "db_id": "city_record", "score": 1, "gold_sql": "SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1", "pred_sql": "SELECT GDP FROM city WHERE Regional_Population = (SELECT MAX(Regional_Population) FROM city)", "source_tables": ["city"], "error_info": ""}, {"sample_id": 6306, "db_id": "city_record", "score": 1, "gold_sql": "SELECT t1.gdp, t1.Regional_Population FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city GROUP BY t2.Host_City HAVING COUNT(*) > 1", "pred_sql": "SELECT c.GDP, c.Regional_Population FROM city AS c JOIN hosting_city AS h ON c.City_ID = h.Host_City GROUP BY h.Host_City HAVING COUNT(h.Match_ID) > 1", "source_tables": ["hosting_city", "city"], "error_info": ""}, {"sample_id": 6307, "db_id": "city_record", "score": 1, "gold_sql": "SELECT t1.gdp, t1.Regional_Population FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city GROUP BY t2.Host_City HAVING COUNT(*) > 1", "pred_sql": "SELECT c.GDP, c.Regional_Population FROM city AS c JOIN hosting_city AS h ON c.City_ID = h.Host_City GROUP BY h.Host_City HAVING COUNT(h.Match_ID) > 1", "source_tables": ["hosting_city", "city"], "error_info": ""}, {"sample_id": 6308, "db_id": "e_government", "score": 1, "gold_sql": "SELECT individual_first_name, individual_middle_name, individual_last_name FROM individuals ORDER BY individual_last_name", "pred_sql": "SELECT individual_first_name, individual_middle_name, individual_last_name FROM Individuals ORDER BY individual_last_name ASC", "source_tables": ["individuals"], "error_info": ""}, {"sample_id": 6309, "db_id": "e_government", "score": 1, "gold_sql": "SELECT individual_first_name, individual_middle_name, individual_last_name FROM individuals ORDER BY individual_last_name", "pred_sql": "SELECT individual_first_name, individual_middle_name, individual_last_name FROM Individuals ORDER BY individual_last_name", "source_tables": ["individuals"], "error_info": ""}, {"sample_id": 6310, "db_id": "e_government", "score": 1, "gold_sql": "SELECT DISTINCT form_type_code FROM forms", "pred_sql": "SELECT DISTINCT form_type_code FROM Forms", "source_tables": ["forms"], "error_info": ""}, {"sample_id": 6311, "db_id": "e_government", "score": 1, "gold_sql": "SELECT DISTINCT form_type_code FROM forms", "pred_sql": "SELECT DISTINCT form_type_code FROM Forms", "source_tables": ["forms"], "error_info": ""}, {"sample_id": 6312, "db_id": "e_government", "score": 1, "gold_sql": "SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id = t2.form_id GROUP BY t2.form_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT form_name FROM Party_Forms AS pf JOIN Forms AS f ON pf.form_id = f.form_id GROUP BY pf.form_id ORDER BY COUNT(pf.party_id) DESC LIMIT 1", "source_tables": ["forms", "party_forms"], "error_info": ""}, {"sample_id": 6313, "db_id": "e_government", "score": 0, "gold_sql": "SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id = t2.form_id GROUP BY t2.form_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT form_name, COUNT(*) AS form_count FROM Party_Forms JOIN Forms ON Party_Forms.form_id = Forms.form_id GROUP BY form_name ORDER BY form_count DESC LIMIT 1", "source_tables": ["forms", "party_forms"], "error_info": "Result not equal"}, {"sample_id": 6314, "db_id": "e_government", "score": 1, "gold_sql": "SELECT payment_method_code, party_phone FROM parties WHERE party_email = 'enrico09@example.com'", "pred_sql": "SELECT payment_method_code, party_phone FROM Parties WHERE party_email = 'enrico09@example.com'", "source_tables": ["parties"], "error_info": ""}, {"sample_id": 6315, "db_id": "e_government", "score": 1, "gold_sql": "SELECT payment_method_code, party_phone FROM parties WHERE party_email = 'enrico09@example.com'", "pred_sql": "SELECT payment_method_code, party_phone FROM Parties WHERE party_email = 'enrico09@example.com'", "source_tables": ["parties"], "error_info": ""}, {"sample_id": 6316, "db_id": "e_government", "score": 1, "gold_sql": "SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id = t2.party_id WHERE t2.form_id = (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY COUNT(*) DESC LIMIT 1)", "pred_sql": "SELECT DISTINCT p.party_email FROM Party_Forms AS pf JOIN Parties AS p ON pf.party_id = p.party_id WHERE pf.form_id = (SELECT form_id FROM Party_Forms GROUP BY form_id ORDER BY COUNT(*) DESC LIMIT 1)", "source_tables": ["parties", "party_forms"], "error_info": ""}, {"sample_id": 6317, "db_id": "e_government", "score": 1, "gold_sql": "SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id = t2.party_id WHERE t2.form_id = (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY COUNT(*) DESC LIMIT 1)", "pred_sql": "SELECT DISTINCT p.party_email FROM Parties AS p JOIN Party_Forms AS pf ON p.party_id = pf.party_id WHERE pf.form_id = (SELECT pf2.form_id FROM Party_Forms AS pf2 GROUP BY pf2.form_id ORDER BY COUNT(*) DESC LIMIT 1)", "source_tables": ["parties", "party_forms"], "error_info": ""}, {"sample_id": 6318, "db_id": "e_government", "score": 1, "gold_sql": "SELECT organization_name FROM organizations ORDER BY date_formed ASC", "pred_sql": "SELECT organization_name FROM Organizations ORDER BY date_formed", "source_tables": ["organizations"], "error_info": ""}, {"sample_id": 6319, "db_id": "e_government", "score": 1, "gold_sql": "SELECT organization_name FROM organizations ORDER BY date_formed ASC", "pred_sql": "SELECT organization_name FROM Organizations ORDER BY date_formed ASC", "source_tables": ["organizations"], "error_info": ""}, {"sample_id": 6320, "db_id": "e_government", "score": 1, "gold_sql": "SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1", "pred_sql": "SELECT organization_name FROM Organizations ORDER BY date_formed DESC LIMIT 1", "source_tables": ["organizations"], "error_info": ""}, {"sample_id": 6321, "db_id": "e_government", "score": 1, "gold_sql": "SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1", "pred_sql": "SELECT organization_name FROM Organizations ORDER BY date_formed DESC LIMIT 1", "source_tables": ["organizations"], "error_info": ""}, {"sample_id": 6322, "db_id": "e_government", "score": 1, "gold_sql": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id JOIN individuals AS t3 ON t2.individual_id = t3.individual_id WHERE t1.organization_name = 'Labour Party' ORDER BY t2.date_contact_to DESC LIMIT 1", "pred_sql": "SELECT i.individual_last_name FROM Organization_Contact_Individuals AS oci JOIN Individuals AS i ON oci.individual_id = i.individual_id JOIN Organizations AS org ON oci.organization_id = org.organization_id WHERE org.organization_name = 'Labour Party' ORDER BY oci.date_contact_to DESC LIMIT 1", "source_tables": ["organizations", "organization_contact_individuals", "individuals"], "error_info": ""}, {"sample_id": 6323, "db_id": "e_government", "score": 0, "gold_sql": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id JOIN individuals AS t3 ON t2.individual_id = t3.individual_id WHERE t1.organization_name = 'Labour Party' ORDER BY t2.date_contact_to DESC LIMIT 1", "pred_sql": "SELECT i.individual_last_name FROM Organization_Contact_Individuals AS oci JOIN Individuals AS i ON oci.individual_id = i.individual_id JOIN Organizations AS org ON oci.organization_id = org.organization_id WHERE org.organization_name = 'Labour party' ORDER BY oci.date_contact_to DESC LIMIT 1", "source_tables": ["organizations", "organization_contact_individuals", "individuals"], "error_info": "Result not equal"}, {"sample_id": 6324, "db_id": "e_government", "score": 0, "gold_sql": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id JOIN individuals AS t3 ON t2.individual_id = t3.individual_id WHERE t1.uk_vat_number = (SELECT MAX(uk_vat_number) FROM organizations) ORDER BY t2.date_contact_to ASC LIMIT 1", "pred_sql": "SELECT i.individual_last_name FROM Organization_Contact_Individuals AS oci JOIN Individuals AS i ON oci.individual_id = i.individual_id JOIN Organizations AS org ON oci.organization_id = org.organization_id WHERE org.uk_vat_number = (SELECT MAX(uk_vat_number) FROM Organizations) ORDER BY oci.date_contact_from ASC LIMIT 1", "source_tables": ["organizations", "organization_contact_individuals", "individuals"], "error_info": "Result not equal"}, {"sample_id": 6325, "db_id": "e_government", "score": 1, "gold_sql": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id JOIN individuals AS t3 ON t2.individual_id = t3.individual_id WHERE t1.uk_vat_number = (SELECT MAX(uk_vat_number) FROM organizations) ORDER BY t2.date_contact_to ASC LIMIT 1", "pred_sql": "SELECT i.individual_last_name FROM Organization_Contact_Individuals AS oci JOIN Individuals AS i ON oci.individual_id = i.individual_id JOIN Organizations AS org ON oci.organization_id = org.organization_id WHERE org.uk_vat_number = (SELECT MAX(uk_vat_number) FROM Organizations) LIMIT 1", "source_tables": ["organizations", "organization_contact_individuals", "individuals"], "error_info": ""}, {"sample_id": 6326, "db_id": "e_government", "score": 1, "gold_sql": "SELECT COUNT(*) FROM services", "pred_sql": "SELECT COUNT(*) AS total_services FROM Services", "source_tables": ["services"], "error_info": ""}, {"sample_id": 6327, "db_id": "e_government", "score": 1, "gold_sql": "SELECT COUNT(*) FROM services", "pred_sql": "SELECT COUNT(*) AS service_count FROM Services", "source_tables": ["services"], "error_info": ""}, {"sample_id": 6328, "db_id": "e_government", "score": 0, "gold_sql": "SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id = t2.service_id", "pred_sql": "SELECT service_name FROM Services WHERE NOT service_id IN (SELECT service_id FROM Party_Services)", "source_tables": ["services", "party_services"], "error_info": "Result not equal"}, {"sample_id": 6329, "db_id": "e_government", "score": 0, "gold_sql": "SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id = t2.service_id", "pred_sql": "SELECT service_name FROM Services WHERE NOT service_id IN (SELECT service_id FROM Party_Services)", "source_tables": ["services", "party_services"], "error_info": "Result not equal"}, {"sample_id": 6330, "db_id": "e_government", "score": 0, "gold_sql": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses", "pred_sql": "SELECT DISTINCT town_city, state_province_county FROM Addresses", "source_tables": ["addresses"], "error_info": "Result not equal"}, {"sample_id": 6331, "db_id": "e_government", "score": 0, "gold_sql": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses", "pred_sql": "SELECT DISTINCT town_city, state_province_county FROM Addresses", "source_tables": ["addresses"], "error_info": "Result not equal"}, {"sample_id": 6332, "db_id": "e_government", "score": 1, "gold_sql": "SELECT COUNT(*) FROM addresses WHERE state_province_county = 'Colorado'", "pred_sql": "SELECT COUNT(DISTINCT town_city) AS city_count FROM Addresses WHERE state_province_county = 'Colorado'", "source_tables": ["addresses"], "error_info": ""}, {"sample_id": 6333, "db_id": "e_government", "score": 1, "gold_sql": "SELECT COUNT(*) FROM addresses WHERE state_province_county = 'Colorado'", "pred_sql": "SELECT COUNT(DISTINCT town_city) AS city_count FROM Addresses WHERE state_province_county = 'Colorado'", "source_tables": ["addresses"], "error_info": ""}, {"sample_id": 6334, "db_id": "e_government", "score": 1, "gold_sql": "SELECT payment_method_code FROM parties GROUP BY payment_method_code HAVING COUNT(*) > 3", "pred_sql": "SELECT payment_method_code FROM Parties GROUP BY payment_method_code HAVING COUNT(party_id) > 3", "source_tables": ["parties"], "error_info": ""}, {"sample_id": 6335, "db_id": "e_government", "score": 1, "gold_sql": "SELECT payment_method_code FROM parties GROUP BY payment_method_code HAVING COUNT(*) > 3", "pred_sql": "SELECT payment_method_code FROM Parties GROUP BY payment_method_code HAVING COUNT(party_id) > 3", "source_tables": ["parties"], "error_info": ""}, {"sample_id": 6336, "db_id": "e_government", "score": 1, "gold_sql": "SELECT organization_name FROM organizations WHERE organization_name LIKE '%Party%'", "pred_sql": "SELECT organization_name FROM Organizations WHERE organization_name LIKE '%Party%'", "source_tables": ["organizations"], "error_info": ""}, {"sample_id": 6337, "db_id": "e_government", "score": 1, "gold_sql": "SELECT organization_name FROM organizations WHERE organization_name LIKE '%Party%'", "pred_sql": "SELECT organization_name FROM Organizations WHERE organization_name LIKE '%Party%'", "source_tables": ["organizations"], "error_info": ""}, {"sample_id": 6338, "db_id": "e_government", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT payment_method_code) FROM parties", "pred_sql": "SELECT COUNT(DISTINCT payment_method_code) AS distinct_payment_methods FROM Parties", "source_tables": ["parties"], "error_info": ""}, {"sample_id": 6339, "db_id": "e_government", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT payment_method_code) FROM parties", "pred_sql": "SELECT COUNT(DISTINCT payment_method_code) AS unique_payment_methods FROM Parties", "source_tables": ["parties"], "error_info": ""}, {"sample_id": 6340, "db_id": "e_government", "score": 1, "gold_sql": "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id = t2.customer_id GROUP BY t1.party_email ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT p.party_email FROM Parties AS p JOIN Party_Services AS ps ON p.party_id = ps.customer_id GROUP BY p.party_id ORDER BY COUNT(ps.booking_id) DESC LIMIT 1", "source_tables": ["party_services", "parties"], "error_info": ""}, {"sample_id": 6341, "db_id": "e_government", "score": 1, "gold_sql": "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id = t2.customer_id GROUP BY t1.party_email ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT p.party_email FROM Party_Services AS ps JOIN Parties AS p ON ps.customer_id = p.party_id GROUP BY p.party_email ORDER BY COUNT(ps.booking_id) DESC LIMIT 1", "source_tables": ["party_services", "parties"], "error_info": ""}, {"sample_id": 6342, "db_id": "e_government", "score": 0, "gold_sql": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE '%6862 Kaitlyn Knolls%'", "pred_sql": "SELECT DISTINCT state_province_county FROM Addresses WHERE line_1_number_building = '6862 Kaitlyn Knolls'", "source_tables": ["addresses"], "error_info": "Result not equal"}, {"sample_id": 6343, "db_id": "e_government", "score": 0, "gold_sql": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE '%6862 Kaitlyn Knolls%'", "pred_sql": "SELECT state_province_county FROM Addresses WHERE line_1_number_building = '6862 Kaitlyn Knolls'", "source_tables": ["addresses"], "error_info": "Result not equal"}, {"sample_id": 6344, "db_id": "e_government", "score": 1, "gold_sql": "SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id GROUP BY t1.organization_name ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT o.organization_name FROM Organizations AS o JOIN Organization_Contact_Individuals AS oci ON o.organization_id = oci.organization_id GROUP BY o.organization_id ORDER BY COUNT(oci.individual_id) DESC LIMIT 1", "source_tables": ["organizations", "organization_contact_individuals"], "error_info": ""}, {"sample_id": 6345, "db_id": "e_government", "score": 1, "gold_sql": "SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id GROUP BY t1.organization_name ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT o.organization_name FROM Organizations AS o JOIN Organization_Contact_Individuals AS oci ON o.organization_id = oci.organization_id GROUP BY o.organization_id ORDER BY COUNT(oci.individual_id) DESC LIMIT 1", "source_tables": ["organizations", "organization_contact_individuals"], "error_info": ""}, {"sample_id": 6346, "db_id": "e_government", "score": 0, "gold_sql": "SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id = t2.individual_id", "pred_sql": "SELECT Individuals.individual_last_name FROM Organization_Contact_Individuals JOIN Individuals ON Organization_Contact_Individuals.individual_id = Individuals.individual_id", "source_tables": ["organization_contact_individuals", "individuals"], "error_info": "Result not equal"}, {"sample_id": 6347, "db_id": "e_government", "score": 1, "gold_sql": "SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id = t2.individual_id", "pred_sql": "SELECT DISTINCT Individuals.individual_last_name FROM Organization_Contact_Individuals JOIN Individuals ON Organization_Contact_Individuals.individual_id = Individuals.individual_id", "source_tables": ["organization_contact_individuals", "individuals"], "error_info": ""}, {"sample_id": 6348, "db_id": "school_bus", "score": 1, "gold_sql": "SELECT COUNT(*) FROM driver", "pred_sql": "SELECT COUNT(*) AS Number_of_Drivers FROM driver", "source_tables": ["driver"], "error_info": ""}, {"sample_id": 6349, "db_id": "school_bus", "score": 1, "gold_sql": "SELECT name, home_city, age FROM driver", "pred_sql": "SELECT Name, Home_city, Age FROM driver", "source_tables": ["driver"], "error_info": ""}, {"sample_id": 6350, "db_id": "school_bus", "score": 1, "gold_sql": "SELECT party, COUNT(*) FROM driver GROUP BY party", "pred_sql": "SELECT Party, COUNT(Driver_ID) AS Number_of_Drivers FROM driver GROUP BY Party", "source_tables": ["driver"], "error_info": ""}, {"sample_id": 6351, "db_id": "school_bus", "score": 1, "gold_sql": "SELECT name FROM driver ORDER BY age DESC", "pred_sql": "SELECT Name FROM driver ORDER BY Age DESC", "source_tables": ["driver"], "error_info": ""}, {"sample_id": 6352, "db_id": "school_bus", "score": 1, "gold_sql": "SELECT DISTINCT home_city FROM driver", "pred_sql": "SELECT DISTINCT Home_city FROM driver", "source_tables": ["driver"], "error_info": ""}, {"sample_id": 6353, "db_id": "school_bus", "score": 0, "gold_sql": "SELECT home_city FROM driver GROUP BY home_city ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Home_city, COUNT(Driver_ID) AS Driver_Count FROM driver GROUP BY Home_city ORDER BY Driver_Count DESC LIMIT 1", "source_tables": ["driver"], "error_info": "Result not equal"}, {"sample_id": 6354, "db_id": "school_bus", "score": 0, "gold_sql": "SELECT party FROM driver WHERE home_city = 'Hartford' AND age > 40", "pred_sql": "SELECT DISTINCT driver.Party FROM driver WHERE driver.Home_city = 'Hartford' AND driver.Age > '40'", "source_tables": ["driver"], "error_info": "Result not equal"}, {"sample_id": 6355, "db_id": "school_bus", "score": 1, "gold_sql": "SELECT home_city FROM driver WHERE age > 40 GROUP BY home_city HAVING COUNT(*) >= 2", "pred_sql": "SELECT Home_city FROM driver WHERE Age > 40 GROUP BY Home_city HAVING COUNT(Driver_ID) >= 2", "source_tables": ["driver"], "error_info": ""}, {"sample_id": 6356, "db_id": "school_bus", "score": 0, "gold_sql": "SELECT home_city FROM driver EXCEPT SELECT home_city FROM driver WHERE age > 40", "pred_sql": "SELECT DISTINCT Home_city FROM driver WHERE NOT Driver_ID IN (SELECT Driver_ID FROM driver WHERE Age > '40')", "source_tables": ["driver"], "error_info": "Result not equal"}, {"sample_id": 6357, "db_id": "school_bus", "score": 1, "gold_sql": "SELECT name FROM driver WHERE NOT driver_id IN (SELECT driver_id FROM school_bus)", "pred_sql": "SELECT Name FROM driver WHERE NOT Driver_ID IN (SELECT Driver_ID FROM school_bus)", "source_tables": ["school_bus", "driver"], "error_info": ""}, {"sample_id": 6358, "db_id": "school_bus", "score": 1, "gold_sql": "SELECT TYPE FROM school GROUP BY TYPE HAVING COUNT(*) = 2", "pred_sql": "SELECT DISTINCT Type FROM school GROUP BY Type HAVING COUNT(School_ID) = 2", "source_tables": ["school"], "error_info": ""}, {"sample_id": 6359, "db_id": "school_bus", "score": 1, "gold_sql": "SELECT T2.school, T3.name FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id JOIN driver AS T3 ON T1.driver_id = T3.driver_id", "pred_sql": "SELECT school.School, driver.Name FROM school_bus JOIN school ON school_bus.School_ID = school.School_ID JOIN driver ON school_bus.Driver_ID = driver.Driver_ID", "source_tables": ["school", "driver", "school_bus"], "error_info": ""}, {"sample_id": 6360, "db_id": "school_bus", "score": 1, "gold_sql": "SELECT MAX(years_working), MIN(years_working), AVG(years_working) FROM school_bus", "pred_sql": "SELECT MAX(Years_Working) AS Max_Years, MIN(Years_Working) AS Min_Years, AVG(Years_Working) AS Avg_Years FROM school_bus", "source_tables": ["school_bus"], "error_info": ""}, {"sample_id": 6361, "db_id": "school_bus", "score": 1, "gold_sql": "SELECT school, TYPE FROM school WHERE NOT school_id IN (SELECT school_id FROM school_bus)", "pred_sql": "SELECT school.School, school.Type FROM school LEFT JOIN school_bus ON school.School_ID = school_bus.School_ID WHERE school_bus.School_ID IS NULL", "source_tables": ["school", "school_bus"], "error_info": ""}, {"sample_id": 6362, "db_id": "school_bus", "score": 0, "gold_sql": "SELECT T2.type, COUNT(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T2.type", "pred_sql": "SELECT s.Type, COUNT(sb.School_ID) AS Number_of_Buses FROM school AS s LEFT JOIN school_bus AS sb ON s.School_ID = sb.School_ID GROUP BY s.Type", "source_tables": ["school", "school_bus"], "error_info": "Result not equal"}, {"sample_id": 6363, "db_id": "school_bus", "score": 1, "gold_sql": "SELECT COUNT(*) FROM driver WHERE home_city = 'Hartford' OR age < 40", "pred_sql": "SELECT COUNT(*) AS Driver_Count FROM driver WHERE Home_city = 'Hartford' OR Age < '40'", "source_tables": ["driver"], "error_info": ""}, {"sample_id": 6364, "db_id": "school_bus", "score": 1, "gold_sql": "SELECT name FROM driver WHERE home_city = 'Hartford' AND age < 40", "pred_sql": "SELECT Name FROM driver WHERE Home_city = 'Hartford' AND Age < '40'", "source_tables": ["driver"], "error_info": ""}, {"sample_id": 6365, "db_id": "school_bus", "score": 1, "gold_sql": "SELECT t1.name FROM driver AS t1 JOIN school_bus AS t2 ON t1.driver_id = t2.driver_id ORDER BY years_working DESC LIMIT 1", "pred_sql": "SELECT d.Name FROM driver AS d JOIN school_bus AS sb ON d.Driver_ID = sb.Driver_ID ORDER BY sb.Years_Working DESC LIMIT 1", "source_tables": ["school_bus", "driver"], "error_info": ""}, {"sample_id": 6366, "db_id": "flight_company", "score": 1, "gold_sql": "SELECT COUNT(*) FROM flight WHERE velocity > 200", "pred_sql": "SELECT COUNT(*) AS flight_count FROM flight WHERE Velocity > 200", "source_tables": ["flight"], "error_info": ""}, {"sample_id": 6367, "db_id": "flight_company", "score": 1, "gold_sql": "SELECT vehicle_flight_number, date, pilot FROM flight ORDER BY altitude ASC", "pred_sql": "SELECT Vehicle_Flight_number, Date, Pilot FROM flight ORDER BY Altitude", "source_tables": ["flight"], "error_info": ""}, {"sample_id": 6368, "db_id": "flight_company", "score": 1, "gold_sql": "SELECT id, country, city, name FROM airport ORDER BY name", "pred_sql": "SELECT id, Country, City, name FROM airport ORDER BY name ASC", "source_tables": ["airport"], "error_info": ""}, {"sample_id": 6369, "db_id": "flight_company", "score": 1, "gold_sql": "SELECT MAX(group_equity_shareholding) FROM operate_company", "pred_sql": "SELECT MAX(Group_Equity_Shareholding) AS max_equity_shareholding FROM operate_company", "source_tables": ["operate_company"], "error_info": ""}, {"sample_id": 6370, "db_id": "flight_company", "score": 0, "gold_sql": "SELECT AVG(velocity) FROM flight WHERE pilot = 'Thompson'", "pred_sql": "SELECT Velocity FROM flight WHERE Pilot = 'Thompson'", "source_tables": ["flight"], "error_info": "Result not equal"}, {"sample_id": 6371, "db_id": "flight_company", "score": 0, "gold_sql": "SELECT T1.name, T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id", "pred_sql": "SELECT DISTINCT operate_company.name, operate_company.Type FROM operate_company JOIN flight ON operate_company.id = flight.company_id", "source_tables": ["flight", "operate_company"], "error_info": "Result not equal"}, {"sample_id": 6372, "db_id": "flight_company", "score": 1, "gold_sql": "SELECT name FROM airport WHERE country <> 'Iceland'", "pred_sql": "SELECT name FROM airport WHERE Country <> 'Iceland'", "source_tables": ["airport"], "error_info": ""}, {"sample_id": 6373, "db_id": "flight_company", "score": 1, "gold_sql": "SELECT DISTINCT T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id WHERE T2.velocity < 200", "pred_sql": "SELECT DISTINCT o.Type FROM operate_company AS o JOIN flight AS f ON o.id = f.company_id WHERE f.Velocity < 200", "source_tables": ["flight", "operate_company"], "error_info": ""}, {"sample_id": 6374, "db_id": "flight_company", "score": 1, "gold_sql": "SELECT T1.id, T1.name FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id GROUP BY T1.id HAVING COUNT(*) > 1", "pred_sql": "SELECT oc.id, oc.name FROM operate_company AS oc JOIN flight AS f ON oc.id = f.company_id GROUP BY oc.id, oc.name HAVING COUNT(f.id) > 1", "source_tables": ["flight", "operate_company"], "error_info": ""}, {"sample_id": 6375, "db_id": "flight_company", "score": 0, "gold_sql": "SELECT T1.id, T1.name, T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T2.id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT airport.id, airport.name, airport.IATA FROM airport JOIN flight ON airport.id = flight.airport_id GROUP BY airport.id, airport.name, airport.IATA ORDER BY COUNT(flight.id) DESC LIMIT 1", "source_tables": ["airport", "flight"], "error_info": "Result not equal"}, {"sample_id": 6376, "db_id": "flight_company", "score": 1, "gold_sql": "SELECT DISTINCT T2.pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id WHERE T1.country = 'United States' OR T1.name = 'Billund Airport'", "pred_sql": "SELECT DISTINCT f.Pilot FROM flight AS f JOIN airport AS a ON f.airport_id = a.id WHERE a.Country = 'United States' OR a.name = 'Billund Airport'", "source_tables": ["airport", "flight"], "error_info": ""}, {"sample_id": 6377, "db_id": "flight_company", "score": 1, "gold_sql": "SELECT TYPE, COUNT(*) FROM operate_company GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Type, COUNT(*) AS count FROM operate_company GROUP BY Type ORDER BY count DESC LIMIT 1", "source_tables": ["operate_company"], "error_info": ""}, {"sample_id": 6378, "db_id": "flight_company", "score": 1, "gold_sql": "SELECT COUNT(*) FROM airport WHERE NOT id IN (SELECT airport_id FROM flight WHERE pilot = 'Thompson')", "pred_sql": "SELECT COUNT(*) AS airport_count FROM airport WHERE NOT id IN (SELECT DISTINCT airport_id FROM flight WHERE Pilot = 'Thompson')", "source_tables": ["airport", "flight"], "error_info": ""}, {"sample_id": 6379, "db_id": "flight_company", "score": 0, "gold_sql": "SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id WHERE T1.principal_activities = 'Cargo' INTERSECT SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id WHERE T1.principal_activities = 'Catering services'", "pred_sql": "SELECT DISTINCT f1.Pilot FROM flight AS f1 JOIN operate_company AS oc1 ON f1.company_id = oc1.id JOIN operate_company AS oc2 ON f1.company_id = oc2.id WHERE oc1.Principal_activities LIKE '%Cargo%' AND oc2.Principal_activities LIKE '%Catering%'", "source_tables": ["flight", "operate_company"], "error_info": "Result not equal"}, {"sample_id": 6380, "db_id": "flight_company", "score": 1, "gold_sql": "SELECT name FROM airport WHERE name LIKE '%international%'", "pred_sql": "SELECT name FROM airport WHERE name LIKE '%international%'", "source_tables": ["airport"], "error_info": ""}, {"sample_id": 6381, "db_id": "flight_company", "score": 0, "gold_sql": "SELECT T3.id, COUNT(*) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id JOIN airport AS T3 ON T2.airport_id = T3.id GROUP BY T3.id", "pred_sql": "SELECT airport.name AS Airport_Name, COUNT(operate_company.id) AS Number_of_Airlines FROM airport JOIN flight ON airport.id = flight.airport_id JOIN operate_company ON flight.company_id = operate_company.id WHERE operate_company.Type = 'airline' GROUP BY airport.name", "source_tables": ["airport", "flight", "operate_company"], "error_info": "Result not equal"}, {"sample_id": 6382, "db_id": "flight_company", "score": 1, "gold_sql": "SELECT COUNT(*), country FROM airport GROUP BY country", "pred_sql": "SELECT Country, COUNT(*) AS airport_count FROM airport GROUP BY Country", "source_tables": ["airport"], "error_info": ""}, {"sample_id": 6383, "db_id": "flight_company", "score": 1, "gold_sql": "SELECT country FROM airport GROUP BY country HAVING COUNT(*) > 2", "pred_sql": "SELECT Country FROM airport GROUP BY Country HAVING COUNT(*) > 2", "source_tables": ["airport"], "error_info": ""}, {"sample_id": 6384, "db_id": "flight_company", "score": 0, "gold_sql": "SELECT pilot FROM flight GROUP BY pilot ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Pilot, COUNT(*) AS flight_count FROM flight GROUP BY Pilot ORDER BY flight_count DESC LIMIT 1", "source_tables": ["flight"], "error_info": "Result not equal"}, {"sample_id": 6385, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Accounts", "pred_sql": "SELECT COUNT(*) AS Total_Accounts FROM Accounts", "source_tables": ["accounts"], "error_info": ""}, {"sample_id": 6386, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Accounts", "pred_sql": "SELECT COUNT(*) AS Account_Count FROM Accounts", "source_tables": ["accounts"], "error_info": ""}, {"sample_id": 6387, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT account_id, account_details FROM Accounts", "pred_sql": "SELECT Account_ID, Account_Details FROM Accounts", "source_tables": ["accounts"], "error_info": ""}, {"sample_id": 6388, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT account_id, account_details FROM Accounts", "pred_sql": "SELECT Account_ID, Account_Details FROM Accounts", "source_tables": ["accounts"], "error_info": ""}, {"sample_id": 6389, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Statements", "pred_sql": "SELECT COUNT(*) AS Total_Statements FROM Statements", "source_tables": ["statements"], "error_info": ""}, {"sample_id": 6390, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Statements", "pred_sql": "SELECT COUNT(*) AS Statement_Count FROM Statements", "source_tables": ["statements"], "error_info": ""}, {"sample_id": 6391, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT STATEMENT_ID, statement_details FROM Statements", "pred_sql": "SELECT Statement_ID, Statement_Details FROM Statements", "source_tables": ["statements"], "error_info": ""}, {"sample_id": 6392, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT STATEMENT_ID, statement_details FROM Statements", "pred_sql": "SELECT Statement_ID, Statement_Details FROM Statements", "source_tables": ["statements"], "error_info": ""}, {"sample_id": 6393, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT T1.statement_id, T2.statement_details, T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id", "pred_sql": "SELECT Statements.Statement_ID, Statements.Statement_Details, Accounts.Account_Details FROM Statements JOIN Accounts ON Statements.Statement_ID = Accounts.Statement_ID", "source_tables": ["accounts", "statements"], "error_info": ""}, {"sample_id": 6394, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT T1.statement_id, T2.statement_details, T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id", "pred_sql": "SELECT Statements.Statement_ID, Statements.Statement_Details, Accounts.Account_Details FROM Accounts JOIN Statements ON Accounts.Statement_ID = Statements.Statement_ID", "source_tables": ["accounts", "statements"], "error_info": ""}, {"sample_id": 6395, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT STATEMENT_ID, COUNT(*) FROM Accounts GROUP BY STATEMENT_ID", "pred_sql": "SELECT s.Statement_ID, COUNT(a.Account_ID) AS Number_of_Accounts FROM Statements AS s LEFT JOIN Accounts AS a ON s.Statement_ID = a.Statement_ID GROUP BY s.Statement_ID", "source_tables": ["accounts"], "error_info": ""}, {"sample_id": 6396, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT STATEMENT_ID, COUNT(*) FROM Accounts GROUP BY STATEMENT_ID", "pred_sql": "SELECT a.Statement_ID, COUNT(a.Account_ID) AS Number_of_Accounts FROM Accounts AS a GROUP BY a.Statement_ID", "source_tables": ["accounts"], "error_info": ""}, {"sample_id": 6397, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT T1.statement_id, T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id GROUP BY T1.statement_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT s.Statement_ID, s.Statement_Details FROM Statements AS s JOIN Accounts AS a ON s.Statement_ID = a.Statement_ID GROUP BY s.Statement_ID, s.Statement_Details ORDER BY COUNT(a.Account_ID) DESC LIMIT 1", "source_tables": ["accounts", "statements"], "error_info": ""}, {"sample_id": 6398, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT T1.statement_id, T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id GROUP BY T1.statement_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT s.Statement_ID, s.Statement_Details FROM Statements AS s JOIN Accounts AS a ON s.Statement_ID = a.Statement_ID GROUP BY s.Statement_ID, s.Statement_Details ORDER BY COUNT(a.Account_ID) DESC LIMIT 1", "source_tables": ["accounts", "statements"], "error_info": ""}, {"sample_id": 6399, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Documents", "pred_sql": "SELECT COUNT(*) AS Number_of_Documents FROM Documents", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 6400, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Documents", "pred_sql": "SELECT COUNT(*) AS Document_Count FROM Documents", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 6401, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT document_type_code, document_name, document_description FROM Documents WHERE document_name = 'Noel CV' OR document_name = 'King Book'", "pred_sql": "SELECT Document_Type_Code, Document_Name, Document_Description FROM Documents WHERE Document_Name = 'Noel CV' OR Document_Name = 'King Book'", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 6402, "db_id": "cre_Docs_and_Epenses", "score": 0, "gold_sql": "SELECT document_type_code, document_name, document_description FROM Documents WHERE document_name = 'Noel CV' OR document_name = 'King Book'", "pred_sql": "SELECT Document_Type_Code, Document_Type_Name, Document_Type_Description FROM Ref_Document_Types WHERE Document_Type_Code IN (SELECT Document_Type_Code FROM Documents WHERE Document_Name IN ('Noel CV', 'King Book'))", "source_tables": ["documents"], "error_info": "Result not equal"}, {"sample_id": 6403, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT document_id, document_name FROM Documents", "pred_sql": "SELECT Document_ID, Document_Name FROM Documents", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 6404, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT document_id, document_name FROM Documents", "pred_sql": "SELECT Document_ID, Document_Name FROM Documents", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 6405, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT document_name, document_id FROM Documents WHERE document_type_code = 'BK'", "pred_sql": "SELECT Document_ID, Document_Name FROM Documents WHERE Document_Type_Code = 'BK'", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 6406, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT document_name, document_id FROM Documents WHERE document_type_code = 'BK'", "pred_sql": "SELECT Document_ID, Document_Name FROM Documents WHERE Document_Type_Code = 'BK'", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 6407, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT COUNT(*), project_id FROM Documents WHERE document_type_code = 'BK' GROUP BY project_id", "pred_sql": "SELECT Project_ID, COUNT(Document_ID) AS Document_Count FROM Documents WHERE Document_Type_Code = 'BK' GROUP BY Project_ID", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 6408, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT COUNT(*), project_id FROM Documents WHERE document_type_code = 'BK' GROUP BY project_id", "pred_sql": "SELECT Documents.Project_ID, COUNT(Documents.Document_ID) AS Document_Count FROM Documents WHERE Documents.Document_Type_Code = 'BK' GROUP BY Documents.Project_ID", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 6409, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT document_name, document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project'", "pred_sql": "SELECT Documents.Document_Name, Documents.Document_Date FROM Documents JOIN Projects ON Documents.Project_ID = Projects.Project_ID WHERE Projects.Project_Details = 'Graph Database project'", "source_tables": ["projects", "documents"], "error_info": ""}, {"sample_id": 6410, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT document_name, document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project'", "pred_sql": "SELECT Document_Name, Document_Date FROM Documents WHERE Project_ID IN (SELECT Project_ID FROM Projects WHERE Project_Details = 'Graph Database project')", "source_tables": ["projects", "documents"], "error_info": ""}, {"sample_id": 6411, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT project_id, COUNT(*) FROM Documents GROUP BY project_id", "pred_sql": "SELECT Project_ID, COUNT(Document_ID) AS Number_of_Documents FROM Documents GROUP BY Project_ID", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 6412, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT project_id, COUNT(*) FROM Documents GROUP BY project_id", "pred_sql": "SELECT Project_ID, COUNT(Document_ID) AS Document_Count FROM Documents GROUP BY Project_ID", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 6413, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT project_id FROM Documents GROUP BY project_id ORDER BY COUNT(*) ASC LIMIT 1", "pred_sql": "SELECT Project_ID FROM Documents GROUP BY Project_ID ORDER BY COUNT(Document_ID) ASC LIMIT 1", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 6414, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT project_id FROM Documents GROUP BY project_id ORDER BY COUNT(*) ASC LIMIT 1", "pred_sql": "SELECT Project_ID FROM Documents GROUP BY Project_ID ORDER BY COUNT(Document_ID) ASC LIMIT 1", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 6415, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT project_id FROM Documents GROUP BY project_id HAVING COUNT(*) >= 2", "pred_sql": "SELECT Project_ID FROM Documents GROUP BY Project_ID HAVING COUNT(Document_ID) >= 2", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 6416, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT project_id FROM Documents GROUP BY project_id HAVING COUNT(*) >= 2", "pred_sql": "SELECT Project_ID FROM Documents GROUP BY Project_ID HAVING COUNT(Document_ID) >= 2", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 6417, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT document_type_code, COUNT(*) FROM Documents GROUP BY document_type_code", "pred_sql": "SELECT Document_Type_Code, COUNT(Document_ID) AS Document_Count FROM Documents GROUP BY Document_Type_Code", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 6418, "db_id": "cre_Docs_and_Epenses", "score": 0, "gold_sql": "SELECT document_type_code, COUNT(*) FROM Documents GROUP BY document_type_code", "pred_sql": "SELECT Ref_Document_Types.Document_Type_Name, COUNT(Documents.Document_ID) AS Document_Count FROM Documents JOIN Ref_Document_Types ON Documents.Document_Type_Code = Ref_Document_Types.Document_Type_Code GROUP BY Ref_Document_Types.Document_Type_Name", "source_tables": ["documents"], "error_info": "Result not equal"}, {"sample_id": 6419, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Document_Type_Code FROM Documents GROUP BY Document_Type_Code ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 6420, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Document_Type_Code FROM Documents GROUP BY Document_Type_Code ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 6421, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING COUNT(*) < 3", "pred_sql": "SELECT Document_Type_Code FROM Documents GROUP BY Document_Type_Code HAVING COUNT(Document_ID) < 3", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 6422, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING COUNT(*) < 3", "pred_sql": "SELECT Document_Type_Code FROM Documents GROUP BY Document_Type_Code HAVING COUNT(Document_ID) < 3", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 6423, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT T1.statement_details, T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id = T2.document_id WHERE T1.statement_details = 'Private Project'", "pred_sql": "SELECT Statements.Statement_Details, Documents.Document_Name FROM Statements JOIN Documents ON Statements.Statement_ID = Documents.Document_ID WHERE Statements.Statement_Details = 'Private Project'", "source_tables": ["statements", "documents"], "error_info": ""}, {"sample_id": 6424, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT T1.statement_details, T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id = T2.document_id WHERE T1.statement_details = 'Private Project'", "pred_sql": "SELECT s.Statement_Details, d.Document_Name FROM Statements AS s JOIN Documents AS d ON s.Statement_ID = d.Document_ID WHERE s.Statement_Details = 'Private Project'", "source_tables": ["statements", "documents"], "error_info": ""}, {"sample_id": 6425, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT document_type_code, document_type_name, document_type_description FROM Ref_document_types", "pred_sql": "SELECT Document_Type_Code, Document_Type_Name, Document_Type_Description FROM Ref_Document_Types", "source_tables": ["ref_document_types"], "error_info": ""}, {"sample_id": 6426, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT document_type_code, document_type_name, document_type_description FROM Ref_document_types", "pred_sql": "SELECT Document_Type_Code, Document_Type_Name, Document_Type_Description FROM Ref_Document_Types", "source_tables": ["ref_document_types"], "error_info": ""}, {"sample_id": 6427, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT document_type_description FROM Ref_document_types WHERE document_type_name = 'Film'", "pred_sql": "SELECT Document_Type_Description FROM Ref_Document_Types WHERE Document_Type_Name = 'Film'", "source_tables": ["ref_document_types"], "error_info": ""}, {"sample_id": 6428, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT document_type_description FROM Ref_document_types WHERE document_type_name = 'Film'", "pred_sql": "SELECT Document_Type_Description FROM Ref_Document_Types WHERE Document_Type_Name = 'Film'", "source_tables": ["ref_document_types"], "error_info": ""}, {"sample_id": 6429, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT T1.document_type_name, T1.document_type_description, T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code", "pred_sql": "SELECT Ref_Document_Types.Document_Type_Name, Ref_Document_Types.Document_Type_Description, Documents.Document_Date FROM Documents JOIN Ref_Document_Types ON Documents.Document_Type_Code = Ref_Document_Types.Document_Type_Code", "source_tables": ["ref_document_types", "documents"], "error_info": ""}, {"sample_id": 6430, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT T1.document_type_name, T1.document_type_description, T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code", "pred_sql": "SELECT Ref_Document_Types.Document_Type_Name, Ref_Document_Types.Document_Type_Description, Documents.Document_Date FROM Documents JOIN Ref_Document_Types ON Documents.Document_Type_Code = Ref_Document_Types.Document_Type_Code", "source_tables": ["ref_document_types", "documents"], "error_info": ""}, {"sample_id": 6431, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Projects", "pred_sql": "SELECT COUNT(*) AS Number_of_Projects FROM Projects", "source_tables": ["projects"], "error_info": ""}, {"sample_id": 6432, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Projects", "pred_sql": "SELECT COUNT(*) AS Project_Count FROM Projects", "source_tables": ["projects"], "error_info": ""}, {"sample_id": 6433, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT project_id, project_details FROM Projects", "pred_sql": "SELECT Project_ID, Project_Details FROM Projects", "source_tables": ["projects"], "error_info": ""}, {"sample_id": 6434, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT project_id, project_details FROM Projects", "pred_sql": "SELECT Project_ID, Project_Details FROM Projects", "source_tables": ["projects"], "error_info": ""}, {"sample_id": 6435, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT T1.project_id, T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id HAVING COUNT(*) > 2", "pred_sql": "SELECT Projects.Project_ID, Projects.Project_Details FROM Projects JOIN Documents ON Projects.Project_ID = Documents.Project_ID GROUP BY Projects.Project_ID, Projects.Project_Details HAVING COUNT(Documents.Document_ID) >= 2", "source_tables": ["projects", "documents"], "error_info": ""}, {"sample_id": 6436, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT T1.project_id, T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id HAVING COUNT(*) > 2", "pred_sql": "SELECT Projects.Project_ID, Projects.Project_Details FROM Projects JOIN Documents ON Projects.Project_ID = Documents.Project_ID GROUP BY Projects.Project_ID HAVING COUNT(Documents.Document_ID) > 2", "source_tables": ["projects", "documents"], "error_info": ""}, {"sample_id": 6437, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id WHERE T2.document_name = 'King Book'", "pred_sql": "SELECT Projects.Project_Details FROM Projects JOIN Documents ON Projects.Project_ID = Documents.Project_ID WHERE Documents.Document_Name = 'King Book'", "source_tables": ["projects", "documents"], "error_info": ""}, {"sample_id": 6438, "db_id": "cre_Docs_and_Epenses", "score": 0, "gold_sql": "SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id WHERE T2.document_name = 'King Book'", "pred_sql": "SELECT Projects.Project_ID, Projects.Project_Details, Documents.Document_Name, Documents.Document_Description, Documents.Document_Date, Documents.Other_Details FROM Projects JOIN Documents ON Projects.Project_ID = Documents.Project_ID WHERE Documents.Document_Name = 'King Book'", "source_tables": ["projects", "documents"], "error_info": "Result not equal"}, {"sample_id": 6439, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Ref_budget_codes", "pred_sql": "SELECT COUNT(*) AS Budget_Type_Count FROM Ref_Budget_Codes", "source_tables": ["ref_budget_codes"], "error_info": ""}, {"sample_id": 6440, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Ref_budget_codes", "pred_sql": "SELECT COUNT(*) AS Budget_Code_Count FROM Ref_Budget_Codes", "source_tables": ["ref_budget_codes"], "error_info": ""}, {"sample_id": 6441, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT budget_type_code, budget_type_description FROM Ref_budget_codes", "pred_sql": "SELECT Budget_Type_Code, Budget_Type_Description FROM Ref_Budget_Codes", "source_tables": ["ref_budget_codes"], "error_info": ""}, {"sample_id": 6442, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT budget_type_code, budget_type_description FROM Ref_budget_codes", "pred_sql": "SELECT Budget_Type_Code, Budget_Type_Description FROM Ref_Budget_Codes", "source_tables": ["ref_budget_codes"], "error_info": ""}, {"sample_id": 6443, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code = 'ORG'", "pred_sql": "SELECT Budget_Type_Description FROM Ref_Budget_Codes WHERE Budget_Type_Code = 'ORG'", "source_tables": ["ref_budget_codes"], "error_info": ""}, {"sample_id": 6444, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code = 'ORG'", "pred_sql": "SELECT Budget_Type_Description FROM Ref_Budget_Codes WHERE Budget_Type_Code = 'ORG'", "source_tables": ["ref_budget_codes"], "error_info": ""}, {"sample_id": 6445, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Documents_with_expenses", "pred_sql": "SELECT COUNT(*) AS NumberOfDocumentsWithExpenses FROM Documents_with_Expenses", "source_tables": ["documents_with_expenses"], "error_info": ""}, {"sample_id": 6446, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Documents_with_expenses", "pred_sql": "SELECT COUNT(*) AS Document_Count FROM Documents_with_Expenses", "source_tables": ["documents_with_expenses"], "error_info": ""}, {"sample_id": 6447, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT document_id FROM Documents_with_expenses WHERE budget_type_code = 'SF'", "pred_sql": "SELECT Document_ID FROM Documents_with_Expenses WHERE Budget_Type_Code = 'SF'", "source_tables": ["documents_with_expenses"], "error_info": ""}, {"sample_id": 6448, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT document_id FROM Documents_with_expenses WHERE budget_type_code = 'SF'", "pred_sql": "SELECT Document_ID FROM Documents_with_Expenses WHERE Budget_Type_Code = 'SF'", "source_tables": ["documents_with_expenses"], "error_info": ""}, {"sample_id": 6449, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT T2.budget_type_code, T2.budget_type_description, T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code", "pred_sql": "SELECT dw.Budget_Type_Code, bc.Budget_Type_Description, d.Document_ID FROM Documents_with_Expenses AS dw JOIN Ref_Budget_Codes AS bc ON dw.Budget_Type_Code = bc.Budget_Type_Code JOIN Documents AS d ON dw.Document_ID = d.Document_ID", "source_tables": ["ref_budget_codes", "documents_with_expenses"], "error_info": ""}, {"sample_id": 6450, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT T2.budget_type_code, T2.budget_type_description, T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code", "pred_sql": "SELECT dw.Budget_Type_Code, bc.Budget_Type_Description, dw.Document_ID FROM Documents_with_Expenses AS dw JOIN Ref_Budget_Codes AS bc ON dw.Budget_Type_Code = bc.Budget_Type_Code", "source_tables": ["ref_budget_codes", "documents_with_expenses"], "error_info": ""}, {"sample_id": 6451, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code = T2.Budget_Type_code WHERE T2.budget_type_Description = 'Government'", "pred_sql": "SELECT Documents.Document_ID FROM Documents JOIN Documents_with_Expenses ON Documents.Document_ID = Documents_with_Expenses.Document_ID JOIN Ref_Budget_Codes ON Documents_with_Expenses.Budget_Type_Code = Ref_Budget_Codes.Budget_Type_Code WHERE Ref_Budget_Codes.Budget_Type_Description = 'Government'", "source_tables": ["ref_budget_codes", "documents_with_expenses"], "error_info": ""}, {"sample_id": 6452, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code = T2.Budget_Type_code WHERE T2.budget_type_Description = 'Government'", "pred_sql": "SELECT Documents.Document_ID FROM Documents JOIN Documents_with_Expenses ON Documents.Document_ID = Documents_with_Expenses.Document_ID JOIN Ref_Budget_Codes ON Documents_with_Expenses.Budget_Type_Code = Ref_Budget_Codes.Budget_Type_Code WHERE Ref_Budget_Codes.Budget_Type_Description = 'Government'", "source_tables": ["ref_budget_codes", "documents_with_expenses"], "error_info": ""}, {"sample_id": 6453, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT budget_type_code, COUNT(*) FROM Documents_with_expenses GROUP BY budget_type_code", "pred_sql": "SELECT dw.Budget_Type_Code, COUNT(d.Document_ID) AS Document_Count FROM Documents_with_Expenses AS dw LEFT JOIN Documents AS d ON dw.Document_ID = d.Document_ID GROUP BY dw.Budget_Type_Code", "source_tables": ["documents_with_expenses"], "error_info": ""}, {"sample_id": 6454, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT budget_type_code, COUNT(*) FROM Documents_with_expenses GROUP BY budget_type_code", "pred_sql": "SELECT dw.Budget_Type_Code, COUNT(d.Document_ID) AS Document_Count FROM Documents_with_Expenses AS dw LEFT JOIN Documents AS d ON dw.Document_ID = d.Document_ID GROUP BY dw.Budget_Type_Code", "source_tables": ["documents_with_expenses"], "error_info": ""}, {"sample_id": 6455, "db_id": "cre_Docs_and_Epenses", "score": 0, "gold_sql": "SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Budget_Type_Code, COUNT(Document_ID) AS Document_Count FROM Documents_with_Expenses GROUP BY Budget_Type_Code ORDER BY Document_Count DESC LIMIT 1", "source_tables": ["documents_with_expenses"], "error_info": "Result not equal"}, {"sample_id": 6456, "db_id": "cre_Docs_and_Epenses", "score": 0, "gold_sql": "SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Budget_Type_Code, COUNT(*) AS Count FROM Documents_with_Expenses GROUP BY Budget_Type_Code ORDER BY Count DESC LIMIT 1", "source_tables": ["documents_with_expenses"], "error_info": "Result not equal"}, {"sample_id": 6457, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses", "pred_sql": "SELECT Document_ID FROM Documents WHERE NOT Document_ID IN (SELECT Document_ID FROM Documents_with_Expenses)", "source_tables": ["documents_with_expenses", "documents"], "error_info": ""}, {"sample_id": 6458, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses", "pred_sql": "SELECT Document_ID FROM Documents WHERE NOT Document_ID IN (SELECT Document_ID FROM Documents_with_Expenses)", "source_tables": ["documents_with_expenses", "documents"], "error_info": ""}, {"sample_id": 6459, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT document_id FROM Documents WHERE document_type_code = 'CV' EXCEPT SELECT document_id FROM Documents_with_expenses", "pred_sql": "SELECT Documents.Document_ID FROM Documents JOIN Ref_Document_Types ON Documents.Document_Type_Code = Ref_Document_Types.Document_Type_Code LEFT JOIN Documents_with_Expenses ON Documents.Document_ID = Documents_with_Expenses.Document_ID WHERE Ref_Document_Types.Document_Type_Name = 'CV' AND Documents_with_Expenses.Budget_Type_Code IS NULL", "source_tables": ["documents_with_expenses", "documents"], "error_info": ""}, {"sample_id": 6460, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT document_id FROM Documents WHERE document_type_code = 'CV' EXCEPT SELECT document_id FROM Documents_with_expenses", "pred_sql": "SELECT d.Document_ID FROM Documents AS d LEFT JOIN Documents_with_Expenses AS de ON d.Document_ID = de.Document_ID WHERE d.Document_Type_Code = 'CV' AND de.Document_ID IS NULL", "source_tables": ["documents_with_expenses", "documents"], "error_info": ""}, {"sample_id": 6461, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id = T2.document_id WHERE T1.document_name LIKE '%s%'", "pred_sql": "SELECT d.Document_ID FROM Documents AS d JOIN Documents_with_Expenses AS de ON d.Document_ID = de.Document_ID WHERE d.Document_Name LIKE '%s%'", "source_tables": ["documents_with_expenses", "documents"], "error_info": ""}, {"sample_id": 6462, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id = T2.document_id WHERE T1.document_name LIKE '%s%'", "pred_sql": "SELECT Document_ID FROM Documents_with_Expenses WHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_Name LIKE '%s%')", "source_tables": ["documents_with_expenses", "documents"], "error_info": ""}, {"sample_id": 6463, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Documents WHERE NOT document_id IN (SELECT document_id FROM Documents_with_expenses)", "pred_sql": "SELECT COUNT(*) AS Document_Count FROM Documents AS d LEFT JOIN Documents_with_Expenses AS de ON d.Document_ID = de.Document_ID WHERE de.Document_ID IS NULL", "source_tables": ["documents_with_expenses", "documents"], "error_info": ""}, {"sample_id": 6464, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Documents WHERE NOT document_id IN (SELECT document_id FROM Documents_with_expenses)", "pred_sql": "SELECT COUNT(*) AS Document_Count FROM Documents AS d LEFT JOIN Documents_with_Expenses AS de ON d.Document_ID = de.Document_ID WHERE de.Document_ID IS NULL", "source_tables": ["documents_with_expenses", "documents"], "error_info": ""}, {"sample_id": 6465, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id = T2.document_id WHERE T2.budget_type_code = 'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id = T2.document_id WHERE T2.budget_type_code = 'SF'", "pred_sql": "SELECT DISTINCT d.Document_Date FROM Documents AS d JOIN Documents_with_Expenses AS de ON d.Document_ID = de.Document_ID WHERE de.Budget_Type_Code IN ('GV', 'SF') GROUP BY d.Document_Date HAVING COUNT(DISTINCT de.Budget_Type_Code) = 2", "source_tables": ["documents_with_expenses", "documents"], "error_info": ""}, {"sample_id": 6466, "db_id": "cre_Docs_and_Epenses", "score": 1, "gold_sql": "SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id = T2.document_id WHERE T2.budget_type_code = 'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id = T2.document_id WHERE T2.budget_type_code = 'SF'", "pred_sql": "SELECT DISTINCT d.Document_Date FROM Documents AS d JOIN Documents_with_Expenses AS de ON d.Document_ID = de.Document_ID WHERE de.Budget_Type_Code IN ('GV', 'SF') GROUP BY d.Document_ID HAVING COUNT(DISTINCT de.Budget_Type_Code) = 2", "source_tables": ["documents_with_expenses", "documents"], "error_info": ""}, {"sample_id": 6467, "db_id": "cre_Docs_and_Epenses", "score": 0, "gold_sql": "SELECT MAX(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE '%5%'", "pred_sql": "SELECT * FROM Accounts WHERE Account_Details LIKE '%5%' OR Account_ID = (SELECT MAX(Account_ID) FROM Accounts)", "source_tables": ["accounts"], "error_info": "Result not equal"}, {"sample_id": 6468, "db_id": "cre_Docs_and_Epenses", "score": 0, "gold_sql": "SELECT MAX(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE '%5%'", "pred_sql": "SELECT * FROM Accounts WHERE Account_Details LIKE '%5%' OR Account_ID = (SELECT MAX(Account_ID) FROM Accounts)", "source_tables": ["accounts"], "error_info": "Result not equal"}, {"sample_id": 6469, "db_id": "scientist_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM scientists", "pred_sql": "SELECT COUNT(*) AS total_scientists FROM Scientists", "source_tables": ["scientists"], "error_info": ""}, {"sample_id": 6470, "db_id": "scientist_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM scientists", "pred_sql": "SELECT COUNT(*) AS ScientistCount FROM Scientists", "source_tables": ["scientists"], "error_info": ""}, {"sample_id": 6471, "db_id": "scientist_1", "score": 1, "gold_sql": "SELECT SUM(hours) FROM projects", "pred_sql": "SELECT SUM(Hours) AS Total_Hours FROM Projects", "source_tables": ["projects"], "error_info": ""}, {"sample_id": 6472, "db_id": "scientist_1", "score": 1, "gold_sql": "SELECT SUM(hours) FROM projects", "pred_sql": "SELECT SUM(Hours) AS Total_Hours FROM Projects", "source_tables": ["projects"], "error_info": ""}, {"sample_id": 6473, "db_id": "scientist_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT scientist) FROM assignedto", "pred_sql": "SELECT COUNT(DISTINCT Scientist) AS DifferentScientists FROM AssignedTo", "source_tables": ["assignedto"], "error_info": ""}, {"sample_id": 6474, "db_id": "scientist_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT scientist) FROM assignedto", "pred_sql": "SELECT COUNT(DISTINCT Scientist) AS NumberOfScientists FROM AssignedTo", "source_tables": ["assignedto"], "error_info": ""}, {"sample_id": 6475, "db_id": "scientist_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT name) FROM projects", "pred_sql": "SELECT COUNT(DISTINCT Code) AS distinct_project_count FROM Projects", "source_tables": ["projects"], "error_info": ""}, {"sample_id": 6476, "db_id": "scientist_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT name) FROM projects", "pred_sql": "SELECT COUNT(DISTINCT Code) AS NumberOfProjects FROM Projects", "source_tables": ["projects"], "error_info": ""}, {"sample_id": 6477, "db_id": "scientist_1", "score": 1, "gold_sql": "SELECT AVG(hours) FROM projects", "pred_sql": "SELECT AVG(Hours) AS Average_Hours FROM Projects", "source_tables": ["projects"], "error_info": ""}, {"sample_id": 6478, "db_id": "scientist_1", "score": 1, "gold_sql": "SELECT AVG(hours) FROM projects", "pred_sql": "SELECT AVG(Hours) AS Average_Hours FROM Projects", "source_tables": ["projects"], "error_info": ""}, {"sample_id": 6479, "db_id": "scientist_1", "score": 1, "gold_sql": "SELECT name FROM projects ORDER BY hours DESC LIMIT 1", "pred_sql": "SELECT Name FROM Projects ORDER BY Hours DESC LIMIT 1", "source_tables": ["projects"], "error_info": ""}, {"sample_id": 6480, "db_id": "scientist_1", "score": 1, "gold_sql": "SELECT name FROM projects ORDER BY hours DESC LIMIT 1", "pred_sql": "SELECT Name FROM Projects ORDER BY Hours DESC LIMIT 1", "source_tables": ["projects"], "error_info": ""}, {"sample_id": 6481, "db_id": "scientist_1", "score": 1, "gold_sql": "SELECT name FROM projects WHERE hours > (SELECT AVG(hours) FROM projects)", "pred_sql": "SELECT Name FROM Projects WHERE Hours > (SELECT AVG(Hours) FROM Projects)", "source_tables": ["projects"], "error_info": ""}, {"sample_id": 6482, "db_id": "scientist_1", "score": 1, "gold_sql": "SELECT name FROM projects WHERE hours > (SELECT AVG(hours) FROM projects)", "pred_sql": "SELECT Name FROM Projects WHERE Hours > (SELECT AVG(Hours) FROM Projects)", "source_tables": ["projects"], "error_info": ""}, {"sample_id": 6483, "db_id": "scientist_1", "score": 1, "gold_sql": "SELECT T1.name, T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T2.project ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT P.Name, P.Hours FROM Projects AS P JOIN AssignedTo AS A ON P.Code = A.Project GROUP BY P.Code ORDER BY COUNT(A.Scientist) DESC LIMIT 1", "source_tables": ["projects", "assignedto"], "error_info": ""}, {"sample_id": 6484, "db_id": "scientist_1", "score": 1, "gold_sql": "SELECT T1.name, T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T2.project ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT p.Name, p.Hours FROM Projects AS p JOIN AssignedTo AS a ON p.Code = a.Project GROUP BY p.Code ORDER BY COUNT(a.Scientist) DESC LIMIT 1", "source_tables": ["projects", "assignedto"], "error_info": ""}, {"sample_id": 6485, "db_id": "scientist_1", "score": 1, "gold_sql": "SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T3.name LIKE '%Smith%'", "pred_sql": "SELECT Projects.Name FROM Projects JOIN AssignedTo ON Projects.Code = AssignedTo.Project JOIN Scientists ON AssignedTo.Scientist = Scientists.SSN WHERE Scientists.Name LIKE '%Smith%'", "source_tables": ["projects", "assignedto", "scientists"], "error_info": ""}, {"sample_id": 6486, "db_id": "scientist_1", "score": 1, "gold_sql": "SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T3.name LIKE '%Smith%'", "pred_sql": "SELECT Projects.Name FROM Projects JOIN AssignedTo ON Projects.Code = AssignedTo.Project JOIN Scientists ON AssignedTo.Scientist = Scientists.SSN WHERE Scientists.Name LIKE '%Smith%'", "source_tables": ["projects", "assignedto", "scientists"], "error_info": ""}, {"sample_id": 6487, "db_id": "scientist_1", "score": 1, "gold_sql": "SELECT SUM(T2.hours) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T3.name = 'Michael Rogers' OR T3.name = 'Carol Smith'", "pred_sql": "SELECT SUM(Projects.Hours) AS Total_Hours FROM AssignedTo JOIN Scientists ON AssignedTo.Scientist = Scientists.SSN JOIN Projects ON AssignedTo.Project = Projects.Code WHERE Scientists.Name IN ('Michael Rogers', 'Carol Smith')", "source_tables": ["projects", "assignedto", "scientists"], "error_info": ""}, {"sample_id": 6488, "db_id": "scientist_1", "score": 1, "gold_sql": "SELECT SUM(T2.hours) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T3.name = 'Michael Rogers' OR T3.name = 'Carol Smith'", "pred_sql": "SELECT SUM(Projects.Hours) AS Total_Hours FROM Projects JOIN AssignedTo ON Projects.Code = AssignedTo.Project JOIN Scientists ON AssignedTo.Scientist = Scientists.SSN WHERE Scientists.Name IN ('Michael Rogers', 'Carol Smith')", "source_tables": ["projects", "assignedto", "scientists"], "error_info": ""}, {"sample_id": 6489, "db_id": "scientist_1", "score": 1, "gold_sql": "SELECT name FROM projects WHERE hours BETWEEN 100 AND 300", "pred_sql": "SELECT Name FROM Projects WHERE Hours BETWEEN 100 AND 300", "source_tables": ["projects"], "error_info": ""}, {"sample_id": 6490, "db_id": "scientist_1", "score": 1, "gold_sql": "SELECT name FROM projects WHERE hours BETWEEN 100 AND 300", "pred_sql": "SELECT Name FROM Projects WHERE Hours BETWEEN 100 AND 300", "source_tables": ["projects"], "error_info": ""}, {"sample_id": 6491, "db_id": "scientist_1", "score": 1, "gold_sql": "SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.name = 'Matter of Time' INTERSECT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.name = 'A Puzzling Parallax'", "pred_sql": "SELECT DISTINCT s.Name FROM Scientists AS s JOIN AssignedTo AS a1 ON s.SSN = a1.Scientist JOIN Projects AS p1 ON a1.Project = p1.Code JOIN AssignedTo AS a2 ON s.SSN = a2.Scientist JOIN Projects AS p2 ON a2.Project = p2.Code WHERE p1.Name = 'Matter of Time' AND p2.Name = 'A Puzzling Parallax'", "source_tables": ["projects", "assignedto", "scientists"], "error_info": ""}, {"sample_id": 6492, "db_id": "scientist_1", "score": 1, "gold_sql": "SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.name = 'Matter of Time' INTERSECT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.name = 'A Puzzling Parallax'", "pred_sql": "SELECT DISTINCT Scientists.Name FROM Scientists JOIN AssignedTo ON Scientists.SSN = AssignedTo.Scientist JOIN Projects ON AssignedTo.Project = Projects.Code WHERE Projects.Name IN ('Matter of Time', 'A Puzzling Pattern') GROUP BY Scientists.SSN HAVING COUNT(DISTINCT Projects.Name) = 2", "source_tables": ["projects", "assignedto", "scientists"], "error_info": ""}, {"sample_id": 6493, "db_id": "scientist_1", "score": 1, "gold_sql": "SELECT name FROM scientists ORDER BY name", "pred_sql": "SELECT Name FROM Scientists ORDER BY Name ASC", "source_tables": ["scientists"], "error_info": ""}, {"sample_id": 6494, "db_id": "scientist_1", "score": 1, "gold_sql": "SELECT name FROM scientists ORDER BY name", "pred_sql": "SELECT Name FROM Scientists ORDER BY Name ASC", "source_tables": ["scientists"], "error_info": ""}, {"sample_id": 6495, "db_id": "scientist_1", "score": 0, "gold_sql": "SELECT COUNT(*), T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name", "pred_sql": "SELECT P.Name, COUNT(A.Scientist) AS NumberOfScientists FROM Projects AS P LEFT JOIN AssignedTo AS A ON P.Code = A.Project GROUP BY P.Name", "source_tables": ["projects", "assignedto"], "error_info": "Result not equal"}, {"sample_id": 6496, "db_id": "scientist_1", "score": 0, "gold_sql": "SELECT COUNT(*), T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name", "pred_sql": "SELECT Projects.Name, COUNT(AssignedTo.Scientist) AS ScientistCount FROM Projects LEFT JOIN AssignedTo ON Projects.Code = AssignedTo.Project GROUP BY Projects.Code, Projects.Name", "source_tables": ["projects", "assignedto"], "error_info": "Result not equal"}, {"sample_id": 6497, "db_id": "scientist_1", "score": 0, "gold_sql": "SELECT COUNT(*), T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name", "pred_sql": "SELECT COUNT(DISTINCT AssignedTo.Scientist) AS NumberOfScientists FROM AssignedTo JOIN Projects ON AssignedTo.Project = Projects.Code WHERE Projects.Hours > 300", "source_tables": ["projects", "assignedto"], "error_info": "Result not equal"}, {"sample_id": 6498, "db_id": "scientist_1", "score": 0, "gold_sql": "SELECT COUNT(*), T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name", "pred_sql": "SELECT P.Name, COUNT(A.Scientist) AS ScientistCount FROM Projects AS P LEFT JOIN AssignedTo AS A ON P.Code = A.Project WHERE P.Hours > 300 GROUP BY P.Name", "source_tables": ["projects", "assignedto"], "error_info": "Result not equal"}, {"sample_id": 6499, "db_id": "scientist_1", "score": 1, "gold_sql": "SELECT COUNT(*), T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn = T2.scientist GROUP BY T1.name", "pred_sql": "SELECT Scientists.Name, COUNT(AssignedTo.Project) AS NumberOfProjects FROM Scientists LEFT JOIN AssignedTo ON Scientists.SSN = AssignedTo.Scientist GROUP BY Scientists.SSN", "source_tables": ["assignedto", "scientists"], "error_info": ""}, {"sample_id": 6500, "db_id": "scientist_1", "score": 1, "gold_sql": "SELECT COUNT(*), T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn = T2.scientist GROUP BY T1.name", "pred_sql": "SELECT Scientists.Name, COUNT(AssignedTo.Project) AS ProjectCount FROM Scientists LEFT JOIN AssignedTo ON Scientists.SSN = AssignedTo.Scientist GROUP BY Scientists.SSN", "source_tables": ["assignedto", "scientists"], "error_info": ""}, {"sample_id": 6501, "db_id": "scientist_1", "score": 1, "gold_sql": "SELECT T3.ssn, T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.hours = (SELECT MAX(hours) FROM projects)", "pred_sql": "SELECT Scientists.SSN, Scientists.Name FROM Scientists JOIN AssignedTo ON Scientists.SSN = AssignedTo.Scientist JOIN Projects ON AssignedTo.Project = Projects.Code WHERE Projects.Hours = (SELECT MAX(Hours) FROM Projects)", "source_tables": ["projects", "assignedto", "scientists"], "error_info": ""}, {"sample_id": 6502, "db_id": "scientist_1", "score": 1, "gold_sql": "SELECT T3.ssn, T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.hours = (SELECT MAX(hours) FROM projects)", "pred_sql": "SELECT Scientists.SSN, Scientists.Name FROM Scientists JOIN AssignedTo ON Scientists.SSN = AssignedTo.Scientist JOIN Projects ON AssignedTo.Project = Projects.Code WHERE Projects.Hours = (SELECT MAX(Hours) FROM Projects)", "source_tables": ["projects", "assignedto", "scientists"], "error_info": ""}, {"sample_id": 6503, "db_id": "scientist_1", "score": 1, "gold_sql": "SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist = T2.ssn", "pred_sql": "SELECT DISTINCT Scientists.Name FROM Scientists JOIN AssignedTo ON Scientists.SSN = AssignedTo.Scientist", "source_tables": ["assignedto", "scientists"], "error_info": ""}, {"sample_id": 6504, "db_id": "scientist_1", "score": 1, "gold_sql": "SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist = T2.ssn", "pred_sql": "SELECT DISTINCT Scientists.Name FROM Scientists JOIN AssignedTo ON Scientists.SSN = AssignedTo.Scientist", "source_tables": ["assignedto", "scientists"], "error_info": ""}, {"sample_id": 6505, "db_id": "scientist_1", "score": 1, "gold_sql": "SELECT Name FROM Projects WHERE NOT Code IN (SELECT Project FROM AssignedTo)", "pred_sql": "SELECT Name FROM Projects WHERE NOT Code IN (SELECT Project FROM AssignedTo)", "source_tables": ["projects", "assignedto"], "error_info": ""}, {"sample_id": 6506, "db_id": "scientist_1", "score": 1, "gold_sql": "SELECT Name FROM Projects WHERE NOT Code IN (SELECT Project FROM AssignedTo)", "pred_sql": "SELECT Name FROM Projects WHERE NOT Code IN (SELECT Project FROM AssignedTo)", "source_tables": ["projects", "assignedto"], "error_info": ""}, {"sample_id": 6507, "db_id": "scientist_1", "score": 1, "gold_sql": "SELECT Name FROM scientists WHERE NOT ssn IN (SELECT scientist FROM AssignedTo)", "pred_sql": "SELECT Name FROM Scientists WHERE NOT SSN IN (SELECT Scientist FROM AssignedTo)", "source_tables": ["assignedto", "scientists"], "error_info": ""}, {"sample_id": 6508, "db_id": "scientist_1", "score": 1, "gold_sql": "SELECT Name FROM scientists WHERE NOT ssn IN (SELECT scientist FROM AssignedTo)", "pred_sql": "SELECT Name FROM Scientists WHERE NOT SSN IN (SELECT Scientist FROM AssignedTo)", "source_tables": ["assignedto", "scientists"], "error_info": ""}, {"sample_id": 6509, "db_id": "scientist_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM scientists WHERE NOT ssn IN (SELECT scientist FROM AssignedTo)", "pred_sql": "SELECT COUNT(*) AS Unassigned_Scientists FROM Scientists WHERE NOT SSN IN (SELECT Scientist FROM AssignedTo)", "source_tables": ["assignedto", "scientists"], "error_info": ""}, {"sample_id": 6510, "db_id": "scientist_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM scientists WHERE NOT ssn IN (SELECT scientist FROM AssignedTo)", "pred_sql": "SELECT COUNT(*) AS ScientistCount FROM Scientists WHERE NOT SSN IN (SELECT Scientist FROM AssignedTo)", "source_tables": ["assignedto", "scientists"], "error_info": ""}, {"sample_id": 6511, "db_id": "scientist_1", "score": 1, "gold_sql": "SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.hours = (SELECT MAX(hours) FROM projects)", "pred_sql": "SELECT Name FROM Scientists WHERE NOT SSN IN (SELECT Scientist FROM AssignedTo WHERE Project = (SELECT Code FROM Projects ORDER BY Hours DESC LIMIT 1))", "source_tables": ["projects", "assignedto", "scientists"], "error_info": ""}, {"sample_id": 6512, "db_id": "scientist_1", "score": 1, "gold_sql": "SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.hours = (SELECT MAX(hours) FROM projects)", "pred_sql": "SELECT Name FROM Scientists WHERE NOT SSN IN (SELECT Scientist FROM AssignedTo WHERE Project = (SELECT Code FROM Projects ORDER BY Hours DESC LIMIT 1))", "source_tables": ["projects", "assignedto", "scientists"], "error_info": ""}, {"sample_id": 6513, "db_id": "scientist_1", "score": 1, "gold_sql": "SELECT T1.Name, T3.Name, T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name, T1.Name", "pred_sql": "SELECT Scientists.Name AS ScientistName, Projects.Name AS ProjectName, Projects.Hours AS HoursWorked FROM Scientists JOIN AssignedTo ON Scientists.SSN = AssignedTo.Scientist JOIN Projects ON AssignedTo.Project = Projects.Code ORDER BY Projects.Name, Scientists.Name", "source_tables": ["projects", "assignedto", "scientists"], "error_info": ""}, {"sample_id": 6514, "db_id": "scientist_1", "score": 1, "gold_sql": "SELECT T1.Name, T3.Name, T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name, T1.Name", "pred_sql": "SELECT Scientists.Name AS ScientistName, Projects.Name AS ProjectName, Projects.Hours FROM Scientists JOIN AssignedTo ON Scientists.SSN = AssignedTo.Scientist JOIN Projects ON AssignedTo.Project = Projects.Code ORDER BY Projects.Name, Scientists.Name", "source_tables": ["projects", "assignedto", "scientists"], "error_info": ""}, {"sample_id": 6515, "db_id": "scientist_1", "score": 1, "gold_sql": "SELECT T2.name, T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.hours = (SELECT MIN(hours) FROM projects)", "pred_sql": "SELECT p.Name AS ProjectName, s.Name AS ScientistName FROM Projects AS p JOIN AssignedTo AS a ON p.Code = a.Project JOIN Scientists AS s ON a.Scientist = s.SSN WHERE p.Hours = (SELECT MIN(Hours) FROM Projects)", "source_tables": ["projects", "assignedto", "scientists"], "error_info": ""}, {"sample_id": 6516, "db_id": "scientist_1", "score": 1, "gold_sql": "SELECT T2.name, T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.hours = (SELECT MIN(hours) FROM projects)", "pred_sql": "SELECT P.Name AS ProjectName, S.Name AS ScientistName FROM Projects AS P JOIN AssignedTo AS A ON P.Code = A.Project JOIN Scientists AS S ON A.Scientist = S.SSN WHERE P.Hours = (SELECT MIN(Hours) FROM Projects)", "source_tables": ["projects", "assignedto", "scientists"], "error_info": ""}, {"sample_id": 6517, "db_id": "wine_1", "score": 0, "gold_sql": "SELECT Name FROM WINE ORDER BY Score LIMIT 1", "pred_sql": "SELECT Name FROM wine ORDER BY Score DESC LIMIT 1", "source_tables": ["wine"], "error_info": "Result not equal"}, {"sample_id": 6518, "db_id": "wine_1", "score": 0, "gold_sql": "SELECT Name FROM WINE ORDER BY Score LIMIT 1", "pred_sql": "SELECT Name FROM wine ORDER BY Score DESC LIMIT 1", "source_tables": ["wine"], "error_info": "Result not equal"}, {"sample_id": 6519, "db_id": "wine_1", "score": 0, "gold_sql": "SELECT Winery FROM WINE ORDER BY SCORE LIMIT 1", "pred_sql": "SELECT Winery FROM wine WHERE Score = (SELECT MAX(Score) FROM wine)", "source_tables": ["wine"], "error_info": "Result not equal"}, {"sample_id": 6520, "db_id": "wine_1", "score": 0, "gold_sql": "SELECT Winery FROM WINE ORDER BY SCORE LIMIT 1", "pred_sql": "SELECT Winery FROM wine WHERE Score = (SELECT MAX(Score) FROM wine)", "source_tables": ["wine"], "error_info": "Result not equal"}, {"sample_id": 6521, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT Name FROM WINE WHERE YEAR = '2008'", "pred_sql": "SELECT Name FROM wine WHERE Year = '2008'", "source_tables": ["wine"], "error_info": ""}, {"sample_id": 6522, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT Name FROM WINE WHERE YEAR = '2008'", "pred_sql": "SELECT Name FROM wine WHERE Year = '2008'", "source_tables": ["wine"], "error_info": ""}, {"sample_id": 6523, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT Grape, Appelation FROM WINE", "pred_sql": "SELECT grapes.Grape, appellations.Appelation FROM wine JOIN grapes ON wine.Grape = grapes.Grape JOIN appellations ON wine.Appelation = appellations.Appelation", "source_tables": ["wine"], "error_info": ""}, {"sample_id": 6524, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT Grape, Appelation FROM WINE", "pred_sql": "SELECT wine.Grape, wine.Appelation FROM wine", "source_tables": ["wine"], "error_info": ""}, {"sample_id": 6525, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT Name, Score FROM WINE", "pred_sql": "SELECT Name, Score FROM wine", "source_tables": ["wine"], "error_info": ""}, {"sample_id": 6526, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT Name, Score FROM WINE", "pred_sql": "SELECT Name, Score FROM wine", "source_tables": ["wine"], "error_info": ""}, {"sample_id": 6527, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT Area, County FROM APPELLATIONS", "pred_sql": "SELECT Area, County FROM appellations", "source_tables": ["appellations"], "error_info": ""}, {"sample_id": 6528, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT Area, County FROM APPELLATIONS", "pred_sql": "SELECT Area, County FROM appellations", "source_tables": ["appellations"], "error_info": ""}, {"sample_id": 6529, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT Price FROM WINE WHERE YEAR < 2010", "pred_sql": "SELECT Price FROM wine WHERE Year < '2010'", "source_tables": ["wine"], "error_info": ""}, {"sample_id": 6530, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT Price FROM WINE WHERE YEAR < 2010", "pred_sql": "SELECT Price FROM wine WHERE Year < '2010'", "source_tables": ["wine"], "error_info": ""}, {"sample_id": 6531, "db_id": "wine_1", "score": 0, "gold_sql": "SELECT Name FROM WINE WHERE score > 90", "pred_sql": "SELECT DISTINCT Name FROM wine WHERE Score > '90'", "source_tables": ["wine"], "error_info": "Result not equal"}, {"sample_id": 6532, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT Name FROM WINE WHERE score > 90", "pred_sql": "SELECT Name FROM wine WHERE Score > '90'", "source_tables": ["wine"], "error_info": ""}, {"sample_id": 6533, "db_id": "wine_1", "score": 0, "gold_sql": "SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = 'Red'", "pred_sql": "SELECT DISTINCT wine.Name FROM wine JOIN grapes ON wine.Grape = grapes.Grape WHERE grapes.Color = 'red'", "source_tables": ["wine", "grapes"], "error_info": "Result not equal"}, {"sample_id": 6534, "db_id": "wine_1", "score": 0, "gold_sql": "SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = 'Red'", "pred_sql": "SELECT wine.Name FROM wine JOIN grapes ON wine.Grape = grapes.Grape WHERE grapes.Color = 'red'", "source_tables": ["wine", "grapes"], "error_info": "Result not equal"}, {"sample_id": 6535, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT DISTINCT T2.Name FROM APPELLATIONs AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.Area = 'North Coast'", "pred_sql": "SELECT DISTINCT wine.Name FROM wine JOIN appellations ON wine.Appelation = appellations.Appelation WHERE appellations.Area = 'North Coast'", "source_tables": ["wine", "appellations"], "error_info": ""}, {"sample_id": 6536, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT DISTINCT T2.Name FROM APPELLATIONs AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.Area = 'North Coast'", "pred_sql": "SELECT DISTINCT wine.Name FROM wine JOIN appellations ON wine.Appelation = appellations.Appelation WHERE appellations.Area = 'North Coast'", "source_tables": ["wine", "appellations"], "error_info": ""}, {"sample_id": 6537, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM WINE WHERE Winery = 'Robert Biale'", "pred_sql": "SELECT COUNT(*) FROM wine WHERE Winery = 'Robert Biale'", "source_tables": ["wine"], "error_info": ""}, {"sample_id": 6538, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM WINE WHERE Winery = 'Robert Biale'", "pred_sql": "SELECT COUNT(*) FROM wine WHERE Winery = 'Robert Biale'", "source_tables": ["wine"], "error_info": ""}, {"sample_id": 6539, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM APPELLATIONS WHERE County = 'Napa'", "pred_sql": "SELECT COUNT(*) FROM appellations WHERE County = 'Napa'", "source_tables": ["appellations"], "error_info": ""}, {"sample_id": 6540, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM APPELLATIONS WHERE County = 'Napa'", "pred_sql": "SELECT COUNT(*) FROM appellations WHERE County = 'Napa'", "source_tables": ["appellations"], "error_info": ""}, {"sample_id": 6541, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = 'Sonoma'", "pred_sql": "SELECT AVG(Price) AS Average_Price FROM wine JOIN appellations ON wine.Appelation = appellations.Appelation WHERE appellations.County = 'Sonoma'", "source_tables": ["wine", "appellations"], "error_info": ""}, {"sample_id": 6542, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = 'Sonoma'", "pred_sql": "SELECT AVG(Price) AS Average_Price FROM wine JOIN appellations ON wine.Appelation = appellations.Appelation WHERE appellations.County = 'Sonoma'", "source_tables": ["wine", "appellations"], "error_info": ""}, {"sample_id": 6543, "db_id": "wine_1", "score": 0, "gold_sql": "SELECT T2.Name, T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = 'White'", "pred_sql": "SELECT wine.Name, wine.Score FROM wine JOIN grapes ON wine.Grape = grapes.Grape WHERE grapes.Color = 'white'", "source_tables": ["wine", "grapes"], "error_info": "Result not equal"}, {"sample_id": 6544, "db_id": "wine_1", "score": 0, "gold_sql": "SELECT T2.Name, T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = 'White'", "pred_sql": "SELECT wine.Name, wine.Score FROM wine JOIN grapes ON wine.Grape = grapes.Grape WHERE grapes.Color = 'white'", "source_tables": ["wine", "grapes"], "error_info": "Result not equal"}, {"sample_id": 6545, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT MAX(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.Area = 'Central Coast' AND T2.year < 2005", "pred_sql": "SELECT MAX(Price) FROM wine JOIN appellations ON wine.Appelation = appellations.Appelation WHERE appellations.Area = 'Central Coast' AND wine.Year < '2005'", "source_tables": ["wine", "appellations"], "error_info": ""}, {"sample_id": 6546, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT MAX(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.Area = 'Central Coast' AND T2.year < 2005", "pred_sql": "SELECT MAX(Price) FROM wine WHERE Appelation IN (SELECT Appelation FROM appellations WHERE Area = 'Central Coast') AND Year < '2005'", "source_tables": ["wine", "appellations"], "error_info": ""}, {"sample_id": 6547, "db_id": "wine_1", "score": 0, "gold_sql": "SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = 'White' AND T2.score > 90", "pred_sql": "SELECT DISTINCT g.Grape FROM grapes AS g JOIN wine AS w ON g.Grape = w.Grape WHERE g.Color = 'white' AND w.Score > '90'", "source_tables": ["wine", "grapes"], "error_info": "Result not equal"}, {"sample_id": 6548, "db_id": "wine_1", "score": 0, "gold_sql": "SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = 'White' AND T2.score > 90", "pred_sql": "SELECT DISTINCT grapes.Grape FROM grapes JOIN wine ON grapes.Grape = wine.Grape WHERE grapes.Color = 'white' AND wine.Score > '90'", "source_tables": ["wine", "grapes"], "error_info": "Result not equal"}, {"sample_id": 6549, "db_id": "wine_1", "score": 0, "gold_sql": "SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = 'Red' AND T2.price > 50", "pred_sql": "SELECT wine.* FROM wine JOIN grapes ON wine.Grape = grapes.Grape WHERE wine.Price > 50 AND grapes.Color = 'red'", "source_tables": ["wine", "grapes"], "error_info": "Result not equal"}, {"sample_id": 6550, "db_id": "wine_1", "score": 0, "gold_sql": "SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = 'Red' AND T2.price > 50", "pred_sql": "SELECT wine.Name FROM wine JOIN grapes ON wine.Grape = grapes.Grape WHERE grapes.Color = 'red' AND wine.Price > '50'", "source_tables": ["wine", "grapes"], "error_info": "Result not equal"}, {"sample_id": 6551, "db_id": "wine_1", "score": 0, "gold_sql": "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = 'Monterey' AND T2.price < 50", "pred_sql": "SELECT wine.Name, wine.Price, wine.Appelation FROM wine JOIN appellations ON wine.Appelation = appellations.Appelation WHERE wine.Price < 50 AND appellations.County = 'Monterey'", "source_tables": ["wine", "appellations"], "error_info": "Result not equal"}, {"sample_id": 6552, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = 'Monterey' AND T2.price < 50", "pred_sql": "SELECT wine.Name FROM wine JOIN appellations ON wine.Appelation = appellations.Appelation WHERE wine.Price < '50' AND appellations.County = 'Monterey'", "source_tables": ["wine", "appellations"], "error_info": ""}, {"sample_id": 6553, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT COUNT(*), Grape FROM WINE GROUP BY Grape", "pred_sql": "SELECT Grape, COUNT(*) AS NumberOfWines FROM wine GROUP BY Grape", "source_tables": ["wine"], "error_info": ""}, {"sample_id": 6554, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT COUNT(*), Grape FROM WINE GROUP BY Grape", "pred_sql": "SELECT Grape, COUNT(*) AS WineCount FROM wine GROUP BY Grape", "source_tables": ["wine"], "error_info": ""}, {"sample_id": 6555, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT AVG(Price), YEAR FROM WINE GROUP BY YEAR", "pred_sql": "SELECT Year, AVG(Price) AS Average_Price FROM wine GROUP BY Year", "source_tables": ["wine"], "error_info": ""}, {"sample_id": 6556, "db_id": "wine_1", "score": 0, "gold_sql": "SELECT AVG(Price), YEAR FROM WINE GROUP BY YEAR", "pred_sql": "SELECT AVG(Price) AS Average_Price, Appelation FROM wine GROUP BY Appelation", "source_tables": ["wine"], "error_info": "Result not equal"}, {"sample_id": 6557, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT DISTINCT Name FROM WINE WHERE Price > (SELECT MIN(Price) FROM wine WHERE Winery = 'John Anthony')", "pred_sql": "SELECT DISTINCT w1.Name FROM wine AS w1 WHERE w1.Price > (SELECT MIN(w2.Price) FROM wine AS w2 WHERE w2.Winery = 'John Anthony')", "source_tables": ["wine"], "error_info": ""}, {"sample_id": 6558, "db_id": "wine_1", "score": 0, "gold_sql": "SELECT DISTINCT Name FROM WINE WHERE Price > (SELECT MIN(Price) FROM wine WHERE Winery = 'John Anthony')", "pred_sql": "SELECT DISTINCT Name FROM wine WHERE Price > (SELECT MAX(Price) FROM wine WHERE Winery = 'John Anthony')", "source_tables": ["wine"], "error_info": "Result not equal"}, {"sample_id": 6559, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT DISTINCT Name FROM WINE ORDER BY Name", "pred_sql": "SELECT DISTINCT Name FROM wine ORDER BY Name ASC", "source_tables": ["wine"], "error_info": ""}, {"sample_id": 6560, "db_id": "wine_1", "score": 0, "gold_sql": "SELECT DISTINCT Name FROM WINE ORDER BY Name", "pred_sql": "SELECT Name FROM wine ORDER BY Name ASC", "source_tables": ["wine"], "error_info": "Result not equal"}, {"sample_id": 6561, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT DISTINCT Name FROM WINE ORDER BY price", "pred_sql": "SELECT DISTINCT Name FROM wine ORDER BY Price", "source_tables": ["wine"], "error_info": ""}, {"sample_id": 6562, "db_id": "wine_1", "score": 0, "gold_sql": "SELECT DISTINCT Name FROM WINE ORDER BY price", "pred_sql": "SELECT Name FROM wine ORDER BY Price ASC", "source_tables": ["wine"], "error_info": "Result not equal"}, {"sample_id": 6563, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation GROUP BY T2.Appelation HAVING T2.year < 2010 ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT a.Area FROM appellations AS a JOIN wine AS w ON a.Appelation = w.Appelation WHERE w.Year < '2010' GROUP BY a.Area ORDER BY COUNT(w.No) DESC LIMIT 1", "source_tables": ["wine", "appellations"], "error_info": ""}, {"sample_id": 6564, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation GROUP BY T2.Appelation HAVING T2.year < 2010 ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT a.Area FROM appellations AS a JOIN wine AS w ON a.Appelation = w.Appelation WHERE w.Year < '2010' GROUP BY a.No ORDER BY COUNT(w.No) DESC LIMIT 1", "source_tables": ["wine", "appellations"], "error_info": ""}, {"sample_id": 6565, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1", "pred_sql": "SELECT g.Color FROM grapes AS g JOIN wine AS w ON g.Grape = w.Grape GROUP BY g.ID ORDER BY AVG(w.Price) DESC LIMIT 1", "source_tables": ["wine", "grapes"], "error_info": ""}, {"sample_id": 6566, "db_id": "wine_1", "score": 0, "gold_sql": "SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1", "pred_sql": "SELECT g.Color FROM grapes AS g JOIN wine AS w ON g.Grape = w.Grape GROUP BY g.Color ORDER BY AVG(w.Price) DESC LIMIT 1", "source_tables": ["wine", "grapes"], "error_info": "Result not equal"}, {"sample_id": 6567, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT DISTINCT Name FROM WINE WHERE YEAR < 2000 OR YEAR > 2010", "pred_sql": "SELECT DISTINCT Name FROM wine WHERE Year < '2000' OR Year > '2010'", "source_tables": ["wine"], "error_info": ""}, {"sample_id": 6568, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT DISTINCT Name FROM WINE WHERE YEAR < 2000 OR YEAR > 2010", "pred_sql": "SELECT DISTINCT Name FROM wine WHERE Year < '2000' OR Year > '2010'", "source_tables": ["wine"], "error_info": ""}, {"sample_id": 6569, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100", "pred_sql": "SELECT DISTINCT Winery FROM wine WHERE Price BETWEEN '50' AND '100'", "source_tables": ["wine"], "error_info": ""}, {"sample_id": 6570, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100", "pred_sql": "SELECT DISTINCT Winery FROM wine WHERE Price BETWEEN '50' AND '100'", "source_tables": ["wine"], "error_info": ""}, {"sample_id": 6571, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT AVG(Price), AVG(Cases) FROM WINE WHERE YEAR = 2009 AND Grape = 'Zinfandel'", "pred_sql": "SELECT AVG(Price) AS Average_Price, AVG(Cases) AS Average_Cases FROM wine WHERE Year = '2009' AND Grape = 'Zinfandel'", "source_tables": ["wine"], "error_info": ""}, {"sample_id": 6572, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT AVG(Price), AVG(Cases) FROM WINE WHERE YEAR = 2009 AND Grape = 'Zinfandel'", "pred_sql": "SELECT AVG(Price) AS Average_Price, AVG(Cases) AS Average_Cases FROM wine WHERE Grape = 'Zinfandel' AND Year = '2009'", "source_tables": ["wine"], "error_info": ""}, {"sample_id": 6573, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT MAX(Price), MAX(Score) FROM WINE WHERE Appelation = 'St. Helena'", "pred_sql": "SELECT MAX(Price) AS MaxPrice, MAX(Score) AS MaxScore FROM wine WHERE Appelation = 'St. Helena'", "source_tables": ["wine"], "error_info": ""}, {"sample_id": 6574, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT MAX(Price), MAX(Score) FROM WINE WHERE Appelation = 'St. Helena'", "pred_sql": "SELECT MAX(Price) AS MaxPrice, MAX(Score) AS MaxScore FROM wine WHERE Appelation = 'St. Helena'", "source_tables": ["wine"], "error_info": ""}, {"sample_id": 6575, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT MAX(Price), MAX(Score), YEAR FROM WINE GROUP BY YEAR", "pred_sql": "SELECT Year, MAX(Price) AS MaxPrice, MAX(Score) AS MaxScore FROM wine GROUP BY Year", "source_tables": ["wine"], "error_info": ""}, {"sample_id": 6576, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT MAX(Price), MAX(Score), YEAR FROM WINE GROUP BY YEAR", "pred_sql": "SELECT Year, MAX(Price) AS MaxPrice, MAX(Score) AS MaxScore FROM wine GROUP BY Year", "source_tables": ["wine"], "error_info": ""}, {"sample_id": 6577, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT AVG(Price), AVG(Score), Appelation FROM WINE GROUP BY Appelation", "pred_sql": "SELECT wine.Appelation, AVG(wine.Price) AS Average_Price, AVG(wine.Score) AS Average_Score FROM wine GROUP BY wine.Appelation", "source_tables": ["wine"], "error_info": ""}, {"sample_id": 6578, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT AVG(Price), AVG(Score), Appelation FROM WINE GROUP BY Appelation", "pred_sql": "SELECT wine.Appelation, AVG(wine.Price) AS Average_Price, AVG(wine.Score) AS Average_Score FROM wine GROUP BY wine.Appelation", "source_tables": ["wine"], "error_info": ""}, {"sample_id": 6579, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT Winery FROM WINE GROUP BY Winery HAVING COUNT(*) >= 4", "pred_sql": "SELECT Winery FROM wine GROUP BY Winery HAVING COUNT(*) >= 4", "source_tables": ["wine"], "error_info": ""}, {"sample_id": 6580, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT Winery FROM WINE GROUP BY Winery HAVING COUNT(*) >= 4", "pred_sql": "SELECT Winery FROM wine GROUP BY Winery HAVING COUNT(*) >= 4", "source_tables": ["wine"], "error_info": ""}, {"sample_id": 6581, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation GROUP BY T2.Appelation HAVING COUNT(*) <= 3", "pred_sql": "SELECT a.County FROM appellations AS a JOIN wine AS w ON a.Appelation = w.Appelation GROUP BY a.Appelation HAVING COUNT(w.No) <= 3", "source_tables": ["wine", "appellations"], "error_info": ""}, {"sample_id": 6582, "db_id": "wine_1", "score": 0, "gold_sql": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation GROUP BY T2.Appelation HAVING COUNT(*) <= 3", "pred_sql": "SELECT DISTINCT a.County, a.State FROM appellations AS a JOIN wine AS w ON a.Appelation = w.Appelation GROUP BY a.No HAVING COUNT(w.No) <= 3", "source_tables": ["wine", "appellations"], "error_info": "Result not equal"}, {"sample_id": 6583, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT Name FROM WINE WHERE YEAR < (SELECT MIN(YEAR) FROM WINE WHERE Winery = 'Brander')", "pred_sql": "SELECT Name FROM wine WHERE Year < (SELECT MIN(Year) FROM wine WHERE Winery = 'Brander')", "source_tables": ["wine"], "error_info": ""}, {"sample_id": 6584, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT Name FROM WINE WHERE YEAR < (SELECT MIN(YEAR) FROM WINE WHERE Winery = 'Brander')", "pred_sql": "SELECT Name FROM wine WHERE Year < (SELECT MIN(Year) FROM wine WHERE Winery = 'Brander')", "source_tables": ["wine"], "error_info": ""}, {"sample_id": 6585, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT Name FROM WINE WHERE Price > (SELECT MAX(Price) FROM WINE WHERE YEAR = 2006)", "pred_sql": "SELECT Name FROM wine WHERE Price > (SELECT MAX(Price) FROM wine WHERE Year = '2006')", "source_tables": ["wine"], "error_info": ""}, {"sample_id": 6586, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT Name FROM WINE WHERE Price > (SELECT MAX(Price) FROM WINE WHERE YEAR = 2006)", "pred_sql": "SELECT Name FROM wine WHERE Price > (SELECT MAX(Price) FROM wine WHERE Year = '2006')", "source_tables": ["wine"], "error_info": ""}, {"sample_id": 6587, "db_id": "wine_1", "score": 0, "gold_sql": "SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE = T2.GRAPE WHERE T1.Color = 'White' GROUP BY T2.Winery ORDER BY COUNT(*) DESC LIMIT 3", "pred_sql": "SELECT Winery, COUNT(*) AS WineCount FROM wine JOIN grapes ON wine.Grape = grapes.Grape WHERE grapes.Color = 'white' GROUP BY Winery ORDER BY WineCount DESC LIMIT 3", "source_tables": ["wine", "grapes"], "error_info": "Result not equal"}, {"sample_id": 6588, "db_id": "wine_1", "score": 0, "gold_sql": "SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE = T2.GRAPE WHERE T1.Color = 'White' GROUP BY T2.Winery ORDER BY COUNT(*) DESC LIMIT 3", "pred_sql": "SELECT Winery, COUNT(*) AS WineCount FROM wine WHERE Grape IN (SELECT Grape FROM grapes WHERE Color = 'white') GROUP BY Winery ORDER BY WineCount DESC LIMIT 3", "source_tables": ["wine", "grapes"], "error_info": "Result not equal"}, {"sample_id": 6589, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT Grape, Winery, YEAR FROM WINE WHERE Price > 100 ORDER BY YEAR", "pred_sql": "SELECT wine.Grape, wine.Winery, wine.Year FROM wine WHERE wine.Price > 100 ORDER BY wine.Year", "source_tables": ["wine"], "error_info": ""}, {"sample_id": 6590, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT Grape, Winery, YEAR FROM WINE WHERE Price > 100 ORDER BY YEAR", "pred_sql": "SELECT wine.Grape, wine.Winery, wine.Year FROM wine WHERE wine.Price > 100 ORDER BY wine.Year", "source_tables": ["wine"], "error_info": ""}, {"sample_id": 6591, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT Grape, Appelation, Name FROM WINE WHERE Score > 93 ORDER BY Name", "pred_sql": "SELECT grapes.Grape, wine.Appelation, wine.Name FROM wine JOIN grapes ON wine.Grape = grapes.Grape WHERE wine.Score > 93 ORDER BY wine.Name", "source_tables": ["wine"], "error_info": ""}, {"sample_id": 6592, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT Grape, Appelation, Name FROM WINE WHERE Score > 93 ORDER BY Name", "pred_sql": "SELECT grapes.Grape, appellations.Appelation, wine.Name FROM wine JOIN grapes ON wine.Grape = grapes.Grape JOIN appellations ON wine.Appelation = appellations.Appelation WHERE wine.Score > 93 ORDER BY wine.Name", "source_tables": ["wine"], "error_info": ""}, {"sample_id": 6593, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT Appelation FROM WINE WHERE YEAR > 2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area = 'Central Coast'", "pred_sql": "SELECT DISTINCT a.Appelation FROM appellations AS a JOIN wine AS w ON a.Appelation = w.Appelation WHERE w.Year > '2008' AND a.Area <> 'Central Coast'", "source_tables": ["wine", "appellations"], "error_info": ""}, {"sample_id": 6594, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT Appelation FROM WINE WHERE YEAR > 2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area = 'Central Coast'", "pred_sql": "SELECT DISTINCT a.Appelation FROM wine AS w JOIN appellations AS a ON w.Appelation = a.Appelation WHERE w.Year > '2008' AND a.Area <> 'Central Coast'", "source_tables": ["wine", "appellations"], "error_info": ""}, {"sample_id": 6595, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT AVG(price) FROM wine WHERE NOT Appelation IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = 'Sonoma')", "pred_sql": "SELECT AVG(Price) AS Average_Price FROM wine WHERE NOT Appelation IN (SELECT Appelation FROM appellations WHERE County = 'Sonoma')", "source_tables": ["wine", "appellations"], "error_info": ""}, {"sample_id": 6596, "db_id": "wine_1", "score": 1, "gold_sql": "SELECT AVG(price) FROM wine WHERE NOT Appelation IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = 'Sonoma')", "pred_sql": "SELECT AVG(Price) AS Average_Price FROM wine WHERE NOT Appelation IN (SELECT Appelation FROM appellations WHERE County = 'Sonoma')", "source_tables": ["wine", "appellations"], "error_info": ""}, {"sample_id": 6597, "db_id": "wine_1", "score": 0, "gold_sql": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Score > 90 GROUP BY T1.County ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT a.County, COUNT(w.No) AS WineCount FROM wine AS w JOIN appellations AS a ON w.Appelation = a.Appelation WHERE w.Score > 90 GROUP BY a.County ORDER BY WineCount DESC LIMIT 1", "source_tables": ["wine", "appellations"], "error_info": "Result not equal"}, {"sample_id": 6598, "db_id": "wine_1", "score": 0, "gold_sql": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Score > 90 GROUP BY T1.County ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT a.County, COUNT(w.No) AS WineCount FROM wine AS w JOIN appellations AS a ON w.Appelation = a.Appelation WHERE w.Score > 90 GROUP BY a.County ORDER BY WineCount DESC LIMIT 1", "source_tables": ["wine", "appellations"], "error_info": "Result not equal"}, {"sample_id": 6599, "db_id": "train_station", "score": 1, "gold_sql": "SELECT COUNT(*) FROM station", "pred_sql": "SELECT COUNT(*) AS Number_of_Stations FROM station", "source_tables": ["station"], "error_info": ""}, {"sample_id": 6600, "db_id": "train_station", "score": 1, "gold_sql": "SELECT name, LOCATION, number_of_platforms FROM station", "pred_sql": "SELECT Name, Location, Number_of_Platforms FROM station", "source_tables": ["station"], "error_info": ""}, {"sample_id": 6601, "db_id": "train_station", "score": 0, "gold_sql": "SELECT DISTINCT LOCATION FROM station", "pred_sql": "SELECT Location FROM station", "source_tables": ["station"], "error_info": "Result not equal"}, {"sample_id": 6602, "db_id": "train_station", "score": 1, "gold_sql": "SELECT name, total_passengers FROM station WHERE LOCATION <> 'London'", "pred_sql": "SELECT Name, Total_Passengers FROM station WHERE NOT Location LIKE '%London%'", "source_tables": ["station"], "error_info": ""}, {"sample_id": 6603, "db_id": "train_station", "score": 1, "gold_sql": "SELECT name, main_services FROM station ORDER BY total_passengers DESC LIMIT 3", "pred_sql": "SELECT Name, Main_Services FROM station ORDER BY Total_Passengers DESC LIMIT 3", "source_tables": ["station"], "error_info": ""}, {"sample_id": 6604, "db_id": "train_station", "score": 1, "gold_sql": "SELECT AVG(total_passengers), MAX(total_passengers) FROM station WHERE LOCATION = 'London' OR LOCATION = 'Glasgow'", "pred_sql": "SELECT AVG(Total_Passengers) AS Average_Passengers, MAX(Total_Passengers) AS Max_Passengers FROM station WHERE Location IN ('London', 'Glasgow')", "source_tables": ["station"], "error_info": ""}, {"sample_id": 6605, "db_id": "train_station", "score": 1, "gold_sql": "SELECT LOCATION, SUM(number_of_platforms), SUM(total_passengers) FROM station GROUP BY LOCATION", "pred_sql": "SELECT Location, SUM(Number_of_Platforms) AS Total_Platforms, SUM(Total_Passengers) AS Total_Passengers FROM station GROUP BY Location", "source_tables": ["station"], "error_info": ""}, {"sample_id": 6606, "db_id": "train_station", "score": 1, "gold_sql": "SELECT DISTINCT LOCATION FROM station WHERE number_of_platforms >= 15 AND total_passengers > 25", "pred_sql": "SELECT DISTINCT s.Location FROM station AS s WHERE s.Number_of_Platforms >= '15' AND s.Total_Passengers > '25'", "source_tables": ["station"], "error_info": ""}, {"sample_id": 6607, "db_id": "train_station", "score": 0, "gold_sql": "SELECT LOCATION FROM station EXCEPT SELECT LOCATION FROM station WHERE number_of_platforms >= 15", "pred_sql": "SELECT DISTINCT Location FROM station WHERE NOT Station_ID IN (SELECT Station_ID FROM station WHERE Number_of_Platforms >= '15')", "source_tables": ["station"], "error_info": "Result not equal"}, {"sample_id": 6608, "db_id": "train_station", "score": 0, "gold_sql": "SELECT LOCATION FROM station GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Location, COUNT(*) AS Number_of_Stations FROM station GROUP BY Location ORDER BY Number_of_Stations DESC LIMIT 1", "source_tables": ["station"], "error_info": "Result not equal"}, {"sample_id": 6609, "db_id": "train_station", "score": 1, "gold_sql": "SELECT name, TIME, service FROM train", "pred_sql": "SELECT Name, Time, Service FROM train", "source_tables": ["train"], "error_info": ""}, {"sample_id": 6610, "db_id": "train_station", "score": 1, "gold_sql": "SELECT COUNT(*) FROM train", "pred_sql": "SELECT COUNT(*) AS Number_of_Trains FROM train", "source_tables": ["train"], "error_info": ""}, {"sample_id": 6611, "db_id": "train_station", "score": 1, "gold_sql": "SELECT name, service FROM train ORDER BY TIME", "pred_sql": "SELECT Name, Service FROM train ORDER BY Time", "source_tables": ["train"], "error_info": ""}, {"sample_id": 6612, "db_id": "train_station", "score": 0, "gold_sql": "SELECT T2.name, COUNT(*) FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id GROUP BY T1.station_id", "pred_sql": "SELECT s.Name, COUNT(ts.Train_ID) AS Number_of_Trains FROM station AS s LEFT JOIN train_station AS ts ON s.Station_ID = ts.Station_ID GROUP BY s.Station_ID", "source_tables": ["station", "train_station"], "error_info": "Result not equal"}, {"sample_id": 6613, "db_id": "train_station", "score": 1, "gold_sql": "SELECT T2.name, T3.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id", "pred_sql": "SELECT train.Name AS Train_Name, station.Name AS Station_Name FROM train JOIN train_station ON train.Train_ID = train_station.Train_ID JOIN station ON train_station.Station_ID = station.Station_ID", "source_tables": ["train", "station", "train_station"], "error_info": ""}, {"sample_id": 6614, "db_id": "train_station", "score": 1, "gold_sql": "SELECT T3.name, T3.time FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id WHERE T2.location = 'London' ORDER BY T3.time DESC", "pred_sql": "SELECT train.Name, train.Time FROM train JOIN train_station ON train.Train_ID = train_station.Train_ID JOIN station ON train_station.Station_ID = station.Station_ID WHERE station.Location LIKE '%London%' ORDER BY train.Time DESC", "source_tables": ["train", "station", "train_station"], "error_info": ""}, {"sample_id": 6615, "db_id": "train_station", "score": 1, "gold_sql": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id GROUP BY T1.station_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT s.Name FROM station AS s JOIN train_station AS ts ON s.Station_ID = ts.Station_ID GROUP BY s.Station_ID ORDER BY COUNT(ts.Train_ID) DESC LIMIT 1", "source_tables": ["station", "train_station"], "error_info": ""}, {"sample_id": 6616, "db_id": "train_station", "score": 1, "gold_sql": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id GROUP BY T1.station_id HAVING COUNT(*) >= 2", "pred_sql": "SELECT s.Name FROM station AS s JOIN train_station AS ts ON s.Station_ID = ts.Station_ID GROUP BY s.Station_ID HAVING COUNT(ts.Train_ID) >= 2", "source_tables": ["station", "train_station"], "error_info": ""}, {"sample_id": 6617, "db_id": "train_station", "score": 1, "gold_sql": "SELECT LOCATION FROM station GROUP BY LOCATION HAVING COUNT(*) = 1", "pred_sql": "SELECT Location FROM station GROUP BY Location HAVING COUNT(Station_ID) = 1", "source_tables": ["station"], "error_info": ""}, {"sample_id": 6618, "db_id": "train_station", "score": 1, "gold_sql": "SELECT name FROM station WHERE NOT station_id IN (SELECT station_id FROM train_station)", "pred_sql": "SELECT Name FROM station WHERE NOT Station_ID IN (SELECT Station_ID FROM train_station)", "source_tables": ["station", "train_station"], "error_info": ""}, {"sample_id": 6619, "db_id": "train_station", "score": 1, "gold_sql": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id WHERE T3.Name = 'Ananthapuri Express' INTERSECT SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id WHERE T3.Name = 'Guruvayur Express'", "pred_sql": "SELECT s.Name FROM station AS s JOIN train_station AS ts1 ON s.Station_ID = ts1.Station_ID JOIN train AS t1 ON ts1.Train_ID = t1.Train_ID WHERE t1.Name = 'Ananthapuri Express' INTERSECT SELECT s.Name FROM station AS s JOIN train_station AS ts2 ON s.Station_ID = ts2.Station_ID JOIN train AS t2 ON ts2.Train_ID = t2.Train_ID WHERE t2.Name = 'Guruvayur Express'", "source_tables": ["train", "station", "train_station"], "error_info": ""}, {"sample_id": 6620, "db_id": "train_station", "score": 1, "gold_sql": "SELECT T2.name FROM train_station AS T1 JOIN train AS T2 ON T1.train_id = T2.train_id WHERE NOT T1.station_id IN (SELECT T4.station_id FROM train_station AS T3 JOIN station AS T4 ON T3.station_id = T4.station_id WHERE t4.location = 'London')", "pred_sql": "SELECT DISTINCT train.Name FROM train WHERE NOT train.Train_ID IN (SELECT train_station.Train_ID FROM train_station JOIN station ON train_station.Station_ID = station.Station_ID WHERE station.Location = 'London')", "source_tables": ["train", "station", "train_station"], "error_info": ""}, {"sample_id": 6621, "db_id": "train_station", "score": 0, "gold_sql": "SELECT name, LOCATION FROM station ORDER BY Annual_entry_exit, Annual_interchanges", "pred_sql": "SELECT Name, Location FROM station ORDER BY CAST(Annual_entry_exit AS INT) + CAST(Annual_interchanges AS INT) DESC", "source_tables": ["station"], "error_info": "Result not equal"}, {"sample_id": 6622, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT vehicle_id FROM Vehicles", "pred_sql": "SELECT vehicle_id FROM Vehicles", "source_tables": ["vehicles"], "error_info": ""}, {"sample_id": 6623, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT vehicle_id FROM Vehicles", "pred_sql": "SELECT vehicle_id FROM Vehicles", "source_tables": ["vehicles"], "error_info": ""}, {"sample_id": 6624, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Vehicles", "pred_sql": "SELECT COUNT(*) AS total_vehicles FROM Vehicles", "source_tables": ["vehicles"], "error_info": ""}, {"sample_id": 6625, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Vehicles", "pred_sql": "SELECT COUNT(*) AS vehicle_count FROM Vehicles", "source_tables": ["vehicles"], "error_info": ""}, {"sample_id": 6626, "db_id": "driving_school", "score": 0, "gold_sql": "SELECT vehicle_details FROM Vehicles WHERE vehicle_id = 1", "pred_sql": "SELECT * FROM Vehicles WHERE vehicle_id = '1'", "source_tables": ["vehicles"], "error_info": "Result not equal"}, {"sample_id": 6627, "db_id": "driving_school", "score": 0, "gold_sql": "SELECT vehicle_details FROM Vehicles WHERE vehicle_id = 1", "pred_sql": "SELECT * FROM Vehicles WHERE vehicle_id = '1'", "source_tables": ["vehicles"], "error_info": "Result not equal"}, {"sample_id": 6628, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT first_name, middle_name, last_name FROM Staff", "pred_sql": "SELECT first_name, middle_name, last_name FROM Staff", "source_tables": ["staff"], "error_info": ""}, {"sample_id": 6629, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT first_name, middle_name, last_name FROM Staff", "pred_sql": "SELECT first_name, middle_name, last_name FROM Staff", "source_tables": ["staff"], "error_info": ""}, {"sample_id": 6630, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT date_of_birth FROM Staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn'", "pred_sql": "SELECT date_of_birth FROM Staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn'", "source_tables": ["staff"], "error_info": ""}, {"sample_id": 6631, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT date_of_birth FROM Staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn'", "pred_sql": "SELECT date_of_birth FROM Staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn'", "source_tables": ["staff"], "error_info": ""}, {"sample_id": 6632, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT date_joined_staff FROM Staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn'", "pred_sql": "SELECT date_joined_staff FROM Staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn'", "source_tables": ["staff"], "error_info": ""}, {"sample_id": 6633, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT date_joined_staff FROM Staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn'", "pred_sql": "SELECT date_joined_staff FROM Staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn'", "source_tables": ["staff"], "error_info": ""}, {"sample_id": 6634, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT date_left_staff FROM Staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn'", "pred_sql": "SELECT date_left_staff FROM Staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn'", "source_tables": ["staff"], "error_info": ""}, {"sample_id": 6635, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT date_left_staff FROM Staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn'", "pred_sql": "SELECT date_left_staff FROM Staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn'", "source_tables": ["staff"], "error_info": ""}, {"sample_id": 6636, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Staff WHERE first_name = 'Ludie'", "pred_sql": "SELECT COUNT(*) AS staff_count FROM Staff WHERE first_name = 'Ludie'", "source_tables": ["staff"], "error_info": ""}, {"sample_id": 6637, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Staff WHERE first_name = 'Ludie'", "pred_sql": "SELECT COUNT(*) AS employee_count FROM Staff WHERE first_name = 'Ludie'", "source_tables": ["staff"], "error_info": ""}, {"sample_id": 6638, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT nickname FROM Staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn'", "pred_sql": "SELECT nickname FROM Staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn'", "source_tables": ["staff"], "error_info": ""}, {"sample_id": 6639, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT nickname FROM Staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn'", "pred_sql": "SELECT nickname FROM Staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn'", "source_tables": ["staff"], "error_info": ""}, {"sample_id": 6640, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Staff", "pred_sql": "SELECT COUNT(*) AS total_staff FROM Staff", "source_tables": ["staff"], "error_info": ""}, {"sample_id": 6641, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Staff", "pred_sql": "SELECT COUNT(*) AS employee_count FROM Staff", "source_tables": ["staff"], "error_info": ""}, {"sample_id": 6642, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn'", "pred_sql": "SELECT city FROM Addresses INNER JOIN Staff ON Addresses.address_id = Staff.staff_address_id WHERE Staff.first_name = 'Janessa' AND Staff.last_name = 'Sawayn'", "source_tables": ["addresses", "staff"], "error_info": ""}, {"sample_id": 6643, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn'", "pred_sql": "SELECT city FROM Addresses INNER JOIN Staff ON Addresses.address_id = Staff.staff_address_id WHERE first_name = 'Janessa' AND last_name = 'Sawayn'", "source_tables": ["addresses", "staff"], "error_info": ""}, {"sample_id": 6644, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT T1.country, T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn'", "pred_sql": "SELECT a.country, a.state_province_county FROM Staff AS s JOIN Addresses AS a ON s.staff_address_id = a.address_id WHERE s.first_name = 'Janessa' AND s.last_name = 'Sawayn'", "source_tables": ["addresses", "staff"], "error_info": ""}, {"sample_id": 6645, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT T1.country, T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn'", "pred_sql": "SELECT a.country, a.state_province_county FROM Staff AS s JOIN Addresses AS a ON s.staff_address_id = a.address_id WHERE s.first_name = 'Janessa' AND s.last_name = 'Sawayn'", "source_tables": ["addresses", "staff"], "error_info": ""}, {"sample_id": 6646, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT SUM(T1.lesson_time) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'Rylan' AND T2.last_name = 'Goodwin'", "pred_sql": "SELECT SUM(Lessons.lesson_time) AS total_lesson_time FROM Lessons JOIN Customers ON Lessons.customer_id = Customers.customer_id WHERE Customers.first_name = 'Rylan' AND Customers.last_name = 'Goodwin'", "source_tables": ["lessons", "customers"], "error_info": ""}, {"sample_id": 6647, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT SUM(T1.lesson_time) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'Rylan' AND T2.last_name = 'Goodwin'", "pred_sql": "SELECT SUM(Lessons.lesson_time) AS total_lesson_time FROM Lessons JOIN Customers ON Lessons.customer_id = Customers.customer_id WHERE Customers.first_name = 'Rylan' AND Customers.last_name = 'Goodwin'", "source_tables": ["lessons", "customers"], "error_info": ""}, {"sample_id": 6648, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn'", "pred_sql": "SELECT a.zip_postcode FROM Staff AS s JOIN Addresses AS a ON s.staff_address_id = a.address_id WHERE s.first_name = 'Janessa' AND s.last_name = 'Sawayn'", "source_tables": ["addresses", "staff"], "error_info": ""}, {"sample_id": 6649, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn'", "pred_sql": "SELECT a.zip_postcode FROM Staff AS s JOIN Addresses AS a ON s.staff_address_id = a.address_id WHERE s.first_name = 'Janessa' AND s.last_name = 'Sawayn'", "source_tables": ["addresses", "staff"], "error_info": ""}, {"sample_id": 6650, "db_id": "driving_school", "score": 0, "gold_sql": "SELECT COUNT(*) FROM Addresses WHERE state_province_county = 'Georgia'", "pred_sql": "SELECT COUNT(*) AS staff_count FROM Staff INNER JOIN Addresses ON Staff.staff_address_id = Addresses.address_id WHERE Addresses.state_province_county = 'Georgia'", "source_tables": ["addresses"], "error_info": "Result not equal"}, {"sample_id": 6651, "db_id": "driving_school", "score": 0, "gold_sql": "SELECT COUNT(*) FROM Addresses WHERE state_province_county = 'Georgia'", "pred_sql": "SELECT COUNT(*) AS employee_count FROM Staff INNER JOIN Addresses ON Staff.staff_address_id = Addresses.address_id WHERE Addresses.state_province_county = 'Georgia'", "source_tables": ["addresses"], "error_info": "Result not equal"}, {"sample_id": 6652, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT T2.first_name, T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = 'Damianfort'", "pred_sql": "SELECT Staff.first_name, Staff.last_name FROM Staff JOIN Addresses ON Staff.staff_address_id = Addresses.address_id WHERE Addresses.city = 'Damianfort'", "source_tables": ["addresses", "staff"], "error_info": ""}, {"sample_id": 6653, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT T2.first_name, T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = 'Damianfort'", "pred_sql": "SELECT first_name, last_name FROM Staff JOIN Addresses ON Staff.staff_address_id = Addresses.address_id WHERE Addresses.city = 'Damianfort'", "source_tables": ["addresses", "staff"], "error_info": ""}, {"sample_id": 6654, "db_id": "driving_school", "score": 0, "gold_sql": "SELECT T1.city, COUNT(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT city, COUNT(*) AS number_of_staffs FROM Staff JOIN Addresses ON Staff.staff_address_id = Addresses.address_id GROUP BY city ORDER BY number_of_staffs DESC", "source_tables": ["addresses", "staff"], "error_info": "Result not equal"}, {"sample_id": 6655, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT T1.city, COUNT(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT city, COUNT(*) AS employee_count FROM Staff JOIN Addresses ON Staff.staff_address_id = Addresses.address_id GROUP BY city ORDER BY employee_count DESC LIMIT 1", "source_tables": ["addresses", "staff"], "error_info": ""}, {"sample_id": 6656, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING COUNT(*) BETWEEN 2 AND 4", "pred_sql": "SELECT state_province_county FROM Staff JOIN Addresses ON Staff.staff_address_id = Addresses.address_id GROUP BY state_province_county HAVING COUNT(staff_id) BETWEEN 2 AND 4", "source_tables": ["addresses", "staff"], "error_info": ""}, {"sample_id": 6657, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING COUNT(*) BETWEEN 2 AND 4", "pred_sql": "SELECT state_province_county FROM Staff JOIN Addresses ON Staff.staff_address_id = Addresses.address_id GROUP BY state_province_county HAVING COUNT(staff_id) BETWEEN 2 AND 4", "source_tables": ["addresses", "staff"], "error_info": ""}, {"sample_id": 6658, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT first_name, last_name FROM Customers", "pred_sql": "SELECT first_name, last_name FROM Customers", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 6659, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT first_name, last_name FROM Customers", "pred_sql": "SELECT first_name, last_name FROM Customers", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 6660, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT email_address, date_of_birth FROM Customers WHERE first_name = 'Carole'", "pred_sql": "SELECT email_address, date_of_birth FROM Customers WHERE first_name = 'Carole'", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 6661, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT email_address, date_of_birth FROM Customers WHERE first_name = 'Carole'", "pred_sql": "SELECT email_address, date_of_birth FROM Customers WHERE first_name = 'Carole'", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 6662, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT phone_number, email_address FROM Customers WHERE amount_outstanding > 2000", "pred_sql": "SELECT phone_number, email_address FROM Customers WHERE amount_outstanding > '2000'", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 6663, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT phone_number, email_address FROM Customers WHERE amount_outstanding > 2000", "pred_sql": "SELECT phone_number, email_address FROM Customers WHERE amount_outstanding > '2000'", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 6664, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT customer_status_code, cell_mobile_phone_number, email_address FROM Customers WHERE first_name = 'Marina' OR last_name = 'Kohler'", "pred_sql": "SELECT customer_status_code, cell_mobile_phone_number, email_address FROM Customers WHERE last_name = 'Kohler' OR first_name = 'Marina'", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 6665, "db_id": "driving_school", "score": 0, "gold_sql": "SELECT customer_status_code, cell_mobile_phone_number, email_address FROM Customers WHERE first_name = 'Marina' OR last_name = 'Kohler'", "pred_sql": "SELECT customer_status_code, phone_number, email_address FROM Customers WHERE last_name = 'Kohler' OR first_name = 'Marina'", "source_tables": ["customers"], "error_info": "Result not equal"}, {"sample_id": 6666, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT date_of_birth FROM Customers WHERE customer_status_code = 'Good Customer'", "pred_sql": "SELECT date_of_birth FROM Customers WHERE customer_status_code = 'Good Customer'", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 6667, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT date_of_birth FROM Customers WHERE customer_status_code = 'Good Customer'", "pred_sql": "SELECT date_of_birth FROM Customers WHERE customer_status_code = 'Good Customer'", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 6668, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT date_became_customer FROM Customers WHERE first_name = 'Carole' AND last_name = 'Bernhard'", "pred_sql": "SELECT date_became_customer FROM Customers WHERE first_name = 'Carole' AND last_name = 'Bernhard'", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 6669, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT date_became_customer FROM Customers WHERE first_name = 'Carole' AND last_name = 'Bernhard'", "pred_sql": "SELECT date_became_customer FROM Customers WHERE first_name = 'Carole' AND last_name = 'Bernhard' LIMIT 1", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 6670, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Customers", "pred_sql": "SELECT COUNT(*) AS total_customers FROM Customers", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 6671, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Customers", "pred_sql": "SELECT COUNT(*) AS total_customers FROM Customers", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 6672, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT customer_status_code, COUNT(*) FROM Customers GROUP BY customer_status_code", "pred_sql": "SELECT customer_status_code, COUNT(customer_id) AS number_of_customers FROM Customers GROUP BY customer_status_code", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 6673, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT customer_status_code, COUNT(*) FROM Customers GROUP BY customer_status_code", "pred_sql": "SELECT customer_status_code, COUNT(customer_id) AS customer_count FROM Customers GROUP BY customer_status_code", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 6674, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY COUNT(*) ASC LIMIT 1", "pred_sql": "SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY COUNT(customer_id) ASC LIMIT 1", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 6675, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY COUNT(*) ASC LIMIT 1", "pred_sql": "SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY COUNT(customer_id) ASC LIMIT 1", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 6676, "db_id": "driving_school", "score": 0, "gold_sql": "SELECT COUNT(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'Rylan' AND T2.last_name = 'Goodwin' AND T1.lesson_status_code = 'Completed'", "pred_sql": "SELECT COUNT(*) AS completed_lessons_count FROM Lessons JOIN Customers ON Lessons.customer_id = Customers.customer_id WHERE Customers.first_name = 'Rylan' AND Customers.last_name = 'Goodwin' AND Lessons.lesson_status_code = 'completed'", "source_tables": ["lessons", "customers"], "error_info": "Result not equal"}, {"sample_id": 6677, "db_id": "driving_school", "score": 0, "gold_sql": "SELECT COUNT(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'Rylan' AND T2.last_name = 'Goodwin' AND T1.lesson_status_code = 'Completed'", "pred_sql": "SELECT COUNT(*) AS lesson_count FROM Lessons JOIN Customers ON Lessons.customer_id = Customers.customer_id WHERE Customers.first_name = 'Ryan' AND Customers.last_name = 'Goodwin'", "source_tables": ["lessons", "customers"], "error_info": "Result not equal"}, {"sample_id": 6678, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT MAX(amount_outstanding), MIN(amount_outstanding), AVG(amount_outstanding) FROM Customers", "pred_sql": "SELECT MAX(amount_outstanding) AS max_outstanding, MIN(amount_outstanding) AS min_outstanding, AVG(amount_outstanding) AS avg_outstanding FROM Customers", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 6679, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT MAX(amount_outstanding), MIN(amount_outstanding), AVG(amount_outstanding) FROM Customers", "pred_sql": "SELECT MAX(amount_outstanding) AS max_outstanding, MIN(amount_outstanding) AS min_outstanding, AVG(amount_outstanding) AS avg_outstanding FROM Customers", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 6680, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT first_name, last_name FROM Customers WHERE amount_outstanding BETWEEN 1000 AND 3000", "pred_sql": "SELECT first_name, last_name FROM Customers WHERE amount_outstanding BETWEEN '1000' AND '3000'", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 6681, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT first_name, last_name FROM Customers WHERE amount_outstanding BETWEEN 1000 AND 3000", "pred_sql": "SELECT first_name, last_name FROM Customers WHERE amount_outstanding BETWEEN '1000' AND '3000'", "source_tables": ["customers"], "error_info": ""}, {"sample_id": 6682, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT T1.first_name, T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = 'Lockmanfurt'", "pred_sql": "SELECT Customers.first_name, Customers.last_name FROM Customers JOIN Addresses ON Customers.customer_address_id = Addresses.address_id WHERE Addresses.city = 'Lockmanfurt'", "source_tables": ["addresses", "customers"], "error_info": ""}, {"sample_id": 6683, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT T1.first_name, T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = 'Lockmanfurt'", "pred_sql": "SELECT first_name, last_name FROM Customers JOIN Addresses ON Customers.customer_address_id = Addresses.address_id WHERE Addresses.city = 'Lockmanfurt'", "source_tables": ["addresses", "customers"], "error_info": ""}, {"sample_id": 6684, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = 'Carole' AND T1.last_name = 'Bernhard'", "pred_sql": "SELECT Addresses.country FROM Customers JOIN Addresses ON Customers.customer_address_id = Addresses.address_id WHERE Customers.first_name = 'Carole' AND Customers.last_name = 'Bernhard'", "source_tables": ["addresses", "customers"], "error_info": ""}, {"sample_id": 6685, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = 'Carole' AND T1.last_name = 'Bernhard'", "pred_sql": "SELECT Addresses.country FROM Customers JOIN Addresses ON Customers.customer_address_id = Addresses.address_id WHERE Customers.first_name = 'Carole' AND Customers.last_name = 'Bernhard'", "source_tables": ["addresses", "customers"], "error_info": ""}, {"sample_id": 6686, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = 'Carole' AND T1.last_name = 'Bernhard'", "pred_sql": "SELECT Addresses.zip_postcode FROM Customers JOIN Addresses ON Customers.customer_address_id = Addresses.address_id WHERE Customers.first_name = 'Carole' AND Customers.last_name = 'Bernhard'", "source_tables": ["addresses", "customers"], "error_info": ""}, {"sample_id": 6687, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = 'Carole' AND T1.last_name = 'Bernhard'", "pred_sql": "SELECT a.zip_postcode FROM Customers AS c JOIN Addresses AS a ON c.customer_address_id = a.address_id WHERE c.first_name = 'Carole' AND c.last_name = 'Bernhard'", "source_tables": ["addresses", "customers"], "error_info": ""}, {"sample_id": 6688, "db_id": "driving_school", "score": 0, "gold_sql": "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT city, COUNT(customer_id) AS customer_count FROM Addresses JOIN Customers ON Addresses.address_id = Customers.customer_address_id GROUP BY city ORDER BY customer_count DESC LIMIT 1", "source_tables": ["addresses", "customers"], "error_info": "Result not equal"}, {"sample_id": 6689, "db_id": "driving_school", "score": 0, "gold_sql": "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT city, COUNT(customer_id) AS customer_count FROM Addresses JOIN Customers ON Addresses.address_id = Customers.customer_address_id GROUP BY city ORDER BY customer_count DESC LIMIT 1", "source_tables": ["addresses", "customers"], "error_info": "Result not equal"}, {"sample_id": 6690, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT SUM(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'Carole' AND T2.last_name = 'Bernhard'", "pred_sql": "SELECT SUM(cp.amount_payment) AS total_paid FROM Customers AS c JOIN Customer_Payments AS cp ON c.customer_id = cp.customer_id WHERE c.first_name = 'Carole' AND c.last_name = 'Bernhard'", "source_tables": ["customers", "customer_payments"], "error_info": ""}, {"sample_id": 6691, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT SUM(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'Carole' AND T2.last_name = 'Bernhard'", "pred_sql": "SELECT SUM(cp.amount_payment) AS total_amount_paid FROM Customers AS c JOIN Customer_Payments AS cp ON c.customer_id = cp.customer_id WHERE c.first_name = 'Carole' AND c.last_name = 'Bernhard'", "source_tables": ["customers", "customer_payments"], "error_info": ""}, {"sample_id": 6692, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Customers WHERE NOT customer_id IN (SELECT customer_id FROM Customer_Payments)", "pred_sql": "SELECT COUNT(*) AS number_of_customers_without_payments FROM Customers WHERE NOT customer_id IN (SELECT customer_id FROM Customer_Payments)", "source_tables": ["customers", "customer_payments"], "error_info": ""}, {"sample_id": 6693, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Customers WHERE NOT customer_id IN (SELECT customer_id FROM Customer_Payments)", "pred_sql": "SELECT COUNT(*) AS customer_count FROM Customers WHERE NOT customer_id IN (SELECT customer_id FROM Customer_Payments)", "source_tables": ["customers", "customer_payments"], "error_info": ""}, {"sample_id": 6694, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT T2.first_name, T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING COUNT(*) > 2", "pred_sql": "SELECT C.first_name, C.last_name FROM Customers AS C JOIN Customer_Payments AS CP ON C.customer_id = CP.customer_id GROUP BY C.customer_id HAVING COUNT(CP.datetime_payment) > 2", "source_tables": ["customers", "customer_payments"], "error_info": ""}, {"sample_id": 6695, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT T2.first_name, T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING COUNT(*) > 2", "pred_sql": "SELECT DISTINCT c.first_name, c.last_name FROM Customers AS c JOIN Customer_Payments AS cp ON c.customer_id = cp.customer_id GROUP BY c.customer_id HAVING COUNT(cp.datetime_payment) > 2", "source_tables": ["customers", "customer_payments"], "error_info": ""}, {"sample_id": 6696, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT payment_method_code, COUNT(*) FROM Customer_Payments GROUP BY payment_method_code", "pred_sql": "SELECT payment_method_code, COUNT(*) AS number_of_payments FROM Customer_Payments GROUP BY payment_method_code", "source_tables": ["customer_payments"], "error_info": ""}, {"sample_id": 6697, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT payment_method_code, COUNT(*) FROM Customer_Payments GROUP BY payment_method_code", "pred_sql": "SELECT payment_method_code, COUNT(*) AS payment_count FROM Customer_Payments GROUP BY payment_method_code", "source_tables": ["customer_payments"], "error_info": ""}, {"sample_id": 6698, "db_id": "driving_school", "score": 0, "gold_sql": "SELECT COUNT(*) FROM Lessons WHERE lesson_status_code = 'Cancelled'", "pred_sql": "SELECT COUNT(*) AS cancelled_lessons_count FROM Lessons WHERE lesson_status_code = 'cancelled'", "source_tables": ["lessons"], "error_info": "Result not equal"}, {"sample_id": 6699, "db_id": "driving_school", "score": 0, "gold_sql": "SELECT COUNT(*) FROM Lessons WHERE lesson_status_code = 'Cancelled'", "pred_sql": "SELECT COUNT(*) AS cancelled_lessons_count FROM Lessons WHERE lesson_status_code = 'cancelled'", "source_tables": ["lessons"], "error_info": "Result not equal"}, {"sample_id": 6700, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn' AND nickname LIKE '%s%'", "pred_sql": "SELECT lesson_id FROM Lessons JOIN Staff ON Lessons.staff_id = Staff.staff_id WHERE Staff.first_name = 'Janessa' AND Staff.last_name = 'Sawayn' AND Staff.nickname LIKE '%s%'", "source_tables": ["lessons", "staff"], "error_info": ""}, {"sample_id": 6701, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn' AND nickname LIKE '%s%'", "pred_sql": "SELECT Lessons.lesson_id FROM Lessons JOIN Staff ON Lessons.staff_id = Staff.staff_id WHERE Staff.first_name = 'Janessa' AND Staff.last_name = 'Sawayn' AND Staff.nickname LIKE '%s%'", "source_tables": ["lessons", "staff"], "error_info": ""}, {"sample_id": 6702, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE '%a%'", "pred_sql": "SELECT COUNT(*) AS lesson_count FROM Lessons JOIN Staff ON Lessons.staff_id = Staff.staff_id WHERE Staff.first_name LIKE '%a%'", "source_tables": ["lessons", "staff"], "error_info": ""}, {"sample_id": 6703, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE '%a%'", "pred_sql": "SELECT COUNT(*) AS lesson_count FROM Lessons JOIN Staff ON Lessons.staff_id = Staff.staff_id WHERE Staff.first_name LIKE '%a%'", "source_tables": ["lessons", "staff"], "error_info": ""}, {"sample_id": 6704, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT SUM(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn'", "pred_sql": "SELECT SUM(Lessons.lesson_time) AS total_lesson_time FROM Lessons JOIN Staff ON Lessons.staff_id = Staff.staff_id WHERE Staff.first_name = 'Janessa' AND Staff.last_name = 'Sawayn'", "source_tables": ["lessons", "staff"], "error_info": ""}, {"sample_id": 6705, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT SUM(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn'", "pred_sql": "SELECT SUM(Lesson_Time) AS total_time FROM Lessons JOIN Staff ON Lessons.staff_id = Staff.staff_id WHERE Staff.first_name = 'Janessa' AND Staff.last_name = 'Sawayn'", "source_tables": ["lessons", "staff"], "error_info": ""}, {"sample_id": 6706, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT AVG(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn'", "pred_sql": "SELECT AVG(price) AS average_lesson_price FROM Lessons JOIN Staff ON Lessons.staff_id = Staff.staff_id WHERE Staff.first_name = 'Janessa' AND Staff.last_name = 'Sawayn'", "source_tables": ["lessons", "staff"], "error_info": ""}, {"sample_id": 6707, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT AVG(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn'", "pred_sql": "SELECT AVG(price) AS average_price FROM Lessons JOIN Staff ON Lessons.staff_id = Staff.staff_id WHERE Staff.first_name = 'Janessa' AND Staff.last_name = 'Sawayn'", "source_tables": ["lessons", "staff"], "error_info": ""}, {"sample_id": 6708, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'Ray'", "pred_sql": "SELECT COUNT(*) AS lesson_count FROM Lessons JOIN Customers ON Lessons.customer_id = Customers.customer_id WHERE Customers.first_name = 'Ray'", "source_tables": ["lessons", "customers"], "error_info": ""}, {"sample_id": 6709, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'Ray'", "pred_sql": "SELECT COUNT(*) AS lesson_count FROM Lessons JOIN Customers ON Lessons.customer_id = Customers.customer_id WHERE Customers.first_name = 'Ray'", "source_tables": ["lessons", "customers"], "error_info": ""}, {"sample_id": 6710, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff", "pred_sql": "SELECT DISTINCT Staff.last_name FROM Staff JOIN Customers ON Staff.last_name = Customers.last_name", "source_tables": ["staff", "customers"], "error_info": ""}, {"sample_id": 6711, "db_id": "driving_school", "score": 0, "gold_sql": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff", "pred_sql": "SELECT last_name FROM Customers UNION SELECT last_name FROM Staff", "source_tables": ["staff", "customers"], "error_info": "Result not equal"}, {"sample_id": 6712, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id", "pred_sql": "SELECT first_name FROM Staff WHERE NOT staff_id IN (SELECT DISTINCT staff_id FROM Lessons)", "source_tables": ["lessons", "staff"], "error_info": ""}, {"sample_id": 6713, "db_id": "driving_school", "score": 1, "gold_sql": "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id", "pred_sql": "SELECT first_name FROM Staff WHERE NOT staff_id IN (SELECT DISTINCT staff_id FROM Lessons)", "source_tables": ["lessons", "staff"], "error_info": ""}, {"sample_id": 6714, "db_id": "driving_school", "score": 0, "gold_sql": "SELECT T1.vehicle_id, T1.vehicle_details FROM Vehicles AS T1 JOIN Lessons AS T2 ON T1.vehicle_id = T2.vehicle_id GROUP BY T1.vehicle_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT vehicle_id, vehicle_details FROM Lessons GROUP BY vehicle_id ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["lessons", "vehicles"], "error_info": "Predction Execution Error:no such column: vehicle_details"}, {"sample_id": 6715, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Faculty", "pred_sql": "SELECT COUNT(*) AS faculty_count FROM Faculty", "source_tables": ["faculty"], "error_info": ""}, {"sample_id": 6716, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Faculty", "pred_sql": "SELECT COUNT(*) AS total_faculty_members FROM Faculty", "source_tables": ["faculty"], "error_info": ""}, {"sample_id": 6717, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT DISTINCT rank FROM Faculty", "pred_sql": "SELECT DISTINCT Rank FROM Faculty", "source_tables": ["faculty"], "error_info": ""}, {"sample_id": 6718, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT DISTINCT rank FROM Faculty", "pred_sql": "SELECT DISTINCT Rank FROM Faculty", "source_tables": ["faculty"], "error_info": ""}, {"sample_id": 6719, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT DISTINCT building FROM Faculty", "pred_sql": "SELECT DISTINCT Building FROM Faculty WHERE NOT Room IS NULL", "source_tables": ["faculty"], "error_info": ""}, {"sample_id": 6720, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT DISTINCT building FROM Faculty", "pred_sql": "SELECT DISTINCT Building FROM Faculty", "source_tables": ["faculty"], "error_info": ""}, {"sample_id": 6721, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT rank, Fname, Lname FROM Faculty", "pred_sql": "SELECT Rank, Fname, Lname FROM Faculty", "source_tables": ["faculty"], "error_info": ""}, {"sample_id": 6722, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT rank, Fname, Lname FROM Faculty", "pred_sql": "SELECT Rank, Fname, Lname FROM Faculty", "source_tables": ["faculty"], "error_info": ""}, {"sample_id": 6723, "db_id": "activity_1", "score": 0, "gold_sql": "SELECT Fname, Lname, phone FROM Faculty WHERE Sex = 'F'", "pred_sql": "SELECT Fname, Lname, Phone FROM Faculty WHERE Sex = 'Female'", "source_tables": ["faculty"], "error_info": "Result not equal"}, {"sample_id": 6724, "db_id": "activity_1", "score": 0, "gold_sql": "SELECT Fname, Lname, phone FROM Faculty WHERE Sex = 'F'", "pred_sql": "SELECT Fname, Lname, Phone FROM Faculty WHERE Sex = 'Female'", "source_tables": ["faculty"], "error_info": "Result not equal"}, {"sample_id": 6725, "db_id": "activity_1", "score": 0, "gold_sql": "SELECT FacID FROM Faculty WHERE Sex = 'M'", "pred_sql": "SELECT FacID FROM Faculty WHERE Sex = 'Male'", "source_tables": ["faculty"], "error_info": "Result not equal"}, {"sample_id": 6726, "db_id": "activity_1", "score": 0, "gold_sql": "SELECT FacID FROM Faculty WHERE Sex = 'M'", "pred_sql": "SELECT FacID FROM Faculty WHERE Sex = 'Male'", "source_tables": ["faculty"], "error_info": "Result not equal"}, {"sample_id": 6727, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Faculty WHERE Sex = 'F' AND Rank = 'Professor'", "pred_sql": "SELECT COUNT(*) AS Female_Professors FROM Faculty WHERE Sex = 'Female' AND Rank = 'Professor'", "source_tables": ["faculty"], "error_info": ""}, {"sample_id": 6728, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Faculty WHERE Sex = 'F' AND Rank = 'Professor'", "pred_sql": "SELECT COUNT(*) AS female_professor_count FROM Faculty WHERE Sex = 'F' AND Rank = 'Professor'", "source_tables": ["faculty"], "error_info": ""}, {"sample_id": 6729, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT phone, room, building FROM Faculty WHERE Fname = 'Jerry' AND Lname = 'Prince'", "pred_sql": "SELECT Phone, Room, Building FROM Faculty WHERE Fname = 'Jerry' AND Lname = 'Prince'", "source_tables": ["faculty"], "error_info": ""}, {"sample_id": 6730, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT phone, room, building FROM Faculty WHERE Fname = 'Jerry' AND Lname = 'Prince'", "pred_sql": "SELECT Phone, Room, Building FROM Faculty WHERE Fname = 'Jerry' AND Lname = 'Prince'", "source_tables": ["faculty"], "error_info": ""}, {"sample_id": 6731, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Faculty WHERE Rank = 'Professor' AND building = 'NEB'", "pred_sql": "SELECT COUNT(*) AS ProfessorCount FROM Faculty WHERE Rank = 'Professor' AND Building = 'NEB'", "source_tables": ["faculty"], "error_info": ""}, {"sample_id": 6732, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Faculty WHERE Rank = 'Professor' AND building = 'NEB'", "pred_sql": "SELECT COUNT(*) AS ProfessorCount FROM Faculty WHERE Building = 'NEB' AND Rank = 'Professor'", "source_tables": ["faculty"], "error_info": ""}, {"sample_id": 6733, "db_id": "activity_1", "score": 0, "gold_sql": "SELECT fname, lname FROM Faculty WHERE Rank = 'Instructor'", "pred_sql": "SELECT Fname, Lname FROM Faculty", "source_tables": ["faculty"], "error_info": "Result not equal"}, {"sample_id": 6734, "db_id": "activity_1", "score": 0, "gold_sql": "SELECT fname, lname FROM Faculty WHERE Rank = 'Instructor'", "pred_sql": "SELECT Fname, Lname FROM Faculty", "source_tables": ["faculty"], "error_info": "Result not equal"}, {"sample_id": 6735, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT building, COUNT(*) FROM Faculty GROUP BY building", "pred_sql": "SELECT Building, COUNT(FacID) AS NumberOfFacultyMembers FROM Faculty GROUP BY Building", "source_tables": ["faculty"], "error_info": ""}, {"sample_id": 6736, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT building, COUNT(*) FROM Faculty GROUP BY building", "pred_sql": "SELECT Building, COUNT(FacID) AS Faculty_Count FROM Faculty GROUP BY Building", "source_tables": ["faculty"], "error_info": ""}, {"sample_id": 6737, "db_id": "activity_1", "score": 0, "gold_sql": "SELECT building FROM Faculty GROUP BY building ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Building, COUNT(FacID) AS FacultyCount FROM Faculty GROUP BY Building ORDER BY FacultyCount DESC LIMIT 1", "source_tables": ["faculty"], "error_info": "Result not equal"}, {"sample_id": 6738, "db_id": "activity_1", "score": 0, "gold_sql": "SELECT building FROM Faculty GROUP BY building ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Building, COUNT(FacID) AS FacultyCount FROM Faculty GROUP BY Building ORDER BY FacultyCount DESC LIMIT 1", "source_tables": ["faculty"], "error_info": "Result not equal"}, {"sample_id": 6739, "db_id": "activity_1", "score": 0, "gold_sql": "SELECT building FROM Faculty WHERE rank = 'Professor' GROUP BY building HAVING COUNT(*) >= 10", "pred_sql": "SELECT Building FROM Faculty GROUP BY Building HAVING COUNT(FacID) >= 10", "source_tables": ["faculty"], "error_info": "Result not equal"}, {"sample_id": 6740, "db_id": "activity_1", "score": 0, "gold_sql": "SELECT building FROM Faculty WHERE rank = 'Professor' GROUP BY building HAVING COUNT(*) >= 10", "pred_sql": "SELECT Building FROM Faculty GROUP BY Building HAVING COUNT(FacID) >= 10", "source_tables": ["faculty"], "error_info": "Result not equal"}, {"sample_id": 6741, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT rank, COUNT(*) FROM Faculty GROUP BY rank", "pred_sql": "SELECT Rank, COUNT(*) AS Faculty_Count FROM Faculty GROUP BY Rank", "source_tables": ["faculty"], "error_info": ""}, {"sample_id": 6742, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT rank, COUNT(*) FROM Faculty GROUP BY rank", "pred_sql": "SELECT Rank, COUNT(FacID) AS Faculty_Count FROM Faculty GROUP BY Rank", "source_tables": ["faculty"], "error_info": ""}, {"sample_id": 6743, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT rank, sex, COUNT(*) FROM Faculty GROUP BY rank, sex", "pred_sql": "SELECT Rank, Sex, COUNT(*) AS Count FROM Faculty GROUP BY Rank, Sex", "source_tables": ["faculty"], "error_info": ""}, {"sample_id": 6744, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT rank, sex, COUNT(*) FROM Faculty GROUP BY rank, sex", "pred_sql": "SELECT Rank, Sex, COUNT(FacID) AS Faculty_Count FROM Faculty GROUP BY Rank, Sex", "source_tables": ["faculty"], "error_info": ""}, {"sample_id": 6745, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT rank FROM Faculty GROUP BY rank ORDER BY COUNT(*) ASC LIMIT 1", "pred_sql": "SELECT Rank FROM Faculty GROUP BY Rank ORDER BY COUNT(FacID) ASC LIMIT 1", "source_tables": ["faculty"], "error_info": ""}, {"sample_id": 6746, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT rank FROM Faculty GROUP BY rank ORDER BY COUNT(*) ASC LIMIT 1", "pred_sql": "SELECT Rank FROM Faculty GROUP BY Rank ORDER BY COUNT(FacID) ASC LIMIT 1", "source_tables": ["faculty"], "error_info": ""}, {"sample_id": 6747, "db_id": "activity_1", "score": 0, "gold_sql": "SELECT sex, COUNT(*) FROM Faculty WHERE rank = 'AsstProf' GROUP BY sex", "pred_sql": "SELECT Sex, COUNT(*) AS NumberOfProfessors FROM Faculty WHERE Rank = 'Assistant Professor' GROUP BY Sex", "source_tables": ["faculty"], "error_info": "Result not equal"}, {"sample_id": 6748, "db_id": "activity_1", "score": 0, "gold_sql": "SELECT sex, COUNT(*) FROM Faculty WHERE rank = 'AsstProf' GROUP BY sex", "pred_sql": "SELECT Sex, COUNT(*) AS Count FROM Faculty WHERE Rank = 'Assistant Professor' GROUP BY Sex", "source_tables": ["faculty"], "error_info": "Result not equal"}, {"sample_id": 6749, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT T1.fname, T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor WHERE T2.fname = 'Linda' AND T2.lname = 'Smith'", "pred_sql": "SELECT Fname, LName FROM Faculty WHERE FacID = (SELECT Advisor FROM Student WHERE LName = 'Smith' AND Fname = 'Linda')", "source_tables": ["faculty", "student"], "error_info": ""}, {"sample_id": 6750, "db_id": "activity_1", "score": 0, "gold_sql": "SELECT T1.fname, T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor WHERE T2.fname = 'Linda' AND T2.lname = 'Smith'", "pred_sql": "SELECT Advisor FROM Student WHERE Fname = 'Linda' AND LName = 'Smith'", "source_tables": ["faculty", "student"], "error_info": "Result not equal"}, {"sample_id": 6751, "db_id": "activity_1", "score": 0, "gold_sql": "SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor WHERE T1.rank = 'Professor'", "pred_sql": "SELECT DISTINCT Student.StuID FROM Student JOIN Faculty ON Student.Advisor = Faculty.FacID", "source_tables": ["faculty", "student"], "error_info": "Result not equal"}, {"sample_id": 6752, "db_id": "activity_1", "score": 0, "gold_sql": "SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor WHERE T1.rank = 'Professor'", "pred_sql": "SELECT Student.StuID FROM Student JOIN Faculty ON Student.Advisor = Faculty.FacID", "source_tables": ["faculty", "student"], "error_info": "Result not equal"}, {"sample_id": 6753, "db_id": "activity_1", "score": 0, "gold_sql": "SELECT T2.fname, T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor WHERE T1.fname = 'Michael' AND T1.lname = 'Goodrich'", "pred_sql": "SELECT Fname, LName FROM Student WHERE Advisor = (SELECT StuID FROM Faculty WHERE Fname = 'Michael' AND Lname = 'Goodrich')", "source_tables": ["faculty", "student"], "error_info": "Result not equal"}, {"sample_id": 6754, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT T2.fname, T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor WHERE T1.fname = 'Michael' AND T1.lname = 'Goodrich'", "pred_sql": "SELECT Fname, LName FROM Student WHERE Advisor = (SELECT FacID FROM Faculty WHERE Fname = 'Michael' AND Lname = 'Goodrich')", "source_tables": ["faculty", "student"], "error_info": ""}, {"sample_id": 6755, "db_id": "activity_1", "score": 0, "gold_sql": "SELECT T1.FacID, COUNT(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID", "pred_sql": "SELECT Faculty.FacID, COUNT(Student.Advisor) AS NumberOfStudentsAdvised FROM Faculty LEFT JOIN Student ON Faculty.FacID = Student.Advisor GROUP BY Faculty.FacID", "source_tables": ["faculty", "student"], "error_info": "Result not equal"}, {"sample_id": 6756, "db_id": "activity_1", "score": 0, "gold_sql": "SELECT T1.FacID, COUNT(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID", "pred_sql": "SELECT fp.FacID, COUNT(pi.stuid) AS student_count FROM Faculty_Participates_in AS fp LEFT JOIN Participates_in AS pi ON fp.actid = pi.actid GROUP BY fp.FacID", "source_tables": ["faculty", "student"], "error_info": "Result not equal"}, {"sample_id": 6757, "db_id": "activity_1", "score": 0, "gold_sql": "SELECT T1.rank, COUNT(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.rank", "pred_sql": "SELECT Faculty.Rank, COUNT(Student.Advisor) AS NumberOfStudentsAdvised FROM Faculty LEFT JOIN Student ON Faculty.FacID = Student.Advisor GROUP BY Faculty.Rank", "source_tables": ["faculty", "student"], "error_info": "Result not equal"}, {"sample_id": 6758, "db_id": "activity_1", "score": 0, "gold_sql": "SELECT T1.rank, COUNT(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.rank", "pred_sql": "SELECT f.Rank, COUNT(s.StuID) AS number_of_students FROM Faculty AS f LEFT JOIN Student AS s ON f.FacID = s.Advisor GROUP BY f.Rank", "source_tables": ["faculty", "student"], "error_info": "Result not equal"}, {"sample_id": 6759, "db_id": "activity_1", "score": 0, "gold_sql": "SELECT T1.fname, T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT F.Fname, F.Lname FROM Faculty AS F JOIN Faculty_Participates_in AS FPI ON F.FacID = FPI.FacID JOIN Participates_in AS PI ON FPI.actid = PI.actid JOIN Student AS S ON PI.stuid = S.StuID GROUP BY F.FacID ORDER BY COUNT(S.StuID) DESC LIMIT 1", "source_tables": ["faculty", "student"], "error_info": "Result not equal"}, {"sample_id": 6760, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT T1.fname, T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT F.Fname, F.Lname FROM Faculty AS F JOIN Student AS S ON F.FacID = S.Advisor GROUP BY F.FacID ORDER BY COUNT(S.StuID) DESC LIMIT 1", "source_tables": ["faculty", "student"], "error_info": ""}, {"sample_id": 6761, "db_id": "activity_1", "score": 0, "gold_sql": "SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID HAVING COUNT(*) >= 2", "pred_sql": "SELECT f.FacID FROM Faculty AS f JOIN Faculty_Participates_in AS fpi ON f.FacID = fpi.FacID JOIN Participates_in AS pi ON fpi.actid = pi.actid GROUP BY f.FacID HAVING COUNT(DISTINCT pi.stuid) >= 2", "source_tables": ["faculty", "student"], "error_info": "Result not equal"}, {"sample_id": 6762, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID HAVING COUNT(*) >= 2", "pred_sql": "SELECT Faculty.FacID FROM Faculty JOIN Student ON Faculty.FacID = Student.Advisor GROUP BY Faculty.FacID HAVING COUNT(Student.StuID) >= 2", "source_tables": ["faculty", "student"], "error_info": ""}, {"sample_id": 6763, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student", "pred_sql": "SELECT FacID FROM Faculty WHERE NOT FacID IN (SELECT Advisor FROM Student WHERE NOT Advisor IS NULL)", "source_tables": ["faculty", "student"], "error_info": ""}, {"sample_id": 6764, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student", "pred_sql": "SELECT FacID FROM Faculty WHERE NOT FacID IN (SELECT Advisor FROM Student WHERE NOT Advisor IS NULL)", "source_tables": ["faculty", "student"], "error_info": ""}, {"sample_id": 6765, "db_id": "activity_1", "score": 0, "gold_sql": "SELECT activity_name FROM Activity", "pred_sql": "SELECT * FROM Activity", "source_tables": ["activity"], "error_info": "Result not equal"}, {"sample_id": 6766, "db_id": "activity_1", "score": 0, "gold_sql": "SELECT activity_name FROM Activity", "pred_sql": "SELECT * FROM Activity", "source_tables": ["activity"], "error_info": "Result not equal"}, {"sample_id": 6767, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Activity", "pred_sql": "SELECT COUNT(*) AS total_activities FROM Activity", "source_tables": ["activity"], "error_info": ""}, {"sample_id": 6768, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Activity", "pred_sql": "SELECT COUNT(*) AS number_of_activities FROM Activity", "source_tables": ["activity"], "error_info": ""}, {"sample_id": 6769, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT FacID) FROM Faculty_participates_in", "pred_sql": "SELECT COUNT(DISTINCT FacID) AS FacultyCount FROM Faculty_Participates_in", "source_tables": ["faculty_participates_in"], "error_info": ""}, {"sample_id": 6770, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT FacID) FROM Faculty_participates_in", "pred_sql": "SELECT COUNT(DISTINCT FacID) AS number_of_faculty_members FROM Faculty_Participates_in", "source_tables": ["faculty_participates_in"], "error_info": ""}, {"sample_id": 6771, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in", "pred_sql": "SELECT FacID FROM Faculty WHERE NOT FacID IN (SELECT FacID FROM Faculty_Participates_in)", "source_tables": ["faculty", "faculty_participates_in"], "error_info": ""}, {"sample_id": 6772, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in", "pred_sql": "SELECT FacID FROM Faculty WHERE NOT FacID IN (SELECT FacID FROM Faculty_Participates_in)", "source_tables": ["faculty", "faculty_participates_in"], "error_info": ""}, {"sample_id": 6773, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student", "pred_sql": "SELECT DISTINCT Faculty.FacID FROM Faculty JOIN Faculty_Participates_in ON Faculty.FacID = Faculty_Participates_in.FacID JOIN Student ON Faculty.FacID = Student.Advisor", "source_tables": ["student", "faculty_participates_in"], "error_info": ""}, {"sample_id": 6774, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student", "pred_sql": "SELECT DISTINCT Faculty.FacID FROM Faculty JOIN Faculty_Participates_in ON Faculty.FacID = Faculty_Participates_in.FacID JOIN Student ON Faculty.FacID = Student.Advisor", "source_tables": ["student", "faculty_participates_in"], "error_info": ""}, {"sample_id": 6775, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT COUNT(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID WHERE T1.fname = 'Mark' AND T1.lname = 'Giuliano'", "pred_sql": "SELECT COUNT(DISTINCT Activity.actid) AS activity_count FROM Activity JOIN Faculty_Participates_in ON Activity.actid = Faculty_Participates_in.actid JOIN Faculty ON Faculty_Participates_in.FacID = Faculty.FacID WHERE Faculty.Fname = 'Mark' AND Faculty.Lname = 'Giuliano'", "source_tables": ["faculty", "faculty_participates_in"], "error_info": ""}, {"sample_id": 6776, "db_id": "activity_1", "score": 0, "gold_sql": "SELECT COUNT(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID WHERE T1.fname = 'Mark' AND T1.lname = 'Giuliano'", "pred_sql": "SELECT COUNT(DISTINCT a.actid) AS number_of_activities FROM Activity AS a JOIN Participates_in AS p ON a.actid = p.actid JOIN Student AS s ON p.stuid = s.StuID WHERE s.Fname = 'Mark' AND s.LName = 'Giuliano'", "source_tables": ["faculty", "faculty_participates_in"], "error_info": "Result not equal"}, {"sample_id": 6777, "db_id": "activity_1", "score": 0, "gold_sql": "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN Activity AS T3 ON T3.actid = T2.actid WHERE T1.fname = 'Mark' AND T1.lname = 'Giuliano'", "pred_sql": "SELECT Activity.activity_name FROM Activity JOIN Participates_in ON Activity.actid = Participates_in.actid JOIN Student ON Participates_in.stuid = Student.StuID WHERE Student.Fname = 'Mark' AND Student.LName = 'Giuliano'", "source_tables": ["activity", "faculty", "faculty_participates_in"], "error_info": "Result not equal"}, {"sample_id": 6778, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN Activity AS T3 ON T3.actid = T2.actid WHERE T1.fname = 'Mark' AND T1.lname = 'Giuliano'", "pred_sql": "SELECT Activity.activity_name FROM Activity JOIN Faculty_Participates_in ON Activity.actid = Faculty_Participates_in.actid JOIN Faculty ON Faculty_Participates_in.FacID = Faculty.FacID WHERE Faculty.Fname = 'Mark' AND Faculty.Lname = 'Giuliano'", "source_tables": ["activity", "faculty", "faculty_participates_in"], "error_info": ""}, {"sample_id": 6779, "db_id": "activity_1", "score": 0, "gold_sql": "SELECT T1.fname, T1.lname, COUNT(*), T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID", "pred_sql": "SELECT Faculty.Fname, Faculty.Lname, COUNT(Faculty_Participates_in.actid) AS activity_count FROM Faculty JOIN Faculty_Participates_in ON Faculty.FacID = Faculty_Participates_in.FacID GROUP BY Faculty.FacID", "source_tables": ["faculty", "faculty_participates_in"], "error_info": "Result not equal"}, {"sample_id": 6780, "db_id": "activity_1", "score": 0, "gold_sql": "SELECT T1.fname, T1.lname, COUNT(*), T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID", "pred_sql": "SELECT Faculty.Fname, Faculty.Lname, COUNT(Faculty_Participates_in.actid) AS activity_count FROM Faculty JOIN Faculty_Participates_in ON Faculty.FacID = Faculty_Participates_in.FacID GROUP BY Faculty.FacID HAVING COUNT(Faculty_Participates_in.actid) > 0", "source_tables": ["faculty", "faculty_participates_in"], "error_info": "Result not equal"}, {"sample_id": 6781, "db_id": "activity_1", "score": 0, "gold_sql": "SELECT T1.activity_name, COUNT(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID", "pred_sql": "SELECT Activity.activity_name, COUNT(Faculty_Participates_in.FacID) AS faculty_count FROM Activity LEFT JOIN Faculty_Participates_in ON Activity.actid = Faculty_Participates_in.actid GROUP BY Activity.activity_name", "source_tables": ["activity", "faculty_participates_in"], "error_info": "Result not equal"}, {"sample_id": 6782, "db_id": "activity_1", "score": 0, "gold_sql": "SELECT T1.activity_name, COUNT(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID", "pred_sql": "SELECT Activity.activity_name, COUNT(Faculty_Participates_in.FacID) AS faculty_count FROM Activity LEFT JOIN Faculty_Participates_in ON Activity.actid = Faculty_Participates_in.actid GROUP BY Activity.activity_name", "source_tables": ["activity", "faculty_participates_in"], "error_info": "Result not equal"}, {"sample_id": 6783, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT T1.fname, T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT F.Fname, F.Lname FROM Faculty AS F JOIN Faculty_Participates_in AS FP ON F.FacID = FP.FacID GROUP BY F.FacID ORDER BY COUNT(FP.actid) DESC LIMIT 1", "source_tables": ["faculty", "faculty_participates_in"], "error_info": ""}, {"sample_id": 6784, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT T1.fname, T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT F.Fname, F.Lname FROM Faculty AS F JOIN Faculty_Participates_in AS FP ON F.FacID = FP.FacID GROUP BY F.FacID ORDER BY COUNT(FP.actid) DESC LIMIT 1", "source_tables": ["faculty", "faculty_participates_in"], "error_info": ""}, {"sample_id": 6785, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT activity_name FROM Activity WHERE actid = (SELECT actid FROM Faculty_Participates_in GROUP BY actid ORDER BY COUNT(FacID) DESC LIMIT 1)", "source_tables": ["activity", "faculty_participates_in"], "error_info": ""}, {"sample_id": 6786, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Activity.activity_name FROM Activity JOIN Faculty_Participates_in ON Activity.actid = Faculty_Participates_in.actid GROUP BY Activity.activity_name ORDER BY COUNT(Faculty_Participates_in.FacID) DESC LIMIT 1", "source_tables": ["activity", "faculty_participates_in"], "error_info": ""}, {"sample_id": 6787, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in", "pred_sql": "SELECT StuID FROM Student WHERE NOT StuID IN (SELECT stuid FROM Participates_in)", "source_tables": ["student", "participates_in"], "error_info": ""}, {"sample_id": 6788, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in", "pred_sql": "SELECT StuID FROM Student WHERE NOT StuID IN (SELECT stuid FROM Participates_in)", "source_tables": ["student", "participates_in"], "error_info": ""}, {"sample_id": 6789, "db_id": "activity_1", "score": 0, "gold_sql": "SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age < 20", "pred_sql": "SELECT stuid FROM Participates_in WHERE stuid IN (SELECT StuID FROM Student WHERE Age < 20)", "source_tables": ["student", "participates_in"], "error_info": "Result not equal"}, {"sample_id": 6790, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age < 20", "pred_sql": "SELECT DISTINCT p.stuid FROM Participates_in AS p JOIN Student AS s ON p.stuid = s.StuID WHERE s.Age < 20", "source_tables": ["student", "participates_in"], "error_info": ""}, {"sample_id": 6791, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT T1.fname, T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT S.Fname, S.LName FROM Student AS S JOIN Participates_in AS P ON S.StuID = P.stuid GROUP BY S.StuID ORDER BY COUNT(P.actid) DESC LIMIT 1", "source_tables": ["student", "participates_in"], "error_info": ""}, {"sample_id": 6792, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT T1.fname, T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT S.Fname, S.LName FROM Student AS S JOIN Participates_in AS P ON S.StuID = P.stuid GROUP BY S.StuID ORDER BY COUNT(P.actid) DESC LIMIT 1", "source_tables": ["student", "participates_in"], "error_info": ""}, {"sample_id": 6793, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT activity_name FROM Activity WHERE actid = (SELECT actid FROM Participates_in GROUP BY actid ORDER BY COUNT(stuid) DESC LIMIT 1)", "source_tables": ["activity", "participates_in"], "error_info": ""}, {"sample_id": 6794, "db_id": "activity_1", "score": 1, "gold_sql": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT activity_name FROM Activity WHERE actid = (SELECT actid FROM Participates_in GROUP BY actid ORDER BY COUNT(stuid) DESC LIMIT 1)", "source_tables": ["activity", "participates_in"], "error_info": ""}, {"sample_id": 6795, "db_id": "activity_1", "score": 0, "gold_sql": "SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Canoeing' OR T3.activity_name = 'Kayaking'", "pred_sql": "SELECT Faculty.Fname FROM Faculty JOIN Faculty_Participates_in ON Faculty.FacID = Faculty_Participates_in.FacID JOIN Activity ON Faculty_Participates_in.actid = Activity.actid WHERE Activity.activity_name IN ('Canoeing', 'Kayaking')", "source_tables": ["activity", "faculty", "faculty_participates_in"], "error_info": "Result not equal"}, {"sample_id": 6796, "db_id": "activity_1", "score": 0, "gold_sql": "SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Canoeing' OR T3.activity_name = 'Kayaking'", "pred_sql": "SELECT Faculty.Fname FROM Faculty JOIN Faculty_Participates_in ON Faculty.FacID = Faculty_Participates_in.FacID JOIN Activity ON Faculty_Participates_in.actid = Activity.actid WHERE Activity.activity_name IN ('Canoeing', 'Kayaking')", "source_tables": ["activity", "faculty", "faculty_participates_in"], "error_info": "Result not equal"}, {"sample_id": 6797, "db_id": "activity_1", "score": 0, "gold_sql": "SELECT lname FROM faculty WHERE rank = 'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Canoeing' OR T3.activity_name = 'Kayaking'", "pred_sql": "SELECT Fname FROM Faculty WHERE NOT FacID IN (SELECT FacID FROM Faculty_Participates_in WHERE actid IN (SELECT actid FROM Activity WHERE activity_name IN ('Canoeing', 'Kayaking')))", "source_tables": ["activity", "faculty", "faculty_participates_in"], "error_info": "Result not equal"}, {"sample_id": 6798, "db_id": "activity_1", "score": 0, "gold_sql": "SELECT lname FROM faculty WHERE rank = 'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Canoeing' OR T3.activity_name = 'Kayaking'", "pred_sql": "SELECT Fname FROM Faculty WHERE NOT FacID IN (SELECT FacID FROM Faculty_Participates_in WHERE actid IN (SELECT actid FROM Activity WHERE activity_name IN ('Canoeing', 'Kayaking')))", "source_tables": ["activity", "faculty", "faculty_participates_in"], "error_info": "Result not equal"}, {"sample_id": 6799, "db_id": "activity_1", "score": 0, "gold_sql": "SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Kayaking'", "pred_sql": "SELECT Faculty.Fname FROM Faculty JOIN Faculty_Participates_in ON Faculty.FacID = Faculty_Participates_in.FacID JOIN Activity ON Faculty_Participates_in.actid = Activity.actid WHERE Activity.activity_name IN ('Canoeing', 'Kayaking')", "source_tables": ["activity", "faculty", "faculty_participates_in"], "error_info": "Result not equal"}, {"sample_id": 6800, "db_id": "activity_1", "score": 0, "gold_sql": "SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Kayaking'", "pred_sql": "SELECT DISTINCT f.Fname FROM Faculty AS f JOIN Faculty_Participates_in AS fpi ON f.FacID = fpi.FacID JOIN Activity AS a ON fpi.actid = a.actid WHERE a.activity_name IN ('Canoeing', 'Kayaking') GROUP BY f.Fname HAVING COUNT(DISTINCT a.activity_name) = 2", "source_tables": ["activity", "faculty", "faculty_participates_in"], "error_info": "Result not equal"}, {"sample_id": 6801, "db_id": "activity_1", "score": 0, "gold_sql": "SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid = T2.actid WHERE T2.activity_name = 'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid = T2.actid WHERE T2.activity_name = 'Kayaking'", "pred_sql": "SELECT p.stuid FROM Participates_in AS p JOIN Activity AS a ON p.actid = a.actid WHERE a.activity_name IN ('Canoeing', 'Kayaking')", "source_tables": ["activity", "participates_in"], "error_info": "Result not equal"}, {"sample_id": 6802, "db_id": "activity_1", "score": 0, "gold_sql": "SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid = T2.actid WHERE T2.activity_name = 'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid = T2.actid WHERE T2.activity_name = 'Kayaking'", "pred_sql": "SELECT p1.stuid FROM Participates_in AS p1 JOIN Activity AS a1 ON p1.actid = a1.actid WHERE a1.activity_name = 'Canoeing' INTERSECT SELECT p2.stuid FROM Participates_in AS p2 JOIN Activity AS a2 ON p2.actid = a2.actid WHERE a2.activity_name = 'Kayaking'", "source_tables": ["activity", "participates_in"], "error_info": "Result not equal"}, {"sample_id": 6803, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT name FROM airports WHERE city = 'Goroka'", "pred_sql": "SELECT name FROM airports WHERE city = 'Goroka'", "source_tables": ["airports"], "error_info": ""}, {"sample_id": 6804, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT name FROM airports WHERE city = 'Goroka'", "pred_sql": "SELECT name FROM airports WHERE city = 'Goroka'", "source_tables": ["airports"], "error_info": ""}, {"sample_id": 6805, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT name, city, country, elevation FROM airports WHERE city = 'New York'", "pred_sql": "SELECT name, city, country, elevation FROM airports WHERE city = 'New York'", "source_tables": ["airports"], "error_info": ""}, {"sample_id": 6806, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT name, city, country, elevation FROM airports WHERE city = 'New York'", "pred_sql": "SELECT name, city, country, elevation FROM airports WHERE city = 'New York'", "source_tables": ["airports"], "error_info": ""}, {"sample_id": 6807, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT COUNT(*) FROM airlines", "pred_sql": "SELECT COUNT(*) AS airline_count FROM airlines", "source_tables": ["airlines"], "error_info": ""}, {"sample_id": 6808, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT COUNT(*) FROM airlines", "pred_sql": "SELECT COUNT(*) AS total_airlines FROM airlines", "source_tables": ["airlines"], "error_info": ""}, {"sample_id": 6809, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT COUNT(*) FROM airlines WHERE country = 'Russia'", "pred_sql": "SELECT COUNT(DISTINCT a.alid) AS airline_count FROM airlines AS a WHERE a.country = 'Russia'", "source_tables": ["airlines"], "error_info": ""}, {"sample_id": 6810, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT COUNT(*) FROM airlines WHERE country = 'Russia'", "pred_sql": "SELECT COUNT(*) AS number_of_airlines FROM airlines WHERE country = 'Russia'", "source_tables": ["airlines"], "error_info": ""}, {"sample_id": 6811, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT MAX(elevation) FROM airports WHERE country = 'Iceland'", "pred_sql": "SELECT MAX(elevation) AS max_elevation FROM airports WHERE country = 'Iceland'", "source_tables": ["airports"], "error_info": ""}, {"sample_id": 6812, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT MAX(elevation) FROM airports WHERE country = 'Iceland'", "pred_sql": "SELECT MAX(elevation) AS highest_elevation FROM airports WHERE country = 'Iceland'", "source_tables": ["airports"], "error_info": ""}, {"sample_id": 6813, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT name FROM airports WHERE country = 'Cuba' OR country = 'Argentina'", "pred_sql": "SELECT name FROM airports WHERE country IN ('Cuba', 'Argentina')", "source_tables": ["airports"], "error_info": ""}, {"sample_id": 6814, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT name FROM airports WHERE country = 'Cuba' OR country = 'Argentina'", "pred_sql": "SELECT name FROM airports WHERE country IN ('Cuba', 'Argentina')", "source_tables": ["airports"], "error_info": ""}, {"sample_id": 6815, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT country FROM airlines WHERE name LIKE 'Orbit%'", "pred_sql": "SELECT airlines.country FROM airlines WHERE airlines.name LIKE 'Orbit%'", "source_tables": ["airlines"], "error_info": ""}, {"sample_id": 6816, "db_id": "flight_4", "score": 0, "gold_sql": "SELECT country FROM airlines WHERE name LIKE 'Orbit%'", "pred_sql": "SELECT DISTINCT airlines.country FROM airlines WHERE airlines.name LIKE 'Orbit%'", "source_tables": ["airlines"], "error_info": "Result not equal"}, {"sample_id": 6817, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50", "pred_sql": "SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50", "source_tables": ["airports"], "error_info": ""}, {"sample_id": 6818, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50", "pred_sql": "SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50", "source_tables": ["airports"], "error_info": ""}, {"sample_id": 6819, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT country FROM airports ORDER BY elevation DESC LIMIT 1", "pred_sql": "SELECT country FROM airports WHERE elevation = (SELECT MAX(elevation) FROM airports)", "source_tables": ["airports"], "error_info": ""}, {"sample_id": 6820, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT country FROM airports ORDER BY elevation DESC LIMIT 1", "pred_sql": "SELECT country FROM airports WHERE elevation = (SELECT MAX(elevation) FROM airports)", "source_tables": ["airports"], "error_info": ""}, {"sample_id": 6821, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT COUNT(*) FROM airports WHERE name LIKE '%International%'", "pred_sql": "SELECT COUNT(*) AS airport_count FROM airports WHERE name LIKE '%International%'", "source_tables": ["airports"], "error_info": ""}, {"sample_id": 6822, "db_id": "flight_4", "score": 0, "gold_sql": "SELECT COUNT(*) FROM airports WHERE name LIKE '%International%'", "pred_sql": "SELECT COUNT(name) AS airport_count FROM airports WHERE name LIKE '%Interanation%'", "source_tables": ["airports"], "error_info": "Result not equal"}, {"sample_id": 6823, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT city) FROM airports WHERE country = 'Greenland'", "pred_sql": "SELECT COUNT(DISTINCT city) AS different_cities FROM airports WHERE country = 'Greenland'", "source_tables": ["airports"], "error_info": ""}, {"sample_id": 6824, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT city) FROM airports WHERE country = 'Greenland'", "pred_sql": "SELECT COUNT(DISTINCT city) AS city_count FROM airports WHERE country = 'Greenland'", "source_tables": ["airports"], "error_info": ""}, {"sample_id": 6825, "db_id": "flight_4", "score": 0, "gold_sql": "SELECT COUNT(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid WHERE T1.name = 'American Airlines'", "pred_sql": "SELECT COUNT(*) AS number_of_routes FROM routes WHERE airline = 'American Airlines'", "source_tables": ["routes", "airlines"], "error_info": "Result not equal"}, {"sample_id": 6826, "db_id": "flight_4", "score": 0, "gold_sql": "SELECT COUNT(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid WHERE T1.name = 'American Airlines'", "pred_sql": "SELECT COUNT(*) AS route_count FROM routes WHERE airline = 'American Airlines'", "source_tables": ["routes", "airlines"], "error_info": "Result not equal"}, {"sample_id": 6827, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT COUNT(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid WHERE country = 'Canada'", "pred_sql": "SELECT COUNT(*) AS route_count FROM routes AS r JOIN airports AS a ON r.dst_apid = a.apid WHERE a.country = 'Canada'", "source_tables": ["airports", "routes"], "error_info": ""}, {"sample_id": 6828, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT COUNT(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid WHERE country = 'Canada'", "pred_sql": "SELECT COUNT(*) AS route_count FROM routes AS r JOIN airports AS a ON r.dst_apid = a.apid WHERE a.country = 'Canada'", "source_tables": ["airports", "routes"], "error_info": ""}, {"sample_id": 6829, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT name, city, country FROM airports ORDER BY elevation LIMIT 1", "pred_sql": "SELECT name, city, country FROM airports ORDER BY elevation ASC LIMIT 1", "source_tables": ["airports"], "error_info": ""}, {"sample_id": 6830, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT name, city, country FROM airports ORDER BY elevation LIMIT 1", "pred_sql": "SELECT name, city, country FROM airports ORDER BY elevation ASC LIMIT 1", "source_tables": ["airports"], "error_info": ""}, {"sample_id": 6831, "db_id": "flight_4", "score": 0, "gold_sql": "SELECT name, city, country FROM airports ORDER BY elevation DESC LIMIT 1", "pred_sql": "SELECT name, city, country FROM airports ORDER BY y DESC LIMIT 1", "source_tables": ["airports"], "error_info": "Result not equal"}, {"sample_id": 6832, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT name, city, country FROM airports ORDER BY elevation DESC LIMIT 1", "pred_sql": "SELECT name, city, country FROM airports WHERE elevation = (SELECT MAX(elevation) FROM airports)", "source_tables": ["airports"], "error_info": ""}, {"sample_id": 6833, "db_id": "flight_4", "score": 0, "gold_sql": "SELECT T1.name, T1.city, T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid GROUP BY T2.dst_apid ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT airports.name, airports.city FROM airports JOIN routes ON airports.apid = routes.dst_apid GROUP BY airports.apid ORDER BY COUNT(routes.rid) DESC LIMIT 1", "source_tables": ["airports", "routes"], "error_info": "Result not equal"}, {"sample_id": 6834, "db_id": "flight_4", "score": 0, "gold_sql": "SELECT T1.name, T1.city, T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid GROUP BY T2.dst_apid ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT airports.name, airports.city FROM airports JOIN routes ON airports.apid = routes.dst_apid GROUP BY airports.apid, airports.name, airports.city ORDER BY COUNT(routes.rid) DESC LIMIT 1", "source_tables": ["airports", "routes"], "error_info": "Result not equal"}, {"sample_id": 6835, "db_id": "flight_4", "score": 0, "gold_sql": "SELECT T1.name, T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid GROUP BY T2.alid ORDER BY COUNT(*) DESC LIMIT 10", "pred_sql": "SELECT airline, COUNT(*) AS route_count FROM routes GROUP BY airline ORDER BY route_count DESC LIMIT 10", "source_tables": ["routes", "airlines"], "error_info": "Result not equal"}, {"sample_id": 6836, "db_id": "flight_4", "score": 0, "gold_sql": "SELECT T1.name, T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid GROUP BY T2.alid ORDER BY COUNT(*) DESC LIMIT 10", "pred_sql": "SELECT airline, COUNT(rid) AS route_count FROM routes JOIN airlines ON routes.alid = airlines.alid GROUP BY routes.alid ORDER BY route_count DESC LIMIT 10", "source_tables": ["routes", "airlines"], "error_info": "Result not equal"}, {"sample_id": 6837, "db_id": "flight_4", "score": 0, "gold_sql": "SELECT T1.name, T1.city, T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid GROUP BY T2.src_apid ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT airports.name, airports.city FROM airports JOIN routes ON airports.apid = routes.src_apid GROUP BY airports.apid ORDER BY COUNT(routes.rid) DESC LIMIT 1", "source_tables": ["airports", "routes"], "error_info": "Result not equal"}, {"sample_id": 6838, "db_id": "flight_4", "score": 0, "gold_sql": "SELECT T1.name, T1.city, T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid GROUP BY T2.src_apid ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT airports.name, airports.city FROM airports JOIN routes ON airports.apid = routes.src_apid GROUP BY airports.apid ORDER BY COUNT(routes.rid) DESC LIMIT 1", "source_tables": ["airports", "routes"], "error_info": "Result not equal"}, {"sample_id": 6839, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid WHERE T1.name = 'American Airlines'", "pred_sql": "SELECT COUNT(DISTINCT dst_apid) AS num_dest_airports FROM routes WHERE alid = (SELECT alid FROM airlines WHERE name = 'American Airlines')", "source_tables": ["routes", "airlines"], "error_info": ""}, {"sample_id": 6840, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid WHERE T1.name = 'American Airlines'", "pred_sql": "SELECT COUNT(DISTINCT dst_apid) AS num_dest_airports FROM routes WHERE alid = (SELECT alid FROM airlines WHERE name = 'American Airlines')", "source_tables": ["routes", "airlines"], "error_info": ""}, {"sample_id": 6841, "db_id": "flight_4", "score": 0, "gold_sql": "SELECT country FROM airlines GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT country, COUNT(*) AS airline_count FROM airlines GROUP BY country ORDER BY airline_count DESC", "source_tables": ["airlines"], "error_info": "Result not equal"}, {"sample_id": 6842, "db_id": "flight_4", "score": 0, "gold_sql": "SELECT country FROM airlines GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT country, COUNT(*) AS airline_count FROM airlines WHERE active = 1 GROUP BY country ORDER BY airline_count DESC LIMIT 1", "source_tables": ["airlines"], "error_info": "Result not equal"}, {"sample_id": 6843, "db_id": "flight_4", "score": 0, "gold_sql": "SELECT country FROM airlines WHERE active = 'Y' GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT country, COUNT(*) AS airline_count FROM airlines WHERE active = 'Y' GROUP BY country ORDER BY airline_count DESC", "source_tables": ["airlines"], "error_info": "Result not equal"}, {"sample_id": 6844, "db_id": "flight_4", "score": 0, "gold_sql": "SELECT country FROM airlines WHERE active = 'Y' GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT country, COUNT(*) AS airline_count FROM airlines WHERE active = 'Y' GROUP BY country ORDER BY airline_count DESC", "source_tables": ["airlines"], "error_info": "Result not equal"}, {"sample_id": 6845, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT country, COUNT(*) FROM airlines GROUP BY country ORDER BY COUNT(*) DESC", "pred_sql": "SELECT country, COUNT(*) AS number_of_airlines FROM airlines GROUP BY country ORDER BY number_of_airlines DESC", "source_tables": ["airlines"], "error_info": ""}, {"sample_id": 6846, "db_id": "flight_4", "score": 0, "gold_sql": "SELECT country, COUNT(*) FROM airlines GROUP BY country ORDER BY COUNT(*) DESC", "pred_sql": "SELECT airlines.country, COUNT(DISTINCT airlines.alid) AS airline_count FROM airlines WHERE airlines.active = 1 GROUP BY airlines.country ORDER BY airline_count DESC", "source_tables": ["airlines"], "error_info": "Result not equal"}, {"sample_id": 6847, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT COUNT(*), country FROM airports GROUP BY country ORDER BY COUNT(*) DESC", "pred_sql": "SELECT country, COUNT(*) AS airport_count FROM airports GROUP BY country ORDER BY airport_count DESC", "source_tables": ["airports"], "error_info": ""}, {"sample_id": 6848, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT COUNT(*), country FROM airports GROUP BY country ORDER BY COUNT(*) DESC", "pred_sql": "SELECT country, COUNT(apid) AS airport_count FROM airports GROUP BY country ORDER BY airport_count DESC", "source_tables": ["airports"], "error_info": ""}, {"sample_id": 6849, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT COUNT(*), city FROM airports WHERE country = 'United States' GROUP BY city ORDER BY COUNT(*) DESC", "pred_sql": "SELECT city, COUNT(*) AS airport_count FROM airports WHERE country = 'United States' GROUP BY city ORDER BY airport_count DESC", "source_tables": ["airports"], "error_info": ""}, {"sample_id": 6850, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT COUNT(*), city FROM airports WHERE country = 'United States' GROUP BY city ORDER BY COUNT(*) DESC", "pred_sql": "SELECT city, COUNT(*) AS airport_count FROM airports WHERE country = 'United States' GROUP BY city ORDER BY airport_count DESC", "source_tables": ["airports"], "error_info": ""}, {"sample_id": 6851, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT city FROM airports WHERE country = 'United States' GROUP BY city HAVING COUNT(*) > 3", "pred_sql": "SELECT city FROM airports WHERE country = 'United States' GROUP BY city HAVING COUNT(apid) > 3", "source_tables": ["airports"], "error_info": ""}, {"sample_id": 6852, "db_id": "flight_4", "score": 0, "gold_sql": "SELECT city FROM airports WHERE country = 'United States' GROUP BY city HAVING COUNT(*) > 3", "pred_sql": "SELECT COUNT(DISTINCT city) AS city_count FROM airports WHERE country = 'United States' GROUP BY city HAVING COUNT(apid) > 3", "source_tables": ["airports"], "error_info": "Result not equal"}, {"sample_id": 6853, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT COUNT(*) FROM (SELECT city FROM airports GROUP BY city HAVING COUNT(*) > 3)", "pred_sql": "SELECT COUNT(DISTINCT city) AS city_count FROM airports WHERE apid IN (SELECT apid FROM airports GROUP BY city HAVING COUNT(apid) > 3)", "source_tables": ["airports"], "error_info": ""}, {"sample_id": 6854, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT COUNT(*) FROM (SELECT city FROM airports GROUP BY city HAVING COUNT(*) > 3)", "pred_sql": "SELECT COUNT(DISTINCT city) AS city_count FROM airports WHERE apid IN (SELECT apid FROM airports GROUP BY city HAVING COUNT(apid) > 3)", "source_tables": ["airports"], "error_info": ""}, {"sample_id": 6855, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT city, COUNT(*) FROM airports GROUP BY city HAVING COUNT(*) > 1", "pred_sql": "SELECT city, COUNT(*) AS number_of_airports FROM airports GROUP BY city HAVING COUNT(*) > 1", "source_tables": ["airports"], "error_info": ""}, {"sample_id": 6856, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT city, COUNT(*) FROM airports GROUP BY city HAVING COUNT(*) > 1", "pred_sql": "SELECT city, COUNT(*) AS airport_count FROM airports GROUP BY city HAVING COUNT(*) > 1", "source_tables": ["airports"], "error_info": ""}, {"sample_id": 6857, "db_id": "flight_4", "score": 0, "gold_sql": "SELECT city FROM airports GROUP BY city HAVING COUNT(*) > 2 ORDER BY COUNT(*)", "pred_sql": "SELECT city, COUNT(*) AS airport_count FROM airports GROUP BY city HAVING COUNT(*) > 2 ORDER BY airport_count DESC", "source_tables": ["airports"], "error_info": "Result not equal"}, {"sample_id": 6858, "db_id": "flight_4", "score": 0, "gold_sql": "SELECT city FROM airports GROUP BY city HAVING COUNT(*) > 2 ORDER BY COUNT(*)", "pred_sql": "SELECT city, COUNT(*) AS airport_count FROM airports GROUP BY city HAVING COUNT(*) > 2 ORDER BY airport_count DESC", "source_tables": ["airports"], "error_info": "Result not equal"}, {"sample_id": 6859, "db_id": "flight_4", "score": 0, "gold_sql": "SELECT COUNT(*), T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid GROUP BY T1.name", "pred_sql": "SELECT src_apid, src_ap, COUNT(rid) AS route_count FROM routes GROUP BY src_apid, src_ap", "source_tables": ["airports", "routes"], "error_info": "Result not equal"}, {"sample_id": 6860, "db_id": "flight_4", "score": 0, "gold_sql": "SELECT COUNT(*), T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid GROUP BY T1.name", "pred_sql": "SELECT src_ap, COUNT(rid) AS route_count FROM routes GROUP BY src_ap", "source_tables": ["airports", "routes"], "error_info": "Result not equal"}, {"sample_id": 6861, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT COUNT(*), T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid GROUP BY T1.name ORDER BY COUNT(*) DESC", "pred_sql": "SELECT airports.name AS airport_name, COUNT(routes.rid) AS number_of_routes FROM routes JOIN airports ON routes.src_apid = airports.apid GROUP BY airports.name ORDER BY number_of_routes DESC", "source_tables": ["airports", "routes"], "error_info": ""}, {"sample_id": 6862, "db_id": "flight_4", "score": 0, "gold_sql": "SELECT COUNT(*), T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid GROUP BY T1.name ORDER BY COUNT(*) DESC", "pred_sql": "SELECT src_ap, COUNT(rid) AS route_count FROM routes GROUP BY src_ap ORDER BY route_count DESC", "source_tables": ["airports", "routes"], "error_info": "Result not equal"}, {"sample_id": 6863, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT AVG(elevation), country FROM airports GROUP BY country", "pred_sql": "SELECT country, AVG(elevation) AS average_elevation FROM airports GROUP BY country", "source_tables": ["airports"], "error_info": ""}, {"sample_id": 6864, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT AVG(elevation), country FROM airports GROUP BY country", "pred_sql": "SELECT country, AVG(elevation) AS average_elevation FROM airports GROUP BY country", "source_tables": ["airports"], "error_info": ""}, {"sample_id": 6865, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT city FROM airports GROUP BY city HAVING COUNT(*) = 2", "pred_sql": "SELECT city FROM airports GROUP BY city HAVING COUNT(apid) = 2", "source_tables": ["airports"], "error_info": ""}, {"sample_id": 6866, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT city FROM airports GROUP BY city HAVING COUNT(*) = 2", "pred_sql": "SELECT city FROM airports GROUP BY city HAVING COUNT(apid) = 2", "source_tables": ["airports"], "error_info": ""}, {"sample_id": 6867, "db_id": "flight_4", "score": 0, "gold_sql": "SELECT T1.country, T1.name, COUNT(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid GROUP BY T1.country, T1.name", "pred_sql": "SELECT a.country, r.airline, COUNT(r.rid) AS route_count FROM routes AS r JOIN airlines AS a ON r.alid = a.alid GROUP BY a.country, r.airline", "source_tables": ["routes", "airlines"], "error_info": "Result not equal"}, {"sample_id": 6868, "db_id": "flight_4", "score": 0, "gold_sql": "SELECT T1.country, T1.name, COUNT(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid GROUP BY T1.country, T1.name", "pred_sql": "SELECT a.country, r.airline, COUNT(r.rid) AS total_routes FROM routes AS r JOIN airlines AS a ON r.alid = a.alid GROUP BY a.country, r.airline", "source_tables": ["routes", "airlines"], "error_info": "Result not equal"}, {"sample_id": 6869, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT COUNT(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid WHERE T2.country = 'Italy'", "pred_sql": "SELECT COUNT(*) AS route_count FROM routes AS r JOIN airports AS a ON r.dst_apid = a.apid WHERE a.country = 'Italy'", "source_tables": ["routes", "airports"], "error_info": ""}, {"sample_id": 6870, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT COUNT(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid WHERE T2.country = 'Italy'", "pred_sql": "SELECT COUNT(*) AS number_of_routes FROM routes AS r JOIN airports AS a ON r.dst_apid = a.apid WHERE a.country = 'Italy'", "source_tables": ["routes", "airports"], "error_info": ""}, {"sample_id": 6871, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT COUNT(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid JOIN airlines AS T3 ON T1.alid = T3.alid WHERE T2.country = 'Italy' AND T3.name = 'American Airlines'", "pred_sql": "SELECT COUNT(*) FROM routes AS r JOIN airlines AS a ON r.alid = a.alid JOIN airports AS ap ON r.dst_apid = ap.apid WHERE ap.country = 'Italy' AND a.name = 'American Airlines'", "source_tables": ["routes", "airlines", "airports"], "error_info": ""}, {"sample_id": 6872, "db_id": "flight_4", "score": 0, "gold_sql": "SELECT COUNT(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid JOIN airlines AS T3 ON T1.alid = T3.alid WHERE T2.country = 'Italy' AND T3.name = 'American Airlines'", "pred_sql": "SELECT COUNT(*) AS number_of_routes FROM routes AS r JOIN airlines AS a ON r.alid = a.alid WHERE a.name = 'American Airlines' AND r.dst_ap IN (SELECT apid FROM airports WHERE country = 'Italy')", "source_tables": ["routes", "airlines", "airports"], "error_info": "Result not equal"}, {"sample_id": 6873, "db_id": "flight_4", "score": 0, "gold_sql": "SELECT COUNT(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid WHERE T1.name = 'John F Kennedy International Airport'", "pred_sql": "SELECT COUNT(*) AS route_count FROM routes WHERE dst_ap = 'John F Kennedy International Airport'", "source_tables": ["airports", "routes"], "error_info": "Result not equal"}, {"sample_id": 6874, "db_id": "flight_4", "score": 0, "gold_sql": "SELECT COUNT(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid WHERE T1.name = 'John F Kennedy International Airport'", "pred_sql": "SELECT COUNT(*) AS route_count FROM routes WHERE dst_ap = 'John F Kennedy International Airport'", "source_tables": ["airports", "routes"], "error_info": "Result not equal"}, {"sample_id": 6875, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT COUNT(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country = 'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country = 'United States')", "pred_sql": "SELECT COUNT(*) AS route_count FROM routes AS r JOIN airports AS src ON r.src_apid = src.apid JOIN airports AS dst ON r.dst_apid = dst.apid WHERE src.country = 'United States' AND dst.country = 'Canada'", "source_tables": ["routes", "airports"], "error_info": ""}, {"sample_id": 6876, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT COUNT(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country = 'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country = 'United States')", "pred_sql": "SELECT COUNT(*) AS route_count FROM routes AS r JOIN airports AS src ON r.src_apid = src.apid JOIN airports AS dst ON r.dst_apid = dst.apid WHERE src.country = 'United States' AND dst.country = 'Canada'", "source_tables": ["routes", "airports"], "error_info": ""}, {"sample_id": 6877, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country = 'United States') AND src_apid IN (SELECT apid FROM airports WHERE country = 'United States')", "pred_sql": "SELECT rid FROM routes WHERE src_apid IN (SELECT apid FROM airports WHERE country = 'United States') AND dst_apid IN (SELECT apid FROM airports WHERE country = 'United States')", "source_tables": ["routes", "airports"], "error_info": ""}, {"sample_id": 6878, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country = 'United States') AND src_apid IN (SELECT apid FROM airports WHERE country = 'United States')", "pred_sql": "SELECT rid FROM routes WHERE src_apid IN (SELECT apid FROM airports WHERE country = 'United States') AND dst_apid IN (SELECT apid FROM airports WHERE country = 'United States')", "source_tables": ["routes", "airports"], "error_info": ""}, {"sample_id": 6879, "db_id": "flight_4", "score": 0, "gold_sql": "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid GROUP BY T1.name ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT airline, COUNT(*) AS route_count FROM routes GROUP BY airline ORDER BY route_count DESC LIMIT 1", "source_tables": ["routes", "airlines"], "error_info": "Result not equal"}, {"sample_id": 6880, "db_id": "flight_4", "score": 0, "gold_sql": "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid GROUP BY T1.name ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT airline FROM routes GROUP BY airline ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["routes", "airlines"], "error_info": "Result not equal"}, {"sample_id": 6881, "db_id": "flight_4", "score": 0, "gold_sql": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid WHERE T1.country = 'China' GROUP BY T1.name ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT src_apid, COUNT(rid) AS route_count FROM routes JOIN airports ON routes.src_apid = airports.apid WHERE airports.country = 'China' GROUP BY src_apid ORDER BY route_count DESC LIMIT 1", "source_tables": ["airports", "routes"], "error_info": "Result not equal"}, {"sample_id": 6882, "db_id": "flight_4", "score": 1, "gold_sql": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid WHERE T1.country = 'China' GROUP BY T1.name ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT airports.name FROM airports JOIN routes ON airports.apid = routes.src_apid WHERE airports.country = 'China' GROUP BY airports.apid ORDER BY COUNT(routes.rid) DESC LIMIT 1", "source_tables": ["airports", "routes"], "error_info": ""}, {"sample_id": 6883, "db_id": "flight_4", "score": 0, "gold_sql": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid WHERE T1.country = 'China' GROUP BY T1.name ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT dst_ap, COUNT(*) AS route_count FROM routes AS r JOIN airports AS a ON r.dst_apid = a.apid WHERE a.country = 'China' GROUP BY dst_ap ORDER BY route_count DESC LIMIT 1", "source_tables": ["airports", "routes"], "error_info": "Result not equal"}, {"sample_id": 6884, "db_id": "flight_4", "score": 0, "gold_sql": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid WHERE T1.country = 'China' GROUP BY T1.name ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT dst_ap FROM routes AS r JOIN airports AS a ON r.dst_apid = a.apid WHERE r.src_apid IN (SELECT apid FROM airports WHERE country = 'China') GROUP BY dst_ap ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["airports", "routes"], "error_info": "Result not equal"}, {"sample_id": 6885, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1", "pred_sql": "SELECT order_id FROM Orders ORDER BY date_order_placed DESC LIMIT 1", "source_tables": ["orders"], "error_info": ""}, {"sample_id": 6886, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1", "pred_sql": "SELECT order_id FROM Orders ORDER BY date_order_placed DESC LIMIT 1", "source_tables": ["orders"], "error_info": ""}, {"sample_id": 6887, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT order_id, customer_id FROM orders ORDER BY date_order_placed LIMIT 1", "pred_sql": "SELECT order_id, customer_id FROM Orders ORDER BY date_order_placed ASC LIMIT 1", "source_tables": ["orders"], "error_info": ""}, {"sample_id": 6888, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT order_id, customer_id FROM orders ORDER BY date_order_placed LIMIT 1", "pred_sql": "SELECT order_id, customer_id FROM Orders ORDER BY date_order_placed ASC LIMIT 1", "source_tables": ["orders"], "error_info": ""}, {"sample_id": 6889, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT order_id FROM shipments WHERE shipment_tracking_number = '3452'", "pred_sql": "SELECT Orders.order_id FROM Orders JOIN Shipments ON Orders.order_id = Shipments.order_id WHERE Shipments.shipment_tracking_number = '3452'", "source_tables": ["shipments"], "error_info": ""}, {"sample_id": 6890, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT order_id FROM shipments WHERE shipment_tracking_number = '3452'", "pred_sql": "SELECT Orders.order_id FROM Shipments JOIN Orders ON Shipments.order_id = Orders.order_id WHERE Shipments.shipment_tracking_number = '3452'", "source_tables": ["shipments"], "error_info": ""}, {"sample_id": 6891, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT order_item_id FROM order_items WHERE product_id = 11", "pred_sql": "SELECT order_item_id FROM Order_Items WHERE product_id = '11'", "source_tables": ["order_items"], "error_info": ""}, {"sample_id": 6892, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT order_item_id FROM order_items WHERE product_id = 11", "pred_sql": "SELECT order_item_id FROM Order_Items WHERE product_id = '11'", "source_tables": ["order_items"], "error_info": ""}, {"sample_id": 6893, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'Packing'", "pred_sql": "SELECT DISTINCT Customers.customer_name FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id WHERE Orders.order_status = 'Packing'", "source_tables": ["orders", "customers"], "error_info": ""}, {"sample_id": 6894, "db_id": "tracking_orders", "score": 0, "gold_sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'Packing'", "pred_sql": "SELECT Customers.customer_name FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id WHERE Orders.order_status = 'Packing'", "source_tables": ["orders", "customers"], "error_info": "Result not equal"}, {"sample_id": 6895, "db_id": "tracking_orders", "score": 0, "gold_sql": "SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'On Road'", "pred_sql": "SELECT DISTINCT Customers.* FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id WHERE Orders.order_status = 'On Road'", "source_tables": ["orders", "customers"], "error_info": "Result not equal"}, {"sample_id": 6896, "db_id": "tracking_orders", "score": 0, "gold_sql": "SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'On Road'", "pred_sql": "SELECT DISTINCT Customers.customer_id, Customers.customer_name, Customers.customer_details FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Order_Items ON Orders.order_id = Order_Items.order_id WHERE Orders.order_status = 'On Road'", "source_tables": ["orders", "customers"], "error_info": "Result not equal"}, {"sample_id": 6897, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT c.customer_name FROM Customers AS c JOIN Orders AS o ON c.customer_id = o.customer_id GROUP BY c.customer_id ORDER BY COUNT(o.order_id) DESC LIMIT 1", "source_tables": ["orders", "customers"], "error_info": ""}, {"sample_id": 6898, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT c.customer_name FROM Customers AS c JOIN Orders AS o ON c.customer_id = o.customer_id GROUP BY c.customer_id ORDER BY COUNT(o.order_id) DESC LIMIT 1", "source_tables": ["orders", "customers"], "error_info": ""}, {"sample_id": 6899, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT customer_id FROM Orders GROUP BY customer_id ORDER BY COUNT(order_id) DESC LIMIT 1", "source_tables": ["orders", "customers"], "error_info": ""}, {"sample_id": 6900, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT customer_id FROM Orders GROUP BY customer_id ORDER BY COUNT(order_id) DESC LIMIT 1", "source_tables": ["orders", "customers"], "error_info": ""}, {"sample_id": 6901, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT T2.order_id, T2.order_status FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = 'Jeramie'", "pred_sql": "SELECT Orders.order_id, Orders.order_status FROM Orders JOIN Customers ON Orders.customer_id = Customers.customer_id WHERE Customers.customer_name = 'Jeramie'", "source_tables": ["orders", "customers"], "error_info": ""}, {"sample_id": 6902, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT T2.order_id, T2.order_status FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = 'Jeramie'", "pred_sql": "SELECT order_id, order_status FROM Orders WHERE customer_id = (SELECT customer_id FROM Customers WHERE customer_name = 'Jeramie')", "source_tables": ["orders", "customers"], "error_info": ""}, {"sample_id": 6903, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = 'Jeramie'", "pred_sql": "SELECT Orders.date_order_placed FROM Orders JOIN Customers ON Orders.customer_id = Customers.customer_id WHERE Customers.customer_name = 'Jeramie'", "source_tables": ["orders", "customers"], "error_info": ""}, {"sample_id": 6904, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = 'Jeramie'", "pred_sql": "SELECT Orders.date_order_placed FROM Orders JOIN Customers ON Orders.customer_id = Customers.customer_id WHERE Customers.customer_name = 'Jeramie'", "source_tables": ["orders", "customers"], "error_info": ""}, {"sample_id": 6905, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= '2009-01-01' AND T2.date_order_placed <= '2010-01-01'", "pred_sql": "SELECT DISTINCT Customers.customer_name FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id WHERE Orders.date_order_placed BETWEEN '2009-01-01' AND '2010-01-01'", "source_tables": ["orders", "customers"], "error_info": ""}, {"sample_id": 6906, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= '2009-01-01' AND T2.date_order_placed <= '2010-01-01'", "pred_sql": "SELECT DISTINCT Customers.customer_name FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id WHERE Orders.date_order_placed BETWEEN '2009-01-01' AND '2010-01-01'", "source_tables": ["orders", "customers"], "error_info": ""}, {"sample_id": 6907, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= '1975-01-01' AND T1.date_order_placed <= '1976-01-01'", "pred_sql": "SELECT DISTINCT oi.product_id FROM Orders AS o JOIN Order_Items AS oi ON o.order_id = oi.order_id WHERE o.date_order_placed BETWEEN '1975-01-01' AND '1976-01-01'", "source_tables": ["orders", "order_items"], "error_info": ""}, {"sample_id": 6908, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= '1975-01-01' AND T1.date_order_placed <= '1976-01-01'", "pred_sql": "SELECT DISTINCT Products.product_id FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id JOIN Orders ON Order_Items.order_id = Orders.order_id WHERE Orders.date_order_placed BETWEEN '1975-01-01' AND '1976-01-01'", "source_tables": ["orders", "order_items"], "error_info": ""}, {"sample_id": 6909, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'On Road' INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'Shipped'", "pred_sql": "SELECT DISTINCT c.customer_name FROM Customers AS c JOIN Orders AS o ON c.customer_id = o.customer_id WHERE o.order_status IN ('On Road', 'Shipped') GROUP BY c.customer_id HAVING COUNT(DISTINCT o.order_status) = 2", "source_tables": ["orders", "customers"], "error_info": ""}, {"sample_id": 6910, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'On Road' INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'Shipped'", "pred_sql": "SELECT DISTINCT c.customer_name FROM Customers AS c JOIN Orders AS o ON c.customer_id = o.customer_id WHERE o.order_status IN ('On Road', 'Shipped') GROUP BY c.customer_id HAVING COUNT(DISTINCT o.order_status) = 2", "source_tables": ["orders", "customers"], "error_info": ""}, {"sample_id": 6911, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'On Road' INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'Shipped'", "pred_sql": "SELECT DISTINCT o.customer_id FROM Orders AS o WHERE o.order_status IN ('On Road', 'Shipped') GROUP BY o.customer_id HAVING COUNT(DISTINCT o.order_status) = 2", "source_tables": ["orders", "customers"], "error_info": ""}, {"sample_id": 6912, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'On Road' INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'Shipped'", "pred_sql": "SELECT DISTINCT c.customer_id FROM Customers AS c JOIN Orders AS o ON c.customer_id = o.customer_id WHERE o.order_status IN ('On Road', 'Shipped') GROUP BY c.customer_id HAVING COUNT(DISTINCT o.order_status) = 2", "source_tables": ["orders", "customers"], "error_info": ""}, {"sample_id": 6913, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452", "pred_sql": "SELECT Orders.date_order_placed FROM Orders JOIN Shipments ON Orders.order_id = Shipments.order_id WHERE Shipments.shipment_tracking_number = '3452'", "source_tables": ["shipments", "orders"], "error_info": ""}, {"sample_id": 6914, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452", "pred_sql": "SELECT Orders.date_order_placed FROM Orders JOIN Shipments ON Orders.order_id = Shipments.order_id WHERE Shipments.shipment_tracking_number = '3452'", "source_tables": ["shipments", "orders"], "error_info": ""}, {"sample_id": 6915, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10", "pred_sql": "SELECT date_order_placed FROM Orders WHERE order_id IN (SELECT order_id FROM Shipments WHERE invoice_number = 10)", "source_tables": ["shipments", "orders"], "error_info": ""}, {"sample_id": 6916, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10", "pred_sql": "SELECT date_order_placed FROM Orders WHERE order_id IN (SELECT order_id FROM Shipments WHERE invoice_number = 10)", "source_tables": ["shipments", "orders"], "error_info": ""}, {"sample_id": 6917, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT COUNT(*), T3.product_id FROM orders AS T1, order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id", "pred_sql": "SELECT Products.product_id, COUNT(Order_Items.order_item_id) AS product_count FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id JOIN Orders ON Order_Items.order_id = Orders.order_id GROUP BY Products.product_id", "source_tables": ["orders", "products", "order_items"], "error_info": ""}, {"sample_id": 6918, "db_id": "tracking_orders", "score": 0, "gold_sql": "SELECT COUNT(*), T3.product_id FROM orders AS T1, order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id", "pred_sql": "SELECT Products.product_id, COUNT(Order_Items.order_item_id) AS order_count FROM Products LEFT JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY Products.product_id", "source_tables": ["orders", "products", "order_items"], "error_info": "Result not equal"}, {"sample_id": 6919, "db_id": "tracking_orders", "score": 0, "gold_sql": "SELECT T3.product_name, COUNT(*) FROM orders AS T1, order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id", "pred_sql": "SELECT Products.product_name, COUNT(Order_Items.order_item_id) AS product_count FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id JOIN Orders ON Order_Items.order_id = Orders.order_id GROUP BY Products.product_name", "source_tables": ["orders", "products", "order_items"], "error_info": "Result not equal"}, {"sample_id": 6920, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT T3.product_name, COUNT(*) FROM orders AS T1, order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id", "pred_sql": "SELECT Products.product_name, COUNT(Order_Items.order_item_id) AS order_count FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY Products.product_id", "source_tables": ["orders", "products", "order_items"], "error_info": ""}, {"sample_id": 6921, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT order_id FROM shipments WHERE shipment_date > '2000-01-01'", "pred_sql": "SELECT DISTINCT Orders.order_id FROM Orders JOIN Shipments ON Orders.order_id = Shipments.order_id WHERE Shipments.shipment_date > '2000-01-01'", "source_tables": ["shipments"], "error_info": ""}, {"sample_id": 6922, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT order_id FROM shipments WHERE shipment_date > '2000-01-01'", "pred_sql": "SELECT order_id FROM Shipments WHERE shipment_date > '2000-01-01'", "source_tables": ["shipments"], "error_info": ""}, {"sample_id": 6923, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT order_id FROM shipments WHERE shipment_date = (SELECT MAX(shipment_date) FROM shipments)", "pred_sql": "SELECT order_id FROM Shipments ORDER BY shipment_date DESC LIMIT 1", "source_tables": ["shipments"], "error_info": ""}, {"sample_id": 6924, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT order_id FROM shipments WHERE shipment_date = (SELECT MAX(shipment_date) FROM shipments)", "pred_sql": "SELECT order_id FROM Shipments ORDER BY shipment_date DESC LIMIT 1", "source_tables": ["shipments"], "error_info": ""}, {"sample_id": 6925, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT DISTINCT product_name FROM products ORDER BY product_name", "pred_sql": "SELECT DISTINCT product_name FROM Products ORDER BY product_name ASC", "source_tables": ["products"], "error_info": ""}, {"sample_id": 6926, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT DISTINCT product_name FROM products ORDER BY product_name", "pred_sql": "SELECT DISTINCT product_name FROM Products ORDER BY product_name ASC", "source_tables": ["products"], "error_info": ""}, {"sample_id": 6927, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed", "pred_sql": "SELECT DISTINCT order_id FROM Orders ORDER BY date_order_placed", "source_tables": ["orders"], "error_info": ""}, {"sample_id": 6928, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed", "pred_sql": "SELECT DISTINCT order_id FROM Orders ORDER BY date_order_placed", "source_tables": ["orders"], "error_info": ""}, {"sample_id": 6929, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT order_id FROM Order_Items GROUP BY order_id ORDER BY COUNT(order_item_id) DESC LIMIT 1", "source_tables": ["orders", "order_items"], "error_info": ""}, {"sample_id": 6930, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT order_id FROM Order_Items GROUP BY order_id ORDER BY COUNT(order_item_id) DESC LIMIT 1", "source_tables": ["orders", "order_items"], "error_info": ""}, {"sample_id": 6931, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT c.customer_name FROM Customers AS c JOIN Orders AS o ON c.customer_id = o.customer_id GROUP BY c.customer_id ORDER BY COUNT(o.order_id) DESC LIMIT 1", "source_tables": ["orders", "customers"], "error_info": ""}, {"sample_id": 6932, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT c.customer_name FROM Customers AS c JOIN Orders AS o ON c.customer_id = o.customer_id GROUP BY c.customer_id ORDER BY COUNT(o.order_id) DESC LIMIT 1", "source_tables": ["orders", "customers"], "error_info": ""}, {"sample_id": 6933, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT invoice_number FROM invoices WHERE invoice_date < '1989-09-03' OR invoice_date > '2007-12-25'", "pred_sql": "SELECT invoice_number FROM Invoices WHERE invoice_date < '1989-09-03' OR invoice_date > '2007-12-25'", "source_tables": ["invoices"], "error_info": ""}, {"sample_id": 6934, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT invoice_number FROM invoices WHERE invoice_date < '1989-09-03' OR invoice_date > '2007-12-25'", "pred_sql": "SELECT invoice_number FROM Invoices WHERE invoice_date < '1989-09-03' OR invoice_date > '2007-12-25'", "source_tables": ["invoices"], "error_info": ""}, {"sample_id": 6935, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < '1989-09-03' OR invoice_date > '2007-12-25'", "pred_sql": "SELECT DISTINCT invoice_details FROM Invoices WHERE invoice_date < '1989-09-03' OR invoice_date > '2007-12-25'", "source_tables": ["invoices"], "error_info": ""}, {"sample_id": 6936, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < '1989-09-03' OR invoice_date > '2007-12-25'", "pred_sql": "SELECT DISTINCT invoice_details FROM Invoices WHERE invoice_date < '1989-09-03' OR invoice_date > '2007-12-25'", "source_tables": ["invoices"], "error_info": ""}, {"sample_id": 6937, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT T2.customer_name, COUNT(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING COUNT(*) >= 2", "pred_sql": "SELECT c.customer_name, COUNT(o.order_id) AS number_of_orders FROM Customers AS c JOIN Orders AS o ON c.customer_id = o.customer_id GROUP BY c.customer_id HAVING COUNT(o.order_id) >= 2", "source_tables": ["orders", "customers"], "error_info": ""}, {"sample_id": 6938, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT T2.customer_name, COUNT(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING COUNT(*) >= 2", "pred_sql": "SELECT c.customer_name, COUNT(o.order_id) AS number_of_orders FROM Customers AS c JOIN Orders AS o ON c.customer_id = o.customer_id GROUP BY c.customer_id HAVING COUNT(o.order_id) >= 2", "source_tables": ["orders", "customers"], "error_info": ""}, {"sample_id": 6939, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING COUNT(*) <= 2", "pred_sql": "SELECT customer_name FROM Customers WHERE customer_id IN (SELECT customer_id FROM Orders GROUP BY customer_id HAVING COUNT(order_id) <= 2)", "source_tables": ["orders", "customers"], "error_info": ""}, {"sample_id": 6940, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING COUNT(*) <= 2", "pred_sql": "SELECT customer_name FROM Customers WHERE customer_id IN (SELECT customer_id FROM Orders GROUP BY customer_id HAVING COUNT(order_id) <= 2)", "source_tables": ["orders", "customers"], "error_info": ""}, {"sample_id": 6941, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT T1.customer_name FROM customers AS T1, orders AS T2, order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = 'food' GROUP BY T1.customer_id HAVING COUNT(*) >= 1", "pred_sql": "SELECT DISTINCT Customers.customer_name FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id WHERE Products.product_name = 'food'", "source_tables": ["orders", "products", "customers", "order_items"], "error_info": ""}, {"sample_id": 6942, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT T1.customer_name FROM customers AS T1, orders AS T2, order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = 'food' GROUP BY T1.customer_id HAVING COUNT(*) >= 1", "pred_sql": "SELECT DISTINCT Customers.customer_name FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id WHERE Products.product_name = 'food'", "source_tables": ["orders", "products", "customers", "order_items"], "error_info": ""}, {"sample_id": 6943, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT T1.customer_name FROM customers AS T1, orders AS T2, order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = 'Cancel' AND T4.product_name = 'food' GROUP BY T1.customer_id HAVING COUNT(*) >= 1", "pred_sql": "SELECT DISTINCT Customers.customer_name FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id WHERE Order_Items.order_item_status = 'Cancel' AND Products.product_name = 'food'", "source_tables": ["orders", "products", "customers", "order_items"], "error_info": ""}, {"sample_id": 6944, "db_id": "tracking_orders", "score": 1, "gold_sql": "SELECT T1.customer_name FROM customers AS T1, orders AS T2, order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = 'Cancel' AND T4.product_name = 'food' GROUP BY T1.customer_id HAVING COUNT(*) >= 1", "pred_sql": "SELECT DISTINCT c.customer_name FROM Customers AS c JOIN Orders AS o ON c.customer_id = o.customer_id JOIN Order_Items AS oi ON o.order_id = oi.order_id JOIN Products AS p ON oi.product_id = p.product_id WHERE oi.order_item_status = 'Cancel' AND p.product_name = 'food'", "source_tables": ["orders", "products", "customers", "order_items"], "error_info": ""}, {"sample_id": 6945, "db_id": "architecture", "score": 1, "gold_sql": "SELECT COUNT(*) FROM architect WHERE gender = 'female'", "pred_sql": "SELECT COUNT(*) AS female_architects FROM architect WHERE gender = 'female'", "source_tables": ["architect"], "error_info": ""}, {"sample_id": 6946, "db_id": "architecture", "score": 1, "gold_sql": "SELECT name, nationality, id FROM architect WHERE gender = 'male' ORDER BY name", "pred_sql": "SELECT name, nationality, id FROM architect WHERE gender = 'male' ORDER BY name", "source_tables": ["architect"], "error_info": ""}, {"sample_id": 6947, "db_id": "architecture", "score": 0, "gold_sql": "SELECT MAX(T1.length_meters), T2.name FROM bridge AS T1 JOIN architect AS T2 ON T1.architect_id = T2.id", "pred_sql": "SELECT MAX(b.length_meters) AS max_length_meters, a.name AS architect_name FROM bridge AS b JOIN architect AS a ON b.architect_id = a.id GROUP BY a.name", "source_tables": ["architect", "bridge"], "error_info": "Result not equal"}, {"sample_id": 6948, "db_id": "architecture", "score": 1, "gold_sql": "SELECT AVG(length_feet) FROM bridge", "pred_sql": "SELECT AVG(length_feet) AS average_length_feet FROM bridge", "source_tables": ["bridge"], "error_info": ""}, {"sample_id": 6949, "db_id": "architecture", "score": 1, "gold_sql": "SELECT name, built_year FROM mill WHERE TYPE = 'Grondzeiler'", "pred_sql": "SELECT name, built_year FROM mill WHERE type = 'Grondzeiler'", "source_tables": ["mill"], "error_info": ""}, {"sample_id": 6950, "db_id": "architecture", "score": 1, "gold_sql": "SELECT DISTINCT T1.name, T1.nationality FROM architect AS T1 JOIN mill AS t2 ON T1.id = T2.architect_id", "pred_sql": "SELECT DISTINCT a.name, a.nationality FROM architect AS a JOIN mill AS m ON a.id = m.architect_id", "source_tables": ["architect", "mill"], "error_info": ""}, {"sample_id": 6951, "db_id": "architecture", "score": 1, "gold_sql": "SELECT name FROM mill WHERE LOCATION <> 'Donceel'", "pred_sql": "SELECT name FROM mill WHERE location <> 'Donceel'", "source_tables": ["mill"], "error_info": ""}, {"sample_id": 6952, "db_id": "architecture", "score": 1, "gold_sql": "SELECT DISTINCT T1.type FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id = T2.id WHERE T2.nationality = 'American' OR T2.nationality = 'Canadian'", "pred_sql": "SELECT DISTINCT type FROM mill JOIN architect ON mill.architect_id = architect.id WHERE architect.nationality IN ('American', 'Canadian')", "source_tables": ["architect", "mill"], "error_info": ""}, {"sample_id": 6953, "db_id": "architecture", "score": 1, "gold_sql": "SELECT T1.id, T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id GROUP BY T1.id HAVING COUNT(*) >= 3", "pred_sql": "SELECT architect.id, architect.name FROM architect JOIN bridge ON architect.id = bridge.architect_id GROUP BY architect.id, architect.name HAVING COUNT(bridge.id) >= 3", "source_tables": ["architect", "bridge"], "error_info": ""}, {"sample_id": 6954, "db_id": "architecture", "score": 1, "gold_sql": "SELECT T1.id, T1.name, T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id = T2.architect_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT a.id, a.name, a.nationality FROM architect AS a JOIN mill AS m ON a.id = m.architect_id GROUP BY a.id, a.name, a.nationality ORDER BY COUNT(m.id) DESC LIMIT 1", "source_tables": ["architect", "mill"], "error_info": ""}, {"sample_id": 6955, "db_id": "architecture", "score": 0, "gold_sql": "SELECT T1.id, T1.name, T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id GROUP BY T1.id HAVING COUNT(*) = 2 UNION SELECT T1.id, T1.name, T1.gender FROM architect AS T1 JOIN mill AS T2 ON T1.id = T2.architect_id GROUP BY T1.id HAVING COUNT(*) = 1", "pred_sql": "SELECT a.id, a.name, a.gender FROM architect AS a LEFT JOIN bridge AS b ON a.id = b.architect_id LEFT JOIN mill AS m ON a.id = m.architect_id GROUP BY a.id HAVING COUNT(DISTINCT b.id) >= 2 OR COUNT(DISTINCT m.id) >= 1", "source_tables": ["architect", "bridge", "mill"], "error_info": "Result not equal"}, {"sample_id": 6956, "db_id": "architecture", "score": 1, "gold_sql": "SELECT LOCATION FROM bridge WHERE name = 'Kolob Arch' OR name = 'Rainbow Bridge'", "pred_sql": "SELECT location FROM bridge WHERE name IN ('Kolob Arch', 'Rainbow Bridge')", "source_tables": ["bridge"], "error_info": ""}, {"sample_id": 6957, "db_id": "architecture", "score": 1, "gold_sql": "SELECT name FROM mill WHERE name LIKE '%Moulin%'", "pred_sql": "SELECT name FROM mill WHERE name LIKE '%Moulin%'", "source_tables": ["mill"], "error_info": ""}, {"sample_id": 6958, "db_id": "architecture", "score": 1, "gold_sql": "SELECT DISTINCT T1.name FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id = T2.id JOIN bridge AS T3 ON T3.architect_id = T2.id WHERE T3.length_meters > 80", "pred_sql": "SELECT DISTINCT m.name FROM mill AS m JOIN architect AS a ON m.architect_id = a.id JOIN bridge AS b ON a.id = b.architect_id WHERE b.length_meters > '80'", "source_tables": ["architect", "bridge", "mill"], "error_info": ""}, {"sample_id": 6959, "db_id": "architecture", "score": 1, "gold_sql": "SELECT TYPE, COUNT(*) FROM mill GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT type, COUNT(*) AS count FROM mill GROUP BY type ORDER BY count DESC LIMIT 1", "source_tables": ["mill"], "error_info": ""}, {"sample_id": 6960, "db_id": "architecture", "score": 1, "gold_sql": "SELECT COUNT(*) FROM architect WHERE NOT id IN (SELECT architect_id FROM mill WHERE built_year < 1850)", "pred_sql": "SELECT COUNT(DISTINCT a.id) AS architects_without_mills_before_1850 FROM architect AS a LEFT JOIN mill AS m ON a.id = m.architect_id AND m.built_year < '1850' WHERE m.id IS NULL", "source_tables": ["architect", "mill"], "error_info": ""}, {"sample_id": 6961, "db_id": "architecture", "score": 1, "gold_sql": "SELECT t1.name FROM bridge AS t1 JOIN architect AS t2 ON t1.architect_id = t2.id WHERE t2.nationality = 'American' ORDER BY t1.length_feet", "pred_sql": "SELECT bridge.name FROM bridge JOIN architect ON bridge.architect_id = architect.id WHERE architect.nationality = 'American' ORDER BY bridge.length_feet", "source_tables": ["architect", "bridge"], "error_info": ""}, {"sample_id": 6962, "db_id": "culture_company", "score": 1, "gold_sql": "SELECT COUNT(*) FROM book_club", "pred_sql": "SELECT COUNT(*) AS total_book_clubs FROM book_club", "source_tables": ["book_club"], "error_info": ""}, {"sample_id": 6963, "db_id": "culture_company", "score": 1, "gold_sql": "SELECT COUNT(*) FROM book_club", "pred_sql": "SELECT COUNT(*) AS number_of_book_clubs FROM book_club", "source_tables": ["book_club"], "error_info": ""}, {"sample_id": 6964, "db_id": "culture_company", "score": 1, "gold_sql": "SELECT book_title, author_or_editor FROM book_club WHERE YEAR > 1989", "pred_sql": "SELECT Book_Title, Author_or_Editor FROM book_club WHERE Year > '1989'", "source_tables": ["book_club"], "error_info": ""}, {"sample_id": 6965, "db_id": "culture_company", "score": 1, "gold_sql": "SELECT book_title, author_or_editor FROM book_club WHERE YEAR > 1989", "pred_sql": "SELECT Book_Title, Author_or_Editor FROM book_club WHERE Year > '1989'", "source_tables": ["book_club"], "error_info": ""}, {"sample_id": 6966, "db_id": "culture_company", "score": 1, "gold_sql": "SELECT DISTINCT publisher FROM book_club", "pred_sql": "SELECT DISTINCT Publisher FROM book_club", "source_tables": ["book_club"], "error_info": ""}, {"sample_id": 6967, "db_id": "culture_company", "score": 1, "gold_sql": "SELECT DISTINCT publisher FROM book_club", "pred_sql": "SELECT DISTINCT Publisher FROM book_club", "source_tables": ["book_club"], "error_info": ""}, {"sample_id": 6968, "db_id": "culture_company", "score": 1, "gold_sql": "SELECT YEAR, book_title, publisher FROM book_club ORDER BY YEAR DESC", "pred_sql": "SELECT Year, Book_Title, Publisher FROM book_club ORDER BY Year DESC", "source_tables": ["book_club"], "error_info": ""}, {"sample_id": 6969, "db_id": "culture_company", "score": 1, "gold_sql": "SELECT YEAR, book_title, publisher FROM book_club ORDER BY YEAR DESC", "pred_sql": "SELECT Year, Book_Title, Publisher FROM book_club ORDER BY Year DESC", "source_tables": ["book_club"], "error_info": ""}, {"sample_id": 6970, "db_id": "culture_company", "score": 1, "gold_sql": "SELECT publisher, COUNT(*) FROM book_club GROUP BY publisher", "pred_sql": "SELECT Publisher, COUNT(*) AS Number_of_Books FROM book_club GROUP BY Publisher", "source_tables": ["book_club"], "error_info": ""}, {"sample_id": 6971, "db_id": "culture_company", "score": 1, "gold_sql": "SELECT publisher, COUNT(*) FROM book_club GROUP BY publisher", "pred_sql": "SELECT Publisher, COUNT(*) AS Book_Count FROM book_club GROUP BY Publisher", "source_tables": ["book_club"], "error_info": ""}, {"sample_id": 6972, "db_id": "culture_company", "score": 0, "gold_sql": "SELECT publisher FROM book_club GROUP BY publisher ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Publisher, COUNT(*) AS Book_Count FROM book_club GROUP BY Publisher ORDER BY Book_Count DESC LIMIT 1", "source_tables": ["book_club"], "error_info": "Result not equal"}, {"sample_id": 6973, "db_id": "culture_company", "score": 1, "gold_sql": "SELECT publisher FROM book_club GROUP BY publisher ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Publisher FROM book_club GROUP BY Publisher ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["book_club"], "error_info": ""}, {"sample_id": 6974, "db_id": "culture_company", "score": 1, "gold_sql": "SELECT category, COUNT(*) FROM book_club GROUP BY category", "pred_sql": "SELECT Category, COUNT(*) AS Number_of_Books FROM book_club GROUP BY Category", "source_tables": ["book_club"], "error_info": ""}, {"sample_id": 6975, "db_id": "culture_company", "score": 1, "gold_sql": "SELECT category, COUNT(*) FROM book_club GROUP BY category", "pred_sql": "SELECT Category, COUNT(*) AS Book_Count FROM book_club GROUP BY Category", "source_tables": ["book_club"], "error_info": ""}, {"sample_id": 6976, "db_id": "culture_company", "score": 1, "gold_sql": "SELECT category FROM book_club WHERE YEAR > 1989 GROUP BY category HAVING COUNT(*) >= 2", "pred_sql": "SELECT Category FROM book_club WHERE Year > '1989' GROUP BY Category HAVING COUNT(Book_Title) >= 2", "source_tables": ["book_club"], "error_info": ""}, {"sample_id": 6977, "db_id": "culture_company", "score": 1, "gold_sql": "SELECT category FROM book_club WHERE YEAR > 1989 GROUP BY category HAVING COUNT(*) >= 2", "pred_sql": "SELECT Category FROM book_club WHERE Year > '1989' GROUP BY Category HAVING COUNT(*) >= 2", "source_tables": ["book_club"], "error_info": ""}, {"sample_id": 6978, "db_id": "culture_company", "score": 1, "gold_sql": "SELECT publisher FROM book_club WHERE YEAR = 1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR = 1990", "pred_sql": "SELECT DISTINCT Publisher FROM book_club WHERE Year IN ('1989', '1990') GROUP BY Publisher HAVING COUNT(DISTINCT Year) = 2", "source_tables": ["book_club"], "error_info": ""}, {"sample_id": 6979, "db_id": "culture_company", "score": 1, "gold_sql": "SELECT publisher FROM book_club WHERE YEAR = 1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR = 1990", "pred_sql": "SELECT DISTINCT Publisher FROM book_club WHERE Year IN ('1989', '1990') GROUP BY Publisher HAVING COUNT(DISTINCT Year) = 2", "source_tables": ["book_club"], "error_info": ""}, {"sample_id": 6980, "db_id": "culture_company", "score": 0, "gold_sql": "SELECT publisher FROM book_club EXCEPT SELECT publisher FROM book_club WHERE YEAR = 1989", "pred_sql": "SELECT DISTINCT Publisher FROM book_club WHERE NOT book_club_id IN (SELECT book_club_id FROM book_club WHERE Year = '1989')", "source_tables": ["book_club"], "error_info": "Result not equal"}, {"sample_id": 6981, "db_id": "culture_company", "score": 0, "gold_sql": "SELECT publisher FROM book_club EXCEPT SELECT publisher FROM book_club WHERE YEAR = 1989", "pred_sql": "SELECT DISTINCT Publisher FROM book_club WHERE Year <> '1989' OR Year IS NULL", "source_tables": ["book_club"], "error_info": "Result not equal"}, {"sample_id": 6982, "db_id": "culture_company", "score": 1, "gold_sql": "SELECT title, YEAR, director FROM movie ORDER BY budget_million", "pred_sql": "SELECT Title, Year, Director FROM movie ORDER BY Budget_million", "source_tables": ["movie"], "error_info": ""}, {"sample_id": 6983, "db_id": "culture_company", "score": 1, "gold_sql": "SELECT title, YEAR, director FROM movie ORDER BY budget_million", "pred_sql": "SELECT Title, Year, Director FROM movie ORDER BY Budget_million", "source_tables": ["movie"], "error_info": ""}, {"sample_id": 6984, "db_id": "culture_company", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT director) FROM movie", "pred_sql": "SELECT COUNT(DISTINCT Director) AS NumberOfDirectors FROM movie", "source_tables": ["movie"], "error_info": ""}, {"sample_id": 6985, "db_id": "culture_company", "score": 1, "gold_sql": "SELECT COUNT(DISTINCT director) FROM movie", "pred_sql": "SELECT COUNT(DISTINCT Director) AS different_directors FROM movie", "source_tables": ["movie"], "error_info": ""}, {"sample_id": 6986, "db_id": "culture_company", "score": 1, "gold_sql": "SELECT title, director FROM movie WHERE YEAR <= 2000 ORDER BY gross_worldwide DESC LIMIT 1", "pred_sql": "SELECT Title, Director FROM movie WHERE Year <= 2000 ORDER BY Gross_worldwide DESC LIMIT 1", "source_tables": ["movie"], "error_info": ""}, {"sample_id": 6987, "db_id": "culture_company", "score": 1, "gold_sql": "SELECT title, director FROM movie WHERE YEAR <= 2000 ORDER BY gross_worldwide DESC LIMIT 1", "pred_sql": "SELECT Title, Director FROM movie WHERE Year <= 2000 ORDER BY Gross_worldwide DESC LIMIT 1", "source_tables": ["movie"], "error_info": ""}, {"sample_id": 6988, "db_id": "culture_company", "score": 1, "gold_sql": "SELECT director FROM movie WHERE YEAR = 2000 INTERSECT SELECT director FROM movie WHERE YEAR = 1999", "pred_sql": "SELECT DISTINCT m1.Director FROM movie AS m1 JOIN movie AS m2 ON m1.Director = m2.Director WHERE m1.Year = 1999 AND m2.Year = 2000", "source_tables": ["movie"], "error_info": ""}, {"sample_id": 6989, "db_id": "culture_company", "score": 1, "gold_sql": "SELECT director FROM movie WHERE YEAR = 2000 INTERSECT SELECT director FROM movie WHERE YEAR = 1999", "pred_sql": "SELECT DISTINCT m1.Director FROM movie AS m1 JOIN movie AS m2 ON m1.Director = m2.Director WHERE m1.Year = 1999 AND m2.Year = 2000", "source_tables": ["movie"], "error_info": ""}, {"sample_id": 6990, "db_id": "culture_company", "score": 0, "gold_sql": "SELECT director FROM movie WHERE YEAR = 1999 OR YEAR = 2000", "pred_sql": "SELECT DISTINCT Director FROM movie WHERE Year IN (1999, 2000)", "source_tables": ["movie"], "error_info": "Result not equal"}, {"sample_id": 6991, "db_id": "culture_company", "score": 0, "gold_sql": "SELECT director FROM movie WHERE YEAR = 1999 OR YEAR = 2000", "pred_sql": "SELECT DISTINCT Director FROM movie WHERE Year IN (1999, 2000)", "source_tables": ["movie"], "error_info": "Result not equal"}, {"sample_id": 6992, "db_id": "culture_company", "score": 1, "gold_sql": "SELECT AVG(budget_million), MAX(budget_million), MIN(budget_million) FROM movie WHERE YEAR < 2000", "pred_sql": "SELECT AVG(Budget_million) AS average_budget, MAX(Budget_million) AS maximum_budget, MIN(Budget_million) AS minimum_budget FROM movie WHERE Year < 2000", "source_tables": ["movie"], "error_info": ""}, {"sample_id": 6993, "db_id": "culture_company", "score": 1, "gold_sql": "SELECT AVG(budget_million), MAX(budget_million), MIN(budget_million) FROM movie WHERE YEAR < 2000", "pred_sql": "SELECT AVG(Budget_million) AS average_budget, MAX(Budget_million) AS maximum_budget, MIN(Budget_million) AS minimum_budget FROM movie WHERE Year < 2000", "source_tables": ["movie"], "error_info": ""}, {"sample_id": 6994, "db_id": "culture_company", "score": 0, "gold_sql": "SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id = T2.book_club_id WHERE T2.publisher = 'Alyson'", "pred_sql": "SELECT DISTINCT culture_company.Company_name FROM culture_company JOIN book_club ON culture_company.book_club_id = book_club.book_club_id WHERE book_club.Author_or_Editor = 'Alyson'", "source_tables": ["culture_company", "book_club"], "error_info": "Result not equal"}, {"sample_id": 6995, "db_id": "culture_company", "score": 0, "gold_sql": "SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id = T2.book_club_id WHERE T2.publisher = 'Alyson'", "pred_sql": "SELECT DISTINCT culture_company.Company_name FROM culture_company JOIN book_club ON culture_company.book_club_id = book_club.book_club_id WHERE book_club.Author_or_Editor = 'Alyson'", "source_tables": ["culture_company", "book_club"], "error_info": "Result not equal"}, {"sample_id": 6996, "db_id": "culture_company", "score": 0, "gold_sql": "SELECT T1.title, T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id = T2.movie_id JOIN book_club AS T3 ON T3.book_club_id = T2.book_club_id WHERE T2.incorporated_in = 'China'", "pred_sql": "SELECT movie.Title AS Movie_Title, book_club.Book_Title AS Book_Title FROM culture_company JOIN movie ON culture_company.movie_id = movie.movie_id JOIN book_club ON culture_company.book_club_id = book_club.book_club_id WHERE culture_company.Company_name = 'China'", "source_tables": ["culture_company", "movie", "book_club"], "error_info": "Result not equal"}, {"sample_id": 6997, "db_id": "culture_company", "score": 1, "gold_sql": "SELECT T1.title, T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id = T2.movie_id JOIN book_club AS T3 ON T3.book_club_id = T2.book_club_id WHERE T2.incorporated_in = 'China'", "pred_sql": "SELECT movie.Title AS Movie_Title, book_club.Book_Title AS Book_Title FROM culture_company JOIN movie ON culture_company.movie_id = movie.movie_id JOIN book_club ON culture_company.book_club_id = book_club.book_club_id WHERE culture_company.Company_name IN (SELECT Company_name FROM culture_company WHERE Incorporated_in = 'China')", "source_tables": ["culture_company", "movie", "book_club"], "error_info": ""}, {"sample_id": 6998, "db_id": "culture_company", "score": 1, "gold_sql": "SELECT T2.company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id = T2.movie_id WHERE T1.year = 1999", "pred_sql": "SELECT culture_company.Company_name FROM culture_company JOIN movie ON culture_company.movie_id = movie.movie_id WHERE movie.Year = 1999", "source_tables": ["culture_company", "movie"], "error_info": ""}, {"sample_id": 6999, "db_id": "culture_company", "score": 1, "gold_sql": "SELECT T2.company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id = T2.movie_id WHERE T1.year = 1999", "pred_sql": "SELECT DISTINCT culture_company.Company_name FROM culture_company JOIN movie ON culture_company.movie_id = movie.movie_id WHERE movie.Year = 1999", "source_tables": ["culture_company", "movie"], "error_info": ""}]