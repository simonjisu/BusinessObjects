[{"sample_id": 0, "db_id": "concert_singer", "question": "How many singers do we have?", "score": 1, "gold_sql": "SELECT count(*) FROM singer", "pred_sql": "SELECT COUNT(*) AS total_singers FROM singer;", "source_tables": ["singer"], "error_info": ""}, {"sample_id": 1, "db_id": "concert_singer", "question": "What is the total number of singers?", "score": 1, "gold_sql": "SELECT count(*) FROM singer", "pred_sql": "SELECT COUNT(*) AS total_singers FROM singer;", "source_tables": ["singer"], "error_info": ""}, {"sample_id": 2, "db_id": "concert_singer", "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.", "score": 1, "gold_sql": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC", "pred_sql": "SELECT Name, Country, Age FROM singer ORDER BY Age DESC;", "source_tables": ["singer"], "error_info": ""}, {"sample_id": 3, "db_id": "concert_singer", "question": "What are the names, countries, and ages for every singer in descending order of age?", "score": 1, "gold_sql": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC", "pred_sql": "SELECT Name, Country, Age FROM singer ORDER BY Age DESC;", "source_tables": ["singer"], "error_info": ""}, {"sample_id": 4, "db_id": "concert_singer", "question": "What is the average, minimum, and maximum age of all singers from France?", "score": 1, "gold_sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "pred_sql": "SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singer WHERE Country = 'France';", "source_tables": ["singer"], "error_info": ""}, {"sample_id": 5, "db_id": "concert_singer", "question": "What is the average, minimum, and maximum age for all French singers?", "score": 1, "gold_sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "pred_sql": "SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singer WHERE Country = 'France';", "source_tables": ["singer"], "error_info": ""}, {"sample_id": 6, "db_id": "concert_singer", "question": "Show the name and the release year of the song by the youngest singer.", "score": 1, "gold_sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "pred_sql": "SELECT Song_Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);", "source_tables": ["singer"], "error_info": ""}, {"sample_id": 7, "db_id": "concert_singer", "question": "What are the names and release years for all the songs of the youngest singer?", "score": 1, "gold_sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "pred_sql": "SELECT Song_Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);", "source_tables": ["singer"], "error_info": ""}, {"sample_id": 8, "db_id": "concert_singer", "question": "What are all distinct countries where singers above age 20 are from?", "score": 1, "gold_sql": "SELECT DISTINCT country FROM singer WHERE age  >  20", "pred_sql": "SELECT DISTINCT Country FROM singer WHERE Age > 20;", "source_tables": ["singer"], "error_info": ""}, {"sample_id": 9, "db_id": "concert_singer", "question": "What are  the different countries with singers above age 20?", "score": 1, "gold_sql": "SELECT DISTINCT country FROM singer WHERE age  >  20", "pred_sql": "SELECT DISTINCT Country FROM singer WHERE Age > 20;", "source_tables": ["singer"], "error_info": ""}, {"sample_id": 10, "db_id": "concert_singer", "question": "Show all countries and the number of singers in each country.", "score": 1, "gold_sql": "SELECT country ,  count(*) FROM singer GROUP BY country", "pred_sql": "SELECT Country, COUNT(Singer_ID) AS Number_of_Singers FROM singer GROUP BY Country;", "source_tables": ["singer"], "error_info": ""}, {"sample_id": 11, "db_id": "concert_singer", "question": "How many singers are from each country?", "score": 1, "gold_sql": "SELECT country ,  count(*) FROM singer GROUP BY country", "pred_sql": "SELECT Country, COUNT(*) AS Number_of_Singers FROM singer GROUP BY Country;", "source_tables": ["singer"], "error_info": ""}, {"sample_id": 12, "db_id": "concert_singer", "question": "List all song names by singers above the average age.", "score": 1, "gold_sql": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)", "pred_sql": "SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer);", "source_tables": ["singer"], "error_info": ""}, {"sample_id": 13, "db_id": "concert_singer", "question": "What are all the song names by singers who are older than average?", "score": 1, "gold_sql": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)", "pred_sql": "SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer);", "source_tables": ["singer"], "error_info": ""}, {"sample_id": 14, "db_id": "concert_singer", "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "score": 1, "gold_sql": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "pred_sql": "SELECT Location, Name FROM stadium WHERE Capacity BETWEEN '5000' AND '10000';", "source_tables": ["stadium"], "error_info": ""}, {"sample_id": 15, "db_id": "concert_singer", "question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "score": 1, "gold_sql": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "pred_sql": "SELECT Location, Name FROM stadium WHERE Capacity BETWEEN '5000' AND '10000';", "source_tables": ["stadium"], "error_info": ""}, {"sample_id": 16, "db_id": "concert_singer", "question": "What is the maximum capacity and the average of all stadiums ?", "score": 0, "gold_sql": "select max(capacity), average from stadium", "pred_sql": "SELECT MAX(Capacity) AS Max_Capacity, AVG(Capacity) AS Average_Capacity FROM stadium;", "source_tables": ["stadium"], "error_info": "Result not equal"}, {"sample_id": 17, "db_id": "concert_singer", "question": "What is the average and maximum capacities for all stadiums ?", "score": 1, "gold_sql": "select avg(capacity) ,  max(capacity) from stadium", "pred_sql": "SELECT AVG(Capacity) AS Average_Capacity, MAX(Capacity) AS Maximum_Capacity FROM stadium;", "source_tables": ["stadium"], "error_info": ""}, {"sample_id": 18, "db_id": "concert_singer", "question": "What is the name and capacity for the stadium with highest average attendance?", "score": 1, "gold_sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "pred_sql": "SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium);", "source_tables": ["stadium"], "error_info": ""}, {"sample_id": 19, "db_id": "concert_singer", "question": "What is the name and capacity for the stadium with the highest average attendance?", "score": 1, "gold_sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "pred_sql": "SELECT Name, Capacity FROM stadium ORDER BY Average DESC LIMIT 1;", "source_tables": ["stadium"], "error_info": ""}, {"sample_id": 20, "db_id": "concert_singer", "question": "How many concerts are there in year 2014 or 2015?", "score": 1, "gold_sql": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015", "pred_sql": "SELECT COUNT(*) AS concert_count FROM concert WHERE Year IN ('2014', '2015');", "source_tables": ["concert"], "error_info": ""}, {"sample_id": 21, "db_id": "concert_singer", "question": "How many concerts occurred in 2014 or 2015?", "score": 1, "gold_sql": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015", "pred_sql": "SELECT COUNT(*) AS concert_count FROM concert WHERE Year IN ('2014', '2015');", "source_tables": ["concert"], "error_info": ""}, {"sample_id": 22, "db_id": "concert_singer", "question": "Show the stadium name and the number of concerts in each stadium.", "score": 0, "gold_sql": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id", "pred_sql": "SELECT s.Name AS Stadium_Name, COUNT(c.concert_ID) AS Number_of_Concerts\nFROM stadium s\nLEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID\nGROUP BY s.Stadium_ID, s.Name;", "source_tables": ["concert", "stadium"], "error_info": "Result not equal"}, {"sample_id": 23, "db_id": "concert_singer", "question": "For each stadium, how many concerts play there?", "score": 0, "gold_sql": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id", "pred_sql": "SELECT stadium.Name, COUNT(concert.concert_ID) AS concert_count \nFROM stadium \nLEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID \nGROUP BY stadium.Stadium_ID;", "source_tables": ["concert", "stadium"], "error_info": "Result not equal"}, {"sample_id": 24, "db_id": "concert_singer", "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.", "score": 1, "gold_sql": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT s.Name, s.Capacity \nFROM stadium s \nJOIN concert c ON s.Stadium_ID = c.Stadium_ID \nWHERE c.Year >= '2014' \nGROUP BY s.Stadium_ID \nORDER BY COUNT(c.concert_ID) DESC \nLIMIT 1;", "source_tables": ["concert", "stadium"], "error_info": ""}, {"sample_id": 25, "db_id": "concert_singer", "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?", "score": 1, "gold_sql": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1", "pred_sql": "SELECT s.Name, s.Capacity \nFROM stadium s \nJOIN concert c ON s.Stadium_ID = c.Stadium_ID \nWHERE c.Year > 2013 \nGROUP BY s.Stadium_ID \nORDER BY COUNT(c.concert_ID) DESC \nLIMIT 1;", "source_tables": ["concert", "stadium"], "error_info": ""}, {"sample_id": 26, "db_id": "concert_singer", "question": "Which year has most number of concerts?", "score": 0, "gold_sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT Year, COUNT(*) as concert_count FROM concert GROUP BY Year ORDER BY concert_count DESC LIMIT 1;", "source_tables": ["concert"], "error_info": "Result not equal"}, {"sample_id": 27, "db_id": "concert_singer", "question": "What is the year that had the most concerts?", "score": 0, "gold_sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT Year, COUNT(*) as concert_count FROM concert GROUP BY Year ORDER BY concert_count DESC LIMIT 1;", "source_tables": ["concert"], "error_info": "Result not equal"}, {"sample_id": 28, "db_id": "concert_singer", "question": "Show the stadium names without any concert.", "score": 1, "gold_sql": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)", "pred_sql": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)", "source_tables": ["concert", "stadium"], "error_info": ""}, {"sample_id": 29, "db_id": "concert_singer", "question": "What are the names of the stadiums without any concerts?", "score": 1, "gold_sql": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)", "pred_sql": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert);", "source_tables": ["concert", "stadium"], "error_info": ""}, {"sample_id": 30, "db_id": "concert_singer", "question": "Show countries where a singer above age 40 and a singer below 30 are from.", "score": 0, "gold_sql": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30", "pred_sql": "SELECT DISTINCT s1.Country FROM singer s1 JOIN singer s2 ON s1.Singer_ID != s2.Singer_ID WHERE s1.Age > 40 AND s2.Age < 30;", "source_tables": ["singer"], "error_info": "Result not equal"}, {"sample_id": 31, "db_id": "concert_singer", "question": "Show names for all stadiums except for stadiums having a concert in year 2014.", "score": 1, "gold_sql": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014", "pred_sql": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = '2014');", "source_tables": ["concert", "stadium"], "error_info": ""}, {"sample_id": 32, "db_id": "concert_singer", "question": "What are the names of all stadiums that did not have a concert in 2014?", "score": 1, "gold_sql": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014", "pred_sql": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = '2014');", "source_tables": ["concert", "stadium"], "error_info": ""}, {"sample_id": 33, "db_id": "concert_singer", "question": "Show the name and theme for all concerts and the number of singers in each concert.", "score": 1, "gold_sql": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id", "pred_sql": "SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) AS number_of_singers\nFROM concert\nLEFT JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID\nGROUP BY concert.concert_ID;", "source_tables": ["singer_in_concert", "concert"], "error_info": ""}, {"sample_id": 34, "db_id": "concert_singer", "question": "What are the names , themes , and number of singers for every concert ?", "score": 1, "gold_sql": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id", "pred_sql": "SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) AS number_of_singers\nFROM concert\nLEFT JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID\nGROUP BY concert.concert_ID;", "source_tables": ["singer_in_concert", "concert"], "error_info": ""}, {"sample_id": 35, "db_id": "concert_singer", "question": "List singer names and number of concerts for each singer.", "score": 0, "gold_sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id", "pred_sql": "SELECT s.Name, COUNT(sic.concert_ID) AS Number_of_Concerts\nFROM singer s\nLEFT JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID\nGROUP BY s.Singer_ID;", "source_tables": ["singer_in_concert", "singer"], "error_info": "Result not equal"}, {"sample_id": 36, "db_id": "concert_singer", "question": "What are the names of the singers and number of concerts for each person?", "score": 0, "gold_sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id", "pred_sql": "SELECT singer.Name, COUNT(concert.concert_ID) AS Number_of_Concerts\nFROM singer\nLEFT JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID\nLEFT JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID\nGROUP BY singer.Name;", "source_tables": ["singer_in_concert", "singer"], "error_info": "Result not equal"}, {"sample_id": 37, "db_id": "concert_singer", "question": "List all singer names in concerts in year 2014.", "score": 1, "gold_sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "pred_sql": "SELECT singer.Name FROM singer INNER JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID INNER JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = '2014';", "source_tables": ["singer_in_concert", "singer", "concert"], "error_info": ""}, {"sample_id": 38, "db_id": "concert_singer", "question": "What are the names of the singers who performed in a concert in 2014?", "score": 0, "gold_sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "pred_sql": "SELECT DISTINCT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = '2014';", "source_tables": ["singer_in_concert", "singer", "concert"], "error_info": "Result not equal"}, {"sample_id": 39, "db_id": "concert_singer", "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "score": 1, "gold_sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "pred_sql": "SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%';", "source_tables": ["singer"], "error_info": ""}, {"sample_id": 40, "db_id": "concert_singer", "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "score": 1, "gold_sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "pred_sql": "SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%';", "source_tables": ["singer"], "error_info": ""}, {"sample_id": 41, "db_id": "concert_singer", "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.", "score": 1, "gold_sql": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015", "pred_sql": "SELECT DISTINCT s.Name, s.Location \nFROM stadium s \nJOIN concert c ON s.Stadium_ID = c.Stadium_ID \nWHERE c.Year IN ('2014', '2015') \nGROUP BY s.Stadium_ID \nHAVING COUNT(DISTINCT c.Year) = 2;", "source_tables": ["concert", "stadium"], "error_info": ""}, {"sample_id": 42, "db_id": "concert_singer", "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?", "score": 1, "gold_sql": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015", "pred_sql": "SELECT DISTINCT s.Name, s.Location \nFROM stadium s \nJOIN concert c ON s.Stadium_ID = c.Stadium_ID \nWHERE c.Year IN ('2014', '2015') \nGROUP BY s.Stadium_ID \nHAVING COUNT(DISTINCT c.Year) = 2;", "source_tables": ["concert", "stadium"], "error_info": ""}, {"sample_id": 43, "db_id": "concert_singer", "question": "Find the number of concerts happened in the stadium with the highest capacity .", "score": 1, "gold_sql": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)", "pred_sql": "SELECT COUNT(*) AS NumberOfConcerts\nFROM concert\nWHERE Stadium_ID = (\n    SELECT Stadium_ID\n    FROM stadium\n    ORDER BY Capacity DESC\n    LIMIT 1\n)", "source_tables": ["concert", "stadium"], "error_info": ""}, {"sample_id": 44, "db_id": "concert_singer", "question": "What are the number of concerts that occurred in the stadium with the largest capacity ?", "score": 1, "gold_sql": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)", "pred_sql": "SELECT COUNT(concert.concert_ID) AS Number_of_Concerts\nFROM concert\nJOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID\nWHERE stadium.Capacity = (SELECT MAX(Capacity) FROM stadium);", "source_tables": ["concert", "stadium"], "error_info": ""}, {"sample_id": 45, "db_id": "pets_1", "question": "Find the number of pets whose weight is heavier than 10.", "score": 1, "gold_sql": "SELECT count(*) FROM pets WHERE weight  >  10", "pred_sql": "SELECT COUNT(*) AS NumberOfPets FROM Pets WHERE weight > '10';", "source_tables": ["pets"], "error_info": ""}, {"sample_id": 46, "db_id": "pets_1", "question": "How many pets have a greater weight than 10?", "score": 1, "gold_sql": "SELECT count(*) FROM pets WHERE weight  >  10", "pred_sql": "SELECT COUNT(*) AS PetCount FROM Pets WHERE weight > 10;", "source_tables": ["pets"], "error_info": ""}, {"sample_id": 47, "db_id": "pets_1", "question": "Find the weight of the youngest dog.", "score": 0, "gold_sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "pred_sql": "SELECT weight FROM Pets WHERE PetType = 'dog' AND PetID IN (SELECT PetID FROM Has_Pet WHERE StuID IN (SELECT StuID FROM Student ORDER BY Age ASC LIMIT 1))", "source_tables": ["pets"], "error_info": "Result not equal"}, {"sample_id": 48, "db_id": "pets_1", "question": "How much does the youngest dog weigh?", "score": 0, "gold_sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "pred_sql": "SELECT weight FROM Pets WHERE PetType = 'dog' AND PetID IN (SELECT PetID FROM Has_Pet WHERE StuID IN (SELECT StuID FROM Student ORDER BY Age ASC LIMIT 1))", "source_tables": ["pets"], "error_info": "Result not equal"}, {"sample_id": 49, "db_id": "pets_1", "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.", "score": 1, "gold_sql": "SELECT max(weight) ,  petType FROM pets GROUP BY petType", "pred_sql": "SELECT PetType, MAX(weight) AS MaxWeight FROM Pets GROUP BY PetType;", "source_tables": ["pets"], "error_info": ""}, {"sample_id": 50, "db_id": "pets_1", "question": "List the maximum weight and type for each type of pet.", "score": 1, "gold_sql": "SELECT max(weight) ,  petType FROM pets GROUP BY petType", "pred_sql": "SELECT PetType, MAX(weight) AS MaxWeight FROM Pets GROUP BY PetType;", "source_tables": ["pets"], "error_info": ""}, {"sample_id": 51, "db_id": "pets_1", "question": "Find number of pets owned by students who are older than 20.", "score": 1, "gold_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "pred_sql": "SELECT COUNT(Has_Pet.PetID) AS NumberOfPets\nFROM Student\nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nWHERE Student.Age > '20';", "source_tables": ["student", "has_pet"], "error_info": ""}, {"sample_id": 52, "db_id": "pets_1", "question": "How many pets are owned by students that have an age greater than 20?", "score": 1, "gold_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "pred_sql": "SELECT COUNT(*) AS NumberOfPets FROM Has_Pet WHERE StuID IN (SELECT StuID FROM Student WHERE Age > '20');", "source_tables": ["student", "has_pet"], "error_info": ""}, {"sample_id": 53, "db_id": "pets_1", "question": "Find the number of dog pets that are raised by female students (with sex F).", "score": 1, "gold_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "pred_sql": "SELECT COUNT(*) AS NumberOfDogs\nFROM Has_Pet HP\nJOIN Pets P ON HP.PetID = P.PetID\nJOIN Student S ON HP.StuID = S.StuID\nWHERE P.PetType = 'dog' AND S.Sex = 'F';", "source_tables": ["pets", "student", "has_pet"], "error_info": ""}, {"sample_id": 54, "db_id": "pets_1", "question": "How many dog pets are raised by female students?", "score": 0, "gold_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "pred_sql": "SELECT COUNT(*) AS DogCount FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID JOIN Student S ON HP.StuID = S.StuID WHERE P.PetType = 'dog' AND S.Sex = 'female';", "source_tables": ["pets", "student", "has_pet"], "error_info": "Result not equal"}, {"sample_id": 55, "db_id": "pets_1", "question": "Find the number of distinct type of pets.", "score": 1, "gold_sql": "SELECT count(DISTINCT pettype) FROM pets", "pred_sql": "SELECT COUNT(DISTINCT PetType) AS distinct_pet_types FROM Pets;", "source_tables": ["pets"], "error_info": ""}, {"sample_id": 56, "db_id": "pets_1", "question": "How many different types of pet are there?", "score": 1, "gold_sql": "SELECT count(DISTINCT pettype) FROM pets", "pred_sql": "SELECT COUNT(DISTINCT PetType) AS DifferentPetTypes FROM Pets;", "source_tables": ["pets"], "error_info": ""}, {"sample_id": 57, "db_id": "pets_1", "question": "Find the first name of students who have cat or dog pet.", "score": 0, "gold_sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'", "pred_sql": "SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog');", "source_tables": ["pets", "student", "has_pet"], "error_info": "Result not equal"}, {"sample_id": 58, "db_id": "pets_1", "question": "What are the first names of every student who has a cat or dog as a pet?", "score": 0, "gold_sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'", "pred_sql": "SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog');", "source_tables": ["pets", "student", "has_pet"], "error_info": "Result not equal"}, {"sample_id": 59, "db_id": "pets_1", "question": "Find the first name of students who have both cat and dog pets .", "score": 1, "gold_sql": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'", "pred_sql": "SELECT DISTINCT S.Fname \nFROM Student S \nJOIN Has_Pet HP1 ON S.StuID = HP1.StuID \nJOIN Pets P1 ON HP1.PetID = P1.PetID \nJOIN Has_Pet HP2 ON S.StuID = HP2.StuID \nJOIN Pets P2 ON HP2.PetID = P2.PetID \nWHERE P1.PetType = 'cat' AND P2.PetType = 'dog';", "source_tables": ["pets", "student", "has_pet"], "error_info": ""}, {"sample_id": 60, "db_id": "pets_1", "question": "What are the students' first names who have both cats and dogs as pets?", "score": 1, "gold_sql": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'", "pred_sql": "SELECT DISTINCT s.Fname \nFROM Student s \nJOIN Has_Pet hp ON s.StuID = hp.StuID \nJOIN Pets p ON hp.PetID = p.PetID \nWHERE p.PetType IN ('cat', 'dog') \nGROUP BY s.StuID \nHAVING COUNT(DISTINCT p.PetType) = 2;", "source_tables": ["pets", "student", "has_pet"], "error_info": ""}, {"sample_id": 61, "db_id": "pets_1", "question": "Find the major and age of students who do not have a cat pet.", "score": 0, "gold_sql": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "pred_sql": "SELECT Student.Major, Student.Age FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IS NULL OR Pets.PetType != 'cat';", "source_tables": ["pets", "student", "has_pet"], "error_info": "Result not equal"}, {"sample_id": 62, "db_id": "pets_1", "question": "What major is every student who does not own a cat as a pet, and also how old are they?", "score": 0, "gold_sql": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "pred_sql": "SELECT Student.Major, Student.Age FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType != 'cat' OR Pets.PetType IS NULL;", "source_tables": ["pets", "student", "has_pet"], "error_info": "Result not equal"}, {"sample_id": 63, "db_id": "pets_1", "question": "Find the id of students who do not have a cat pet.", "score": 0, "gold_sql": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'", "pred_sql": "SELECT Student.StuID FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType != 'cat' OR Pets.PetType IS NULL;", "source_tables": ["pets", "student", "has_pet"], "error_info": "Result not equal"}, {"sample_id": 64, "db_id": "pets_1", "question": "What are the ids of the students who do not own cats as pets?", "score": 1, "gold_sql": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'", "pred_sql": "SELECT Student.StuID FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat');", "source_tables": ["pets", "student", "has_pet"], "error_info": ""}, {"sample_id": 65, "db_id": "pets_1", "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.", "score": 1, "gold_sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "pred_sql": "SELECT S.Fname, S.Age \nFROM Student S \nJOIN Has_Pet HP ON S.StuID = HP.StuID \nJOIN Pets P ON HP.PetID = P.PetID \nWHERE P.PetType = 'dog' \nAND S.StuID NOT IN (\n    SELECT HP2.StuID \n    FROM Has_Pet HP2 \n    JOIN Pets P2 ON HP2.PetID = P2.PetID \n    WHERE P2.PetType = 'cat'\n);", "source_tables": ["pets", "student", "has_pet"], "error_info": ""}, {"sample_id": 66, "db_id": "pets_1", "question": "What is the first name of every student who has a dog but does not have a cat?", "score": 0, "gold_sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "pred_sql": "SELECT DISTINCT Student.Fname \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Pets.PetType = 'dog' \nAND Student.StuID NOT IN (\n    SELECT Has_Pet.StuID \n    FROM Has_Pet \n    JOIN Pets ON Has_Pet.PetID = Pets.PetID \n    WHERE Pets.PetType = 'cat'\n);", "source_tables": ["pets", "student", "has_pet"], "error_info": "Result not equal"}, {"sample_id": 67, "db_id": "pets_1", "question": "Find the type and weight of the youngest pet.", "score": 0, "gold_sql": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "pred_sql": "SELECT PetType, weight FROM Pets WHERE PetID = (SELECT PetID FROM Has_Pet WHERE StuID = (SELECT StuID FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet) ORDER BY (SELECT pet_age FROM Pets WHERE Pets.PetID = Has_Pet.PetID) ASC LIMIT 1) LIMIT 1) LIMIT 1;", "source_tables": ["pets"], "error_info": "Predction Execution Error:no such column: Has_Pet.PetID"}, {"sample_id": 68, "db_id": "pets_1", "question": "What type of pet is the youngest animal, and how much does it weigh?", "score": 1, "gold_sql": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "pred_sql": "SELECT Pets.PetType, Pets.weight FROM Pets ORDER BY Pets.pet_age ASC LIMIT 1;", "source_tables": ["pets"], "error_info": ""}, {"sample_id": 69, "db_id": "pets_1", "question": "Find the id and weight of all pets whose age is older than 1.", "score": 1, "gold_sql": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "pred_sql": "SELECT PetID, weight FROM Pets WHERE pet_age > '1';", "source_tables": ["pets"], "error_info": ""}, {"sample_id": 70, "db_id": "pets_1", "question": "What is the id and weight of every pet who is older than 1?", "score": 1, "gold_sql": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "pred_sql": "SELECT PetID, weight FROM Pets WHERE pet_age > '1';", "source_tables": ["pets"], "error_info": ""}, {"sample_id": 71, "db_id": "pets_1", "question": "Find the average and maximum age for each type of pet.", "score": 1, "gold_sql": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype", "pred_sql": "SELECT Pets.PetType, AVG(CAST(Pets.pet_age AS INTEGER)) AS AverageAge, MAX(CAST(Pets.pet_age AS INTEGER)) AS MaxAge\nFROM Pets\nJOIN Has_Pet ON Pets.PetID = Has_Pet.PetID\nGROUP BY Pets.PetType;", "source_tables": ["pets"], "error_info": ""}, {"sample_id": 72, "db_id": "pets_1", "question": "What is the average and maximum age for each pet type?", "score": 1, "gold_sql": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype", "pred_sql": "SELECT Pets.PetType, AVG(CAST(Pets.pet_age AS INTEGER)) AS AverageAge, MAX(CAST(Pets.pet_age AS INTEGER)) AS MaxAge\nFROM Pets\nGROUP BY Pets.PetType;", "source_tables": ["pets"], "error_info": ""}, {"sample_id": 73, "db_id": "pets_1", "question": "Find the average weight for each pet type.", "score": 1, "gold_sql": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype", "pred_sql": "SELECT PetType, AVG(weight) AS average_weight FROM Pets GROUP BY PetType;", "source_tables": ["pets"], "error_info": ""}, {"sample_id": 74, "db_id": "pets_1", "question": "What is the average weight for each type of pet?", "score": 1, "gold_sql": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype", "pred_sql": "SELECT PetType, AVG(weight) AS average_weight FROM Pets GROUP BY PetType;", "source_tables": ["pets"], "error_info": ""}, {"sample_id": 75, "db_id": "pets_1", "question": "Find the first name and age of students who have a pet.", "score": 0, "gold_sql": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "pred_sql": "SELECT Student.Fname, Student.Age FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID;", "source_tables": ["student", "has_pet"], "error_info": "Result not equal"}, {"sample_id": 76, "db_id": "pets_1", "question": "What are the different first names and ages of the students who do have pets?", "score": 1, "gold_sql": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "pred_sql": "SELECT DISTINCT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID;", "source_tables": ["student", "has_pet"], "error_info": ""}, {"sample_id": 77, "db_id": "pets_1", "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.", "score": 1, "gold_sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'", "pred_sql": "SELECT Pets.PetID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.LName = 'Smith';", "source_tables": ["student", "has_pet"], "error_info": ""}, {"sample_id": 78, "db_id": "pets_1", "question": "What is the id of the pet owned by the student whose last name is 'Smith'?", "score": 1, "gold_sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'", "pred_sql": "SELECT Has_Pet.PetID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Student.LName = 'Smith';", "source_tables": ["student", "has_pet"], "error_info": ""}, {"sample_id": 79, "db_id": "pets_1", "question": "Find the number of pets for each student who has any pet and student id.", "score": 1, "gold_sql": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid", "pred_sql": "SELECT Student.StuID, COUNT(Has_Pet.PetID) AS NumberOfPets\nFROM Student\nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nGROUP BY Student.StuID;", "source_tables": ["student", "has_pet"], "error_info": ""}, {"sample_id": 80, "db_id": "pets_1", "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .", "score": 1, "gold_sql": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid", "pred_sql": "SELECT Has_Pet.StuID, COUNT(Has_Pet.PetID) AS PetCount\nFROM Has_Pet\nGROUP BY Has_Pet.StuID;", "source_tables": ["student", "has_pet"], "error_info": ""}, {"sample_id": 81, "db_id": "pets_1", "question": "Find the first name and gender of student who have more than one pet.", "score": 1, "gold_sql": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1", "pred_sql": "SELECT Student.Fname, Student.Sex \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nGROUP BY Student.StuID \nHAVING COUNT(Has_Pet.PetID) > 1;", "source_tables": ["student", "has_pet"], "error_info": ""}, {"sample_id": 82, "db_id": "pets_1", "question": "What is the first name and gender of the all the students who have more than one pet?", "score": 1, "gold_sql": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1", "pred_sql": "SELECT Student.Fname, Student.Sex \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nGROUP BY Student.StuID \nHAVING COUNT(Has_Pet.PetID) > 1;", "source_tables": ["student", "has_pet"], "error_info": ""}, {"sample_id": 83, "db_id": "pets_1", "question": "Find the last name of the student who has a cat that is age 3.", "score": 1, "gold_sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "pred_sql": "SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND Pets.pet_age = '3';", "source_tables": ["pets", "student", "has_pet"], "error_info": ""}, {"sample_id": 84, "db_id": "pets_1", "question": "What is the last name of the student who has a cat that is 3 years old?", "score": 1, "gold_sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "pred_sql": "SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND Pets.pet_age = '3';", "source_tables": ["pets", "student", "has_pet"], "error_info": ""}, {"sample_id": 85, "db_id": "pets_1", "question": "Find the average age of students who do not have any pet .", "score": 1, "gold_sql": "select avg(age) from student where stuid not in (select stuid from has_pet)", "pred_sql": "SELECT AVG(Age) AS Average_Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);", "source_tables": ["student", "has_pet"], "error_info": ""}, {"sample_id": 86, "db_id": "pets_1", "question": "What is the average age for all students who do not own any pets ?", "score": 1, "gold_sql": "select avg(age) from student where stuid not in (select stuid from has_pet)", "pred_sql": "SELECT AVG(Age) AS AverageAge FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);", "source_tables": ["student", "has_pet"], "error_info": ""}, {"sample_id": 87, "db_id": "car_1", "question": "How many continents are there?", "score": 1, "gold_sql": "SELECT count(*) FROM CONTINENTS;", "pred_sql": "SELECT COUNT(*) AS NumberOfContinents FROM continents;", "source_tables": ["continents"], "error_info": ""}, {"sample_id": 88, "db_id": "car_1", "question": "What is the number of continents?", "score": 1, "gold_sql": "SELECT count(*) FROM CONTINENTS;", "pred_sql": "SELECT COUNT(*) AS NumberOfContinents FROM continents;", "source_tables": ["continents"], "error_info": ""}, {"sample_id": 89, "db_id": "car_1", "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.", "score": 1, "gold_sql": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;", "pred_sql": "SELECT c.ContId, c.Continent, COUNT(co.CountryId) AS CountryCount\nFROM continents c\nLEFT JOIN countries co ON c.ContId = co.Continent\nGROUP BY c.ContId, c.Continent;", "source_tables": ["countries", "continents"], "error_info": ""}, {"sample_id": 90, "db_id": "car_1", "question": "For each continent, list its id, name, and how many countries it has?", "score": 1, "gold_sql": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;", "pred_sql": "SELECT c.ContId, c.Continent, COUNT(co.CountryId) AS CountryCount\nFROM continents c\nLEFT JOIN countries co ON c.ContId = co.Continent\nGROUP BY c.ContId, c.Continent;", "source_tables": ["countries", "continents"], "error_info": ""}, {"sample_id": 91, "db_id": "car_1", "question": "How many countries are listed?", "score": 1, "gold_sql": "SELECT count(*) FROM COUNTRIES;", "pred_sql": "SELECT COUNT(*) AS CountryCount FROM countries;", "source_tables": ["countries"], "error_info": ""}, {"sample_id": 92, "db_id": "car_1", "question": "How many countries exist?", "score": 1, "gold_sql": "SELECT count(*) FROM COUNTRIES;", "pred_sql": "SELECT COUNT(*) AS CountryCount FROM countries;", "source_tables": ["countries"], "error_info": ""}, {"sample_id": 93, "db_id": "car_1", "question": "How many models does each car maker produce? List maker full name, id and the number.", "score": 1, "gold_sql": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;", "pred_sql": "SELECT cm.FullName, cm.Id, COUNT(ml.ModelId) AS ModelCount\nFROM car_makers cm\nJOIN model_list ml ON cm.Id = ml.Maker\nGROUP BY cm.FullName, cm.Id;", "source_tables": ["car_makers", "model_list"], "error_info": ""}, {"sample_id": 94, "db_id": "car_1", "question": "What is the full name of each car maker, along with its id and how many models it produces?", "score": 1, "gold_sql": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;", "pred_sql": "SELECT cm.FullName, cm.Id, COUNT(ml.ModelId) AS ModelCount\nFROM car_makers cm\nLEFT JOIN model_list ml ON cm.Id = ml.Maker\nGROUP BY cm.Id, cm.FullName;", "source_tables": ["car_makers", "model_list"], "error_info": ""}, {"sample_id": 95, "db_id": "car_1", "question": "Which model of the car has the minimum horsepower?", "score": 0, "gold_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;", "pred_sql": "SELECT Model, Horsepower FROM cars_data ORDER BY Horsepower ASC LIMIT 1;", "source_tables": ["car_names", "cars_data"], "error_info": "Predction Execution Error:no such column: Model"}, {"sample_id": 96, "db_id": "car_1", "question": "What is the model of the car with the smallest amount of horsepower?", "score": 0, "gold_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;", "pred_sql": "SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.ModelId ORDER BY cars_data.Horsepower ASC LIMIT 1;", "source_tables": ["car_names", "cars_data"], "error_info": "Result not equal"}, {"sample_id": 97, "db_id": "car_1", "question": "Find the model of the car whose weight is below the average weight.", "score": 0, "gold_sql": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)", "pred_sql": "SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data);", "source_tables": ["car_names", "cars_data"], "error_info": "Result not equal"}, {"sample_id": 98, "db_id": "car_1", "question": "What is the model for the car with a weight smaller than the average?", "score": 1, "gold_sql": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)", "pred_sql": "SELECT car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data);", "source_tables": ["car_names", "cars_data"], "error_info": ""}, {"sample_id": 99, "db_id": "car_1", "question": "Find the name of the makers that produced some cars in the year of 1970?", "score": 1, "gold_sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';", "pred_sql": "SELECT DISTINCT car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 1970;", "source_tables": ["car_makers", "car_names", "cars_data", "model_list"], "error_info": ""}, {"sample_id": 100, "db_id": "car_1", "question": "What is the name of the different car makers who produced a car in 1970?", "score": 1, "gold_sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';", "pred_sql": "SELECT DISTINCT car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 1970;", "source_tables": ["car_makers", "car_names", "cars_data", "model_list"], "error_info": ""}, {"sample_id": 101, "db_id": "car_1", "question": "Find the make and production time of the cars that were produced in the earliest year?", "score": 1, "gold_sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "pred_sql": "SELECT Make, Year FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE Year = (SELECT MIN(Year) FROM cars_data)", "source_tables": ["cars_data", "car_names"], "error_info": ""}, {"sample_id": 102, "db_id": "car_1", "question": "What is the maker of the carr produced in the earliest year and what year was it?", "score": 0, "gold_sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "pred_sql": "SELECT cm.Maker, cd.Year FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id ORDER BY cd.Year ASC LIMIT 1;", "source_tables": ["cars_data", "car_names"], "error_info": "Result not equal"}, {"sample_id": 103, "db_id": "car_1", "question": "Which distinct car models are the produced after 1980?", "score": 0, "gold_sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;", "pred_sql": "SELECT DISTINCT Model FROM model_list INNER JOIN car_names ON model_list.Model = car_names.Model INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980;", "source_tables": ["model_list", "car_names", "cars_data"], "error_info": "Predction Execution Error:ambiguous column name: Model"}, {"sample_id": 104, "db_id": "car_1", "question": "What are the different models for the cards produced after 1980?", "score": 0, "gold_sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;", "pred_sql": "SELECT DISTINCT Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980;", "source_tables": ["model_list", "car_names", "cars_data"], "error_info": "Predction Execution Error:ambiguous column name: Model"}, {"sample_id": 105, "db_id": "car_1", "question": "How many car makers are there in each continents? List the continent name and the count.", "score": 1, "gold_sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "pred_sql": "SELECT c.Continent, COUNT(cm.Id) AS MakerCount\nFROM continents c\nJOIN countries co ON c.ContId = co.Continent\nJOIN car_makers cm ON co.CountryId = cm.Country\nGROUP BY c.Continent;", "source_tables": ["countries", "car_makers", "continents"], "error_info": ""}, {"sample_id": 106, "db_id": "car_1", "question": "What is the name of each continent and how many car makers are there in each one?", "score": 0, "gold_sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "pred_sql": "SELECT c.Continent, COUNT(cm.Id) AS CarMakerCount\nFROM continents c\nLEFT JOIN countries co ON c.ContId = co.Continent\nLEFT JOIN car_makers cm ON co.CountryId = cm.Country\nGROUP BY c.Continent;", "source_tables": ["countries", "car_makers", "continents"], "error_info": "Result not equal"}, {"sample_id": 107, "db_id": "car_1", "question": "Which of the countries has the most car makers? List the country name.", "score": 1, "gold_sql": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;", "pred_sql": "SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName ORDER BY COUNT(cm.Id) DESC LIMIT 1;", "source_tables": ["car_makers", "countries"], "error_info": ""}, {"sample_id": 108, "db_id": "car_1", "question": "What is the name of the country with the most car makers?", "score": 1, "gold_sql": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;", "pred_sql": "SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryId ORDER BY COUNT(cm.Id) DESC LIMIT 1;", "source_tables": ["car_makers", "countries"], "error_info": ""}, {"sample_id": 109, "db_id": "car_1", "question": "How many car models are produced by each maker ? Only list the count and the maker full name .", "score": 1, "gold_sql": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;", "pred_sql": "SELECT COUNT(model_list.ModelId) AS ModelCount, car_makers.FullName FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id GROUP BY car_makers.FullName;", "source_tables": ["car_makers", "model_list"], "error_info": ""}, {"sample_id": 110, "db_id": "car_1", "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?", "score": 1, "gold_sql": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;", "pred_sql": "SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId) AS NumberOfModels\nFROM car_makers\nJOIN model_list ON car_makers.Id = model_list.Maker\nGROUP BY car_makers.Id, car_makers.FullName;", "source_tables": ["car_makers", "model_list"], "error_info": ""}, {"sample_id": 111, "db_id": "car_1", "question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "score": 0, "gold_sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "pred_sql": "SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Make = 'amc' AND car_names.Model = 'hornet sportabout';", "source_tables": ["cars_data", "car_names"], "error_info": "Result not equal"}, {"sample_id": 112, "db_id": "car_1", "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?", "score": 0, "gold_sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "pred_sql": "SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_names.Model = 'hornet sportabout' AND car_makers.Maker = 'amc';", "source_tables": ["cars_data", "car_names"], "error_info": "Result not equal"}, {"sample_id": 113, "db_id": "car_1", "question": "How many car makers are there in france?", "score": 0, "gold_sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';", "pred_sql": "SELECT COUNT(*) AS NumberOfCarMakers FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France');", "source_tables": ["car_makers", "countries"], "error_info": "Result not equal"}, {"sample_id": 114, "db_id": "car_1", "question": "What is the number of makers of care in France?", "score": 0, "gold_sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';", "pred_sql": "SELECT COUNT(DISTINCT car_makers.Id) AS NumberOfMakers FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'France';", "source_tables": ["car_makers", "countries"], "error_info": "Result not equal"}, {"sample_id": 115, "db_id": "car_1", "question": "How many car models are produced in the usa?", "score": 0, "gold_sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "pred_sql": "SELECT COUNT(DISTINCT model_list.Model) AS NumberOfCarModels FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'USA';", "source_tables": ["car_makers", "model_list", "countries"], "error_info": "Result not equal"}, {"sample_id": 116, "db_id": "car_1", "question": "What is the count of the car models produced in the United States?", "score": 0, "gold_sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "pred_sql": "SELECT COUNT(DISTINCT ml.Model) AS ModelCount\nFROM model_list ml\nJOIN car_makers cm ON ml.Maker = cm.Id\nJOIN countries c ON cm.Country = c.CountryId\nWHERE c.CountryName = 'United States';", "source_tables": ["car_makers", "model_list", "countries"], "error_info": "Result not equal"}, {"sample_id": 117, "db_id": "car_1", "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "score": 1, "gold_sql": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;", "pred_sql": "SELECT AVG(MPG) AS AverageMPG FROM cars_data WHERE Cylinders = 4;", "source_tables": ["cars_data"], "error_info": ""}, {"sample_id": 118, "db_id": "car_1", "question": "What is the average miles per gallon of all the cards with 4 cylinders?", "score": 1, "gold_sql": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;", "pred_sql": "SELECT AVG(MPG) AS AverageMPG FROM cars_data WHERE Cylinders = 4;", "source_tables": ["cars_data"], "error_info": ""}, {"sample_id": 119, "db_id": "car_1", "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "score": 1, "gold_sql": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "pred_sql": "SELECT MIN(Weight) AS SmallestWeight FROM cars_data WHERE Cylinders = 8 AND Year = 1974;", "source_tables": ["cars_data"], "error_info": ""}, {"sample_id": 120, "db_id": "car_1", "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "score": 1, "gold_sql": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "pred_sql": "SELECT MIN(Weight) AS MinWeight FROM cars_data WHERE Cylinders = 8 AND Year = 1974;", "source_tables": ["cars_data"], "error_info": ""}, {"sample_id": 121, "db_id": "car_1", "question": "What are all the makers and models?", "score": 0, "gold_sql": "SELECT Maker ,  Model FROM MODEL_LIST;", "pred_sql": "SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker;", "source_tables": ["model_list"], "error_info": "Result not equal"}, {"sample_id": 122, "db_id": "car_1", "question": "What are the makers and models?", "score": 0, "gold_sql": "SELECT Maker ,  Model FROM MODEL_LIST;", "pred_sql": "SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker;", "source_tables": ["model_list"], "error_info": "Result not equal"}, {"sample_id": 123, "db_id": "car_1", "question": "What are the countries having at least one car maker? List name and id.", "score": 1, "gold_sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "pred_sql": "SELECT DISTINCT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country;", "source_tables": ["car_makers", "countries"], "error_info": ""}, {"sample_id": 124, "db_id": "car_1", "question": "What are the names and ids of all countries with at least one car maker?", "score": 1, "gold_sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "pred_sql": "SELECT DISTINCT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country;", "source_tables": ["car_makers", "countries"], "error_info": ""}, {"sample_id": 125, "db_id": "car_1", "question": "What is the number of the cars with horsepower more than 150?", "score": 1, "gold_sql": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;", "pred_sql": "SELECT COUNT(*) AS NumberOfCars FROM cars_data WHERE Horsepower > 150;", "source_tables": ["cars_data"], "error_info": ""}, {"sample_id": 126, "db_id": "car_1", "question": "What is the number of cars with a horsepower greater than 150?", "score": 1, "gold_sql": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;", "pred_sql": "SELECT COUNT(*) AS NumberOfCars FROM cars_data WHERE Horsepower > 150;", "source_tables": ["cars_data"], "error_info": ""}, {"sample_id": 127, "db_id": "car_1", "question": "What is the average weight of cars each year?", "score": 1, "gold_sql": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;", "pred_sql": "SELECT Year, AVG(Weight) AS AverageWeight FROM cars_data GROUP BY Year;", "source_tables": ["cars_data"], "error_info": ""}, {"sample_id": 128, "db_id": "car_1", "question": "What is the average weight and year for each year?", "score": 1, "gold_sql": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;", "pred_sql": "SELECT Year, AVG(Weight) AS AverageWeight FROM cars_data GROUP BY Year;", "source_tables": ["cars_data"], "error_info": ""}, {"sample_id": 129, "db_id": "car_1", "question": "Which countries in europe have at least 3 car manufacturers?", "score": 0, "gold_sql": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;", "pred_sql": "SELECT c.CountryName FROM countries c \nJOIN car_makers cm ON c.CountryId = cm.Country \nWHERE c.Continent = (SELECT ContId FROM continents WHERE Continent = 'Europe') \nGROUP BY c.CountryName \nHAVING COUNT(cm.Id) >= 3;", "source_tables": ["continents", "car_makers", "countries"], "error_info": "Result not equal"}, {"sample_id": 130, "db_id": "car_1", "question": "What are the names of all European countries with at least 3 manufacturers?", "score": 0, "gold_sql": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;", "pred_sql": "SELECT c.CountryName FROM countries c \nJOIN car_makers cm ON c.CountryId = cm.Country \nWHERE c.Continent = (SELECT ContId FROM continents WHERE Continent = 'Europe') \nGROUP BY c.CountryName \nHAVING COUNT(cm.Id) >= 3;", "source_tables": ["continents", "car_makers", "countries"], "error_info": "Result not equal"}, {"sample_id": 131, "db_id": "car_1", "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "score": 0, "gold_sql": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;", "pred_sql": "SELECT MAX(cars_data.Horsepower) AS MaxHorsepower, car_names.Make \nFROM cars_data \nJOIN car_names ON cars_data.Id = car_names.MakeId \nWHERE cars_data.Cylinders = 3 \nGROUP BY car_names.Make;", "source_tables": ["car_names", "cars_data"], "error_info": "Result not equal"}, {"sample_id": 132, "db_id": "car_1", "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "score": 1, "gold_sql": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;", "pred_sql": "SELECT car_names.Make, MAX(cars_data.Horsepower) AS MaxHorsepower \nFROM cars_data \nJOIN car_names ON cars_data.Id = car_names.MakeId \nWHERE cars_data.Cylinders = 3 \nGROUP BY car_names.Make \nORDER BY MaxHorsepower DESC \nLIMIT 1;", "source_tables": ["car_names", "cars_data"], "error_info": ""}, {"sample_id": 133, "db_id": "car_1", "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "score": 0, "gold_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;", "pred_sql": "SELECT Model, MPG FROM cars_data ORDER BY MPG DESC LIMIT 1;", "source_tables": ["car_names", "cars_data"], "error_info": "Predction Execution Error:no such column: Model"}, {"sample_id": 134, "db_id": "car_1", "question": "What is the car model with the highest mpg ?", "score": 0, "gold_sql": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;", "pred_sql": "SELECT Model FROM cars_data ORDER BY MPG DESC LIMIT 1;", "source_tables": ["car_names", "cars_data"], "error_info": "Predction Execution Error:no such column: Model"}, {"sample_id": 135, "db_id": "car_1", "question": "What is the average horsepower of the cars before 1980?", "score": 1, "gold_sql": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;", "pred_sql": "SELECT AVG(Horsepower) AS AverageHorsepower FROM cars_data WHERE Year < 1980;", "source_tables": ["cars_data"], "error_info": ""}, {"sample_id": 136, "db_id": "car_1", "question": "What is the average horsepower for all cars produced before 1980 ?", "score": 1, "gold_sql": "select avg(horsepower) from cars_data where year  <  1980;", "pred_sql": "SELECT AVG(Horsepower) AS AverageHorsepower FROM cars_data WHERE Year < 1980;", "source_tables": ["cars_data"], "error_info": ""}, {"sample_id": 137, "db_id": "car_1", "question": "What is the average edispl of the cars of model volvo?", "score": 1, "gold_sql": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';", "pred_sql": "SELECT AVG(Edispl) AS AverageEdispl FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = (SELECT Id FROM car_makers WHERE Maker = 'volvo');", "source_tables": ["car_names", "cars_data"], "error_info": ""}, {"sample_id": 138, "db_id": "car_1", "question": "What is the average edispl for all volvos?", "score": 1, "gold_sql": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';", "pred_sql": "SELECT AVG(Edispl) AS AverageEdispl FROM cars_data INNER JOIN car_names ON cars_data.Id = car_names.MakeId INNER JOIN model_list ON car_names.Model = model_list.Model INNER JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName LIKE 'Volvo';", "source_tables": ["car_names", "cars_data"], "error_info": ""}, {"sample_id": 139, "db_id": "car_1", "question": "What is the maximum accelerate for different number of cylinders?", "score": 1, "gold_sql": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;", "pred_sql": "SELECT Cylinders, MAX(Accelerate) AS MaxAccelerate FROM cars_data GROUP BY Cylinders;", "source_tables": ["cars_data"], "error_info": ""}, {"sample_id": 140, "db_id": "car_1", "question": "What is the maximum accelerate for all the different cylinders?", "score": 1, "gold_sql": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;", "pred_sql": "SELECT Cylinders, MAX(Accelerate) AS MaxAccelerate FROM cars_data GROUP BY Cylinders;", "source_tables": ["cars_data"], "error_info": ""}, {"sample_id": 141, "db_id": "car_1", "question": "Which model has the most version(make) of cars?", "score": 0, "gold_sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "pred_sql": "SELECT Model, COUNT(Make) AS VersionCount FROM car_names GROUP BY Model ORDER BY VersionCount DESC LIMIT 1;", "source_tables": ["car_names"], "error_info": "Result not equal"}, {"sample_id": 142, "db_id": "car_1", "question": "What model has the most different versions?", "score": 0, "gold_sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "pred_sql": "SELECT Model, COUNT(*) AS VersionCount FROM model_list GROUP BY Model ORDER BY VersionCount DESC LIMIT 1;", "source_tables": ["car_names"], "error_info": "Result not equal"}, {"sample_id": 143, "db_id": "car_1", "question": "How many cars have more than 4 cylinders?", "score": 1, "gold_sql": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;", "pred_sql": "SELECT COUNT(*) AS CarCount FROM cars_data WHERE Cylinders > 4;", "source_tables": ["cars_data"], "error_info": ""}, {"sample_id": 144, "db_id": "car_1", "question": "What is the number of cars with more than 4 cylinders?", "score": 1, "gold_sql": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;", "pred_sql": "SELECT COUNT(*) AS NumberOfCars FROM cars_data WHERE Cylinders > 4;", "source_tables": ["cars_data"], "error_info": ""}, {"sample_id": 145, "db_id": "car_1", "question": "how many cars were produced in 1980?", "score": 1, "gold_sql": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;", "pred_sql": "SELECT COUNT(*) AS NumberOfCars FROM cars_data WHERE Year = 1980;", "source_tables": ["cars_data"], "error_info": ""}, {"sample_id": 146, "db_id": "car_1", "question": "In 1980, how many cars were made?", "score": 1, "gold_sql": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;", "pred_sql": "SELECT COUNT(*) AS NumberOfCars FROM cars_data WHERE Year = 1980;", "source_tables": ["cars_data"], "error_info": ""}, {"sample_id": 147, "db_id": "car_1", "question": "How many car models were produced by the maker with full name American Motor Company?", "score": 1, "gold_sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';", "pred_sql": "SELECT COUNT(DISTINCT ml.Model) AS ModelCount\nFROM car_makers cm\nJOIN model_list ml ON cm.Id = ml.Maker\nWHERE cm.FullName = 'American Motor Company';", "source_tables": ["car_makers", "model_list"], "error_info": ""}, {"sample_id": 148, "db_id": "car_1", "question": "What is the number of car models created by the car maker American Motor Company?", "score": 1, "gold_sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';", "pred_sql": "SELECT COUNT(model_list.ModelId) AS NumberOfModels\nFROM model_list\nJOIN car_makers ON model_list.Maker = car_makers.Id\nWHERE car_makers.FullName = 'American Motor Company';", "source_tables": ["car_makers", "model_list"], "error_info": ""}, {"sample_id": 149, "db_id": "car_1", "question": "Which makers designed more than 3 car models? List full name and the id.", "score": 1, "gold_sql": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;", "pred_sql": "SELECT car_makers.FullName, car_makers.Id \nFROM car_makers \nJOIN model_list ON car_makers.Id = model_list.Maker \nGROUP BY car_makers.Id \nHAVING COUNT(model_list.ModelId) > 3;", "source_tables": ["car_makers", "model_list"], "error_info": ""}, {"sample_id": 150, "db_id": "car_1", "question": "What are the names and ids of all makers with more than 3 models?", "score": 0, "gold_sql": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;", "pred_sql": "SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(model_list.ModelId) > 3;", "source_tables": ["car_makers", "model_list"], "error_info": "Result not equal"}, {"sample_id": 151, "db_id": "car_1", "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?", "score": 1, "gold_sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "pred_sql": "SELECT DISTINCT ml.Model \nFROM model_list ml \nJOIN car_makers cm ON ml.Maker = cm.Id \nJOIN car_names cn ON ml.Model = cn.Model \nJOIN cars_data cd ON cn.MakeId = cd.Id \nWHERE cm.FullName = 'General Motors' OR cd.Weight > 3500;", "source_tables": ["car_makers", "model_list", "car_names", "cars_data"], "error_info": ""}, {"sample_id": 152, "db_id": "car_1", "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?", "score": 1, "gold_sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "pred_sql": "SELECT DISTINCT ml.Model \nFROM model_list ml \nJOIN car_makers cm ON ml.Maker = cm.Id \nJOIN car_names cn ON cn.Model = ml.Model \nJOIN cars_data cd ON cd.Id = cn.MakeId \nWHERE cm.Maker = 'General Motors' OR cd.Weight > 3500;", "source_tables": ["car_makers", "model_list", "car_names", "cars_data"], "error_info": ""}, {"sample_id": 153, "db_id": "car_1", "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "score": 1, "gold_sql": "select distinct year from cars_data where weight between 3000 and 4000;", "pred_sql": "SELECT DISTINCT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000;", "source_tables": ["cars_data"], "error_info": ""}, {"sample_id": 154, "db_id": "car_1", "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "score": 1, "gold_sql": "select distinct year from cars_data where weight between 3000 and 4000;", "pred_sql": "SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 OR Weight > 3000;", "source_tables": ["cars_data"], "error_info": ""}, {"sample_id": 155, "db_id": "car_1", "question": "What is the horsepower of the car with the largest accelerate?", "score": 1, "gold_sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;", "pred_sql": "SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data)", "source_tables": ["cars_data"], "error_info": ""}, {"sample_id": 156, "db_id": "car_1", "question": "What is the horsepower of the car with the greatest accelerate?", "score": 1, "gold_sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;", "pred_sql": "SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data)", "source_tables": ["cars_data"], "error_info": ""}, {"sample_id": 157, "db_id": "car_1", "question": "For model volvo, how many cylinders does the car with the least accelerate have?", "score": 0, "gold_sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "pred_sql": "SELECT Cylinders FROM cars_data WHERE Id = (SELECT Id FROM car_names WHERE Model = 'volvo') ORDER BY Accelerate ASC LIMIT 1;", "source_tables": ["cars_data", "car_names"], "error_info": "Result not equal"}, {"sample_id": 158, "db_id": "car_1", "question": "For a volvo model, how many cylinders does the version with least accelerate have?", "score": 0, "gold_sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "pred_sql": "SELECT Cylinders FROM cars_data WHERE Id = (SELECT Id FROM car_names WHERE Model = (SELECT Model FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'Volvo')) ORDER BY Accelerate ASC LIMIT 1)", "source_tables": ["cars_data", "car_names"], "error_info": "Predction Execution Error:no such column: Accelerate"}, {"sample_id": 159, "db_id": "car_1", "question": "How many cars have a larger accelerate than the car with the largest horsepower?", "score": 1, "gold_sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );", "pred_sql": "SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT Accelerate FROM cars_data WHERE Horsepower = (SELECT MAX(Horsepower) FROM cars_data))", "source_tables": ["cars_data"], "error_info": ""}, {"sample_id": 160, "db_id": "car_1", "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?", "score": 0, "gold_sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );", "pred_sql": "SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)", "source_tables": ["cars_data"], "error_info": "Result not equal"}, {"sample_id": 161, "db_id": "car_1", "question": "How many countries has more than 2 car makers ?", "score": 0, "gold_sql": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "pred_sql": "SELECT COUNT(DISTINCT c.CountryId) AS CountryCount\nFROM countries c\nJOIN car_makers cm ON c.CountryId = cm.Country\nGROUP BY c.CountryId\nHAVING COUNT(cm.Id) > 2;", "source_tables": ["car_makers", "countries"], "error_info": "Result not equal"}, {"sample_id": 162, "db_id": "car_1", "question": "What is the number of countries with more than 2 car makers ?", "score": 0, "gold_sql": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "pred_sql": "SELECT COUNT(DISTINCT c.CountryId) AS NumberOfCountries\nFROM car_makers cm\nJOIN countries c ON cm.Country = c.CountryId\nGROUP BY c.CountryId\nHAVING COUNT(cm.Id) > 2;", "source_tables": ["car_makers", "countries"], "error_info": "Result not equal"}, {"sample_id": 163, "db_id": "car_1", "question": "How many cars has over 6 cylinders?", "score": 1, "gold_sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;", "pred_sql": "SELECT COUNT(*) AS CarCount FROM cars_data WHERE Cylinders > 6;", "source_tables": ["cars_data"], "error_info": ""}, {"sample_id": 164, "db_id": "car_1", "question": "What is the number of carsw ith over 6 cylinders?", "score": 1, "gold_sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;", "pred_sql": "SELECT COUNT(*) AS NumberOfCars FROM cars_data WHERE Cylinders > 6;", "source_tables": ["cars_data"], "error_info": ""}, {"sample_id": 165, "db_id": "car_1", "question": "For the cars with 4 cylinders, which model has the largest horsepower?", "score": 0, "gold_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "pred_sql": "SELECT model_list.Model, MAX(cars_data.Horsepower) AS MaxHorsepower\nFROM cars_data\nJOIN car_names ON cars_data.Id = car_names.MakeId\nJOIN model_list ON car_names.Model = model_list.Model\nWHERE cars_data.Cylinders = 4\nGROUP BY model_list.Model\nORDER BY MaxHorsepower DESC\nLIMIT 1;", "source_tables": ["car_names", "cars_data"], "error_info": "Result not equal"}, {"sample_id": 166, "db_id": "car_1", "question": "For all of the 4 cylinder cars, which model has the most horsepower?", "score": 0, "gold_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "pred_sql": "SELECT Model, MAX(Horsepower) AS MaxHorsepower FROM cars_data WHERE Cylinders = 4 GROUP BY Model ORDER BY MaxHorsepower DESC LIMIT 1;", "source_tables": ["car_names", "cars_data"], "error_info": "Predction Execution Error:no such column: Model"}, {"sample_id": 167, "db_id": "car_1", "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.", "score": 1, "gold_sql": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;", "pred_sql": "SELECT car_names.MakeId, car_names.Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cars_data.Cylinders <= 3;", "source_tables": ["cars_data", "car_names"], "error_info": ""}, {"sample_id": 168, "db_id": "car_1", "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?", "score": 0, "gold_sql": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;", "pred_sql": "SELECT car_names.MakeId, car_names.Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Horsepower < (SELECT MIN(Horsepower) FROM cars_data) AND cars_data.Cylinders < 4;", "source_tables": ["cars_data", "car_names"], "error_info": "Result not equal"}, {"sample_id": 169, "db_id": "car_1", "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?", "score": 1, "gold_sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980", "pred_sql": "SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980;", "source_tables": ["cars_data"], "error_info": ""}, {"sample_id": 170, "db_id": "car_1", "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?", "score": 1, "gold_sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980", "pred_sql": "SELECT MAX(MPG) AS MaxMPG FROM cars_data WHERE Cylinders = 8 OR Year < 1980;", "source_tables": ["cars_data"], "error_info": ""}, {"sample_id": 171, "db_id": "car_1", "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "score": 0, "gold_sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "pred_sql": "SELECT model_list.Model \nFROM model_list \nJOIN car_makers ON model_list.Maker = car_makers.Id \nJOIN car_names ON model_list.Model = car_names.Model \nJOIN cars_data ON car_names.MakeId = cars_data.Id \nWHERE cars_data.Weight < 3500 \nAND car_makers.FullName != 'Ford Motor Company';", "source_tables": ["car_makers", "model_list", "car_names", "cars_data"], "error_info": "Result not equal"}, {"sample_id": 172, "db_id": "car_1", "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "score": 1, "gold_sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "pred_sql": "SELECT DISTINCT model_list.Model \nFROM model_list \nJOIN car_names ON model_list.Model = car_names.Model \nJOIN cars_data ON car_names.MakeId = cars_data.Id \nJOIN car_makers ON model_list.Maker = car_makers.Id \nWHERE cars_data.Weight < 3500 \nAND car_makers.FullName != 'Ford Motor Company';", "source_tables": ["car_makers", "model_list", "car_names", "cars_data"], "error_info": ""}, {"sample_id": 173, "db_id": "car_1", "question": "What are the name of the countries where there is not a single car maker?", "score": 1, "gold_sql": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;", "pred_sql": "SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT DISTINCT Country FROM car_makers)", "source_tables": ["car_makers", "countries"], "error_info": ""}, {"sample_id": 174, "db_id": "car_1", "question": "What are the names of the countries with no car makers?", "score": 1, "gold_sql": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;", "pred_sql": "SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT DISTINCT Country FROM car_makers)", "source_tables": ["car_makers", "countries"], "error_info": ""}, {"sample_id": 175, "db_id": "car_1", "question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .", "score": 0, "gold_sql": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;", "pred_sql": "SELECT cm.Id, cm.Maker \nFROM car_makers cm \nJOIN model_list ml ON cm.Id = ml.Maker \nGROUP BY cm.Id, cm.Maker \nHAVING COUNT(ml.ModelId) >= 2 \nAND COUNT(DISTINCT cm.Id) > 3;", "source_tables": ["car_makers", "car_names", "model_list"], "error_info": "Result not equal"}, {"sample_id": 176, "db_id": "car_1", "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?", "score": 0, "gold_sql": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;", "pred_sql": "SELECT cm.Id, cm.Maker \nFROM car_makers cm \nJOIN model_list ml ON cm.Id = ml.Maker \nJOIN car_names cn ON ml.Model = cn.Model \nJOIN cars_data cd ON cn.MakeId = cd.Id \nGROUP BY cm.Id, cm.Maker \nHAVING COUNT(DISTINCT ml.Model) >= 2 AND COUNT(cd.Id) > 3;", "source_tables": ["car_makers", "car_names", "model_list"], "error_info": "Result not equal"}, {"sample_id": 177, "db_id": "car_1", "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?", "score": 1, "gold_sql": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';", "pred_sql": "SELECT c.CountryId, c.CountryName \nFROM countries c \nLEFT JOIN car_makers cm ON c.CountryId = cm.Country \nLEFT JOIN model_list ml ON cm.Id = ml.Maker \nLEFT JOIN car_names cn ON ml.Model = cn.Model \nWHERE (SELECT COUNT(*) FROM car_makers WHERE Country = c.CountryId) > 3 \n   OR cn.Model = 'fiat' \nGROUP BY c.CountryId, c.CountryName;", "source_tables": ["car_makers", "countries", "model_list"], "error_info": ""}, {"sample_id": 178, "db_id": "car_1", "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?", "score": 1, "gold_sql": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';", "pred_sql": "SELECT c.CountryId, c.CountryName \nFROM countries c \nLEFT JOIN car_makers cm ON c.CountryId = cm.Country \nLEFT JOIN model_list ml ON cm.Id = ml.Maker \nLEFT JOIN car_names cn ON ml.Model = cn.Model \nWHERE (SELECT COUNT(*) FROM car_makers WHERE Country = c.CountryId) > 3 \n   OR cn.Model = 'fiat' \nGROUP BY c.CountryId, c.CountryName;", "source_tables": ["car_makers", "countries", "model_list"], "error_info": ""}, {"sample_id": 179, "db_id": "flight_2", "question": "Which country does Airline \"JetBlue Airways\" belong to?", "score": 1, "gold_sql": "SELECT Country FROM AIRLINES WHERE Airline  =  'JetBlue Airways'", "pred_sql": "SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways';", "source_tables": ["airlines"], "error_info": ""}, {"sample_id": 180, "db_id": "flight_2", "question": "What country is Jetblue Airways affiliated with?", "score": 0, "gold_sql": "SELECT Country FROM AIRLINES WHERE Airline  =  'JetBlue Airways'", "pred_sql": "SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways';", "source_tables": ["airlines"], "error_info": "Result not equal"}, {"sample_id": 181, "db_id": "flight_2", "question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "score": 1, "gold_sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  'JetBlue Airways'", "pred_sql": "SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways';", "source_tables": ["airlines"], "error_info": ""}, {"sample_id": 182, "db_id": "flight_2", "question": "Which abbreviation corresponds to Jetblue Airways?", "score": 0, "gold_sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  'JetBlue Airways'", "pred_sql": "SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways';", "source_tables": ["airlines"], "error_info": "Result not equal"}, {"sample_id": 183, "db_id": "flight_2", "question": "List all airline names and their abbreviations in \"USA\".", "score": 1, "gold_sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  'USA'", "pred_sql": "SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';", "source_tables": ["airlines"], "error_info": ""}, {"sample_id": 184, "db_id": "flight_2", "question": "What are the airline names and abbreviations for airlines in the USA?", "score": 1, "gold_sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  'USA'", "pred_sql": "SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';", "source_tables": ["airlines"], "error_info": ""}, {"sample_id": 185, "db_id": "flight_2", "question": "List the airport code and name in the city of Anthony.", "score": 1, "gold_sql": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  'Anthony'", "pred_sql": "SELECT AirportCode, AirportName FROM airports WHERE City = (SELECT City FROM airports WHERE AirportName = 'Anthony')", "source_tables": ["airports"], "error_info": ""}, {"sample_id": 186, "db_id": "flight_2", "question": "Give the airport code and airport name corresonding to the city Anthony.", "score": 1, "gold_sql": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  'Anthony'", "pred_sql": "SELECT AirportCode, AirportName FROM airports WHERE City = (SELECT City FROM airports WHERE AirportName = 'Anthony')", "source_tables": ["airports"], "error_info": ""}, {"sample_id": 187, "db_id": "flight_2", "question": "How many airlines do we have?", "score": 1, "gold_sql": "SELECT count(*) FROM AIRLINES", "pred_sql": "SELECT COUNT(*) AS total_airlines FROM airlines;", "source_tables": ["airlines"], "error_info": ""}, {"sample_id": 188, "db_id": "flight_2", "question": "What is the total number of airlines?", "score": 1, "gold_sql": "SELECT count(*) FROM AIRLINES", "pred_sql": "SELECT COUNT(*) AS total_airlines FROM airlines;", "source_tables": ["airlines"], "error_info": ""}, {"sample_id": 189, "db_id": "flight_2", "question": "How many airports do we have?", "score": 1, "gold_sql": "SELECT count(*) FROM AIRPORTS", "pred_sql": "SELECT COUNT(*) AS TotalAirports FROM airports;", "source_tables": ["airports"], "error_info": ""}, {"sample_id": 190, "db_id": "flight_2", "question": "Return the number of  airports.", "score": 1, "gold_sql": "SELECT count(*) FROM AIRPORTS", "pred_sql": "SELECT COUNT(*) AS NumberOfAirports FROM airports;", "source_tables": ["airports"], "error_info": ""}, {"sample_id": 191, "db_id": "flight_2", "question": "How many flights do we have?", "score": 1, "gold_sql": "SELECT count(*) FROM FLIGHTS", "pred_sql": "SELECT COUNT(*) AS TotalFlights FROM flights;", "source_tables": ["flights"], "error_info": ""}, {"sample_id": 192, "db_id": "flight_2", "question": "Return the number of flights.", "score": 1, "gold_sql": "SELECT count(*) FROM FLIGHTS", "pred_sql": "SELECT COUNT(*) AS NumberOfFlights FROM flights;", "source_tables": ["flights"], "error_info": ""}, {"sample_id": 193, "db_id": "flight_2", "question": "Which airline has abbreviation 'UAL'?", "score": 1, "gold_sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  'UAL'", "pred_sql": "SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';", "source_tables": ["airlines"], "error_info": ""}, {"sample_id": 194, "db_id": "flight_2", "question": "Give the airline with abbreviation 'UAL'.", "score": 0, "gold_sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  'UAL'", "pred_sql": "SELECT * FROM airlines WHERE Abbreviation = 'UAL';", "source_tables": ["airlines"], "error_info": "Result not equal"}, {"sample_id": 195, "db_id": "flight_2", "question": "How many airlines are from USA?", "score": 1, "gold_sql": "SELECT count(*) FROM AIRLINES WHERE Country  =  'USA'", "pred_sql": "SELECT COUNT(*) AS NumberOfAirlines FROM airlines WHERE Country = 'USA';", "source_tables": ["airlines"], "error_info": ""}, {"sample_id": 196, "db_id": "flight_2", "question": "Return the number of airlines in the USA.", "score": 1, "gold_sql": "SELECT count(*) FROM AIRLINES WHERE Country  =  'USA'", "pred_sql": "SELECT COUNT(*) AS NumberOfAirlines FROM airlines WHERE Country = 'USA';", "source_tables": ["airlines"], "error_info": ""}, {"sample_id": 197, "db_id": "flight_2", "question": "Which city and country is the Alton airport at?", "score": 1, "gold_sql": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  'Alton'", "pred_sql": "SELECT AirportName, CountryAbbrev FROM airports WHERE AirportName = 'Alton'", "source_tables": ["airports"], "error_info": ""}, {"sample_id": 198, "db_id": "flight_2", "question": "Give the city and country for the Alton airport.", "score": 1, "gold_sql": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  'Alton'", "pred_sql": "SELECT airports.City, airports.Country FROM airports WHERE airports.AirportName = 'Alton'", "source_tables": ["airports"], "error_info": ""}, {"sample_id": 199, "db_id": "flight_2", "question": "What is the airport name for airport 'AKO'?", "score": 1, "gold_sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  'AKO'", "pred_sql": "SELECT AirportName FROM airports WHERE AirportCode = 'AKO';", "source_tables": ["airports"], "error_info": ""}, {"sample_id": 200, "db_id": "flight_2", "question": "Return the name of the airport with code 'AKO'.", "score": 1, "gold_sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  'AKO'", "pred_sql": "SELECT AirportName FROM airports WHERE AirportCode = 'AKO';", "source_tables": ["airports"], "error_info": ""}, {"sample_id": 201, "db_id": "flight_2", "question": "What are airport names at City 'Aberdeen'?", "score": 1, "gold_sql": "SELECT AirportName FROM AIRPORTS WHERE City = 'Aberdeen'", "pred_sql": "SELECT AirportName FROM airports WHERE City = (SELECT City FROM airports WHERE AirportName = 'Aberdeen')", "source_tables": ["airports"], "error_info": ""}, {"sample_id": 202, "db_id": "flight_2", "question": "What are the names of airports in Aberdeen?", "score": 1, "gold_sql": "SELECT AirportName FROM AIRPORTS WHERE City = 'Aberdeen'", "pred_sql": "SELECT AirportName FROM airports WHERE City = (SELECT City FROM airports WHERE AirportName LIKE '%Aberdeen%')", "source_tables": ["airports"], "error_info": ""}, {"sample_id": 203, "db_id": "flight_2", "question": "How many flights depart from 'APG'?", "score": 1, "gold_sql": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  'APG'", "pred_sql": "SELECT COUNT(*) AS FlightCount FROM flights WHERE SourceAirport = 'APG';", "source_tables": ["flights"], "error_info": ""}, {"sample_id": 204, "db_id": "flight_2", "question": "Count the number of flights departing from 'APG'.", "score": 1, "gold_sql": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  'APG'", "pred_sql": "SELECT COUNT(*) AS FlightCount FROM flights WHERE SourceAirport = 'APG';", "source_tables": ["flights"], "error_info": ""}, {"sample_id": 205, "db_id": "flight_2", "question": "How many flights have destination ATO?", "score": 1, "gold_sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  'ATO'", "pred_sql": "SELECT COUNT(*) AS flight_count FROM flights WHERE DestAirport = 'ATO';", "source_tables": ["flights"], "error_info": ""}, {"sample_id": 206, "db_id": "flight_2", "question": "Count the number of flights into ATO.", "score": 1, "gold_sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  'ATO'", "pred_sql": "SELECT COUNT(*) AS FlightCount FROM flights WHERE DestAirport = 'ATO';", "source_tables": ["flights"], "error_info": ""}, {"sample_id": 207, "db_id": "flight_2", "question": "How many flights depart from City Aberdeen?", "score": 1, "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  'Aberdeen'", "pred_sql": "SELECT COUNT(*) AS FlightCount FROM flights WHERE SourceAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');", "source_tables": ["airports", "flights"], "error_info": ""}, {"sample_id": 208, "db_id": "flight_2", "question": "Return the number of flights departing from Aberdeen.", "score": 1, "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  'Aberdeen'", "pred_sql": "SELECT COUNT(*) AS NumberOfFlights FROM flights WHERE SourceAirport IN (SELECT AirportCode FROM airports WHERE AirportName = 'Aberdeen');", "source_tables": ["airports", "flights"], "error_info": ""}, {"sample_id": 209, "db_id": "flight_2", "question": "How many flights arriving in Aberdeen city?", "score": 1, "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  'Aberdeen'", "pred_sql": "SELECT COUNT(*) AS TotalFlights FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City = (SELECT City FROM airports WHERE AirportName = 'Aberdeen')", "source_tables": ["airports", "flights"], "error_info": ""}, {"sample_id": 210, "db_id": "flight_2", "question": "Return the number of flights arriving in Aberdeen.", "score": 1, "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  'Aberdeen'", "pred_sql": "SELECT COUNT(*) AS NumberOfFlights FROM flights WHERE DestAirport = (SELECT AirportCode FROM airports WHERE AirportName = 'Aberdeen');", "source_tables": ["airports", "flights"], "error_info": ""}, {"sample_id": 211, "db_id": "flight_2", "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?", "score": 1, "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  'Ashley' AND T3.City  =  'Aberdeen'", "pred_sql": "SELECT COUNT(*) AS FlightCount \nFROM flights f \nJOIN airports a1 ON f.SourceAirport = a1.AirportCode \nJOIN airports a2 ON f.DestAirport = a2.AirportCode \nWHERE a1.City = 'Aberdeen' AND a2.City = 'Ashley';", "source_tables": ["airports", "flights"], "error_info": ""}, {"sample_id": 212, "db_id": "flight_2", "question": "How many flights fly from Aberdeen to Ashley?", "score": 1, "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  'Ashley' AND T3.City  =  'Aberdeen'", "pred_sql": "SELECT COUNT(*) AS flight_count FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE AirportName = 'Aberdeen') AND DestAirport = (SELECT AirportCode FROM airports WHERE AirportName = 'Ashley');", "source_tables": ["airports", "flights"], "error_info": ""}, {"sample_id": 213, "db_id": "flight_2", "question": "How many flights does airline 'JetBlue Airways' have?", "score": 0, "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = 'JetBlue Airways'", "pred_sql": "SELECT COUNT(*) AS FlightCount FROM flights WHERE Airline = 'JetBlue Airways';", "source_tables": ["flights", "airlines"], "error_info": "Result not equal"}, {"sample_id": 214, "db_id": "flight_2", "question": "Give the number of Jetblue Airways flights.", "score": 0, "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = 'JetBlue Airways'", "pred_sql": "SELECT COUNT(*) AS NumberOfFlights FROM flights WHERE Airline = 'Jetblue Airways';", "source_tables": ["flights", "airlines"], "error_info": "Result not equal"}, {"sample_id": 215, "db_id": "flight_2", "question": "How many 'United Airlines' flights go to Airport 'ASY'?", "score": 1, "gold_sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  'United Airlines' AND T2.DestAirport  =  'ASY'", "pred_sql": "SELECT COUNT(*) AS FlightCount FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY';", "source_tables": ["flights", "airlines"], "error_info": ""}, {"sample_id": 216, "db_id": "flight_2", "question": "Count the number of United Airlines flights arriving in ASY Airport.", "score": 1, "gold_sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  'United Airlines' AND T2.DestAirport  =  'ASY'", "pred_sql": "SELECT COUNT(*) AS FlightCount FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY';", "source_tables": ["flights", "airlines"], "error_info": ""}, {"sample_id": 217, "db_id": "flight_2", "question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "score": 1, "gold_sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  'United Airlines' AND T2.SourceAirport  =  'AHD'", "pred_sql": "SELECT COUNT(*) AS FlightCount FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD';", "source_tables": ["flights", "airlines"], "error_info": ""}, {"sample_id": 218, "db_id": "flight_2", "question": "Return the number of United Airlines flights leaving from AHD Airport.", "score": 1, "gold_sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  'United Airlines' AND T2.SourceAirport  =  'AHD'", "pred_sql": "SELECT COUNT(*) AS FlightCount FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD';", "source_tables": ["flights", "airlines"], "error_info": ""}, {"sample_id": 219, "db_id": "flight_2", "question": "How many United Airlines flights go to City 'Aberdeen'?", "score": 1, "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  'Aberdeen' AND T3.Airline  =  'United Airlines'", "pred_sql": "SELECT COUNT(*) FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE f.Airline = 'United Airlines' AND a.City = 'Aberdeen';", "source_tables": ["airports", "flights", "airlines"], "error_info": ""}, {"sample_id": 220, "db_id": "flight_2", "question": "Count the number of United Airlines flights that arrive in Aberdeen.", "score": 1, "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  'Aberdeen' AND T3.Airline  =  'United Airlines'", "pred_sql": "SELECT COUNT(*) AS FlightCount FROM flights WHERE Airline = 'United Airlines' AND DestAirport IN (SELECT AirportCode FROM airports WHERE AirportName = 'Aberdeen');", "source_tables": ["airports", "flights", "airlines"], "error_info": ""}, {"sample_id": 221, "db_id": "flight_2", "question": "Which city has most number of arriving flights?", "score": 1, "gold_sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT airports.City, COUNT(flights.DestAirport) AS NumberOfArrivals\nFROM flights\nJOIN airports ON flights.DestAirport = airports.AirportCode\nGROUP BY airports.City\nORDER BY NumberOfArrivals DESC\nLIMIT 1;", "source_tables": ["airports", "flights"], "error_info": ""}, {"sample_id": 222, "db_id": "flight_2", "question": "Which city has the most frequent destination airport?", "score": 1, "gold_sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT a.City, COUNT(f.DestAirport) AS Frequency\nFROM flights f\nJOIN airports a ON f.DestAirport = a.AirportCode\nGROUP BY a.City\nORDER BY Frequency DESC\nLIMIT 1;", "source_tables": ["airports", "flights"], "error_info": ""}, {"sample_id": 223, "db_id": "flight_2", "question": "Which city has most number of departing flights?", "score": 1, "gold_sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT airports.City, COUNT(flights.FlightNo) AS NumberOfDepartures\nFROM flights\nJOIN airports ON flights.SourceAirport = airports.AirportCode\nGROUP BY airports.City\nORDER BY NumberOfDepartures DESC\nLIMIT 1;", "source_tables": ["airports", "flights"], "error_info": ""}, {"sample_id": 224, "db_id": "flight_2", "question": "Which city is the most frequent source airport?", "score": 1, "gold_sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT airports.City, COUNT(flights.SourceAirport) AS Frequency\nFROM flights\nJOIN airports ON flights.SourceAirport = airports.AirportCode\nGROUP BY airports.City\nORDER BY Frequency DESC\nLIMIT 1;", "source_tables": ["airports", "flights"], "error_info": ""}, {"sample_id": 225, "db_id": "flight_2", "question": "What is the code of airport that has the highest number of flights?", "score": 0, "gold_sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT SourceAirport AS AirportCode FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1;", "source_tables": ["airports", "flights"], "error_info": "Result not equal"}, {"sample_id": 226, "db_id": "flight_2", "question": "What is the airport code of the airport with the most flights?", "score": 0, "gold_sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT SourceAirport AS AirportCode, COUNT(*) AS FlightCount FROM flights GROUP BY SourceAirport ORDER BY FlightCount DESC LIMIT 1;", "source_tables": ["airports", "flights"], "error_info": "Result not equal"}, {"sample_id": 227, "db_id": "flight_2", "question": "What is the code of airport that has fewest number of flights?", "score": 0, "gold_sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1", "pred_sql": "SELECT AirportCode FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights) ORDER BY (SELECT COUNT(*) FROM flights WHERE SourceAirport = airports.AirportCode OR DestAirport = airports.AirportCode) ASC LIMIT 1;", "source_tables": ["airports", "flights"], "error_info": "Result not equal"}, {"sample_id": 228, "db_id": "flight_2", "question": "Give the code of the airport with the least flights.", "score": 0, "gold_sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1", "pred_sql": "SELECT SourceAirport AS AirportCode FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) ASC LIMIT 1;", "source_tables": ["airports", "flights"], "error_info": "Result not equal"}, {"sample_id": 229, "db_id": "flight_2", "question": "Which airline has most number of flights?", "score": 0, "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT Airline, COUNT(*) AS FlightCount FROM flights GROUP BY Airline ORDER BY FlightCount DESC LIMIT 1;", "source_tables": ["flights", "airlines"], "error_info": "Result not equal"}, {"sample_id": 230, "db_id": "flight_2", "question": "What airline serves the most flights?", "score": 0, "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT Airline, COUNT(*) AS FlightCount FROM flights GROUP BY Airline ORDER BY FlightCount DESC LIMIT 1;", "source_tables": ["flights", "airlines"], "error_info": "Result not equal"}, {"sample_id": 231, "db_id": "flight_2", "question": "Find the abbreviation and country of the airline that has fewest number of flights?", "score": 0, "gold_sql": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1", "pred_sql": "SELECT a.Abbreviation, a.Country FROM airlines a JOIN (SELECT Airline, COUNT(*) as FlightCount FROM flights GROUP BY Airline ORDER BY FlightCount ASC LIMIT 1) f ON a.Airline = f.Airline;", "source_tables": ["flights", "airlines"], "error_info": "Result not equal"}, {"sample_id": 232, "db_id": "flight_2", "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?", "score": 0, "gold_sql": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1", "pred_sql": "SELECT a.Abbreviation, a.Country FROM airlines a JOIN (SELECT Airline, COUNT(*) as FlightCount FROM flights GROUP BY Airline ORDER BY FlightCount ASC LIMIT 1) f ON a.Airline = f.Airline;", "source_tables": ["flights", "airlines"], "error_info": "Result not equal"}, {"sample_id": 233, "db_id": "flight_2", "question": "What are airlines that have some flight departing from airport 'AHD'?", "score": 1, "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'AHD'", "pred_sql": "SELECT DISTINCT Airline FROM flights WHERE SourceAirport = 'AHD';", "source_tables": ["flights", "airlines"], "error_info": ""}, {"sample_id": 234, "db_id": "flight_2", "question": "Which airlines have a flight with source airport AHD?", "score": 1, "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'AHD'", "pred_sql": "SELECT DISTINCT Airline FROM flights WHERE SourceAirport = 'AHD';", "source_tables": ["flights", "airlines"], "error_info": ""}, {"sample_id": 235, "db_id": "flight_2", "question": "What are airlines that have flights arriving at airport 'AHD'?", "score": 1, "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  'AHD'", "pred_sql": "SELECT DISTINCT airlines.Airline FROM airlines JOIN flights ON airlines.Airline = flights.Airline WHERE flights.DestAirport = 'AHD';", "source_tables": ["flights", "airlines"], "error_info": ""}, {"sample_id": 236, "db_id": "flight_2", "question": "Which airlines have a flight with destination airport AHD?", "score": 1, "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  'AHD'", "pred_sql": "SELECT DISTINCT Airline FROM flights WHERE DestAirport = 'AHD';", "source_tables": ["flights", "airlines"], "error_info": ""}, {"sample_id": 237, "db_id": "flight_2", "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.", "score": 1, "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'APG' INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'CVO'", "pred_sql": "SELECT DISTINCT f1.Airline \nFROM flights f1 \nJOIN flights f2 ON f1.Airline = f2.Airline \nWHERE f1.SourceAirport = 'APG' \nAND f2.SourceAirport = 'CVO';", "source_tables": ["flights", "airlines"], "error_info": ""}, {"sample_id": 238, "db_id": "flight_2", "question": "Which airlines have departing flights from both APG and CVO airports?", "score": 1, "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'APG' INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'CVO'", "pred_sql": "SELECT DISTINCT f1.Airline \nFROM flights f1 \nJOIN flights f2 ON f1.Airline = f2.Airline \nWHERE f1.SourceAirport = 'APG' AND f2.SourceAirport = 'CVO';", "source_tables": ["flights", "airlines"], "error_info": ""}, {"sample_id": 239, "db_id": "flight_2", "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.", "score": 1, "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'CVO' EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'APG'", "pred_sql": "SELECT DISTINCT a.Airline \nFROM flights f \nJOIN airlines a ON f.Airline = a.Airline \nWHERE f.SourceAirport = 'CVO' \nAND f.Airline NOT IN (\n    SELECT DISTINCT f2.Airline \n    FROM flights f2 \n    WHERE f2.SourceAirport = 'APG'\n);", "source_tables": ["flights", "airlines"], "error_info": ""}, {"sample_id": 240, "db_id": "flight_2", "question": "Which airlines have departures from CVO but not from APG airports?", "score": 1, "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'CVO' EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'APG'", "pred_sql": "SELECT DISTINCT f1.Airline \nFROM flights f1 \nWHERE f1.SourceAirport = 'CVO' \nAND f1.Airline NOT IN ( \n    SELECT DISTINCT f2.Airline \n    FROM flights f2 \n    WHERE f2.SourceAirport = 'APG' \n);", "source_tables": ["flights", "airlines"], "error_info": ""}, {"sample_id": 241, "db_id": "flight_2", "question": "Find all airlines that have at least 10 flights.", "score": 0, "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10", "pred_sql": "SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(FlightNo) >= 10;", "source_tables": ["flights", "airlines"], "error_info": "Result not equal"}, {"sample_id": 242, "db_id": "flight_2", "question": "Which airlines have at least 10 flights?", "score": 0, "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10", "pred_sql": "SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(FlightNo) >= 10;", "source_tables": ["flights", "airlines"], "error_info": "Result not equal"}, {"sample_id": 243, "db_id": "flight_2", "question": "Find all airlines that have fewer than 200 flights.", "score": 0, "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "pred_sql": "SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(FlightNo) < 200;", "source_tables": ["flights", "airlines"], "error_info": "Result not equal"}, {"sample_id": 244, "db_id": "flight_2", "question": "Which airlines have less than 200 flights?", "score": 0, "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "pred_sql": "SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(FlightNo) < 200;", "source_tables": ["flights", "airlines"], "error_info": "Result not equal"}, {"sample_id": 245, "db_id": "flight_2", "question": "What are flight numbers of Airline \"United Airlines\"?", "score": 0, "gold_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  'United Airlines'", "pred_sql": "SELECT FlightNo FROM flights WHERE Airline = 'United Airlines';", "source_tables": ["flights", "airlines"], "error_info": "Result not equal"}, {"sample_id": 246, "db_id": "flight_2", "question": "Which flight numbers correspond to United Airlines flights?", "score": 0, "gold_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  'United Airlines'", "pred_sql": "SELECT FlightNo FROM flights WHERE Airline = 'United Airlines';", "source_tables": ["flights", "airlines"], "error_info": "Result not equal"}, {"sample_id": 247, "db_id": "flight_2", "question": "What are flight numbers of flights departing from Airport \"APG\"?", "score": 1, "gold_sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  'APG'", "pred_sql": "SELECT FlightNo FROM flights WHERE SourceAirport = 'APG';", "source_tables": ["flights"], "error_info": ""}, {"sample_id": 248, "db_id": "flight_2", "question": "Give the flight numbers of flights leaving from APG.", "score": 1, "gold_sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  'APG'", "pred_sql": "SELECT FlightNo FROM flights WHERE SourceAirport = 'APG';", "source_tables": ["flights"], "error_info": ""}, {"sample_id": 249, "db_id": "flight_2", "question": "What are flight numbers of flights arriving at Airport \"APG\"?", "score": 1, "gold_sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  'APG'", "pred_sql": "SELECT FlightNo FROM flights WHERE DestAirport = 'APG';", "source_tables": ["flights"], "error_info": ""}, {"sample_id": 250, "db_id": "flight_2", "question": "Give the flight numbers of flights landing at APG.", "score": 1, "gold_sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  'APG'", "pred_sql": "SELECT FlightNo FROM flights WHERE DestAirport = 'APG';", "source_tables": ["flights"], "error_info": ""}, {"sample_id": 251, "db_id": "flight_2", "question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "score": 1, "gold_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  'Aberdeen'", "pred_sql": "SELECT FlightNo FROM flights WHERE SourceAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');", "source_tables": ["airports", "flights"], "error_info": ""}, {"sample_id": 252, "db_id": "flight_2", "question": "Give the flight numbers of flights leaving from Aberdeen.", "score": 1, "gold_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  'Aberdeen'", "pred_sql": "SELECT FlightNo FROM flights WHERE SourceAirport IN (SELECT AirportCode FROM airports WHERE AirportName = 'Aberdeen');", "source_tables": ["airports", "flights"], "error_info": ""}, {"sample_id": 253, "db_id": "flight_2", "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "score": 1, "gold_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  'Aberdeen'", "pred_sql": "SELECT FlightNo FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');", "source_tables": ["airports", "flights"], "error_info": ""}, {"sample_id": 254, "db_id": "flight_2", "question": "Give the flight numbers of flights arriving in Aberdeen.", "score": 1, "gold_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  'Aberdeen'", "pred_sql": "SELECT FlightNo FROM flights WHERE DestAirport = (SELECT AirportCode FROM airports WHERE AirportName = 'Aberdeen')", "source_tables": ["airports", "flights"], "error_info": ""}, {"sample_id": 255, "db_id": "flight_2", "question": "Find the number of flights landing in the city of Aberdeen or Abilene.", "score": 1, "gold_sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  'Aberdeen' OR T2.city  =  'Abilene'", "pred_sql": "SELECT COUNT(*) AS NumberOfFlights FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City IN ('Aberdeen', 'Abilene');", "source_tables": ["airports", "flights"], "error_info": ""}, {"sample_id": 256, "db_id": "flight_2", "question": "How many flights land in Aberdeen or Abilene?", "score": 1, "gold_sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  'Aberdeen' OR T2.city  =  'Abilene'", "pred_sql": "SELECT COUNT(*) AS FlightCount FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE AirportName IN ('Aberdeen', 'Abilene'));", "source_tables": ["airports", "flights"], "error_info": ""}, {"sample_id": 257, "db_id": "flight_2", "question": "Find the name of airports which do not have any flight in and out.", "score": 1, "gold_sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)", "pred_sql": "SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights);", "source_tables": ["airports", "flights"], "error_info": ""}, {"sample_id": 258, "db_id": "flight_2", "question": "Which airports do not have departing or arriving flights?", "score": 0, "gold_sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)", "pred_sql": "SELECT a.AirportCode, a.AirportName FROM airports a LEFT JOIN flights f1 ON a.AirportCode = f1.SourceAirport LEFT JOIN flights f2 ON a.AirportCode = f2.DestAirport WHERE f1.FlightNo IS NULL AND f2.FlightNo IS NULL;", "source_tables": ["airports", "flights"], "error_info": "Result not equal"}, {"sample_id": 259, "db_id": "employee_hire_evaluation", "question": "How many employees are there?", "score": 1, "gold_sql": "SELECT count(*) FROM employee", "pred_sql": "SELECT COUNT(*) AS total_employees FROM employee;", "source_tables": ["employee"], "error_info": ""}, {"sample_id": 260, "db_id": "employee_hire_evaluation", "question": "Count the number of employees", "score": 1, "gold_sql": "SELECT count(*) FROM employee", "pred_sql": "SELECT COUNT(*) AS number_of_employees FROM employee;", "source_tables": ["employee"], "error_info": ""}, {"sample_id": 261, "db_id": "employee_hire_evaluation", "question": "Sort employee names by their age in ascending order.", "score": 1, "gold_sql": "SELECT name FROM employee ORDER BY age", "pred_sql": "SELECT Name FROM employee ORDER BY Age ASC;", "source_tables": ["employee"], "error_info": ""}, {"sample_id": 262, "db_id": "employee_hire_evaluation", "question": "List the names of employees and sort in ascending order of age.", "score": 1, "gold_sql": "SELECT name FROM employee ORDER BY age", "pred_sql": "SELECT Name FROM employee ORDER BY Age ASC;", "source_tables": ["employee"], "error_info": ""}, {"sample_id": 263, "db_id": "employee_hire_evaluation", "question": "What is the number of employees from each city?", "score": 1, "gold_sql": "SELECT count(*) ,  city FROM employee GROUP BY city", "pred_sql": "SELECT City, COUNT(Employee_ID) AS Number_of_Employees FROM employee GROUP BY City;", "source_tables": ["employee"], "error_info": ""}, {"sample_id": 264, "db_id": "employee_hire_evaluation", "question": "Count the number of employees for each city.", "score": 1, "gold_sql": "SELECT count(*) ,  city FROM employee GROUP BY city", "pred_sql": "SELECT City, COUNT(Employee_ID) AS Number_of_Employees FROM employee GROUP BY City;", "source_tables": ["employee"], "error_info": ""}, {"sample_id": 265, "db_id": "employee_hire_evaluation", "question": "Which cities do more than one employee under age 30 come from?", "score": 1, "gold_sql": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1", "pred_sql": "SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(Employee_ID) > 1;", "source_tables": ["employee"], "error_info": ""}, {"sample_id": 266, "db_id": "employee_hire_evaluation", "question": "Find the cities that have more than one employee under age 30.", "score": 1, "gold_sql": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1", "pred_sql": "SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(Employee_ID) > 1;", "source_tables": ["employee"], "error_info": ""}, {"sample_id": 267, "db_id": "employee_hire_evaluation", "question": "Find the number of shops in each location.", "score": 1, "gold_sql": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION", "pred_sql": "SELECT Location, COUNT(*) AS Number_of_Shops FROM shop GROUP BY Location;", "source_tables": ["shop"], "error_info": ""}, {"sample_id": 268, "db_id": "employee_hire_evaluation", "question": "How many shops are there in each location?", "score": 1, "gold_sql": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION", "pred_sql": "SELECT Location, COUNT(*) AS Number_of_Shops FROM shop GROUP BY Location;", "source_tables": ["shop"], "error_info": ""}, {"sample_id": 269, "db_id": "employee_hire_evaluation", "question": "Find the manager name and district of the shop whose number of products is the largest.", "score": 1, "gold_sql": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "pred_sql": "SELECT Manager_name, District FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop);", "source_tables": ["shop"], "error_info": ""}, {"sample_id": 270, "db_id": "employee_hire_evaluation", "question": "What are the manager name and district of the shop that sells the largest number of products?", "score": 1, "gold_sql": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "pred_sql": "SELECT Manager_name, District FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop);", "source_tables": ["shop"], "error_info": ""}, {"sample_id": 271, "db_id": "employee_hire_evaluation", "question": "find the minimum and maximum number of products of all stores.", "score": 1, "gold_sql": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "pred_sql": "SELECT MIN(Number_products) AS Min_Products, MAX(Number_products) AS Max_Products FROM shop;", "source_tables": ["shop"], "error_info": ""}, {"sample_id": 272, "db_id": "employee_hire_evaluation", "question": "What are the minimum and maximum number of products across all the shops?", "score": 1, "gold_sql": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "pred_sql": "SELECT MIN(Number_products) AS Min_Products, MAX(Number_products) AS Max_Products FROM shop;", "source_tables": ["shop"], "error_info": ""}, {"sample_id": 273, "db_id": "employee_hire_evaluation", "question": "Return the name, location and district of all shops in descending order of number of products.", "score": 1, "gold_sql": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC", "pred_sql": "SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;", "source_tables": ["shop"], "error_info": ""}, {"sample_id": 274, "db_id": "employee_hire_evaluation", "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.", "score": 1, "gold_sql": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC", "pred_sql": "SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;", "source_tables": ["shop"], "error_info": ""}, {"sample_id": 275, "db_id": "employee_hire_evaluation", "question": "Find the names of stores whose number products is more than the average number of products.", "score": 1, "gold_sql": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)", "pred_sql": "SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop);", "source_tables": ["shop"], "error_info": ""}, {"sample_id": 276, "db_id": "employee_hire_evaluation", "question": "Which shops' number products is above the average? Give me the shop names.", "score": 1, "gold_sql": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)", "pred_sql": "SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop);", "source_tables": ["shop"], "error_info": ""}, {"sample_id": 277, "db_id": "employee_hire_evaluation", "question": "find the name of employee who was awarded the most times in the evaluation.", "score": 1, "gold_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT e.Name\nFROM employee e\nJOIN evaluation ev ON e.Employee_ID = ev.Employee_ID\nGROUP BY e.Employee_ID\nORDER BY COUNT(ev.Year_awarded) DESC\nLIMIT 1;", "source_tables": ["employee", "evaluation"], "error_info": ""}, {"sample_id": 278, "db_id": "employee_hire_evaluation", "question": "Which employee received the most awards in evaluations? Give me the employee name.", "score": 1, "gold_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID GROUP BY e.Employee_ID ORDER BY COUNT(ev.Year_awarded) DESC LIMIT 1;", "source_tables": ["employee", "evaluation"], "error_info": ""}, {"sample_id": 279, "db_id": "employee_hire_evaluation", "question": "Find the name of the employee who got the highest one time bonus.", "score": 1, "gold_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "pred_sql": "SELECT e.Name FROM evaluation ev JOIN employee e ON ev.Employee_ID = e.Employee_ID ORDER BY ev.Bonus DESC LIMIT 1;", "source_tables": ["employee", "evaluation"], "error_info": ""}, {"sample_id": 280, "db_id": "employee_hire_evaluation", "question": "Which employee received the biggest bonus? Give me the employee name.", "score": 1, "gold_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "pred_sql": "SELECT e.Name FROM evaluation ev JOIN employee e ON ev.Employee_ID = e.Employee_ID ORDER BY ev.Bonus DESC LIMIT 1;", "source_tables": ["employee", "evaluation"], "error_info": ""}, {"sample_id": 281, "db_id": "employee_hire_evaluation", "question": "Find the names of employees who never won any award in the evaluation.", "score": 1, "gold_sql": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)", "pred_sql": "SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation);", "source_tables": ["employee", "evaluation"], "error_info": ""}, {"sample_id": 282, "db_id": "employee_hire_evaluation", "question": "What are the names of the employees who never received any evaluation?", "score": 1, "gold_sql": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)", "pred_sql": "SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation);", "source_tables": ["employee", "evaluation"], "error_info": ""}, {"sample_id": 283, "db_id": "employee_hire_evaluation", "question": "What is the name of the shop that is hiring the largest number of employees?", "score": 1, "gold_sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Shop_ID ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1;", "source_tables": ["hiring", "shop"], "error_info": ""}, {"sample_id": 284, "db_id": "employee_hire_evaluation", "question": "Which shop has the most employees? Give me the shop name.", "score": 1, "gold_sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Shop_ID ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1;", "source_tables": ["hiring", "shop"], "error_info": ""}, {"sample_id": 285, "db_id": "employee_hire_evaluation", "question": "Find the name of the shops that do not hire any employee.", "score": 1, "gold_sql": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)", "pred_sql": "SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL;", "source_tables": ["hiring", "shop"], "error_info": ""}, {"sample_id": 286, "db_id": "employee_hire_evaluation", "question": "Which shops run with no employees? Find the shop names", "score": 1, "gold_sql": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)", "pred_sql": "SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL;", "source_tables": ["hiring", "shop"], "error_info": ""}, {"sample_id": 287, "db_id": "employee_hire_evaluation", "question": "Find the number of employees hired in each shop; show the shop name as well.", "score": 1, "gold_sql": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name", "pred_sql": "SELECT shop.Name, COUNT(hiring.Employee_ID) AS Number_of_Employees\nFROM hiring\nJOIN shop ON hiring.Shop_ID = shop.Shop_ID\nGROUP BY shop.Name;", "source_tables": ["hiring", "shop"], "error_info": ""}, {"sample_id": 288, "db_id": "employee_hire_evaluation", "question": "For each shop, return the number of employees working there and the name of the shop.", "score": 0, "gold_sql": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name", "pred_sql": "SELECT shop.Name, COUNT(hiring.Employee_ID) AS Number_of_Employees\nFROM shop\nLEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID\nGROUP BY shop.Shop_ID;", "source_tables": ["hiring", "shop"], "error_info": "Result not equal"}, {"sample_id": 289, "db_id": "employee_hire_evaluation", "question": "What is total bonus given in all evaluations?", "score": 1, "gold_sql": "SELECT sum(bonus) FROM evaluation", "pred_sql": "SELECT SUM(Bonus) AS Total_Bonus FROM evaluation;", "source_tables": ["evaluation"], "error_info": ""}, {"sample_id": 290, "db_id": "employee_hire_evaluation", "question": "Find the total amount of bonus given in all the evaluations.", "score": 1, "gold_sql": "SELECT sum(bonus) FROM evaluation", "pred_sql": "SELECT SUM(Bonus) AS Total_Bonus FROM evaluation;", "source_tables": ["evaluation"], "error_info": ""}, {"sample_id": 291, "db_id": "employee_hire_evaluation", "question": "Give me all the information about hiring.", "score": 1, "gold_sql": "SELECT * FROM hiring", "pred_sql": "SELECT * FROM hiring;", "source_tables": ["hiring"], "error_info": ""}, {"sample_id": 292, "db_id": "employee_hire_evaluation", "question": "What is all the information about hiring?", "score": 1, "gold_sql": "SELECT * FROM hiring", "pred_sql": "SELECT * FROM hiring;", "source_tables": ["hiring"], "error_info": ""}, {"sample_id": 293, "db_id": "employee_hire_evaluation", "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?", "score": 1, "gold_sql": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000", "pred_sql": "SELECT DISTINCT s1.District\nFROM shop s1\nJOIN shop s2 ON s1.District = s2.District\nWHERE s1.Number_products < 3000 AND s2.Number_products > 10000;", "source_tables": ["shop"], "error_info": ""}, {"sample_id": 294, "db_id": "employee_hire_evaluation", "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.", "score": 1, "gold_sql": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000", "pred_sql": "SELECT DISTINCT s1.District\nFROM shop s1\nJOIN shop s2 ON s1.District = s2.District\nWHERE s1.Number_products < 3000 AND s2.Number_products > 10000;", "source_tables": ["shop"], "error_info": ""}, {"sample_id": 295, "db_id": "employee_hire_evaluation", "question": "How many different store locations are there?", "score": 1, "gold_sql": "SELECT count(DISTINCT LOCATION) FROM shop", "pred_sql": "SELECT COUNT(DISTINCT Location) AS Different_Locations FROM shop;", "source_tables": ["shop"], "error_info": ""}, {"sample_id": 296, "db_id": "employee_hire_evaluation", "question": "Count the number of distinct store locations.", "score": 1, "gold_sql": "SELECT count(DISTINCT LOCATION) FROM shop", "pred_sql": "SELECT COUNT(DISTINCT Location) AS distinct_store_locations FROM shop;", "source_tables": ["shop"], "error_info": ""}, {"sample_id": 297, "db_id": "cre_Doc_Template_Mgt", "question": "How many documents do we have?", "score": 1, "gold_sql": "SELECT count(*) FROM Documents", "pred_sql": "SELECT COUNT(*) AS Document_Count FROM Documents;", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 298, "db_id": "cre_Doc_Template_Mgt", "question": "Count the number of documents.", "score": 1, "gold_sql": "SELECT count(*) FROM Documents", "pred_sql": "SELECT COUNT(*) AS Document_Count FROM Documents;", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 299, "db_id": "cre_Doc_Template_Mgt", "question": "List document IDs, document names, and document descriptions for all documents.", "score": 1, "gold_sql": "SELECT document_id ,  document_name ,  document_description FROM Documents", "pred_sql": "SELECT Document_ID, Document_Name, Document_Description FROM Documents;", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 300, "db_id": "cre_Doc_Template_Mgt", "question": "What are the ids, names, and descriptions for all documents?", "score": 1, "gold_sql": "SELECT document_id ,  document_name ,  document_description FROM Documents", "pred_sql": "SELECT Document_ID, Document_Name, Document_Description FROM Documents;", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 301, "db_id": "cre_Doc_Template_Mgt", "question": "What is the document name and template id for document with description with the letter 'w' in it?", "score": 1, "gold_sql": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE '%w%'", "pred_sql": "SELECT Documents.Document_Name, Documents.Template_ID \nFROM Documents \nWHERE Documents.Document_Description LIKE '%w%';", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 302, "db_id": "cre_Doc_Template_Mgt", "question": "Return the names and template ids for documents that contain the letter w in their description.", "score": 1, "gold_sql": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE '%w%'", "pred_sql": "SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%';", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 303, "db_id": "cre_Doc_Template_Mgt", "question": "What is the document id, template id and description for document named \"Robbin CV\"?", "score": 1, "gold_sql": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  'Robbin CV'", "pred_sql": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = 'Robbin CV';", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 304, "db_id": "cre_Doc_Template_Mgt", "question": "Return the document id, template id, and description for the document with the name Robbin CV.", "score": 1, "gold_sql": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  'Robbin CV'", "pred_sql": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = 'Robbin CV';", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 305, "db_id": "cre_Doc_Template_Mgt", "question": "How many different templates do all document use?", "score": 1, "gold_sql": "SELECT count(DISTINCT template_id) FROM Documents", "pred_sql": "SELECT COUNT(DISTINCT Template_ID) AS Different_Template_Count FROM Documents;", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 306, "db_id": "cre_Doc_Template_Mgt", "question": "Count the number of different templates used for documents.", "score": 1, "gold_sql": "SELECT count(DISTINCT template_id) FROM Documents", "pred_sql": "SELECT COUNT(DISTINCT Template_ID) AS Different_Template_Count FROM Templates WHERE Template_ID IN (SELECT DISTINCT Template_ID FROM Documents);", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 307, "db_id": "cre_Doc_Template_Mgt", "question": "How many documents are using the template with type code 'PPT'?", "score": 1, "gold_sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "pred_sql": "SELECT COUNT(DISTINCT Documents.Document_ID) AS Document_Count\nFROM Documents\nJOIN Templates ON Documents.Template_ID = Templates.Template_ID\nWHERE Templates.Template_Type_Code = 'PPT';", "source_tables": ["templates", "documents"], "error_info": ""}, {"sample_id": 308, "db_id": "cre_Doc_Template_Mgt", "question": "Count the number of documents that use the PPT template type.", "score": 0, "gold_sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "pred_sql": "SELECT COUNT(DISTINCT Documents.Document_ID) AS Document_Count\nFROM Documents\nJOIN Templates ON Documents.Template_ID = Templates.Template_ID\nJOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nWHERE Ref_Template_Types.Template_Type_Description = 'PPT';", "source_tables": ["templates", "documents"], "error_info": "Result not equal"}, {"sample_id": 309, "db_id": "cre_Doc_Template_Mgt", "question": "Show all template ids and number of documents using each template.", "score": 0, "gold_sql": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "pred_sql": "SELECT Templates.Template_ID, COUNT(Documents.Document_ID) AS Document_Count\nFROM Templates\nLEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID\nGROUP BY Templates.Template_ID;", "source_tables": ["documents"], "error_info": "Result not equal"}, {"sample_id": 310, "db_id": "cre_Doc_Template_Mgt", "question": "What are all different template ids used for documents, and how many times were each of them used?", "score": 1, "gold_sql": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "pred_sql": "SELECT Templates.Template_ID, COUNT(Documents.Document_ID) AS Usage_Count\nFROM Templates\nJOIN Documents ON Templates.Template_ID = Documents.Template_ID\nGROUP BY Templates.Template_ID;", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 311, "db_id": "cre_Doc_Template_Mgt", "question": "What is the id and type code for the template used by the most documents?", "score": 0, "gold_sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT Templates.Template_ID, Templates.Template_Type_Code\nFROM Templates\nJOIN Documents ON Templates.Template_ID = Documents.Template_ID\nGROUP BY Templates.Template_ID, Templates.Template_Type_Code\nORDER BY COUNT(Documents.Document_ID) DESC\nLIMIT 1;", "source_tables": ["templates", "documents"], "error_info": "Result not equal"}, {"sample_id": 312, "db_id": "cre_Doc_Template_Mgt", "question": "Return the id and type code of the template that is used for the greatest number of documents.", "score": 0, "gold_sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT Templates.Template_ID, Templates.Template_Type_Code\nFROM Templates\nJOIN Documents ON Templates.Template_ID = Documents.Template_ID\nGROUP BY Templates.Template_ID, Templates.Template_Type_Code\nORDER BY COUNT(Documents.Document_ID) DESC\nLIMIT 1;", "source_tables": ["templates", "documents"], "error_info": "Result not equal"}, {"sample_id": 313, "db_id": "cre_Doc_Template_Mgt", "question": "Show ids for all templates that are used by more than one document.", "score": 1, "gold_sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "pred_sql": "SELECT Templates.Template_ID\nFROM Templates\nJOIN Documents ON Templates.Template_ID = Documents.Template_ID\nGROUP BY Templates.Template_ID\nHAVING COUNT(Documents.Document_ID) > 1;", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 314, "db_id": "cre_Doc_Template_Mgt", "question": "What are the template ids of any templates used in more than a single document?", "score": 1, "gold_sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "pred_sql": "SELECT Templates.Template_ID\nFROM Templates\nJOIN Documents ON Templates.Template_ID = Documents.Template_ID\nGROUP BY Templates.Template_ID\nHAVING COUNT(Documents.Document_ID) > 1;", "source_tables": ["documents"], "error_info": ""}, {"sample_id": 315, "db_id": "cre_Doc_Template_Mgt", "question": "Show ids for all templates not used by any document.", "score": 1, "gold_sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "pred_sql": "SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents);", "source_tables": ["templates", "documents"], "error_info": ""}, {"sample_id": 316, "db_id": "cre_Doc_Template_Mgt", "question": "What are the ids for templates that are not used in any documents?", "score": 1, "gold_sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "pred_sql": "SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT DISTINCT Template_ID FROM Documents);", "source_tables": ["templates", "documents"], "error_info": ""}, {"sample_id": 317, "db_id": "cre_Doc_Template_Mgt", "question": "How many templates do we have?", "score": 1, "gold_sql": "SELECT count(*) FROM Templates", "pred_sql": "SELECT COUNT(*) AS Template_Count FROM Templates;", "source_tables": ["templates"], "error_info": ""}, {"sample_id": 318, "db_id": "cre_Doc_Template_Mgt", "question": "Count the number of templates.", "score": 1, "gold_sql": "SELECT count(*) FROM Templates", "pred_sql": "SELECT COUNT(*) AS Template_Count FROM Templates;", "source_tables": ["templates"], "error_info": ""}, {"sample_id": 319, "db_id": "cre_Doc_Template_Mgt", "question": "Show template ids, version numbers, and template type codes for all templates.", "score": 1, "gold_sql": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "pred_sql": "SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;", "source_tables": ["templates"], "error_info": ""}, {"sample_id": 320, "db_id": "cre_Doc_Template_Mgt", "question": "What are the ids, version numbers, and type codes for each template?", "score": 1, "gold_sql": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "pred_sql": "SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;", "source_tables": ["templates"], "error_info": ""}, {"sample_id": 321, "db_id": "cre_Doc_Template_Mgt", "question": "Show all distinct template type codes for all templates.", "score": 1, "gold_sql": "SELECT DISTINCT template_type_code FROM Templates", "pred_sql": "SELECT DISTINCT Template_Type_Code FROM Templates;", "source_tables": ["templates"], "error_info": ""}, {"sample_id": 322, "db_id": "cre_Doc_Template_Mgt", "question": "What are the different template type codes?", "score": 1, "gold_sql": "SELECT DISTINCT template_type_code FROM Templates", "pred_sql": "SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types;", "source_tables": ["templates"], "error_info": ""}, {"sample_id": 323, "db_id": "cre_Doc_Template_Mgt", "question": "What are the ids of templates with template type code PP or PPT?", "score": 1, "gold_sql": "SELECT template_id FROM Templates WHERE template_type_code  =  'PP' OR template_type_code  =  'PPT'", "pred_sql": "SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT');", "source_tables": ["templates"], "error_info": ""}, {"sample_id": 324, "db_id": "cre_Doc_Template_Mgt", "question": "Return the ids of templates that have the code PP or PPT.", "score": 1, "gold_sql": "SELECT template_id FROM Templates WHERE template_type_code  =  'PP' OR template_type_code  =  'PPT'", "pred_sql": "SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT');", "source_tables": ["templates"], "error_info": ""}, {"sample_id": 325, "db_id": "cre_Doc_Template_Mgt", "question": "How many templates have template type code CV?", "score": 1, "gold_sql": "SELECT count(*) FROM Templates WHERE template_type_code  =  'CV'", "pred_sql": "SELECT COUNT(*) AS Template_Count FROM Templates WHERE Template_Type_Code = 'CV';", "source_tables": ["templates"], "error_info": ""}, {"sample_id": 326, "db_id": "cre_Doc_Template_Mgt", "question": "Count the number of templates of the type CV.", "score": 1, "gold_sql": "SELECT count(*) FROM Templates WHERE template_type_code  =  'CV'", "pred_sql": "SELECT COUNT(*) AS Template_Count FROM Templates WHERE Template_Type_Code = 'CV';", "source_tables": ["templates"], "error_info": ""}, {"sample_id": 327, "db_id": "cre_Doc_Template_Mgt", "question": "What is the version number and template type code for the template with version number later than 5?", "score": 1, "gold_sql": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "pred_sql": "SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > '5';", "source_tables": ["templates"], "error_info": ""}, {"sample_id": 328, "db_id": "cre_Doc_Template_Mgt", "question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "score": 1, "gold_sql": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "pred_sql": "SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > '5';", "source_tables": ["templates"], "error_info": ""}, {"sample_id": 329, "db_id": "cre_Doc_Template_Mgt", "question": "Show all template type codes and number of templates for each.", "score": 1, "gold_sql": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "pred_sql": "SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) AS Number_of_Templates\nFROM Ref_Template_Types\nLEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code\nGROUP BY Ref_Template_Types.Template_Type_Code;", "source_tables": ["templates"], "error_info": ""}, {"sample_id": 330, "db_id": "cre_Doc_Template_Mgt", "question": "What are the different template type codes, and how many templates correspond to each?", "score": 1, "gold_sql": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "pred_sql": "SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) AS Template_Count\nFROM Ref_Template_Types\nLEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code\nGROUP BY Ref_Template_Types.Template_Type_Code;", "source_tables": ["templates"], "error_info": ""}, {"sample_id": 331, "db_id": "cre_Doc_Template_Mgt", "question": "Which template type code has most number of templates?", "score": 1, "gold_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;", "source_tables": ["templates"], "error_info": ""}, {"sample_id": 332, "db_id": "cre_Doc_Template_Mgt", "question": "Return the type code of the template type that the most templates belong to.", "score": 1, "gold_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT Template_Type_Code\nFROM Templates\nGROUP BY Template_Type_Code\nORDER BY COUNT(*) DESC\nLIMIT 1;", "source_tables": ["templates"], "error_info": ""}, {"sample_id": 333, "db_id": "cre_Doc_Template_Mgt", "question": "Show all template type codes with less than three templates.", "score": 1, "gold_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "pred_sql": "SELECT r.Template_Type_Code \nFROM Ref_Template_Types r \nLEFT JOIN Templates t ON r.Template_Type_Code = t.Template_Type_Code \nGROUP BY r.Template_Type_Code \nHAVING COUNT(t.Template_ID) < 3;", "source_tables": ["templates"], "error_info": ""}, {"sample_id": 334, "db_id": "cre_Doc_Template_Mgt", "question": "What are the codes of template types that have fewer than 3 templates?", "score": 1, "gold_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "pred_sql": "SELECT Ref_Template_Types.Template_Type_Code\nFROM Ref_Template_Types\nLEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code\nGROUP BY Ref_Template_Types.Template_Type_Code\nHAVING COUNT(Templates.Template_ID) < 3;", "source_tables": ["templates"], "error_info": ""}, {"sample_id": 335, "db_id": "cre_Doc_Template_Mgt", "question": "What the smallest version number and its template type code?", "score": 0, "gold_sql": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "pred_sql": "SELECT MIN(Version_Number) AS Smallest_Version_Number, Template_Type_Code FROM Templates GROUP BY Template_Type_Code;", "source_tables": ["templates"], "error_info": "Result not equal"}, {"sample_id": 336, "db_id": "cre_Doc_Template_Mgt", "question": "Return the lowest version number, along with its corresponding template type code.", "score": 0, "gold_sql": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "pred_sql": "SELECT MIN(Version_Number) AS Lowest_Version, Template_Type_Code FROM Templates GROUP BY Template_Type_Code;", "source_tables": ["templates"], "error_info": "Result not equal"}, {"sample_id": 337, "db_id": "cre_Doc_Template_Mgt", "question": "What is the template type code of the template used by document with the name \"Data base\"?", "score": 1, "gold_sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  'Data base'", "pred_sql": "SELECT Templates.Template_Type_Code \nFROM Documents \nJOIN Templates ON Documents.Template_ID = Templates.Template_ID \nWHERE Documents.Document_Name = 'Data base';", "source_tables": ["templates", "documents"], "error_info": ""}, {"sample_id": 338, "db_id": "cre_Doc_Template_Mgt", "question": "Return the template type code of the template that is used by a document named Data base.", "score": 1, "gold_sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  'Data base'", "pred_sql": "SELECT Templates.Template_Type_Code \nFROM Documents \nJOIN Templates ON Documents.Template_ID = Templates.Template_ID \nWHERE Documents.Document_Name = 'Data base';", "source_tables": ["templates", "documents"], "error_info": ""}, {"sample_id": 339, "db_id": "cre_Doc_Template_Mgt", "question": "Show all document names using templates with template type code BK.", "score": 1, "gold_sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  'BK'", "pred_sql": "SELECT Documents.Document_Name \nFROM Documents \nJOIN Templates ON Documents.Template_ID = Templates.Template_ID \nWHERE Templates.Template_Type_Code = 'BK';", "source_tables": ["templates", "documents"], "error_info": ""}, {"sample_id": 340, "db_id": "cre_Doc_Template_Mgt", "question": "What are the names of documents that use templates with the code BK?", "score": 1, "gold_sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  'BK'", "pred_sql": "SELECT Documents.Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK';", "source_tables": ["templates", "documents"], "error_info": ""}, {"sample_id": 341, "db_id": "cre_Doc_Template_Mgt", "question": "Show all template type codes and the number of documents using each type.", "score": 0, "gold_sql": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "pred_sql": "SELECT Ref_Template_Types.Template_Type_Code, COUNT(Documents.Document_ID) AS Document_Count\nFROM Ref_Template_Types\nLEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code\nLEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID\nGROUP BY Ref_Template_Types.Template_Type_Code;", "source_tables": ["templates", "documents"], "error_info": "Result not equal"}, {"sample_id": 342, "db_id": "cre_Doc_Template_Mgt", "question": "What are the different template type codes, and how many documents use each type?", "score": 0, "gold_sql": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "pred_sql": "SELECT RTT.Template_Type_Code, COUNT(D.Document_ID) AS Document_Count\nFROM Ref_Template_Types RTT\nLEFT JOIN Templates T ON RTT.Template_Type_Code = T.Template_Type_Code\nLEFT JOIN Documents D ON T.Template_ID = D.Template_ID\nGROUP BY RTT.Template_Type_Code;", "source_tables": ["templates", "documents"], "error_info": "Result not equal"}, {"sample_id": 343, "db_id": "cre_Doc_Template_Mgt", "question": "Which template type code is used by most number of documents?", "score": 1, "gold_sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT Templates.Template_Type_Code\nFROM Documents\nJOIN Templates ON Documents.Template_ID = Templates.Template_ID\nGROUP BY Templates.Template_Type_Code\nORDER BY COUNT(Documents.Document_ID) DESC\nLIMIT 1;", "source_tables": ["templates", "documents"], "error_info": ""}, {"sample_id": 344, "db_id": "cre_Doc_Template_Mgt", "question": "Return the code of the template type that is most commonly used in documents.", "score": 1, "gold_sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT Template_Type_Code\nFROM Documents d\nJOIN Templates t ON d.Template_ID = t.Template_ID\nGROUP BY Template_Type_Code\nORDER BY COUNT(*) DESC\nLIMIT 1;", "source_tables": ["templates", "documents"], "error_info": ""}, {"sample_id": 345, "db_id": "cre_Doc_Template_Mgt", "question": "Show all template type codes that are not used by any document.", "score": 0, "gold_sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "pred_sql": "SELECT Ref_Template_Types.Template_Type_Code \nFROM Ref_Template_Types \nLEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code \nLEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID \nWHERE Documents.Document_ID IS NULL;", "source_tables": ["templates", "documents"], "error_info": "Result not equal"}, {"sample_id": 346, "db_id": "cre_Doc_Template_Mgt", "question": "What are the codes of template types that are not used for any document?", "score": 0, "gold_sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "pred_sql": "SELECT Ref_Template_Types.Template_Type_Code \nFROM Ref_Template_Types \nLEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code \nLEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID \nWHERE Documents.Document_ID IS NULL;", "source_tables": ["templates", "documents"], "error_info": "Result not equal"}, {"sample_id": 347, "db_id": "cre_Doc_Template_Mgt", "question": "Show all template type codes and descriptions.", "score": 1, "gold_sql": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "pred_sql": "SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;", "source_tables": ["ref_template_types"], "error_info": ""}, {"sample_id": 348, "db_id": "cre_Doc_Template_Mgt", "question": "What are the type codes and descriptions for all template types?", "score": 1, "gold_sql": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "pred_sql": "SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;", "source_tables": ["ref_template_types"], "error_info": ""}, {"sample_id": 349, "db_id": "cre_Doc_Template_Mgt", "question": "What is the template type descriptions for template type code \"AD\".", "score": 1, "gold_sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  'AD'", "pred_sql": "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';", "source_tables": ["ref_template_types"], "error_info": ""}, {"sample_id": 350, "db_id": "cre_Doc_Template_Mgt", "question": "Return the template type description of the template type with the code AD.", "score": 1, "gold_sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  'AD'", "pred_sql": "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';", "source_tables": ["ref_template_types"], "error_info": ""}, {"sample_id": 351, "db_id": "cre_Doc_Template_Mgt", "question": "What is the template type code for template type description \"Book\".", "score": 1, "gold_sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  'Book'", "pred_sql": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';", "source_tables": ["ref_template_types"], "error_info": ""}, {"sample_id": 352, "db_id": "cre_Doc_Template_Mgt", "question": "Return the type code of the template type with the description \"Book\".", "score": 1, "gold_sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  'Book'", "pred_sql": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';", "source_tables": ["ref_template_types"], "error_info": ""}, {"sample_id": 353, "db_id": "cre_Doc_Template_Mgt", "question": "What are the distinct template type descriptions for the templates ever used by any document?", "score": 1, "gold_sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "pred_sql": "SELECT DISTINCT r.Template_Type_Description\nFROM Ref_Template_Types r\nJOIN Templates t ON r.Template_Type_Code = t.Template_Type_Code\nJOIN Documents d ON t.Template_ID = d.Template_ID;", "source_tables": ["ref_template_types", "templates", "documents"], "error_info": ""}, {"sample_id": 354, "db_id": "cre_Doc_Template_Mgt", "question": "Return the different descriptions for templates that have been used in a document.", "score": 1, "gold_sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "pred_sql": "SELECT DISTINCT rt.Template_Type_Description\nFROM Ref_Template_Types rt\nJOIN Templates t ON rt.Template_Type_Code = t.Template_Type_Code\nJOIN Documents d ON t.Template_ID = d.Template_ID;", "source_tables": ["ref_template_types", "templates", "documents"], "error_info": ""}, {"sample_id": 355, "db_id": "cre_Doc_Template_Mgt", "question": "What are the template ids with template type description \"Presentation\".", "score": 1, "gold_sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  'Presentation'", "pred_sql": "SELECT Templates.Template_ID \nFROM Templates \nJOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code \nWHERE Ref_Template_Types.Template_Type_Description = 'Presentation';", "source_tables": ["ref_template_types", "templates"], "error_info": ""}, {"sample_id": 356, "db_id": "cre_Doc_Template_Mgt", "question": "Return the ids corresponding to templates with the description 'Presentation'.", "score": 1, "gold_sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  'Presentation'", "pred_sql": "SELECT Template_ID FROM Templates WHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Presentation')", "source_tables": ["ref_template_types", "templates"], "error_info": ""}, {"sample_id": 357, "db_id": "cre_Doc_Template_Mgt", "question": "How many paragraphs in total?", "score": 1, "gold_sql": "SELECT count(*) FROM Paragraphs", "pred_sql": "SELECT COUNT(*) AS Total_Paragraphs FROM Paragraphs;", "source_tables": ["paragraphs"], "error_info": ""}, {"sample_id": 358, "db_id": "cre_Doc_Template_Mgt", "question": "Count the number of paragraphs.", "score": 1, "gold_sql": "SELECT count(*) FROM Paragraphs", "pred_sql": "SELECT COUNT(*) AS Paragraph_Count FROM Paragraphs;", "source_tables": ["paragraphs"], "error_info": ""}, {"sample_id": 359, "db_id": "cre_Doc_Template_Mgt", "question": "How many paragraphs for the document with name 'Summer Show'?", "score": 1, "gold_sql": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "pred_sql": "SELECT COUNT(*) AS Paragraph_Count FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Summer Show';", "source_tables": ["paragraphs", "documents"], "error_info": ""}, {"sample_id": 360, "db_id": "cre_Doc_Template_Mgt", "question": "Count the number of paragraphs in the document named 'Summer Show'.", "score": 1, "gold_sql": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "pred_sql": "SELECT COUNT(*) AS Paragraph_Count\nFROM Paragraphs p\nJOIN Documents d ON p.Document_ID = d.Document_ID\nWHERE d.Document_Name = 'Summer Show';", "source_tables": ["paragraphs", "documents"], "error_info": ""}, {"sample_id": 361, "db_id": "cre_Doc_Template_Mgt", "question": "Show paragraph details for paragraph with text 'Korea ' .", "score": 0, "gold_sql": "select other_details from paragraphs where paragraph_text like 'korea'", "pred_sql": "SELECT p.Paragraph_ID, p.Paragraph_Text, p.Other_Details \nFROM Paragraphs p \nWHERE p.Paragraph_Text = 'Korea ';", "source_tables": ["paragraphs"], "error_info": "Result not equal"}, {"sample_id": 362, "db_id": "cre_Doc_Template_Mgt", "question": "What are the details for the paragraph that includes the text 'Korea ' ?", "score": 0, "gold_sql": "select other_details from paragraphs where paragraph_text like 'korea'", "pred_sql": "SELECT Paragraphs.* FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%';", "source_tables": ["paragraphs"], "error_info": "Result not equal"}, {"sample_id": 363, "db_id": "cre_Doc_Template_Mgt", "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "score": 1, "gold_sql": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "pred_sql": "SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text \nFROM Paragraphs \nJOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID \nWHERE Documents.Document_Name = 'Welcome to NY';", "source_tables": ["paragraphs", "documents"], "error_info": ""}, {"sample_id": 364, "db_id": "cre_Doc_Template_Mgt", "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "score": 1, "gold_sql": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "pred_sql": "SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text \nFROM Paragraphs \nJOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID \nWHERE Documents.Document_Name = 'Welcome to NY';", "source_tables": ["paragraphs", "documents"], "error_info": ""}, {"sample_id": 365, "db_id": "cre_Doc_Template_Mgt", "question": "Show all paragraph texts for the document \"Customer reviews\".", "score": 1, "gold_sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  'Customer reviews'", "pred_sql": "SELECT Paragraphs.Paragraph_Text \nFROM Paragraphs \nJOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID \nWHERE Documents.Document_Name = 'Customer reviews';", "source_tables": ["paragraphs", "documents"], "error_info": ""}, {"sample_id": 366, "db_id": "cre_Doc_Template_Mgt", "question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "score": 1, "gold_sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  'Customer reviews'", "pred_sql": "SELECT Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Customer reviews';", "source_tables": ["paragraphs", "documents"], "error_info": ""}, {"sample_id": 367, "db_id": "cre_Doc_Template_Mgt", "question": "Show all document ids and the number of paragraphs in each document. Order by document id.", "score": 0, "gold_sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "pred_sql": "SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Number_of_Paragraphs\nFROM Documents\nLEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nGROUP BY Documents.Document_ID\nORDER BY Documents.Document_ID;", "source_tables": ["paragraphs"], "error_info": "Result not equal"}, {"sample_id": 368, "db_id": "cre_Doc_Template_Mgt", "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.", "score": 0, "gold_sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "pred_sql": "SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Number_of_Paragraphs\nFROM Documents\nLEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nGROUP BY Documents.Document_ID\nORDER BY Documents.Document_ID;", "source_tables": ["paragraphs"], "error_info": "Result not equal"}, {"sample_id": 369, "db_id": "cre_Doc_Template_Mgt", "question": "Show all document ids, names and the number of paragraphs in each document.", "score": 0, "gold_sql": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id", "pred_sql": "SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS Number_of_Paragraphs\nFROM Documents\nLEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nGROUP BY Documents.Document_ID, Documents.Document_Name;", "source_tables": ["paragraphs", "documents"], "error_info": "Result not equal"}, {"sample_id": 370, "db_id": "cre_Doc_Template_Mgt", "question": "What are the ids and names of each document, as well as the number of paragraphs in each?", "score": 0, "gold_sql": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id", "pred_sql": "SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS Number_of_Paragraphs\nFROM Documents\nLEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nGROUP BY Documents.Document_ID, Documents.Document_Name;", "source_tables": ["paragraphs", "documents"], "error_info": "Result not equal"}, {"sample_id": 371, "db_id": "cre_Doc_Template_Mgt", "question": "List all document ids with at least two paragraphs.", "score": 1, "gold_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "pred_sql": "SELECT d.Document_ID\nFROM Documents d\nJOIN Paragraphs p ON d.Document_ID = p.Document_ID\nGROUP BY d.Document_ID\nHAVING COUNT(p.Paragraph_ID) >= 2;", "source_tables": ["paragraphs"], "error_info": ""}, {"sample_id": 372, "db_id": "cre_Doc_Template_Mgt", "question": "What are the ids of documents that have 2 or more paragraphs?", "score": 1, "gold_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "pred_sql": "SELECT Documents.Document_ID\nFROM Documents\nJOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nGROUP BY Documents.Document_ID\nHAVING COUNT(Paragraphs.Paragraph_ID) >= 2;", "source_tables": ["paragraphs"], "error_info": ""}, {"sample_id": 373, "db_id": "cre_Doc_Template_Mgt", "question": "What is the document id and name with greatest number of paragraphs?", "score": 1, "gold_sql": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT Documents.Document_ID, Documents.Document_Name\nFROM Documents\nJOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nGROUP BY Documents.Document_ID, Documents.Document_Name\nORDER BY COUNT(Paragraphs.Paragraph_ID) DESC\nLIMIT 1;", "source_tables": ["paragraphs", "documents"], "error_info": ""}, {"sample_id": 374, "db_id": "cre_Doc_Template_Mgt", "question": "Return the id and name of the document with the most paragraphs.", "score": 1, "gold_sql": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT Documents.Document_ID, Documents.Document_Name\nFROM Documents\nJOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nGROUP BY Documents.Document_ID, Documents.Document_Name\nORDER BY COUNT(Paragraphs.Paragraph_ID) DESC\nLIMIT 1;", "source_tables": ["paragraphs", "documents"], "error_info": ""}, {"sample_id": 375, "db_id": "cre_Doc_Template_Mgt", "question": "What is the document id with least number of paragraphs?", "score": 1, "gold_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1", "pred_sql": "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(Paragraph_ID) ASC LIMIT 1;", "source_tables": ["paragraphs"], "error_info": ""}, {"sample_id": 376, "db_id": "cre_Doc_Template_Mgt", "question": "Return the id of the document with the fewest paragraphs.", "score": 1, "gold_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1", "pred_sql": "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(Paragraph_ID) ASC LIMIT 1;", "source_tables": ["paragraphs"], "error_info": ""}, {"sample_id": 377, "db_id": "cre_Doc_Template_Mgt", "question": "What is the document id with 1 to 2 paragraphs?", "score": 1, "gold_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2", "pred_sql": "SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID HAVING COUNT(p.Paragraph_ID) BETWEEN 1 AND 2;", "source_tables": ["paragraphs"], "error_info": ""}, {"sample_id": 378, "db_id": "cre_Doc_Template_Mgt", "question": "Give the ids of documents that have between one and two paragraphs.", "score": 1, "gold_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2", "pred_sql": "SELECT Documents.Document_ID\nFROM Documents\nJOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nGROUP BY Documents.Document_ID\nHAVING COUNT(Paragraphs.Paragraph_ID) BETWEEN 1 AND 2;", "source_tables": ["paragraphs"], "error_info": ""}, {"sample_id": 379, "db_id": "cre_Doc_Template_Mgt", "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.", "score": 1, "gold_sql": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'", "pred_sql": "SELECT DISTINCT d.Document_ID \nFROM Documents d \nJOIN Paragraphs p ON d.Document_ID = p.Document_ID \nWHERE p.Paragraph_Text IN ('Brazil', 'Ireland');", "source_tables": ["paragraphs"], "error_info": ""}, {"sample_id": 380, "db_id": "cre_Doc_Template_Mgt", "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?", "score": 1, "gold_sql": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'", "pred_sql": "SELECT DISTINCT d.Document_ID \nFROM Documents d \nJOIN Paragraphs p ON d.Document_ID = p.Document_ID \nWHERE p.Paragraph_Text IN ('Brazil', 'Ireland') \nGROUP BY d.Document_ID \nHAVING COUNT(DISTINCT p.Paragraph_Text) = 2;", "source_tables": ["paragraphs"], "error_info": ""}, {"sample_id": 381, "db_id": "course_teach", "question": "How many teachers are there?", "score": 1, "gold_sql": "SELECT count(*) FROM teacher", "pred_sql": "SELECT COUNT(*) AS Teacher_Count FROM teacher;", "source_tables": ["teacher"], "error_info": ""}, {"sample_id": 382, "db_id": "course_teach", "question": "What is the total count of teachers?", "score": 1, "gold_sql": "SELECT count(*) FROM teacher", "pred_sql": "SELECT COUNT(*) AS total_teachers FROM teacher;", "source_tables": ["teacher"], "error_info": ""}, {"sample_id": 383, "db_id": "course_teach", "question": "List the names of teachers in ascending order of age.", "score": 1, "gold_sql": "SELECT Name FROM teacher ORDER BY Age ASC", "pred_sql": "SELECT Name FROM teacher ORDER BY Age ASC;", "source_tables": ["teacher"], "error_info": ""}, {"sample_id": 384, "db_id": "course_teach", "question": "What are the names of the teachers ordered by ascending age?", "score": 1, "gold_sql": "SELECT Name FROM teacher ORDER BY Age ASC", "pred_sql": "SELECT Name FROM teacher ORDER BY Age ASC;", "source_tables": ["teacher"], "error_info": ""}, {"sample_id": 385, "db_id": "course_teach", "question": "What are the age and hometown of teachers?", "score": 1, "gold_sql": "SELECT Age ,  Hometown FROM teacher", "pred_sql": "SELECT Age, Hometown FROM teacher;", "source_tables": ["teacher"], "error_info": ""}, {"sample_id": 386, "db_id": "course_teach", "question": "What is the age and hometown of every teacher?", "score": 1, "gold_sql": "SELECT Age ,  Hometown FROM teacher", "pred_sql": "SELECT Age, Hometown FROM teacher;", "source_tables": ["teacher"], "error_info": ""}, {"sample_id": 387, "db_id": "course_teach", "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "score": 0, "gold_sql": "select name from teacher where hometown != 'little lever urban district'", "pred_sql": "SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District';", "source_tables": ["teacher"], "error_info": "Result not equal"}, {"sample_id": 388, "db_id": "course_teach", "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "score": 0, "gold_sql": "select name from teacher where hometown != 'little lever urban district'", "pred_sql": "SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District';", "source_tables": ["teacher"], "error_info": "Result not equal"}, {"sample_id": 389, "db_id": "course_teach", "question": "Show the name of teachers aged either 32 or 33?", "score": 1, "gold_sql": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33", "pred_sql": "SELECT Name FROM teacher WHERE Age IN (32, 33);", "source_tables": ["teacher"], "error_info": ""}, {"sample_id": 390, "db_id": "course_teach", "question": "What are the names of the teachers who are aged either 32 or 33?", "score": 1, "gold_sql": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33", "pred_sql": "SELECT Name FROM teacher WHERE Age IN (32, 33);", "source_tables": ["teacher"], "error_info": ""}, {"sample_id": 391, "db_id": "course_teach", "question": "What is the hometown of the youngest teacher?", "score": 1, "gold_sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "pred_sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1;", "source_tables": ["teacher"], "error_info": ""}, {"sample_id": 392, "db_id": "course_teach", "question": "Where is the youngest teacher from?", "score": 1, "gold_sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "pred_sql": "SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher);", "source_tables": ["teacher"], "error_info": ""}, {"sample_id": 393, "db_id": "course_teach", "question": "Show different hometown of teachers and the number of teachers from each hometown.", "score": 1, "gold_sql": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown", "pred_sql": "SELECT Hometown, COUNT(*) AS Number_of_Teachers FROM teacher GROUP BY Hometown;", "source_tables": ["teacher"], "error_info": ""}, {"sample_id": 394, "db_id": "course_teach", "question": "For each hometown, how many teachers are there?", "score": 1, "gold_sql": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown", "pred_sql": "SELECT Hometown, COUNT(*) AS Teacher_Count FROM teacher GROUP BY Hometown;", "source_tables": ["teacher"], "error_info": ""}, {"sample_id": 395, "db_id": "course_teach", "question": "List the most common hometown of teachers.", "score": 0, "gold_sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Hometown, COUNT(*) as Count FROM teacher GROUP BY Hometown ORDER BY Count DESC LIMIT 1;", "source_tables": ["teacher"], "error_info": "Result not equal"}, {"sample_id": 396, "db_id": "course_teach", "question": "What is the most commmon hometowns for teachers?", "score": 0, "gold_sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Hometown, COUNT(Hometown) AS Hometown_Count FROM teacher GROUP BY Hometown ORDER BY Hometown_Count DESC LIMIT 1;", "source_tables": ["teacher"], "error_info": "Result not equal"}, {"sample_id": 397, "db_id": "course_teach", "question": "Show the hometowns shared by at least two teachers.", "score": 1, "gold_sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2", "pred_sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(Teacher_ID) >= 2;", "source_tables": ["teacher"], "error_info": ""}, {"sample_id": 398, "db_id": "course_teach", "question": "What are the towns from which at least two teachers come from?", "score": 1, "gold_sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2", "pred_sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(Teacher_ID) >= 2;", "source_tables": ["teacher"], "error_info": ""}, {"sample_id": 399, "db_id": "course_teach", "question": "Show names of teachers and the courses they are arranged to teach.", "score": 1, "gold_sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "pred_sql": "SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID;", "source_tables": ["course", "course_arrange", "teacher"], "error_info": ""}, {"sample_id": 400, "db_id": "course_teach", "question": "What is the name of each teacher and what course they teach?", "score": 1, "gold_sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "pred_sql": "SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID;", "source_tables": ["course", "course_arrange", "teacher"], "error_info": ""}, {"sample_id": 401, "db_id": "course_teach", "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.", "score": 1, "gold_sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name", "pred_sql": "SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC;", "source_tables": ["course", "course_arrange", "teacher"], "error_info": ""}, {"sample_id": 402, "db_id": "course_teach", "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?", "score": 1, "gold_sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name", "pred_sql": "SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC;", "source_tables": ["course", "course_arrange", "teacher"], "error_info": ""}, {"sample_id": 403, "db_id": "course_teach", "question": "Show the name of the teacher for the math course.", "score": 0, "gold_sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  'Math'", "pred_sql": "SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = 'math';", "source_tables": ["course", "course_arrange", "teacher"], "error_info": "Result not equal"}, {"sample_id": 404, "db_id": "course_teach", "question": "What are the names of the people who teach math courses?", "score": 1, "gold_sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  'Math'", "pred_sql": "SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course LIKE '%math%';", "source_tables": ["course", "course_arrange", "teacher"], "error_info": ""}, {"sample_id": 405, "db_id": "course_teach", "question": "Show names of teachers and the number of courses they teach.", "score": 0, "gold_sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "pred_sql": "SELECT teacher.Name, COUNT(course.Course_ID) AS NumberOfCourses\nFROM teacher\nLEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID\nLEFT JOIN course ON course_arrange.Course_ID = course.Course_ID\nGROUP BY teacher.Teacher_ID;", "source_tables": ["course_arrange", "teacher"], "error_info": "Result not equal"}, {"sample_id": 406, "db_id": "course_teach", "question": "What are the names of the teachers and how many courses do they teach?", "score": 0, "gold_sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "pred_sql": "SELECT teacher.Name, COUNT(course_arrange.Course_ID) AS Course_Count\nFROM teacher\nLEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID\nGROUP BY teacher.Teacher_ID;", "source_tables": ["course_arrange", "teacher"], "error_info": "Result not equal"}, {"sample_id": 407, "db_id": "course_teach", "question": "Show names of teachers that teach at least two courses.", "score": 1, "gold_sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2", "pred_sql": "SELECT t.Name\nFROM teacher t\nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nGROUP BY t.Teacher_ID\nHAVING COUNT(ca.Course_ID) >= 2;", "source_tables": ["course_arrange", "teacher"], "error_info": ""}, {"sample_id": 408, "db_id": "course_teach", "question": "What are the names of the teachers who teach at least two courses?", "score": 1, "gold_sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2", "pred_sql": "SELECT t.Name\nFROM teacher t\nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nGROUP BY t.Teacher_ID\nHAVING COUNT(ca.Course_ID) >= 2;", "source_tables": ["course_arrange", "teacher"], "error_info": ""}, {"sample_id": 409, "db_id": "course_teach", "question": "List the names of teachers who have not been arranged to teach courses.", "score": 1, "gold_sql": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)", "pred_sql": "SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange);", "source_tables": ["course_arrange", "teacher"], "error_info": ""}, {"sample_id": 410, "db_id": "course_teach", "question": "What are the names of the teachers whose courses have not been arranged?", "score": 1, "gold_sql": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)", "pred_sql": "SELECT teacher.Name FROM teacher WHERE teacher.Teacher_ID NOT IN (SELECT course_arrange.Teacher_ID FROM course_arrange);", "source_tables": ["course_arrange", "teacher"], "error_info": ""}, {"sample_id": 411, "db_id": "museum_visit", "question": "How many visitors below age 30 are there?", "score": 1, "gold_sql": "SELECT count(*) FROM visitor WHERE age  <  30", "pred_sql": "SELECT COUNT(*) AS Visitor_Count FROM visitor WHERE Age < 30;", "source_tables": ["visitor"], "error_info": ""}, {"sample_id": 412, "db_id": "museum_visit", "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.", "score": 1, "gold_sql": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC", "pred_sql": "SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC;", "source_tables": ["visitor"], "error_info": ""}, {"sample_id": 413, "db_id": "museum_visit", "question": "What is the average age of the visitors whose membership level is not higher than 4?", "score": 1, "gold_sql": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4", "pred_sql": "SELECT AVG(Age) AS Average_Age FROM visitor WHERE Level_of_membership <= 4;", "source_tables": ["visitor"], "error_info": ""}, {"sample_id": 414, "db_id": "museum_visit", "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.", "score": 1, "gold_sql": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC", "pred_sql": "SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESC;", "source_tables": ["visitor"], "error_info": ""}, {"sample_id": 415, "db_id": "museum_visit", "question": "Find the id and name of the museum that has the most staff members?", "score": 1, "gold_sql": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1", "pred_sql": "SELECT Museum_ID, Name FROM museum ORDER BY Num_of_Staff DESC LIMIT 1;", "source_tables": ["museum"], "error_info": ""}, {"sample_id": 416, "db_id": "museum_visit", "question": "Find the average number of staff working for the museums that were open before 2009.", "score": 1, "gold_sql": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009", "pred_sql": "SELECT AVG(CAST(Num_of_Staff AS INTEGER)) AS Average_Staff FROM museum WHERE CAST(Open_Year AS INTEGER) < 2009;", "source_tables": ["museum"], "error_info": ""}, {"sample_id": 417, "db_id": "museum_visit", "question": "What are the opening year and staff number of the museum named Plaza Museum?", "score": 1, "gold_sql": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'", "pred_sql": "SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum';", "source_tables": ["museum"], "error_info": ""}, {"sample_id": 418, "db_id": "museum_visit", "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.", "score": 1, "gold_sql": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)", "pred_sql": "SELECT Name FROM museum WHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > '2010')", "source_tables": ["museum"], "error_info": ""}, {"sample_id": 419, "db_id": "museum_visit", "question": "find the id, name and age for visitors who visited some museums more than once.", "score": 1, "gold_sql": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1", "pred_sql": "SELECT v.ID, v.Name, v.Age \nFROM visitor v \nJOIN visit vi ON v.ID = vi.visitor_ID \nGROUP BY v.ID \nHAVING COUNT(vi.Museum_ID) > 1;", "source_tables": ["visit", "visitor"], "error_info": ""}, {"sample_id": 420, "db_id": "museum_visit", "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?", "score": 0, "gold_sql": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1", "pred_sql": "SELECT visitor.ID, visitor.Name, visitor.Level_of_membership\nFROM visitor\nJOIN visit ON visitor.ID = visit.visitor_ID\nGROUP BY visitor.ID, visitor.Name, visitor.Level_of_membership\nORDER BY SUM(visit.Total_spent) DESC\nLIMIT 1;", "source_tables": ["visit", "visitor"], "error_info": "Result not equal"}, {"sample_id": 421, "db_id": "museum_visit", "question": "What are the id and name of the museum visited most times?", "score": 1, "gold_sql": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT Museum_ID, Name FROM museum WHERE Museum_ID = (SELECT Museum_ID FROM visit GROUP BY Museum_ID ORDER BY COUNT(visitor_ID) DESC LIMIT 1);", "source_tables": ["museum", "visit"], "error_info": ""}, {"sample_id": 422, "db_id": "museum_visit", "question": "What is the name of the museum that had no visitor yet?", "score": 1, "gold_sql": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)", "pred_sql": "SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit);", "source_tables": ["museum", "visit"], "error_info": ""}, {"sample_id": 423, "db_id": "museum_visit", "question": "Find the name and age of the visitor who bought the most tickets at once.", "score": 1, "gold_sql": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1", "pred_sql": "SELECT v.Name, v.Age FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID ORDER BY vi.Num_of_Ticket DESC LIMIT 1;", "source_tables": ["visit", "visitor"], "error_info": ""}, {"sample_id": 424, "db_id": "museum_visit", "question": "What are the average and maximum number of tickets bought in all visits?", "score": 1, "gold_sql": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit", "pred_sql": "SELECT AVG(Num_of_Ticket) AS Average_Tickets, MAX(Num_of_Ticket) AS Max_Tickets FROM visit;", "source_tables": ["visit"], "error_info": ""}, {"sample_id": 425, "db_id": "museum_visit", "question": "What is the total ticket expense of the visitors whose membership level is 1?", "score": 1, "gold_sql": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1", "pred_sql": "SELECT SUM(visit.Total_spent) AS Total_Ticket_Expense\nFROM visit\nJOIN visitor ON visit.visitor_ID = visitor.ID\nWHERE visitor.Level_of_membership = 1;", "source_tables": ["visit", "visitor"], "error_info": ""}, {"sample_id": 426, "db_id": "museum_visit", "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?", "score": 1, "gold_sql": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011", "pred_sql": "SELECT DISTINCT v.Name\nFROM visitor v\nJOIN visit vi ON v.ID = vi.visitor_ID\nJOIN museum m ON vi.Museum_ID = m.Museum_ID\nWHERE m.Open_Year < '2009' AND v.ID IN (\n    SELECT vi2.visitor_ID\n    FROM visit vi2\n    JOIN museum m2 ON vi2.Museum_ID = m2.Museum_ID\n    WHERE m2.Open_Year > '2011'\n)", "source_tables": ["museum", "visit", "visitor"], "error_info": ""}, {"sample_id": 427, "db_id": "museum_visit", "question": "Find the number of visitors who did not visit any museum opened after 2010.", "score": 1, "gold_sql": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)", "pred_sql": "SELECT COUNT(DISTINCT v.ID) AS num_of_visitors\nFROM visitor v\nWHERE v.ID NOT IN (\n    SELECT DISTINCT vi.visitor_ID\n    FROM visit vi\n    JOIN museum m ON vi.Museum_ID = m.Museum_ID\n    WHERE m.Open_Year > '2010'\n);", "source_tables": ["museum", "visit", "visitor"], "error_info": ""}, {"sample_id": 428, "db_id": "museum_visit", "question": "How many museums were opened after 2013 or before 2008?", "score": 1, "gold_sql": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008", "pred_sql": "SELECT COUNT(*) AS Museum_Count FROM museum WHERE Open_Year > '2013' OR Open_Year < '2008';", "source_tables": ["museum"], "error_info": ""}, {"sample_id": 429, "db_id": "wta_1", "question": "Find the total number of players.", "score": 1, "gold_sql": "SELECT count(*) FROM players", "pred_sql": "SELECT COUNT(*) AS total_players FROM players;", "source_tables": ["players"], "error_info": ""}, {"sample_id": 430, "db_id": "wta_1", "question": "How many players are there?", "score": 1, "gold_sql": "SELECT count(*) FROM players", "pred_sql": "SELECT COUNT(*) AS player_count FROM players;", "source_tables": ["players"], "error_info": ""}, {"sample_id": 431, "db_id": "wta_1", "question": "Find the total number of matches.", "score": 1, "gold_sql": "SELECT count(*) FROM matches", "pred_sql": "SELECT COUNT(*) AS total_matches FROM matches;", "source_tables": ["matches"], "error_info": ""}, {"sample_id": 432, "db_id": "wta_1", "question": "Count the number of matches.", "score": 1, "gold_sql": "SELECT count(*) FROM matches", "pred_sql": "SELECT COUNT(*) AS match_count FROM matches;", "source_tables": ["matches"], "error_info": ""}, {"sample_id": 433, "db_id": "wta_1", "question": "List the first name and birth date of all players from the country with code USA.", "score": 1, "gold_sql": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'", "pred_sql": "SELECT first_name, birth_date FROM players WHERE country_code = 'USA';", "source_tables": ["players"], "error_info": ""}, {"sample_id": 434, "db_id": "wta_1", "question": "What are the first names and birth dates of players from the USA?", "score": 1, "gold_sql": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'", "pred_sql": "SELECT first_name, birth_date FROM players WHERE country_code = 'USA';", "source_tables": ["players"], "error_info": ""}, {"sample_id": 435, "db_id": "wta_1", "question": "Find the average age of losers and winners of all matches.", "score": 1, "gold_sql": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches", "pred_sql": "SELECT AVG(winner_age) AS average_winner_age, AVG(loser_age) AS average_loser_age FROM matches;", "source_tables": ["matches"], "error_info": ""}, {"sample_id": 436, "db_id": "wta_1", "question": "What are the average ages of losers and winners across matches?", "score": 1, "gold_sql": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches", "pred_sql": "SELECT AVG(winner_age) AS average_winner_age, AVG(loser_age) AS average_loser_age FROM matches;", "source_tables": ["matches"], "error_info": ""}, {"sample_id": 437, "db_id": "wta_1", "question": "Find the average rank of winners in all matches.", "score": 1, "gold_sql": "SELECT avg(winner_rank) FROM matches", "pred_sql": "SELECT AVG(winner_rank) AS average_winner_rank FROM matches;", "source_tables": ["matches"], "error_info": ""}, {"sample_id": 438, "db_id": "wta_1", "question": "What is the average rank for winners in all matches?", "score": 1, "gold_sql": "SELECT avg(winner_rank) FROM matches", "pred_sql": "SELECT AVG(winner_rank) AS average_winner_rank FROM matches;", "source_tables": ["matches"], "error_info": ""}, {"sample_id": 439, "db_id": "wta_1", "question": "Find the highest rank of losers in all matches.", "score": 0, "gold_sql": "SELECT min(loser_rank) FROM matches", "pred_sql": "SELECT MAX(loser_rank) AS highest_rank FROM matches;", "source_tables": ["matches"], "error_info": "Result not equal"}, {"sample_id": 440, "db_id": "wta_1", "question": "What is the best rank of losers across all matches?", "score": 1, "gold_sql": "SELECT min(loser_rank) FROM matches", "pred_sql": "SELECT MIN(loser_rank) AS best_rank FROM matches;", "source_tables": ["matches"], "error_info": ""}, {"sample_id": 441, "db_id": "wta_1", "question": "find the number of distinct country codes of all players.", "score": 1, "gold_sql": "SELECT count(DISTINCT country_code) FROM players", "pred_sql": "SELECT COUNT(DISTINCT country_code) AS distinct_country_codes FROM players;", "source_tables": ["players"], "error_info": ""}, {"sample_id": 442, "db_id": "wta_1", "question": "How many distinct countries do players come from?", "score": 1, "gold_sql": "SELECT count(DISTINCT country_code) FROM players", "pred_sql": "SELECT COUNT(DISTINCT country_code) AS distinct_countries FROM players;", "source_tables": ["players"], "error_info": ""}, {"sample_id": 443, "db_id": "wta_1", "question": "Find the number of distinct name of losers.", "score": 1, "gold_sql": "SELECT count(DISTINCT loser_name) FROM matches", "pred_sql": "SELECT COUNT(DISTINCT loser_name) AS distinct_loser_names FROM matches;", "source_tables": ["matches"], "error_info": ""}, {"sample_id": 444, "db_id": "wta_1", "question": "How many different loser names are there?", "score": 1, "gold_sql": "SELECT count(DISTINCT loser_name) FROM matches", "pred_sql": "SELECT COUNT(DISTINCT loser_name) AS different_loser_names FROM matches;", "source_tables": ["matches"], "error_info": ""}, {"sample_id": 445, "db_id": "wta_1", "question": "Find the name of tourney that has more than 10 matches.", "score": 1, "gold_sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10", "pred_sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;", "source_tables": ["matches"], "error_info": ""}, {"sample_id": 446, "db_id": "wta_1", "question": "What are the names of tournaments that have more than 10 matches?", "score": 1, "gold_sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10", "pred_sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;", "source_tables": ["matches"], "error_info": ""}, {"sample_id": 447, "db_id": "wta_1", "question": "List the names of all winners who played in both 2013 and 2016.", "score": 1, "gold_sql": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016", "pred_sql": "SELECT DISTINCT winner_name FROM matches WHERE year IN (2013, 2016) AND winner_id IN (SELECT winner_id FROM matches WHERE year = 2013) AND winner_id IN (SELECT winner_id FROM matches WHERE year = 2016);", "source_tables": ["matches"], "error_info": ""}, {"sample_id": 448, "db_id": "wta_1", "question": "What are the names of players who won in both 2013 and 2016?", "score": 1, "gold_sql": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016", "pred_sql": "SELECT DISTINCT winner_name FROM matches WHERE year IN (2013, 2016) AND winner_id IN (SELECT winner_id FROM matches WHERE year = 2013) AND winner_id IN (SELECT winner_id FROM matches WHERE year = 2016);", "source_tables": ["matches"], "error_info": ""}, {"sample_id": 449, "db_id": "wta_1", "question": "List the number of all matches who played in years of 2013 or 2016.", "score": 1, "gold_sql": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016", "pred_sql": "SELECT COUNT(*) AS total_matches FROM matches WHERE year IN (2013, 2016);", "source_tables": ["matches"], "error_info": ""}, {"sample_id": 450, "db_id": "wta_1", "question": "How many matches were played in 2013 or 2016?", "score": 1, "gold_sql": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016", "pred_sql": "SELECT COUNT(*) AS match_count FROM matches WHERE year IN (2013, 2016);", "source_tables": ["matches"], "error_info": ""}, {"sample_id": 451, "db_id": "wta_1", "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?", "score": 1, "gold_sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "pred_sql": "SELECT DISTINCT p.country_code, p.first_name \nFROM players p \nJOIN matches m ON p.player_id = m.winner_id \nWHERE m.tourney_name IN ('WTA Championships', 'Australian Open') \nGROUP BY p.player_id \nHAVING COUNT(DISTINCT m.tourney_name) = 2;", "source_tables": ["matches", "players"], "error_info": ""}, {"sample_id": 452, "db_id": "wta_1", "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?", "score": 1, "gold_sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "pred_sql": "SELECT DISTINCT p.first_name, p.country_code \nFROM players p \nJOIN matches m1 ON p.player_id = m1.winner_id \nJOIN matches m2 ON p.player_id = m2.winner_id \nWHERE m1.tourney_name = 'WTA Championships' \nAND m2.tourney_name = 'Australian Open';", "source_tables": ["matches", "players"], "error_info": ""}, {"sample_id": 453, "db_id": "wta_1", "question": "Find the first name and country code of the oldest player.", "score": 1, "gold_sql": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1", "pred_sql": "SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1;", "source_tables": ["players"], "error_info": ""}, {"sample_id": 454, "db_id": "wta_1", "question": "What is the first name and country code of the oldest player?", "score": 1, "gold_sql": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1", "pred_sql": "SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1;", "source_tables": ["players"], "error_info": ""}, {"sample_id": 457, "db_id": "wta_1", "question": "List the first and last name of all players who are left / L hand in the order of birth date.", "score": 1, "gold_sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "pred_sql": "SELECT first_name, last_name FROM players WHERE hand = 'left' OR hand = 'L' ORDER BY birth_date;", "source_tables": ["players"], "error_info": ""}, {"sample_id": 458, "db_id": "wta_1", "question": "What are the full names of all left handed players, in order of birth date?", "score": 0, "gold_sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "pred_sql": "SELECT first_name || ' ' || last_name AS full_name FROM players WHERE hand = 'left' ORDER BY birth_date;", "source_tables": ["players"], "error_info": "Result not equal"}, {"sample_id": 459, "db_id": "wta_1", "question": "Find the first name and country code of the player who did the most number of tours.", "score": 0, "gold_sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1", "pred_sql": "SELECT p.first_name, p.country_code\nFROM players p\nJOIN rankings r ON p.player_id = r.player_id\nGROUP BY p.player_id\nORDER BY COUNT(r.tours) DESC\nLIMIT 1;", "source_tables": ["rankings", "players"], "error_info": "Result not equal"}, {"sample_id": 460, "db_id": "wta_1", "question": "What is the first name and country code of the player with the most tours?", "score": 1, "gold_sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1", "pred_sql": "SELECT first_name, country_code FROM players WHERE player_id = (SELECT player_id FROM rankings ORDER BY tours DESC LIMIT 1)", "source_tables": ["rankings", "players"], "error_info": ""}, {"sample_id": 461, "db_id": "wta_1", "question": "Find the year that has the most number of matches.", "score": 0, "gold_sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT year, COUNT(*) as match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1;", "source_tables": ["matches"], "error_info": "Result not equal"}, {"sample_id": 462, "db_id": "wta_1", "question": "Which year had the most matches?", "score": 0, "gold_sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT year, COUNT(*) as match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1;", "source_tables": ["matches"], "error_info": "Result not equal"}, {"sample_id": 463, "db_id": "wta_1", "question": "Find the name and rank points of the winner who won the most times.", "score": 1, "gold_sql": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT winner_name, winner_rank_points \nFROM matches \nGROUP BY winner_id \nORDER BY COUNT(winner_id) DESC \nLIMIT 1;", "source_tables": ["matches"], "error_info": ""}, {"sample_id": 464, "db_id": "wta_1", "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?", "score": 0, "gold_sql": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT winner_name, MAX(winner_rank_points) AS rank_points\nFROM matches\nJOIN players ON matches.winner_id = players.player_id\nGROUP BY winner_id\nORDER BY COUNT(*) DESC\nLIMIT 1;", "source_tables": ["matches"], "error_info": "Result not equal"}, {"sample_id": 465, "db_id": "wta_1", "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.", "score": 1, "gold_sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "pred_sql": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1;", "source_tables": ["matches"], "error_info": ""}, {"sample_id": 466, "db_id": "wta_1", "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?", "score": 1, "gold_sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "pred_sql": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1;", "source_tables": ["matches"], "error_info": ""}, {"sample_id": 467, "db_id": "wta_1", "question": "find the names of loser and winner who played in the match with greatest number of minutes.", "score": 1, "gold_sql": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "pred_sql": "SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)", "source_tables": ["matches"], "error_info": ""}, {"sample_id": 468, "db_id": "wta_1", "question": "What are the names of the winner and loser who played in the longest match?", "score": 1, "gold_sql": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "pred_sql": "SELECT winner_name, loser_name FROM matches ORDER BY minutes DESC LIMIT 1;", "source_tables": ["matches"], "error_info": ""}, {"sample_id": 469, "db_id": "wta_1", "question": "Find the average ranking for each player and their first name.", "score": 0, "gold_sql": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "pred_sql": "SELECT players.first_name, AVG(CAST(rankings.ranking AS FLOAT)) AS average_ranking\nFROM players\nJOIN rankings ON players.player_id = rankings.player_id\nGROUP BY players.player_id, players.first_name;", "source_tables": ["rankings", "players"], "error_info": "Result not equal"}, {"sample_id": 470, "db_id": "wta_1", "question": "What are the first names of all players, and their average rankings?", "score": 1, "gold_sql": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "pred_sql": "SELECT players.first_name, AVG(CAST(rankings.ranking AS FLOAT)) AS average_ranking\nFROM players\nJOIN rankings ON players.player_id = rankings.player_id\nGROUP BY players.first_name;", "source_tables": ["rankings", "players"], "error_info": ""}, {"sample_id": 471, "db_id": "wta_1", "question": "Find the total ranking points for each player and their first name.", "score": 0, "gold_sql": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "pred_sql": "SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points \nFROM players \nJOIN rankings ON players.player_id = rankings.player_id \nGROUP BY players.player_id, players.first_name;", "source_tables": ["rankings", "players"], "error_info": "Result not equal"}, {"sample_id": 472, "db_id": "wta_1", "question": "What are the first names of all players, and their total ranking points?", "score": 1, "gold_sql": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "pred_sql": "SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points \nFROM players \nJOIN rankings ON players.player_id = rankings.player_id \nGROUP BY players.first_name;", "source_tables": ["rankings", "players"], "error_info": ""}, {"sample_id": 473, "db_id": "wta_1", "question": "find the number of players for each country.", "score": 1, "gold_sql": "SELECT count(*) ,  country_code FROM players GROUP BY country_code", "pred_sql": "SELECT country_code, COUNT(player_id) AS player_count FROM players GROUP BY country_code;", "source_tables": ["players"], "error_info": ""}, {"sample_id": 474, "db_id": "wta_1", "question": "How many players are from each country?", "score": 1, "gold_sql": "SELECT count(*) ,  country_code FROM players GROUP BY country_code", "pred_sql": "SELECT country_code, COUNT(player_id) AS player_count FROM players GROUP BY country_code;", "source_tables": ["players"], "error_info": ""}, {"sample_id": 475, "db_id": "wta_1", "question": "find the code of the country where has the greatest number of players.", "score": 0, "gold_sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT country_code, COUNT(player_id) AS player_count \nFROM players \nGROUP BY country_code \nORDER BY player_count DESC \nLIMIT 1;", "source_tables": ["players"], "error_info": "Result not equal"}, {"sample_id": 476, "db_id": "wta_1", "question": "What is the code of the country with the most players?", "score": 0, "gold_sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT country_code, COUNT(*) as player_count FROM players GROUP BY country_code ORDER BY player_count DESC LIMIT 1;", "source_tables": ["players"], "error_info": "Result not equal"}, {"sample_id": 477, "db_id": "wta_1", "question": "Find the codes of countries that have more than 50 players.", "score": 1, "gold_sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50", "pred_sql": "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;", "source_tables": ["players"], "error_info": ""}, {"sample_id": 478, "db_id": "wta_1", "question": "What are the codes of countries with more than 50 players?", "score": 1, "gold_sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50", "pred_sql": "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;", "source_tables": ["players"], "error_info": ""}, {"sample_id": 479, "db_id": "wta_1", "question": "Find the total number of tours for each ranking date.", "score": 0, "gold_sql": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "pred_sql": "SELECT ranking_date, COUNT(tours) AS total_tours FROM rankings GROUP BY ranking_date;", "source_tables": ["rankings"], "error_info": "Result not equal"}, {"sample_id": 480, "db_id": "wta_1", "question": "How many total tours were there for each ranking date?", "score": 0, "gold_sql": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "pred_sql": "SELECT ranking_date, COUNT(DISTINCT tours) AS total_tours FROM rankings GROUP BY ranking_date;", "source_tables": ["rankings"], "error_info": "Result not equal"}, {"sample_id": 481, "db_id": "wta_1", "question": "Find the number of matches happened in each year.", "score": 1, "gold_sql": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "pred_sql": "SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year;", "source_tables": ["matches"], "error_info": ""}, {"sample_id": 482, "db_id": "wta_1", "question": "How many matches were played in each year?", "score": 1, "gold_sql": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "pred_sql": "SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year;", "source_tables": ["matches"], "error_info": ""}, {"sample_id": 483, "db_id": "wta_1", "question": "Find the name and rank of the 3 youngest winners across all matches.", "score": 1, "gold_sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "pred_sql": "SELECT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3;", "source_tables": ["matches"], "error_info": ""}, {"sample_id": 484, "db_id": "wta_1", "question": "What are the names and ranks of the three youngest winners across all matches?", "score": 1, "gold_sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "pred_sql": "SELECT winner_name, winner_rank \nFROM matches \nORDER BY winner_age ASC \nLIMIT 3;", "source_tables": ["matches"], "error_info": ""}, {"sample_id": 485, "db_id": "wta_1", "question": "How many different winners both participated in the WTA Championships and were left handed?", "score": 0, "gold_sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "pred_sql": "SELECT COUNT(DISTINCT winner_id) AS different_winners_count\nFROM matches\nWHERE tourney_name = 'WTA Championships' AND winner_hand = 'left';", "source_tables": ["matches"], "error_info": "Result not equal"}, {"sample_id": 486, "db_id": "wta_1", "question": "Find the number of left handed winners who participated in the WTA Championships.", "score": 0, "gold_sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "pred_sql": "SELECT COUNT(DISTINCT winner_id) AS left_handed_winners_count \nFROM matches \nWHERE winner_id IN (SELECT player_id FROM players WHERE hand = 'left') \nAND tourney_name = 'WTA Championships';", "source_tables": ["matches"], "error_info": "Result not equal"}, {"sample_id": 487, "db_id": "wta_1", "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.", "score": 1, "gold_sql": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "pred_sql": "SELECT p.first_name, p.country_code, p.birth_date \nFROM players p \nJOIN matches m ON p.player_id = m.winner_id \nJOIN rankings r ON p.player_id = r.player_id \nORDER BY r.ranking_points DESC \nLIMIT 1;", "source_tables": ["matches", "players"], "error_info": ""}, {"sample_id": 488, "db_id": "wta_1", "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?", "score": 1, "gold_sql": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "pred_sql": "SELECT p.first_name, p.country_code, p.birth_date\nFROM players p\nJOIN matches m ON p.player_id = m.winner_id\nORDER BY m.winner_rank_points DESC\nLIMIT 1;", "source_tables": ["matches", "players"], "error_info": ""}, {"sample_id": 489, "db_id": "wta_1", "question": "Find the number of players for each hand type.", "score": 1, "gold_sql": "SELECT count(*) ,  hand FROM players GROUP BY hand", "pred_sql": "SELECT hand, COUNT(*) AS player_count FROM players GROUP BY hand;", "source_tables": ["players"], "error_info": ""}, {"sample_id": 490, "db_id": "wta_1", "question": "How many players are there for each hand type?", "score": 1, "gold_sql": "SELECT count(*) ,  hand FROM players GROUP BY hand", "pred_sql": "SELECT hand, COUNT(*) AS player_count FROM players GROUP BY hand;", "source_tables": ["players"], "error_info": ""}, {"sample_id": 491, "db_id": "battle_death", "question": "How many ships ended up being 'Captured'?", "score": 1, "gold_sql": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'", "pred_sql": "SELECT COUNT(*) AS captured_ships_count FROM ship WHERE disposition_of_ship = 'Captured';", "source_tables": ["ship"], "error_info": ""}, {"sample_id": 492, "db_id": "battle_death", "question": "List the name and tonnage ordered by in descending alphaetical order for the names.", "score": 1, "gold_sql": "SELECT name ,  tonnage FROM ship ORDER BY name DESC", "pred_sql": "SELECT name, tonnage FROM ship ORDER BY name DESC;", "source_tables": ["ship"], "error_info": ""}, {"sample_id": 493, "db_id": "battle_death", "question": "List the name, date and result of each battle.", "score": 0, "gold_sql": "SELECT name ,  date FROM battle", "pred_sql": "SELECT name, date, result FROM battle;", "source_tables": ["battle"], "error_info": "Result not equal"}, {"sample_id": 494, "db_id": "battle_death", "question": "What is maximum and minimum death toll caused each time?", "score": 1, "gold_sql": "SELECT max(killed) ,  min(killed) FROM death", "pred_sql": "SELECT MAX(killed) AS max_death_toll, MIN(killed) AS min_death_toll FROM death;", "source_tables": ["death"], "error_info": ""}, {"sample_id": 495, "db_id": "battle_death", "question": "What is the average number of injuries caused each time?", "score": 1, "gold_sql": "SELECT avg(injured) FROM death", "pred_sql": "SELECT AVG(injured) AS average_injuries FROM death;", "source_tables": ["death"], "error_info": ""}, {"sample_id": 496, "db_id": "battle_death", "question": "What are the death and injury situations caused by the ship with tonnage 't'?", "score": 1, "gold_sql": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "pred_sql": "SELECT d.killed, d.injured FROM death d JOIN ship s ON d.caused_by_ship_id = s.id WHERE s.tonnage = 't';", "source_tables": ["ship", "death"], "error_info": ""}, {"sample_id": 497, "db_id": "battle_death", "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "score": 1, "gold_sql": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'", "pred_sql": "SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril';", "source_tables": ["battle"], "error_info": ""}, {"sample_id": 498, "db_id": "battle_death", "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "score": 1, "gold_sql": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'", "pred_sql": "SELECT DISTINCT b.id, b.name \nFROM battle b \nJOIN ship s ON b.id = s.lost_in_battle \nWHERE s.ship_type = 'Brig';", "source_tables": ["battle", "ship"], "error_info": ""}, {"sample_id": 499, "db_id": "battle_death", "question": "What are the ids and names of the battles that led to more than 10 people killed in total.", "score": 0, "gold_sql": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10", "pred_sql": "SELECT b.id, b.name \nFROM battle b \nJOIN death d ON b.id = d.caused_by_ship_id \nGROUP BY b.id, b.name \nHAVING SUM(d.killed) > 10;", "source_tables": ["death", "battle", "ship"], "error_info": "Result not equal"}, {"sample_id": 500, "db_id": "battle_death", "question": "What is the ship id and name that caused most total injuries?", "score": 0, "gold_sql": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT d.caused_by_ship_id, s.name FROM death d JOIN ship s ON d.caused_by_ship_id = s.id GROUP BY d.caused_by_ship_id ORDER BY SUM(d.injured) DESC LIMIT 1;", "source_tables": ["ship", "death"], "error_info": "Result not equal"}, {"sample_id": 501, "db_id": "battle_death", "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "score": 1, "gold_sql": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'", "pred_sql": "SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';", "source_tables": ["battle"], "error_info": ""}, {"sample_id": 502, "db_id": "battle_death", "question": "How many different results are there for the battles?", "score": 1, "gold_sql": "SELECT count(DISTINCT RESULT) FROM battle", "pred_sql": "SELECT COUNT(DISTINCT result) AS different_results FROM battle;", "source_tables": ["battle"], "error_info": ""}, {"sample_id": 503, "db_id": "battle_death", "question": "How many battles did not lose any ship with tonnage '225'?", "score": 1, "gold_sql": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );", "pred_sql": "SELECT COUNT(*) AS battles_without_lost_ships FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = 225 AND lost_in_battle IS NOT NULL);", "source_tables": ["battle", "ship"], "error_info": ""}, {"sample_id": 504, "db_id": "battle_death", "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'", "score": 0, "gold_sql": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'", "pred_sql": "SELECT b.name, b.date \nFROM battle b \nJOIN ship s ON b.id = s.lost_in_battle \nWHERE s.name IN ('Lettice', 'HMS Atalanta');", "source_tables": ["battle", "ship"], "error_info": "Result not equal"}, {"sample_id": 505, "db_id": "battle_death", "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.", "score": 0, "gold_sql": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'", "pred_sql": "SELECT b.name, b.result, b.bulgarian_commander \nFROM battle b \nJOIN ship s ON b.id = s.lost_in_battle \nWHERE s.lost_in_battle = 0 AND s.location = 'English Channel';", "source_tables": ["battle", "ship"], "error_info": "Result not equal"}, {"sample_id": 506, "db_id": "battle_death", "question": "What are the notes of the death events which has substring 'East'?", "score": 1, "gold_sql": "SELECT note FROM death WHERE note LIKE '%East%'", "pred_sql": "SELECT note FROM death WHERE note LIKE '%East%';", "source_tables": ["death"], "error_info": ""}, {"sample_id": 507, "db_id": "student_transcripts_tracking", "question": "what are all the addresses including line 1 and line 2?", "score": 1, "gold_sql": "SELECT line_1 ,  line_2 FROM addresses", "pred_sql": "SELECT line_1, line_2 FROM Addresses;", "source_tables": ["addresses"], "error_info": ""}, {"sample_id": 508, "db_id": "student_transcripts_tracking", "question": "What is the first and second line for all addresses?", "score": 1, "gold_sql": "SELECT line_1 ,  line_2 FROM addresses", "pred_sql": "SELECT line_1, line_2 FROM Addresses;", "source_tables": ["addresses"], "error_info": ""}, {"sample_id": 509, "db_id": "student_transcripts_tracking", "question": "How many courses in total are listed?", "score": 1, "gold_sql": "SELECT count(*) FROM Courses", "pred_sql": "SELECT COUNT(*) AS total_courses FROM Courses;", "source_tables": ["courses"], "error_info": ""}, {"sample_id": 510, "db_id": "student_transcripts_tracking", "question": "How many courses are there?", "score": 1, "gold_sql": "SELECT count(*) FROM Courses", "pred_sql": "SELECT COUNT(*) AS total_courses FROM Courses;", "source_tables": ["courses"], "error_info": ""}, {"sample_id": 511, "db_id": "student_transcripts_tracking", "question": "How is the math course described?", "score": 1, "gold_sql": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "pred_sql": "SELECT course_description FROM Courses WHERE course_name = 'math';", "source_tables": ["courses"], "error_info": ""}, {"sample_id": 512, "db_id": "student_transcripts_tracking", "question": "What are the descriptions for all the math courses?", "score": 1, "gold_sql": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "pred_sql": "SELECT course_description FROM Courses WHERE course_name LIKE '%math%';", "source_tables": ["courses"], "error_info": ""}, {"sample_id": 513, "db_id": "student_transcripts_tracking", "question": "What is the zip code of the address in the city Port Chelsea?", "score": 1, "gold_sql": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "pred_sql": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';", "source_tables": ["addresses"], "error_info": ""}, {"sample_id": 514, "db_id": "student_transcripts_tracking", "question": "What is the zip code for Port Chelsea?", "score": 1, "gold_sql": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "pred_sql": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';", "source_tables": ["addresses"], "error_info": ""}, {"sample_id": 515, "db_id": "student_transcripts_tracking", "question": "Which department offers the most number of degrees? List department name and id.", "score": 1, "gold_sql": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT d.department_name, d.department_id\nFROM Departments d\nJOIN Degree_Programs dp ON d.department_id = dp.department_id\nGROUP BY d.department_id, d.department_name\nORDER BY COUNT(dp.degree_program_id) DESC\nLIMIT 1;", "source_tables": ["departments", "degree_programs"], "error_info": ""}, {"sample_id": 516, "db_id": "student_transcripts_tracking", "question": "What is the name and id of the department with the most number of degrees ?", "score": 1, "gold_sql": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1", "pred_sql": "SELECT d.department_name, d.department_id \nFROM Departments d \nJOIN Degree_Programs dp ON d.department_id = dp.department_id \nGROUP BY d.department_id, d.department_name \nORDER BY COUNT(dp.degree_program_id) DESC \nLIMIT 1;", "source_tables": ["departments", "degree_programs"], "error_info": ""}, {"sample_id": 517, "db_id": "student_transcripts_tracking", "question": "How many departments offer any degree?", "score": 1, "gold_sql": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "pred_sql": "SELECT COUNT(DISTINCT Departments.department_id) AS department_count\nFROM Departments\nJOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id;", "source_tables": ["degree_programs"], "error_info": ""}, {"sample_id": 518, "db_id": "student_transcripts_tracking", "question": "How many different departments offer degrees?", "score": 1, "gold_sql": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "pred_sql": "SELECT COUNT(DISTINCT department_id) AS number_of_departments FROM Degree_Programs;", "source_tables": ["degree_programs"], "error_info": ""}, {"sample_id": 519, "db_id": "student_transcripts_tracking", "question": "How many different degree names are offered?", "score": 1, "gold_sql": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "pred_sql": "SELECT COUNT(DISTINCT degree_summary_name) AS different_degree_names FROM Degree_Programs;", "source_tables": ["degree_programs"], "error_info": ""}, {"sample_id": 520, "db_id": "student_transcripts_tracking", "question": "How many different degrees are offered?", "score": 1, "gold_sql": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "pred_sql": "SELECT COUNT(DISTINCT degree_summary_name) AS different_degrees FROM Degree_Programs;", "source_tables": ["degree_programs"], "error_info": ""}, {"sample_id": 521, "db_id": "student_transcripts_tracking", "question": "How many degrees does the engineering department offer?", "score": 1, "gold_sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'", "pred_sql": "SELECT COUNT(*) AS degree_count FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Engineering');", "source_tables": ["departments", "degree_programs"], "error_info": ""}, {"sample_id": 522, "db_id": "student_transcripts_tracking", "question": "How many degrees does the engineering department have?", "score": 1, "gold_sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'", "pred_sql": "SELECT COUNT(*) AS degree_count FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Engineering');", "source_tables": ["departments", "degree_programs"], "error_info": ""}, {"sample_id": 523, "db_id": "student_transcripts_tracking", "question": "What are the names and descriptions of all the sections?", "score": 1, "gold_sql": "SELECT section_name ,  section_description FROM Sections", "pred_sql": "SELECT section_name, section_description FROM Sections;", "source_tables": ["sections"], "error_info": ""}, {"sample_id": 524, "db_id": "student_transcripts_tracking", "question": "What are the names and descriptions for all the sections?", "score": 1, "gold_sql": "SELECT section_name ,  section_description FROM Sections", "pred_sql": "SELECT section_name, section_description FROM Sections;", "source_tables": ["sections"], "error_info": ""}, {"sample_id": 525, "db_id": "student_transcripts_tracking", "question": "What are the names and id of courses having at most 2 sections?", "score": 1, "gold_sql": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2", "pred_sql": "SELECT Courses.course_name, Courses.course_id \nFROM Courses \nJOIN Sections ON Courses.course_id = Sections.course_id \nGROUP BY Courses.course_id \nHAVING COUNT(Sections.section_id) <= 2;", "source_tables": ["courses", "sections"], "error_info": ""}, {"sample_id": 526, "db_id": "student_transcripts_tracking", "question": "What are the names and ids of every course with less than 2 sections?", "score": 0, "gold_sql": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2", "pred_sql": "SELECT Courses.course_id, Courses.course_name FROM Courses LEFT JOIN Sections ON Courses.course_id = Sections.course_id GROUP BY Courses.course_id HAVING COUNT(Sections.section_id) < 2;", "source_tables": ["courses", "sections"], "error_info": "Result not equal"}, {"sample_id": 527, "db_id": "student_transcripts_tracking", "question": "List the section_name in reversed lexicographical order.", "score": 1, "gold_sql": "SELECT section_name FROM Sections ORDER BY section_name DESC", "pred_sql": "SELECT section_name FROM Sections ORDER BY section_name DESC;", "source_tables": ["sections"], "error_info": ""}, {"sample_id": 528, "db_id": "student_transcripts_tracking", "question": "What are the names of the sections in reverse alphabetical order?", "score": 1, "gold_sql": "SELECT section_name FROM Sections ORDER BY section_name DESC", "pred_sql": "SELECT section_name FROM Sections ORDER BY section_name DESC;", "source_tables": ["sections"], "error_info": ""}, {"sample_id": 529, "db_id": "student_transcripts_tracking", "question": "What is the semester which most student registered in? Show both the name and the id.", "score": 1, "gold_sql": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT semester_id, semester_name FROM Semesters WHERE semester_id = (SELECT semester_id FROM Student_Enrolment GROUP BY semester_id ORDER BY COUNT(student_enrolment_id) DESC LIMIT 1)", "source_tables": ["student_enrolment", "semesters"], "error_info": ""}, {"sample_id": 530, "db_id": "student_transcripts_tracking", "question": "For each semester, what is the name and id of the one with the most students registered?", "score": 1, "gold_sql": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT semester_id, semester_name\nFROM Semesters\nWHERE semester_id IN (\n    SELECT semester_id\n    FROM Student_Enrolment\n    GROUP BY semester_id\n    ORDER BY COUNT(student_id) DESC\n    LIMIT 1\n)", "source_tables": ["student_enrolment", "semesters"], "error_info": ""}, {"sample_id": 531, "db_id": "student_transcripts_tracking", "question": "What is the description of the department whose name has the substring the computer?", "score": 1, "gold_sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "pred_sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%';", "source_tables": ["departments"], "error_info": ""}, {"sample_id": 532, "db_id": "student_transcripts_tracking", "question": "What is the department description for the one whose name has the word computer?", "score": 1, "gold_sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "pred_sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%';", "source_tables": ["departments"], "error_info": ""}, {"sample_id": 533, "db_id": "student_transcripts_tracking", "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.", "score": 0, "gold_sql": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2", "pred_sql": "SELECT s.first_name, s.middle_name, s.last_name, s.student_id \nFROM Students s \nJOIN Student_Enrolment se ON s.student_id = se.student_id \nJOIN ( \n    SELECT student_id \n    FROM Student_Enrolment \n    GROUP BY student_id, semester_id \n    HAVING COUNT(DISTINCT degree_program_id) = 2 \n) AS enrolled_students ON s.student_id = enrolled_students.student_id;", "source_tables": ["student_enrolment", "students"], "error_info": "Result not equal"}, {"sample_id": 534, "db_id": "student_transcripts_tracking", "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?", "score": 0, "gold_sql": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2", "pred_sql": "SELECT s.student_id, s.first_name, s.middle_name, s.last_name\nFROM Students s\nJOIN Student_Enrolment se ON s.student_id = se.student_id\nGROUP BY s.student_id\nHAVING COUNT(DISTINCT se.degree_program_id) = 2;", "source_tables": ["student_enrolment", "students"], "error_info": "Result not equal"}, {"sample_id": 535, "db_id": "student_transcripts_tracking", "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "score": 0, "gold_sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "pred_sql": "SELECT Students.first_name, Students.middle_name, Students.last_name \nFROM Students \nJOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id \nJOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id \nWHERE Degree_Programs.degree_summary_name LIKE '%Bachelor%';", "source_tables": ["student_enrolment", "degree_programs", "students"], "error_info": "Result not equal"}, {"sample_id": 536, "db_id": "student_transcripts_tracking", "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "score": 0, "gold_sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "pred_sql": "SELECT s.first_name, s.middle_name, s.last_name \nFROM Students s \nJOIN Student_Enrolment se ON s.student_id = se.student_id \nJOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id \nWHERE dp.degree_summary_name LIKE '%Bachelors%';", "source_tables": ["student_enrolment", "degree_programs", "students"], "error_info": "Result not equal"}, {"sample_id": 537, "db_id": "student_transcripts_tracking", "question": "Find the kind of program which most number of students are enrolled in?", "score": 0, "gold_sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT dp.degree_summary_name, COUNT(se.student_enrolment_id) AS student_count\nFROM Degree_Programs dp\nJOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id\nGROUP BY dp.degree_summary_name\nORDER BY student_count DESC\nLIMIT 1;", "source_tables": ["student_enrolment", "degree_programs"], "error_info": "Result not equal"}, {"sample_id": 538, "db_id": "student_transcripts_tracking", "question": "What is the degree summary name that has the most number of students enrolled?", "score": 1, "gold_sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT dp.degree_summary_name\nFROM Degree_Programs dp\nJOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id\nGROUP BY dp.degree_summary_name\nORDER BY COUNT(se.student_id) DESC\nLIMIT 1;", "source_tables": ["student_enrolment", "degree_programs"], "error_info": ""}, {"sample_id": 539, "db_id": "student_transcripts_tracking", "question": "Find the program which most number of students are enrolled in. List both the id and the summary.", "score": 0, "gold_sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT dp.degree_program_id, dp.degree_summary_name, COUNT(se.student_enrolment_id) AS student_count\nFROM Degree_Programs dp\nJOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id\nGROUP BY dp.degree_program_id, dp.degree_summary_name\nORDER BY student_count DESC\nLIMIT 1;", "source_tables": ["student_enrolment", "degree_programs"], "error_info": "Result not equal"}, {"sample_id": 540, "db_id": "student_transcripts_tracking", "question": "What is the program id and the summary of the degree that has the most students enrolled?", "score": 1, "gold_sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT dp.degree_program_id, dp.degree_summary_name\nFROM Degree_Programs dp\nJOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id\nGROUP BY dp.degree_program_id\nORDER BY COUNT(se.student_id) DESC\nLIMIT 1;", "source_tables": ["student_enrolment", "degree_programs"], "error_info": ""}, {"sample_id": 541, "db_id": "student_transcripts_tracking", "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.", "score": 0, "gold_sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(se.student_enrolment_id) AS number_of_enrollments\nFROM Students s\nJOIN Student_Enrolment se ON s.student_id = se.student_id\nGROUP BY s.student_id\nORDER BY number_of_enrollments DESC\nLIMIT 1;", "source_tables": ["student_enrolment", "students"], "error_info": "Result not equal"}, {"sample_id": 542, "db_id": "student_transcripts_tracking", "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?", "score": 0, "gold_sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT s.first_name, s.middle_name, s.last_name, s.student_id, COUNT(se.student_enrolment_id) AS number_of_enrollments\nFROM Students s\nJOIN Student_Enrolment se ON s.student_id = se.student_id\nGROUP BY s.student_id\nORDER BY number_of_enrollments DESC\nLIMIT 1;", "source_tables": ["student_enrolment", "students"], "error_info": "Result not equal"}, {"sample_id": 543, "db_id": "student_transcripts_tracking", "question": "Which semesters do not have any student enrolled? List the semester name.", "score": 1, "gold_sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )", "pred_sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT DISTINCT semester_id FROM Student_Enrolment);", "source_tables": ["student_enrolment", "semesters"], "error_info": ""}, {"sample_id": 544, "db_id": "student_transcripts_tracking", "question": "What is the name of the semester with no students enrolled?", "score": 1, "gold_sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )", "pred_sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT DISTINCT semester_id FROM Student_Enrolment)", "source_tables": ["student_enrolment", "semesters"], "error_info": ""}, {"sample_id": 545, "db_id": "student_transcripts_tracking", "question": "What are all the course names of the courses which ever have students enrolled in?", "score": 1, "gold_sql": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "pred_sql": "SELECT DISTINCT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id;", "source_tables": ["courses", "student_enrolment_courses"], "error_info": ""}, {"sample_id": 546, "db_id": "student_transcripts_tracking", "question": "What are the names of all courses that have some students enrolled?", "score": 1, "gold_sql": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "pred_sql": "SELECT DISTINCT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id;", "source_tables": ["courses", "student_enrolment_courses"], "error_info": ""}, {"sample_id": 547, "db_id": "student_transcripts_tracking", "question": "What's the name of the course with most number of enrollments?", "score": 0, "gold_sql": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT C.course_name\nFROM Courses C\nJOIN Student_Enrolment_Courses SEC ON C.course_id = SEC.course_id\nGROUP BY C.course_id\nORDER BY COUNT(SEC.student_course_id) DESC\nLIMIT 1;", "source_tables": ["courses", "student_enrolment_courses"], "error_info": "Result not equal"}, {"sample_id": 548, "db_id": "student_transcripts_tracking", "question": "What is the name of the course with the most students enrolled?", "score": 0, "gold_sql": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT C.course_name\nFROM Courses C\nJOIN Student_Enrolment_Courses SEC ON C.course_id = SEC.course_id\nJOIN Student_Enrolment SE ON SEC.student_enrolment_id = SE.student_enrolment_id\nGROUP BY C.course_id\nORDER BY COUNT(SE.student_enrolment_id) DESC\nLIMIT 1;", "source_tables": ["courses", "student_enrolment_courses"], "error_info": "Result not equal"}, {"sample_id": 549, "db_id": "student_transcripts_tracking", "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.", "score": 0, "gold_sql": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id", "pred_sql": "SELECT last_name FROM Students WHERE current_address_id IN (SELECT address_id FROM Addresses WHERE state_province_county = 'North Carolina') AND student_id NOT IN (SELECT student_id FROM Student_Enrolment)", "source_tables": ["addresses", "student_enrolment", "students"], "error_info": "Result not equal"}, {"sample_id": 550, "db_id": "student_transcripts_tracking", "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?", "score": 0, "gold_sql": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id", "pred_sql": "SELECT last_name FROM Students WHERE current_address_id IN (SELECT address_id FROM Addresses WHERE state_province_county = 'North Carolina') AND student_id NOT IN (SELECT student_id FROM Student_Enrolment)", "source_tables": ["addresses", "student_enrolment", "students"], "error_info": "Result not equal"}, {"sample_id": 551, "db_id": "student_transcripts_tracking", "question": "Show the date and id of the transcript with at least 2 course results.", "score": 1, "gold_sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2", "pred_sql": "SELECT Transcripts.transcript_id, Transcripts.transcript_date\nFROM Transcripts\nJOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id\nGROUP BY Transcripts.transcript_id\nHAVING COUNT(Transcript_Contents.student_course_id) >= 2;", "source_tables": ["transcripts", "transcript_contents"], "error_info": ""}, {"sample_id": 552, "db_id": "student_transcripts_tracking", "question": "What is the date and id of the transcript with at least 2 courses listed?", "score": 1, "gold_sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2", "pred_sql": "SELECT t.transcript_id, t.transcript_date \nFROM Transcripts t \nJOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id \nGROUP BY t.transcript_id \nHAVING COUNT(tc.student_course_id) >= 2;", "source_tables": ["transcripts", "transcript_contents"], "error_info": ""}, {"sample_id": 553, "db_id": "student_transcripts_tracking", "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "score": 1, "gold_sql": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'", "pred_sql": "SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';", "source_tables": ["students"], "error_info": ""}, {"sample_id": 554, "db_id": "student_transcripts_tracking", "question": "What is the mobile phone number of the student named Timmothy Ward ?", "score": 0, "gold_sql": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'", "pred_sql": "SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';", "source_tables": ["students"], "error_info": "Result not equal"}, {"sample_id": 555, "db_id": "student_transcripts_tracking", "question": "Who is the first student to register? List the first name, middle name and last name.", "score": 1, "gold_sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "pred_sql": "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1;", "source_tables": ["students"], "error_info": ""}, {"sample_id": 556, "db_id": "student_transcripts_tracking", "question": "What is the first, middle, and last name of the first student to register?", "score": 1, "gold_sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "pred_sql": "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1;", "source_tables": ["students"], "error_info": ""}, {"sample_id": 557, "db_id": "student_transcripts_tracking", "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "score": 1, "gold_sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "pred_sql": "SELECT first_name, middle_name, last_name FROM Students WHERE date_left IS NOT NULL ORDER BY date_left ASC LIMIT 1;", "source_tables": ["students"], "error_info": ""}, {"sample_id": 558, "db_id": "student_transcripts_tracking", "question": "What is the first, middle, and last name of the earliest school graduate?", "score": 1, "gold_sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "pred_sql": "SELECT first_name, middle_name, last_name FROM Students WHERE date_left IS NOT NULL ORDER BY date_left ASC LIMIT 1;", "source_tables": ["students"], "error_info": ""}, {"sample_id": 559, "db_id": "student_transcripts_tracking", "question": "Whose permanent address is different from his or her current address? List his or her first name.", "score": 1, "gold_sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id", "pred_sql": "SELECT first_name FROM Students WHERE permanent_address_id != current_address_id;", "source_tables": ["students"], "error_info": ""}, {"sample_id": 560, "db_id": "student_transcripts_tracking", "question": "What is the first name of the student whose permanent address is different from his or her current one?", "score": 1, "gold_sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id", "pred_sql": "SELECT first_name FROM Students WHERE permanent_address_id != current_address_id;", "source_tables": ["students"], "error_info": ""}, {"sample_id": 561, "db_id": "student_transcripts_tracking", "question": "Which address holds the most number of students currently? List the address id and all lines.", "score": 0, "gold_sql": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT a.address_id, a.line_1, a.line_2, a.line_3\nFROM Addresses a\nJOIN Students s ON a.address_id = s.current_address_id\nGROUP BY a.address_id, a.line_1, a.line_2, a.line_3\nORDER BY COUNT(s.student_id) DESC\nLIMIT 1;", "source_tables": ["addresses", "students"], "error_info": "Result not equal"}, {"sample_id": 562, "db_id": "student_transcripts_tracking", "question": "What is the id, line 1, and line 2 of the address with the most students?", "score": 1, "gold_sql": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT a.address_id, a.line_1, a.line_2\nFROM Addresses a\nJOIN Students s ON a.address_id = s.current_address_id OR a.address_id = s.permanent_address_id\nGROUP BY a.address_id\nORDER BY COUNT(s.student_id) DESC\nLIMIT 1;", "source_tables": ["addresses", "students"], "error_info": ""}, {"sample_id": 563, "db_id": "student_transcripts_tracking", "question": "On average, when were the transcripts printed?", "score": 1, "gold_sql": "SELECT avg(transcript_date) FROM Transcripts", "pred_sql": "SELECT AVG(transcript_date) AS average_transcript_date FROM Transcripts;", "source_tables": ["transcripts"], "error_info": ""}, {"sample_id": 564, "db_id": "student_transcripts_tracking", "question": "What is the average transcript date?", "score": 1, "gold_sql": "SELECT avg(transcript_date) FROM Transcripts", "pred_sql": "SELECT AVG(transcript_date) AS average_transcript_date FROM Transcripts;", "source_tables": ["transcripts"], "error_info": ""}, {"sample_id": 565, "db_id": "student_transcripts_tracking", "question": "When is the first transcript released? List the date and details.", "score": 1, "gold_sql": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "pred_sql": "SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1;", "source_tables": ["transcripts"], "error_info": ""}, {"sample_id": 566, "db_id": "student_transcripts_tracking", "question": "What is the earliest date of a transcript release, and what details can you tell me?", "score": 1, "gold_sql": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "pred_sql": "SELECT MIN(transcript_date) AS earliest_transcript_date, other_details FROM Transcripts;", "source_tables": ["transcripts"], "error_info": ""}, {"sample_id": 567, "db_id": "student_transcripts_tracking", "question": "How many transcripts are released?", "score": 1, "gold_sql": "SELECT count(*) FROM Transcripts", "pred_sql": "SELECT COUNT(*) AS total_transcripts FROM Transcripts;", "source_tables": ["transcripts"], "error_info": ""}, {"sample_id": 568, "db_id": "student_transcripts_tracking", "question": "How many transcripts are listed?", "score": 1, "gold_sql": "SELECT count(*) FROM Transcripts", "pred_sql": "SELECT COUNT(*) AS transcript_count FROM Transcripts;", "source_tables": ["transcripts"], "error_info": ""}, {"sample_id": 569, "db_id": "student_transcripts_tracking", "question": "What is the last transcript release date?", "score": 1, "gold_sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "pred_sql": "SELECT MAX(transcript_date) AS last_transcript_release_date FROM Transcripts;", "source_tables": ["transcripts"], "error_info": ""}, {"sample_id": 570, "db_id": "student_transcripts_tracking", "question": "When was the last transcript released?", "score": 1, "gold_sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "pred_sql": "SELECT MAX(transcript_date) AS last_transcript_date FROM Transcripts;", "source_tables": ["transcripts"], "error_info": ""}, {"sample_id": 571, "db_id": "student_transcripts_tracking", "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.", "score": 1, "gold_sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT student_course_id, COUNT(transcript_id) AS transcript_count\nFROM Transcript_Contents\nGROUP BY student_course_id\nORDER BY transcript_count DESC\nLIMIT 1;", "source_tables": ["transcript_contents"], "error_info": ""}, {"sample_id": 572, "db_id": "student_transcripts_tracking", "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?", "score": 0, "gold_sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT student_enrolment_id, COUNT(transcript_id) AS course_count\nFROM Student_Enrolment_Courses\nJOIN Transcript_Contents ON Student_Enrolment_Courses.student_course_id = Transcript_Contents.student_course_id\nGROUP BY student_enrolment_id\nORDER BY course_count DESC\nLIMIT 1;", "source_tables": ["transcript_contents"], "error_info": "Result not equal"}, {"sample_id": 573, "db_id": "student_transcripts_tracking", "question": "Show the date of the transcript which shows the least number of results, also list the id.", "score": 1, "gold_sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1", "pred_sql": "SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1)", "source_tables": ["transcripts", "transcript_contents"], "error_info": ""}, {"sample_id": 574, "db_id": "student_transcripts_tracking", "question": "What is the date and id of the transcript with the least number of results?", "score": 1, "gold_sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1", "pred_sql": "SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id = (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1)", "source_tables": ["transcripts", "transcript_contents"], "error_info": ""}, {"sample_id": 575, "db_id": "student_transcripts_tracking", "question": "Find the semester when both Master students and Bachelor students got enrolled in.", "score": 0, "gold_sql": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "pred_sql": "SELECT DISTINCT S.semester_name\nFROM Semesters S\nJOIN Student_Enrolment SE ON S.semester_id = SE.semester_id\nJOIN Degree_Programs DP ON SE.degree_program_id = DP.degree_program_id\nWHERE DP.degree_summary_name IN ('Master', 'Bachelor');", "source_tables": ["student_enrolment", "degree_programs"], "error_info": "Result not equal"}, {"sample_id": 576, "db_id": "student_transcripts_tracking", "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?", "score": 0, "gold_sql": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "pred_sql": "SELECT DISTINCT s.semester_id \nFROM Semesters s \nJOIN Student_Enrolment se ON s.semester_id = se.semester_id \nJOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id \nWHERE dp.degree_summary_name IN ('Masters', 'Bachelors');", "source_tables": ["student_enrolment", "degree_programs"], "error_info": "Result not equal"}, {"sample_id": 577, "db_id": "student_transcripts_tracking", "question": "How many different addresses do the students currently live?", "score": 1, "gold_sql": "SELECT count(DISTINCT current_address_id) FROM Students", "pred_sql": "SELECT COUNT(DISTINCT current_address_id) AS different_addresses FROM Students;", "source_tables": ["students"], "error_info": ""}, {"sample_id": 578, "db_id": "student_transcripts_tracking", "question": "What are the different addresses that have students living there?", "score": 0, "gold_sql": "SELECT count(DISTINCT current_address_id) FROM Students", "pred_sql": "SELECT DISTINCT a.* FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id OR a.address_id = s.permanent_address_id;", "source_tables": ["students"], "error_info": "Result not equal"}, {"sample_id": 579, "db_id": "student_transcripts_tracking", "question": "List all the student details in reversed lexicographical order.", "score": 0, "gold_sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "pred_sql": "SELECT * FROM Students ORDER BY last_name DESC, first_name DESC, middle_name DESC;", "source_tables": ["students"], "error_info": "Result not equal"}, {"sample_id": 580, "db_id": "student_transcripts_tracking", "question": "What other details can you tell me about students in reverse alphabetical order?", "score": 0, "gold_sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "pred_sql": "SELECT other_student_details FROM Students ORDER BY last_name DESC;", "source_tables": ["students"], "error_info": "Result not equal"}, {"sample_id": 581, "db_id": "student_transcripts_tracking", "question": "Describe the section h.", "score": 0, "gold_sql": "SELECT section_description FROM Sections WHERE section_name  =  'h'", "pred_sql": "SELECT * FROM Sections WHERE section_name = 'h';", "source_tables": ["sections"], "error_info": "Result not equal"}, {"sample_id": 582, "db_id": "student_transcripts_tracking", "question": "What is the description for the section named h?", "score": 1, "gold_sql": "SELECT section_description FROM Sections WHERE section_name  =  'h'", "pred_sql": "SELECT section_description FROM Sections WHERE section_name = 'h';", "source_tables": ["sections"], "error_info": ""}, {"sample_id": 583, "db_id": "student_transcripts_tracking", "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .", "score": 0, "gold_sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "pred_sql": "SELECT first_name FROM Students WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582';", "source_tables": ["addresses", "students"], "error_info": "Result not equal"}, {"sample_id": 584, "db_id": "student_transcripts_tracking", "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?", "score": 0, "gold_sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "pred_sql": "SELECT first_name FROM Students WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582';", "source_tables": ["addresses", "students"], "error_info": "Result not equal"}, {"sample_id": 585, "db_id": "tvshow", "question": "List the title of all cartoons in alphabetical order.", "score": 1, "gold_sql": "SELECT Title FROM Cartoon ORDER BY title", "pred_sql": "SELECT Title FROM Cartoon ORDER BY Title ASC;", "source_tables": ["cartoon"], "error_info": ""}, {"sample_id": 586, "db_id": "tvshow", "question": "What are the titles of the cartoons sorted alphabetically?", "score": 1, "gold_sql": "SELECT Title FROM Cartoon ORDER BY title", "pred_sql": "SELECT Title FROM Cartoon ORDER BY Title ASC;", "source_tables": ["cartoon"], "error_info": ""}, {"sample_id": 587, "db_id": "tvshow", "question": "List all cartoon directed by \"Ben Jones\".", "score": 0, "gold_sql": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';", "pred_sql": "SELECT * FROM Cartoon WHERE Directed_by = 'Ben Jones';", "source_tables": ["cartoon"], "error_info": "Result not equal"}, {"sample_id": 588, "db_id": "tvshow", "question": "What are the names of all cartoons directed by Ben Jones?", "score": 1, "gold_sql": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';", "pred_sql": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';", "source_tables": ["cartoon"], "error_info": ""}, {"sample_id": 589, "db_id": "tvshow", "question": "How many cartoons were written by \"Joseph Kuhr\"?", "score": 1, "gold_sql": "SELECT count(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';", "pred_sql": "SELECT COUNT(*) AS number_of_cartoons FROM Cartoon WHERE Written_by = 'Joseph Kuhr';", "source_tables": ["cartoon"], "error_info": ""}, {"sample_id": 590, "db_id": "tvshow", "question": "What is the number of cartoones written by Joseph Kuhr?", "score": 1, "gold_sql": "SELECT count(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';", "pred_sql": "SELECT COUNT(*) AS number_of_cartoons FROM Cartoon WHERE Written_by = 'Joseph Kuhr';", "source_tables": ["cartoon"], "error_info": ""}, {"sample_id": 591, "db_id": "tvshow", "question": "list all cartoon titles and their directors ordered by their air date", "score": 1, "gold_sql": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date", "pred_sql": "SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date;", "source_tables": ["cartoon"], "error_info": ""}, {"sample_id": 592, "db_id": "tvshow", "question": "What is the name and directors of all the cartoons that are ordered by air date?", "score": 1, "gold_sql": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date", "pred_sql": "SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date;", "source_tables": ["cartoon"], "error_info": ""}, {"sample_id": 593, "db_id": "tvshow", "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".", "score": 1, "gold_sql": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';", "pred_sql": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';", "source_tables": ["cartoon"], "error_info": ""}, {"sample_id": 594, "db_id": "tvshow", "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?", "score": 1, "gold_sql": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';", "pred_sql": "SELECT Title FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti');", "source_tables": ["cartoon"], "error_info": ""}, {"sample_id": 595, "db_id": "tvshow", "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.", "score": 1, "gold_sql": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;", "pred_sql": "SELECT Country, COUNT(*) AS Number_of_TV_Channels FROM TV_Channel GROUP BY Country ORDER BY Number_of_TV_Channels DESC LIMIT 1;", "source_tables": ["tv_channel"], "error_info": ""}, {"sample_id": 596, "db_id": "tvshow", "question": "What is the country with the most number of TV Channels and how many does it have?", "score": 1, "gold_sql": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;", "pred_sql": "SELECT Country, COUNT(*) AS Channel_Count FROM TV_Channel GROUP BY Country ORDER BY Channel_Count DESC LIMIT 1;", "source_tables": ["tv_channel"], "error_info": ""}, {"sample_id": 597, "db_id": "tvshow", "question": "List the number of different series names and contents in the TV Channel table.", "score": 1, "gold_sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "pred_sql": "SELECT COUNT(DISTINCT series_name) AS different_series_names, COUNT(DISTINCT Content) AS different_contents FROM TV_Channel;", "source_tables": ["tv_channel"], "error_info": ""}, {"sample_id": 598, "db_id": "tvshow", "question": "How many different series and contents are listed in the TV Channel table?", "score": 1, "gold_sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "pred_sql": "SELECT COUNT(DISTINCT series_name) AS different_series, COUNT(DISTINCT Content) AS different_contents FROM TV_Channel;", "source_tables": ["tv_channel"], "error_info": ""}, {"sample_id": 599, "db_id": "tvshow", "question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "score": 1, "gold_sql": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';", "pred_sql": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';", "source_tables": ["tv_channel"], "error_info": ""}, {"sample_id": 600, "db_id": "tvshow", "question": "What is the content of the series Sky Radio?", "score": 1, "gold_sql": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';", "pred_sql": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';", "source_tables": ["tv_channel"], "error_info": ""}, {"sample_id": 601, "db_id": "tvshow", "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "score": 1, "gold_sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio';", "pred_sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio';", "source_tables": ["tv_channel"], "error_info": ""}, {"sample_id": 602, "db_id": "tvshow", "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "score": 1, "gold_sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio';", "pred_sql": "SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.series_name = 'Sky Radio';", "source_tables": ["tv_channel"], "error_info": ""}, {"sample_id": 603, "db_id": "tvshow", "question": "How many TV Channel using language English?", "score": 1, "gold_sql": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = 'English';", "pred_sql": "SELECT COUNT(*) AS ChannelCount FROM TV_Channel WHERE Language = 'English';", "source_tables": ["tv_channel"], "error_info": ""}, {"sample_id": 604, "db_id": "tvshow", "question": "How many TV Channels use the English language?", "score": 1, "gold_sql": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = 'English';", "pred_sql": "SELECT COUNT(*) AS NumberOfChannels FROM TV_Channel WHERE Language = 'English';", "source_tables": ["tv_channel"], "error_info": ""}, {"sample_id": 605, "db_id": "tvshow", "question": "List the language used least number of TV Channel. List language and number of TV Channel.", "score": 1, "gold_sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;", "pred_sql": "SELECT Language, COUNT(*) AS Number_of_TV_Channels \nFROM TV_Channel \nGROUP BY Language \nORDER BY Number_of_TV_Channels ASC \nLIMIT 1;", "source_tables": ["tv_channel"], "error_info": ""}, {"sample_id": 606, "db_id": "tvshow", "question": "What are the languages used by the least number of TV Channels and how many channels use it?", "score": 1, "gold_sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;", "pred_sql": "SELECT Language, COUNT(*) AS Channel_Count\nFROM TV_Channel\nGROUP BY Language\nORDER BY Channel_Count ASC\nLIMIT 1;", "source_tables": ["tv_channel"], "error_info": ""}, {"sample_id": 607, "db_id": "tvshow", "question": "List each language and the number of TV Channels using it.", "score": 1, "gold_sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE", "pred_sql": "SELECT Language, COUNT(*) AS Number_of_Channels FROM TV_Channel GROUP BY Language;", "source_tables": ["tv_channel"], "error_info": ""}, {"sample_id": 608, "db_id": "tvshow", "question": "For each language, list the number of TV Channels that use it.", "score": 1, "gold_sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE", "pred_sql": "SELECT Language, COUNT(*) AS Number_of_Channels\nFROM TV_Channel\nGROUP BY Language;", "source_tables": ["tv_channel"], "error_info": ""}, {"sample_id": 609, "db_id": "tvshow", "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "score": 1, "gold_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!';", "pred_sql": "SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = 'The Rise of the Blue Beetle!';", "source_tables": ["tv_channel", "cartoon"], "error_info": ""}, {"sample_id": 610, "db_id": "tvshow", "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "score": 0, "gold_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!';", "pred_sql": "SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = 'The Rise of the Blue Beetle';", "source_tables": ["tv_channel", "cartoon"], "error_info": "Result not equal"}, {"sample_id": 611, "db_id": "tvshow", "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "score": 1, "gold_sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio';", "pred_sql": "SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';", "source_tables": ["tv_channel", "cartoon"], "error_info": ""}, {"sample_id": 612, "db_id": "tvshow", "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "score": 1, "gold_sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio';", "pred_sql": "SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';", "source_tables": ["tv_channel", "cartoon"], "error_info": ""}, {"sample_id": 613, "db_id": "tvshow", "question": "List the Episode of all TV series sorted by rating.", "score": 0, "gold_sql": "SELECT Episode FROM TV_series ORDER BY rating", "pred_sql": "SELECT Episode FROM TV_series ORDER BY Rating DESC;", "source_tables": ["tv_series"], "error_info": "Result not equal"}, {"sample_id": 614, "db_id": "tvshow", "question": "What are all of the episodes ordered by ratings?", "score": 0, "gold_sql": "SELECT Episode FROM TV_series ORDER BY rating", "pred_sql": "SELECT * FROM TV_series ORDER BY Rating DESC;", "source_tables": ["tv_series"], "error_info": "Result not equal"}, {"sample_id": 615, "db_id": "tvshow", "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.", "score": 1, "gold_sql": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;", "pred_sql": "SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY TV_series.Rating DESC LIMIT 3;", "source_tables": ["tv_series"], "error_info": ""}, {"sample_id": 616, "db_id": "tvshow", "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?", "score": 1, "gold_sql": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;", "pred_sql": "SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;", "source_tables": ["tv_series"], "error_info": ""}, {"sample_id": 617, "db_id": "tvshow", "question": "What is minimum and maximum share of TV series?", "score": 1, "gold_sql": "SELECT max(SHARE) , min(SHARE) FROM TV_series;", "pred_sql": "SELECT MIN(Share) AS Minimum_Share, MAX(Share) AS Maximum_Share FROM TV_series;", "source_tables": ["tv_series"], "error_info": ""}, {"sample_id": 618, "db_id": "tvshow", "question": "What is the maximum and minimum share for the TV series?", "score": 1, "gold_sql": "SELECT max(SHARE) , min(SHARE) FROM TV_series;", "pred_sql": "SELECT MAX(Share) AS Max_Share, MIN(Share) AS Min_Share FROM TV_series;", "source_tables": ["tv_series"], "error_info": ""}, {"sample_id": 619, "db_id": "tvshow", "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "score": 1, "gold_sql": "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';", "pred_sql": "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';", "source_tables": ["tv_series"], "error_info": ""}, {"sample_id": 620, "db_id": "tvshow", "question": "When did the episode \"A Love of a Lifetime\" air?", "score": 1, "gold_sql": "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';", "pred_sql": "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';", "source_tables": ["tv_series"], "error_info": ""}, {"sample_id": 621, "db_id": "tvshow", "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "score": 1, "gold_sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';", "pred_sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';", "source_tables": ["tv_series"], "error_info": ""}, {"sample_id": 622, "db_id": "tvshow", "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "score": 1, "gold_sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';", "pred_sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';", "source_tables": ["tv_series"], "error_info": ""}, {"sample_id": 623, "db_id": "tvshow", "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "score": 1, "gold_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime';", "pred_sql": "SELECT TV_Channel.series_name \nFROM TV_series \nJOIN TV_Channel ON TV_series.Channel = TV_Channel.id \nWHERE TV_series.Episode = 'A Love of a Lifetime';", "source_tables": ["tv_channel", "tv_series"], "error_info": ""}, {"sample_id": 624, "db_id": "tvshow", "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "score": 0, "gold_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime';", "pred_sql": "SELECT series_name FROM TV_series WHERE Episode = 'A Love of a Lifetime';", "source_tables": ["tv_channel", "tv_series"], "error_info": "Predction Execution Error:no such column: series_name"}, {"sample_id": 625, "db_id": "tvshow", "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "score": 1, "gold_sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio';", "pred_sql": "SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';", "source_tables": ["tv_channel", "tv_series"], "error_info": ""}, {"sample_id": 626, "db_id": "tvshow", "question": "What is the episode for the TV series named \"Sky Radio\"?", "score": 1, "gold_sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio';", "pred_sql": "SELECT Episode FROM TV_series WHERE Channel = (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio');", "source_tables": ["tv_channel", "tv_series"], "error_info": ""}, {"sample_id": 627, "db_id": "tvshow", "question": "Find the number of cartoons directed by each of the listed directors.", "score": 1, "gold_sql": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by", "pred_sql": "SELECT Directed_by, COUNT(*) AS Number_of_Cartoons FROM Cartoon GROUP BY Directed_by;", "source_tables": ["cartoon"], "error_info": ""}, {"sample_id": 628, "db_id": "tvshow", "question": "How many cartoons did each director create?", "score": 1, "gold_sql": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by", "pred_sql": "SELECT Directed_by, COUNT(*) AS Number_of_Cartoons FROM Cartoon GROUP BY Directed_by;", "source_tables": ["cartoon"], "error_info": ""}, {"sample_id": 629, "db_id": "tvshow", "question": "Find the production code and channel of the most recently aired cartoon .", "score": 1, "gold_sql": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "pred_sql": "SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1;", "source_tables": ["cartoon"], "error_info": ""}, {"sample_id": 630, "db_id": "tvshow", "question": "What is the produdction code and channel of the most recent cartoon ?", "score": 1, "gold_sql": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "pred_sql": "SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1;", "source_tables": ["cartoon"], "error_info": ""}, {"sample_id": 631, "db_id": "tvshow", "question": "Find the package choice and series name of the TV channel that has high definition TV.", "score": 0, "gold_sql": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  'yes'", "pred_sql": "SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = 'Yes';", "source_tables": ["tv_channel"], "error_info": "Result not equal"}, {"sample_id": 632, "db_id": "tvshow", "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "score": 0, "gold_sql": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  'yes'", "pred_sql": "SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = 'Yes';", "source_tables": ["tv_channel"], "error_info": "Result not equal"}, {"sample_id": 633, "db_id": "tvshow", "question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "score": 1, "gold_sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "pred_sql": "SELECT DISTINCT TV_Channel.Country \nFROM TV_Channel \nJOIN Cartoon ON TV_Channel.id = Cartoon.Channel \nWHERE Cartoon.Written_by = 'Todd Casey';", "source_tables": ["tv_channel", "cartoon"], "error_info": ""}, {"sample_id": 634, "db_id": "tvshow", "question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "score": 1, "gold_sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "pred_sql": "SELECT DISTINCT TV_Channel.Country \nFROM Cartoon \nJOIN TV_Channel ON Cartoon.Channel = TV_Channel.id \nWHERE Cartoon.Written_by = 'Todd Casey';", "source_tables": ["tv_channel", "cartoon"], "error_info": ""}, {"sample_id": 635, "db_id": "tvshow", "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?", "score": 0, "gold_sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "pred_sql": "SELECT DISTINCT TV_Channel.Country \nFROM TV_Channel \nLEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel \nWHERE Cartoon.Written_by != 'Todd Casey' OR Cartoon.Written_by IS NULL;", "source_tables": ["tv_channel", "cartoon"], "error_info": "Result not equal"}, {"sample_id": 636, "db_id": "tvshow", "question": "What are the countries that are not playing cartoons written by Todd Casey?", "score": 0, "gold_sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "pred_sql": "SELECT DISTINCT Country FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey');", "source_tables": ["tv_channel", "cartoon"], "error_info": "Result not equal"}, {"sample_id": 637, "db_id": "tvshow", "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?", "score": 0, "gold_sql": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "pred_sql": "SELECT TV_Channel.series_name, TV_Channel.Country \nFROM TV_Channel \nJOIN Cartoon ON TV_Channel.id = Cartoon.Channel \nWHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang');", "source_tables": ["tv_channel", "cartoon"], "error_info": "Result not equal"}, {"sample_id": 638, "db_id": "tvshow", "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?", "score": 0, "gold_sql": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "pred_sql": "SELECT TV_Channel.series_name, TV_Channel.Country \nFROM TV_Channel \nJOIN Cartoon ON TV_Channel.id = Cartoon.Channel \nWHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang')", "source_tables": ["tv_channel", "cartoon"], "error_info": "Result not equal"}, {"sample_id": 639, "db_id": "tvshow", "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "score": 1, "gold_sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "pred_sql": "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English';", "source_tables": ["tv_channel"], "error_info": ""}, {"sample_id": 640, "db_id": "tvshow", "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "score": 1, "gold_sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "pred_sql": "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English';", "source_tables": ["tv_channel"], "error_info": ""}, {"sample_id": 641, "db_id": "tvshow", "question": "find id of the tv channels that from the countries where have more than two tv channels.", "score": 0, "gold_sql": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "pred_sql": "SELECT id FROM TV_Channel WHERE Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(*) > 2);", "source_tables": ["tv_channel"], "error_info": "Result not equal"}, {"sample_id": 642, "db_id": "tvshow", "question": "What are the ids of all tv channels that have more than 2 TV channels?", "score": 0, "gold_sql": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "pred_sql": "SELECT id FROM TV_Channel GROUP BY id HAVING COUNT(*) > 2;", "source_tables": ["tv_channel"], "error_info": "Result not equal"}, {"sample_id": 643, "db_id": "tvshow", "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.", "score": 1, "gold_sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "pred_sql": "SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.id NOT IN (SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Directed_by = 'Ben Jones');", "source_tables": ["tv_channel", "cartoon"], "error_info": ""}, {"sample_id": 644, "db_id": "tvshow", "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?", "score": 0, "gold_sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "pred_sql": "SELECT TV_Channel.id FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by != 'Ben Jones' OR Cartoon.Directed_by IS NULL GROUP BY TV_Channel.id;", "source_tables": ["tv_channel", "cartoon"], "error_info": "Result not equal"}, {"sample_id": 645, "db_id": "tvshow", "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.", "score": 0, "gold_sql": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "pred_sql": "SELECT DISTINCT TV_Channel.Package_Option \nFROM TV_Channel \nLEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel \nWHERE Cartoon.Directed_by != 'Ben Jones' OR Cartoon.Directed_by IS NULL;", "source_tables": ["tv_channel", "cartoon"], "error_info": "Result not equal"}, {"sample_id": 646, "db_id": "tvshow", "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?", "score": 0, "gold_sql": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "pred_sql": "SELECT DISTINCT TV_Channel.Package_Option \nFROM TV_Channel \nLEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel \nWHERE Cartoon.Directed_by != 'Ben Jones' OR Cartoon.Directed_by IS NULL;", "source_tables": ["tv_channel", "cartoon"], "error_info": "Result not equal"}, {"sample_id": 647, "db_id": "poker_player", "question": "How many poker players are there?", "score": 1, "gold_sql": "SELECT count(*) FROM poker_player", "pred_sql": "SELECT COUNT(*) AS total_players FROM poker_player;", "source_tables": ["poker_player"], "error_info": ""}, {"sample_id": 648, "db_id": "poker_player", "question": "Count the number of poker players.", "score": 1, "gold_sql": "SELECT count(*) FROM poker_player", "pred_sql": "SELECT COUNT(*) AS NumberOfPlayers FROM poker_player;", "source_tables": ["poker_player"], "error_info": ""}, {"sample_id": 649, "db_id": "poker_player", "question": "List the earnings of poker players in descending order.", "score": 1, "gold_sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "pred_sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC;", "source_tables": ["poker_player"], "error_info": ""}, {"sample_id": 650, "db_id": "poker_player", "question": "What are the earnings of poker players, ordered descending by value?", "score": 1, "gold_sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "pred_sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC;", "source_tables": ["poker_player"], "error_info": ""}, {"sample_id": 651, "db_id": "poker_player", "question": "List the final tables made and the best finishes of poker players.", "score": 1, "gold_sql": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "pred_sql": "SELECT Final_Table_Made, Best_Finish FROM poker_player;", "source_tables": ["poker_player"], "error_info": ""}, {"sample_id": 652, "db_id": "poker_player", "question": "What are the final tables made and best finishes for all poker players?", "score": 1, "gold_sql": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "pred_sql": "SELECT Final_Table_Made, Best_Finish FROM poker_player;", "source_tables": ["poker_player"], "error_info": ""}, {"sample_id": 653, "db_id": "poker_player", "question": "What is the average earnings of poker players?", "score": 1, "gold_sql": "SELECT avg(Earnings) FROM poker_player", "pred_sql": "SELECT AVG(Earnings) AS Average_Earnings FROM poker_player;", "source_tables": ["poker_player"], "error_info": ""}, {"sample_id": 654, "db_id": "poker_player", "question": "Return the average earnings across all poker players.", "score": 1, "gold_sql": "SELECT avg(Earnings) FROM poker_player", "pred_sql": "SELECT AVG(Earnings) AS Average_Earnings FROM poker_player;", "source_tables": ["poker_player"], "error_info": ""}, {"sample_id": 655, "db_id": "poker_player", "question": "What is the money rank of the poker player with the highest earnings?", "score": 1, "gold_sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "pred_sql": "SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player);", "source_tables": ["poker_player"], "error_info": ""}, {"sample_id": 656, "db_id": "poker_player", "question": "Return the money rank of the player with the greatest earnings.", "score": 1, "gold_sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "pred_sql": "SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player);", "source_tables": ["poker_player"], "error_info": ""}, {"sample_id": 657, "db_id": "poker_player", "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "score": 1, "gold_sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "pred_sql": "SELECT MAX(Final_Table_Made) AS Max_Final_Tables\nFROM poker_player\nWHERE Earnings < 200000;", "source_tables": ["poker_player"], "error_info": ""}, {"sample_id": 658, "db_id": "poker_player", "question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "score": 1, "gold_sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "pred_sql": "SELECT MAX(Final_Table_Made) AS Max_Final_Tables\nFROM poker_player\nWHERE Earnings < 200000;", "source_tables": ["poker_player"], "error_info": ""}, {"sample_id": 659, "db_id": "poker_player", "question": "What are the names of poker players?", "score": 1, "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "pred_sql": "SELECT Name FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID;", "source_tables": ["poker_player", "people"], "error_info": ""}, {"sample_id": 660, "db_id": "poker_player", "question": "Return the names of all the poker players.", "score": 1, "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "pred_sql": "SELECT Name FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID;", "source_tables": ["poker_player", "people"], "error_info": ""}, {"sample_id": 661, "db_id": "poker_player", "question": "What are the names of poker players whose earnings is higher than 300000?", "score": 1, "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "pred_sql": "SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings > '300000';", "source_tables": ["poker_player", "people"], "error_info": ""}, {"sample_id": 662, "db_id": "poker_player", "question": "Give the names of poker players who have earnings above 300000.", "score": 1, "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "pred_sql": "SELECT p.Name FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.Earnings > 300000;", "source_tables": ["poker_player", "people"], "error_info": ""}, {"sample_id": 663, "db_id": "poker_player", "question": "List the names of poker players ordered by the final tables made in ascending order.", "score": 1, "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made", "pred_sql": "SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Final_Table_Made ASC;", "source_tables": ["poker_player", "people"], "error_info": ""}, {"sample_id": 664, "db_id": "poker_player", "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?", "score": 0, "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made", "pred_sql": "SELECT p.Name, COUNT(pp.Final_Table_Made) AS Final_Table_Count \nFROM people p \nJOIN poker_player pp ON p.People_ID = pp.People_ID \nWHERE pp.Final_Table_Made = 'Yes' \nGROUP BY p.Name \nORDER BY Final_Table_Count ASC;", "source_tables": ["poker_player", "people"], "error_info": "Result not equal"}, {"sample_id": 665, "db_id": "poker_player", "question": "What is the birth date of the poker player with the lowest earnings?", "score": 1, "gold_sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "pred_sql": "SELECT p.Birth_Date FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID ORDER BY pp.Earnings ASC LIMIT 1;", "source_tables": ["poker_player", "people"], "error_info": ""}, {"sample_id": 666, "db_id": "poker_player", "question": "Return the birth date of the poker player with the lowest earnings.", "score": 1, "gold_sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "pred_sql": "SELECT p.Birth_Date FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID ORDER BY pp.Earnings ASC LIMIT 1;", "source_tables": ["poker_player", "people"], "error_info": ""}, {"sample_id": 667, "db_id": "poker_player", "question": "What is the money rank of the tallest poker player?", "score": 1, "gold_sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "pred_sql": "SELECT pp.Money_Rank FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE p.Height = (SELECT MAX(Height) FROM people);", "source_tables": ["poker_player", "people"], "error_info": ""}, {"sample_id": 668, "db_id": "poker_player", "question": "Return the money rank of the poker player with the greatest height.", "score": 1, "gold_sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "pred_sql": "SELECT Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height = (SELECT MAX(Height) FROM people);", "source_tables": ["poker_player", "people"], "error_info": ""}, {"sample_id": 669, "db_id": "poker_player", "question": "What is the average earnings of poker players with height higher than 200?", "score": 1, "gold_sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "pred_sql": "SELECT AVG(Earnings) AS Average_Earnings FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height > 200;", "source_tables": ["poker_player", "people"], "error_info": ""}, {"sample_id": 670, "db_id": "poker_player", "question": "Give average earnings of poker players who are taller than 200.", "score": 1, "gold_sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "pred_sql": "SELECT AVG(Earnings) AS Average_Earnings FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height > 200;", "source_tables": ["poker_player", "people"], "error_info": ""}, {"sample_id": 671, "db_id": "poker_player", "question": "What are the names of poker players in descending order of earnings?", "score": 1, "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC", "pred_sql": "SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings DESC;", "source_tables": ["poker_player", "people"], "error_info": ""}, {"sample_id": 672, "db_id": "poker_player", "question": "Return the names of poker players sorted by their earnings descending.", "score": 1, "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC", "pred_sql": "SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings DESC;", "source_tables": ["poker_player", "people"], "error_info": ""}, {"sample_id": 673, "db_id": "poker_player", "question": "What are different nationalities of people and the corresponding number of people from each nation?", "score": 1, "gold_sql": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality", "pred_sql": "SELECT Nationality, COUNT(*) AS NumberOfPeople FROM people GROUP BY Nationality;", "source_tables": ["people"], "error_info": ""}, {"sample_id": 674, "db_id": "poker_player", "question": "How many people are there of each nationality?", "score": 1, "gold_sql": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality", "pred_sql": "SELECT Nationality, COUNT(*) AS NumberOfPeople FROM people GROUP BY Nationality;", "source_tables": ["people"], "error_info": ""}, {"sample_id": 675, "db_id": "poker_player", "question": "What is the most common nationality of people?", "score": 0, "gold_sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Nationality, COUNT(*) as Count FROM people GROUP BY Nationality ORDER BY Count DESC LIMIT 1;", "source_tables": ["people"], "error_info": "Result not equal"}, {"sample_id": 676, "db_id": "poker_player", "question": "Give the nationality that is most common across all people.", "score": 0, "gold_sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Nationality, COUNT(*) as Count FROM people GROUP BY Nationality ORDER BY Count DESC LIMIT 1;", "source_tables": ["people"], "error_info": "Result not equal"}, {"sample_id": 677, "db_id": "poker_player", "question": "What are the nationalities that are shared by at least two people?", "score": 1, "gold_sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2", "pred_sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(People_ID) >= 2;", "source_tables": ["people"], "error_info": ""}, {"sample_id": 678, "db_id": "poker_player", "question": "Return the nationalities for which there are two or more people.", "score": 1, "gold_sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2", "pred_sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(People_ID) >= 2;", "source_tables": ["people"], "error_info": ""}, {"sample_id": 679, "db_id": "poker_player", "question": "List the names and birth dates of people in ascending alphabetical order of name.", "score": 1, "gold_sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC", "pred_sql": "SELECT Name, Birth_Date FROM people ORDER BY Name ASC;", "source_tables": ["people"], "error_info": ""}, {"sample_id": 680, "db_id": "poker_player", "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?", "score": 1, "gold_sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC", "pred_sql": "SELECT Name, Birth_Date FROM people ORDER BY Name ASC;", "source_tables": ["people"], "error_info": ""}, {"sample_id": 681, "db_id": "poker_player", "question": "Show names of people whose nationality is not \"Russia\".", "score": 1, "gold_sql": "SELECT Name FROM people WHERE Nationality != 'Russia'", "pred_sql": "SELECT Name FROM people WHERE Nationality != 'Russia';", "source_tables": ["people"], "error_info": ""}, {"sample_id": 682, "db_id": "poker_player", "question": "What are the names of people who are not from Russia?", "score": 1, "gold_sql": "SELECT Name FROM people WHERE Nationality != 'Russia'", "pred_sql": "SELECT Name FROM people WHERE Nationality != 'Russia';", "source_tables": ["people"], "error_info": ""}, {"sample_id": 683, "db_id": "poker_player", "question": "List the names of people that are not poker players.", "score": 1, "gold_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "pred_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);", "source_tables": ["poker_player", "people"], "error_info": ""}, {"sample_id": 684, "db_id": "poker_player", "question": "What are the names of people who do not play poker?", "score": 1, "gold_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "pred_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "source_tables": ["poker_player", "people"], "error_info": ""}, {"sample_id": 685, "db_id": "poker_player", "question": "How many distinct nationalities are there?", "score": 1, "gold_sql": "SELECT count(DISTINCT Nationality) FROM people", "pred_sql": "SELECT COUNT(DISTINCT Nationality) AS Distinct_Nationalities FROM people;", "source_tables": ["people"], "error_info": ""}, {"sample_id": 686, "db_id": "poker_player", "question": "Count the number of different nationalities.", "score": 1, "gold_sql": "SELECT count(DISTINCT Nationality) FROM people", "pred_sql": "SELECT COUNT(DISTINCT Nationality) AS Different_Nationalities FROM people;", "source_tables": ["people"], "error_info": ""}, {"sample_id": 687, "db_id": "voter_1", "question": "How many states are there?", "score": 0, "gold_sql": "SELECT count(*) FROM area_code_state", "pred_sql": "SELECT COUNT(DISTINCT state) AS number_of_states FROM AREA_CODE_STATE;", "source_tables": ["area_code_state"], "error_info": "Result not equal"}, {"sample_id": 688, "db_id": "voter_1", "question": "List the contestant numbers and names, ordered by contestant name descending.", "score": 1, "gold_sql": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC", "pred_sql": "SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC;", "source_tables": ["contestants"], "error_info": ""}, {"sample_id": 689, "db_id": "voter_1", "question": "List the vote ids, phone numbers and states of all votes.", "score": 1, "gold_sql": "SELECT vote_id ,  phone_number ,  state FROM votes", "pred_sql": "SELECT vote_id, phone_number, state FROM VOTES;", "source_tables": ["votes"], "error_info": ""}, {"sample_id": 690, "db_id": "voter_1", "question": "What are the maximum and minimum values of area codes?", "score": 1, "gold_sql": "SELECT max(area_code) ,  min(area_code) FROM area_code_state", "pred_sql": "SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM AREA_CODE_STATE;", "source_tables": ["area_code_state"], "error_info": ""}, {"sample_id": 691, "db_id": "voter_1", "question": "What is last date created of votes from the state 'CA'?", "score": 1, "gold_sql": "SELECT max(created) FROM votes WHERE state  =  'CA'", "pred_sql": "SELECT MAX(created) AS last_date_created FROM VOTES WHERE state = 'CA';", "source_tables": ["votes"], "error_info": ""}, {"sample_id": 692, "db_id": "voter_1", "question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "score": 1, "gold_sql": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'", "pred_sql": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_name != 'Jessie Alloway';", "source_tables": ["contestants"], "error_info": ""}, {"sample_id": 693, "db_id": "voter_1", "question": "What are the distinct states and create time of all votes?", "score": 1, "gold_sql": "SELECT DISTINCT state ,  created FROM votes", "pred_sql": "SELECT DISTINCT state, created FROM VOTES;", "source_tables": ["votes"], "error_info": ""}, {"sample_id": 694, "db_id": "voter_1", "question": "What are the contestant numbers and names of the contestants who had at least two votes?", "score": 1, "gold_sql": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2", "pred_sql": "SELECT C.contestant_number, C.contestant_name \nFROM CONTESTANTS C \nJOIN VOTES V ON C.contestant_number = V.contestant_number \nGROUP BY C.contestant_number, C.contestant_name \nHAVING COUNT(V.vote_id) >= 2;", "source_tables": ["votes", "contestants"], "error_info": ""}, {"sample_id": 695, "db_id": "voter_1", "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?", "score": 1, "gold_sql": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1", "pred_sql": "SELECT c.contestant_number, c.contestant_name \nFROM CONTESTANTS c \nJOIN VOTES v ON c.contestant_number = v.contestant_number \nGROUP BY c.contestant_number, c.contestant_name \nORDER BY COUNT(v.vote_id) ASC \nLIMIT 1;", "source_tables": ["votes", "contestants"], "error_info": ""}, {"sample_id": 696, "db_id": "voter_1", "question": "What are the number of votes from state 'NY' or 'CA'?", "score": 1, "gold_sql": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'", "pred_sql": "SELECT COUNT(*) AS number_of_votes FROM VOTES WHERE state IN ('NY', 'CA');", "source_tables": ["votes"], "error_info": ""}, {"sample_id": 697, "db_id": "voter_1", "question": "How many contestants did not get voted?", "score": 1, "gold_sql": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )", "pred_sql": "SELECT COUNT(*) AS unvoted_contestants FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT DISTINCT contestant_number FROM VOTES);", "source_tables": ["votes", "contestants"], "error_info": ""}, {"sample_id": 698, "db_id": "voter_1", "question": "What is the area code in which the most voters voted?", "score": 0, "gold_sql": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT area_code FROM AREA_CODE_STATE WHERE state IN (SELECT state FROM VOTES GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1)", "source_tables": ["votes", "area_code_state"], "error_info": "Result not equal"}, {"sample_id": 699, "db_id": "voter_1", "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "score": 1, "gold_sql": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'", "pred_sql": "SELECT VOTES.created, VOTES.state, VOTES.phone_number \nFROM VOTES \nJOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number \nWHERE CONTESTANTS.contestant_name = 'Tabatha Gehling';", "source_tables": ["votes", "contestants"], "error_info": ""}, {"sample_id": 700, "db_id": "voter_1", "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.", "score": 0, "gold_sql": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'", "pred_sql": "SELECT DISTINCT ac.area_code\nFROM AREA_CODE_STATE ac\nJOIN VOTES v1 ON ac.state = v1.state\nJOIN CONTESTANTS c1 ON v1.contestant_number = c1.contestant_number\nJOIN VOTES v2 ON v1.phone_number = v2.phone_number\nJOIN CONTESTANTS c2 ON v2.contestant_number = c2.contestant_number\nWHERE c1.contestant_name = 'Tabatha Gehling' AND c2.contestant_name = 'Kelly Clauss';", "source_tables": ["votes", "area_code_state", "contestants"], "error_info": "Result not equal"}, {"sample_id": 701, "db_id": "voter_1", "question": "Return the names of the contestants whose names contain the substring 'Al' .", "score": 1, "gold_sql": "select contestant_name from contestants where contestant_name like '%al%'", "pred_sql": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%';", "source_tables": ["contestants"], "error_info": ""}, {"sample_id": 702, "db_id": "world_1", "question": "What are the names of all the countries that became independent after 1950?", "score": 1, "gold_sql": "SELECT Name FROM country WHERE IndepYear  >  1950", "pred_sql": "SELECT Name FROM country WHERE IndepYear > '1950';", "source_tables": ["country"], "error_info": ""}, {"sample_id": 703, "db_id": "world_1", "question": "Give the names of the nations that were founded after 1950.", "score": 1, "gold_sql": "SELECT Name FROM country WHERE IndepYear  >  1950", "pred_sql": "SELECT Name FROM country WHERE IndepYear > '1950';", "source_tables": ["country"], "error_info": ""}, {"sample_id": 704, "db_id": "world_1", "question": "How many countries have a republic as their form of government?", "score": 0, "gold_sql": "SELECT count(*) FROM country WHERE GovernmentForm  =  'Republic'", "pred_sql": "SELECT COUNT(*) AS NumberOfCountries FROM country WHERE GovernmentForm LIKE '%republic%';", "source_tables": ["country"], "error_info": "Result not equal"}, {"sample_id": 705, "db_id": "world_1", "question": "How many countries have governments that are republics?", "score": 0, "gold_sql": "SELECT count(*) FROM country WHERE GovernmentForm  =  'Republic'", "pred_sql": "SELECT COUNT(*) AS RepublicCount FROM country WHERE GovernmentForm LIKE '%Republic%';", "source_tables": ["country"], "error_info": "Result not equal"}, {"sample_id": 706, "db_id": "world_1", "question": "What is the total surface area of the countries in the Caribbean region?", "score": 1, "gold_sql": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  'Caribbean'", "pred_sql": "SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Region = 'Caribbean';", "source_tables": ["country"], "error_info": ""}, {"sample_id": 707, "db_id": "world_1", "question": "How much surface area do the countires in the Carribean cover together?", "score": 1, "gold_sql": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  'Caribbean'", "pred_sql": "SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Region = 'Caribbean';", "source_tables": ["country"], "error_info": ""}, {"sample_id": 708, "db_id": "world_1", "question": "Which continent is Anguilla in?", "score": 1, "gold_sql": "SELECT Continent FROM country WHERE Name  =  'Anguilla'", "pred_sql": "SELECT Continent FROM country WHERE Name = 'Anguilla';", "source_tables": ["country"], "error_info": ""}, {"sample_id": 709, "db_id": "world_1", "question": "What is the continent name which Anguilla belongs to?", "score": 1, "gold_sql": "SELECT Continent FROM country WHERE Name  =  'Anguilla'", "pred_sql": "SELECT continent FROM country WHERE Name = 'Anguilla';", "source_tables": ["country"], "error_info": ""}, {"sample_id": 710, "db_id": "world_1", "question": "Which region is the city Kabul located in?", "score": 1, "gold_sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  'Kabul'", "pred_sql": "SELECT country.Region FROM city JOIN country ON city.CountryCode = country.Code WHERE city.Name = 'Kabul';", "source_tables": ["country", "city"], "error_info": ""}, {"sample_id": 711, "db_id": "world_1", "question": "What region is Kabul in?", "score": 1, "gold_sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  'Kabul'", "pred_sql": "SELECT Region FROM country WHERE Code = (SELECT CountryCode FROM city WHERE Name = 'Kabul');", "source_tables": ["country", "city"], "error_info": ""}, {"sample_id": 712, "db_id": "world_1", "question": "Which language is the most popular in Aruba?", "score": 1, "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  'Aruba' ORDER BY Percentage DESC LIMIT 1", "pred_sql": "SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba') ORDER BY Percentage DESC LIMIT 1;", "source_tables": ["country", "countrylanguage"], "error_info": ""}, {"sample_id": 713, "db_id": "world_1", "question": "What language is predominantly spoken in Aruba?", "score": 0, "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  'Aruba' ORDER BY Percentage DESC LIMIT 1", "pred_sql": "SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba') AND IsOfficial = 'T' ORDER BY Percentage DESC LIMIT 1;", "source_tables": ["country", "countrylanguage"], "error_info": "Result not equal"}, {"sample_id": 714, "db_id": "world_1", "question": "What are the population and life expectancies in Brazil?", "score": 1, "gold_sql": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  'Brazil'", "pred_sql": "SELECT country.Population, country.LifeExpectancy FROM country WHERE country.Name = 'Brazil';", "source_tables": ["country"], "error_info": ""}, {"sample_id": 715, "db_id": "world_1", "question": "Give me Brazil\u2019s population and life expectancies.", "score": 1, "gold_sql": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  'Brazil'", "pred_sql": "SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';", "source_tables": ["country"], "error_info": ""}, {"sample_id": 716, "db_id": "world_1", "question": "What are the region and population of Angola?", "score": 1, "gold_sql": "SELECT Population ,  Region FROM country WHERE Name  =  'Angola'", "pred_sql": "SELECT Region, Population FROM country WHERE Name = 'Angola';", "source_tables": ["country"], "error_info": ""}, {"sample_id": 717, "db_id": "world_1", "question": "What region does Angola belong to and what is its population?", "score": 1, "gold_sql": "SELECT Population ,  Region FROM country WHERE Name  =  'Angola'", "pred_sql": "SELECT Region, Population FROM country WHERE Name = 'Angola';", "source_tables": ["country"], "error_info": ""}, {"sample_id": 718, "db_id": "world_1", "question": "What is the average expected life expectancy for countries in the region of Central Africa?", "score": 1, "gold_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  'Central Africa'", "pred_sql": "SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Region = 'Central Africa';", "source_tables": ["country"], "error_info": ""}, {"sample_id": 719, "db_id": "world_1", "question": "How long is the people\u2019s average life expectancy in Central Africa?", "score": 1, "gold_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  'Central Africa'", "pred_sql": "SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Region = 'Central Africa';", "source_tables": ["country"], "error_info": ""}, {"sample_id": 720, "db_id": "world_1", "question": "What is the name of country that has the shortest life expectancy in Asia?", "score": 1, "gold_sql": "SELECT Name FROM country WHERE Continent  =  'Asia' ORDER BY LifeExpectancy LIMIT 1", "pred_sql": "SELECT Name FROM country WHERE LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM country WHERE Continent = 'Asia');", "source_tables": ["country"], "error_info": ""}, {"sample_id": 721, "db_id": "world_1", "question": "Give the name of the country in Asia with the lowest life expectancy.", "score": 1, "gold_sql": "SELECT Name FROM country WHERE Continent  =  'Asia' ORDER BY LifeExpectancy LIMIT 1", "pred_sql": "SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1;", "source_tables": ["country"], "error_info": ""}, {"sample_id": 722, "db_id": "world_1", "question": "What is the total population and maximum GNP in Asia?", "score": 1, "gold_sql": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  'Asia'", "pred_sql": "SELECT SUM(Population) AS TotalPopulation, MAX(GNP) AS MaxGNP FROM country WHERE Continent = 'Asia';", "source_tables": ["country"], "error_info": ""}, {"sample_id": 723, "db_id": "world_1", "question": "How many people live in Asia, and what is the largest GNP among them?", "score": 0, "gold_sql": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  'Asia'", "pred_sql": "SELECT SUM(c.Population) AS TotalPopulation, MAX(c.GNP) AS LargestGNP\nFROM country AS co\nJOIN city AS c ON co.Code = c.CountryCode\nWHERE co.Continent = 'Asia';", "source_tables": ["country"], "error_info": "Predction Execution Error:no such column: c.GNP"}, {"sample_id": 724, "db_id": "world_1", "question": "What is the average life expectancy in African countries that are republics?", "score": 0, "gold_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  'Africa' AND GovernmentForm  =  'Republic'", "pred_sql": "SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%';", "source_tables": ["country"], "error_info": "Result not equal"}, {"sample_id": 725, "db_id": "world_1", "question": "Give the average life expectancy for countries in Africa which are republics?", "score": 0, "gold_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  'Africa' AND GovernmentForm  =  'Republic'", "pred_sql": "SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%';", "source_tables": ["country"], "error_info": "Result not equal"}, {"sample_id": 726, "db_id": "world_1", "question": "What is the total surface area of the continents Asia and Europe?", "score": 1, "gold_sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  'Asia' OR Continent  =  'Europe'", "pred_sql": "SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent IN ('Asia', 'Europe');", "source_tables": ["country"], "error_info": ""}, {"sample_id": 727, "db_id": "world_1", "question": "Give the total surface area covered by countries in Asia or Europe.", "score": 1, "gold_sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  'Asia' OR Continent  =  'Europe'", "pred_sql": "SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent IN ('Asia', 'Europe');", "source_tables": ["country"], "error_info": ""}, {"sample_id": 728, "db_id": "world_1", "question": "How many people live in Gelderland district?", "score": 1, "gold_sql": "SELECT sum(Population) FROM city WHERE District  =  'Gelderland'", "pred_sql": "SELECT SUM(Population) AS TotalPopulation FROM city WHERE District = 'Gelderland';", "source_tables": ["city"], "error_info": ""}, {"sample_id": 729, "db_id": "world_1", "question": "What is the total population of Gelderland district?", "score": 1, "gold_sql": "SELECT sum(Population) FROM city WHERE District  =  'Gelderland'", "pred_sql": "SELECT SUM(Population) AS TotalPopulation FROM city WHERE District = 'Gelderland';", "source_tables": ["city"], "error_info": ""}, {"sample_id": 730, "db_id": "world_1", "question": "What is the average GNP and total population in all nations whose government is US territory?", "score": 0, "gold_sql": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  'US Territory'", "pred_sql": "SELECT AVG(GNP) AS Average_GNP, SUM(Population) AS Total_Population FROM country WHERE GovernmentForm = 'US territory';", "source_tables": ["country"], "error_info": "Result not equal"}, {"sample_id": 731, "db_id": "world_1", "question": "Give the mean GNP and total population of nations which are considered US territory.", "score": 0, "gold_sql": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  'US Territory'", "pred_sql": "SELECT AVG(GNP) AS Mean_GNP, SUM(Population) AS Total_Population FROM country WHERE Name LIKE '%US%';", "source_tables": ["country"], "error_info": "Result not equal"}, {"sample_id": 732, "db_id": "world_1", "question": "How many unique languages are spoken in the world?", "score": 1, "gold_sql": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "pred_sql": "SELECT COUNT(DISTINCT Language) AS UniqueLanguages FROM countrylanguage;", "source_tables": ["countrylanguage"], "error_info": ""}, {"sample_id": 733, "db_id": "world_1", "question": "What is the number of distinct languages used around the world?", "score": 1, "gold_sql": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "pred_sql": "SELECT COUNT(DISTINCT Language) AS DistinctLanguages FROM countrylanguage;", "source_tables": ["countrylanguage"], "error_info": ""}, {"sample_id": 734, "db_id": "world_1", "question": "How many type of governments are in Africa?", "score": 0, "gold_sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  'Africa'", "pred_sql": "SELECT DISTINCT GovernmentForm FROM country WHERE Continent = 'Africa';", "source_tables": ["country"], "error_info": "Result not equal"}, {"sample_id": 735, "db_id": "world_1", "question": "How many different forms of governments are there in Africa?", "score": 0, "gold_sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  'Africa'", "pred_sql": "SELECT COUNT(DISTINCT GovernmentForm) AS DifferentFormsOfGovernment FROM country WHERE Region = 'Africa';", "source_tables": ["country"], "error_info": "Result not equal"}, {"sample_id": 736, "db_id": "world_1", "question": "What is the total number of languages used in Aruba?", "score": 1, "gold_sql": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  'Aruba'", "pred_sql": "SELECT COUNT(DISTINCT Language) AS TotalLanguages FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba');", "source_tables": ["country", "countrylanguage"], "error_info": ""}, {"sample_id": 737, "db_id": "world_1", "question": "How many languages are spoken in Aruba?", "score": 1, "gold_sql": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  'Aruba'", "pred_sql": "SELECT COUNT(DISTINCT Language) AS NumberOfLanguages FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba');", "source_tables": ["country", "countrylanguage"], "error_info": ""}, {"sample_id": 738, "db_id": "world_1", "question": "How many official languages does Afghanistan have?", "score": 1, "gold_sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  'Afghanistan' AND IsOfficial  =  'T'", "pred_sql": "SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T';", "source_tables": ["country", "countrylanguage"], "error_info": ""}, {"sample_id": 739, "db_id": "world_1", "question": "How many official languages are spoken in Afghanistan?", "score": 1, "gold_sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  'Afghanistan' AND IsOfficial  =  'T'", "pred_sql": "SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Afghanistan') AND IsOfficial = 'T';", "source_tables": ["country", "countrylanguage"], "error_info": ""}, {"sample_id": 740, "db_id": "world_1", "question": "What is name of the country that speaks the largest number of languages?", "score": 1, "gold_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name ORDER BY COUNT(cl.Language) DESC LIMIT 1;", "source_tables": ["country", "countrylanguage"], "error_info": ""}, {"sample_id": 741, "db_id": "world_1", "question": "Give the name of the nation that uses the greatest amount of languages.", "score": 1, "gold_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT country.Name\nFROM country\nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode\nGROUP BY country.Name\nORDER BY COUNT(countrylanguage.Language) DESC\nLIMIT 1;", "source_tables": ["country", "countrylanguage"], "error_info": ""}, {"sample_id": 742, "db_id": "world_1", "question": "Which continent has the most diverse languages?", "score": 0, "gold_sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT c.Continent, COUNT(DISTINCT cl.Language) AS LanguageCount\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nGROUP BY c.Continent\nORDER BY LanguageCount DESC\nLIMIT 1;", "source_tables": ["country", "countrylanguage"], "error_info": "Result not equal"}, {"sample_id": 743, "db_id": "world_1", "question": "Which continent speaks the most languages?", "score": 0, "gold_sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT c.Continent, COUNT(cl.Language) AS LanguageCount\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nGROUP BY c.Continent\nORDER BY LanguageCount DESC\nLIMIT 1;", "source_tables": ["country", "countrylanguage"], "error_info": "Result not equal"}, {"sample_id": 744, "db_id": "world_1", "question": "How many countries speak both English and Dutch?", "score": 1, "gold_sql": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'Dutch')", "pred_sql": "SELECT COUNT(DISTINCT cl1.CountryCode) AS CountryCount\nFROM countrylanguage cl1\nJOIN countrylanguage cl2 ON cl1.CountryCode = cl2.CountryCode\nWHERE cl1.Language = 'English' AND cl2.Language = 'Dutch';", "source_tables": ["country", "countrylanguage"], "error_info": ""}, {"sample_id": 745, "db_id": "world_1", "question": "What is the number of nations that use English and Dutch?", "score": 0, "gold_sql": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'Dutch')", "pred_sql": "SELECT COUNT(DISTINCT cl.CountryCode) AS NumberOfNations\nFROM countrylanguage cl\nWHERE cl.Language IN ('English', 'Dutch')\nAND cl.IsOfficial = 'T';", "source_tables": ["country", "countrylanguage"], "error_info": "Result not equal"}, {"sample_id": 746, "db_id": "world_1", "question": "What are the names of nations speak both English and French?", "score": 0, "gold_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'French'", "pred_sql": "SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode WHERE cl1.Language = 'English' AND cl1.IsOfficial = 'T' AND c.Code IN (SELECT cl2.CountryCode FROM countrylanguage cl2 WHERE cl2.Language = 'French' AND cl2.IsOfficial = 'T');", "source_tables": ["country", "countrylanguage"], "error_info": "Result not equal"}, {"sample_id": 747, "db_id": "world_1", "question": "Give the names of nations that speak both English and French.", "score": 1, "gold_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'French'", "pred_sql": "SELECT DISTINCT c.Name \nFROM country c \nJOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' \nJOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French';", "source_tables": ["country", "countrylanguage"], "error_info": ""}, {"sample_id": 748, "db_id": "world_1", "question": "What are the names of nations where both English and French are official languages?", "score": 1, "gold_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' AND T2.IsOfficial  =  'T' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'French' AND T2.IsOfficial  =  'T'", "pred_sql": "SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode WHERE cl1.Language = 'English' AND cl1.IsOfficial = 'T' AND c.Code IN (SELECT cl2.CountryCode FROM countrylanguage cl2 WHERE cl2.Language = 'French' AND cl2.IsOfficial = 'T');", "source_tables": ["country", "countrylanguage"], "error_info": ""}, {"sample_id": 749, "db_id": "world_1", "question": "Give the names of countries with English and French as official languages.", "score": 1, "gold_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' AND T2.IsOfficial  =  'T' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'French' AND T2.IsOfficial  =  'T'", "pred_sql": "SELECT DISTINCT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'French') AND cl.IsOfficial = 'T' GROUP BY c.Code HAVING COUNT(DISTINCT cl.Language) = 2;", "source_tables": ["country", "countrylanguage"], "error_info": ""}, {"sample_id": 750, "db_id": "world_1", "question": "What is the number of distinct continents where Chinese is spoken?", "score": 1, "gold_sql": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'Chinese'", "pred_sql": "SELECT COUNT(DISTINCT c.Continent) AS DistinctContinents\nFROM countrylanguage cl\nJOIN country c ON cl.CountryCode = c.Code\nWHERE cl.Language = 'Chinese';", "source_tables": ["country", "countrylanguage"], "error_info": ""}, {"sample_id": 751, "db_id": "world_1", "question": "How many continents speak Chinese?", "score": 1, "gold_sql": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'Chinese'", "pred_sql": "SELECT COUNT(DISTINCT country.Continent) AS NumberOfContinents\nFROM countrylanguage\nJOIN country ON countrylanguage.CountryCode = country.Code\nWHERE countrylanguage.Language = 'Chinese';", "source_tables": ["country", "countrylanguage"], "error_info": ""}, {"sample_id": 752, "db_id": "world_1", "question": "What are the regions that use English or Dutch?", "score": 1, "gold_sql": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' OR T2.Language  =  'Dutch'", "pred_sql": "SELECT DISTINCT Region FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language IN ('English', 'Dutch'));", "source_tables": ["country", "countrylanguage"], "error_info": ""}, {"sample_id": 753, "db_id": "world_1", "question": "Which regions speak Dutch or English?", "score": 1, "gold_sql": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' OR T2.Language  =  'Dutch'", "pred_sql": "SELECT DISTINCT c.Region FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('Dutch', 'English');", "source_tables": ["country", "countrylanguage"], "error_info": ""}, {"sample_id": 754, "db_id": "world_1", "question": "What are the countries where either English or Dutch is the official language ?", "score": 0, "gold_sql": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  'english' and isofficial  =  't' union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  'dutch' and isofficial  =  't'", "pred_sql": "SELECT DISTINCT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial = 'T' AND (cl.Language = 'English' OR cl.Language = 'Dutch');", "source_tables": ["country", "countrylanguage"], "error_info": "Result not equal"}, {"sample_id": 755, "db_id": "world_1", "question": "Which countries have either English or Dutch as an official language?", "score": 0, "gold_sql": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' AND IsOfficial  =  'T' UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'Dutch' AND IsOfficial  =  'T'", "pred_sql": "SELECT DISTINCT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.IsOfficial = 'T' AND (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch');", "source_tables": ["country", "countrylanguage"], "error_info": "Result not equal"}, {"sample_id": 756, "db_id": "world_1", "question": "Which language is the most popular on the Asian continent?", "score": 0, "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  'Asia' GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1", "pred_sql": "SELECT Language, SUM(Percentage) AS TotalPercentage \nFROM countrylanguage \nJOIN country ON countrylanguage.CountryCode = country.Code \nWHERE country.Continent = 'Asia' \nGROUP BY Language \nORDER BY TotalPercentage DESC \nLIMIT 1;", "source_tables": ["country", "countrylanguage"], "error_info": "Result not equal"}, {"sample_id": 757, "db_id": "world_1", "question": "What is the language that is used by the largest number of Asian nations?", "score": 1, "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  'Asia' GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1", "pred_sql": "SELECT cl.Language\nFROM countrylanguage cl\nJOIN country c ON cl.CountryCode = c.Code\nWHERE c.Continent = 'Asia'\nGROUP BY cl.Language\nORDER BY COUNT(DISTINCT c.Code) DESC\nLIMIT 1;", "source_tables": ["country", "countrylanguage"], "error_info": ""}, {"sample_id": 758, "db_id": "world_1", "question": "Which languages are spoken by only one country in republic governments?", "score": 0, "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  'Republic' GROUP BY T2.Language HAVING COUNT(*)  =  1", "pred_sql": "SELECT cl.Language \nFROM countrylanguage cl \nJOIN country c ON cl.CountryCode = c.Code \nWHERE cl.IsOfficial = 'T' \nAND c.GovernmentForm LIKE '%Republic%' \nGROUP BY cl.Language \nHAVING COUNT(DISTINCT c.Code) = 1;", "source_tables": ["country", "countrylanguage"], "error_info": "Result not equal"}, {"sample_id": 759, "db_id": "world_1", "question": "What languages are only used by a single country with a republic government?", "score": 0, "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  'Republic' GROUP BY T2.Language HAVING COUNT(*)  =  1", "pred_sql": "SELECT cl.Language \nFROM countrylanguage cl \nJOIN country c ON cl.CountryCode = c.Code \nWHERE cl.IsOfficial = 'T' \nAND c.GovernmentForm LIKE '%Republic%' \nGROUP BY cl.Language \nHAVING COUNT(DISTINCT c.Code) = 1;", "source_tables": ["country", "countrylanguage"], "error_info": "Result not equal"}, {"sample_id": 760, "db_id": "world_1", "question": "Find the city with the largest population that uses English.", "score": 0, "gold_sql": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  'English' ORDER BY T1.Population DESC LIMIT 1", "pred_sql": "SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1;", "source_tables": ["city", "countrylanguage"], "error_info": "Result not equal"}, {"sample_id": 761, "db_id": "world_1", "question": "What is the most populace city that speaks English?", "score": 1, "gold_sql": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  'English' ORDER BY T1.Population DESC LIMIT 1", "pred_sql": "SELECT city.Name, city.Population FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1;", "source_tables": ["city", "countrylanguage"], "error_info": ""}, {"sample_id": 762, "db_id": "world_1", "question": "Find the name, population and expected life length of asian country with the largest area?", "score": 1, "gold_sql": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  'Asia' ORDER BY SurfaceArea DESC LIMIT 1", "pred_sql": "SELECT country.Name, country.Population, country.LifeExpectancy \nFROM country \nWHERE country.Continent = 'Asia' \nORDER BY country.SurfaceArea DESC \nLIMIT 1;", "source_tables": ["country"], "error_info": ""}, {"sample_id": 763, "db_id": "world_1", "question": "What are the name, population, and life expectancy of the largest Asian country by land?", "score": 1, "gold_sql": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  'Asia' ORDER BY SurfaceArea DESC LIMIT 1", "pred_sql": "SELECT country.Name, country.Population, country.LifeExpectancy \nFROM country \nWHERE country.Continent = 'Asia' \nORDER BY country.SurfaceArea DESC \nLIMIT 1;", "source_tables": ["country"], "error_info": ""}, {"sample_id": 764, "db_id": "world_1", "question": "What is average life expectancy in the countries where English is not the official language?", "score": 1, "gold_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' AND T2.IsOfficial  =  'T')", "pred_sql": "SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE IsOfficial = 'T' AND Language = 'English');", "source_tables": ["country", "countrylanguage"], "error_info": ""}, {"sample_id": 765, "db_id": "world_1", "question": "Give the mean life expectancy of countries in which English is not the official language.", "score": 1, "gold_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' AND T2.IsOfficial  =  'T')", "pred_sql": "SELECT AVG(LifeExpectancy) AS MeanLifeExpectancy FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE IsOfficial = 'T' AND Language = 'English');", "source_tables": ["country", "countrylanguage"], "error_info": ""}, {"sample_id": 766, "db_id": "world_1", "question": "What is the total number of people living in the nations that do not use English?", "score": 0, "gold_sql": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English')", "pred_sql": "SELECT SUM(c.Population) AS TotalPopulation\nFROM country AS co\nJOIN countrylanguage AS cl ON co.Code = cl.CountryCode\nJOIN city AS c ON co.Code = c.CountryCode\nWHERE cl.Language != 'English' AND cl.IsOfficial = 'T';", "source_tables": ["country", "countrylanguage"], "error_info": "Result not equal"}, {"sample_id": 767, "db_id": "world_1", "question": "How many people live in countries that do not speak English?", "score": 0, "gold_sql": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English')", "pred_sql": "SELECT SUM(c.Population) AS TotalPopulation FROM country AS co JOIN countrylanguage AS cl ON co.Code = cl.CountryCode WHERE cl.Language != 'English' AND cl.IsOfficial = 'Yes';", "source_tables": ["country", "countrylanguage"], "error_info": "Predction Execution Error:no such column: c.Population"}, {"sample_id": 768, "db_id": "world_1", "question": "What is the official language spoken in the country whose head of state is Beatrix?", "score": 1, "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  'Beatrix' AND T2.IsOfficial  =  'T'", "pred_sql": "SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T';", "source_tables": ["country", "countrylanguage"], "error_info": ""}, {"sample_id": 769, "db_id": "world_1", "question": "What is the official language used in the country the name of whose head of state is Beatrix.", "score": 1, "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  'Beatrix' AND T2.IsOfficial  =  'T'", "pred_sql": "SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T';", "source_tables": ["country", "countrylanguage"], "error_info": ""}, {"sample_id": 770, "db_id": "world_1", "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "score": 1, "gold_sql": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  'T'", "pred_sql": "SELECT COUNT(DISTINCT cl.Language) AS UniqueOfficialLanguages\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE c.IndepYear < '1930' AND cl.IsOfficial = 'T';", "source_tables": ["country", "countrylanguage"], "error_info": ""}, {"sample_id": 771, "db_id": "world_1", "question": "For the countries founded before 1930, what is the total number of distinct official languages?", "score": 1, "gold_sql": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  'T'", "pred_sql": "SELECT COUNT(DISTINCT cl.Language) AS TotalOfficialLanguages\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE c.IndepYear < '1930' AND cl.IsOfficial = 'T';", "source_tables": ["country", "countrylanguage"], "error_info": ""}, {"sample_id": 772, "db_id": "world_1", "question": "What are the countries that have greater surface area than any country in Europe?", "score": 0, "gold_sql": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  'Europe')", "pred_sql": "SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Region = 'Europe')", "source_tables": ["country"], "error_info": "Result not equal"}, {"sample_id": 773, "db_id": "world_1", "question": "Which countries have greater area than that of any country in Europe?", "score": 0, "gold_sql": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  'Europe')", "pred_sql": "SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Region = 'Europe');", "source_tables": ["country"], "error_info": "Result not equal"}, {"sample_id": 774, "db_id": "world_1", "question": "What are the African countries that have a  population less than any country in Asia?", "score": 0, "gold_sql": "SELECT Name FROM country WHERE Continent  =  'Africa'  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  'Asia')", "pred_sql": "SELECT c.Name FROM country c WHERE c.Continent = 'Africa' AND c.Population < (SELECT MIN(c2.Population) FROM country c2 WHERE c2.Continent = 'Asia');", "source_tables": ["country"], "error_info": "Result not equal"}, {"sample_id": 775, "db_id": "world_1", "question": "Which African countries have a smaller population than that of any country in Asia?", "score": 1, "gold_sql": "SELECT Name FROM country WHERE Continent  =  'Africa'  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  'Asia')", "pred_sql": "SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia');", "source_tables": ["country"], "error_info": ""}, {"sample_id": 776, "db_id": "world_1", "question": "Which Asian countries have a population that is larger than any country in Africa?", "score": 1, "gold_sql": "SELECT Name FROM country WHERE Continent  =  'Asia'  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  'Africa')", "pred_sql": "SELECT c.Name FROM country c WHERE c.Continent = 'Asia' AND c.Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa');", "source_tables": ["country"], "error_info": ""}, {"sample_id": 777, "db_id": "world_1", "question": "What are the Asian countries which have a population larger than that of any country in Africa?", "score": 0, "gold_sql": "SELECT Name FROM country WHERE Continent  =  'Asia'  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  'Africa')", "pred_sql": "SELECT c.Name FROM country c WHERE c.Continent = 'Asia' AND c.Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa');", "source_tables": ["country"], "error_info": "Result not equal"}, {"sample_id": 778, "db_id": "world_1", "question": "What are the country codes for countries that do not speak English?", "score": 0, "gold_sql": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  'English'", "pred_sql": "SELECT DISTINCT country.Code FROM country LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language != 'English' OR countrylanguage.Language IS NULL;", "source_tables": ["countrylanguage"], "error_info": "Result not equal"}, {"sample_id": 779, "db_id": "world_1", "question": "Return the country codes for countries that do not speak English.", "score": 0, "gold_sql": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  'English'", "pred_sql": "SELECT DISTINCT country.Code FROM country LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language != 'English' OR countrylanguage.Language IS NULL;", "source_tables": ["countrylanguage"], "error_info": "Result not equal"}, {"sample_id": 780, "db_id": "world_1", "question": "What are the country codes of countries where people use languages other than English?", "score": 1, "gold_sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != 'English'", "pred_sql": "SELECT DISTINCT cl.CountryCode FROM countrylanguage cl WHERE cl.Language != 'English';", "source_tables": ["countrylanguage"], "error_info": ""}, {"sample_id": 781, "db_id": "world_1", "question": "Give the country codes for countries in which people speak langauges that are not English.", "score": 1, "gold_sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != 'English'", "pred_sql": "SELECT DISTINCT cl.CountryCode FROM countrylanguage cl WHERE cl.Language != 'English';", "source_tables": ["countrylanguage"], "error_info": ""}, {"sample_id": 782, "db_id": "world_1", "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?", "score": 0, "gold_sql": "SELECT Code FROM country WHERE GovernmentForm != 'Republic' EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  'English'", "pred_sql": "SELECT DISTINCT country.Code FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language != 'English' AND country.GovernmentForm != 'Republic';", "source_tables": ["country", "countrylanguage"], "error_info": "Result not equal"}, {"sample_id": 783, "db_id": "world_1", "question": "Return the codes of countries that do not speak English and do not have Republics for governments.", "score": 0, "gold_sql": "SELECT Code FROM country WHERE GovernmentForm != 'Republic' EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  'English'", "pred_sql": "SELECT country.Code FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language != 'English' AND country.GovernmentForm NOT LIKE '%Republic%';", "source_tables": ["country", "countrylanguage"], "error_info": "Result not equal"}, {"sample_id": 784, "db_id": "world_1", "question": "Which cities are in European countries where English is not the official language?", "score": 0, "gold_sql": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')", "pred_sql": "SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'FALSE';", "source_tables": ["country", "city", "countrylanguage"], "error_info": "Result not equal"}, {"sample_id": 785, "db_id": "world_1", "question": "What are the names of cities in Europe for which English is not the official language?", "score": 0, "gold_sql": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')", "pred_sql": "SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'F';", "source_tables": ["country", "city", "countrylanguage"], "error_info": "Result not equal"}, {"sample_id": 786, "db_id": "world_1", "question": "Which unique cities are in Asian countries where Chinese is the official language ?", "score": 0, "gold_sql": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  'asia'", "pred_sql": "SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T';", "source_tables": ["country", "city", "countrylanguage"], "error_info": "Result not equal"}, {"sample_id": 787, "db_id": "world_1", "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.", "score": 1, "gold_sql": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  'Asia'", "pred_sql": "SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T';", "source_tables": ["country", "city", "countrylanguage"], "error_info": ""}, {"sample_id": 788, "db_id": "world_1", "question": "What are the name, independence year, and surface area of the country with the smallest population?", "score": 0, "gold_sql": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "pred_sql": "SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country);", "source_tables": ["country"], "error_info": "Result not equal"}, {"sample_id": 789, "db_id": "world_1", "question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "score": 0, "gold_sql": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "pred_sql": "SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country);", "source_tables": ["country"], "error_info": "Result not equal"}, {"sample_id": 790, "db_id": "world_1", "question": "What are the population, name and leader of the country with the largest area?", "score": 1, "gold_sql": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "pred_sql": "SELECT country.Population, country.Name, country.HeadOfState FROM country ORDER BY country.SurfaceArea DESC LIMIT 1;", "source_tables": ["country"], "error_info": ""}, {"sample_id": 791, "db_id": "world_1", "question": "Give the name, population, and head of state for the country that has the largest area.", "score": 1, "gold_sql": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "pred_sql": "SELECT country.Name, country.Population, country.HeadOfState FROM country ORDER BY country.SurfaceArea DESC LIMIT 1;", "source_tables": ["country"], "error_info": ""}, {"sample_id": 792, "db_id": "world_1", "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.", "score": 1, "gold_sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "pred_sql": "SELECT c.Name, COUNT(cl.Language) AS NumberOfLanguages\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nGROUP BY c.Name\nHAVING COUNT(cl.Language) >= 3;", "source_tables": ["country", "countrylanguage"], "error_info": ""}, {"sample_id": 793, "db_id": "world_1", "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?", "score": 0, "gold_sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "pred_sql": "SELECT cl.CountryCode, c.Name, COUNT(cl.Language) AS LanguageCount\nFROM countrylanguage cl\nJOIN country c ON cl.CountryCode = c.Code\nGROUP BY cl.CountryCode\nHAVING COUNT(cl.Language) > 2;", "source_tables": ["country", "countrylanguage"], "error_info": "Result not equal"}, {"sample_id": 794, "db_id": "world_1", "question": "Find the number of cities in each district whose population is greater than the average population of cities?", "score": 1, "gold_sql": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District", "pred_sql": "SELECT District, COUNT(*) AS NumberOfCities\nFROM city\nWHERE Population > (SELECT AVG(Population) FROM city)\nGROUP BY District;", "source_tables": ["city"], "error_info": ""}, {"sample_id": 795, "db_id": "world_1", "question": "How many cities in each district have a population that is above the average population across all cities?", "score": 1, "gold_sql": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District", "pred_sql": "SELECT District, COUNT(*) AS CityCount FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District;", "source_tables": ["city"], "error_info": ""}, {"sample_id": 796, "db_id": "world_1", "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.", "score": 0, "gold_sql": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "pred_sql": "SELECT c.GovernmentForm, SUM(c.Population) AS TotalPopulation\nFROM country c\nWHERE c.LifeExpectancy > 72\nGROUP BY c.GovernmentForm;", "source_tables": ["country"], "error_info": "Result not equal"}, {"sample_id": 797, "db_id": "world_1", "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?", "score": 0, "gold_sql": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "pred_sql": "SELECT GovernmentForm, SUM(Population) AS TotalPopulation \nFROM country \nWHERE LifeExpectancy > 72 \nGROUP BY GovernmentForm;", "source_tables": ["country"], "error_info": "Result not equal"}, {"sample_id": 798, "db_id": "world_1", "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?", "score": 1, "gold_sql": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "pred_sql": "SELECT continent, AVG(LifeExpectancy) AS AverageLifeExpectancy, SUM(Population) AS TotalPopulation \nFROM country \nGROUP BY continent \nHAVING AVG(LifeExpectancy) < 72;", "source_tables": ["country"], "error_info": ""}, {"sample_id": 799, "db_id": "world_1", "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?", "score": 0, "gold_sql": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "pred_sql": "SELECT continent, SUM(country.Population) AS total_population, AVG(country.LifeExpectancy) AS average_life_expectancy\nFROM country\nWHERE country.LifeExpectancy < 72\nGROUP BY continent;", "source_tables": ["country"], "error_info": "Result not equal"}, {"sample_id": 800, "db_id": "world_1", "question": "What are the names and areas of countries with the top 5 largest area?", "score": 1, "gold_sql": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "pred_sql": "SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;", "source_tables": ["country"], "error_info": ""}, {"sample_id": 801, "db_id": "world_1", "question": "Return the names and surface areas of the 5 largest countries.", "score": 0, "gold_sql": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "pred_sql": "SELECT Name, SurfaceArea FROM country ORDER BY Population DESC LIMIT 5;", "source_tables": ["country"], "error_info": "Result not equal"}, {"sample_id": 802, "db_id": "world_1", "question": "What are names of countries with the top 3 largest population?", "score": 1, "gold_sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "pred_sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3;", "source_tables": ["country"], "error_info": ""}, {"sample_id": 803, "db_id": "world_1", "question": "Return the names of the 3 most populated countries.", "score": 1, "gold_sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "pred_sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3;", "source_tables": ["country"], "error_info": ""}, {"sample_id": 804, "db_id": "world_1", "question": "What are the names of the nations with the 3 lowest populations?", "score": 1, "gold_sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "pred_sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3;", "source_tables": ["country"], "error_info": ""}, {"sample_id": 805, "db_id": "world_1", "question": "Return the names of the 3 countries with the fewest people.", "score": 1, "gold_sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "pred_sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3;", "source_tables": ["country"], "error_info": ""}, {"sample_id": 806, "db_id": "world_1", "question": "how many countries are in Asia?", "score": 1, "gold_sql": "SELECT count(*) FROM country WHERE continent  =  'Asia'", "pred_sql": "SELECT COUNT(*) FROM country WHERE Continent = 'Asia';", "source_tables": ["country"], "error_info": ""}, {"sample_id": 807, "db_id": "world_1", "question": "Count the number of countries in Asia.", "score": 1, "gold_sql": "SELECT count(*) FROM country WHERE continent  =  'Asia'", "pred_sql": "SELECT COUNT(*) FROM country WHERE Continent = 'Asia';", "source_tables": ["country"], "error_info": ""}, {"sample_id": 808, "db_id": "world_1", "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "score": 1, "gold_sql": "SELECT Name FROM country WHERE continent  =  'Europe' AND Population  =  '80000'", "pred_sql": "SELECT Name FROM country WHERE Continent = 'Europe' AND Population = '80000';", "source_tables": ["country"], "error_info": ""}, {"sample_id": 809, "db_id": "world_1", "question": "Give the names of countries that are in Europe and have a population equal to 80000.", "score": 1, "gold_sql": "SELECT Name FROM country WHERE continent  =  'Europe' AND Population  =  '80000'", "pred_sql": "SELECT Name FROM country WHERE Continent = 'Europe' AND Population = '80000';", "source_tables": ["country"], "error_info": ""}, {"sample_id": 810, "db_id": "world_1", "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?", "score": 0, "gold_sql": "select sum(population) ,  avg(surfacearea) from country where continent  =  'north america' and surfacearea  >  3000", "pred_sql": "SELECT SUM(Population) AS TotalPopulation, AVG(SurfaceArea) AS AverageArea FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000;", "source_tables": ["country"], "error_info": "Result not equal"}, {"sample_id": 811, "db_id": "world_1", "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .", "score": 0, "gold_sql": "select sum(population) ,  avg(surfacearea) from country where continent  =  'north america' and surfacearea  >  3000", "pred_sql": "SELECT SUM(c.Population) AS TotalPopulation, AVG(c.SurfaceArea) AS AverageSurfaceArea\nFROM country c\nWHERE c.Continent = 'North America' AND c.SurfaceArea > 3000;", "source_tables": ["country"], "error_info": "Result not equal"}, {"sample_id": 812, "db_id": "world_1", "question": "What are the cities whose population is between 160000 and 900000?", "score": 0, "gold_sql": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000", "pred_sql": "SELECT * FROM city WHERE Population BETWEEN '160000' AND '900000';", "source_tables": ["city"], "error_info": "Result not equal"}, {"sample_id": 813, "db_id": "world_1", "question": "Return the names of cities that have a population between 160000 and 900000 .", "score": 1, "gold_sql": "select name from city where population between 160000 and 900000", "pred_sql": "SELECT Name FROM city WHERE Population BETWEEN '160000' AND '900000';", "source_tables": ["city"], "error_info": ""}, {"sample_id": 814, "db_id": "world_1", "question": "Which language is spoken by the largest number of countries?", "score": 1, "gold_sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1;", "source_tables": ["countrylanguage"], "error_info": ""}, {"sample_id": 815, "db_id": "world_1", "question": "Give the language that is spoken in the most countries.", "score": 1, "gold_sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1;", "source_tables": ["countrylanguage"], "error_info": ""}, {"sample_id": 816, "db_id": "world_1", "question": "What is the language spoken by the largest percentage of people in each country?", "score": 1, "gold_sql": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode", "pred_sql": "SELECT cl.Language, cl.CountryCode, MAX(cl.Percentage) AS MaxPercentage\nFROM countrylanguage cl\nGROUP BY cl.CountryCode;", "source_tables": ["countrylanguage"], "error_info": ""}, {"sample_id": 817, "db_id": "world_1", "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?", "score": 0, "gold_sql": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode", "pred_sql": "SELECT c.Code AS CountryCode, cl.Language, cl.Percentage FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode = c.Code)", "source_tables": ["countrylanguage"], "error_info": "Result not equal"}, {"sample_id": 818, "db_id": "world_1", "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?", "score": 0, "gold_sql": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  'Spanish' GROUP BY CountryCode", "pred_sql": "SELECT COUNT(DISTINCT c.Code) AS TotalCountries\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE cl.Language = 'Spanish' AND cl.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish');", "source_tables": ["countrylanguage"], "error_info": "Result not equal"}, {"sample_id": 819, "db_id": "world_1", "question": "Count the number of countries for which Spanish is the predominantly spoken language.", "score": 0, "gold_sql": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  'Spanish' GROUP BY CountryCode", "pred_sql": "SELECT COUNT(DISTINCT cl.CountryCode) AS CountryCount\nFROM countrylanguage cl\nWHERE cl.Language = 'Spanish' AND cl.Percentage > 50;", "source_tables": ["countrylanguage"], "error_info": "Result not equal"}, {"sample_id": 820, "db_id": "world_1", "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?", "score": 0, "gold_sql": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  'Spanish' GROUP BY CountryCode", "pred_sql": "SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'Spanish' AND cl.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish');", "source_tables": ["countrylanguage"], "error_info": "Result not equal"}, {"sample_id": 821, "db_id": "world_1", "question": "Return the codes of countries for which Spanish is the predominantly spoken language.", "score": 0, "gold_sql": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  'Spanish' GROUP BY CountryCode", "pred_sql": "SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND Percentage > 50;", "source_tables": ["countrylanguage"], "error_info": "Result not equal"}, {"sample_id": 822, "db_id": "orchestra", "question": "How many conductors are there?", "score": 1, "gold_sql": "SELECT count(*) FROM conductor", "pred_sql": "SELECT COUNT(*) AS Number_of_Conductors FROM conductor;", "source_tables": ["conductor"], "error_info": ""}, {"sample_id": 823, "db_id": "orchestra", "question": "Count the number of conductors.", "score": 1, "gold_sql": "SELECT count(*) FROM conductor", "pred_sql": "SELECT COUNT(*) AS Number_of_Conductors FROM conductor;", "source_tables": ["conductor"], "error_info": ""}, {"sample_id": 824, "db_id": "orchestra", "question": "List the names of conductors in ascending order of age.", "score": 1, "gold_sql": "SELECT Name FROM conductor ORDER BY Age ASC", "pred_sql": "SELECT Name FROM conductor ORDER BY Age ASC;", "source_tables": ["conductor"], "error_info": ""}, {"sample_id": 825, "db_id": "orchestra", "question": "What are the names of conductors, ordered by age?", "score": 1, "gold_sql": "SELECT Name FROM conductor ORDER BY Age ASC", "pred_sql": "SELECT Name FROM conductor ORDER BY Age;", "source_tables": ["conductor"], "error_info": ""}, {"sample_id": 826, "db_id": "orchestra", "question": "What are the names of conductors whose nationalities are not \"USA\"?", "score": 1, "gold_sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "pred_sql": "SELECT Name FROM conductor WHERE Nationality != 'USA';", "source_tables": ["conductor"], "error_info": ""}, {"sample_id": 827, "db_id": "orchestra", "question": "Return the names of conductors that do not have the nationality \"USA\".", "score": 1, "gold_sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "pred_sql": "SELECT Name FROM conductor WHERE Nationality != 'USA';", "source_tables": ["conductor"], "error_info": ""}, {"sample_id": 828, "db_id": "orchestra", "question": "What are the record companies of orchestras in descending order of years in which they were founded?", "score": 0, "gold_sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "pred_sql": "SELECT DISTINCT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;", "source_tables": ["orchestra"], "error_info": "Result not equal"}, {"sample_id": 829, "db_id": "orchestra", "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.", "score": 1, "gold_sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "pred_sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;", "source_tables": ["orchestra"], "error_info": ""}, {"sample_id": 830, "db_id": "orchestra", "question": "What is the average attendance of shows?", "score": 1, "gold_sql": "SELECT avg(Attendance) FROM SHOW", "pred_sql": "SELECT AVG(Attendance) AS Average_Attendance FROM show;", "source_tables": ["show"], "error_info": ""}, {"sample_id": 831, "db_id": "orchestra", "question": "Return the average attendance across all shows.", "score": 1, "gold_sql": "SELECT avg(Attendance) FROM SHOW", "pred_sql": "SELECT AVG(Attendance) AS Average_Attendance FROM show;", "source_tables": ["show"], "error_info": ""}, {"sample_id": 832, "db_id": "orchestra", "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "score": 1, "gold_sql": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != 'Live final'", "pred_sql": "SELECT MAX(Share) AS Max_Share, MIN(Share) AS Min_Share FROM performance WHERE Type != 'Live final';", "source_tables": ["performance"], "error_info": ""}, {"sample_id": 833, "db_id": "orchestra", "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "score": 1, "gold_sql": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != 'Live final'", "pred_sql": "SELECT MAX(Share) AS Max_Share, MIN(Share) AS Min_Share FROM performance WHERE Type != 'Live final';", "source_tables": ["performance"], "error_info": ""}, {"sample_id": 834, "db_id": "orchestra", "question": "How many different nationalities do conductors have?", "score": 1, "gold_sql": "SELECT count(DISTINCT Nationality) FROM conductor", "pred_sql": "SELECT COUNT(DISTINCT Nationality) AS Different_Nationalities FROM conductor;", "source_tables": ["conductor"], "error_info": ""}, {"sample_id": 835, "db_id": "orchestra", "question": "Count the number of different nationalities of conductors.", "score": 1, "gold_sql": "SELECT count(DISTINCT Nationality) FROM conductor", "pred_sql": "SELECT COUNT(DISTINCT Nationality) AS NumberOfNationalities FROM conductor;", "source_tables": ["conductor"], "error_info": ""}, {"sample_id": 836, "db_id": "orchestra", "question": "List names of conductors in descending order of years of work.", "score": 1, "gold_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "pred_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC;", "source_tables": ["conductor"], "error_info": ""}, {"sample_id": 837, "db_id": "orchestra", "question": "What are the names of conductors, sorted descending by the number of years they have worked?", "score": 0, "gold_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "pred_sql": "SELECT Name, (2023 - CAST(Year_of_Work AS INTEGER)) AS Years_Worked FROM conductor ORDER BY Years_Worked DESC;", "source_tables": ["conductor"], "error_info": "Result not equal"}, {"sample_id": 838, "db_id": "orchestra", "question": "List the name of the conductor with the most years of work.", "score": 0, "gold_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "pred_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work ASC LIMIT 1;", "source_tables": ["conductor"], "error_info": "Result not equal"}, {"sample_id": 839, "db_id": "orchestra", "question": "What is the name of the conductor who has worked the greatest number of years?", "score": 0, "gold_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "pred_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work ASC LIMIT 1;", "source_tables": ["conductor"], "error_info": "Result not equal"}, {"sample_id": 840, "db_id": "orchestra", "question": "Show the names of conductors and the orchestras they have conducted.", "score": 1, "gold_sql": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "pred_sql": "SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;", "source_tables": ["conductor", "orchestra"], "error_info": ""}, {"sample_id": 841, "db_id": "orchestra", "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "score": 1, "gold_sql": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "pred_sql": "SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;", "source_tables": ["conductor", "orchestra"], "error_info": ""}, {"sample_id": 842, "db_id": "orchestra", "question": "Show the names of conductors that have conducted more than one orchestras.", "score": 1, "gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1", "pred_sql": "SELECT c.Name\nFROM conductor c\nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID\nGROUP BY c.Conductor_ID\nHAVING COUNT(o.Orchestra_ID) > 1;", "source_tables": ["conductor", "orchestra"], "error_info": ""}, {"sample_id": 843, "db_id": "orchestra", "question": "What are the names of conductors who have conducted at more than one orchestra?", "score": 1, "gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1", "pred_sql": "SELECT c.Name\nFROM conductor c\nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID\nGROUP BY c.Conductor_ID\nHAVING COUNT(DISTINCT o.Orchestra_ID) > 1;", "source_tables": ["conductor", "orchestra"], "error_info": ""}, {"sample_id": 844, "db_id": "orchestra", "question": "Show the name of the conductor that has conducted the most number of orchestras.", "score": 1, "gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT c.Name\nFROM conductor c\nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID\nGROUP BY c.Conductor_ID\nORDER BY COUNT(o.Orchestra_ID) DESC\nLIMIT 1;", "source_tables": ["conductor", "orchestra"], "error_info": ""}, {"sample_id": 845, "db_id": "orchestra", "question": "What is the name of the conductor who has conducted the most orchestras?", "score": 1, "gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT c.Name\nFROM conductor c\nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID\nGROUP BY c.Conductor_ID\nORDER BY COUNT(o.Orchestra_ID) DESC\nLIMIT 1;", "source_tables": ["conductor", "orchestra"], "error_info": ""}, {"sample_id": 846, "db_id": "orchestra", "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "score": 1, "gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "pred_sql": "SELECT DISTINCT c.Name \nFROM conductor c \nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID \nWHERE o.Year_of_Founded > 2008;", "source_tables": ["conductor", "orchestra"], "error_info": ""}, {"sample_id": 847, "db_id": "orchestra", "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "score": 1, "gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "pred_sql": "SELECT DISTINCT c.Name \nFROM conductor c \nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID \nWHERE o.Year_of_Founded > 2008;", "source_tables": ["conductor", "orchestra"], "error_info": ""}, {"sample_id": 848, "db_id": "orchestra", "question": "Please show the different record companies and the corresponding number of orchestras.", "score": 1, "gold_sql": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company", "pred_sql": "SELECT Record_Company, COUNT(Orchestra_ID) AS Number_of_Orchestras FROM orchestra GROUP BY Record_Company;", "source_tables": ["orchestra"], "error_info": ""}, {"sample_id": 849, "db_id": "orchestra", "question": "How many orchestras does each record company manage?", "score": 1, "gold_sql": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company", "pred_sql": "SELECT Record_Company, COUNT(Orchestra_ID) AS Orchestra_Count FROM orchestra GROUP BY Record_Company;", "source_tables": ["orchestra"], "error_info": ""}, {"sample_id": 850, "db_id": "orchestra", "question": "Please show the record formats of orchestras in ascending order of count.", "score": 0, "gold_sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC", "pred_sql": "SELECT Major_Record_Format, COUNT(*) as Count FROM orchestra GROUP BY Major_Record_Format ORDER BY Count ASC;", "source_tables": ["orchestra"], "error_info": "Result not equal"}, {"sample_id": 851, "db_id": "orchestra", "question": "What are the major record formats of orchestras, sorted by their frequency?", "score": 0, "gold_sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC", "pred_sql": "SELECT Major_Record_Format, COUNT(*) as Frequency FROM orchestra GROUP BY Major_Record_Format ORDER BY Frequency DESC;", "source_tables": ["orchestra"], "error_info": "Result not equal"}, {"sample_id": 852, "db_id": "orchestra", "question": "List the record company shared by the most number of orchestras.", "score": 0, "gold_sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Record_Company, COUNT(Orchestra_ID) AS Orchestra_Count\nFROM orchestra\nGROUP BY Record_Company\nORDER BY Orchestra_Count DESC\nLIMIT 1;", "source_tables": ["orchestra"], "error_info": "Result not equal"}, {"sample_id": 853, "db_id": "orchestra", "question": "What is the record company used by the greatest number of orchestras?", "score": 0, "gold_sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Record_Company, COUNT(Orchestra_ID) AS Orchestra_Count\nFROM orchestra\nGROUP BY Record_Company\nORDER BY Orchestra_Count DESC\nLIMIT 1;", "source_tables": ["orchestra"], "error_info": "Result not equal"}, {"sample_id": 854, "db_id": "orchestra", "question": "List the names of orchestras that have no performance.", "score": 1, "gold_sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "pred_sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance);", "source_tables": ["performance", "orchestra"], "error_info": ""}, {"sample_id": 855, "db_id": "orchestra", "question": "What are the orchestras that do not have any performances?", "score": 1, "gold_sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "pred_sql": "SELECT orchestra.Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL;", "source_tables": ["performance", "orchestra"], "error_info": ""}, {"sample_id": 856, "db_id": "orchestra", "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.", "score": 0, "gold_sql": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003", "pred_sql": "SELECT DISTINCT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 UNION SELECT DISTINCT Record_Company FROM orchestra WHERE Year_of_Founded > 2003;", "source_tables": ["orchestra"], "error_info": "Result not equal"}, {"sample_id": 857, "db_id": "orchestra", "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?", "score": 1, "gold_sql": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003", "pred_sql": "SELECT DISTINCT o1.Record_Company \nFROM orchestra o1 \nJOIN orchestra o2 ON o1.Record_Company = o2.Record_Company \nWHERE o1.Year_of_Founded < 2003 AND o2.Year_of_Founded >= 2003;", "source_tables": ["orchestra"], "error_info": ""}, {"sample_id": 858, "db_id": "orchestra", "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".", "score": 1, "gold_sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  'CD' OR Major_Record_Format  =  'DVD'", "pred_sql": "SELECT COUNT(*) AS NumberOfOrchestras FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD');", "source_tables": ["orchestra"], "error_info": ""}, {"sample_id": 859, "db_id": "orchestra", "question": "Count the number of orchestras that have CD or DVD as their record format.", "score": 1, "gold_sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  'CD' OR Major_Record_Format  =  'DVD'", "pred_sql": "SELECT COUNT(*) AS Number_of_Orchestras FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD');", "source_tables": ["orchestra"], "error_info": ""}, {"sample_id": 860, "db_id": "orchestra", "question": "Show the years in which orchestras that have given more than one performance are founded.", "score": 1, "gold_sql": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1", "pred_sql": "SELECT DISTINCT o.Year_of_Founded\nFROM orchestra o\nJOIN performance p ON o.Orchestra_ID = p.Orchestra_ID\nGROUP BY o.Orchestra_ID\nHAVING COUNT(p.Performance_ID) > 1;", "source_tables": ["performance", "orchestra"], "error_info": ""}, {"sample_id": 861, "db_id": "orchestra", "question": "What are years of founding for orchestras that have had more than a single performance?", "score": 1, "gold_sql": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1", "pred_sql": "SELECT o.Year_of_Founded FROM orchestra o JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID GROUP BY o.Orchestra_ID HAVING COUNT(p.Performance_ID) > 1;", "source_tables": ["performance", "orchestra"], "error_info": ""}, {"sample_id": 862, "db_id": "network_1", "question": "How many high schoolers are there?", "score": 1, "gold_sql": "SELECT count(*) FROM Highschooler", "pred_sql": "SELECT COUNT(*) AS total_highschoolers FROM Highschooler;", "source_tables": ["highschooler"], "error_info": ""}, {"sample_id": 863, "db_id": "network_1", "question": "Count the number of high schoolers.", "score": 1, "gold_sql": "SELECT count(*) FROM Highschooler", "pred_sql": "SELECT COUNT(*) AS total_highschoolers FROM Highschooler;", "source_tables": ["highschooler"], "error_info": ""}, {"sample_id": 864, "db_id": "network_1", "question": "Show the names and grades of each high schooler.", "score": 1, "gold_sql": "SELECT name ,  grade FROM Highschooler", "pred_sql": "SELECT name, grade FROM Highschooler;", "source_tables": ["highschooler"], "error_info": ""}, {"sample_id": 865, "db_id": "network_1", "question": "What are the names and grades for each high schooler?", "score": 1, "gold_sql": "SELECT name ,  grade FROM Highschooler", "pred_sql": "SELECT name, grade FROM Highschooler;", "source_tables": ["highschooler"], "error_info": ""}, {"sample_id": 866, "db_id": "network_1", "question": "Show all the grades of the high schoolers.", "score": 1, "gold_sql": "SELECT grade FROM Highschooler", "pred_sql": "SELECT grade FROM Highschooler;", "source_tables": ["highschooler"], "error_info": ""}, {"sample_id": 867, "db_id": "network_1", "question": "What is the grade of each high schooler?", "score": 0, "gold_sql": "SELECT grade FROM Highschooler", "pred_sql": "SELECT name, grade FROM Highschooler;", "source_tables": ["highschooler"], "error_info": "Result not equal"}, {"sample_id": 868, "db_id": "network_1", "question": "What grade is Kyle in?", "score": 1, "gold_sql": "SELECT grade FROM Highschooler WHERE name  =  'Kyle'", "pred_sql": "SELECT grade FROM Highschooler WHERE name = 'Kyle';", "source_tables": ["highschooler"], "error_info": ""}, {"sample_id": 869, "db_id": "network_1", "question": "Return the grade for the high schooler named Kyle.", "score": 1, "gold_sql": "SELECT grade FROM Highschooler WHERE name  =  'Kyle'", "pred_sql": "SELECT grade FROM Highschooler WHERE name = 'Kyle';", "source_tables": ["highschooler"], "error_info": ""}, {"sample_id": 870, "db_id": "network_1", "question": "Show the names of all high schoolers in grade 10.", "score": 1, "gold_sql": "SELECT name FROM Highschooler WHERE grade  =  10", "pred_sql": "SELECT name FROM Highschooler WHERE grade = '10';", "source_tables": ["highschooler"], "error_info": ""}, {"sample_id": 871, "db_id": "network_1", "question": "What are the names of all high schoolers in grade 10?", "score": 1, "gold_sql": "SELECT name FROM Highschooler WHERE grade  =  10", "pred_sql": "SELECT name FROM Highschooler WHERE grade = '10';", "source_tables": ["highschooler"], "error_info": ""}, {"sample_id": 872, "db_id": "network_1", "question": "Show the ID of the high schooler named Kyle.", "score": 1, "gold_sql": "SELECT ID FROM Highschooler WHERE name  =  'Kyle'", "pred_sql": "SELECT ID FROM Highschooler WHERE name = 'Kyle';", "source_tables": ["highschooler"], "error_info": ""}, {"sample_id": 873, "db_id": "network_1", "question": "What is Kyle's id?", "score": 1, "gold_sql": "SELECT ID FROM Highschooler WHERE name  =  'Kyle'", "pred_sql": "SELECT ID FROM Highschooler WHERE name = 'Kyle';", "source_tables": ["highschooler"], "error_info": ""}, {"sample_id": 874, "db_id": "network_1", "question": "How many high schoolers are there in grade 9 or 10?", "score": 1, "gold_sql": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10", "pred_sql": "SELECT COUNT(*) AS total_students FROM Highschooler WHERE grade IN ('9', '10');", "source_tables": ["highschooler"], "error_info": ""}, {"sample_id": 875, "db_id": "network_1", "question": "Count the number of high schoolers in grades 9 or 10.", "score": 1, "gold_sql": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10", "pred_sql": "SELECT COUNT(*) AS number_of_students FROM Highschooler WHERE grade IN ('9', '10');", "source_tables": ["highschooler"], "error_info": ""}, {"sample_id": 876, "db_id": "network_1", "question": "Show the number of high schoolers for each grade.", "score": 1, "gold_sql": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade", "pred_sql": "SELECT grade, COUNT(*) AS number_of_students FROM Highschooler GROUP BY grade;", "source_tables": ["highschooler"], "error_info": ""}, {"sample_id": 877, "db_id": "network_1", "question": "How many high schoolers are in each grade?", "score": 1, "gold_sql": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade", "pred_sql": "SELECT grade, COUNT(*) AS number_of_students FROM Highschooler GROUP BY grade;", "source_tables": ["highschooler"], "error_info": ""}, {"sample_id": 878, "db_id": "network_1", "question": "Which grade has the most high schoolers?", "score": 0, "gold_sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT grade, COUNT(*) as student_count FROM Highschooler GROUP BY grade ORDER BY student_count DESC LIMIT 1;", "source_tables": ["highschooler"], "error_info": "Result not equal"}, {"sample_id": 879, "db_id": "network_1", "question": "Return the grade that has the greatest number of high schoolers.", "score": 1, "gold_sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;", "source_tables": ["highschooler"], "error_info": ""}, {"sample_id": 880, "db_id": "network_1", "question": "Show me all grades that have at least 4 students.", "score": 1, "gold_sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4", "pred_sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= 4;", "source_tables": ["highschooler"], "error_info": ""}, {"sample_id": 881, "db_id": "network_1", "question": "Which grades have 4 or more high schoolers?", "score": 1, "gold_sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4", "pred_sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= 4;", "source_tables": ["highschooler"], "error_info": ""}, {"sample_id": 882, "db_id": "network_1", "question": "Show the student IDs and numbers of friends corresponding to each.", "score": 1, "gold_sql": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id", "pred_sql": "SELECT student_id, COUNT(friend_id) AS number_of_friends FROM Friend GROUP BY student_id;", "source_tables": ["friend"], "error_info": ""}, {"sample_id": 883, "db_id": "network_1", "question": "How many friends does each student have?", "score": 0, "gold_sql": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id", "pred_sql": "SELECT H.name, COUNT(F.friend_id) AS friend_count\nFROM Highschooler H\nLEFT JOIN Friend F ON H.ID = F.student_id\nGROUP BY H.ID, H.name;", "source_tables": ["friend"], "error_info": "Result not equal"}, {"sample_id": 884, "db_id": "network_1", "question": "Show the names of high school students and their corresponding number of friends.", "score": 0, "gold_sql": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "pred_sql": "SELECT h.name, COUNT(f.friend_id) AS number_of_friends\nFROM Highschooler h\nLEFT JOIN Friend f ON h.ID = f.student_id\nGROUP BY h.ID, h.name;", "source_tables": ["friend", "highschooler"], "error_info": "Result not equal"}, {"sample_id": 885, "db_id": "network_1", "question": "What are the names of the high schoolers and how many friends does each have?", "score": 0, "gold_sql": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "pred_sql": "SELECT Highschooler.name, COUNT(Friend.friend_id) AS friend_count \nFROM Highschooler \nLEFT JOIN Friend ON Highschooler.ID = Friend.student_id \nGROUP BY Highschooler.ID;", "source_tables": ["friend", "highschooler"], "error_info": "Result not equal"}, {"sample_id": 886, "db_id": "network_1", "question": "What is the name of the high schooler who has the greatest number of friends?", "score": 1, "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID ORDER BY COUNT(f.friend_id) DESC LIMIT 1;", "source_tables": ["friend", "highschooler"], "error_info": ""}, {"sample_id": 887, "db_id": "network_1", "question": "Return the name of the high school student with the most friends.", "score": 1, "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID ORDER BY COUNT(f.friend_id) DESC LIMIT 1;", "source_tables": ["friend", "highschooler"], "error_info": ""}, {"sample_id": 888, "db_id": "network_1", "question": "Show the names of high schoolers who have at least 3 friends.", "score": 1, "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3", "pred_sql": "SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID HAVING COUNT(f.friend_id) >= 3;", "source_tables": ["friend", "highschooler"], "error_info": ""}, {"sample_id": 889, "db_id": "network_1", "question": "What are the names of high schoolers who have 3 or more friends?", "score": 1, "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3", "pred_sql": "SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID HAVING COUNT(f.friend_id) >= 3;", "source_tables": ["friend", "highschooler"], "error_info": ""}, {"sample_id": 890, "db_id": "network_1", "question": "Show the names of all of the high schooler Kyle's friends.", "score": 1, "gold_sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  'Kyle'", "pred_sql": "SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.friend_id WHERE f.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');", "source_tables": ["friend", "highschooler"], "error_info": ""}, {"sample_id": 891, "db_id": "network_1", "question": "Return the names of friends of the high school student Kyle.", "score": 1, "gold_sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  'Kyle'", "pred_sql": "SELECT H.name FROM Friend F JOIN Highschooler H ON F.friend_id = H.ID WHERE F.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');", "source_tables": ["friend", "highschooler"], "error_info": ""}, {"sample_id": 892, "db_id": "network_1", "question": "How many friends does the high school student Kyle have?", "score": 1, "gold_sql": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  'Kyle'", "pred_sql": "SELECT COUNT(friend_id) AS friend_count FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');", "source_tables": ["friend", "highschooler"], "error_info": ""}, {"sample_id": 893, "db_id": "network_1", "question": "Count the number of friends Kyle has.", "score": 1, "gold_sql": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  'Kyle'", "pred_sql": "SELECT COUNT(*) AS friend_count FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');", "source_tables": ["friend", "highschooler"], "error_info": ""}, {"sample_id": 894, "db_id": "network_1", "question": "Show ids of all students who do not have any friends.", "score": 1, "gold_sql": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend", "pred_sql": "SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)", "source_tables": ["friend", "highschooler"], "error_info": ""}, {"sample_id": 895, "db_id": "network_1", "question": "What are the ids of high school students who do not have friends?", "score": 1, "gold_sql": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend", "pred_sql": "SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)", "source_tables": ["friend", "highschooler"], "error_info": ""}, {"sample_id": 896, "db_id": "network_1", "question": "Show names of all high school students who do not have any friends.", "score": 1, "gold_sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "pred_sql": "SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)", "source_tables": ["friend", "highschooler"], "error_info": ""}, {"sample_id": 897, "db_id": "network_1", "question": "What are the names of students who have no friends?", "score": 1, "gold_sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "pred_sql": "SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)", "source_tables": ["friend", "highschooler"], "error_info": ""}, {"sample_id": 898, "db_id": "network_1", "question": "Show the ids of high schoolers who have friends and are also liked by someone else.", "score": 1, "gold_sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "pred_sql": "SELECT DISTINCT H.ID \nFROM Highschooler H \nJOIN Friend F ON H.ID = F.student_id \nJOIN Likes L ON H.ID = L.liked_id;", "source_tables": ["friend", "likes"], "error_info": ""}, {"sample_id": 899, "db_id": "network_1", "question": "What are the ids of students who both have friends and are liked?", "score": 0, "gold_sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "pred_sql": "SELECT DISTINCT H.ID FROM Highschooler H JOIN Friend F ON H.ID = F.student_id JOIN Likes L ON H.ID = L.student_id;", "source_tables": ["friend", "likes"], "error_info": "Result not equal"}, {"sample_id": 900, "db_id": "network_1", "question": "Show name of all students who have some friends and also are liked by someone else.", "score": 1, "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "pred_sql": "SELECT DISTINCT H.name \nFROM Highschooler H \nJOIN Friend F ON H.ID = F.student_id \nJOIN Likes L ON H.ID = L.liked_id;", "source_tables": ["friend", "highschooler", "likes"], "error_info": ""}, {"sample_id": 901, "db_id": "network_1", "question": "What are the names of high schoolers who both have friends and are liked?", "score": 0, "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "pred_sql": "SELECT DISTINCT h.name \nFROM Highschooler h \nJOIN Friend f ON h.ID = f.student_id \nJOIN Likes l ON h.ID = l.student_id;", "source_tables": ["friend", "highschooler", "likes"], "error_info": "Result not equal"}, {"sample_id": 902, "db_id": "network_1", "question": "Count the number of likes for each student id.", "score": 1, "gold_sql": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id", "pred_sql": "SELECT student_id, COUNT(liked_id) AS like_count FROM Likes GROUP BY student_id;", "source_tables": ["likes"], "error_info": ""}, {"sample_id": 903, "db_id": "network_1", "question": "How many likes correspond to each student id?", "score": 1, "gold_sql": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id", "pred_sql": "SELECT student_id, COUNT(liked_id) AS like_count FROM Likes GROUP BY student_id;", "source_tables": ["likes"], "error_info": ""}, {"sample_id": 904, "db_id": "network_1", "question": "Show the names of high schoolers who have likes, and numbers of likes for each.", "score": 0, "gold_sql": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "pred_sql": "SELECT h.name, COUNT(l.liked_id) AS number_of_likes \nFROM Highschooler h \nJOIN Likes l ON h.ID = l.student_id \nGROUP BY h.name;", "source_tables": ["highschooler", "likes"], "error_info": "Result not equal"}, {"sample_id": 905, "db_id": "network_1", "question": "What are the names of high schoolers who have likes, and how many likes does each have?", "score": 1, "gold_sql": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "pred_sql": "SELECT h.name, COUNT(l.liked_id) AS like_count \nFROM Highschooler h \nJOIN Likes l ON h.ID = l.student_id \nGROUP BY h.ID;", "source_tables": ["highschooler", "likes"], "error_info": ""}, {"sample_id": 906, "db_id": "network_1", "question": "What is the name of the high schooler who has the greatest number of likes?", "score": 1, "gold_sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT name FROM Highschooler WHERE ID = (SELECT student_id FROM Likes GROUP BY student_id ORDER BY COUNT(liked_id) DESC LIMIT 1)", "source_tables": ["highschooler", "likes"], "error_info": ""}, {"sample_id": 907, "db_id": "network_1", "question": "Give the name of the student with the most likes.", "score": 1, "gold_sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT name FROM Highschooler WHERE ID = (SELECT student_id FROM Likes GROUP BY student_id ORDER BY COUNT(liked_id) DESC LIMIT 1)", "source_tables": ["highschooler", "likes"], "error_info": ""}, {"sample_id": 908, "db_id": "network_1", "question": "Show the names of students who have at least 2 likes.", "score": 1, "gold_sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2", "pred_sql": "SELECT h.name FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.ID HAVING COUNT(l.liked_id) >= 2;", "source_tables": ["highschooler", "likes"], "error_info": ""}, {"sample_id": 909, "db_id": "network_1", "question": "What are the names of students who have 2 or more likes?", "score": 1, "gold_sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2", "pred_sql": "SELECT h.name FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.ID HAVING COUNT(l.liked_id) >= 2;", "source_tables": ["highschooler", "likes"], "error_info": ""}, {"sample_id": 910, "db_id": "network_1", "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.", "score": 1, "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2", "pred_sql": "SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id WHERE H.grade > '5' GROUP BY H.ID HAVING COUNT(F.friend_id) >= 2;", "source_tables": ["friend", "highschooler"], "error_info": ""}, {"sample_id": 911, "db_id": "network_1", "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?", "score": 1, "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2", "pred_sql": "SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id WHERE H.grade > '5' GROUP BY H.ID HAVING COUNT(F.friend_id) >= 2;", "source_tables": ["friend", "highschooler"], "error_info": ""}, {"sample_id": 912, "db_id": "network_1", "question": "How many likes does Kyle have?", "score": 1, "gold_sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  'Kyle'", "pred_sql": "SELECT COUNT(*) AS like_count FROM Likes WHERE liked_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');", "source_tables": ["highschooler", "likes"], "error_info": ""}, {"sample_id": 913, "db_id": "network_1", "question": "Return the number of likes that the high schooler named Kyle has.", "score": 1, "gold_sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  'Kyle'", "pred_sql": "SELECT COUNT(*) AS like_count FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');", "source_tables": ["highschooler", "likes"], "error_info": ""}, {"sample_id": 914, "db_id": "network_1", "question": "Find the average grade of all students who have some friends.", "score": 1, "gold_sql": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "pred_sql": "SELECT AVG(grade) AS average_grade FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend)", "source_tables": ["friend", "highschooler"], "error_info": ""}, {"sample_id": 915, "db_id": "network_1", "question": "What is the average grade of students who have friends?", "score": 1, "gold_sql": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "pred_sql": "SELECT AVG(CASE grade WHEN '9' THEN 9 WHEN '10' THEN 10 WHEN '11' THEN 11 WHEN '12' THEN 12 END) AS average_grade FROM Highschooler WHERE ID IN (SELECT DISTINCT student_id FROM Friend)", "source_tables": ["friend", "highschooler"], "error_info": ""}, {"sample_id": 916, "db_id": "network_1", "question": "Find the minimum grade of students who have no friends.", "score": 1, "gold_sql": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "pred_sql": "SELECT MIN(grade) AS minimum_grade FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)", "source_tables": ["friend", "highschooler"], "error_info": ""}, {"sample_id": 917, "db_id": "network_1", "question": "What is the lowest grade of students who do not have any friends?", "score": 1, "gold_sql": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "pred_sql": "SELECT MIN(grade) AS lowest_grade FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)", "source_tables": ["friend", "highschooler"], "error_info": ""}, {"sample_id": 918, "db_id": "dog_kennels", "question": "Which states have both owners and professionals living there?", "score": 1, "gold_sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals", "pred_sql": "SELECT DISTINCT Owners.state\nFROM Owners\nJOIN Professionals ON Owners.state = Professionals.state;", "source_tables": ["professionals", "owners"], "error_info": ""}, {"sample_id": 919, "db_id": "dog_kennels", "question": "Find the states where both owners and professionals live.", "score": 1, "gold_sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals", "pred_sql": "SELECT DISTINCT Owners.state FROM Owners INTERSECT SELECT DISTINCT Professionals.state FROM Professionals;", "source_tables": ["professionals", "owners"], "error_info": ""}, {"sample_id": 920, "db_id": "dog_kennels", "question": "What is the average age of the dogs who have gone through any treatments?", "score": 0, "gold_sql": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )", "pred_sql": "SELECT AVG(Dogs.age) AS average_age FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id;", "source_tables": ["dogs", "treatments"], "error_info": "Result not equal"}, {"sample_id": 921, "db_id": "dog_kennels", "question": "Find the average age of the dogs who went through treatments.", "score": 0, "gold_sql": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )", "pred_sql": "SELECT AVG(D.age) AS average_age FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id;", "source_tables": ["dogs", "treatments"], "error_info": "Result not equal"}, {"sample_id": 922, "db_id": "dog_kennels", "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.", "score": 1, "gold_sql": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2", "pred_sql": "SELECT DISTINCT p.professional_id, p.last_name, p.cell_number \nFROM Professionals p \nLEFT JOIN Treatments t ON p.professional_id = t.professional_id \nWHERE p.state = 'Indiana' \nOR p.professional_id IN (\n    SELECT professional_id \n    FROM Treatments \n    GROUP BY professional_id \n    HAVING COUNT(treatment_id) > 2\n);", "source_tables": ["professionals", "treatments"], "error_info": ""}, {"sample_id": 923, "db_id": "dog_kennels", "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.", "score": 1, "gold_sql": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2", "pred_sql": "SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(treatment_id) > 2);", "source_tables": ["professionals", "treatments"], "error_info": ""}, {"sample_id": 924, "db_id": "dog_kennels", "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .", "score": 0, "gold_sql": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )", "pred_sql": "SELECT Dogs.name FROM Dogs \nJOIN Treatments ON Dogs.dog_id = Treatments.dog_id \nGROUP BY Dogs.dog_id \nHAVING SUM(Treatments.cost_of_treatment) <= 1000;", "source_tables": ["dogs", "treatments"], "error_info": "Result not equal"}, {"sample_id": 925, "db_id": "dog_kennels", "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?", "score": 0, "gold_sql": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )", "pred_sql": "SELECT Dogs.name \nFROM Dogs \nJOIN Treatments ON Dogs.dog_id = Treatments.dog_id \nJOIN Owners ON Dogs.owner_id = Owners.owner_id \nGROUP BY Dogs.dog_id \nHAVING SUM(Treatments.cost_of_treatment) <= 1000;", "source_tables": ["dogs", "treatments"], "error_info": "Result not equal"}, {"sample_id": 926, "db_id": "dog_kennels", "question": "Which first names are used for professionals or owners but are not used as dog names?", "score": 1, "gold_sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs", "pred_sql": "SELECT DISTINCT first_name FROM (SELECT first_name FROM Owners UNION SELECT first_name FROM Professionals) AS combined_names WHERE first_name NOT IN (SELECT name FROM Dogs);", "source_tables": ["professionals", "owners", "dogs"], "error_info": ""}, {"sample_id": 927, "db_id": "dog_kennels", "question": "Find the first names that are used for professionals or owners but are not used as dog names.", "score": 1, "gold_sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs", "pred_sql": "SELECT DISTINCT first_name FROM (SELECT first_name FROM Owners UNION SELECT first_name FROM Professionals) AS Names WHERE first_name NOT IN (SELECT name FROM Dogs);", "source_tables": ["professionals", "owners", "dogs"], "error_info": ""}, {"sample_id": 928, "db_id": "dog_kennels", "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.", "score": 1, "gold_sql": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id", "pred_sql": "SELECT Professionals.professional_id, Professionals.role_code, Professionals.email_address \nFROM Professionals \nLEFT JOIN Treatments ON Professionals.professional_id = Treatments.professional_id \nWHERE Treatments.treatment_id IS NULL;", "source_tables": ["professionals", "treatments"], "error_info": ""}, {"sample_id": 929, "db_id": "dog_kennels", "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.", "score": 1, "gold_sql": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id", "pred_sql": "SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments)", "source_tables": ["professionals", "treatments"], "error_info": ""}, {"sample_id": 930, "db_id": "dog_kennels", "question": "Which owner owns the most dogs? List the owner id, first name and last name.", "score": 1, "gold_sql": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT Owners.owner_id, Owners.first_name, Owners.last_name \nFROM Owners \nJOIN Dogs ON Owners.owner_id = Dogs.owner_id \nGROUP BY Owners.owner_id, Owners.first_name, Owners.last_name \nORDER BY COUNT(Dogs.dog_id) DESC \nLIMIT 1;", "source_tables": ["owners", "dogs"], "error_info": ""}, {"sample_id": 931, "db_id": "dog_kennels", "question": "Return the owner id, first name and last name of the owner who has the most dogs.", "score": 1, "gold_sql": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT owner_id, first_name, last_name FROM Owners WHERE owner_id = (SELECT owner_id FROM Dogs GROUP BY owner_id ORDER BY COUNT(dog_id) DESC LIMIT 1)", "source_tables": ["owners", "dogs"], "error_info": ""}, {"sample_id": 932, "db_id": "dog_kennels", "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.", "score": 1, "gold_sql": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "pred_sql": "SELECT Professionals.professional_id, Professionals.role_code, Professionals.first_name\nFROM Treatments\nJOIN Professionals ON Treatments.professional_id = Professionals.professional_id\nGROUP BY Professionals.professional_id\nHAVING COUNT(Treatments.treatment_id) >= 2;", "source_tables": ["professionals", "treatments"], "error_info": ""}, {"sample_id": 933, "db_id": "dog_kennels", "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?", "score": 1, "gold_sql": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "pred_sql": "SELECT p.professional_id, p.role_code, p.first_name \nFROM Professionals p \nJOIN Treatments t ON p.professional_id = t.professional_id \nGROUP BY p.professional_id, p.role_code, p.first_name \nHAVING COUNT(t.treatment_id) >= 2;", "source_tables": ["professionals", "treatments"], "error_info": ""}, {"sample_id": 934, "db_id": "dog_kennels", "question": "What is the name of the breed with the most dogs?", "score": 1, "gold_sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT breed_name FROM Breeds WHERE breed_code = (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1)", "source_tables": ["breeds", "dogs"], "error_info": ""}, {"sample_id": 935, "db_id": "dog_kennels", "question": "Which breed do the most dogs have? Give me the breed name.", "score": 1, "gold_sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT breed_name FROM Breeds WHERE breed_code = (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1)", "source_tables": ["breeds", "dogs"], "error_info": ""}, {"sample_id": 936, "db_id": "dog_kennels", "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.", "score": 0, "gold_sql": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT Owners.owner_id, Owners.last_name\nFROM Owners\nJOIN Dogs ON Owners.owner_id = Dogs.owner_id\nJOIN Treatments ON Dogs.dog_id = Treatments.dog_id\nGROUP BY Owners.owner_id, Owners.last_name\nORDER BY SUM(Treatments.cost_of_treatment) DESC\nLIMIT 1;", "source_tables": ["owners", "dogs", "treatments"], "error_info": "Result not equal"}, {"sample_id": 937, "db_id": "dog_kennels", "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.", "score": 0, "gold_sql": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "pred_sql": "SELECT Owners.owner_id, Owners.last_name\nFROM Owners\nJOIN Dogs ON Owners.owner_id = Dogs.owner_id\nJOIN Treatments ON Dogs.dog_id = Treatments.dog_id\nGROUP BY Owners.owner_id, Owners.last_name\nORDER BY SUM(Treatments.cost_of_treatment) DESC\nLIMIT 1;", "source_tables": ["owners", "dogs", "treatments"], "error_info": "Result not equal"}, {"sample_id": 938, "db_id": "dog_kennels", "question": "What is the description of the treatment type that costs the least money in total?", "score": 1, "gold_sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1", "pred_sql": "SELECT Treatment_Types.treatment_type_description\nFROM Treatments\nJOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code\nGROUP BY Treatments.treatment_type_code\nORDER BY SUM(Treatments.cost_of_treatment) ASC\nLIMIT 1;", "source_tables": ["treatment_types", "treatments"], "error_info": ""}, {"sample_id": 939, "db_id": "dog_kennels", "question": "Give me the description of the treatment type whose total cost is the lowest.", "score": 1, "gold_sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1", "pred_sql": "SELECT Treatment_Types.treatment_type_description\nFROM Treatments\nJOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code\nGROUP BY Treatments.treatment_type_code\nORDER BY SUM(Treatments.cost_of_treatment) ASC\nLIMIT 1;", "source_tables": ["treatment_types", "treatments"], "error_info": ""}, {"sample_id": 940, "db_id": "dog_kennels", "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.", "score": 1, "gold_sql": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "pred_sql": "SELECT Owners.owner_id, Owners.zip_code\nFROM Owners\nJOIN Dogs ON Owners.owner_id = Dogs.owner_id\nJOIN Treatments ON Dogs.dog_id = Treatments.dog_id\nGROUP BY Owners.owner_id, Owners.zip_code\nORDER BY SUM(Treatments.cost_of_treatment) DESC\nLIMIT 1;", "source_tables": ["owners", "dogs", "treatments"], "error_info": ""}, {"sample_id": 941, "db_id": "dog_kennels", "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.", "score": 1, "gold_sql": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "pred_sql": "SELECT Owners.owner_id, Owners.zip_code\nFROM Owners\nJOIN Dogs ON Owners.owner_id = Dogs.owner_id\nJOIN Treatments ON Dogs.dog_id = Treatments.dog_id\nGROUP BY Owners.owner_id, Owners.zip_code\nORDER BY SUM(Treatments.cost_of_treatment) DESC\nLIMIT 1;", "source_tables": ["owners", "dogs", "treatments"], "error_info": ""}, {"sample_id": 942, "db_id": "dog_kennels", "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.", "score": 0, "gold_sql": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "pred_sql": "SELECT p.professional_id, p.cell_number\nFROM Professionals p\nJOIN Treatments t ON p.professional_id = t.professional_id\nGROUP BY p.professional_id\nHAVING COUNT(DISTINCT t.treatment_type_code) >= 2;", "source_tables": ["professionals", "treatments"], "error_info": "Result not equal"}, {"sample_id": 943, "db_id": "dog_kennels", "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.", "score": 0, "gold_sql": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "pred_sql": "SELECT p.professional_id, p.cell_number\nFROM Professionals p\nJOIN Treatments t ON p.professional_id = t.professional_id\nGROUP BY p.professional_id\nHAVING COUNT(DISTINCT t.treatment_type_code) >= 2;", "source_tables": ["professionals", "treatments"], "error_info": "Result not equal"}, {"sample_id": 944, "db_id": "dog_kennels", "question": "What are the first name and last name of the professionals who have done treatment with cost below average?", "score": 0, "gold_sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "pred_sql": "SELECT DISTINCT Professionals.first_name, Professionals.last_name \nFROM Professionals \nJOIN Treatments ON Professionals.professional_id = Treatments.professional_id \nWHERE Treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments);", "source_tables": ["professionals", "treatments"], "error_info": "Result not equal"}, {"sample_id": 945, "db_id": "dog_kennels", "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.", "score": 0, "gold_sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "pred_sql": "SELECT DISTINCT Professionals.first_name, Professionals.last_name \nFROM Treatments \nJOIN Professionals ON Treatments.professional_id = Professionals.professional_id \nWHERE Treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments);", "source_tables": ["professionals", "treatments"], "error_info": "Result not equal"}, {"sample_id": 946, "db_id": "dog_kennels", "question": "List the date of each treatment, together with the first name of the professional who operated it.", "score": 1, "gold_sql": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "pred_sql": "SELECT Treatments.date_of_treatment, Professionals.first_name \nFROM Treatments \nJOIN Professionals ON Treatments.professional_id = Professionals.professional_id;", "source_tables": ["professionals", "treatments"], "error_info": ""}, {"sample_id": 947, "db_id": "dog_kennels", "question": "What are the date and the operating professional's first name of each treatment?", "score": 1, "gold_sql": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "pred_sql": "SELECT Treatments.date_of_treatment, Professionals.first_name \nFROM Treatments \nJOIN Professionals ON Treatments.professional_id = Professionals.professional_id;", "source_tables": ["professionals", "treatments"], "error_info": ""}, {"sample_id": 948, "db_id": "dog_kennels", "question": "List the cost of each treatment and the corresponding treatment type description.", "score": 1, "gold_sql": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "pred_sql": "SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description \nFROM Treatments \nJOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;", "source_tables": ["treatments", "treatment_types"], "error_info": ""}, {"sample_id": 949, "db_id": "dog_kennels", "question": "What are the cost and treatment type description of each treatment?", "score": 1, "gold_sql": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "pred_sql": "SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;", "source_tables": ["treatments", "treatment_types"], "error_info": ""}, {"sample_id": 950, "db_id": "dog_kennels", "question": "List each owner's first name, last name, and the size of his for her dog.", "score": 0, "gold_sql": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "pred_sql": "SELECT Owners.first_name, Owners.last_name, Sizes.size_description \nFROM Owners \nJOIN Dogs ON Owners.owner_id = Dogs.owner_id \nJOIN Sizes ON Dogs.size_code = Sizes.size_code;", "source_tables": ["owners", "dogs"], "error_info": "Result not equal"}, {"sample_id": 951, "db_id": "dog_kennels", "question": "What are each owner's first name, last name, and the size of their dog?", "score": 0, "gold_sql": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "pred_sql": "SELECT Owners.first_name, Owners.last_name, Sizes.size_description \nFROM Owners \nJOIN Dogs ON Owners.owner_id = Dogs.owner_id \nJOIN Sizes ON Dogs.size_code = Sizes.size_code;", "source_tables": ["owners", "dogs"], "error_info": "Result not equal"}, {"sample_id": 952, "db_id": "dog_kennels", "question": "List pairs of the owner's first name and the dogs's name.", "score": 1, "gold_sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "pred_sql": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;", "source_tables": ["owners", "dogs"], "error_info": ""}, {"sample_id": 953, "db_id": "dog_kennels", "question": "What are each owner's first name and their dogs's name?", "score": 1, "gold_sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "pred_sql": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;", "source_tables": ["owners", "dogs"], "error_info": ""}, {"sample_id": 954, "db_id": "dog_kennels", "question": "List the names of the dogs of the rarest breed and the treatment dates of them.", "score": 0, "gold_sql": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )", "pred_sql": "SELECT Dogs.name, Treatments.date_of_treatment \nFROM Dogs \nJOIN Breeds ON Dogs.breed_code = Breeds.breed_code \nJOIN Treatments ON Dogs.dog_id = Treatments.dog_id \nWHERE Breeds.breed_code = (SELECT breed_code \n                           FROM Breeds \n                           GROUP BY breed_code \n                           ORDER BY COUNT(*) ASC \n                           LIMIT 1);", "source_tables": ["dogs", "treatments"], "error_info": "Result not equal"}, {"sample_id": 955, "db_id": "dog_kennels", "question": "Which dogs are of the rarest breed? Show their names and treatment dates.", "score": 1, "gold_sql": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )", "pred_sql": "SELECT Dogs.name, Treatments.date_of_treatment \nFROM Dogs \nJOIN Breeds ON Dogs.breed_code = Breeds.breed_code \nJOIN Treatments ON Dogs.dog_id = Treatments.dog_id \nWHERE Breeds.breed_code IN (\n    SELECT breed_code \n    FROM Dogs \n    GROUP BY breed_code \n    ORDER BY COUNT(*) ASC \n    LIMIT 1\n)", "source_tables": ["dogs", "treatments"], "error_info": ""}, {"sample_id": 956, "db_id": "dog_kennels", "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "score": 1, "gold_sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "pred_sql": "SELECT Owners.first_name, Dogs.name \nFROM Owners \nJOIN Dogs ON Owners.owner_id = Dogs.owner_id \nWHERE Owners.state = 'Virginia';", "source_tables": ["owners", "dogs"], "error_info": ""}, {"sample_id": 957, "db_id": "dog_kennels", "question": "Find the first names of owners living in Virginia and the names of dogs they own.", "score": 1, "gold_sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "pred_sql": "SELECT Owners.first_name, Dogs.name \nFROM Owners \nJOIN Dogs ON Owners.owner_id = Dogs.owner_id \nWHERE Owners.state = 'Virginia';", "source_tables": ["owners", "dogs"], "error_info": ""}, {"sample_id": 958, "db_id": "dog_kennels", "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "score": 0, "gold_sql": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "pred_sql": "SELECT Dogs.date_arrived, Dogs.date_departed \nFROM Dogs \nJOIN Treatments ON Dogs.dog_id = Treatments.dog_id;", "source_tables": ["dogs", "treatments"], "error_info": "Result not equal"}, {"sample_id": 959, "db_id": "dog_kennels", "question": "Find the arriving date and the departing date of the dogs that received a treatment.", "score": 1, "gold_sql": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "pred_sql": "SELECT date_arrived, date_departed FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)", "source_tables": ["dogs", "treatments"], "error_info": ""}, {"sample_id": 960, "db_id": "dog_kennels", "question": "List the last name of the owner owning the youngest dog.", "score": 0, "gold_sql": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "pred_sql": "SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id ORDER BY Dogs.date_of_birth DESC LIMIT 1;", "source_tables": ["owners", "dogs"], "error_info": "Result not equal"}, {"sample_id": 961, "db_id": "dog_kennels", "question": "Who owns the youngest dog? Give me his or her last name.", "score": 0, "gold_sql": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "pred_sql": "SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id ORDER BY Dogs.date_of_birth DESC LIMIT 1;", "source_tables": ["owners", "dogs"], "error_info": "Result not equal"}, {"sample_id": 962, "db_id": "dog_kennels", "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.", "score": 1, "gold_sql": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'", "pred_sql": "SELECT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin');", "source_tables": ["professionals"], "error_info": ""}, {"sample_id": 963, "db_id": "dog_kennels", "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?", "score": 1, "gold_sql": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'", "pred_sql": "SELECT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin');", "source_tables": ["professionals"], "error_info": ""}, {"sample_id": 964, "db_id": "dog_kennels", "question": "What are the arriving date and the departing date of all the dogs?", "score": 1, "gold_sql": "SELECT date_arrived ,  date_departed FROM Dogs", "pred_sql": "SELECT date_arrived, date_departed FROM Dogs;", "source_tables": ["dogs"], "error_info": ""}, {"sample_id": 965, "db_id": "dog_kennels", "question": "List the arrival date and the departure date for all the dogs.", "score": 1, "gold_sql": "SELECT date_arrived ,  date_departed FROM Dogs", "pred_sql": "SELECT date_arrived, date_departed FROM Dogs;", "source_tables": ["dogs"], "error_info": ""}, {"sample_id": 966, "db_id": "dog_kennels", "question": "How many dogs went through any treatments?", "score": 1, "gold_sql": "SELECT count(DISTINCT dog_id) FROM Treatments", "pred_sql": "SELECT COUNT(DISTINCT dog_id) AS number_of_dogs_treated FROM Treatments;", "source_tables": ["treatments"], "error_info": ""}, {"sample_id": 967, "db_id": "dog_kennels", "question": "Count the number of dogs that went through a treatment.", "score": 1, "gold_sql": "SELECT count(DISTINCT dog_id) FROM Treatments", "pred_sql": "SELECT COUNT(DISTINCT dog_id) AS number_of_dogs_treated FROM Treatments;", "source_tables": ["treatments"], "error_info": ""}, {"sample_id": 968, "db_id": "dog_kennels", "question": "How many professionals have performed any treatment to dogs?", "score": 1, "gold_sql": "SELECT count(DISTINCT professional_id) FROM Treatments", "pred_sql": "SELECT COUNT(DISTINCT professional_id) AS number_of_professionals FROM Treatments;", "source_tables": ["treatments"], "error_info": ""}, {"sample_id": 969, "db_id": "dog_kennels", "question": "Find the number of professionals who have ever treated dogs.", "score": 1, "gold_sql": "SELECT count(DISTINCT professional_id) FROM Treatments", "pred_sql": "SELECT COUNT(DISTINCT professional_id) AS number_of_professionals FROM Treatments;", "source_tables": ["treatments"], "error_info": ""}, {"sample_id": 970, "db_id": "dog_kennels", "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "score": 1, "gold_sql": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "pred_sql": "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%';", "source_tables": ["professionals"], "error_info": ""}, {"sample_id": 971, "db_id": "dog_kennels", "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "score": 1, "gold_sql": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "pred_sql": "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%';", "source_tables": ["professionals"], "error_info": ""}, {"sample_id": 972, "db_id": "dog_kennels", "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "score": 1, "gold_sql": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "pred_sql": "SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';", "source_tables": ["owners"], "error_info": ""}, {"sample_id": 973, "db_id": "dog_kennels", "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "score": 1, "gold_sql": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "pred_sql": "SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';", "source_tables": ["owners"], "error_info": ""}, {"sample_id": 974, "db_id": "dog_kennels", "question": "How many dogs have an age below the average?", "score": 1, "gold_sql": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )", "pred_sql": "SELECT COUNT(*) AS count_below_average_age FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs);", "source_tables": ["dogs"], "error_info": ""}, {"sample_id": 975, "db_id": "dog_kennels", "question": "Count the number of dogs of an age below the average.", "score": 1, "gold_sql": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )", "pred_sql": "SELECT COUNT(*) AS number_of_dogs_below_average_age FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs);", "source_tables": ["dogs"], "error_info": ""}, {"sample_id": 976, "db_id": "dog_kennels", "question": "How much does the most recent treatment cost?", "score": 1, "gold_sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "pred_sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;", "source_tables": ["treatments"], "error_info": ""}, {"sample_id": 977, "db_id": "dog_kennels", "question": "Show me the cost of the most recently performed treatment.", "score": 1, "gold_sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "pred_sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;", "source_tables": ["treatments"], "error_info": ""}, {"sample_id": 978, "db_id": "dog_kennels", "question": "How many dogs have not gone through any treatment?", "score": 1, "gold_sql": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )", "pred_sql": "SELECT COUNT(*) AS untreated_dogs_count FROM Dogs WHERE dog_id NOT IN (SELECT DISTINCT dog_id FROM Treatments);", "source_tables": ["dogs", "treatments"], "error_info": ""}, {"sample_id": 979, "db_id": "dog_kennels", "question": "Tell me the number of dogs that have not received any treatment .", "score": 1, "gold_sql": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )", "pred_sql": "SELECT COUNT(*) AS number_of_dogs_without_treatment FROM Dogs WHERE dog_id NOT IN (SELECT DISTINCT dog_id FROM Treatments);", "source_tables": ["dogs", "treatments"], "error_info": ""}, {"sample_id": 980, "db_id": "dog_kennels", "question": "How many owners temporarily do not have any dogs?", "score": 1, "gold_sql": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )", "pred_sql": "SELECT COUNT(*) AS owner_count FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs)", "source_tables": ["owners", "dogs"], "error_info": ""}, {"sample_id": 981, "db_id": "dog_kennels", "question": "Find the number of owners who do not own any dogs at this moment.", "score": 1, "gold_sql": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )", "pred_sql": "SELECT COUNT(*) AS number_of_owners_without_dogs FROM Owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM Dogs)", "source_tables": ["owners", "dogs"], "error_info": ""}, {"sample_id": 982, "db_id": "dog_kennels", "question": "How many professionals did not operate any treatment on dogs?", "score": 1, "gold_sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )", "pred_sql": "SELECT COUNT(*) AS professionals_without_treatments\nFROM Professionals\nWHERE professional_id NOT IN (\n    SELECT DISTINCT professional_id\n    FROM Treatments\n);", "source_tables": ["professionals", "treatments"], "error_info": ""}, {"sample_id": 983, "db_id": "dog_kennels", "question": "Find the number of professionals who have not treated any dogs.", "score": 1, "gold_sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )", "pred_sql": "SELECT COUNT(*) AS number_of_professionals_without_treatments \nFROM Professionals \nWHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments);", "source_tables": ["professionals", "treatments"], "error_info": ""}, {"sample_id": 984, "db_id": "dog_kennels", "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "score": 1, "gold_sql": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "pred_sql": "SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1;", "source_tables": ["dogs"], "error_info": ""}, {"sample_id": 985, "db_id": "dog_kennels", "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "score": 1, "gold_sql": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "pred_sql": "SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1;", "source_tables": ["dogs"], "error_info": ""}, {"sample_id": 986, "db_id": "dog_kennels", "question": "What is the average age of all the dogs?", "score": 1, "gold_sql": "SELECT avg(age) FROM Dogs", "pred_sql": "SELECT AVG(age) AS average_age FROM Dogs;", "source_tables": ["dogs"], "error_info": ""}, {"sample_id": 987, "db_id": "dog_kennels", "question": "Compute the average age of all the dogs.", "score": 1, "gold_sql": "SELECT avg(age) FROM Dogs", "pred_sql": "SELECT AVG(age) AS average_age FROM Dogs;", "source_tables": ["dogs"], "error_info": ""}, {"sample_id": 988, "db_id": "dog_kennels", "question": "What is the age of the oldest dog?", "score": 1, "gold_sql": "SELECT max(age) FROM Dogs", "pred_sql": "SELECT MAX(age) AS oldest_dog_age FROM Dogs;", "source_tables": ["dogs"], "error_info": ""}, {"sample_id": 989, "db_id": "dog_kennels", "question": "Tell me the age of the oldest dog.", "score": 1, "gold_sql": "SELECT max(age) FROM Dogs", "pred_sql": "SELECT MAX(age) AS oldest_dog_age FROM Dogs;", "source_tables": ["dogs"], "error_info": ""}, {"sample_id": 990, "db_id": "dog_kennels", "question": "How much does each charge type costs? List both charge type and amount.", "score": 1, "gold_sql": "SELECT charge_type ,  charge_amount FROM Charges", "pred_sql": "SELECT charge_type, charge_amount FROM Charges;", "source_tables": ["charges"], "error_info": ""}, {"sample_id": 991, "db_id": "dog_kennels", "question": "List each charge type and its amount.", "score": 1, "gold_sql": "SELECT charge_type ,  charge_amount FROM Charges", "pred_sql": "SELECT charge_type, charge_amount FROM Charges;", "source_tables": ["charges"], "error_info": ""}, {"sample_id": 992, "db_id": "dog_kennels", "question": "How much does the most expensive charge type costs?", "score": 1, "gold_sql": "SELECT max(charge_amount) FROM Charges", "pred_sql": "SELECT MAX(charge_amount) AS max_charge FROM Charges;", "source_tables": ["charges"], "error_info": ""}, {"sample_id": 993, "db_id": "dog_kennels", "question": "What is the charge amount of the most expensive charge type?", "score": 1, "gold_sql": "SELECT max(charge_amount) FROM Charges", "pred_sql": "SELECT charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1;", "source_tables": ["charges"], "error_info": ""}, {"sample_id": 994, "db_id": "dog_kennels", "question": "List the email, cell phone and home phone of all the professionals.", "score": 1, "gold_sql": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "pred_sql": "SELECT email_address, cell_number, home_phone FROM Professionals;", "source_tables": ["professionals"], "error_info": ""}, {"sample_id": 995, "db_id": "dog_kennels", "question": "What are the email, cell phone and home phone of each professional?", "score": 1, "gold_sql": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "pred_sql": "SELECT email_address, cell_number, home_phone FROM Professionals;", "source_tables": ["professionals"], "error_info": ""}, {"sample_id": 996, "db_id": "dog_kennels", "question": "What are all the possible breed type and size type combinations?", "score": 0, "gold_sql": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "pred_sql": "SELECT Breeds.breed_name, Sizes.size_description \nFROM Breeds, Sizes;", "source_tables": ["dogs"], "error_info": "Result not equal"}, {"sample_id": 997, "db_id": "dog_kennels", "question": "Find the distinct breed type and size type combinations for dogs.", "score": 0, "gold_sql": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "pred_sql": "SELECT DISTINCT Breeds.breed_name, Sizes.size_description \nFROM Dogs \nJOIN Breeds ON Dogs.breed_code = Breeds.breed_code \nJOIN Sizes ON Dogs.size_code = Sizes.size_code;", "source_tables": ["dogs"], "error_info": "Result not equal"}, {"sample_id": 998, "db_id": "dog_kennels", "question": "List the first name of all the professionals along with the description of the treatment they have done.", "score": 0, "gold_sql": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "pred_sql": "SELECT Professionals.first_name, Treatment_Types.treatment_type_description \nFROM Treatments \nJOIN Professionals ON Treatments.professional_id = Professionals.professional_id \nJOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;", "source_tables": ["professionals", "treatments", "treatment_types"], "error_info": "Result not equal"}, {"sample_id": 999, "db_id": "dog_kennels", "question": "What are each professional's first name and description of the treatment they have performed?", "score": 0, "gold_sql": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "pred_sql": "SELECT Professionals.first_name, Treatment_Types.treatment_type_description \nFROM Treatments \nJOIN Professionals ON Treatments.professional_id = Professionals.professional_id \nJOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;", "source_tables": ["professionals", "treatments", "treatment_types"], "error_info": "Result not equal"}, {"sample_id": 1000, "db_id": "singer", "question": "How many singers are there?", "score": 1, "gold_sql": "SELECT count(*) FROM singer", "pred_sql": "SELECT COUNT(*) AS NumberOfSingers FROM singer;", "source_tables": ["singer"], "error_info": ""}, {"sample_id": 1001, "db_id": "singer", "question": "What is the count of singers?", "score": 1, "gold_sql": "SELECT count(*) FROM singer", "pred_sql": "SELECT COUNT(*) AS Singer_Count FROM singer;", "source_tables": ["singer"], "error_info": ""}, {"sample_id": 1002, "db_id": "singer", "question": "List the name of singers in ascending order of net worth.", "score": 1, "gold_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "pred_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;", "source_tables": ["singer"], "error_info": ""}, {"sample_id": 1003, "db_id": "singer", "question": "What are the names of singers ordered by ascending net worth?", "score": 1, "gold_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "pred_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;", "source_tables": ["singer"], "error_info": ""}, {"sample_id": 1004, "db_id": "singer", "question": "What are the birth year and citizenship of singers?", "score": 1, "gold_sql": "SELECT Birth_Year ,  Citizenship FROM singer", "pred_sql": "SELECT Birth_Year, Citizenship FROM singer;", "source_tables": ["singer"], "error_info": ""}, {"sample_id": 1005, "db_id": "singer", "question": "What are the birth years and citizenships of the singers?", "score": 1, "gold_sql": "SELECT Birth_Year ,  Citizenship FROM singer", "pred_sql": "SELECT Birth_Year, Citizenship FROM singer;", "source_tables": ["singer"], "error_info": ""}, {"sample_id": 1006, "db_id": "singer", "question": "List the name of singers whose citizenship is not \"France\".", "score": 1, "gold_sql": "SELECT Name FROM singer WHERE Citizenship != 'France'", "pred_sql": "SELECT Name FROM singer WHERE Citizenship != 'France';", "source_tables": ["singer"], "error_info": ""}, {"sample_id": 1007, "db_id": "singer", "question": "What are the names of the singers who are not French citizens?", "score": 1, "gold_sql": "SELECT Name FROM singer WHERE Citizenship != 'France'", "pred_sql": "SELECT Name FROM singer WHERE Citizenship != 'France';", "source_tables": ["singer"], "error_info": ""}, {"sample_id": 1008, "db_id": "singer", "question": "Show the name of singers whose birth year is either 1948 or 1949?", "score": 1, "gold_sql": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949", "pred_sql": "SELECT Name FROM singer WHERE Birth_Year IN ('1948', '1949');", "source_tables": ["singer"], "error_info": ""}, {"sample_id": 1009, "db_id": "singer", "question": "What are the names of the singers whose birth years are either 1948 or 1949?", "score": 1, "gold_sql": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949", "pred_sql": "SELECT Name FROM singer WHERE Birth_Year IN ('1948', '1949');", "source_tables": ["singer"], "error_info": ""}, {"sample_id": 1010, "db_id": "singer", "question": "What is the name of the singer with the largest net worth?", "score": 1, "gold_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "pred_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;", "source_tables": ["singer"], "error_info": ""}, {"sample_id": 1011, "db_id": "singer", "question": "What is the name of the singer who is worth the most?", "score": 1, "gold_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "pred_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;", "source_tables": ["singer"], "error_info": ""}, {"sample_id": 1012, "db_id": "singer", "question": "Show different citizenship of singers and the number of singers of each citizenship.", "score": 1, "gold_sql": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship", "pred_sql": "SELECT Citizenship, COUNT(*) AS NumberOfSingers FROM singer GROUP BY Citizenship;", "source_tables": ["singer"], "error_info": ""}, {"sample_id": 1013, "db_id": "singer", "question": "For each citizenship, how many singers are from that country?", "score": 1, "gold_sql": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship", "pred_sql": "SELECT Citizenship, COUNT(*) AS NumberOfSingers FROM singer GROUP BY Citizenship;", "source_tables": ["singer"], "error_info": ""}, {"sample_id": 1014, "db_id": "singer", "question": "Please show the most common citizenship of singers.", "score": 0, "gold_sql": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT Citizenship, COUNT(*) as Count FROM singer GROUP BY Citizenship ORDER BY Count DESC LIMIT 1;", "source_tables": ["singer"], "error_info": "Result not equal"}, {"sample_id": 1015, "db_id": "singer", "question": "What is the most common singer citizenship ?", "score": 0, "gold_sql": "select citizenship from singer group by citizenship order by count(*) desc limit 1", "pred_sql": "SELECT Citizenship, COUNT(*) as Count FROM singer GROUP BY Citizenship ORDER BY Count DESC LIMIT 1;", "source_tables": ["singer"], "error_info": "Result not equal"}, {"sample_id": 1016, "db_id": "singer", "question": "Show different citizenships and the maximum net worth of singers of each citizenship.", "score": 1, "gold_sql": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship", "pred_sql": "SELECT DISTINCT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth\nFROM singer\nGROUP BY Citizenship;", "source_tables": ["singer"], "error_info": ""}, {"sample_id": 1017, "db_id": "singer", "question": "For each citizenship, what is the maximum net worth?", "score": 1, "gold_sql": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship", "pred_sql": "SELECT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth FROM singer GROUP BY Citizenship;", "source_tables": ["singer"], "error_info": ""}, {"sample_id": 1018, "db_id": "singer", "question": "Show titles of songs and names of singers.", "score": 1, "gold_sql": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "pred_sql": "SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID;", "source_tables": ["singer", "song"], "error_info": ""}, {"sample_id": 1019, "db_id": "singer", "question": "What are the song titles and singer names?", "score": 1, "gold_sql": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "pred_sql": "SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID;", "source_tables": ["singer", "song"], "error_info": ""}, {"sample_id": 1020, "db_id": "singer", "question": "Show distinct names of singers that have songs with sales more than 300000.", "score": 1, "gold_sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "pred_sql": "SELECT DISTINCT s.Name FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Sales > 300000;", "source_tables": ["singer", "song"], "error_info": ""}, {"sample_id": 1021, "db_id": "singer", "question": "what are the different names of the singers that have sales more than 300000?", "score": 1, "gold_sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "pred_sql": "SELECT DISTINCT s.Name FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Sales > 300000;", "source_tables": ["singer", "song"], "error_info": ""}, {"sample_id": 1022, "db_id": "singer", "question": "Show the names of singers that have more than one song.", "score": 1, "gold_sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1", "pred_sql": "SELECT s.Name FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Singer_ID HAVING COUNT(so.Song_ID) > 1;", "source_tables": ["singer", "song"], "error_info": ""}, {"sample_id": 1023, "db_id": "singer", "question": "What are the names of the singers that have more than one songs?", "score": 1, "gold_sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1", "pred_sql": "SELECT s.Name FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Singer_ID HAVING COUNT(so.Song_ID) > 1;", "source_tables": ["singer", "song"], "error_info": ""}, {"sample_id": 1024, "db_id": "singer", "question": "Show the names of singers and the total sales of their songs.", "score": 1, "gold_sql": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name", "pred_sql": "SELECT singer.Name, SUM(song.Sales) AS Total_Sales\nFROM singer\nJOIN song ON singer.Singer_ID = song.Singer_ID\nGROUP BY singer.Name;", "source_tables": ["singer", "song"], "error_info": ""}, {"sample_id": 1025, "db_id": "singer", "question": "For each singer name, what is the total sales for their songs?", "score": 1, "gold_sql": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name", "pred_sql": "SELECT s.Name, SUM(song.Sales) AS Total_Sales\nFROM singer s\nJOIN song ON s.Singer_ID = song.Singer_ID\nGROUP BY s.Name;", "source_tables": ["singer", "song"], "error_info": ""}, {"sample_id": 1026, "db_id": "singer", "question": "List the name of singers that do not have any song.", "score": 1, "gold_sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)", "pred_sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song);", "source_tables": ["singer", "song"], "error_info": ""}, {"sample_id": 1027, "db_id": "singer", "question": "What is the sname of every sing that does not have any song?", "score": 1, "gold_sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)", "pred_sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT DISTINCT Singer_ID FROM song);", "source_tables": ["singer", "song"], "error_info": ""}, {"sample_id": 1028, "db_id": "singer", "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.", "score": 0, "gold_sql": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "pred_sql": "SELECT DISTINCT Citizenship FROM singer WHERE Birth_Year < '1945' OR Birth_Year > '1955';", "source_tables": ["singer"], "error_info": "Result not equal"}, {"sample_id": 1029, "db_id": "singer", "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?", "score": 0, "gold_sql": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "pred_sql": "SELECT DISTINCT Citizenship FROM singer WHERE Birth_Year < '1945' OR Birth_Year > '1955';", "source_tables": ["singer"], "error_info": "Result not equal"}, {"sample_id": 1030, "db_id": "real_estate_properties", "question": "How many available features are there in total?", "score": 1, "gold_sql": "SELECT count(*) FROM Other_Available_Features", "pred_sql": "SELECT COUNT(*) AS total_features FROM Other_Available_Features;", "source_tables": ["other_available_features"], "error_info": ""}, {"sample_id": 1031, "db_id": "real_estate_properties", "question": "What is the feature type name of feature AirCon?", "score": 1, "gold_sql": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  'AirCon'", "pred_sql": "SELECT Ref_Feature_Types.feature_type_name FROM Other_Available_Features JOIN Ref_Feature_Types ON Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code WHERE Other_Available_Features.feature_name = 'AirCon';", "source_tables": ["ref_feature_types", "other_available_features"], "error_info": ""}, {"sample_id": 1032, "db_id": "real_estate_properties", "question": "Show the property type descriptions of properties belonging to that code.", "score": 0, "gold_sql": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code", "pred_sql": "SELECT Ref_Property_Types.property_type_description FROM Properties JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code;", "source_tables": ["properties", "ref_property_types"], "error_info": "Result not equal"}, {"sample_id": 1033, "db_id": "real_estate_properties", "question": "What are the names of properties that are either houses or apartments with more than 1 room?", "score": 0, "gold_sql": "SELECT property_name FROM Properties WHERE property_type_code  =  'House' UNION SELECT property_name FROM Properties WHERE property_type_code  =  'Apartment' AND room_count  >  1", "pred_sql": "SELECT property_name FROM Properties WHERE (property_type_code = 'HSE' OR property_type_code = 'APT') AND room_count > 1;", "source_tables": ["properties"], "error_info": "Result not equal"}]