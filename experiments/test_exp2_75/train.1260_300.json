[
    {
        "sample_id": "train.1",
        "c_low": "SELECT head.name, head.born_state, head.age FROM head ORDER BY head.age;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of department heads from the 'head' table who were not born in a specific state. The placeholder in the WHERE clause represents the state name that is being excluded.\",\n        \"virtual_table\": \"SELECT name FROM head WHERE born_state != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT head.name, head.born_state, head.age FROM head ORDER BY head.age;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT h.name, h.born_state, h.age FROM head AS h ORDER BY h.age;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the states of birth for department heads from the 'head' table, grouped by state. The placeholder in the HAVING clause represents the minimum count of department heads required for a state to be included in the results.\",\n        \"virtual_table\": \"SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and total number of employees in departments where the head is temporarily acting. The placeholder in the WHERE clause represents the status of the head's position.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT name, born_state, age FROM head ORDER BY age;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the states of birth for department heads from the 'head' table, grouped by state. The placeholder in the HAVING clause represents the minimum count of department heads required for a state to be included in the results.\",\n        \"virtual_table\": \"SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of department heads from the 'head' table who were not born in a specific state. The placeholder in the WHERE clause represents the state name that is being excluded.\",\n        \"virtual_table\": \"SELECT name FROM head WHERE born_state != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT head.name, head.born_state, head.age FROM head JOIN management ON head.head_ID = management.head_ID JOIN department ON management.department_ID = department.Department_ID ORDER BY head.age;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and total number of employees in departments where the head is temporarily acting. The placeholder in the WHERE clause represents the status of the head's position.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT head.name, head.born_state, head.age FROM head ORDER BY head.age;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1",
        "c_low": "SELECT head.name, head.born_state, head.age FROM head ORDER BY head.age;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of department heads from the 'head' table who were not born in a specific state. The placeholder in the WHERE clause represents the state name that is being excluded.\",\n        \"virtual_table\": \"SELECT name FROM head WHERE born_state != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT head.name, head.born_state, head.age FROM head ORDER BY head.age;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT h.name, h.born_state, h.age FROM head AS h ORDER BY h.age;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the states of birth for department heads from the 'head' table, grouped by state. The placeholder in the HAVING clause represents the minimum count of department heads required for a state to be included in the results.\",\n        \"virtual_table\": \"SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and total number of employees in departments where the head is temporarily acting. The placeholder in the WHERE clause represents the status of the head's position.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT name, born_state, age FROM head ORDER BY age;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the states of birth for department heads from the 'head' table, grouped by state. The placeholder in the HAVING clause represents the minimum count of department heads required for a state to be included in the results.\",\n        \"virtual_table\": \"SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of department heads from the 'head' table who were not born in a specific state. The placeholder in the WHERE clause represents the state name that is being excluded.\",\n        \"virtual_table\": \"SELECT name FROM head WHERE born_state != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT head.name, head.born_state, head.age FROM head JOIN management ON head.head_ID = management.head_ID ORDER BY head.age;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and total number of employees in departments where the head is temporarily acting. The placeholder in the WHERE clause represents the status of the head's position.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT head.name, head.born_state, head.age FROM head JOIN management ON head.head_ID = management.head_ID JOIN department ON management.department_ID = department.Department_ID ORDER BY head.age;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2",
        "c_low": "SELECT strftime('%Y', Creation) AS creation_year, Name, Budget_in_Billions FROM department;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT strftime('%Y', Creation) AS creation_year, Name, Budget_in_Billions FROM department;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT strftime('%Y', Creation) AS creation_year, Name, Budget_in_Billions FROM department;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT strftime('%Y', Creation) AS creation_year, Name, Budget_in_Billions FROM department;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT strftime('%Y', Creation) AS Creation_Year, Name, Budget_in_Billions FROM department;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT strftime('%Y', Creation) AS creation_year, Name, Budget_in_Billions FROM department;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.6",
        "c_low": "SELECT DISTINCT substr(Creation, 1, 4) AS Creation_Year \nFROM department \nJOIN management ON department.Department_ID = management.department_ID \nJOIN head ON management.head_ID = head.head_ID \nWHERE head.born_state = 'Alabama';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of department heads from the 'head' table who were not born in a specific state. The placeholder in the WHERE clause represents the state name that is being excluded.\",\n        \"virtual_table\": \"SELECT name FROM head WHERE born_state != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT substr(Creation, 1, 4) AS Creation_Year\nFROM department d\nJOIN management m ON d.Department_ID = m.department_ID\nJOIN head h ON m.head_ID = h.head_ID\nWHERE h.born_state = 'Alabama';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT DISTINCT Creation FROM department WHERE Department_ID IN (SELECT department_ID FROM management WHERE head_ID IN (SELECT head_ID FROM head WHERE born_state = 'Alabama'));",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the states of birth for department heads from the 'head' table, grouped by state. The placeholder in the HAVING clause represents the minimum count of department heads required for a state to be included in the results.\",\n        \"virtual_table\": \"SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a summary of departments from the 'department' table, including their unique identifiers and names, along with the count of heads managing each department. The results are filtered to show only those departments that have more than a specified number of heads managing them, as indicated by the placeholder in the HAVING clause.\",\n        \"virtual_table\": \"SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT strftime('%Y', Creation) AS creation_year \nFROM department d \nJOIN management m ON d.Department_ID = m.department_ID \nJOIN head h ON m.head_ID = h.head_ID \nWHERE h.born_state = 'Alabama';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of department heads from the 'head' table who were not born in a specific state. The placeholder in the WHERE clause represents the state name that is being excluded.\",\n        \"virtual_table\": \"SELECT name FROM head WHERE born_state != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the states of birth for department heads from the 'head' table, grouped by state. The placeholder in the HAVING clause represents the minimum count of department heads required for a state to be included in the results.\",\n        \"virtual_table\": \"SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT strftime('%Y', Creation) AS creation_year \nFROM department AS d \nJOIN management AS m ON d.Department_ID = m.department_ID \nJOIN head AS h ON m.head_ID = h.head_ID \nWHERE h.born_state = 'Alabama';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of departments from the 'department' table, including their unique identifiers and names, along with the count of heads managing each department. The results are filtered to show only those departments that have more than a specified number of heads managing them, as indicated by the placeholder in the HAVING clause.\",\n        \"virtual_table\": \"SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT substr(Creation, 1, 4) AS Creation_Year\nFROM department d\nJOIN management m ON d.Department_ID = m.department_ID\nJOIN head h ON m.head_ID = h.head_ID\nWHERE h.born_state = 'Alabama';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.8",
        "c_low": "SELECT strftime('%Y', Creation) AS Year, COUNT(*) AS DepartmentCount\nFROM department\nGROUP BY Year\nORDER BY DepartmentCount DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT strftime('%Y', Creation) AS Year, COUNT(*) AS DepartmentCount\nFROM department\nGROUP BY Year\nORDER BY DepartmentCount DESC\nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT strftime('%Y', Creation) AS year, COUNT(*) AS department_count \nFROM department \nGROUP BY year \nORDER BY department_count DESC \nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of departments from the 'department' table, including their unique identifiers and names, along with the count of heads managing each department. The results are filtered to show only those departments that have more than a specified number of heads managing them, as indicated by the placeholder in the HAVING clause.\",\n        \"virtual_table\": \"SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT strftime('%Y', Creation) AS establishment_year, COUNT(*) AS num_departments\nFROM department\nGROUP BY establishment_year\nORDER BY num_departments DESC\nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT strftime('%Y', Creation) AS year, COUNT(*) AS department_count \nFROM department \nGROUP BY year \nORDER BY department_count DESC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of departments from the 'department' table, including their unique identifiers and names, along with the count of heads managing each department. The results are filtered to show only those departments that have more than a specified number of heads managing them, as indicated by the placeholder in the HAVING clause.\",\n        \"virtual_table\": \"SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT strftime('%Y', Creation) AS Year, COUNT(*) AS DepartmentCount\nFROM department\nGROUP BY Year\nORDER BY DepartmentCount DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.12",
        "c_low": "SELECT DISTINCT h.age \nFROM head h \nJOIN management m ON h.head_ID = m.head_ID \nWHERE m.temporary_acting = 'yes';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT DISTINCT h.age \nFROM head h \nJOIN management m ON h.head_ID = m.head_ID \nWHERE m.temporary_acting = 'yes';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT DISTINCT h.age \nFROM head h \nJOIN management m ON h.head_ID = m.head_ID \nWHERE m.temporary_acting = 'yes';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT DISTINCT h.age \nFROM head h \nJOIN management m ON h.head_ID = m.head_ID \nWHERE m.temporary_acting = 'yes';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT DISTINCT h.age \nFROM head h \nJOIN management m ON h.head_ID = m.head_ID \nWHERE m.temporary_acting = 'yes';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT DISTINCT h.age \nFROM head h \nJOIN management m ON h.head_ID = m.head_ID \nWHERE m.temporary_acting = 'yes';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.13",
        "c_low": "SELECT DISTINCT h1.born_state \nFROM head h1 \nJOIN management m1 ON h1.head_ID = m1.head_ID \nJOIN department d1 ON m1.department_ID = d1.Department_ID \nWHERE d1.Name = 'Treasury' \n   OR d1.Name = 'Homeland Security';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of department heads from the 'head' table who were not born in a specific state. The placeholder in the WHERE clause represents the state name that is being excluded.\",\n        \"virtual_table\": \"SELECT name FROM head WHERE born_state != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT h1.born_state\nFROM department d1\nJOIN management m1 ON d1.Department_ID = m1.department_ID\nJOIN head h1 ON m1.head_ID = h1.head_ID\nWHERE d1.Name = 'Treasury'\nUNION\nSELECT DISTINCT h2.born_state\nFROM department d2\nJOIN management m2 ON d2.Department_ID = m2.department_ID\nJOIN head h2 ON m2.head_ID = h2.head_ID\nWHERE d2.Name = 'Homeland Security';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT h1.born_state \nFROM head h1 \nJOIN management m1 ON h1.head_ID = m1.head_ID \nJOIN department d1 ON m1.department_ID = d1.Department_ID \nWHERE d1.Name = 'Treasury' \n   OR d1.Name = 'Homeland Security' \nGROUP BY h1.born_state \nHAVING COUNT(DISTINCT d1.Name) = 2;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the states of birth for department heads from the 'head' table, grouped by state. The placeholder in the HAVING clause represents the minimum count of department heads required for a state to be included in the results.\",\n        \"virtual_table\": \"SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT h1.born_state \nFROM head h1 \nJOIN management m1 ON h1.head_ID = m1.head_ID \nJOIN department d1 ON m1.department_ID = d1.Department_ID \nWHERE d1.Name = 'Treasury' \nUNION \nSELECT h2.born_state \nFROM head h2 \nJOIN management m2 ON h2.head_ID = m2.head_ID \nJOIN department d2 ON m2.department_ID = d2.Department_ID \nWHERE d2.Name = 'Homeland Security';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of department heads from the 'head' table who were not born in a specific state. The placeholder in the WHERE clause represents the state name that is being excluded.\",\n        \"virtual_table\": \"SELECT name FROM head WHERE born_state != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the states of birth for department heads from the 'head' table, grouped by state. The placeholder in the HAVING clause represents the minimum count of department heads required for a state to be included in the results.\",\n        \"virtual_table\": \"SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT h1.born_state\nFROM department d1\nJOIN management m1 ON d1.Department_ID = m1.department_ID\nJOIN head h1 ON m1.head_ID = h1.head_ID\nWHERE d1.Name = 'Treasury'\nUNION\nSELECT DISTINCT h2.born_state\nFROM department d2\nJOIN management m2 ON d2.Department_ID = m2.department_ID\nJOIN head h2 ON m2.head_ID = h2.head_ID\nWHERE d2.Name = 'Homeland Security';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT DISTINCT h1.born_state\nFROM department d1\nJOIN management m1 ON d1.Department_ID = m1.department_ID\nJOIN head h1 ON m1.head_ID = h1.head_ID\nWHERE d1.Name = 'Treasury'\nUNION\nSELECT DISTINCT h2.born_state\nFROM department d2\nJOIN management m2 ON d2.Department_ID = m2.department_ID\nJOIN head h2 ON m2.head_ID = h2.head_ID\nWHERE d2.Name = 'Homeland Security';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.19",
        "c_low": "SELECT Farm_ID, Total_Horses FROM farm ORDER BY Total_Horses ASC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Farm_ID, Total_Horses FROM farm ORDER BY Total_Horses ASC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT Farm_ID, Total_Horses FROM farm ORDER BY Total_Horses ASC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT Farm_ID, Total_Horses FROM farm ORDER BY Total_Horses ASC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT Farm_ID, Total_Horses FROM farm ORDER BY Total_Horses ASC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT Farm_ID, Total_Horses FROM farm ORDER BY Total_Horses ASC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.44",
        "c_low": "SELECT Status, COUNT(*) AS City_Count\nFROM city\nGROUP BY Status\nORDER BY City_Count DESC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Status, COUNT(*) AS City_Count FROM city GROUP BY Status ORDER BY City_Count DESC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the status of cities that have hosted competitions, grouped by the city identifier. The results are ordered by the number of competitions hosted in descending order, with a limit on the number of cities returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the official names and current statuses of cities from the 'city' table, ordered by their population in descending order. The placeholder in the LIMIT clause represents the maximum number of cities to be returned.\",\n        \"virtual_table\": \"SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT Status, COUNT(*) AS City_Count FROM city GROUP BY Status ORDER BY City_Count DESC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the official names of cities that have hosted more than a specified number of competitions. The placeholder in the HAVING clause represents the minimum count of competitions that a city must have hosted to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Status, COUNT(*) AS City_Count \nFROM city \nGROUP BY Status \nORDER BY City_Count DESC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the official names and current statuses of cities from the 'city' table, ordered by their population in descending order. The placeholder in the LIMIT clause represents the maximum number of cities to be returned.\",\n        \"virtual_table\": \"SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Status, COUNT(*) AS City_Count FROM city GROUP BY Status ORDER BY City_Count DESC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the status of cities that have hosted competitions, grouped by the city identifier. The results are ordered by the number of competitions hosted in descending order, with a limit on the number of cities returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the official names of cities that have hosted more than a specified number of competitions. The placeholder in the HAVING clause represents the minimum count of competitions that a city must have hosted to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Status, COUNT(*) AS City_Count\nFROM city\nGROUP BY Status\nORDER BY City_Count DESC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.45",
        "c_low": "SELECT Status, COUNT(*) AS Frequency \nFROM city \nGROUP BY Status \nORDER BY Frequency ASC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Status, COUNT(*) AS Frequency FROM city GROUP BY Status ORDER BY Frequency ASC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the official names and current statuses of cities from the 'city' table, ordered by their population in descending order. The placeholder in the LIMIT clause represents the maximum number of cities to be returned.\",\n        \"virtual_table\": \"SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the status of cities that have hosted competitions, grouped by the city identifier. The results are ordered by the number of competitions hosted in descending order, with a limit on the number of cities returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT Status, COUNT(*) AS Frequency \nFROM city \nGROUP BY Status \nORDER BY Frequency ASC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT Status, COUNT(Status) AS Frequency FROM city GROUP BY Status ORDER BY Frequency ASC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the official names and current statuses of cities from the 'city' table, ordered by their population in descending order. The placeholder in the LIMIT clause represents the maximum number of cities to be returned.\",\n        \"virtual_table\": \"SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Status, COUNT(*) AS Frequency FROM city GROUP BY Status ORDER BY Frequency ASC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the status of cities that have hosted competitions, grouped by the city identifier. The results are ordered by the number of competitions hosted in descending order, with a limit on the number of cities returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Status, COUNT(*) AS Frequency \nFROM city \nGROUP BY Status \nORDER BY Frequency ASC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.46",
        "c_low": "SELECT Status, COUNT(*) as Count\nFROM city\nGROUP BY Status\nORDER BY Count DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Status, COUNT(*) as Count FROM city GROUP BY Status ORDER BY Count DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the status of cities that have hosted competitions, grouped by the city identifier. The results are ordered by the number of competitions hosted in descending order, with a limit on the number of cities returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the official names and current statuses of cities from the 'city' table, ordered by their population in descending order. The placeholder in the LIMIT clause represents the maximum number of cities to be returned.\",\n        \"virtual_table\": \"SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the themes of competitions hosted in cities that have a population greater than a specified number. The placeholder in the WHERE clause represents the population threshold.\",\n        \"virtual_table\": \"SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT Status, COUNT(*) as Count\nFROM city\nGROUP BY Status\nORDER BY Count DESC\nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT Status, COUNT(Status) AS Status_Count FROM city GROUP BY Status ORDER BY Status_Count DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the official names and current statuses of cities from the 'city' table, ordered by their population in descending order. The placeholder in the LIMIT clause represents the maximum number of cities to be returned.\",\n        \"virtual_table\": \"SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Status, COUNT(*) as Count FROM city GROUP BY Status ORDER BY Count DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the status of cities that have hosted competitions, grouped by the city identifier. The results are ordered by the number of competitions hosted in descending order, with a limit on the number of cities returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the themes of competitions hosted in cities that have a population greater than a specified number. The placeholder in the WHERE clause represents the population threshold.\",\n        \"virtual_table\": \"SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Status, COUNT(*) as Count\nFROM city\nGROUP BY Status\nORDER BY Count DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.47",
        "c_low": "SELECT Status, COUNT(Status) AS Status_Count\nFROM city\nGROUP BY Status\nORDER BY Status_Count DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Status, COUNT(*) as Status_Count FROM city GROUP BY Status ORDER BY Status_Count DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the status of cities that have hosted competitions, grouped by the city identifier. The results are ordered by the number of competitions hosted in descending order, with a limit on the number of cities returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the official names and current statuses of cities from the 'city' table, ordered by their population in descending order. The placeholder in the LIMIT clause represents the maximum number of cities to be returned.\",\n        \"virtual_table\": \"SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the themes of competitions hosted in cities that have a population greater than a specified number. The placeholder in the WHERE clause represents the population threshold.\",\n        \"virtual_table\": \"SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT Status, COUNT(Status) AS Status_Count\nFROM city\nGROUP BY Status\nORDER BY Status_Count DESC\nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT Status, COUNT(Status) AS Status_Count FROM city GROUP BY Status ORDER BY Status_Count DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the official names and current statuses of cities from the 'city' table, ordered by their population in descending order. The placeholder in the LIMIT clause represents the maximum number of cities to be returned.\",\n        \"virtual_table\": \"SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Status, COUNT(*) as Status_Count FROM city GROUP BY Status ORDER BY Status_Count DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the status of cities that have hosted competitions, grouped by the city identifier. The results are ordered by the number of competitions hosted in descending order, with a limit on the number of cities returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the themes of competitions hosted in cities that have a population greater than a specified number. The placeholder in the WHERE clause represents the population threshold.\",\n        \"virtual_table\": \"SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Status, COUNT(Status) AS Status_Count\nFROM city\nGROUP BY Status\nORDER BY Status_Count DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.50",
        "c_low": "SELECT Status FROM city WHERE Population > 1500 AND Population < 500;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Status FROM city WHERE Population > 1500 AND Population < 500",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the official names and current statuses of cities from the 'city' table, ordered by their population in descending order. The placeholder in the LIMIT clause represents the maximum number of cities to be returned.\",\n        \"virtual_table\": \"SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the status of cities that have hosted competitions, grouped by the city identifier. The results are ordered by the number of competitions hosted in descending order, with a limit on the number of cities returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the themes of competitions hosted in cities that have a population greater than a specified number. The placeholder in the WHERE clause represents the population threshold.\",\n        \"virtual_table\": \"SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT Status FROM city WHERE Population > 1500 AND Population < 500;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT Status FROM city WHERE Population > 1500 AND Population < 500;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the official names and current statuses of cities from the 'city' table, ordered by their population in descending order. The placeholder in the LIMIT clause represents the maximum number of cities to be returned.\",\n        \"virtual_table\": \"SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Status FROM city WHERE Population > 1500 AND Population < 500",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the status of cities that have hosted competitions, grouped by the city identifier. The results are ordered by the number of competitions hosted in descending order, with a limit on the number of cities returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the themes of competitions hosted in cities that have a population greater than a specified number. The placeholder in the WHERE clause represents the population threshold.\",\n        \"virtual_table\": \"SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Status FROM city WHERE Population > 1500 AND Population < 500;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.51",
        "c_low": "SELECT DISTINCT Status FROM city WHERE Population > 1500 OR Population < 500;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT DISTINCT Status FROM city WHERE Population > 1500 OR Population < 500;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the official names and current statuses of cities from the 'city' table, ordered by their population in descending order. The placeholder in the LIMIT clause represents the maximum number of cities to be returned.\",\n        \"virtual_table\": \"SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the themes of competitions hosted in cities that have a population greater than a specified number. The placeholder in the WHERE clause represents the population threshold.\",\n        \"virtual_table\": \"SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the status of cities that have hosted competitions, grouped by the city identifier. The results are ordered by the number of competitions hosted in descending order, with a limit on the number of cities returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT Status FROM city WHERE Population > 1500 OR Population < 500;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the official names of cities that have hosted more than a specified number of competitions. The placeholder in the HAVING clause represents the minimum count of competitions that a city must have hosted to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT Status FROM city WHERE Population > 1500 OR Population < 500;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the official names and current statuses of cities from the 'city' table, ordered by their population in descending order. The placeholder in the LIMIT clause represents the maximum number of cities to be returned.\",\n        \"virtual_table\": \"SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT Status FROM city WHERE Population > 1500 UNION SELECT DISTINCT Status FROM city WHERE Population < 500;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the themes of competitions hosted in cities that have a population greater than a specified number. The placeholder in the WHERE clause represents the population threshold.\",\n        \"virtual_table\": \"SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the status of cities that have hosted competitions, grouped by the city identifier. The results are ordered by the number of competitions hosted in descending order, with a limit on the number of cities returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the official names of cities that have hosted more than a specified number of competitions. The placeholder in the HAVING clause represents the minimum count of competitions that a city must have hosted to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT Status FROM city WHERE Population > 1500 OR Population < 500;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.56",
        "c_low": "SELECT course_name, COUNT(student_id) AS number_of_students \nFROM (\n    SELECT T1.student_id, T2.course_name \n    FROM Student_Course_Registrations AS T1 \n    JOIN Courses AS T2 ON T1.course_id = T2.course_id\n) AS course_student_list \nGROUP BY course_name \nORDER BY number_of_students DESC \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Registrations AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id ORDER BY COUNT(*) DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of students who attended a specific course from the 'Courses' table. The placeholder in the WHERE clause represents the name of the course being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    }\n}\n",
        "c_high": "SELECT course_id, COUNT(student_id) AS student_count \nFROM Student_Course_Registrations \nGROUP BY course_id \nORDER BY student_count DESC \nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT course_id, COUNT(student_id) AS student_count\nFROM Student_Course_Registrations\nGROUP BY course_id\nORDER BY student_count DESC\nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Registrations AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "t_3+": "SELECT course_id, COUNT(student_id) AS student_count\nFROM Student_Course_Registrations\nGROUP BY course_id\nORDER BY student_count DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.58",
        "c_low": "SELECT student_id FROM (SELECT student_id, COUNT(course_id) AS course_count FROM Student_Course_Registrations GROUP BY student_id) WHERE course_count = (SELECT MIN(course_count) FROM (SELECT COUNT(course_id) AS course_count FROM Student_Course_Registrations GROUP BY student_id));",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT student_id FROM Student_Course_Registrations GROUP BY student_id HAVING COUNT(course_id) = (SELECT MIN(course_count) FROM (SELECT COUNT(course_id) AS course_count FROM Student_Course_Registrations GROUP BY student_id));",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of students who attended a specific course from the 'Courses' table. The placeholder in the WHERE clause represents the name of the course being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT student_id FROM (SELECT T1.student_id, COUNT(*) AS course_count FROM Students AS T1 JOIN Student_Course_Registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id) AS course_counts ORDER BY course_count ASC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Students' table who have not attended any courses. The subquery checks the 'Student_Course_Attendance' table to filter out those students who have registered for and attended courses.\",\n        \"virtual_table\": \"SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    }\n}\n",
        "t_1": "SELECT student_id\nFROM Student_Course_Registrations\nGROUP BY student_id\nHAVING COUNT(course_id) = (\n    SELECT MIN(course_count)\n    FROM (\n        SELECT COUNT(course_id) AS course_count\n        FROM Student_Course_Registrations\n        GROUP BY student_id\n    ) AS course_counts\n);",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT student_id FROM Student_Course_Registrations GROUP BY student_id ORDER BY COUNT(course_id) ASC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Students' table who have not attended any courses. The subquery checks the 'Student_Course_Attendance' table to filter out those students who have registered for and attended courses.\",\n        \"virtual_table\": \"SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "t_3+": "SELECT student_id\nFROM Student_Course_Registrations\nGROUP BY student_id\nHAVING COUNT(course_id) = (\n    SELECT MIN(course_count)\n    FROM (\n        SELECT COUNT(course_id) AS course_count\n        FROM Student_Course_Registrations\n        GROUP BY student_id\n    ) AS course_counts\n);",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.59",
        "c_low": "SELECT student_id FROM (SELECT student_id, COUNT(course_id) AS course_count FROM Student_Course_Registrations GROUP BY student_id) WHERE course_count = (SELECT MIN(course_count) FROM (SELECT COUNT(course_id) AS course_count FROM Student_Course_Registrations GROUP BY student_id));",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT student_id FROM Student_Course_Registrations GROUP BY student_id HAVING COUNT(course_id) = (SELECT MIN(course_count) FROM (SELECT COUNT(course_id) AS course_count FROM Student_Course_Registrations GROUP BY student_id));",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT student_id FROM (SELECT T1.student_id, COUNT(*) AS course_count FROM Students AS T1 JOIN Student_Course_Registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id) AS course_counts WHERE course_count = (SELECT MIN(course_count) FROM (SELECT COUNT(*) AS course_count FROM Students AS T1 JOIN Student_Course_Registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id));",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Students' table who have not attended any courses. The subquery checks the 'Student_Course_Attendance' table to filter out those students who have registered for and attended courses.\",\n        \"virtual_table\": \"SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    }\n}\n",
        "t_1": "SELECT student_id FROM Student_Course_Registrations GROUP BY student_id HAVING COUNT(course_id) = (SELECT MIN(course_count) FROM (SELECT COUNT(course_id) AS course_count FROM Student_Course_Registrations GROUP BY student_id));",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT student_id FROM Student_Course_Registrations GROUP BY student_id HAVING COUNT(course_id) = (SELECT MIN(course_count) FROM (SELECT COUNT(course_id) AS course_count FROM Student_Course_Registrations GROUP BY student_id));",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Students' table who have not attended any courses. The subquery checks the 'Student_Course_Attendance' table to filter out those students who have registered for and attended courses.\",\n        \"virtual_table\": \"SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    }\n}\n",
        "t_3+": "SELECT student_id FROM Student_Course_Registrations GROUP BY student_id HAVING COUNT(course_id) = (SELECT MIN(course_count) FROM (SELECT COUNT(course_id) AS course_count FROM Student_Course_Registrations GROUP BY student_id));",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.64",
        "c_low": "SELECT DISTINCT student_id FROM Student_Course_Attendance;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT student_id FROM Student_Course_Attendance;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT student_id FROM Student_Course_Attendance;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Students' table who have not attended any courses. The subquery checks the 'Student_Course_Attendance' table to filter out those students who have registered for and attended courses.\",\n        \"virtual_table\": \"SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT student_id FROM Student_Course_Attendance;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT student_id FROM Student_Course_Attendance;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT student_id FROM Student_Course_Attendance;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.65",
        "c_low": "SELECT DISTINCT student_id FROM Student_Course_Attendance;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT student_id FROM Student_Course_Attendance;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of students who attended a specific course from the 'Courses' table. The placeholder in the WHERE clause represents the name of the course being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT student_id FROM Student_Course_Attendance;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Students' table who have not attended any courses. The subquery checks the 'Student_Course_Attendance' table to filter out those students who have registered for and attended courses.\",\n        \"virtual_table\": \"SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT student_id FROM Student_Course_Attendance;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT student_id FROM Student_Course_Attendance;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT student_id FROM Student_Course_Attendance;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.67",
        "c_low": "SELECT S.student_id, P.first_name, P.middle_name, P.last_name, R.registration_date \nFROM Students AS S \nJOIN People AS P ON S.student_id = P.person_id \nJOIN Student_Course_Registrations AS R ON S.student_id = R.student_id \nWHERE R.registration_date = (SELECT MAX(registration_date) FROM Student_Course_Registrations)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT S.student_details FROM Students AS S JOIN Student_Course_Registrations AS R ON S.student_id = R.student_id ORDER BY R.registration_date DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    }\n}\n",
        "c_high": "SELECT S.student_id, S.student_details \nFROM Students S \nJOIN Student_Course_Registrations R ON S.student_id = R.student_id \nWHERE R.registration_date = (SELECT MAX(registration_date) FROM Student_Course_Registrations)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    }\n}\n",
        "t_1": "SELECT s.student_id, s.student_details \nFROM Students s \nJOIN Student_Course_Registrations scr ON s.student_id = scr.student_id \nORDER BY scr.registration_date DESC \nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT S.student_id, S.student_details \nFROM Students AS S \nJOIN Student_Course_Registrations AS R ON S.student_id = R.student_id \nWHERE R.registration_date = (SELECT MAX(registration_date) FROM Student_Course_Registrations)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT s.student_id, s.student_details \nFROM Students s \nJOIN Student_Course_Registrations scr ON s.student_id = scr.student_id \nORDER BY scr.registration_date DESC \nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.68",
        "c_low": "SELECT T1.student_id, T2.course_name, T1.registration_date \nFROM student_course_registrations AS T1 \nJOIN courses AS T2 ON T1.course_id = T2.course_id \nORDER BY T1.registration_date DESC \nLIMIT 10;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT S.student_id, S.student_details, SCR.registration_date, C.course_name \nFROM Students AS S \nJOIN Student_Course_Registrations AS SCR ON S.student_id = SCR.student_id \nJOIN Courses AS C ON SCR.course_id = C.course_id \nORDER BY SCR.registration_date DESC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    }\n}\n",
        "c_high": "SELECT S.student_id, S.student_details, C.course_id, C.course_name, R.registration_date \nFROM Students AS S \nJOIN Student_Course_Registrations AS R ON S.student_id = R.student_id \nJOIN Courses AS C ON R.course_id = C.course_id \nWHERE R.registration_date = (SELECT MAX(registration_date) FROM Student_Course_Registrations)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    }\n}\n",
        "t_1": "SELECT s.student_id, s.student_details, scr.registration_date, c.course_name \nFROM Students s \nJOIN Student_Course_Registrations scr ON s.student_id = scr.student_id \nJOIN Courses c ON scr.course_id = c.course_id \nORDER BY scr.registration_date DESC \nLIMIT 10;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT S.student_id, S.student_details, C.course_name, SCR.registration_date \nFROM Students AS S \nJOIN Student_Course_Registrations AS SCR ON S.student_id = SCR.student_id \nJOIN Courses AS C ON SCR.course_id = C.course_id \nORDER BY SCR.registration_date DESC \nLIMIT 10;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT s.student_id, s.student_details, scr.registration_date, c.course_name \nFROM Students s \nJOIN Student_Course_Registrations scr ON s.student_id = scr.student_id \nJOIN Courses c ON scr.course_id = c.course_id \nORDER BY scr.registration_date DESC \nLIMIT 10;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.76",
        "c_low": "SELECT candidate_id FROM Candidate_Assessments ORDER BY assessment_date DESC LIMIT 1",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of candidate identifiers from the 'Candidate_Assessments' table, ordered by the date of assessment in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT T2.candidate_id FROM candidates AS T2 JOIN student_course_attendance AS T1 ON T2.candidate_id = T1.student_id ORDER BY T1.date_of_attendance DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table retrieves the unique identifier of candidates from the 'candidates' table who are associated with a person in the 'people' table based on a specific email address. The placeholder in the WHERE clause represents the email address of the person.\",\n        \"virtual_table\": \"SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT candidate_id FROM candidates WHERE candidate_id IN (SELECT student_id FROM (SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance) AS combined_courses) ORDER BY candidate_id DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT candidate_id FROM Candidate_Assessments ORDER BY assessment_date DESC LIMIT 1",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of candidate identifiers from the 'Candidate_Assessments' table, ordered by the date of assessment in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT candidate_id FROM candidates WHERE candidate_id IN (SELECT student_id FROM student_course_attendance ORDER BY date_of_attendance DESC LIMIT 1)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT c.candidate_id\nFROM Candidates c\nJOIN Student_Course_Attendance sca ON c.candidate_id = sca.student_id\nJOIN Student_Course_Registrations scr ON sca.student_id = scr.student_id AND sca.course_id = scr.course_id\nORDER BY sca.date_of_attendance DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.77",
        "c_low": "SELECT S.student_id, P.first_name, P.last_name, COUNT(SCR.course_id) AS course_count\nFROM Students AS S\nJOIN People AS P ON S.student_id = P.person_id\nJOIN Student_Course_Registrations AS SCR ON S.student_id = SCR.student_id\nGROUP BY S.student_id, P.first_name, P.last_name\nORDER BY course_count DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT S.student_id, S.student_details \nFROM Students AS S \nJOIN Student_Course_Registrations AS R ON S.student_id = R.student_id \nGROUP BY S.student_id \nORDER BY COUNT(R.course_id) DESC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of students who attended a specific course from the 'Courses' table. The placeholder in the WHERE clause represents the name of the course being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    }\n}\n",
        "c_high": "SELECT S.student_id, S.student_details \nFROM Students AS S \nJOIN (\n    SELECT T1.student_id, COUNT(*) AS course_count \n    FROM Students AS T1 \n    JOIN Student_Course_Registrations AS T2 ON T1.student_id = T2.student_id \n    GROUP BY T1.student_id \n) AS CourseCounts ON S.student_id = CourseCounts.student_id \nWHERE CourseCounts.course_count = (\n    SELECT MAX(course_count) \n    FROM (\n        SELECT COUNT(*) AS course_count \n        FROM Student_Course_Registrations \n        GROUP BY student_id\n    )\n)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    }\n}\n",
        "t_1": "SELECT s.student_id, s.student_details\nFROM Students s\nJOIN Student_Course_Registrations scr ON s.student_id = scr.student_id\nGROUP BY s.student_id\nORDER BY COUNT(scr.course_id) DESC\nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T1.student_id, T1.student_details \nFROM students AS T1 \nJOIN (\n    SELECT T1.student_id, COUNT(*) AS course_count \n    FROM students AS T1 \n    JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id \n    GROUP BY T1.student_id \n) AS T2 ON T1.student_id = T2.student_id \nWHERE T2.course_count = (\n    SELECT MAX(course_count) \n    FROM (\n        SELECT COUNT(*) AS course_count \n        FROM student_course_registrations \n        GROUP BY student_id\n    )\n)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    }\n}\n",
        "t_3+": "SELECT s.student_id, s.student_details\nFROM Students s\nJOIN Student_Course_Registrations scr ON s.student_id = scr.student_id\nGROUP BY s.student_id\nORDER BY COUNT(scr.course_id) DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.78",
        "c_low": "SELECT student_id, COUNT(course_id) AS course_count\nFROM Student_Course_Registrations\nGROUP BY student_id\nORDER BY course_count DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT S.student_id, S.student_details \nFROM Students AS S \nJOIN Student_Course_Registrations AS R ON S.student_id = R.student_id \nGROUP BY S.student_id \nORDER BY COUNT(R.course_id) DESC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of students who attended a specific course from the 'Courses' table. The placeholder in the WHERE clause represents the name of the course being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    }\n}\n",
        "c_high": "SELECT S.student_id, S.student_details \nFROM Students AS S \nJOIN (\n    SELECT T1.student_id, COUNT(*) AS course_count \n    FROM Students AS T1 \n    JOIN Student_Course_Registrations AS T2 ON T1.student_id = T2.student_id \n    GROUP BY T1.student_id \n) AS CourseCounts ON S.student_id = CourseCounts.student_id \nWHERE CourseCounts.course_count = (\n    SELECT MAX(course_count) \n    FROM (\n        SELECT COUNT(*) AS course_count \n        FROM Student_Course_Registrations \n        GROUP BY student_id\n    )\n)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    }\n}\n",
        "t_1": "SELECT s.student_id, s.student_details, COUNT(scr.course_id) AS course_count\nFROM Students s\nJOIN Student_Course_Registrations scr ON s.student_id = scr.student_id\nGROUP BY s.student_id, s.student_details\nORDER BY course_count DESC\nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T1.student_id, T1.student_details \nFROM students AS T1 \nJOIN (\n    SELECT T1.student_id, COUNT(*) AS course_count \n    FROM students AS T1 \n    JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id \n    GROUP BY T1.student_id \n) AS T3 ON T1.student_id = T3.student_id \nWHERE T3.course_count = (\n    SELECT MAX(course_count) \n    FROM (\n        SELECT COUNT(*) AS course_count \n        FROM students AS T1 \n        JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id \n        GROUP BY T1.student_id\n    ) AS T4\n);",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    }\n}\n",
        "t_3+": "SELECT s.student_id, p.first_name, p.last_name, COUNT(scr.course_id) AS course_count\nFROM Students s\nJOIN People p ON s.student_id = p.person_id\nJOIN Student_Course_Registrations scr ON s.student_id = scr.student_id\nGROUP BY s.student_id, p.first_name, p.last_name\nORDER BY course_count DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.81",
        "c_low": "SELECT course_name, COUNT(student_id) AS registered_students_count \nFROM (\n    SELECT T1.student_id, T2.course_name \n    FROM Student_Course_Registrations AS T1 \n    JOIN Courses AS T2 ON T1.course_id = T2.course_id\n) AS course_student_list \nGROUP BY course_name;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT C.course_name, COUNT(SCR.student_id) AS registered_students_count \nFROM Courses AS C \nJOIN Student_Course_Registrations AS SCR ON C.course_id = SCR.course_id \nGROUP BY C.course_id \nORDER BY registered_students_count DESC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of students who attended a specific course from the 'Courses' table. The placeholder in the WHERE clause represents the name of the course being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    }\n}\n",
        "c_high": "SELECT C.course_name, COUNT(SCR.student_id) AS registered_students_count \nFROM Courses AS C \nLEFT JOIN Student_Course_Registrations AS SCR ON C.course_id = SCR.course_id \nGROUP BY C.course_id;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Courses.course_name, COUNT(Student_Course_Registrations.student_id) AS registered_students_count\nFROM Courses\nLEFT JOIN Student_Course_Registrations ON Courses.course_id = Student_Course_Registrations.course_id\nGROUP BY Courses.course_name;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T2.course_name, COUNT(T1.student_id) AS registered_students_count \nFROM Student_Course_Registrations AS T1 \nJOIN Courses AS T2 ON T1.course_id = T2.course_id \nGROUP BY T2.course_name;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Courses.course_name, COUNT(Student_Course_Registrations.student_id) AS registered_students_count\nFROM Courses\nLEFT JOIN Student_Course_Registrations ON Courses.course_id = Student_Course_Registrations.course_id\nGROUP BY Courses.course_name;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.82",
        "c_low": "SELECT T2.course_id, COUNT(T1.student_id) AS student_count, T2.course_name \nFROM Student_Course_Registrations AS T1 \nJOIN Courses AS T2 ON T1.course_id = T2.course_id \nGROUP BY T2.course_id, T2.course_name;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT C.course_id, C.course_name, COUNT(SCR.student_id) AS student_count \nFROM Courses AS C \nLEFT JOIN Student_Course_Registrations AS SCR ON C.course_id = SCR.course_id \nGROUP BY C.course_id, C.course_name;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of students who attended a specific course from the 'Courses' table. The placeholder in the WHERE clause represents the name of the course being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    }\n}\n",
        "c_high": "SELECT C.course_id, C.course_name, COUNT(SCR.student_id) AS student_count \nFROM Courses AS C \nLEFT JOIN Student_Course_Registrations AS SCR ON C.course_id = SCR.course_id \nGROUP BY C.course_id, C.course_name;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    }\n}\n",
        "t_1": "SELECT c.course_id, c.course_name, COUNT(scr.student_id) AS student_count\nFROM Courses c\nLEFT JOIN Student_Course_Registrations scr ON c.course_id = scr.course_id\nGROUP BY c.course_id, c.course_name;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT C.course_id, C.course_name, COUNT(SCR.student_id) AS student_count \nFROM Courses AS C \nLEFT JOIN Student_Course_Registrations AS SCR ON C.course_id = SCR.course_id \nGROUP BY C.course_id, C.course_name;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    }\n}\n",
        "t_3+": "SELECT Courses.course_id, COUNT(Student_Course_Registrations.student_id) AS student_count, Courses.course_name\nFROM Courses\nLEFT JOIN Student_Course_Registrations ON Courses.course_id = Student_Course_Registrations.course_id\nGROUP BY Courses.course_id, Courses.course_name;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.89",
        "c_low": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = '301' ORDER BY registration_date DESC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = '301' ORDER BY registration_date DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = '301' ORDER BY registration_date DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Students' table who have not attended any courses. The subquery checks the 'Student_Course_Attendance' table to filter out those students who have registered for and attended courses.\",\n        \"virtual_table\": \"SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\"\n    }\n}\n",
        "t_1": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = '301' ORDER BY registration_date DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = '301' ORDER BY registration_date DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    }\n}\n",
        "t_3+": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = '301' ORDER BY registration_date DESC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.90",
        "c_low": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = '301' ORDER BY registration_date DESC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = '301' ORDER BY registration_date DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = '301' ORDER BY registration_date DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Students' table who have not attended any courses. The subquery checks the 'Student_Course_Attendance' table to filter out those students who have registered for and attended courses.\",\n        \"virtual_table\": \"SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\"\n    }\n}\n",
        "t_1": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = '301' ORDER BY registration_date DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = '301' ORDER BY registration_date DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "t_3+": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = '301' ORDER BY registration_date DESC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.92",
        "c_low": "SELECT DISTINCT T1.city FROM Addresses AS T1 JOIN People_Addresses AS T2 ON T1.address_id = T2.address_id",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique cities from the 'Addresses' table that are associated with people through the 'People_Addresses' table. The placeholder in the JOIN clause represents the relationship between addresses and people.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique cities where students are located, by joining the 'Addresses', 'People_Addresses', and 'Students' tables. The placeholders in the query represent the necessary identifiers for the relationships between these tables.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT city FROM Addresses;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT DISTINCT city FROM Addresses;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT DISTINCT city FROM Addresses;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT DISTINCT T1.city FROM Addresses AS T1 JOIN People_Addresses AS T2 ON T1.address_id = T2.address_id",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique cities from the 'Addresses' table that are associated with people through the 'People_Addresses' table. The placeholder in the JOIN clause represents the relationship between addresses and people.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT T1.city FROM Addresses AS T1 JOIN People_Addresses AS T2 ON T1.address_id = T2.address_id JOIN Students AS T3 ON T2.person_id = T3.student_id",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique cities where students are located, by joining the 'Addresses', 'People_Addresses', and 'Students' tables. The placeholders in the query represent the necessary identifiers for the relationships between these tables.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id\"\n    }\n}\n"
    },
    {
        "sample_id": "train.93",
        "c_low": "SELECT DISTINCT T1.city FROM Addresses AS T1 JOIN People_Addresses AS T2 ON T1.address_id = T2.address_id JOIN Students AS T3 ON T2.person_id = T3.student_id",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique cities where students are located, by joining the 'Addresses', 'People_Addresses', and 'Students' tables. The placeholders in the query represent the necessary identifiers for the relationships between these tables.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique cities from the 'Addresses' table that are associated with people through the 'People_Addresses' table. The placeholder in the JOIN clause represents the relationship between addresses and people.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT a.city\nFROM Addresses a\nJOIN People_Addresses pa ON a.address_id = pa.address_id\nJOIN Students s ON pa.person_id = s.student_id;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT DISTINCT a.city\nFROM Addresses a\nJOIN People_Addresses pa ON a.address_id = pa.address_id\nJOIN Students s ON pa.person_id = s.student_id;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT DISTINCT a.city\nFROM Addresses a\nJOIN People_Addresses pa ON a.address_id = pa.address_id\nJOIN Students s ON pa.person_id = s.student_id;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT DISTINCT T1.city FROM Addresses AS T1 JOIN People_Addresses AS T2 ON T1.address_id = T2.address_id JOIN Students AS T3 ON T2.person_id = T3.student_id",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique cities from the 'Addresses' table that are associated with people through the 'People_Addresses' table. The placeholder in the JOIN clause represents the relationship between addresses and people.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT T1.city FROM Addresses AS T1 JOIN People_Addresses AS T2 ON T1.address_id = T2.address_id JOIN Students AS T3 ON T2.person_id = T3.student_id",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique cities where students are located, by joining the 'Addresses', 'People_Addresses', and 'Students' tables. The placeholders in the query represent the necessary identifiers for the relationships between these tables.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id\"\n    }\n}\n"
    },
    {
        "sample_id": "train.103",
        "c_low": "SELECT S.student_id, P.first_name, P.middle_name, P.last_name, SC.course_name \nFROM (SELECT T1.student_id, T2.course_name \n      FROM Student_Course_Registrations AS T1 \n      JOIN Courses AS T2 ON T1.course_id = T2.course_id) AS S \nLEFT JOIN Student_Course_Attendance AS A ON S.student_id = A.student_id \nLEFT JOIN People AS P ON S.student_id = P.person_id \nWHERE A.course_id IS NULL;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT S.student_id, S.student_details \nFROM Students AS S \nJOIN Student_Course_Registrations AS R ON S.student_id = R.student_id \nLEFT JOIN Student_Course_Attendance AS A ON R.student_id = A.student_id AND R.course_id = A.course_id \nWHERE A.student_id IS NULL;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT S.student_id, S.student_details \nFROM Students S \nWHERE S.student_id IN (SELECT student_id FROM Student_Course_Registrations) \nAND S.student_id NOT IN (SELECT student_id FROM Student_Course_Attendance);",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Students' table who have not attended any courses. The subquery checks the 'Student_Course_Attendance' table to filter out those students who have registered for and attended courses.\",\n        \"virtual_table\": \"SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    }\n}\n",
        "t_1": "SELECT s.student_id, s.student_details \nFROM Students s \nJOIN Student_Course_Registrations scr ON s.student_id = scr.student_id \nLEFT JOIN Student_Course_Attendance sca ON scr.student_id = sca.student_id AND scr.course_id = sca.course_id \nWHERE sca.student_id IS NULL;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT * FROM Students WHERE student_id IN (SELECT student_id FROM Student_Course_Registrations) AND student_id NOT IN (SELECT student_id FROM Student_Course_Attendance)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Students' table who have not attended any courses. The subquery checks the 'Student_Course_Attendance' table to filter out those students who have registered for and attended courses.\",\n        \"virtual_table\": \"SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "t_3+": "SELECT s.student_id, s.student_details \nFROM Students s \nJOIN Student_Course_Registrations scr ON s.student_id = scr.student_id \nLEFT JOIN Student_Course_Attendance sca ON scr.student_id = sca.student_id AND scr.course_id = sca.course_id \nWHERE sca.student_id IS NULL;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.104",
        "c_low": "SELECT S.student_id, P.first_name, P.middle_name, P.last_name, S.student_details \nFROM Students AS S \nJOIN People AS P ON S.student_id = P.person_id \nWHERE S.student_id NOT IN (\n    SELECT DISTINCT SC.student_id \n    FROM Student_Course_Attendance AS SC\n)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT s.student_id, s.student_details \nFROM Students s \nLEFT JOIN Student_Course_Registrations r ON s.student_id = r.student_id \nLEFT JOIN Student_Course_Attendance a ON r.student_id = a.student_id AND r.course_id = a.course_id \nWHERE a.student_id IS NULL;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT * FROM Students WHERE student_id NOT IN (SELECT student_id FROM Student_Course_Attendance)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Students' table who have not attended any courses. The subquery checks the 'Student_Course_Attendance' table to filter out those students who have registered for and attended courses.\",\n        \"virtual_table\": \"SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    }\n}\n",
        "t_1": "SELECT s.student_id, s.student_details \nFROM Students s \nLEFT JOIN Student_Course_Registrations scr ON s.student_id = scr.student_id \nLEFT JOIN Student_Course_Attendance sca ON scr.student_id = sca.student_id AND scr.course_id = sca.course_id \nWHERE sca.student_id IS NULL;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT * FROM Students WHERE student_id NOT IN (SELECT student_id FROM Student_Course_Attendance)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Students' table who have not attended any courses. The subquery checks the 'Student_Course_Attendance' table to filter out those students who have registered for and attended courses.\",\n        \"virtual_table\": \"SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT s.student_id, s.student_details \nFROM Students s \nLEFT JOIN Student_Course_Registrations scr ON s.student_id = scr.student_id \nLEFT JOIN Student_Course_Attendance sca ON scr.student_id = sca.student_id AND scr.course_id = sca.course_id \nWHERE scr.student_id IS NOT NULL AND sca.student_id IS NULL;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.105",
        "c_low": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = (SELECT course_id FROM Courses WHERE course_name = 'Statistics') ORDER BY registration_date;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = (SELECT course_id FROM Courses WHERE course_name = 'Statistics') ORDER BY registration_date;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = (SELECT course_id FROM Courses WHERE course_name = 'Statistics') ORDER BY registration_date;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Students' table who have not attended any courses. The subquery checks the 'Student_Course_Attendance' table to filter out those students who have registered for and attended courses.\",\n        \"virtual_table\": \"SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\"\n    }\n}\n",
        "t_1": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = 'statistics' ORDER BY registration_date;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = (SELECT course_id FROM Courses WHERE course_name = 'Statistics') ORDER BY registration_date;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = (SELECT course_id FROM Courses WHERE course_name = 'Statistics') ORDER BY registration_date;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.106",
        "c_low": "SELECT student_id FROM (SELECT T1.student_id, T2.course_name FROM Student_Course_Registrations AS T1 JOIN Courses AS T2 ON T1.course_id = T2.course_id) WHERE course_name = 'Statistics' ORDER BY registration_date;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = (SELECT course_id FROM Courses WHERE course_name = 'Statistics') ORDER BY registration_date;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = (SELECT course_id FROM Courses WHERE course_name = 'Statistics') ORDER BY registration_date;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Students' table who have not attended any courses. The subquery checks the 'Student_Course_Attendance' table to filter out those students who have registered for and attended courses.\",\n        \"virtual_table\": \"SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    }\n}\n",
        "t_1": "SELECT scr.student_id \nFROM Student_Course_Registrations scr \nJOIN Courses c ON scr.course_id = c.course_id \nWHERE c.course_name = 'Statistics' \nORDER BY scr.registration_date;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT student_id FROM Student_Course_Registrations AS T1 JOIN Courses AS T2 ON T1.course_id = T2.course_id WHERE T2.course_name = 'Statistics' ORDER BY T1.registration_date;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "t_3+": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = (SELECT course_id FROM Courses WHERE course_name = 'Statistics') ORDER BY registration_date;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.123",
        "c_low": "SELECT zip_code, AVG(mean_temperature_f) AS average_mean_temperature\nFROM weather\nWHERE strftime('%m', date) = '08'\nGROUP BY zip_code;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the date and the temperature range (difference between maximum and minimum temperatures) from the 'weather' table, ordered by the temperature range. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT zip_code, AVG(mean_temperature_f) AS average_mean_temperature\nFROM weather\nWHERE strftime('%m', date) = '08'\nGROUP BY zip_code;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT zip_code, avg(mean_temperature_f) FROM weather WHERE date LIKE '2023-08%' GROUP BY zip_code",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average number of bikes available at stations that are not located in a specific city. The placeholder in the WHERE clause represents the name of the city to exclude from the average calculation.\",\n        \"virtual_table\": \"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "t_1": "SELECT zip_code, avg(mean_temperature_f) AS average_mean_temperature\nFROM weather\nWHERE date LIKE '2023-08%'\nGROUP BY zip_code;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT zip_code, AVG(mean_temperature_f) AS average_mean_temperature\nFROM weather\nWHERE date BETWEEN '2023-08-01' AND '2023-08-31'\nGROUP BY zip_code;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the average number of bikes available at stations that are not located in a specific city. The placeholder in the WHERE clause represents the name of the city to exclude from the average calculation.\",\n        \"virtual_table\": \"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "t_3+": "SELECT zip_code, AVG(mean_temperature_f) AS average_mean_temperature\nFROM weather\nWHERE strftime('%m', date) = '08'\nGROUP BY zip_code;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.133",
        "c_low": "SELECT start_station_name, start_station_id\nFROM trip\nWHERE strftime('%m', start_date) = '08'\nGROUP BY start_station_id, start_station_name\nORDER BY COUNT(*) DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT start_station_name, start_station_id FROM trip WHERE strftime('%Y-%m', start_date) >= '2023-08' GROUP BY start_station_id ORDER BY COUNT(*) DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique bike stations that currently have a certain number of bikes available. The query joins the 'station' table with the 'status' table to filter stations based on their bike availability, using a placeholder for the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT start_station_name, start_station_id FROM trip WHERE start_date >= '2023-08-01' GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the unique station IDs from the 'station' table located in a specific city. It intersects with the 'status' table to find stations that have an average number of available bikes greater than a specified threshold. The placeholders in the WHERE and HAVING clauses represent the city name and the minimum average bikes available, respectively.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT start_station_id, start_station_name \nFROM trip \nWHERE start_date >= '2023-08-01' \nGROUP BY start_station_id, start_station_name \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT start_station_name, start_station_id FROM trip WHERE start_date >= '2023-08-01' GROUP BY start_station_id ORDER BY COUNT(*) DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT start_station_name, start_station_id\nFROM trip\nWHERE strftime('%m', start_date) = '08'\nGROUP BY start_station_id, start_station_name\nORDER BY COUNT(*) DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.134",
        "c_low": "SELECT start_station_name, start_station_id \nFROM trip \nWHERE strftime('%Y-%m', start_date) = '2023-08' \nGROUP BY start_station_name, start_station_id \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT start_station_name, start_station_id \nFROM trip \nWHERE strftime('%Y-%m', start_date) = '2023-08' \nGROUP BY start_station_id \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique bike stations that currently have a certain number of bikes available. The query joins the 'station' table with the 'status' table to filter stations based on their bike availability, using a placeholder for the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT start_station_id, start_station_name \nFROM trip \nWHERE strftime('%Y-%m', start_date) = '2023-08' \nGROUP BY start_station_id, start_station_name \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the unique station IDs from the 'station' table located in a specific city. It intersects with the 'status' table to find stations that have an average number of available bikes greater than a specified threshold. The placeholders in the WHERE and HAVING clauses represent the city name and the minimum average bikes available, respectively.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT start_station_name, start_station_id \nFROM trip \nWHERE strftime('%Y-%m', start_date) = '2023-08' \nGROUP BY start_station_id, start_station_name \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_2": "SELECT start_station_name, start_station_id \nFROM trip \nWHERE strftime('%Y-%m', start_date) = '2023-08' \nGROUP BY start_station_id \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT start_station_name, start_station_id \nFROM trip \nWHERE strftime('%Y-%m', start_date) = '2023-08' \nGROUP BY start_station_name, start_station_id \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.135",
        "c_low": "SELECT bike_id, COUNT(*) as trip_count \nFROM trip \nWHERE zip_code = '94002' \nGROUP BY bike_id \nORDER BY trip_count DESC \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT bike_id, COUNT(*) as trip_count \nFROM trip \nWHERE zip_code = '94002' \nGROUP BY bike_id \nORDER BY trip_count DESC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique bike stations that currently have a certain number of bikes available. The query joins the 'station' table with the 'status' table to filter stations based on their bike availability, using a placeholder for the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT bike_id, COUNT(*) as trip_count \nFROM trip \nWHERE zip_code = '94002' \nGROUP BY bike_id \nORDER BY trip_count DESC \nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the average number of bikes available at stations that are not located in a specific city. The placeholder in the WHERE clause represents the name of the city to exclude from the average calculation.\",\n        \"virtual_table\": \"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT bike_id, COUNT(*) as trip_count \nFROM trip \nWHERE zip_code = '94002' \nGROUP BY bike_id \nORDER BY trip_count DESC \nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT bike_id, COUNT(*) as trip_count \nFROM trip \nWHERE zip_code = '94002' \nGROUP BY bike_id \nORDER BY trip_count DESC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the average number of bikes available at stations that are not located in a specific city. The placeholder in the WHERE clause represents the name of the city to exclude from the average calculation.\",\n        \"virtual_table\": \"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT bike_id, COUNT(*) AS trip_count\nFROM trip\nWHERE zip_code = '94002'\nGROUP BY bike_id\nORDER BY trip_count DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.136",
        "c_low": "SELECT bike_id FROM trip WHERE zip_code = '94002' ORDER BY duration DESC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT bike_id FROM trip WHERE zip_code = '94002' GROUP BY bike_id ORDER BY SUM(duration) DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique bike stations that currently have a certain number of bikes available. The query joins the 'station' table with the 'status' table to filter stations based on their bike availability, using a placeholder for the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT bike_id FROM trip WHERE zip_code = '94002' ORDER BY duration DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the average number of bikes available at stations that are not located in a specific city. The placeholder in the WHERE clause represents the name of the city to exclude from the average calculation.\",\n        \"virtual_table\": \"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the unique station IDs from the 'station' table located in a specific city. It intersects with the 'status' table to find stations that have an average number of available bikes greater than a specified threshold. The placeholders in the WHERE and HAVING clauses represent the city name and the minimum average bikes available, respectively.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT bike_id FROM trip WHERE zip_code = '94002' ORDER BY duration DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT bike_id FROM trip WHERE zip_code = '94002' ORDER BY duration DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique bike stations that currently have a certain number of bikes available. The query joins the 'station' table with the 'status' table to filter stations based on their bike availability, using a placeholder for the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT bike_id\nFROM trip\nWHERE zip_code = '94002'\nORDER BY duration DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.137",
        "c_low": "SELECT COUNT(*) FROM weather WHERE mean_humidity > 50 AND mean_visibility > 8;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the date and the temperature range (difference between maximum and minimum temperatures) from the 'weather' table, ordered by the temperature range. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT COUNT(*) FROM weather WHERE mean_humidity > 50 AND mean_visibility > 8;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT COUNT(*) FROM weather WHERE mean_humidity > 50 AND mean_visibility_miles > 8;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    }\n}\n",
        "t_1": "SELECT COUNT(*) FROM weather WHERE mean_humidity > 50 AND mean_visibility_miles > 8;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    }\n}\n",
        "t_2": "SELECT COUNT(*) \nFROM weather \nWHERE mean_humidity > 50 AND mean_visibility > 8;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT COUNT(*) \nFROM weather \nWHERE mean_humidity > 50 AND mean_visibility > 8;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.142",
        "c_low": "SELECT s.id FROM station s JOIN status st ON s.id = st.station_id WHERE s.city = 'San Francisco' AND st.bikes_available > 10;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T1.city = 'San Francisco' AND T2.bikes_available > 10",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique bike stations that currently have a certain number of bikes available. The query joins the 'station' table with the 'status' table to filter stations based on their bike availability, using a placeholder for the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average longitude of bike stations from the 'station' table that do not have the maximum number of available bikes reported in the 'status' table. The placeholder in the HAVING clause represents a numeric value for filtering the bike availability.\",\n        \"virtual_table\": \"SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT id FROM station WHERE city = 'San Francisco' INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available) > 10",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the unique station IDs from the 'station' table located in a specific city. It intersects with the 'status' table to find stations that have an average number of available bikes greater than a specified threshold. The placeholders in the WHERE and HAVING clauses represent the city name and the minimum average bikes available, respectively.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT s.id FROM station s JOIN status st ON s.id = st.station_id WHERE s.city = 'San Francisco' AND st.bikes_available > 10;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T1.city = 'San Francisco' GROUP BY T1.id HAVING avg(T2.bikes_available) > 10",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT s.id \nFROM station s \nJOIN status st ON s.id = st.station_id \nWHERE s.city = 'San Francisco' \nAND st.bikes_available > 10;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.143",
        "c_low": "SELECT s.name, s.id \nFROM station s \nJOIN status st ON s.id = st.station_id \nGROUP BY s.id \nHAVING AVG(st.bikes_available) > 14 OR strftime('%m', s.installation_date) = '12'",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT T1.id, T1.name \nFROM station AS T1 \nLEFT JOIN status AS T2 ON T1.id = T2.station_id \nGROUP BY T1.id, T1.name \nHAVING AVG(T2.bikes_available) > 14 OR strftime('%m', T1.installation_date) = '12'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique bike stations that currently have a certain number of bikes available. The query joins the 'station' table with the 'status' table to filter stations based on their bike availability, using a placeholder for the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average longitude of bike stations from the 'station' table that do not have the maximum number of available bikes reported in the 'status' table. The placeholder in the HAVING clause represents a numeric value for filtering the bike availability.\",\n        \"virtual_table\": \"SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT id, name FROM station WHERE id IN (SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available) > 14) OR installation_date LIKE '%-12-%';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the unique station IDs from the 'station' table located in a specific city. It intersects with the 'status' table to find stations that have an average number of available bikes greater than a specified threshold. The placeholders in the WHERE and HAVING clauses represent the city name and the minimum average bikes available, respectively.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT s.name, s.id \nFROM station s \nJOIN status st ON s.id = st.station_id \nGROUP BY s.id, s.name \nHAVING AVG(st.bikes_available) > 14 OR strftime('%m', s.installation_date) = '12';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT id, name FROM station WHERE id IN (SELECT T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available) > 14) OR installation_date LIKE '%-12-%';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT name, id \nFROM station \nWHERE id IN (\n    SELECT station_id \n    FROM status \n    GROUP BY station_id \n    HAVING AVG(bikes_available) > 14\n) OR installation_date LIKE '%-12-%';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.144",
        "c_low": "SELECT s.name, s.id \nFROM station s \nJOIN status st ON s.id = st.station_id \nGROUP BY s.id \nHAVING AVG(st.bikes_available) > 14 \nOR s.installation_date LIKE '%-12-%';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT T1.id, T1.name \nFROM station AS T1 \nJOIN status AS T2 ON T1.id = T2.station_id \nGROUP BY T1.id, T1.name \nHAVING AVG(T2.bikes_available) > 14 OR \n       strftime('%m', T1.installation_date) = '12'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique bike stations that currently have a certain number of bikes available. The query joins the 'station' table with the 'status' table to filter stations based on their bike availability, using a placeholder for the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average longitude of bike stations from the 'station' table that do not have the maximum number of available bikes reported in the 'status' table. The placeholder in the HAVING clause represents a numeric value for filtering the bike availability.\",\n        \"virtual_table\": \"SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT id, name FROM station WHERE id IN (SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available) > 14) OR installation_date LIKE '%-12-%';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the unique station IDs from the 'station' table located in a specific city. It intersects with the 'status' table to find stations that have an average number of available bikes greater than a specified threshold. The placeholders in the WHERE and HAVING clauses represent the city name and the minimum average bikes available, respectively.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT s.name, s.id \nFROM station s \nJOIN status st ON s.id = st.station_id \nGROUP BY s.id, s.name \nHAVING AVG(st.bikes_available) > 14 OR strftime('%m', s.installation_date) = '12';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT T1.id, T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T1.id HAVING avg(T2.bikes_available) > 14 UNION SELECT T1.id, T1.name FROM station AS T1 WHERE strftime('%m', T1.installation_date) = '12'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique bike stations that currently have a certain number of bikes available. The query joins the 'station' table with the 'status' table to filter stations based on their bike availability, using a placeholder for the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT s.name, s.id \nFROM station s \nJOIN status st ON s.id = st.station_id \nGROUP BY s.id \nHAVING AVG(st.bikes_available) > 14 \n   OR s.installation_date LIKE '%-12-%';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.145",
        "c_low": "SELECT cloud_cover, COUNT(cloud_cover) AS count\nFROM weather\nWHERE zip_code = 94107\nGROUP BY cloud_cover\nORDER BY count DESC\nLIMIT 3;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT cloud_cover, COUNT(cloud_cover) as count\nFROM weather\nWHERE zip_code = 94107\nGROUP BY cloud_cover\nORDER BY count DESC\nLIMIT 3;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT cloud_cover, COUNT(cloud_cover) as count FROM weather WHERE zip_code = 94107 GROUP BY cloud_cover ORDER BY count DESC LIMIT 3;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    }\n}\n",
        "t_1": "SELECT cloud_cover, COUNT(cloud_cover) as count FROM weather WHERE zip_code = 94107 GROUP BY cloud_cover ORDER BY count DESC LIMIT 3;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    }\n}\n",
        "t_2": "SELECT cloud_cover, COUNT(cloud_cover) AS frequency\nFROM weather\nWHERE zip_code = 94107\nGROUP BY cloud_cover\nORDER BY frequency DESC\nLIMIT 3;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT cloud_cover, COUNT(cloud_cover) AS count\nFROM weather\nWHERE zip_code = 94107\nGROUP BY cloud_cover\nORDER BY count DESC\nLIMIT 3;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.146",
        "c_low": "SELECT cloud_cover, COUNT(cloud_cover) AS count\nFROM weather\nWHERE zip_code = 94107\nGROUP BY cloud_cover\nORDER BY count DESC\nLIMIT 3;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT cloud_cover, COUNT(cloud_cover) as count\nFROM weather\nWHERE zip_code = 94107\nGROUP BY cloud_cover\nORDER BY count DESC\nLIMIT 3;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT cloud_cover, COUNT(cloud_cover) as cover_count \nFROM weather \nWHERE zip_code = 94107 \nGROUP BY cloud_cover \nORDER BY cover_count DESC \nLIMIT 3;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    }\n}\n",
        "t_1": "SELECT cloud_cover, COUNT(cloud_cover) as count FROM weather WHERE zip_code = 94107 GROUP BY cloud_cover ORDER BY count DESC LIMIT 3;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    }\n}\n",
        "t_2": "SELECT cloud_cover, COUNT(cloud_cover) AS count\nFROM weather\nWHERE zip_code = 94107\nGROUP BY cloud_cover\nORDER BY count DESC\nLIMIT 3;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT cloud_cover, COUNT(cloud_cover) AS cover_count\nFROM weather\nWHERE zip_code = 94107\nGROUP BY cloud_cover\nORDER BY cover_count DESC\nLIMIT 3;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.153",
        "c_low": "SELECT zip_code, date FROM weather WHERE max_temperature_f = 80",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the date and the temperature range (difference between maximum and minimum temperatures) from the 'weather' table, ordered by the temperature range. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT date, zip_code FROM weather WHERE max_temperature_f = 80",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT zip_code, date FROM weather WHERE max_temperature_f = 80",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT zip_code, date FROM weather WHERE max_temperature_f = 80",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_2": "SELECT date, zip_code \nFROM weather \nWHERE max_temperature_f = 80;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT date, zip_code \nFROM weather \nWHERE max_temperature_f = 80;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.154",
        "c_low": "SELECT DISTINCT s.zip_code, w.date \nFROM station s \nJOIN status st ON s.id = st.station_id \nJOIN weather w ON w.zip_code = s.city \nWHERE w.max_temperature_f >= 80;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the date and the temperature range (difference between maximum and minimum temperatures) from the 'weather' table, ordered by the temperature range. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT w.zip_code, w.date \nFROM weather w \nJOIN station s ON s.city = (SELECT city FROM station WHERE id = s.id) \nWHERE w.max_temperature_f >= 80;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT s.city, w.zip_code, w.date FROM weather w JOIN station s ON s.city = w.zip_code WHERE w.max_temperature_f >= 80",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT zip_code, date FROM weather WHERE max_temperature_f >= 80",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT zip_code, date FROM weather WHERE max_temperature_f >= 80",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT w.zip_code, w.date\nFROM weather w\nJOIN station s ON s.city = w.zip_code\nWHERE w.max_temperature_f >= 80;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.155",
        "c_low": "SELECT trip.id FROM trip JOIN weather ON trip.zip_code = weather.zip_code WHERE weather.mean_temperature_f > 60;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the date and the temperature range (difference between maximum and minimum temperatures) from the 'weather' table, ordered by the temperature range. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT id FROM trip WHERE zip_code IN (SELECT zip_code FROM weather WHERE mean_temperature_f > 60)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT id FROM trip WHERE zip_code IN (SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_temperature_f) > 60)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT id FROM trip WHERE zip_code IN (SELECT zip_code FROM weather WHERE avg(mean_temperature_f) > 60 GROUP BY zip_code)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_2": "SELECT trip.id \nFROM trip \nJOIN weather ON trip.zip_code = weather.zip_code \nWHERE weather.mean_temperature_f > 60;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT trip.id \nFROM trip \nJOIN weather ON trip.zip_code = weather.zip_code \nWHERE weather.mean_temperature_f > 60;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.156",
        "c_low": "SELECT trip.id\nFROM trip\nJOIN weather ON trip.start_date LIKE '%' || weather.date || '%'\nWHERE weather.mean_temperature_f > 60;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the date and the temperature range (difference between maximum and minimum temperatures) from the 'weather' table, ordered by the temperature range. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT id FROM trip WHERE start_date IN (SELECT start_date FROM trip WHERE zip_code IN (SELECT zip_code FROM weather WHERE mean_temperature_f > 60))",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT trip.id FROM trip JOIN (SELECT zip_code, avg(mean_temperature_f) as avg_temp FROM weather GROUP BY zip_code) as temp ON trip.zip_code = temp.zip_code WHERE temp.avg_temp > 60;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT id FROM trip WHERE zip_code IN (SELECT zip_code FROM weather WHERE avg(mean_temperature_f) > 60 GROUP BY zip_code)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT trip.id FROM trip JOIN weather ON trip.start_date = weather.date WHERE weather.mean_temperature_f > 60;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT trip.id\nFROM trip\nJOIN weather ON trip.start_date LIKE '%' || weather.date || '%'\nWHERE weather.mean_temperature_f > 60;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.160",
        "c_low": "SELECT w1.date, w1.zip_code \nFROM weather w1 \nWHERE w1.min_dew_point_f < (\n    SELECT MIN(w2.min_dew_point_f) \n    FROM weather w2 \n    WHERE w2.zip_code = 94107\n) \nAND w1.zip_code IS NOT NULL;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the date and the temperature range (difference between maximum and minimum temperatures) from the 'weather' table, ordered by the temperature range. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT date, zip_code FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT w1.zip_code, w1.min_dew_point_f \nFROM weather w1 \nWHERE w1.min_dew_point_f < (\n    SELECT MIN(w2.min_dew_point_f) \n    FROM weather w2 \n    WHERE w2.zip_code = 94107\n) \nGROUP BY w1.zip_code;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT date, zip_code FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT w.zip_code \nFROM weather w \nWHERE w.min_dew_point_f < (SELECT MIN(min_dew_point_f) FROM weather WHERE zip_code = 94107) \nGROUP BY w.zip_code;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT w.zip_code \nFROM weather w \nWHERE w.min_dew_point_f < (SELECT MIN(min_dew_point_f) FROM weather WHERE zip_code = 94107) \nGROUP BY w.zip_code;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.161",
        "c_low": "SELECT t.end_station_id, s.installation_date\nFROM trip t\nJOIN station s ON t.end_station_id = s.id;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT end_station_id, installation_date FROM trip JOIN station ON trip.end_station_id = station.id",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT s.installation_date FROM trip t JOIN station s ON t.end_station_id = s.id;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT s.installation_date \nFROM trip t \nJOIN station s ON t.end_station_id = s.id;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_2": "SELECT s.installation_date FROM trip t JOIN station s ON t.end_station_id = s.id;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT t.end_station_id, s.installation_date\nFROM trip t\nJOIN station s ON t.end_station_id = s.id;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.162",
        "c_low": "SELECT s.name AS end_station_name, s.installation_date \nFROM trip t \nJOIN station s ON t.end_station_id = s.id;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT s.installation_date FROM trip t JOIN station s ON t.end_station_id = s.id;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT s.installation_date \nFROM station s \nJOIN trip t ON s.id = t.end_station_id \nGROUP BY s.id;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT station.installation_date FROM station JOIN trip ON station.id = trip.end_station_id;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT s.installation_date \nFROM station s \nJOIN trip t ON s.id = t.end_station_id;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT s.name AS end_station_name, s.installation_date \nFROM trip t \nJOIN station s ON t.end_station_id = s.id;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.163",
        "c_low": "SELECT trip.id \nFROM trip \nJOIN station ON trip.start_station_id = station.id \nWHERE station.dock_count = (SELECT MAX(dock_count) FROM station);",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT trip.id FROM trip JOIN station ON trip.start_station_id = station.id WHERE station.dock_count = (SELECT MAX(dock_count) FROM station);",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT trip.id FROM trip JOIN station ON trip.start_station_id = station.id ORDER BY station.dock_count DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT id FROM trip WHERE start_station_id = (SELECT id FROM station ORDER BY dock_count DESC LIMIT 1)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_2": "SELECT trip.id FROM trip JOIN station ON trip.start_station_id = station.id ORDER BY station.dock_count DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT trip.id \nFROM trip \nJOIN station ON trip.start_station_id = station.id \nWHERE station.dock_count = (SELECT MAX(dock_count) FROM station);",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.164",
        "c_low": "SELECT trip.id \nFROM trip \nJOIN station ON trip.start_station_id = station.id \nWHERE station.dock_count = (SELECT MAX(dock_count) FROM station);",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT id FROM trip WHERE start_station_id = (SELECT id FROM station ORDER BY dock_count DESC LIMIT 1)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique bike stations that currently have a certain number of bikes available. The query joins the 'station' table with the 'status' table to filter stations based on their bike availability, using a placeholder for the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT id FROM trip WHERE start_station_id = (SELECT id FROM station ORDER BY dock_count DESC LIMIT 1)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the unique station IDs from the 'station' table located in a specific city. It intersects with the 'status' table to find stations that have an average number of available bikes greater than a specified threshold. The placeholders in the WHERE and HAVING clauses represent the city name and the minimum average bikes available, respectively.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT id FROM trip WHERE start_station_id = (SELECT id FROM station ORDER BY dock_count DESC LIMIT 1)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_2": "SELECT id FROM trip WHERE start_station_id = (SELECT id FROM station ORDER BY dock_count DESC LIMIT 1)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT trip.id \nFROM trip \nJOIN station ON trip.start_station_id = station.id \nWHERE station.dock_count = (SELECT MAX(dock_count) FROM station);",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.165",
        "c_low": "SELECT COUNT(*) AS trip_count \nFROM trip \nWHERE end_station_name NOT IN (SELECT name FROM station WHERE city = 'San Francisco');",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 ON T1.id = T2.start_station_id AND T3.id = T2.end_station_id WHERE T1.city != 'San Francisco' AND T3.city != 'San Francisco'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT COUNT(*) FROM trip WHERE end_station_name NOT IN (SELECT name FROM station WHERE city = 'San Francisco')",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the average number of bikes available at stations that are not located in a specific city. The placeholder in the WHERE clause represents the name of the city to exclude from the average calculation.\",\n        \"virtual_table\": \"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "t_1": "SELECT COUNT(*) AS trip_count \nFROM trip \nWHERE end_station_name NOT IN (SELECT name FROM station WHERE city = 'San Francisco');",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT count(*) FROM trip WHERE end_station_id NOT IN (SELECT id FROM station WHERE city = 'San Francisco')",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average number of bikes available at stations that are not located in a specific city. The placeholder in the WHERE clause represents the name of the city to exclude from the average calculation.\",\n        \"virtual_table\": \"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(*) AS trip_count \nFROM trip \nWHERE end_station_name NOT IN (SELECT name FROM station WHERE city = 'San Francisco');",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.166",
        "c_low": "SELECT COUNT(*) AS trip_count \nFROM trip \nWHERE end_station_name != 'San Francisco';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id WHERE T2.city != 'San Francisco'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT COUNT(*) FROM trip WHERE end_station_name != 'San Francisco'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the average number of bikes available at stations that are not located in a specific city. The placeholder in the WHERE clause represents the name of the city to exclude from the average calculation.\",\n        \"virtual_table\": \"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "t_1": "SELECT COUNT(*) FROM trip WHERE end_station_name != 'San Francisco';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_2": "SELECT count(*) FROM trip WHERE end_station_name != 'San Francisco'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average number of bikes available at stations that are not located in a specific city. The placeholder in the WHERE clause represents the name of the city to exclude from the average calculation.\",\n        \"virtual_table\": \"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(*) AS trip_count \nFROM trip \nWHERE end_station_name != 'San Francisco';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.167",
        "c_low": "SELECT date FROM weather WHERE zip_code = 94107 AND events NOT LIKE '%Fog%' AND events NOT LIKE '%Rain%';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT date FROM weather WHERE zip_code = 94107 AND events NOT LIKE '%Fog%' AND events NOT LIKE '%Rain%';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT date FROM weather WHERE zip_code = 94107 AND events NOT LIKE '%Fog%' AND events NOT LIKE '%Rain%'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average number of bikes available at stations that are not located in a specific city. The placeholder in the WHERE clause represents the name of the city to exclude from the average calculation.\",\n        \"virtual_table\": \"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "t_1": "SELECT date FROM weather WHERE zip_code = 94107 AND events NOT LIKE '%Fog%' AND events NOT LIKE '%Rain%';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT date FROM weather WHERE zip_code = 94107 AND events NOT LIKE '%Fog%' AND events NOT LIKE '%Rain%';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the average number of bikes available at stations that are not located in a specific city. The placeholder in the WHERE clause represents the name of the city to exclude from the average calculation.\",\n        \"virtual_table\": \"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT date FROM weather WHERE zip_code = 94107 AND events NOT LIKE '%Fog%' AND events NOT LIKE '%Rain%';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.168",
        "c_low": "SELECT date FROM weather WHERE zip_code = 94107 AND events NOT LIKE '%fog%' AND events NOT LIKE '%rain%';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT date FROM weather WHERE zip_code = 94107 AND events IS NULL AND precipitation_inches = 0",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT date FROM weather WHERE zip_code = 94107 AND precipitation_inches = 0 AND events NOT LIKE '%fog%'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average number of bikes available at stations that are not located in a specific city. The placeholder in the WHERE clause represents the name of the city to exclude from the average calculation.\",\n        \"virtual_table\": \"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "t_1": "SELECT date FROM weather WHERE zip_code = 94107 AND precipitation_inches = 0 AND events = 0",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT date FROM weather WHERE zip_code = 94107 AND precipitation_inches = 0 AND events NOT LIKE '%fog%'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the average number of bikes available at stations that are not located in a specific city. The placeholder in the WHERE clause represents the name of the city to exclude from the average calculation.\",\n        \"virtual_table\": \"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT date FROM weather WHERE zip_code = 94107 AND events NOT LIKE '%fog%' AND events NOT LIKE '%rain%';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.172",
        "c_low": "SELECT s.name \nFROM station s \nJOIN status st ON s.id = st.station_id \nWHERE st.bikes_available > 10 \nAND s.city != 'San Jose';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available > 10 AND T1.city != 'San Jose'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique bike stations that currently have a certain number of bikes available. The query joins the 'station' table with the 'status' table to filter stations based on their bike availability, using a placeholder for the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average longitude of bike stations from the 'station' table that do not have the maximum number of available bikes reported in the 'status' table. The placeholder in the HAVING clause represents a numeric value for filtering the bike availability.\",\n        \"virtual_table\": \"SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available) > 10 EXCEPT SELECT name FROM station WHERE city = 'San Jose'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average number of bikes available at stations that are not located in a specific city. The placeholder in the WHERE clause represents the name of the city to exclude from the average calculation.\",\n        \"virtual_table\": \"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "t_1": "SELECT s.name \nFROM station s \nJOIN status st ON s.id = st.station_id \nWHERE st.bikes_available > 10 \nAND s.city != 'San Jose';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available > 10 AND T1.city != 'San Jose'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT name FROM station s JOIN status st ON s.id = st.station_id WHERE st.bikes_available > 10 AND s.city != 'San Jose';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.183",
        "c_low": "SELECT city, MAX(lat) as highest_latitude \nFROM station \nGROUP BY city \nORDER BY highest_latitude DESC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT city, MAX(lat) AS highest_latitude\nFROM station\nGROUP BY city\nORDER BY highest_latitude DESC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT city, MAX(lat) as highest_latitude \nFROM station \nGROUP BY city \nORDER BY highest_latitude DESC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT city, MAX(lat) as highest_latitude \nFROM station \nGROUP BY city \nORDER BY highest_latitude DESC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT city, MAX(lat) AS highest_latitude\nFROM station\nGROUP BY city\nORDER BY highest_latitude DESC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT city, MAX(lat) AS highest_latitude\nFROM station\nGROUP BY city\nORDER BY highest_latitude DESC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.184",
        "c_low": "SELECT city, name FROM station WHERE lat = (SELECT MAX(lat) FROM station GROUP BY city) ORDER BY lat DESC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT city, name FROM station ORDER BY lat DESC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT name FROM station WHERE city IS NOT NULL ORDER BY lat DESC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT city, name FROM station WHERE lat = (SELECT MAX(lat) FROM station GROUP BY city) ORDER BY lat DESC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT city, name FROM station ORDER BY lat DESC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT city, name FROM station ORDER BY CAST(lat AS REAL) DESC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.188",
        "c_low": "SELECT id, duration FROM trip ORDER BY duration DESC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT id, duration FROM trip ORDER BY duration DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT id, duration FROM trip ORDER BY duration DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT id, duration FROM trip ORDER BY duration DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_2": "SELECT id, duration FROM trip ORDER BY duration DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT id, duration FROM trip ORDER BY duration DESC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.189",
        "c_low": "SELECT s.long, AVG(t.duration) AS average_duration\nFROM station s\nJOIN trip t ON s.id = t.start_station_id\nGROUP BY s.id, s.long;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT s.long, AVG(t.duration) AS average_duration\nFROM station s\nJOIN trip t ON s.id = t.start_station_id\nGROUP BY s.id;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the average longitude of bike stations from the 'station' table that do not have the maximum number of available bikes reported in the 'status' table. The placeholder in the HAVING clause represents a numeric value for filtering the bike availability.\",\n        \"virtual_table\": \"SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT s.long, AVG(t.duration) AS average_duration\nFROM station s\nJOIN trip t ON s.id = t.start_station_id\nGROUP BY s.id, s.long;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the average number of bikes available at stations that are not located in a specific city. The placeholder in the WHERE clause represents the name of the city to exclude from the average calculation.\",\n        \"virtual_table\": \"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the unique station IDs from the 'station' table located in a specific city. It intersects with the 'status' table to find stations that have an average number of available bikes greater than a specified threshold. The placeholders in the WHERE and HAVING clauses represent the city name and the minimum average bikes available, respectively.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT s.long, AVG(t.duration) AS average_duration\nFROM station s\nJOIN trip t ON s.id = t.start_station_id\nGROUP BY s.id;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT s.long, AVG(t.duration) AS average_duration\nFROM station s\nJOIN trip t ON s.id = t.start_station_id\nGROUP BY s.id, s.long;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the average longitude of bike stations from the 'station' table that do not have the maximum number of available bikes reported in the 'status' table. The placeholder in the HAVING clause represents a numeric value for filtering the bike availability.\",\n        \"virtual_table\": \"SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT s.long, AVG(t.duration) AS average_duration\nFROM station s\nJOIN trip t ON s.id = t.start_station_id\nGROUP BY s.id, s.long;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.190",
        "c_low": "SELECT s.id, s.name, s.long, AVG(t.duration) AS average_duration\nFROM station s\nJOIN trip t ON s.id = t.start_station_id\nGROUP BY s.id, s.name, s.long;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT start_station_id, start_station_name, long, AVG(duration) AS average_duration\nFROM trip\nGROUP BY start_station_id, start_station_name, long;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT start_station_id, start_station_name, long, AVG(duration) AS average_duration\nFROM trip\nJOIN station ON trip.start_station_id = station.id\nGROUP BY start_station_id, start_station_name, long;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the unique station IDs from the 'station' table located in a specific city. It intersects with the 'status' table to find stations that have an average number of available bikes greater than a specified threshold. The placeholders in the WHERE and HAVING clauses represent the city name and the minimum average bikes available, respectively.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT s.id, s.name, s.long, AVG(t.duration) AS average_duration\nFROM station s\nJOIN trip t ON s.id = t.start_station_id\nGROUP BY s.id, s.name, s.long;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT start_station_id, name, long, AVG(duration) AS average_duration\nFROM trip\nJOIN station ON trip.start_station_id = station.id\nGROUP BY start_station_id, name, long;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average longitude of bike stations from the 'station' table that do not have the maximum number of available bikes reported in the 'status' table. The placeholder in the HAVING clause represents a numeric value for filtering the bike availability.\",\n        \"virtual_table\": \"SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_3+": "SELECT trip.start_station_id, station.name, station.long, AVG(trip.duration) AS average_duration\nFROM trip\nJOIN station ON trip.start_station_id = station.id\nGROUP BY trip.start_station_id, station.name, station.long;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.191",
        "c_low": "SELECT s.lat, MIN(t.duration) AS min_duration\nFROM station s\nJOIN trip t ON s.id = t.end_station_id\nGROUP BY s.id, s.lat;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT s.lat, MIN(t.duration) AS min_duration\nFROM station s\nJOIN trip t ON s.id = t.end_station_id\nGROUP BY s.id;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average longitude of bike stations from the 'station' table that do not have the maximum number of available bikes reported in the 'status' table. The placeholder in the HAVING clause represents a numeric value for filtering the bike availability.\",\n        \"virtual_table\": \"SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT s.lat, MIN(t.duration) AS min_duration\nFROM station s\nJOIN trip t ON s.id = t.end_station_id\nGROUP BY s.id, s.lat;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT s.lat, MIN(t.duration) AS min_duration\nFROM station s\nJOIN trip t ON s.id = t.end_station_id\nGROUP BY s.id;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT s.lat, MIN(t.duration) AS min_duration\nFROM station s\nJOIN trip t ON s.id = t.end_station_id\nGROUP BY s.id;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT s.lat, MIN(t.duration) AS min_duration\nFROM station s\nJOIN trip t ON s.id = t.end_station_id\nGROUP BY s.id;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.192",
        "c_low": "SELECT s.id, s.name, s.lat, MIN(t.duration) AS min_duration\nFROM station s\nJOIN trip t ON s.id = t.end_station_id\nGROUP BY s.id, s.name, s.lat;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT end_station_id, end_station_name, lat, MIN(duration) AS min_duration \nFROM trip \nJOIN station ON trip.end_station_id = station.id \nGROUP BY end_station_id, end_station_name, lat;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT end_station_id, end_station_name, lat, MIN(duration) AS min_duration \nFROM trip \nJOIN station ON trip.end_station_id = station.id \nGROUP BY end_station_id, end_station_name, lat;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT end_station_id, end_station_name, MIN(duration) AS min_duration \nFROM trip \nGROUP BY end_station_id, end_station_name;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT end_station_id, name, lat, MIN(duration) AS min_duration \nFROM trip \nJOIN station ON trip.end_station_id = station.id \nGROUP BY end_station_id, name, lat;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT end_station_id, end_station_name, lat, MIN(duration) AS min_duration\nFROM trip\nJOIN station ON trip.end_station_id = station.id\nGROUP BY end_station_id, end_station_name, lat;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.195",
        "c_low": "SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f < 70;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the date and the temperature range (difference between maximum and minimum temperatures) from the 'weather' table, ordered by the temperature range. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT zip_code FROM weather WHERE zip_code NOT IN (SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f >= 70)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT zip_code FROM weather WHERE zip_code NOT IN (SELECT zip_code FROM weather WHERE max_dew_point_f >= 70)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT zip_code FROM weather WHERE zip_code NOT IN (SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f >= 70)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f < 70;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f < 70;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.196",
        "c_low": "SELECT DISTINCT zip_code \nFROM weather \nWHERE max_dew_point_f < 70 \nGROUP BY zip_code \nHAVING COUNT(DISTINCT date) = (SELECT COUNT(DISTINCT date) FROM weather)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the date and the temperature range (difference between maximum and minimum temperatures) from the 'weather' table, ordered by the temperature range. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT zip_code FROM weather WHERE zip_code NOT IN (SELECT zip_code FROM weather WHERE max_dew_point_f >= 70)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT zip_code FROM weather GROUP BY zip_code HAVING MAX(max_dew_point_f) < 70",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f < 70",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f < 70;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f < 70;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.198",
        "c_low": "SELECT id FROM trip WHERE duration = (SELECT AVG(duration) FROM trip WHERE zip_code = '94103')",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT id FROM trip WHERE duration >= (SELECT avg(duration) FROM trip WHERE zip_code = '94103')",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT id FROM trip WHERE duration = (SELECT avg(duration) FROM trip WHERE zip_code = '94103')",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT id FROM trip WHERE duration >= (SELECT avg(duration) FROM trip WHERE zip_code = '94103')",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT id FROM trip WHERE duration = (SELECT AVG(duration) FROM trip WHERE zip_code = '94103')",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT id FROM trip WHERE duration = (SELECT AVG(duration) FROM trip WHERE zip_code = '94103')",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.204",
        "c_low": "SELECT station.id, station.name FROM station JOIN status ON station.id = status.station_id WHERE status.bikes_available > 12;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT T1.id, T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available > 12",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique bike stations that currently have a certain number of bikes available. The query joins the 'station' table with the 'status' table to filter stations based on their bike availability, using a placeholder for the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average longitude of bike stations from the 'station' table that do not have the maximum number of available bikes reported in the 'status' table. The placeholder in the HAVING clause represents a numeric value for filtering the bike availability.\",\n        \"virtual_table\": \"SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT T1.id, T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T1.id HAVING avg(T2.bikes_available) > 12;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the unique station IDs from the 'station' table located in a specific city. It intersects with the 'status' table to find stations that have an average number of available bikes greater than a specified threshold. The placeholders in the WHERE and HAVING clauses represent the city name and the minimum average bikes available, respectively.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT s.id, s.name FROM station s JOIN status st ON s.id = st.station_id WHERE st.bikes_available > 12;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT T1.id, T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available > 12",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique bike stations that currently have a certain number of bikes available. The query joins the 'station' table with the 'status' table to filter stations based on their bike availability, using a placeholder for the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT station.id, station.name \nFROM station \nJOIN status ON station.id = status.station_id \nWHERE status.bikes_available > 12;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.205",
        "c_low": "SELECT zip_code\nFROM trip\nJOIN weather ON trip.start_date LIKE weather.date || '%'\nGROUP BY zip_code\nHAVING AVG(mean_humidity) < 70 AND COUNT(trip.id) >= 100;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT zip_code FROM weather WHERE mean_humidity < 70 AND zip_code IN (SELECT zip_code FROM trip GROUP BY zip_code HAVING COUNT(id) >= 100)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT zip_code \nFROM weather \nJOIN trip ON trip.zip_code = weather.zip_code \nGROUP BY zip_code \nHAVING avg(mean_humidity) < 70 AND COUNT(trip.id) >= 100;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT zip_code \nFROM weather \nGROUP BY zip_code \nHAVING avg(mean_humidity) < 70 \nAND (SELECT COUNT(*) FROM trip WHERE trip.zip_code = weather.zip_code) >= 100;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT zip_code\nFROM trip\nJOIN weather ON trip.start_date LIKE weather.date || '%'\nGROUP BY zip_code\nHAVING AVG(mean_humidity) < 70 AND COUNT(trip.id) >= 100;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT zip_code\nFROM trip\nJOIN weather ON trip.start_date LIKE weather.date || '%'\nGROUP BY zip_code\nHAVING AVG(mean_humidity) < 70 AND COUNT(trip.id) >= 100;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.206",
        "c_low": "SELECT zip_code \nFROM trip \nWHERE zip_code IN (\n    SELECT zip_code \n    FROM weather \n    GROUP BY zip_code \n    HAVING AVG(mean_humidity) < 70\n) \nGROUP BY zip_code \nHAVING COUNT(id) >= 100;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT zip_code \nFROM weather \nJOIN trip ON weather.zip_code = trip.zip_code \nGROUP BY zip_code \nHAVING avg(mean_humidity) < 70 AND COUNT(trip.id) >= 100;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT zip_code \nFROM weather \nJOIN trip ON weather.zip_code = trip.zip_code \nGROUP BY zip_code \nHAVING avg(mean_humidity) < 70 AND COUNT(trip.id) >= 100;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    }\n}\n",
        "t_1": "SELECT zip_code \nFROM weather \nGROUP BY zip_code \nHAVING avg(mean_humidity) < 70 \nAND (SELECT COUNT(*) FROM trip WHERE trip.zip_code = weather.zip_code) >= 100;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT zip_code \nFROM trip \nWHERE zip_code IN (\n    SELECT zip_code \n    FROM weather \n    WHERE mean_humidity < 70\n) \nGROUP BY zip_code \nHAVING COUNT(id) >= 100;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT zip_code \nFROM trip \nWHERE zip_code IN (\n    SELECT zip_code \n    FROM weather \n    WHERE mean_humidity < 70\n) \nGROUP BY zip_code \nHAVING COUNT(id) >= 100;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.208",
        "c_low": "SELECT name FROM station WHERE city = 'Palo Alto' AND id NOT IN (SELECT end_station_id FROM trip)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT name FROM station WHERE city = 'Palo Alto' AND id NOT IN (SELECT end_station_id FROM trip)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT name FROM station WHERE city = 'Palo Alto' EXCEPT SELECT end_station_name FROM trip;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT name FROM station WHERE city = 'Palo Alto' AND id NOT IN (SELECT end_station_id FROM trip)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT name FROM station WHERE city = 'Palo Alto' EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*) > 0",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT name FROM station WHERE city = 'Palo Alto' AND id NOT IN (SELECT end_station_id FROM trip);",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.211",
        "c_low": "SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude FROM station WHERE id IN (SELECT start_station_id FROM trip)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude FROM trip;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude FROM station JOIN trip ON station.id = trip.start_station_id;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    }\n}\n",
        "t_1": "SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude FROM trip;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude FROM trip;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the average longitude of bike stations from the 'station' table that do not have the maximum number of available bikes reported in the 'status' table. The placeholder in the HAVING clause represents a numeric value for filtering the bike availability.\",\n        \"virtual_table\": \"SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude\nFROM station\nJOIN trip ON station.id = trip.start_station_id;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.212",
        "c_low": "SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude FROM station WHERE id IN (SELECT start_station_id FROM trip);",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT avg(lat) AS average_latitude, avg(long) AS average_longitude FROM station WHERE id IN (SELECT start_station_id FROM trip)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the average longitude of bike stations from the 'station' table that do not have the maximum number of available bikes reported in the 'status' table. The placeholder in the HAVING clause represents a numeric value for filtering the bike availability.\",\n        \"virtual_table\": \"SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude \nFROM station \nWHERE id IN (SELECT start_station_id FROM trip)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude \nFROM station \nWHERE id IN (SELECT DISTINCT start_station_id FROM trip);",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude FROM station WHERE id IN (SELECT start_station_id FROM trip)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude\nFROM station\nWHERE id IN (\n    SELECT start_station_id\n    FROM trip\n);",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.214",
        "c_low": "SELECT DISTINCT b.Writer\nFROM book b\nORDER BY b.Writer ASC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT DISTINCT Writer FROM book ORDER BY Writer ASC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the writers of books from the 'book' table that have a publication price exceeding a specified amount. The placeholder in the WHERE clause represents the minimum price of the publication.\",\n        \"virtual_table\": \"SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the titles of books from the 'book' table that are not written by a specific writer. The placeholder in the WHERE clause represents the writer's identifier.\",\n        \"virtual_table\": \"SELECT Title FROM book WHERE Writer != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT Writer FROM book GROUP BY Writer ORDER BY Writer ASC",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of writers from the 'book' table who have authored more than a specified number of books. The placeholder in the HAVING clause represents the minimum count of books that a writer must have authored to be included in the results.\",\n        \"virtual_table\": \"SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT Writer FROM book ORDER BY Writer ASC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of writers from the 'book' table who have authored more than a specified number of books. The placeholder in the HAVING clause represents the minimum count of books that a writer must have authored to be included in the results.\",\n        \"virtual_table\": \"SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the titles of books from the 'book' table that are not written by a specific writer. The placeholder in the WHERE clause represents the writer's identifier.\",\n        \"virtual_table\": \"SELECT Title FROM book WHERE Writer != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T1.Writer ASC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the writers of books from the 'book' table that have a publication price exceeding a specified amount. The placeholder in the WHERE clause represents the minimum price of the publication.\",\n        \"virtual_table\": \"SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT b.Writer\nFROM book b\nORDER BY b.Writer ASC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.227",
        "c_low": "SELECT Publication_Date, COUNT(*) as count FROM publication GROUP BY Publication_Date ORDER BY count DESC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of distinct publication dates from the 'publication' table. The result will indicate how many unique dates exist for the publications recorded.\",\n        \"virtual_table\": \"SELECT COUNT (DISTINCT Publication_Date) FROM publication\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of publishers from the 'publication' table, ordered by the retail price of their publications in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of publishers to retrieve.\",\n        \"virtual_table\": \"SELECT Publisher FROM publication ORDER BY Price DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT Publication_Date, COUNT(*) as count FROM publication GROUP BY Publication_Date ORDER BY count DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the retail prices of publications from the 'publication' table that are published by specific publishers. The placeholders in the WHERE clause represent the names of the publishers being queried.\",\n        \"virtual_table\": \"SELECT Price FROM publication WHERE Publisher  =  [PLACEHOLDER-TYPE:STRING] OR Publisher  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the writers of books from the 'book' table that have a publication price exceeding a specified amount. The placeholder in the WHERE clause represents the minimum price of the publication.\",\n        \"virtual_table\": \"SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT Publication_Date, COUNT(*) as Publication_Count FROM publication GROUP BY Publication_Date ORDER BY Publication_Count DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of publications by each publisher from the 'publication' table. The query groups the results by the publisher's name and counts the total number of publications for each publisher.\",\n        \"virtual_table\": \"SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\"\n    }\n}\n",
        "t_1": "SELECT Publication_Date, COUNT(*) as Publication_Count FROM publication GROUP BY Publication_Date ORDER BY Publication_Count DESC LIMIT 1",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of distinct publication dates from the 'publication' table. The result will indicate how many unique dates exist for the publications recorded.\",\n        \"virtual_table\": \"SELECT COUNT (DISTINCT Publication_Date) FROM publication\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of publications by each publisher from the 'publication' table. The query groups the results by the publisher's name and counts the total number of publications for each publisher.\",\n        \"virtual_table\": \"SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the retail prices of publications from the 'publication' table that are published by specific publishers. The placeholders in the WHERE clause represent the names of the publishers being queried.\",\n        \"virtual_table\": \"SELECT Price FROM publication WHERE Publisher  =  [PLACEHOLDER-TYPE:STRING] OR Publisher  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT Publication_Date, COUNT(*) as count FROM publication GROUP BY Publication_Date ORDER BY count DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the writers of books from the 'book' table that have a publication price exceeding a specified amount. The placeholder in the WHERE clause represents the minimum price of the publication.\",\n        \"virtual_table\": \"SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Publication_Date, COUNT(*) as count FROM publication GROUP BY Publication_Date ORDER BY count DESC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.230",
        "c_low": "SELECT DISTINCT Publisher FROM publication WHERE Price > 10000000 OR Price < 5000000;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of publishers from the 'publication' table, ordered by the retail price of their publications in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of publishers to retrieve.\",\n        \"virtual_table\": \"SELECT Publisher FROM publication ORDER BY Price DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of distinct publication dates from the 'publication' table. The result will indicate how many unique dates exist for the publications recorded.\",\n        \"virtual_table\": \"SELECT COUNT (DISTINCT Publication_Date) FROM publication\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT Publisher FROM publication WHERE Price > 10000000 OR Price < 5000000;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the writers of books from the 'book' table that have a publication price exceeding a specified amount. The placeholder in the WHERE clause represents the minimum price of the publication.\",\n        \"virtual_table\": \"SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the retail prices of publications from the 'publication' table that are published by specific publishers. The placeholders in the WHERE clause represent the names of the publishers being queried.\",\n        \"virtual_table\": \"SELECT Price FROM publication WHERE Publisher  =  [PLACEHOLDER-TYPE:STRING] OR Publisher  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT Publisher FROM publication WHERE Price > 10000000 INTERSECT SELECT DISTINCT Publisher FROM publication WHERE Price < 5000000",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct publishers from the 'publication' table whose publications have a retail price exceeding a specified amount. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT DISTINCT Publisher FROM publication WHERE Price  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of publishers from the 'publication' table that have published more than a specified number of publications. The placeholder in the HAVING clause represents the minimum count of publications required to be included in the results.\",\n        \"virtual_table\": \"SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the number of publications by each publisher from the 'publication' table. The query groups the results by the publisher's name and counts the total number of publications for each publisher.\",\n        \"virtual_table\": \"SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT Publisher FROM publication WHERE Price > 10000000 UNION SELECT DISTINCT Publisher FROM publication WHERE Price < 5000000;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct publishers from the 'publication' table whose publications have a retail price exceeding a specified amount. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT DISTINCT Publisher FROM publication WHERE Price  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of publishers from the 'publication' table, ordered by the retail price of their publications in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of publishers to retrieve.\",\n        \"virtual_table\": \"SELECT Publisher FROM publication ORDER BY Price DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of publishers from the 'publication' table that have published more than a specified number of publications. The placeholder in the HAVING clause represents the minimum count of publications required to be included in the results.\",\n        \"virtual_table\": \"SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT Publisher FROM publication WHERE Price > 10000000 OR Price < 5000000;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the writers of books from the 'book' table that have a publication price exceeding a specified amount. The placeholder in the WHERE clause represents the minimum price of the publication.\",\n        \"virtual_table\": \"SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT p.Publisher \nFROM publication p \nWHERE p.Price > 10000000 OR p.Price < 5000000;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.255",
        "c_low": "SELECT a.Name \nFROM actor a \nJOIN musical m ON a.Musical_ID = m.Musical_ID \nORDER BY m.Year DESC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the duration of performances by actors from the 'actor' table, ordered by the age of the actors at the time of their performances in descending order. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT Duration FROM actor ORDER BY Age DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID ORDER BY T2.Year DESC",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT actor.Name \nFROM actor \nJOIN musical ON actor.Musical_ID = musical.Musical_ID \nORDER BY musical.Year DESC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT actor.Name \nFROM actor \nJOIN musical ON actor.Musical_ID = musical.Musical_ID \nORDER BY musical.Year DESC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the duration of performances by actors from the 'actor' table, ordered by the age of the actors at the time of their performances in descending order. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT Duration FROM actor ORDER BY Age DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID ORDER BY T2.Year DESC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT actor.Name\nFROM actor\nJOIN musical ON actor.Musical_ID = musical.Musical_ID\nORDER BY musical.Year DESC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.256",
        "c_low": "SELECT m.Name, COUNT(a.Actor_ID) AS Number_of_Actors\nFROM musical m\nLEFT JOIN actor a ON m.Musical_ID = a.Musical_ID\nGROUP BY m.Name;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT T2.Name, COUNT(T1.Actor_ID) AS NumberOfActors \nFROM musical AS T2 \nJOIN actor AS T1 ON T1.Musical_ID = T2.Musical_ID \nGROUP BY T2.Name;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT T2.Name, COUNT(T1.Actor_ID) AS Number_of_Actors \nFROM actor AS T1 \nJOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID \nGROUP BY T2.Musical_ID",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT m.Name, COUNT(a.Actor_ID) AS Number_of_Actors \nFROM musical m \nLEFT JOIN actor a ON m.Musical_ID = a.Musical_ID \nGROUP BY m.Name;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT T2.Name, COUNT(T1.Actor_ID) AS Number_of_Actors FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T2.Musical_ID",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT m.Name, COUNT(a.Actor_ID) AS Number_of_Actors\nFROM musical m\nLEFT JOIN actor a ON m.Musical_ID = a.Musical_ID\nGROUP BY m.Name;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.257",
        "c_low": "SELECT m.Name, COUNT(a.Actor_ID) AS Actor_Count\nFROM musical m\nLEFT JOIN actor a ON m.Musical_ID = a.Musical_ID\nGROUP BY m.Musical_ID;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the duration of performances by actors from the 'actor' table, ordered by the age of the actors at the time of their performances in descending order. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT Duration FROM actor ORDER BY Age DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT T2.Name, COUNT(T1.Actor_ID) AS Actor_Count \nFROM musical AS T2 \nLEFT JOIN actor AS T1 ON T1.Musical_ID = T2.Musical_ID \nGROUP BY T2.Name;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT T2.Name, COUNT(T1.Actor_ID) AS Actor_Count FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T2.Name;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT m.Name, COUNT(a.Actor_ID) AS Actor_Count \nFROM musical m \nLEFT JOIN actor a ON m.Musical_ID = a.Musical_ID \nGROUP BY m.Name;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the duration of performances by actors from the 'actor' table, ordered by the age of the actors at the time of their performances in descending order. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT Duration FROM actor ORDER BY Age DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.Name, COUNT(T1.Actor_ID) AS Actor_Count FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T2.Name;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT musical.Name, COUNT(actor.Actor_ID) AS Actor_Count\nFROM musical\nLEFT JOIN actor ON musical.Musical_ID = actor.Musical_ID\nGROUP BY musical.Name;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.260",
        "c_low": "SELECT Nominee, COUNT(Musical_ID) AS Number_of_Musicals\nFROM musical\nWHERE Result = 'Nominated'\nGROUP BY Nominee;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Nominee, COUNT(DISTINCT Musical_ID) AS NumberOfMusicals\nFROM musical\nGROUP BY Nominee;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT Nominee, COUNT(*) AS NumberOfNominations FROM musical GROUP BY Nominee",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Nominee, COUNT(*) AS NumberOfMusicals\nFROM musical\nGROUP BY Nominee;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Nominee, COUNT(*) AS NumberOfMusicals\nFROM musical\nWHERE Result = 'Nominated'\nGROUP BY Nominee;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Nominee, COUNT(Musical_ID) AS Number_of_Musicals\nFROM musical\nWHERE Result = 'Nominated'\nGROUP BY Nominee;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.261",
        "c_low": "SELECT Nominee, COUNT(*) AS Nominations\nFROM musical\nWHERE Result = 'Nominated'\nGROUP BY Nominee;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Nominee, COUNT(*) AS Nominations\nFROM musical\nGROUP BY Nominee;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT Nominee, COUNT(*) AS Nominations FROM musical GROUP BY Nominee",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Nominee, COUNT(*) AS Nominations\nFROM musical\nGROUP BY Nominee;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Nominee, COUNT(*) AS Nominations\nFROM musical\nWHERE Result = 'Nominated'\nGROUP BY Nominee;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Nominee, COUNT(*) AS Nominations\nFROM musical\nWHERE Result = 'Nominated'\nGROUP BY Nominee;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.262",
        "c_low": "SELECT Nominee, COUNT(*) AS NominationCount\nFROM musical\nGROUP BY Nominee\nORDER BY NominationCount DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Nominee, COUNT(*) AS NominationCount\nFROM musical\nGROUP BY Nominee\nORDER BY NominationCount DESC\nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT Nominee, COUNT(*) AS NominationCount\nFROM musical\nGROUP BY Nominee\nORDER BY NominationCount DESC\nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT Nominee, COUNT(*) AS NominationCount\nFROM musical\nGROUP BY Nominee\nORDER BY NominationCount DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.263",
        "c_low": "SELECT Nominee, COUNT(*) AS NominationCount\nFROM musical\nGROUP BY Nominee\nORDER BY NominationCount DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Nominee, COUNT(*) as NominationCount FROM musical GROUP BY Nominee ORDER BY NominationCount DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*) = (SELECT MAX(nomination_count) FROM (SELECT COUNT(*) AS nomination_count FROM musical GROUP BY Nominee));",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*) > 0 ORDER BY COUNT(*) DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Nominee, COUNT(*) as NominationCount FROM musical GROUP BY Nominee ORDER BY NominationCount DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Nominee, COUNT(*) AS NominationCount\nFROM musical\nGROUP BY Nominee\nORDER BY NominationCount DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.267",
        "c_low": "SELECT Nominee, COUNT(*) as NominationCount \nFROM musical \nWHERE Result = 'Nominated' \nGROUP BY Nominee \nHAVING COUNT(*) > 2;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Nominee, COUNT(*) as NominationCount \nFROM musical \nWHERE Result = 'Nominated' \nGROUP BY Nominee \nHAVING COUNT(*) > 2;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*) > 2",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*) > 2",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Nominee, COUNT(*) as NominationCount \nFROM musical \nWHERE Result = 'Nominated' \nGROUP BY Nominee \nHAVING COUNT(*) > 2;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT Nominee, COUNT(*) as NominationCount \nFROM musical \nWHERE Result = 'Nominated' \nGROUP BY Nominee \nHAVING COUNT(*) > 2;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.272",
        "c_low": "SELECT Name, Nominee FROM musical WHERE Award IN ('Bob Fosse', 'Cleavant Derricks');",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID WHERE T2.Award IN ('Bob Fosse', 'Cleavant Derricks')",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT Nominee FROM musical WHERE Award = 'Bob Fosse' INTERSECT SELECT Nominee FROM musical WHERE Award = 'Cleavant Derricks'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Nominee FROM musical WHERE Award = 'Bob Fosse' INTERSECT SELECT Nominee FROM musical WHERE Award = 'Cleavant Derricks'",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Nominee FROM musical WHERE Award IN ('Bob Fosse', 'Cleavant Derricks')",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Name, Nominee FROM musical WHERE Award IN ('Bob Fosse', 'Cleavant Derricks');",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.273",
        "c_low": "SELECT DISTINCT Nominee \nFROM musical \nWHERE Award IN ('Bob Fosse', 'Cleavant Derricks') \nAND Result = 'Nominated';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT DISTINCT Nominee FROM musical WHERE Award IN ('Bob Fosse', 'Cleavant Derricks') AND Result = 'Nominated';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT Nominee FROM musical WHERE Award = 'Bob Fosse' INTERSECT SELECT Nominee FROM musical WHERE Award = 'Cleavant Derricks'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Nominee FROM musical WHERE Award = 'Bob Fosse' INTERSECT SELECT Nominee FROM musical WHERE Award = 'Cleavant Derricks'",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT Nominee FROM musical WHERE Award IN ('Bob Fosse', 'Cleavant Derricks') AND Result = 'Nominated';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT Nominee \nFROM musical \nWHERE Award IN ('Bob Fosse', 'Cleavant Derricks') \nAND Result = 'Nominated';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.285",
        "c_low": "SELECT up.name \nFROM user_profiles up \nWHERE up.followers > (SELECT followers FROM user_profiles WHERE name = 'Tyler Swift')",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT name FROM user_profiles WHERE followers > (SELECT followers FROM user_profiles WHERE name = 'Tyler Swift')",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and email addresses of users from the 'user_profiles' table, ordered by the number of followers they have. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the average number of followers for users from the 'user_profiles' table who have not posted any tweets. The placeholder in the subquery represents the user identifiers of those who have tweeted.\",\n        \"virtual_table\": \"SELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the identifiers of users being followed by a specific user or users from the 'user_profiles' table. The placeholders in the WHERE clause represent the names of the users whose followings are being queried.\",\n        \"virtual_table\": \"SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING] OR T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT name FROM user_profiles WHERE followers > (SELECT followers FROM user_profiles WHERE name = 'Tyler Swift')",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of users from the 'user_profiles' table who have posted more than a specified number of tweets. The placeholder in the HAVING clause represents the minimum count of tweets a user must have posted to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of users from the 'user_profiles' table along with the count of tweets they have posted. It filters the results to only include users who have posted more than a specified number of tweets, represented by a placeholder in the HAVING clause.\",\n        \"virtual_table\": \"SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names and partition identifiers of users from the 'user_profiles' table who have posted fewer tweets than a specified number. The placeholder in the HAVING clause represents the maximum number of tweets a user can have to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT name FROM user_profiles WHERE followers > (SELECT followers FROM user_profiles WHERE name = 'Tyler Swift')",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and email addresses of users from the 'user_profiles' table, ordered by the number of followers they have. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT name FROM user_profiles WHERE followers > (SELECT followers FROM user_profiles WHERE name = 'Tyler Swift')",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of users from the 'user_profiles' table who have posted more than a specified number of tweets. The placeholder in the HAVING clause represents the minimum count of tweets a user must have posted to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of users from the 'user_profiles' table along with the count of tweets they have posted. It filters the results to only include users who have posted more than a specified number of tweets, represented by a placeholder in the HAVING clause.\",\n        \"virtual_table\": \"SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names and partition identifiers of users from the 'user_profiles' table who have posted fewer tweets than a specified number. The placeholder in the HAVING clause represents the maximum number of tweets a user can have to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT up.name \nFROM user_profiles up \nWHERE up.followers > (SELECT followers FROM user_profiles WHERE name = 'Tyler Swift')",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.286",
        "c_low": "SELECT name, email FROM user_profiles WHERE followers > 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT name, email FROM user_profiles WHERE followers > 1",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and email addresses of users from the 'user_profiles' table, ordered by the number of followers they have. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the identifiers of users being followed by a specific user or users from the 'user_profiles' table. The placeholders in the WHERE clause represent the names of the users whose followings are being queried.\",\n        \"virtual_table\": \"SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING] OR T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average number of followers for users from the 'user_profiles' table who have not posted any tweets. The placeholder in the subquery represents the user identifiers of those who have tweeted.\",\n        \"virtual_table\": \"SELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)\"\n    }\n}\n",
        "c_high": "SELECT name, email FROM user_profiles WHERE followers > 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of users from the 'user_profiles' table who have posted more than a specified number of tweets. The placeholder in the HAVING clause represents the minimum count of tweets a user must have posted to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of users from the 'user_profiles' table along with the count of tweets they have posted. It filters the results to only include users who have posted more than a specified number of tweets, represented by a placeholder in the HAVING clause.\",\n        \"virtual_table\": \"SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names and partition identifiers of users from the 'user_profiles' table who have posted fewer tweets than a specified number. The placeholder in the HAVING clause represents the maximum number of tweets a user can have to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT name, email FROM user_profiles WHERE followers > 1",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and email addresses of users from the 'user_profiles' table, ordered by the number of followers they have. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT name, email FROM user_profiles WHERE followers > 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of users from the 'user_profiles' table who have posted more than a specified number of tweets. The placeholder in the HAVING clause represents the minimum count of tweets a user must have posted to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the identifiers of users being followed by a specific user or users from the 'user_profiles' table. The placeholders in the WHERE clause represent the names of the users whose followings are being queried.\",\n        \"virtual_table\": \"SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING] OR T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names of users from the 'user_profiles' table along with the count of tweets they have posted. It filters the results to only include users who have posted more than a specified number of tweets, represented by a placeholder in the HAVING clause.\",\n        \"virtual_table\": \"SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT name, email FROM user_profiles WHERE followers > 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.288",
        "c_low": "SELECT f1 FROM follows WHERE f2 IN (SELECT uid FROM user_profiles WHERE name IN ('Mary', 'Susan'));",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = 'Mary' OR T1.name = 'Susan'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the identifiers of users being followed by a specific user or users from the 'user_profiles' table. The placeholders in the WHERE clause represent the names of the users whose followings are being queried.\",\n        \"virtual_table\": \"SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING] OR T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and email addresses of users from the 'user_profiles' table, ordered by the number of followers they have. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT f1 FROM follows WHERE f2 IN (SELECT uid FROM user_profiles WHERE name IN ('Mary', 'Susan'))",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of users from the 'user_profiles' table who have posted more than a specified number of tweets. The placeholder in the HAVING clause represents the minimum count of tweets a user must have posted to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and partition identifiers of users from the 'user_profiles' table who have posted fewer tweets than a specified number. The placeholder in the HAVING clause represents the maximum number of tweets a user can have to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names of users from the 'user_profiles' table along with the count of tweets they have posted. It filters the results to only include users who have posted more than a specified number of tweets, represented by a placeholder in the HAVING clause.\",\n        \"virtual_table\": \"SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT uid FROM follows WHERE f1 IN (SELECT uid FROM user_profiles WHERE name IN ('Mary', 'Susan'));",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and email addresses of users from the 'user_profiles' table, ordered by the number of followers they have. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = 'Mary' OR T1.name = 'Susan'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the identifiers of users being followed by a specific user or users from the 'user_profiles' table. The placeholders in the WHERE clause represent the names of the users whose followings are being queried.\",\n        \"virtual_table\": \"SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING] OR T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of users from the 'user_profiles' table who have posted more than a specified number of tweets. The placeholder in the HAVING clause represents the minimum count of tweets a user must have posted to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names and partition identifiers of users from the 'user_profiles' table who have posted fewer tweets than a specified number. The placeholder in the HAVING clause represents the maximum number of tweets a user can have to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT f1 FROM follows WHERE f2 IN (SELECT uid FROM user_profiles WHERE name IN ('Mary', 'Susan'));",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.293",
        "c_low": "SELECT up.name\nFROM user_profiles up\nJOIN follows f ON up.uid = f.f2\nGROUP BY up.uid\nORDER BY COUNT(f.f1) DESC\nLIMIT 5;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT name FROM user_profiles WHERE uid IN (SELECT f1 FROM follows GROUP BY f1 ORDER BY COUNT(f2) DESC LIMIT 5)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and email addresses of users from the 'user_profiles' table, ordered by the number of followers they have. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT T1.name FROM user_profiles AS T1 JOIN follows AS F ON T1.uid = F.f2 GROUP BY F.f2 ORDER BY COUNT(F.f1) DESC LIMIT 5;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of users from the 'user_profiles' table who have posted more than a specified number of tweets. The placeholder in the HAVING clause represents the minimum count of tweets a user must have posted to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT name FROM user_profiles WHERE uid IN (SELECT f1 FROM follows GROUP BY f1 ORDER BY COUNT(f2) DESC LIMIT 5)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and email addresses of users from the 'user_profiles' table, ordered by the number of followers they have. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T1.name FROM user_profiles AS T1 JOIN follows AS F ON T1.uid = F.f2 GROUP BY F.f2 ORDER BY COUNT(F.f1) DESC LIMIT 5;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of users from the 'user_profiles' table who have posted more than a specified number of tweets. The placeholder in the HAVING clause represents the minimum count of tweets a user must have posted to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT up.name\nFROM user_profiles up\nJOIN follows f ON up.uid = f.f2\nGROUP BY up.uid\nORDER BY COUNT(f.f1) DESC\nLIMIT 5;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.295",
        "c_low": "SELECT user_profiles.name, COUNT(tweets.id) AS tweet_count\nFROM user_profiles\nLEFT JOIN tweets ON user_profiles.uid = tweets.uid\nGROUP BY user_profiles.uid;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT user_profiles.name, COUNT(tweets.id) AS tweet_count \nFROM user_profiles \nLEFT JOIN tweets ON user_profiles.uid = tweets.uid \nGROUP BY user_profiles.uid;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the average number of followers for users from the 'user_profiles' table who have not posted any tweets. The placeholder in the subquery represents the user identifiers of those who have tweeted.\",\n        \"virtual_table\": \"SELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and email addresses of users from the 'user_profiles' table, ordered by the number of followers they have. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the identifiers of users being followed by a specific user or users from the 'user_profiles' table. The placeholders in the WHERE clause represent the names of the users whose followings are being queried.\",\n        \"virtual_table\": \"SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING] OR T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT T1.name, count(*) AS tweet_count FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T1.uid",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names of users from the 'user_profiles' table along with the count of tweets they have posted. It filters the results to only include users who have posted more than a specified number of tweets, represented by a placeholder in the HAVING clause.\",\n        \"virtual_table\": \"SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of users from the 'user_profiles' table who have posted more than a specified number of tweets. The placeholder in the HAVING clause represents the minimum count of tweets a user must have posted to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names and partition identifiers of users from the 'user_profiles' table who have posted fewer tweets than a specified number. The placeholder in the HAVING clause represents the maximum number of tweets a user can have to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT up.name, COUNT(t.id) AS tweet_count \nFROM user_profiles up \nLEFT JOIN tweets t ON up.uid = t.uid \nGROUP BY up.uid \nORDER BY tweet_count DESC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and email addresses of users from the 'user_profiles' table, ordered by the number of followers they have. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T1.name, count(*) AS tweet_count FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T1.uid",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names of users from the 'user_profiles' table along with the count of tweets they have posted. It filters the results to only include users who have posted more than a specified number of tweets, represented by a placeholder in the HAVING clause.\",\n        \"virtual_table\": \"SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of users from the 'user_profiles' table who have posted more than a specified number of tweets. The placeholder in the HAVING clause represents the minimum count of tweets a user must have posted to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names and partition identifiers of users from the 'user_profiles' table who have posted fewer tweets than a specified number. The placeholder in the HAVING clause represents the maximum number of tweets a user can have to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT user_profiles.name, COUNT(tweets.id) AS tweet_count\nFROM user_profiles\nLEFT JOIN tweets ON user_profiles.uid = tweets.uid\nGROUP BY user_profiles.uid;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.304",
        "c_low": "SELECT attribute_data_type\nFROM Attribute_Definitions\nGROUP BY attribute_data_type\nHAVING COUNT(attribute_id) > 3;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT ad.attribute_data_type, COUNT(ad.attribute_id) AS attribute_count \nFROM Attribute_Definitions AS ad \nGROUP BY ad.attribute_data_type \nHAVING COUNT(ad.attribute_id) > 3;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and unique identifiers of attributes from the 'Attribute_Definitions' table that are associated with specific catalog entries in the 'Catalog_Contents_Additional_Attributes' table. The placeholder in the WHERE clause represents the value of the attribute being queried.\",\n        \"virtual_table\": \"SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*) > 3",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of the different data types defined in the 'Attribute_Definitions' table, specifically those that have more than a specified number of occurrences. The placeholder in the HAVING clause represents the minimum count of attributes required to be included in the results.\",\n        \"virtual_table\": \"SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*) > 3",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of the different data types defined in the 'Attribute_Definitions' table, specifically those that have more than a specified number of occurrences. The placeholder in the HAVING clause represents the minimum count of attributes required to be included in the results.\",\n        \"virtual_table\": \"SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT ad.attribute_data_type, COUNT(ad.attribute_id) AS attribute_count \nFROM Attribute_Definitions AS ad \nGROUP BY ad.attribute_data_type \nHAVING COUNT(ad.attribute_id) > 3;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and unique identifiers of attributes from the 'Attribute_Definitions' table that are associated with specific catalog entries in the 'Catalog_Contents_Additional_Attributes' table. The placeholder in the WHERE clause represents the value of the attribute being queried.\",\n        \"virtual_table\": \"SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT attribute_data_type\nFROM Attribute_Definitions\nGROUP BY attribute_data_type\nHAVING COUNT(attribute_id) > 3;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.311",
        "c_low": "SELECT catalog_publisher, COUNT(catalog_id) AS catalog_count\nFROM Catalogs\nGROUP BY catalog_publisher\nORDER BY catalog_count DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    }\n}\n",
        "c_mid": "SELECT catalog_publisher, COUNT(catalog_id) AS catalog_count \nFROM Catalogs \nGROUP BY catalog_publisher \nORDER BY catalog_count DESC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique catalog publishers from the 'Catalogs' table that match a specific pattern. The placeholder in the WHERE clause allows for filtering based on the publisher's name.\",\n        \"virtual_table\": \"SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that have a next entry in the catalog hierarchy. The placeholder in the WHERE clause represents a numeric identifier for filtering entries based on their next entry ID.\",\n        \"virtual_table\": \"SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT catalog_publisher, COUNT(catalog_id) AS catalog_count\nFROM Catalogs\nGROUP BY catalog_publisher\nORDER BY catalog_count DESC\nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT catalog_publisher, COUNT(catalog_id) AS catalog_count \nFROM Catalogs \nGROUP BY catalog_publisher \nORDER BY catalog_count DESC \nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique catalog publishers from the 'Catalogs' table that match a specific pattern. The placeholder in the WHERE clause allows for filtering based on the publisher's name.\",\n        \"virtual_table\": \"SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    }\n}\n",
        "t_2": "SELECT catalog_publisher, COUNT(catalog_id) AS catalog_count\nFROM Catalogs\nGROUP BY catalog_publisher\nORDER BY catalog_count DESC\nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT catalog_publisher, COUNT(catalog_id) AS catalog_count\nFROM Catalogs\nGROUP BY catalog_publisher\nORDER BY catalog_count DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.312",
        "c_low": "SELECT catalog_publisher FROM Catalogs GROUP BY catalog_publisher ORDER BY COUNT(catalog_id) DESC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    }\n}\n",
        "c_mid": "SELECT catalog_publisher FROM Catalogs GROUP BY catalog_publisher ORDER BY COUNT(catalog_id) DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique catalog publishers from the 'Catalogs' table that match a specific pattern. The placeholder in the WHERE clause allows for filtering based on the publisher's name.\",\n        \"virtual_table\": \"SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that have a next entry in the catalog hierarchy. The placeholder in the WHERE clause represents a numeric identifier for filtering entries based on their next entry ID.\",\n        \"virtual_table\": \"SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT catalog_publisher, COUNT(catalog_id) AS catalog_count\nFROM Catalogs\nGROUP BY catalog_publisher\nORDER BY catalog_count DESC\nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT catalog_publisher FROM Catalogs GROUP BY catalog_publisher ORDER BY COUNT(catalog_id) DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique catalog publishers from the 'Catalogs' table that match a specific pattern. The placeholder in the WHERE clause allows for filtering based on the publisher's name.\",\n        \"virtual_table\": \"SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    }\n}\n",
        "t_2": "SELECT catalog_publisher, COUNT(catalog_id) AS catalog_count\nFROM Catalogs\nGROUP BY catalog_publisher\nORDER BY catalog_count DESC\nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT catalog_publisher, COUNT(catalog_id) AS catalog_count\nFROM Catalogs\nGROUP BY catalog_publisher\nORDER BY catalog_count DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.315",
        "c_low": "SELECT catalog_entry_name\nFROM Catalog_Contents\nWHERE catalog_entry_id IN (\n    SELECT catalog_entry_id\n    FROM Catalog_Contents_Additional_Attributes\n    GROUP BY attribute_id\n    ORDER BY COUNT(DISTINCT catalog_entry_id) DESC\n    LIMIT 1\n)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    }\n}\n",
        "c_mid": "SELECT cc.catalog_entry_name \nFROM Catalog_Contents AS cc \nJOIN Catalog_Contents_Additional_Attributes AS cca ON cc.catalog_entry_id = cca.catalog_entry_id \nWHERE cca.attribute_id IN (\n    SELECT attribute_id \n    FROM Catalog_Contents_Additional_Attributes \n    GROUP BY attribute_id \n    ORDER BY COUNT(*) DESC \n    LIMIT 1\n)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that have a next entry in the catalog hierarchy. The placeholder in the WHERE clause represents a numeric identifier for filtering entries based on their next entry ID.\",\n        \"virtual_table\": \"SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names and unique identifiers of attributes from the 'Attribute_Definitions' table that are associated with specific catalog entries in the 'Catalog_Contents_Additional_Attributes' table. The placeholder in the WHERE clause represents the value of the attribute being queried.\",\n        \"virtual_table\": \"SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT cc.catalog_entry_name\nFROM Catalog_Contents cc\nJOIN Catalog_Contents_Additional_Attributes cca ON cc.catalog_entry_id = cca.catalog_entry_id\nWHERE cca.attribute_id = (\n    SELECT attribute_id\n    FROM Catalog_Contents_Additional_Attributes\n    GROUP BY attribute_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT catalog_entry_name\nFROM Catalog_Contents_Additional_Attributes\nWHERE attribute_id = (\n    SELECT attribute_id\n    FROM Catalog_Contents_Additional_Attributes\n    GROUP BY attribute_id\n    ORDER BY COUNT(catalog_entry_id) DESC\n    LIMIT 1\n)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that have a next entry in the catalog hierarchy. The placeholder in the WHERE clause represents a numeric identifier for filtering entries based on their next entry ID.\",\n        \"virtual_table\": \"SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT cc.catalog_entry_name \nFROM Catalog_Contents AS cc \nJOIN Catalog_Contents_Additional_Attributes AS cca ON cc.catalog_entry_id = cca.catalog_entry_id \nWHERE cca.attribute_id = (\n    SELECT attribute_id \n    FROM Catalog_Contents_Additional_Attributes \n    GROUP BY attribute_id \n    ORDER BY COUNT(*) DESC \n    LIMIT 1\n)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and unique identifiers of attributes from the 'Attribute_Definitions' table that are associated with specific catalog entries in the 'Catalog_Contents_Additional_Attributes' table. The placeholder in the WHERE clause represents the value of the attribute being queried.\",\n        \"virtual_table\": \"SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT cc.catalog_entry_name\nFROM Catalog_Contents cc\nJOIN Catalog_Contents_Additional_Attributes cca ON cc.catalog_entry_id = cca.catalog_entry_id\nWHERE cca.attribute_id = (\n    SELECT attribute_id\n    FROM Catalog_Contents_Additional_Attributes\n    GROUP BY attribute_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.316",
        "c_low": "SELECT catalog_entry_name\nFROM Catalog_Contents\nWHERE catalog_entry_id IN (\n    SELECT catalog_entry_id\n    FROM Catalog_Contents_Additional_Attributes\n    GROUP BY catalog_entry_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    }\n}\n",
        "c_mid": "SELECT cc.catalog_entry_name\nFROM Catalog_Contents AS cc\nJOIN Catalog_Contents_Additional_Attributes AS cca ON cc.catalog_entry_id = cca.catalog_entry_id\nGROUP BY cca.attribute_id\nORDER BY COUNT(cca.catalog_entry_id) DESC\nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that have a next entry in the catalog hierarchy. The placeholder in the WHERE clause represents a numeric identifier for filtering entries based on their next entry ID.\",\n        \"virtual_table\": \"SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names and unique identifiers of attributes from the 'Attribute_Definitions' table that are associated with specific catalog entries in the 'Catalog_Contents_Additional_Attributes' table. The placeholder in the WHERE clause represents the value of the attribute being queried.\",\n        \"virtual_table\": \"SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT cc.catalog_entry_name\nFROM Catalog_Contents cc\nJOIN Catalog_Contents_Additional_Attributes cca ON cc.catalog_entry_id = cca.catalog_entry_id\nJOIN (\n    SELECT attribute_id\n    FROM Catalog_Contents_Additional_Attributes\n    GROUP BY attribute_id\n    HAVING COUNT(*) = (\n        SELECT MAX(attr_count)\n        FROM (\n            SELECT COUNT(*) as attr_count\n            FROM Catalog_Contents_Additional_Attributes\n            GROUP BY attribute_id\n        )\n    )\n) AS most_entries ON cca.attribute_id = most_entries.attribute_id;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of the different data types defined in the 'Attribute_Definitions' table, specifically those that have more than a specified number of occurrences. The placeholder in the HAVING clause represents the minimum count of attributes required to be included in the results.\",\n        \"virtual_table\": \"SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT catalog_entry_name\nFROM Catalog_Contents cc\nJOIN Catalog_Contents_Additional_Attributes cca ON cc.catalog_entry_id = cca.catalog_entry_id\nGROUP BY cc.catalog_entry_name\nORDER BY COUNT(cca.attribute_id) DESC\nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that have a next entry in the catalog hierarchy. The placeholder in the WHERE clause represents a numeric identifier for filtering entries based on their next entry ID.\",\n        \"virtual_table\": \"SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT cc.catalog_entry_name\nFROM Catalog_Contents AS cc\nJOIN Catalog_Contents_Additional_Attributes AS cca ON cc.catalog_entry_id = cca.catalog_entry_id\nWHERE cca.attribute_id IN (\n    SELECT attribute_id\n    FROM Catalog_Contents_Additional_Attributes\n    GROUP BY attribute_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n);",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and unique identifiers of attributes from the 'Attribute_Definitions' table that are associated with specific catalog entries in the 'Catalog_Contents_Additional_Attributes' table. The placeholder in the WHERE clause represents the value of the attribute being queried.\",\n        \"virtual_table\": \"SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT cc.catalog_entry_name\nFROM Catalog_Contents cc\nJOIN Catalog_Contents_Additional_Attributes cca ON cc.catalog_entry_id = cca.catalog_entry_id\nGROUP BY cca.attribute_id\nORDER BY COUNT(cca.catalog_entry_id) DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.317",
        "c_low": "SELECT catalog_entry_name FROM Catalog_Contents WHERE catalog_entry_id IN (SELECT catalog_entry_id FROM Catalog_Contents ORDER BY price_in_dollars DESC LIMIT 1)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    }\n}\n",
        "c_mid": "SELECT catalog_entry_name FROM Catalog_Contents WHERE price_in_dollars = (SELECT MAX(price_in_dollars) FROM Catalog_Contents)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that have a next entry in the catalog hierarchy. The placeholder in the WHERE clause represents a numeric identifier for filtering entries based on their next entry ID.\",\n        \"virtual_table\": \"SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT cc.catalog_entry_name\nFROM Catalogs c\nJOIN Catalog_Contents cc ON c.catalog_id = cc.catalog_level_number\nORDER BY cc.price_in_dollars DESC\nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT catalog_entry_name FROM Catalog_Contents WHERE price_in_dollars = (SELECT MAX(price_in_dollars) FROM Catalog_Contents)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that have a next entry in the catalog hierarchy. The placeholder in the WHERE clause represents a numeric identifier for filtering entries based on their next entry ID.\",\n        \"virtual_table\": \"SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT cc.catalog_entry_name\nFROM Catalogs c\nJOIN Catalog_Contents cc ON c.catalog_id = cc.catalog_level_number\nORDER BY cc.price_in_dollars DESC\nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT cc.catalog_entry_name\nFROM Catalogs c\nJOIN Catalog_Contents cc ON c.catalog_id = cc.catalog_id\nORDER BY cc.price_in_dollars DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.319",
        "c_low": "SELECT cs.catalog_level_name \nFROM Catalogs c \nJOIN Catalog_Contents cc ON c.catalog_id = cc.catalog_id \nJOIN Catalog_Structure cs ON cc.catalog_level_number = cs.catalog_level_number \nWHERE cc.price_in_dollars = (\n    SELECT MIN(price_in_dollars) \n    FROM Catalog_Contents \n    WHERE catalog_id = c.catalog_id\n) \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    }\n}\n",
        "c_mid": "SELECT cs.catalog_level_name \nFROM Catalogs c \nJOIN Catalog_Contents cc ON c.catalog_id = cc.catalog_id \nJOIN Catalog_Structure cs ON cc.catalog_level_number = cs.catalog_level_number \nWHERE c.catalog_id = (SELECT catalog_id \n                      FROM Catalogs \n                      ORDER BY (SELECT MIN(price_in_dollars) FROM Catalog_Contents WHERE catalog_id = Catalogs.catalog_id) \n                      LIMIT 1)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names and level numbers of catalog levels from the 'Catalog_Structure' table that fall within a specified range of level numbers. The placeholders in the WHERE clause represent the lower and upper bounds of the level number range.\",\n        \"virtual_table\": \"SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that have a next entry in the catalog hierarchy. The placeholder in the WHERE clause represents a numeric identifier for filtering entries based on their next entry ID.\",\n        \"virtual_table\": \"SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT cs.catalog_level_name\nFROM Catalogs c\nJOIN Catalog_Contents cc ON c.catalog_id = cc.catalog_id\nJOIN Catalog_Structure cs ON cc.catalog_level_number = cs.catalog_level_number\nORDER BY cc.price_in_dollars ASC\nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT cs.catalog_level_name \nFROM Catalogs c \nJOIN Catalog_Contents cc ON c.catalog_id = cc.catalog_id \nJOIN Catalog_Structure cs ON cc.catalog_level_number = cs.catalog_level_number \nWHERE c.catalog_id = (SELECT catalog_id \n                      FROM Catalog_Contents \n                      ORDER BY price_in_dollars ASC \n                      LIMIT 1)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names and level numbers of catalog levels from the 'Catalog_Structure' table that fall within a specified range of level numbers. The placeholders in the WHERE clause represent the lower and upper bounds of the level number range.\",\n        \"virtual_table\": \"SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that have a next entry in the catalog hierarchy. The placeholder in the WHERE clause represents a numeric identifier for filtering entries based on their next entry ID.\",\n        \"virtual_table\": \"SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT cs.catalog_level_name\nFROM Catalogs c\nJOIN Catalog_Contents cc ON c.catalog_id = cc.catalog_id\nJOIN Catalog_Structure cs ON cc.catalog_level_number = cs.catalog_level_number\nORDER BY cc.price_in_dollars ASC\nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT cs.catalog_level_name\nFROM Catalogs c\nJOIN Catalog_Contents cc ON c.catalog_id = cc.catalog_id\nJOIN Catalog_Structure cs ON cc.catalog_level_number = cs.catalog_level_number\nORDER BY cc.price_in_dollars ASC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.320",
        "c_low": "SELECT cs.catalog_level_name\nFROM Catalogs c\nJOIN Catalog_Contents cc ON c.catalog_id = cc.catalog_id\nWHERE cc.price_in_dollars = (\n    SELECT MIN(price_in_dollars)\n    FROM Catalog_Contents\n);\n",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT cs.catalog_level_name \nFROM Catalog_Contents cc \nJOIN Catalog_Structure cs ON cc.catalog_level_number = cs.catalog_level_number \nWHERE cc.price_in_dollars = (\n    SELECT MIN(price_in_dollars) \n    FROM Catalog_Contents\n);",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names and level numbers of catalog levels from the 'Catalog_Structure' table that fall within a specified range of level numbers. The placeholders in the WHERE clause represent the lower and upper bounds of the level number range.\",\n        \"virtual_table\": \"SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT cs.catalog_level_name\nFROM Catalogs c\nJOIN Catalog_Contents cc ON c.catalog_id = cc.catalog_id\nWHERE cc.price_in_dollars = (\n    SELECT MIN(price_in_dollars)\n    FROM Catalog_Contents\n)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT cs.catalog_level_name \nFROM Catalog_Contents cc \nJOIN Catalog_Structure cs ON cc.catalog_level_number = cs.catalog_level_number \nWHERE cc.price_in_dollars = (SELECT MIN(price_in_dollars) FROM Catalog_Contents);",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names and level numbers of catalog levels from the 'Catalog_Structure' table that fall within a specified range of level numbers. The placeholders in the WHERE clause represent the lower and upper bounds of the level number range.\",\n        \"virtual_table\": \"SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT cs.catalog_level_name\nFROM Catalogs c\nJOIN Catalog_Contents cc ON c.catalog_id = cc.catalog_id\nWHERE cc.price_in_dollars = (\n    SELECT MIN(price_in_dollars)\n    FROM Catalog_Contents\n)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT cs.catalog_level_name\nFROM Catalogs c\nJOIN Catalog_Contents cc ON c.catalog_id = cc.catalog_id\nWHERE cc.price_in_dollars = (\n    SELECT MIN(price_in_dollars)\n    FROM Catalog_Contents\n)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.329",
        "c_low": "SELECT DISTINCT(catalog_entry_name) FROM Catalog_Contents WHERE catalog_level_number = '8'",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    }\n}\n",
        "c_mid": "SELECT catalog_entry_name FROM Catalog_Contents WHERE catalog_level_number = '8'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and level numbers of catalog levels from the 'Catalog_Structure' table that fall within a specified range of level numbers. The placeholders in the WHERE clause represent the lower and upper bounds of the level number range.\",\n        \"virtual_table\": \"SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that have a next entry in the catalog hierarchy. The placeholder in the WHERE clause represents a numeric identifier for filtering entries based on their next entry ID.\",\n        \"virtual_table\": \"SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT catalog_entry_name FROM Catalog_Contents WHERE catalog_level_number = '8';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT catalog_entry_name FROM Catalog_Contents WHERE catalog_level_number = '8'",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and level numbers of catalog levels from the 'Catalog_Structure' table that fall within a specified range of level numbers. The placeholders in the WHERE clause represent the lower and upper bounds of the level number range.\",\n        \"virtual_table\": \"SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that have a next entry in the catalog hierarchy. The placeholder in the WHERE clause represents a numeric identifier for filtering entries based on their next entry ID.\",\n        \"virtual_table\": \"SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    }\n}\n",
        "t_2": "SELECT catalog_entry_name FROM Catalog_Contents WHERE catalog_level_number = '8';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT catalog_entry_name FROM Catalog_Contents WHERE catalog_level_number = '8';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.330",
        "c_low": "SELECT DISTINCT(catalog_entry_name) FROM Catalog_Contents WHERE catalog_level_number = '8'",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    }\n}\n",
        "c_mid": "SELECT catalog_entry_name FROM Catalog_Contents WHERE catalog_level_number = '8'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and level numbers of catalog levels from the 'Catalog_Structure' table that fall within a specified range of level numbers. The placeholders in the WHERE clause represent the lower and upper bounds of the level number range.\",\n        \"virtual_table\": \"SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that have a next entry in the catalog hierarchy. The placeholder in the WHERE clause represents a numeric identifier for filtering entries based on their next entry ID.\",\n        \"virtual_table\": \"SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT catalog_entry_name FROM Catalog_Contents WHERE catalog_level_number = '8';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT catalog_entry_name FROM Catalog_Contents WHERE catalog_level_number = '8'",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and level numbers of catalog levels from the 'Catalog_Structure' table that fall within a specified range of level numbers. The placeholders in the WHERE clause represent the lower and upper bounds of the level number range.\",\n        \"virtual_table\": \"SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that have a next entry in the catalog hierarchy. The placeholder in the WHERE clause represents a numeric identifier for filtering entries based on their next entry ID.\",\n        \"virtual_table\": \"SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    }\n}\n",
        "t_2": "SELECT catalog_entry_name FROM Catalog_Contents WHERE catalog_level_number = '8';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and unique identifiers of attributes from the 'Attribute_Definitions' table that are associated with specific catalog entries in the 'Catalog_Contents_Additional_Attributes' table. The placeholder in the WHERE clause represents the value of the attribute being queried.\",\n        \"virtual_table\": \"SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT catalog_entry_name FROM Catalog_Contents WHERE catalog_level_number = '8';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.331",
        "c_low": "SELECT catalog_entry_name FROM Catalog_Contents WHERE length < 3 OR height > 5;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT catalog_entry_name FROM Catalog_Contents WHERE length < 3 OR height > 5;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT catalog_entry_name FROM Catalog_Contents WHERE length < 3 OR height > 5;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT catalog_entry_name FROM Catalog_Contents WHERE length < 3 OR height > 5;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT catalog_entry_name FROM Catalog_Contents WHERE length < 3 OR height > 5;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT catalog_entry_name FROM Catalog_Contents WHERE length < 3 OR height > 5;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.332",
        "c_low": "SELECT DISTINCT(catalog_entry_name) FROM Catalog_Contents WHERE length < 3 OR length > 5;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    }\n}\n",
        "c_mid": "SELECT catalog_entry_name FROM Catalog_Contents WHERE length < 3 OR length > 5;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that have a next entry in the catalog hierarchy. The placeholder in the WHERE clause represents a numeric identifier for filtering entries based on their next entry ID.\",\n        \"virtual_table\": \"SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names and level numbers of catalog levels from the 'Catalog_Structure' table that fall within a specified range of level numbers. The placeholders in the WHERE clause represent the lower and upper bounds of the level number range.\",\n        \"virtual_table\": \"SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT catalog_entry_name FROM Catalog_Contents WHERE length < 3 OR length > 5;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT catalog_entry_name FROM Catalog_Contents WHERE length < 3 OR length > 5;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that have a next entry in the catalog hierarchy. The placeholder in the WHERE clause represents a numeric identifier for filtering entries based on their next entry ID.\",\n        \"virtual_table\": \"SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names and level numbers of catalog levels from the 'Catalog_Structure' table that fall within a specified range of level numbers. The placeholders in the WHERE clause represent the lower and upper bounds of the level number range.\",\n        \"virtual_table\": \"SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT catalog_entry_name FROM Catalog_Contents WHERE length < 3 OR length > 5;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT catalog_entry_name FROM Catalog_Contents WHERE length < 3 OR length > 5;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.337",
        "c_low": "SELECT date_of_latest_revision, COUNT(*) as revision_count \nFROM Catalogs \nGROUP BY date_of_latest_revision \nHAVING COUNT(*) > 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT date_of_latest_revision, COUNT(*) as revision_count\nFROM Catalogs\nGROUP BY date_of_latest_revision\nHAVING COUNT(*) > 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT date_of_latest_revision, COUNT(*) as revision_count \nFROM Catalogs \nGROUP BY date_of_latest_revision \nHAVING COUNT(*) > 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT date_of_latest_revision, COUNT(*) as revision_count \nFROM Catalogs \nGROUP BY date_of_latest_revision \nHAVING COUNT(*) > 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT date_of_latest_revision, COUNT(*) as revision_count \nFROM Catalogs \nGROUP BY date_of_latest_revision \nHAVING COUNT(*) > 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT date_of_latest_revision, COUNT(*) as revision_count \nFROM Catalogs \nGROUP BY date_of_latest_revision \nHAVING COUNT(*) > 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.338",
        "c_low": "SELECT date_of_latest_revision, COUNT(*) as revision_count \nFROM Catalogs \nGROUP BY date_of_latest_revision \nHAVING COUNT(*) > 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    }\n}\n",
        "c_mid": "SELECT date_of_latest_revision, COUNT(*) as revision_count \nFROM Catalogs \nGROUP BY date_of_latest_revision \nHAVING COUNT(*) > 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT date_of_publication, COUNT(date_of_latest_revision) AS revision_count\nFROM Catalogs\nGROUP BY date_of_publication\nHAVING revision_count > 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT date_of_latest_revision, COUNT(*) as revision_count \nFROM Catalogs \nGROUP BY date_of_latest_revision \nHAVING COUNT(*) > 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    }\n}\n",
        "t_2": "SELECT date_of_publication, COUNT(date_of_latest_revision) AS revision_count\nFROM Catalogs\nGROUP BY date_of_publication\nHAVING revision_count > 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT date_of_publication, COUNT(date_of_latest_revision) AS revision_count\nFROM Catalogs\nGROUP BY date_of_publication\nHAVING revision_count > 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.387",
        "c_low": "SELECT origin FROM flight WHERE destination = 'Honolulu';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT origin FROM flight WHERE destination = 'Honolulu';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique flight destinations from the 'Flight' table, grouped by destination and ordered by the number of flights to each destination. The placeholder in the LIMIT clause allows the user to specify the maximum number of destinations to retrieve.\",\n        \"virtual_table\": \"SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT origin FROM flight WHERE destination = 'Honolulu';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT origin FROM flight WHERE destination = 'Honolulu';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique flight destinations from the 'Flight' table, grouped by destination and ordered by the number of flights to each destination. The placeholder in the LIMIT clause allows the user to specify the maximum number of destinations to retrieve.\",\n        \"virtual_table\": \"SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT origin FROM flight WHERE destination = 'Honolulu';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT origin FROM flight WHERE destination = 'Honolulu';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.388",
        "c_low": "SELECT DISTINCT origin FROM flight WHERE destination = 'Honolulu';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT DISTINCT origin FROM flight WHERE destination = 'Honolulu';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique flight destinations from the 'Flight' table, grouped by destination and ordered by the number of flights to each destination. The placeholder in the LIMIT clause allows the user to specify the maximum number of destinations to retrieve.\",\n        \"virtual_table\": \"SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT origin FROM flight WHERE destination = 'Honolulu';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT DISTINCT origin FROM flight WHERE destination = 'Honolulu';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique flight destinations from the 'Flight' table, grouped by destination and ordered by the number of flights to each destination. The placeholder in the LIMIT clause allows the user to specify the maximum number of destinations to retrieve.\",\n        \"virtual_table\": \"SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT origin FROM flight WHERE destination = 'Honolulu';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT DISTINCT origin FROM flight WHERE destination = 'Honolulu';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.390",
        "c_low": "SELECT departure_date, arrival_date FROM flight WHERE origin = 'LA' AND destination = 'Honolulu';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the flight numbers from the 'Flight' table that are operated by a specific aircraft model. The placeholder in the WHERE clause represents the name of the aircraft model.\",\n        \"virtual_table\": \"SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT departure_date, arrival_date FROM flight WHERE origin = 'LA' AND destination = 'Honolulu';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT departure_date, arrival_date FROM flight WHERE origin = 'LA' AND destination = 'Honolulu';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT departure_date, arrival_date FROM flight WHERE origin = 'LA' AND destination = 'Honolulu';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT departure_date, arrival_date FROM flight WHERE origin = 'LA' AND destination = 'Honolulu';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the flight numbers from the 'Flight' table that are operated by a specific aircraft model. The placeholder in the WHERE clause represents the name of the aircraft model.\",\n        \"virtual_table\": \"SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT departure_date, arrival_date FROM flight WHERE origin = 'LA' AND destination = 'Honolulu';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.394",
        "c_low": "SELECT AVG(price) AS average_price FROM flight WHERE origin = 'LA' AND destination = 'Honolulu';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT AVG(price) AS average_price FROM flight WHERE origin = 'LA' AND destination = 'Honolulu';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of flight numbers and their corresponding distances from the 'Flight' table, sorted by ticket price in descending order. The placeholder in the LIMIT clause indicates the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT AVG(price) AS average_price FROM flight WHERE origin = 'LA' AND destination = 'Honolulu';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT AVG(price) AS average_price FROM flight WHERE origin = 'LA' AND destination = 'Honolulu';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of flight numbers and their corresponding distances from the 'Flight' table, sorted by ticket price in descending order. The placeholder in the LIMIT clause indicates the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT AVG(price) AS average_price FROM flight WHERE origin = 'LA' AND destination = 'Honolulu';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT AVG(price) AS average_price FROM flight WHERE origin = 'LA' AND destination = 'Honolulu';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.400",
        "c_low": "SELECT flno FROM flight ORDER BY distance ASC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the flight numbers from the 'Flight' table that are operated by a specific aircraft model. The placeholder in the WHERE clause represents the name of the aircraft model.\",\n        \"virtual_table\": \"SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of aircraft associated with a specific flight number from the 'Flight' table. The placeholder in the WHERE clause represents the flight number being queried.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT flno FROM flight ORDER BY distance ASC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of flight numbers and their corresponding distances from the 'Flight' table, sorted by ticket price in descending order. The placeholder in the LIMIT clause indicates the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique flight destinations from the 'Flight' table, grouped by destination and ordered by the number of flights to each destination. The placeholder in the LIMIT clause allows the user to specify the maximum number of destinations to retrieve.\",\n        \"virtual_table\": \"SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT flno FROM flight ORDER BY distance ASC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT flno FROM flight ORDER BY distance ASC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of flight numbers and their corresponding distances from the 'Flight' table, sorted by ticket price in descending order. The placeholder in the LIMIT clause indicates the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique flight destinations from the 'Flight' table, grouped by destination and ordered by the number of flights to each destination. The placeholder in the LIMIT clause allows the user to specify the maximum number of destinations to retrieve.\",\n        \"virtual_table\": \"SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT flno FROM flight ORDER BY distance ASC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the flight numbers from the 'Flight' table that are operated by a specific aircraft model. The placeholder in the WHERE clause represents the name of the aircraft model.\",\n        \"virtual_table\": \"SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of aircraft associated with a specific flight number from the 'Flight' table. The placeholder in the WHERE clause represents the flight number being queried.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT flno FROM flight ORDER BY distance ASC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.402",
        "c_low": "SELECT AVG(distance) AS average_distance, AVG(price) AS average_price FROM flight WHERE origin = 'LA';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT AVG(distance) AS average_distance, AVG(price) AS average_price FROM flight WHERE origin = 'LA';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of flight numbers and their corresponding distances from the 'Flight' table, sorted by ticket price in descending order. The placeholder in the LIMIT clause indicates the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of aircraft from the 'Aircraft' table that have a maximum travel distance greater than the average distance of all aircraft. The subquery calculates the average distance, and the main query filters aircraft based on this value.\",\n        \"virtual_table\": \"SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique flight destinations from the 'Flight' table, grouped by destination and ordered by the number of flights to each destination. The placeholder in the LIMIT clause allows the user to specify the maximum number of destinations to retrieve.\",\n        \"virtual_table\": \"SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT AVG(distance) AS average_distance, AVG(price) AS average_price FROM flight WHERE origin = 'LA';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT AVG(distance) AS average_distance, AVG(price) AS average_price FROM flight WHERE origin = 'LA';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of flight numbers and their corresponding distances from the 'Flight' table, sorted by ticket price in descending order. The placeholder in the LIMIT clause indicates the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of aircraft from the 'Aircraft' table that have a maximum travel distance greater than the average distance of all aircraft. The subquery calculates the average distance, and the main query filters aircraft based on this value.\",\n        \"virtual_table\": \"SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique flight destinations from the 'Flight' table, grouped by destination and ordered by the number of flights to each destination. The placeholder in the LIMIT clause allows the user to specify the maximum number of destinations to retrieve.\",\n        \"virtual_table\": \"SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT AVG(distance) AS average_distance, AVG(price) AS average_price FROM flight WHERE origin = 'LA';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT AVG(distance) AS average_distance, AVG(price) AS average_price FROM flight WHERE origin = 'LA';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.407",
        "c_low": "SELECT origin, COUNT(*) AS flight_count\nFROM flight\nGROUP BY origin\nORDER BY flight_count DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT origin FROM flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique flight destinations from the 'Flight' table, grouped by destination and ordered by the number of flights to each destination. The placeholder in the LIMIT clause allows the user to specify the maximum number of destinations to retrieve.\",\n        \"virtual_table\": \"SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT origin, COUNT(*) AS flight_count\nFROM flight\nGROUP BY origin\nORDER BY flight_count DESC\nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT origin FROM flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique flight destinations from the 'Flight' table, grouped by destination and ordered by the number of flights to each destination. The placeholder in the LIMIT clause allows the user to specify the maximum number of destinations to retrieve.\",\n        \"virtual_table\": \"SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT origin, COUNT(*) AS flight_count\nFROM flight\nGROUP BY origin\nORDER BY flight_count DESC\nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT origin, COUNT(*) as flight_count \nFROM flight \nGROUP BY origin \nORDER BY flight_count DESC \nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.408",
        "c_low": "SELECT origin, COUNT(*) AS flight_count\nFROM flight\nGROUP BY origin\nORDER BY flight_count DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT origin FROM flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique flight destinations from the 'Flight' table, grouped by destination and ordered by the number of flights to each destination. The placeholder in the LIMIT clause allows the user to specify the maximum number of destinations to retrieve.\",\n        \"virtual_table\": \"SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT origin, COUNT(*) AS flight_count\nFROM flight\nGROUP BY origin\nORDER BY flight_count DESC\nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT origin FROM flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique flight destinations from the 'Flight' table, grouped by destination and ordered by the number of flights to each destination. The placeholder in the LIMIT clause allows the user to specify the maximum number of destinations to retrieve.\",\n        \"virtual_table\": \"SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT origin, COUNT(*) AS flight_count\nFROM flight\nGROUP BY origin\nORDER BY flight_count DESC\nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT origin, COUNT(*) AS flight_count \nFROM flight \nGROUP BY origin \nORDER BY flight_count DESC \nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.415",
        "c_low": "SELECT T2.name, COUNT(T1.flno) AS number_of_flights \nFROM flight AS T1 \nJOIN aircraft AS T2 ON T1.aid = T2.aid \nGROUP BY T2.name;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the flight numbers from the 'Flight' table that are operated by a specific aircraft model. The placeholder in the WHERE clause represents the name of the aircraft model.\",\n        \"virtual_table\": \"SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of aircraft associated with a specific flight number from the 'Flight' table. The placeholder in the WHERE clause represents the flight number being queried.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT a.name, COUNT(f.flno) AS number_of_flights\nFROM aircraft a\nLEFT JOIN flight f ON a.aid = f.aid\nGROUP BY a.aid, a.name;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of aircraft IDs and their corresponding names from the 'aircraft' table, sorted by the maximum distance each aircraft can travel in descending order. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of flight numbers and their corresponding distances from the 'Flight' table, sorted by ticket price in descending order. The placeholder in the LIMIT clause indicates the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT T2.name, COUNT(T1.flno) AS number_of_flights \nFROM flight AS T1 \nJOIN aircraft AS T2 ON T1.aid = T2.aid \nGROUP BY T2.aid",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of aircraft that are associated with flights, specifically those that have been used for a number of flights equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of flights for which the aircraft must be listed.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT a.name, COUNT(f.flno) AS number_of_flights\nFROM aircraft a\nLEFT JOIN flight f ON a.aid = f.aid\nGROUP BY a.aid, a.name;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of aircraft IDs and their corresponding names from the 'aircraft' table, sorted by the maximum distance each aircraft can travel in descending order. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of flight numbers and their corresponding distances from the 'Flight' table, sorted by ticket price in descending order. The placeholder in the LIMIT clause indicates the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.name, COUNT(T1.flno) AS number_of_flights FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T2.name",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the flight numbers from the 'Flight' table that are operated by a specific aircraft model. The placeholder in the WHERE clause represents the name of the aircraft model.\",\n        \"virtual_table\": \"SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of aircraft associated with a specific flight number from the 'Flight' table. The placeholder in the WHERE clause represents the flight number being queried.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of aircraft that are associated with flights, specifically those that have been used for a number of flights equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of flights for which the aircraft must be listed.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT a.name, COUNT(f.flno) AS number_of_flights\nFROM aircraft a\nLEFT JOIN flight f ON a.aid = f.aid\nGROUP BY a.aid;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.416",
        "c_low": "SELECT T2.name, COUNT(T1.flno) AS flight_count \nFROM flight AS T1 \nJOIN aircraft AS T2 ON T1.aid = T2.aid \nGROUP BY T2.name;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the flight numbers from the 'Flight' table that are operated by a specific aircraft model. The placeholder in the WHERE clause represents the name of the aircraft model.\",\n        \"virtual_table\": \"SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of aircraft associated with a specific flight number from the 'Flight' table. The placeholder in the WHERE clause represents the flight number being queried.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft. The placeholders in the WHERE clause represent the employee's name.\",\n        \"virtual_table\": \"SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT a.name, COUNT(f.flno) AS flight_count \nFROM aircraft a \nLEFT JOIN flight f ON a.aid = f.aid \nGROUP BY a.name;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of aircraft from the 'Aircraft' table that have a maximum travel distance greater than the average distance of all aircraft. The subquery calculates the average distance, and the main query filters aircraft based on this value.\",\n        \"virtual_table\": \"SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of aircraft IDs and their corresponding names from the 'aircraft' table, sorted by the maximum distance each aircraft can travel in descending order. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT T2.name, COUNT(T1.flno) AS flight_count FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T2.name",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of aircraft that are associated with flights, specifically those that have been used for a number of flights equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of flights for which the aircraft must be listed.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT a.name, COUNT(f.flno) AS flight_count \nFROM aircraft a \nLEFT JOIN flight f ON a.aid = f.aid \nGROUP BY a.aid, a.name;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of aircraft from the 'Aircraft' table that have a maximum travel distance greater than the average distance of all aircraft. The subquery calculates the average distance, and the main query filters aircraft based on this value.\",\n        \"virtual_table\": \"SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of aircraft IDs and their corresponding names from the 'aircraft' table, sorted by the maximum distance each aircraft can travel in descending order. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.name, COUNT(T1.flno) AS flight_count FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T2.name;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the flight numbers from the 'Flight' table that are operated by a specific aircraft model. The placeholder in the WHERE clause represents the name of the aircraft model.\",\n        \"virtual_table\": \"SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of aircraft associated with a specific flight number from the 'Flight' table. The placeholder in the WHERE clause represents the flight number being queried.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of aircraft that are associated with flights, specifically those that have been used for a number of flights equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of flights for which the aircraft must be listed.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT aircraft.name, COUNT(flight.flno) AS flight_count \nFROM aircraft \nLEFT JOIN flight ON aircraft.aid = flight.aid \nGROUP BY aircraft.name;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft. The placeholders in the WHERE clause represent the employee's name.\",\n        \"virtual_table\": \"SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft model. The placeholders in the JOIN clauses represent the employee ID and the aircraft name, allowing users to filter results based on the desired aircraft model.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.429",
        "c_low": "SELECT name FROM employee WHERE eid NOT IN (SELECT eid FROM certificate JOIN aircraft ON certificate.aid = aircraft.aid WHERE aircraft.name = 'Boeing 737-800')",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft. The placeholders in the WHERE clause represent the employee's name.\",\n        \"virtual_table\": \"SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft model. The placeholders in the JOIN clauses represent the employee ID and the aircraft name, allowing users to filter results based on the desired aircraft model.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies employees from the 'Employee' table who do not hold any certificates related to aircraft. The query uses the EXCEPT clause to exclude those employees who are present in the 'Certificate' table, ensuring that only those without certifications are selected.\",\n        \"virtual_table\": \"SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate\"\n    }\n}\n",
        "c_mid": "SELECT name FROM employee WHERE eid NOT IN (SELECT eid FROM certificate WHERE aid IN (SELECT aid FROM aircraft WHERE name = 'Boeing 737-800'));",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT name FROM employee WHERE eid NOT IN (SELECT eid FROM certificate JOIN aircraft ON certificate.aid = aircraft.aid WHERE aircraft.name = 'Boeing 737-800');",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and salaries of employees who hold certificates for aircraft. The data is aggregated by employee ID, and the results are ordered by the number of certificates held, allowing users to see which employees are most certified. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies employees who hold certificates for a specific aircraft model. The query uses an INTERSECT operation to find employees who are certified for the same aircraft model specified by the placeholder in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT name FROM employee WHERE eid NOT IN (SELECT eid FROM certificate WHERE aid IN (SELECT aid FROM aircraft WHERE name = 'Boeing 737-800'));",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT name FROM employee WHERE eid NOT IN (SELECT eid FROM certificate WHERE aid IN (SELECT aid FROM aircraft WHERE name = 'Boeing 737-800'));",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies employees from the 'Employee' table who do not hold any certificates related to aircraft. The query uses the EXCEPT clause to exclude those employees who are present in the 'Certificate' table, ensuring that only those without certifications are selected.\",\n        \"virtual_table\": \"SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and salaries of employees who hold certificates for aircraft. The data is aggregated by employee ID, and the results are ordered by the number of certificates held, allowing users to see which employees are most certified. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the flight numbers from the 'Flight' table that are operated by a specific aircraft model. The placeholder in the WHERE clause represents the name of the aircraft model.\",\n        \"virtual_table\": \"SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT name FROM employee WHERE eid NOT IN (SELECT eid FROM certificate JOIN aircraft ON certificate.aid = aircraft.aid WHERE aircraft.name = 'Boeing 737-800');",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft. The placeholders in the WHERE clause represent the employee's name.\",\n        \"virtual_table\": \"SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft model. The placeholders in the JOIN clauses represent the employee ID and the aircraft name, allowing users to filter results based on the desired aircraft model.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies employees who hold certificates for a specific aircraft model. The query uses an INTERSECT operation to find employees who are certified for the same aircraft model specified by the placeholder in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.430",
        "c_low": "SELECT name FROM employee WHERE eid NOT IN (SELECT eid FROM certificate JOIN aircraft ON certificate.aid = aircraft.aid WHERE aircraft.name = 'Boeing 737-800')",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft. The placeholders in the WHERE clause represent the employee's name.\",\n        \"virtual_table\": \"SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft model. The placeholders in the JOIN clauses represent the employee ID and the aircraft name, allowing users to filter results based on the desired aircraft model.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies employees from the 'Employee' table who do not hold any certificates related to aircraft. The query uses the EXCEPT clause to exclude those employees who are present in the 'Certificate' table, ensuring that only those without certifications are selected.\",\n        \"virtual_table\": \"SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate\"\n    }\n}\n",
        "c_mid": "SELECT e.name \nFROM employee e \nLEFT JOIN certificate c ON e.eid = c.eid \nLEFT JOIN aircraft a ON c.aid = a.aid \nWHERE a.name != 'Boeing 737-800' OR a.name IS NULL;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT name FROM employee WHERE eid NOT IN (SELECT T1.eid FROM certificate AS T2 JOIN aircraft AS T3 ON T2.aid = T3.aid WHERE T3.name = 'Boeing 737-800')",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies employees who hold certificates for a specific aircraft model. The query uses an INTERSECT operation to find employees who are certified for the same aircraft model specified by the placeholder in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and salaries of employees who hold certificates for aircraft. The data is aggregated by employee ID, and the results are ordered by the number of certificates held, allowing users to see which employees are most certified. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT e.name \nFROM employee e \nLEFT JOIN certificate c ON e.eid = c.eid \nLEFT JOIN aircraft a ON c.aid = a.aid \nWHERE a.name != 'Boeing 737-800' OR a.name IS NULL;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT name FROM employee WHERE eid NOT IN (SELECT eid FROM certificate WHERE aid IN (SELECT aid FROM aircraft WHERE name = 'Boeing 737-800'));",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies employees from the 'Employee' table who do not hold any certificates related to aircraft. The query uses the EXCEPT clause to exclude those employees who are present in the 'Certificate' table, ensuring that only those without certifications are selected.\",\n        \"virtual_table\": \"SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and salaries of employees who hold certificates for aircraft. The data is aggregated by employee ID, and the results are ordered by the number of certificates held, allowing users to see which employees are most certified. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT name FROM employee WHERE eid NOT IN (SELECT T1.eid FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid JOIN aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = 'Boeing 737-800')",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft. The placeholders in the WHERE clause represent the employee's name.\",\n        \"virtual_table\": \"SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft model. The placeholders in the JOIN clauses represent the employee ID and the aircraft name, allowing users to filter results based on the desired aircraft model.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies employees who hold certificates for a specific aircraft model. The query uses an INTERSECT operation to find employees who are certified for the same aircraft model specified by the placeholder in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.431",
        "c_low": "SELECT T3.name FROM Aircraft AS T3 JOIN Certificate AS T2 ON T3.aid = T2.aid GROUP BY T3.name ORDER BY COUNT(T2.eid) ASC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft. The placeholders in the WHERE clause represent the employee's name.\",\n        \"virtual_table\": \"SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft model. The placeholders in the JOIN clauses represent the employee ID and the aircraft name, allowing users to filter results based on the desired aircraft model.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies employees from the 'Employee' table who do not hold any certificates related to aircraft. The query uses the EXCEPT clause to exclude those employees who are present in the 'Certificate' table, ensuring that only those without certifications are selected.\",\n        \"virtual_table\": \"SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate\"\n    }\n}\n",
        "c_mid": "SELECT a.name\nFROM aircraft a\nJOIN certificate c ON a.aid = c.aid\nGROUP BY a.aid\nORDER BY COUNT(c.eid) ASC\nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of aircraft IDs and their corresponding names from the 'aircraft' table, sorted by the maximum distance each aircraft can travel in descending order. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT T3.name FROM Aircraft AS T3 JOIN Certificate AS T2 ON T3.aid = T2.aid GROUP BY T3.aid ORDER BY COUNT(T2.eid) ASC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and salaries of employees who hold certificates for aircraft. The data is aggregated by employee ID, and the results are ordered by the number of certificates held, allowing users to see which employees are most certified. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies employees who hold certificates for a specific aircraft model. The query uses an INTERSECT operation to find employees who are certified for the same aircraft model specified by the placeholder in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of aircraft that are associated with flights, specifically those that have been used for a number of flights equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of flights for which the aircraft must be listed.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT a.name\nFROM aircraft a\nJOIN certificate c ON a.aid = c.aid\nGROUP BY a.aid\nORDER BY COUNT(c.eid) ASC\nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of aircraft IDs and their corresponding names from the 'aircraft' table, sorted by the maximum distance each aircraft can travel in descending order. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T2.aid ORDER BY COUNT(T1.eid) ASC LIMIT 1",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and salaries of employees who hold certificates for aircraft. The data is aggregated by employee ID, and the results are ordered by the number of certificates held, allowing users to see which employees are most certified. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of aircraft that are associated with flights, specifically those that have been used for a number of flights equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of flights for which the aircraft must be listed.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies employees from the 'Employee' table who do not hold any certificates related to aircraft. The query uses the EXCEPT clause to exclude those employees who are present in the 'Certificate' table, ensuring that only those without certifications are selected.\",\n        \"virtual_table\": \"SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate\"\n    }\n}\n",
        "t_3+": "SELECT T3.name FROM Aircraft AS T3 JOIN Certificate AS T2 ON T3.aid = T2.aid GROUP BY T3.name ORDER BY COUNT(T2.eid) ASC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft. The placeholders in the WHERE clause represent the employee's name.\",\n        \"virtual_table\": \"SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft model. The placeholders in the JOIN clauses represent the employee ID and the aircraft name, allowing users to filter results based on the desired aircraft model.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies employees who hold certificates for a specific aircraft model. The query uses an INTERSECT operation to find employees who are certified for the same aircraft model specified by the placeholder in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.432",
        "c_low": "SELECT T3.name FROM Aircraft AS T3 JOIN (SELECT T2.aid, COUNT(T2.eid) AS certified_count FROM Certificate AS T2 GROUP BY T2.aid) AS T1 ON T3.aid = T1.aid WHERE T1.certified_count = (SELECT MIN(certified_count) FROM (SELECT COUNT(T2.eid) AS certified_count FROM Certificate AS T2 GROUP BY T2.aid));",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft. The placeholders in the WHERE clause represent the employee's name.\",\n        \"virtual_table\": \"SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft model. The placeholders in the JOIN clauses represent the employee ID and the aircraft name, allowing users to filter results based on the desired aircraft model.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies employees from the 'Employee' table who do not hold any certificates related to aircraft. The query uses the EXCEPT clause to exclude those employees who are present in the 'Certificate' table, ensuring that only those without certifications are selected.\",\n        \"virtual_table\": \"SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate\"\n    }\n}\n",
        "c_mid": "SELECT a.name\nFROM aircraft a\nLEFT JOIN certificate c ON a.aid = c.aid\nGROUP BY a.aid\nORDER BY COUNT(c.eid) ASC\nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT T3.name FROM Aircraft AS T3 JOIN Certificate AS T2 ON T3.aid = T2.aid GROUP BY T3.aid ORDER BY COUNT(T2.eid) ASC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies employees who hold certificates for a specific aircraft model. The query uses an INTERSECT operation to find employees who are certified for the same aircraft model specified by the placeholder in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and salaries of employees who hold certificates for aircraft. The data is aggregated by employee ID, and the results are ordered by the number of certificates held, allowing users to see which employees are most certified. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of aircraft that are associated with flights, specifically those that have been used for a number of flights equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of flights for which the aircraft must be listed.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT a.name\nFROM aircraft a\nJOIN certificate c ON a.aid = c.aid\nGROUP BY a.aid\nORDER BY COUNT(c.eid) ASC\nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T2.name FROM Aircraft AS T2 JOIN Certificate AS T1 ON T2.aid = T1.aid GROUP BY T2.aid ORDER BY COUNT(T1.eid) ASC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and salaries of employees who hold certificates for aircraft. The data is aggregated by employee ID, and the results are ordered by the number of certificates held, allowing users to see which employees are most certified. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of aircraft that are associated with flights, specifically those that have been used for a number of flights equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of flights for which the aircraft must be listed.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies employees from the 'Employee' table who do not hold any certificates related to aircraft. The query uses the EXCEPT clause to exclude those employees who are present in the 'Certificate' table, ensuring that only those without certifications are selected.\",\n        \"virtual_table\": \"SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate\"\n    }\n}\n",
        "t_3+": "SELECT T3.name FROM Aircraft AS T3 JOIN Certificate AS T2 ON T3.aid = T2.aid GROUP BY T3.name ORDER BY COUNT(T2.eid) ASC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft. The placeholders in the WHERE clause represent the employee's name.\",\n        \"virtual_table\": \"SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft model. The placeholders in the JOIN clauses represent the employee ID and the aircraft name, allowing users to filter results based on the desired aircraft model.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies employees who hold certificates for a specific aircraft model. The query uses an INTERSECT operation to find employees who are certified for the same aircraft model specified by the placeholder in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.433",
        "c_low": "SELECT T3.name, T3.distance FROM Aircraft AS T3 JOIN Certificate AS T2 ON T3.aid = T2.aid GROUP BY T3.aid HAVING COUNT(T2.eid) >= 5 AND T3.distance > 5000;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft. The placeholders in the WHERE clause represent the employee's name.\",\n        \"virtual_table\": \"SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft model. The placeholders in the JOIN clauses represent the employee ID and the aircraft name, allowing users to filter results based on the desired aircraft model.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the flight numbers from the 'Flight' table that are operated by a specific aircraft model. The placeholder in the WHERE clause represents the name of the aircraft model.\",\n        \"virtual_table\": \"SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT a.name, a.distance \nFROM aircraft a \nJOIN certificate c ON a.aid = c.aid \nGROUP BY a.aid \nHAVING a.distance > 5000 AND COUNT(c.eid) >= 5;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of aircraft IDs and their corresponding names from the 'aircraft' table, sorted by the maximum distance each aircraft can travel in descending order. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of aircraft from the 'Aircraft' table that have a maximum travel distance greater than the average distance of all aircraft. The subquery calculates the average distance, and the main query filters aircraft based on this value.\",\n        \"virtual_table\": \"SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)\"\n    }\n}\n",
        "c_high": "SELECT A.name, A.distance FROM aircraft AS A JOIN certificate AS C ON A.aid = C.aid GROUP BY A.aid HAVING A.distance > 5000 AND COUNT(C.eid) >= 5;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and salaries of employees who hold certificates for aircraft. The data is aggregated by employee ID, and the results are ordered by the number of certificates held, allowing users to see which employees are most certified. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of aircraft that are associated with flights, specifically those that have been used for a number of flights equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of flights for which the aircraft must be listed.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies employees who hold certificates for a specific aircraft model. The query uses an INTERSECT operation to find employees who are certified for the same aircraft model specified by the placeholder in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT a.name, a.distance \nFROM aircraft a \nJOIN certificate c ON a.aid = c.aid \nWHERE a.distance > 5000 \nGROUP BY a.aid \nHAVING COUNT(c.eid) >= 5;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of aircraft IDs and their corresponding names from the 'aircraft' table, sorted by the maximum distance each aircraft can travel in descending order. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of aircraft from the 'Aircraft' table that have a maximum travel distance greater than the average distance of all aircraft. The subquery calculates the average distance, and the main query filters aircraft based on this value.\",\n        \"virtual_table\": \"SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)\"\n    }\n}\n",
        "t_2": "SELECT A.name, A.distance FROM aircraft AS A JOIN certificate AS C ON A.aid = C.aid GROUP BY A.aid HAVING A.distance > 5000 AND COUNT(C.eid) >= 5;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and salaries of employees who hold certificates for aircraft. The data is aggregated by employee ID, and the results are ordered by the number of certificates held, allowing users to see which employees are most certified. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of aircraft that are associated with flights, specifically those that have been used for a number of flights equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of flights for which the aircraft must be listed.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the flight numbers from the 'Flight' table that are operated by a specific aircraft model. The placeholder in the WHERE clause represents the name of the aircraft model.\",\n        \"virtual_table\": \"SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT T3.name, T3.distance FROM Aircraft AS T3 JOIN Certificate AS T2 ON T3.aid = T2.aid GROUP BY T3.aid HAVING COUNT(T2.eid) >= 5 AND T3.distance > 5000;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft. The placeholders in the WHERE clause represent the employee's name.\",\n        \"virtual_table\": \"SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft model. The placeholders in the JOIN clauses represent the employee ID and the aircraft name, allowing users to filter results based on the desired aircraft model.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies employees who hold certificates for a specific aircraft model. The query uses an INTERSECT operation to find employees who are certified for the same aircraft model specified by the placeholder in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.434",
        "c_low": "SELECT name, distance FROM aircraft WHERE distance > 5000",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the flight numbers from the 'Flight' table that are operated by a specific aircraft model. The placeholder in the WHERE clause represents the name of the aircraft model.\",\n        \"virtual_table\": \"SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft. The placeholders in the WHERE clause represent the employee's name.\",\n        \"virtual_table\": \"SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names of aircraft associated with a specific flight number from the 'Flight' table. The placeholder in the WHERE clause represents the flight number being queried.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT name, distance FROM aircraft WHERE distance > 5000",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of aircraft from the 'Aircraft' table that have a maximum travel distance greater than the average distance of all aircraft. The subquery calculates the average distance, and the main query filters aircraft based on this value.\",\n        \"virtual_table\": \"SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of aircraft IDs and their corresponding names from the 'aircraft' table, sorted by the maximum distance each aircraft can travel in descending order. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of flight numbers and their corresponding distances from the 'Flight' table, sorted by ticket price in descending order. The placeholder in the LIMIT clause indicates the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT T2.name, T2.distance FROM aircraft AS T2 WHERE T2.distance > 5000 AND T2.aid IN (SELECT T1.aid FROM flight AS T1 GROUP BY T1.aid HAVING COUNT(*) >= 5);",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of aircraft that are associated with flights, specifically those that have been used for a number of flights equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of flights for which the aircraft must be listed.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT name, distance FROM aircraft WHERE distance > 5000",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of aircraft from the 'Aircraft' table that have a maximum travel distance greater than the average distance of all aircraft. The subquery calculates the average distance, and the main query filters aircraft based on this value.\",\n        \"virtual_table\": \"SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of aircraft IDs and their corresponding names from the 'aircraft' table, sorted by the maximum distance each aircraft can travel in descending order. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of flight numbers and their corresponding distances from the 'Flight' table, sorted by ticket price in descending order. The placeholder in the LIMIT clause indicates the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.name, T2.distance FROM Aircraft AS T2 JOIN (SELECT T1.aid FROM Flight AS T1 GROUP BY T1.aid HAVING COUNT(T1.flno) >= 5) AS T3 ON T2.aid = T3.aid WHERE T2.distance > 5000;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of aircraft that are associated with flights, specifically those that have been used for a number of flights equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of flights for which the aircraft must be listed.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the flight numbers from the 'Flight' table that are operated by a specific aircraft model. The placeholder in the WHERE clause represents the name of the aircraft model.\",\n        \"virtual_table\": \"SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names of aircraft associated with a specific flight number from the 'Flight' table. The placeholder in the WHERE clause represents the flight number being queried.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT name, distance FROM aircraft WHERE distance > 5000",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft. The placeholders in the WHERE clause represent the employee's name.\",\n        \"virtual_table\": \"SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft model. The placeholders in the JOIN clauses represent the employee ID and the aircraft name, allowing users to filter results based on the desired aircraft model.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.437",
        "c_low": "SELECT e.name, e.salary \nFROM employee e \nJOIN certificate c ON e.eid = c.eid \nJOIN aircraft a ON c.aid = a.aid \nWHERE a.distance > 5000 \nGROUP BY e.eid \nORDER BY COUNT(c.eid) DESC \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft. The placeholders in the WHERE clause represent the employee's name.\",\n        \"virtual_table\": \"SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft model. The placeholders in the JOIN clauses represent the employee ID and the aircraft name, allowing users to filter results based on the desired aircraft model.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies employees from the 'Employee' table who do not hold any certificates related to aircraft. The query uses the EXCEPT clause to exclude those employees who are present in the 'Certificate' table, ensuring that only those without certifications are selected.\",\n        \"virtual_table\": \"SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate\"\n    }\n}\n",
        "c_mid": "SELECT e.name, e.salary \nFROM employee e \nJOIN certificate c ON e.eid = c.eid \nJOIN aircraft a ON c.aid = a.aid \nWHERE a.distance > 5000 \nGROUP BY e.eid \nORDER BY COUNT(c.eid) DESC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of aircraft from the 'Aircraft' table that have a maximum travel distance greater than the average distance of all aircraft. The subquery calculates the average distance, and the main query filters aircraft based on this value.\",\n        \"virtual_table\": \"SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of aircraft IDs and their corresponding names from the 'aircraft' table, sorted by the maximum distance each aircraft can travel in descending order. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of employees from the 'Employee' table who earn more than the average salary of all employees. The subquery calculates the average salary, and the main query filters employees based on this value.\",\n        \"virtual_table\": \"SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)\"\n    }\n}\n",
        "c_high": "SELECT E.name, E.salary \nFROM employee AS E \nJOIN certificate AS C ON E.eid = C.eid \nJOIN aircraft AS A ON C.aid = A.aid \nWHERE A.distance > 5000 \nGROUP BY E.eid \nORDER BY COUNT(C.eid) DESC \nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and salaries of employees who hold certificates for aircraft. The data is aggregated by employee ID, and the results are ordered by the number of certificates held, allowing users to see which employees are most certified. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies employees who hold certificates for a specific aircraft model. The query uses an INTERSECT operation to find employees who are certified for the same aircraft model specified by the placeholder in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of aircraft that are associated with flights, specifically those that have been used for a number of flights equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of flights for which the aircraft must be listed.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT e.name, e.salary \nFROM employee e \nJOIN certificate c ON e.eid = c.eid \nJOIN aircraft a ON c.aid = a.aid \nWHERE a.distance > 5000 \nGROUP BY e.eid \nORDER BY COUNT(c.eid) DESC \nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of aircraft from the 'Aircraft' table that have a maximum travel distance greater than the average distance of all aircraft. The subquery calculates the average distance, and the main query filters aircraft based on this value.\",\n        \"virtual_table\": \"SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of aircraft IDs and their corresponding names from the 'aircraft' table, sorted by the maximum distance each aircraft can travel in descending order. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of employees from the 'Employee' table who earn more than the average salary of all employees. The subquery calculates the average salary, and the main query filters employees based on this value.\",\n        \"virtual_table\": \"SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)\"\n    }\n}\n",
        "t_2": "SELECT T1.name, T1.salary \nFROM employee AS T1 \nJOIN certificate AS T2 ON T1.eid = T2.eid \nJOIN aircraft AS T3 ON T2.aid = T3.aid \nWHERE T3.distance > 5000 \nGROUP BY T1.eid \nORDER BY COUNT(T2.aid) DESC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and salaries of employees who hold certificates for aircraft. The data is aggregated by employee ID, and the results are ordered by the number of certificates held, allowing users to see which employees are most certified. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies employees from the 'Employee' table who do not hold any certificates related to aircraft. The query uses the EXCEPT clause to exclude those employees who are present in the 'Certificate' table, ensuring that only those without certifications are selected.\",\n        \"virtual_table\": \"SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of aircraft that are associated with flights, specifically those that have been used for a number of flights equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of flights for which the aircraft must be listed.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT e.name, e.salary \nFROM employee AS e \nJOIN certificate AS c ON e.eid = c.eid \nJOIN aircraft AS a ON c.aid = a.aid \nWHERE a.distance > 5000 \nGROUP BY e.eid \nORDER BY COUNT(c.eid) DESC \nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft. The placeholders in the WHERE clause represent the employee's name.\",\n        \"virtual_table\": \"SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft model. The placeholders in the JOIN clauses represent the employee ID and the aircraft name, allowing users to filter results based on the desired aircraft model.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies employees who hold certificates for a specific aircraft model. The query uses an INTERSECT operation to find employees who are certified for the same aircraft model specified by the placeholder in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.438",
        "c_low": "SELECT e.name, e.salary FROM employee e JOIN certificate c ON e.eid = c.eid JOIN aircraft a ON c.aid = a.aid WHERE a.distance > 5000 GROUP BY e.eid ORDER BY COUNT(c.eid) DESC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft. The placeholders in the WHERE clause represent the employee's name.\",\n        \"virtual_table\": \"SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft model. The placeholders in the JOIN clauses represent the employee ID and the aircraft name, allowing users to filter results based on the desired aircraft model.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies employees from the 'Employee' table who do not hold any certificates related to aircraft. The query uses the EXCEPT clause to exclude those employees who are present in the 'Certificate' table, ensuring that only those without certifications are selected.\",\n        \"virtual_table\": \"SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate\"\n    }\n}\n",
        "c_mid": "SELECT e.name, e.salary \nFROM employee e \nJOIN certificate c ON e.eid = c.eid \nJOIN aircraft a ON c.aid = a.aid \nWHERE a.distance > 5000 \nGROUP BY e.eid \nORDER BY COUNT(c.aid) DESC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of employees from the 'Employee' table who earn more than the average salary of all employees. The subquery calculates the average salary, and the main query filters employees based on this value.\",\n        \"virtual_table\": \"SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the employee IDs and names from the 'Employee' table, ordered by their annual salary in descending order. The placeholder in the LIMIT clause represents the maximum number of employees to be displayed.\",\n        \"virtual_table\": \"SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT T1.name, T1.salary \nFROM employee AS T1 \nJOIN certificate AS T2 ON T1.eid = T2.eid \nJOIN aircraft AS T3 ON T3.aid = T2.aid \nWHERE T3.distance > 5000 \nGROUP BY T1.eid \nORDER BY count(T2.eid) DESC \nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and salaries of employees who hold certificates for aircraft. The data is aggregated by employee ID, and the results are ordered by the number of certificates held, allowing users to see which employees are most certified. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies employees who hold certificates for a specific aircraft model. The query uses an INTERSECT operation to find employees who are certified for the same aircraft model specified by the placeholder in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of aircraft that are associated with flights, specifically those that have been used for a number of flights equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of flights for which the aircraft must be listed.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT e.name, e.salary \nFROM employee e \nJOIN certificate c ON e.eid = c.eid \nJOIN aircraft a ON c.aid = a.aid \nWHERE a.distance > 5000 \nGROUP BY e.eid \nORDER BY COUNT(c.eid) DESC \nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of employees from the 'Employee' table who earn more than the average salary of all employees. The subquery calculates the average salary, and the main query filters employees based on this value.\",\n        \"virtual_table\": \"SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the employee IDs of employees from the 'Employee' table who have a salary greater than a specified amount. The placeholder in the WHERE clause represents the salary threshold.\",\n        \"virtual_table\": \"SELECT eid FROM Employee WHERE salary  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the employee IDs and names from the 'Employee' table, ordered by their annual salary in descending order. The placeholder in the LIMIT clause represents the maximum number of employees to be displayed.\",\n        \"virtual_table\": \"SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T1.name, T1.salary FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid JOIN aircraft AS T3 ON T2.aid = T3.aid WHERE T3.distance > 5000 GROUP BY T1.eid ORDER BY count(T2.eid) DESC LIMIT 1",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and salaries of employees who hold certificates for aircraft. The data is aggregated by employee ID, and the results are ordered by the number of certificates held, allowing users to see which employees are most certified. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies employees from the 'Employee' table who do not hold any certificates related to aircraft. The query uses the EXCEPT clause to exclude those employees who are present in the 'Certificate' table, ensuring that only those without certifications are selected.\",\n        \"virtual_table\": \"SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of aircraft that are associated with flights, specifically those that have been used for a number of flights equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of flights for which the aircraft must be listed.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT e.name, e.salary FROM employee e JOIN certificate c ON e.eid = c.eid JOIN aircraft a ON c.aid = a.aid WHERE a.distance > 5000 GROUP BY e.eid ORDER BY COUNT(c.eid) DESC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft. The placeholders in the WHERE clause represent the employee's name.\",\n        \"virtual_table\": \"SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft model. The placeholders in the JOIN clauses represent the employee ID and the aircraft name, allowing users to filter results based on the desired aircraft model.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies employees who hold certificates for a specific aircraft model. The query uses an INTERSECT operation to find employees who are certified for the same aircraft model specified by the placeholder in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.442",
        "c_low": "SELECT COUNT(DISTINCT Allergy) FROM Allergy_Type;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of distinct allergy names from the 'Allergy_Type' table. The query uses a placeholder to represent the specific allergy type if needed in future modifications.\",\n        \"virtual_table\": \"SELECT count(DISTINCT allergy) FROM Allergy_type\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of different allergies categorized under a specific type from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the allergy type being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the type or category of a specific allergy from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the name of the allergy being queried.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type WHERE allergy  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT COUNT(DISTINCT Allergy) FROM Has_Allergy;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    }\n}\n",
        "c_high": "SELECT COUNT(DISTINCT Allergy) AS distinct_allergies FROM Has_Allergy;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT COUNT(DISTINCT Allergy) FROM Allergy_Type;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of distinct allergy names from the 'Allergy_Type' table. The query uses a placeholder to represent the specific allergy type if needed in future modifications.\",\n        \"virtual_table\": \"SELECT count(DISTINCT allergy) FROM Allergy_type\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    }\n}\n",
        "t_2": "SELECT COUNT(DISTINCT Allergy) AS distinct_allergies FROM Has_Allergy;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(DISTINCT Allergy) AS distinct_allergies FROM Allergy_Type;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.448",
        "c_low": "SELECT DISTINCT Allergy FROM Allergy_Type",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the type or category of a specific allergy from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the name of the allergy being queried.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type WHERE allergy  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of different allergies categorized under a specific type from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the allergy type being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of distinct allergy names from the 'Allergy_Type' table. The query uses a placeholder to represent the specific allergy type if needed in future modifications.\",\n        \"virtual_table\": \"SELECT count(DISTINCT allergy) FROM Allergy_type\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT Allergy FROM Allergy_Type",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of allergy types from the 'Allergy_Type' table, grouped by their category. The results are ordered by the count of occurrences in ascending order, with a limit set by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT Allergy FROM Allergy_Type",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT Allergy FROM Allergy_Type",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the type or category of a specific allergy from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the name of the allergy being queried.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type WHERE allergy  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of allergy types from the 'Allergy_Type' table, grouped by their category. The results are ordered by the count of occurrences in ascending order, with a limit set by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT Allergy FROM Allergy_Type",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT Allergy FROM Allergy_Type",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.450",
        "c_low": "SELECT AllergyType FROM Allergy_Type WHERE Allergy = 'cat allergy'",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the type or category of a specific allergy from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the name of the allergy being queried.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type WHERE allergy  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of different allergies categorized under a specific type from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the allergy type being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of distinct allergy names from the 'Allergy_Type' table. The query uses a placeholder to represent the specific allergy type if needed in future modifications.\",\n        \"virtual_table\": \"SELECT count(DISTINCT allergy) FROM Allergy_type\"\n    }\n}\n",
        "c_mid": "SELECT AllergyType FROM Allergy_Type WHERE Allergy = 'cat allergy'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a distinct list of allergies from the 'Allergy_Type' table that belong to a specific category of allergy. The placeholder in the WHERE clause represents the type of allergy being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of allergy types from the 'Allergy_Type' table, grouped by their category. The results are ordered by the count of occurrences in ascending order, with a limit set by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT AllergyType FROM Allergy_Type WHERE Allergy = 'cat allergy'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT AllergyType FROM Allergy_Type WHERE Allergy = 'cat allergy'",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the type or category of a specific allergy from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the name of the allergy being queried.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type WHERE allergy  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of allergies from the 'Allergy_Type' table that belong to a specific category of allergy. The placeholder in the WHERE clause represents the type of allergy being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    }\n}\n",
        "t_2": "SELECT T2.AllergyType FROM Allergy_Type AS T2 WHERE T2.Allergy = 'cat allergy'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    }\n}\n",
        "t_3+": "SELECT T1.AllergyType FROM Allergy_Type AS T1 WHERE T1.Allergy = 'cat allergy'",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.452",
        "c_low": "SELECT COUNT(DISTINCT Allergy) FROM Allergy_Type WHERE AllergyType = 'Animal';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of distinct allergy names from the 'Allergy_Type' table. The query uses a placeholder to represent the specific allergy type if needed in future modifications.\",\n        \"virtual_table\": \"SELECT count(DISTINCT allergy) FROM Allergy_type\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of different allergies categorized under a specific type from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the allergy type being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the type or category of a specific allergy from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the name of the allergy being queried.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type WHERE allergy  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT T2.allergytype, COUNT(*) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.allergytype",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of allergy types from the 'Allergy_Type' table, grouped by their category. The results are ordered by the count of occurrences in ascending order, with a limit set by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT COUNT(DISTINCT Allergy) AS Animal_Allergy_Count FROM Allergy_Type WHERE AllergyType = 'Animal';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT count(DISTINCT Allergy) FROM Allergy_Type WHERE AllergyType = 'Animal'",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of allergy types from the 'Allergy_Type' table, grouped by their category. The results are ordered by the count of occurrences in ascending order, with a limit set by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of distinct allergy names from the 'Allergy_Type' table. The query uses a placeholder to represent the specific allergy type if needed in future modifications.\",\n        \"virtual_table\": \"SELECT count(DISTINCT allergy) FROM Allergy_type\"\n    }\n}\n",
        "t_2": "SELECT T2.AllergyType, COUNT(*) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.AllergyType",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(DISTINCT Allergy) AS Animal_Allergy_Count FROM Allergy_Type WHERE AllergyType = 'Animal';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.455",
        "c_low": "SELECT AllergyType, COUNT(Allergy) AS AllergyCount \nFROM Allergy_Type \nGROUP BY AllergyType \nORDER BY AllergyCount DESC \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of different allergies categorized under a specific type from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the allergy type being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of distinct allergy names from the 'Allergy_Type' table. The query uses a placeholder to represent the specific allergy type if needed in future modifications.\",\n        \"virtual_table\": \"SELECT count(DISTINCT allergy) FROM Allergy_type\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the type or category of a specific allergy from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the name of the allergy being queried.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type WHERE allergy  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT T2.allergytype, COUNT(*) AS student_count \nFROM Has_Allergy AS T1 \nJOIN Allergy_Type AS T2 ON T1.allergy = T2.allergy \nGROUP BY T2.allergytype \nORDER BY student_count DESC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    }\n}\n",
        "c_high": "SELECT AllergyType, COUNT(Allergy) AS AllergyCount \nFROM Allergy_Type \nGROUP BY AllergyType \nORDER BY AllergyCount DESC \nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT at.AllergyType, COUNT(ha.Allergy) AS AllergyCount \nFROM Allergy_Type at \nJOIN Has_Allergy ha ON at.Allergy = ha.Allergy \nGROUP BY at.AllergyType \nORDER BY AllergyCount DESC \nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of allergy types from the 'Allergy_Type' table, grouped by their category. The results are ordered by the count of occurrences in ascending order, with a limit set by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.AllergyType, COUNT(*) AS AllergyCount \nFROM Has_Allergy AS T1 \nJOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy \nGROUP BY T2.AllergyType \nORDER BY AllergyCount DESC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT AllergyType, COUNT(Allergy) AS AllergyCount FROM Allergy_Type JOIN Has_Allergy ON Allergy_Type.Allergy = Has_Allergy.Allergy GROUP BY AllergyType ORDER BY AllergyCount DESC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.456",
        "c_low": "SELECT AllergyType, COUNT(*) as AllergyCount \nFROM Allergy_Type \nJOIN Has_Allergy ON Allergy_Type.Allergy = Has_Allergy.Allergy \nGROUP BY AllergyType \nORDER BY AllergyCount DESC \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the type or category of a specific allergy from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the name of the allergy being queried.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type WHERE allergy  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of distinct allergy names from the 'Allergy_Type' table. The query uses a placeholder to represent the specific allergy type if needed in future modifications.\",\n        \"virtual_table\": \"SELECT count(DISTINCT allergy) FROM Allergy_type\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of different allergies categorized under a specific type from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the allergy type being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT T2.AllergyType, COUNT(*) AS StudentCount \nFROM Has_Allergy AS T1 \nJOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy \nGROUP BY T2.AllergyType \nORDER BY StudentCount DESC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of allergy types from the 'Allergy_Type' table, grouped by their category. The results are ordered by the count of occurrences in ascending order, with a limit set by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT AllergyType, COUNT(*) as AllergyCount \nFROM Allergy_Type AS AT \nJOIN Has_Allergy AS HA ON AT.Allergy = HA.Allergy \nGROUP BY AllergyType \nORDER BY AllergyCount DESC \nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT AllergyType, COUNT(*) as StudentCount \nFROM Has_Allergy \nJOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy \nGROUP BY AllergyType \nORDER BY StudentCount DESC \nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of allergy types from the 'Allergy_Type' table, grouped by their category. The results are ordered by the count of occurrences in ascending order, with a limit set by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the type or category of a specific allergy from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the name of the allergy being queried.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type WHERE allergy  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT T2.AllergyType, COUNT(*) AS StudentCount \nFROM Has_Allergy AS T1 \nJOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy \nGROUP BY T2.AllergyType \nORDER BY StudentCount DESC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT AllergyType, COUNT(*) as AllergyCount FROM Allergy_Type AS T1 JOIN Has_Allergy AS T2 ON T1.Allergy = T2.Allergy GROUP BY AllergyType ORDER BY AllergyCount DESC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.458",
        "c_low": "SELECT AllergyType, COUNT(*) AS AllergyCount \nFROM Allergy_Type \nJOIN Has_Allergy ON Allergy_Type.Allergy = Has_Allergy.Allergy \nGROUP BY AllergyType \nORDER BY AllergyCount ASC \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the type or category of a specific allergy from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the name of the allergy being queried.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type WHERE allergy  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of distinct allergy names from the 'Allergy_Type' table. The query uses a placeholder to represent the specific allergy type if needed in future modifications.\",\n        \"virtual_table\": \"SELECT count(DISTINCT allergy) FROM Allergy_type\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of different allergies categorized under a specific type from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the allergy type being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT T2.allergytype FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.AllergyType ORDER BY COUNT(*) ASC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of allergy types from the 'Allergy_Type' table, grouped by their category. The results are ordered by the count of occurrences in ascending order, with a limit set by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT AllergyType, COUNT(*) AS AllergyCount \nFROM Allergy_Type AS AT \nJOIN Has_Allergy AS HA ON AT.Allergy = HA.Allergy \nGROUP BY AllergyType \nORDER BY AllergyCount ASC \nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT AllergyType FROM (SELECT AllergyType, COUNT(*) as count FROM Has_Allergy JOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy GROUP BY AllergyType) ORDER BY count ASC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the type or category of a specific allergy from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the name of the allergy being queried.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type WHERE allergy  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of allergy types from the 'Allergy_Type' table, grouped by their category. The results are ordered by the count of occurrences in ascending order, with a limit set by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT allergytype FROM (SELECT T2.allergytype, COUNT(*) AS allergy_count FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.allergytype) AS subquery ORDER BY allergy_count ASC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT AllergyType, COUNT(*) AS AllergyCount \nFROM Has_Allergy \nJOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy \nGROUP BY AllergyType \nORDER BY AllergyCount ASC \nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.462",
        "c_low": "SELECT Fname || ' ' || LName AS FullName FROM Student;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Fname || ' ' || LName AS FullName FROM Student;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT Fname || ' ' || LName AS FullName FROM Student;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT Fname || ' ' || LName AS FullName FROM Student;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT Fname || ' ' || LName AS FullName FROM Student;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT Fname || ' ' || LName AS FullName FROM Student;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.470",
        "c_low": "SELECT Fname || ' ' || LName AS FullName, Age FROM Student WHERE Sex = 'F';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Fname || ' ' || LName AS FullName, Age FROM Student WHERE Sex = 'F';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT Fname || ' ' || LName AS FullName, Age FROM Student WHERE Sex = 'F';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT Fname || ' ' || LName AS FullName, Age FROM Student WHERE Sex = 'F';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT Fname || ' ' || LName AS FullName, Age FROM Student WHERE Sex = 'F';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT Fname || ' ' || LName AS FullName, Age FROM Student WHERE Sex = 'F';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.471",
        "c_low": "SELECT StuID FROM Student WHERE Sex = 'Male'",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Student' table who are older than a specified age. The placeholder in the WHERE clause represents the age limit.\",\n        \"virtual_table\": \"SELECT StuID FROM Student WHERE age  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT StuID FROM Student WHERE Sex = 'Male';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT StuID FROM Student WHERE Sex = 'Male';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT StuID FROM Student WHERE Sex = 'Male'",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Student' table who are older than a specified age. The placeholder in the WHERE clause represents the age limit.\",\n        \"virtual_table\": \"SELECT StuID FROM Student WHERE age  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT StuID FROM Student WHERE Sex = 'Male';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT StuID FROM Student WHERE Sex = 'Male';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.472",
        "c_low": "SELECT StuID FROM Student WHERE Sex = 'Male'",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Student' table who are older than a specified age. The placeholder in the WHERE clause represents the age limit.\",\n        \"virtual_table\": \"SELECT StuID FROM Student WHERE age  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the academic advisor's name for a specific student identified by their unique student ID. The placeholder in the WHERE clause represents the student's ID.\",\n        \"virtual_table\": \"SELECT Advisor FROM Student WHERE StuID  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT StuID FROM Student WHERE Sex = 'Male';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT StuID FROM Student WHERE Sex = 'Male';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT StuID FROM Student WHERE Sex = 'Male'",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Student' table who are older than a specified age. The placeholder in the WHERE clause represents the age limit.\",\n        \"virtual_table\": \"SELECT StuID FROM Student WHERE age  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the academic advisor's name for a specific student identified by their unique student ID. The placeholder in the WHERE clause represents the student's ID.\",\n        \"virtual_table\": \"SELECT Advisor FROM Student WHERE StuID  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT StuID FROM Student WHERE Sex = 'Male';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT StuID FROM Student WHERE Sex = 'Male';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.491",
        "c_low": "SELECT Major, COUNT(*) as StudentCount\nFROM Student\nGROUP BY Major\nORDER BY StudentCount DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT major, COUNT(*) as student_count FROM Student GROUP BY major ORDER BY student_count DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of students in each academic major from the 'Student' table. The query groups the results by the 'major' column and counts the number of students in each group.\",\n        \"virtual_table\": \"SELECT major ,  count(*) FROM Student GROUP BY major\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of students residing in each city, based on the 'Student' table. The placeholder in the SELECT statement allows for counting the number of students grouped by their city codes.\",\n        \"virtual_table\": \"SELECT city_code ,  count(*) FROM Student GROUP BY city_code\"\n    }\n}\n",
        "c_high": "SELECT Major, COUNT(*) as StudentCount \nFROM Student \nGROUP BY Major \nORDER BY StudentCount DESC \nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT major, COUNT(*) as student_count FROM Student GROUP BY major ORDER BY student_count DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of students in each academic major from the 'Student' table. The query groups the results by the 'major' column and counts the number of students in each group.\",\n        \"virtual_table\": \"SELECT major ,  count(*) FROM Student GROUP BY major\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of students residing in each city, based on the 'Student' table. The placeholder in the SELECT statement allows for counting the number of students grouped by their city codes.\",\n        \"virtual_table\": \"SELECT city_code ,  count(*) FROM Student GROUP BY city_code\"\n    }\n}\n",
        "t_2": "SELECT Major, COUNT(*) as StudentCount\nFROM Student\nGROUP BY Major\nORDER BY StudentCount DESC\nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT Major, COUNT(*) as StudentCount\nFROM Student\nGROUP BY Major\nORDER BY StudentCount DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.492",
        "c_low": "SELECT Major FROM Student GROUP BY Major ORDER BY COUNT(*) DESC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT major FROM (SELECT major, count(*) as student_count FROM Student GROUP BY major) ORDER BY student_count DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of students in each academic major from the 'Student' table. The query groups the results by the 'major' column and counts the number of students in each group.\",\n        \"virtual_table\": \"SELECT major ,  count(*) FROM Student GROUP BY major\"\n    }\n}\n",
        "c_high": "SELECT Major FROM Student GROUP BY Major ORDER BY COUNT(*) DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT major FROM (SELECT major, count(*) as student_count FROM Student GROUP BY major) ORDER BY student_count DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of students in each academic major from the 'Student' table. The query groups the results by the 'major' column and counts the number of students in each group.\",\n        \"virtual_table\": \"SELECT major ,  count(*) FROM Student GROUP BY major\"\n    }\n}\n",
        "t_2": "SELECT Major FROM Student GROUP BY Major ORDER BY COUNT(*) DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT Major FROM Student GROUP BY Major ORDER BY COUNT(*) DESC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.501",
        "c_low": "SELECT Advisor, COUNT(StuID) AS StudentCount \nFROM Student \nGROUP BY Advisor \nORDER BY StudentCount DESC \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the academic advisor's name for a specific student identified by their unique student ID. The placeholder in the WHERE clause represents the student's ID.\",\n        \"virtual_table\": \"SELECT Advisor FROM Student WHERE StuID  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT advisor, COUNT(*) AS student_count FROM Student GROUP BY advisor ORDER BY student_count DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of students assigned to each academic advisor from the 'Student' table. The placeholder in the SELECT clause represents the advisor's name, and the count function aggregates the number of students per advisor.\",\n        \"virtual_table\": \"SELECT advisor ,  count(*) FROM Student GROUP BY advisor\"\n    }\n}\n",
        "c_high": "SELECT Advisor, COUNT(StuID) AS StudentCount\nFROM Student\nGROUP BY Advisor\nORDER BY StudentCount DESC\nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT advisor FROM (SELECT advisor, count(*) as student_count FROM Student GROUP BY advisor) ORDER BY student_count DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of students assigned to each academic advisor from the 'Student' table. The placeholder in the SELECT clause represents the advisor's name, and the count function aggregates the number of students per advisor.\",\n        \"virtual_table\": \"SELECT advisor ,  count(*) FROM Student GROUP BY advisor\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the academic advisor's name for a specific student identified by their unique student ID. The placeholder in the WHERE clause represents the student's ID.\",\n        \"virtual_table\": \"SELECT Advisor FROM Student WHERE StuID  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Advisor, COUNT(StuID) AS StudentCount \nFROM Student \nGROUP BY Advisor \nORDER BY StudentCount DESC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT Advisor, COUNT(StuID) AS StudentCount \nFROM Student \nGROUP BY Advisor \nORDER BY StudentCount DESC \nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.502",
        "c_low": "SELECT Advisor, COUNT(StuID) AS StudentCount \nFROM Student \nGROUP BY Advisor \nORDER BY StudentCount DESC \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the academic advisor's name for a specific student identified by their unique student ID. The placeholder in the WHERE clause represents the student's ID.\",\n        \"virtual_table\": \"SELECT Advisor FROM Student WHERE StuID  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT advisor FROM (SELECT advisor, count(*) as student_count FROM Student GROUP BY advisor) ORDER BY student_count DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of students assigned to each academic advisor from the 'Student' table. The placeholder in the SELECT clause represents the advisor's name, and the count function aggregates the number of students per advisor.\",\n        \"virtual_table\": \"SELECT advisor ,  count(*) FROM Student GROUP BY advisor\"\n    }\n}\n",
        "c_high": "SELECT Advisor, COUNT(StuID) AS StudentCount \nFROM Student \nGROUP BY Advisor \nORDER BY StudentCount DESC \nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT advisor FROM (SELECT advisor, count(*) as student_count FROM Student GROUP BY advisor) ORDER BY student_count DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of students assigned to each academic advisor from the 'Student' table. The placeholder in the SELECT clause represents the advisor's name, and the count function aggregates the number of students per advisor.\",\n        \"virtual_table\": \"SELECT advisor ,  count(*) FROM Student GROUP BY advisor\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the academic advisor's name for a specific student identified by their unique student ID. The placeholder in the WHERE clause represents the student's ID.\",\n        \"virtual_table\": \"SELECT Advisor FROM Student WHERE StuID  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Advisor, COUNT(StuID) AS StudentCount \nFROM Student \nGROUP BY Advisor \nORDER BY StudentCount DESC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT Advisor, COUNT(StuID) AS StudentCount \nFROM Student \nGROUP BY Advisor \nORDER BY StudentCount DESC \nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.503",
        "c_low": "SELECT COUNT(DISTINCT Has_Allergy.StuID) AS StudentCount \nFROM Has_Allergy \nWHERE Has_Allergy.Allergy = 'cat';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "c_mid": "SELECT COUNT(*) FROM Has_Allergy WHERE Allergy = 'cat';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    }\n}\n",
        "c_high": "SELECT COUNT(DISTINCT H.StuID) AS StudentCount \nFROM Has_Allergy H \nWHERE H.Allergy = 'cat'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n",
        "t_1": "SELECT COUNT(*) FROM Has_Allergy WHERE Allergy = 'cat';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT COUNT(*) FROM Has_Allergy WHERE Allergy = 'cat'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(DISTINCT H.StuID) AS StudentCount \nFROM Has_Allergy AS H \nWHERE H.Allergy = 'cat';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.504",
        "c_low": "SELECT COUNT(DISTINCT Has_Allergy.StuID) \nFROM Has_Allergy \nJOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy \nWHERE Allergy_Type.Allergy = 'cat';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of different allergies categorized under a specific type from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the allergy type being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT COUNT(*) FROM Has_Allergy WHERE Allergy = 'cat'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    }\n}\n",
        "c_high": "SELECT COUNT(DISTINCT T2.StuID) AS StudentCount \nFROM Has_Allergy AS T2 \nWHERE T2.Allergy = 'cat';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT COUNT(DISTINCT StuID) FROM Has_Allergy WHERE Allergy = 'cat';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT COUNT(DISTINCT H.StuID) FROM Has_Allergy H JOIN Allergy_Type A ON H.Allergy = A.Allergy WHERE A.Allergy = 'cat'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(DISTINCT H.StuID) AS StudentCount \nFROM Has_Allergy AS H \nWHERE H.Allergy = 'cat';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.508",
        "c_low": "SELECT * FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Allergy)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "c_mid": "SELECT * FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Allergy)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    }\n}\n",
        "c_high": "SELECT StuID, Fname, LName FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Allergy)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT StuID, Fname, LName FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Allergy)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_Allergy",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    }\n}\n",
        "t_3+": "SELECT * FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Allergy)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.509",
        "c_low": "SELECT COUNT(DISTINCT Student.StuID) \nFROM Student \nJOIN Has_Allergy ON Student.StuID = Has_Allergy.StuID \nJOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy \nWHERE Student.Sex = 'Female' AND (Allergy_Type.Allergy = 'Milk' OR Allergy_Type.Allergy = 'Egg');",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of different allergies categorized under a specific type from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the allergy type being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of distinct allergy names from the 'Allergy_Type' table. The query uses a placeholder to represent the specific allergy type if needed in future modifications.\",\n        \"virtual_table\": \"SELECT count(DISTINCT allergy) FROM Allergy_type\"\n    }\n}\n",
        "c_mid": "SELECT COUNT(*) FROM Student S JOIN Has_Allergy H ON S.StuID = H.StuID JOIN Allergy_Type A ON H.Allergy = A.Allergy WHERE S.Sex = 'Female' AND (A.Allergy = 'Milk' OR A.Allergy = 'Egg');",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    }\n}\n",
        "c_high": "SELECT COUNT(*) FROM Student WHERE Sex = 'Female' AND StuID IN (SELECT StuID FROM Has_Allergy WHERE Allergy IN ('milk', 'egg'));",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT COUNT(*) FROM Student s JOIN Has_Allergy ha ON s.StuID = ha.StuID WHERE s.Sex = 'Female' AND ha.Allergy IN ('milk', 'egg');",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT COUNT(*) FROM Student WHERE Sex = 'Female' AND StuID IN (SELECT StuID FROM Has_Allergy WHERE Allergy IN ('milk', 'egg'));",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(*) FROM Student AS S JOIN Has_Allergy AS HA ON S.StuID = HA.StuID WHERE S.Sex = 'Female' AND HA.Allergy IN ('Milk', 'Egg');",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.510",
        "c_low": "SELECT COUNT(DISTINCT Student.StuID) \nFROM Student \nJOIN Has_Allergy ON Student.StuID = Has_Allergy.StuID \nWHERE Student.Sex = 'Female' \nAND (Has_Allergy.Allergy = 'Milk' OR Has_Allergy.Allergy = 'Eggs');",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of different allergies categorized under a specific type from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the allergy type being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of distinct allergy names from the 'Allergy_Type' table. The query uses a placeholder to represent the specific allergy type if needed in future modifications.\",\n        \"virtual_table\": \"SELECT count(DISTINCT allergy) FROM Allergy_type\"\n    }\n}\n",
        "c_mid": "SELECT COUNT(DISTINCT S.StuID) \nFROM Student S \nJOIN Has_Allergy HA ON S.StuID = HA.StuID \nWHERE S.Sex = 'Female' AND HA.Allergy IN ('milk', 'eggs');",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    }\n}\n",
        "c_high": "SELECT COUNT(*) FROM Student AS S JOIN Has_Allergy AS HA ON S.StuID = HA.StuID WHERE S.Sex = 'Female' AND (HA.Allergy = 'Milk' OR HA.Allergy = 'Eggs');",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT COUNT(*) \nFROM Student s \nJOIN Has_Allergy ha ON s.StuID = ha.StuID \nWHERE s.Sex = 'Female' AND (ha.Allergy = 'milk' OR ha.Allergy = 'eggs');",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT COUNT(*) FROM Student AS S JOIN Has_Allergy AS H ON S.StuID = H.StuID WHERE S.Sex = 'Female' AND H.Allergy IN ('milk', 'eggs')",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(DISTINCT S.StuID) \nFROM Student AS S \nJOIN Has_Allergy AS HA ON S.StuID = HA.StuID \nWHERE S.Sex = 'Female' AND HA.Allergy IN ('Milk', 'Eggs');",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.511",
        "c_low": "SELECT COUNT(DISTINCT Has_Allergy.StuID) \nFROM Has_Allergy \nJOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy \nWHERE Allergy_Type.AllergyType = 'Food';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of distinct allergy names from the 'Allergy_Type' table. The query uses a placeholder to represent the specific allergy type if needed in future modifications.\",\n        \"virtual_table\": \"SELECT count(DISTINCT allergy) FROM Allergy_type\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of different allergies categorized under a specific type from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the allergy type being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT COUNT(DISTINCT T1.StuID) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.AllergyType = 'Food';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    }\n}\n",
        "c_high": "SELECT COUNT(DISTINCT H.StuID) \nFROM Has_Allergy H \nJOIN Allergy_Type A ON H.Allergy = A.Allergy \nWHERE A.AllergyType = 'Food';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n",
        "t_1": "SELECT COUNT(DISTINCT StuID) FROM Has_Allergy WHERE Allergy IN (SELECT Allergy FROM Allergy_Type WHERE AllergyType = 'Food');",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT COUNT(DISTINCT T1.StuID) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.AllergyType = 'Food'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(DISTINCT T2.StuID) AS StudentCount \nFROM Has_Allergy AS T2 \nJOIN Allergy_Type AS T1 ON T1.Allergy = T2.Allergy \nWHERE T1.AllergyType = 'Food';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.512",
        "c_low": "SELECT COUNT(DISTINCT Has_Allergy.StuID) \nFROM Has_Allergy \nJOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy \nWHERE Allergy_Type.AllergyType = 'Food';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of distinct allergy names from the 'Allergy_Type' table. The query uses a placeholder to represent the specific allergy type if needed in future modifications.\",\n        \"virtual_table\": \"SELECT count(DISTINCT allergy) FROM Allergy_type\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of different allergies categorized under a specific type from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the allergy type being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT T2.allergytype, count(*) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = 'Food' GROUP BY T2.allergytype",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    }\n}\n",
        "c_high": "SELECT COUNT(DISTINCT T2.StuID) AS StudentCount \nFROM Has_Allergy AS T2 \nJOIN Allergy_Type AS T1 ON T1.Allergy = T2.Allergy \nWHERE T1.AllergyType = 'Food';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT COUNT(DISTINCT Has_Allergy.StuID) \nFROM Has_Allergy \nJOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy \nWHERE Allergy_Type.AllergyType = 'Food';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT COUNT(DISTINCT T1.StuID) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.AllergyType = 'Food'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(DISTINCT T2.StuID) AS StudentCount \nFROM Allergy_Type AS T1 \nJOIN Has_Allergy AS T2 ON T1.Allergy = T2.Allergy \nWHERE T1.AllergyType = 'Food'",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.513",
        "c_low": "SELECT Allergy, COUNT(StuID) AS StudentCount \nFROM Has_Allergy \nGROUP BY Allergy \nORDER BY StudentCount DESC \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of distinct allergy names from the 'Allergy_Type' table. The query uses a placeholder to represent the specific allergy type if needed in future modifications.\",\n        \"virtual_table\": \"SELECT count(DISTINCT allergy) FROM Allergy_type\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of different allergies categorized under a specific type from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the allergy type being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT T2.allergytype, COUNT(*) AS student_count \nFROM Has_Allergy AS T1 \nJOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy \nGROUP BY T2.allergytype \nORDER BY student_count DESC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    }\n}\n",
        "c_high": "SELECT Allergy, COUNT(StuID) AS StudentCount \nFROM Has_Allergy \nGROUP BY Allergy \nORDER BY StudentCount DESC \nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Allergy, COUNT(*) as StudentCount \nFROM Has_Allergy \nGROUP BY Allergy \nORDER BY StudentCount DESC \nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.AllergyType, COUNT(*) AS StudentCount \nFROM Has_Allergy AS T1 \nJOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy \nGROUP BY T2.AllergyType \nORDER BY StudentCount DESC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT Allergy, COUNT(StuID) AS StudentCount FROM Has_Allergy GROUP BY Allergy ORDER BY StudentCount DESC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.514",
        "c_low": "SELECT Allergy, COUNT(*) as AllergyCount\nFROM Has_Allergy\nGROUP BY Allergy\nORDER BY AllergyCount DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the type or category of a specific allergy from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the name of the allergy being queried.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type WHERE allergy  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of distinct allergy names from the 'Allergy_Type' table. The query uses a placeholder to represent the specific allergy type if needed in future modifications.\",\n        \"virtual_table\": \"SELECT count(DISTINCT allergy) FROM Allergy_type\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of different allergies categorized under a specific type from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the allergy type being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT T2.allergytype, COUNT(*) AS student_count \nFROM Has_Allergy AS T1 \nJOIN Allergy_Type AS T2 ON T1.allergy = T2.allergy \nGROUP BY T2.allergytype \nORDER BY student_count DESC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    }\n}\n",
        "c_high": "SELECT Allergy, COUNT(*) as AllergyCount FROM Has_Allergy GROUP BY Allergy ORDER BY AllergyCount DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Allergy, COUNT(*) as StudentCount FROM Has_Allergy GROUP BY Allergy ORDER BY StudentCount DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of allergy types from the 'Allergy_Type' table, grouped by their category. The results are ordered by the count of occurrences in ascending order, with a limit set by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT AllergyType, COUNT(*) AS StudentCount FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy GROUP BY AllergyType ORDER BY StudentCount DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT Allergy, COUNT(*) as AllergyCount FROM Has_Allergy GROUP BY Allergy ORDER BY AllergyCount DESC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.518",
        "c_low": "SELECT at.AllergyType, COUNT(ha.StuID) AS StudentCount\nFROM Allergy_Type at\nLEFT JOIN Has_Allergy ha ON at.Allergy = ha.Allergy\nGROUP BY at.AllergyType;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of distinct allergy names from the 'Allergy_Type' table. The query uses a placeholder to represent the specific allergy type if needed in future modifications.\",\n        \"virtual_table\": \"SELECT count(DISTINCT allergy) FROM Allergy_type\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of different allergies categorized under a specific type from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the allergy type being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "c_mid": "SELECT T2.AllergyType, COUNT(*) \nFROM Has_Allergy AS T1 \nJOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy \nGROUP BY T2.AllergyType",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    }\n}\n",
        "c_high": "SELECT AT.AllergyType, COUNT(S.StuID) AS StudentCount\nFROM Allergy_Type AS AT\nJOIN Has_Allergy AS HA ON AT.Allergy = HA.Allergy\nJOIN Student AS S ON S.StuID = HA.StuID\nGROUP BY AT.AllergyType;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT at.AllergyType, COUNT(ha.StuID) AS StudentCount\nFROM Allergy_Type at\nLEFT JOIN Has_Allergy ha ON at.Allergy = ha.Allergy\nGROUP BY at.AllergyType;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.AllergyType, COUNT(*) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.AllergyType",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT AT.AllergyType, COUNT(S.StuID) AS StudentCount \nFROM Allergy_Type AS AT \nJOIN Has_Allergy AS HA ON AT.Allergy = HA.Allergy \nJOIN Student AS S ON S.StuID = HA.StuID \nGROUP BY AT.AllergyType;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.519",
        "c_low": "SELECT S.LName, S.Age \nFROM Student S \nJOIN Has_Allergy HA1 ON S.StuID = HA1.StuID \nJOIN Has_Allergy HA2 ON S.StuID = HA2.StuID \nWHERE HA1.Allergy = 'milk' AND HA2.Allergy = 'cat';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "c_mid": "SELECT S.LName, S.Age \nFROM Student S \nJOIN Has_Allergy HA1 ON S.StuID = HA1.StuID \nJOIN Has_Allergy HA2 ON S.StuID = HA2.StuID \nWHERE HA1.Allergy = 'milk' AND HA2.Allergy = 'cat';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    }\n}\n",
        "c_high": "SELECT S.LName, S.Age \nFROM Student AS S \nJOIN Has_Allergy AS HA1 ON S.StuID = HA1.StuID \nJOIN Has_Allergy AS HA2 ON S.StuID = HA2.StuID \nWHERE HA1.Allergy = 'milk' AND HA2.Allergy = 'cat';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT S.LName, S.Age \nFROM Student S \nJOIN Has_Allergy HA1 ON S.StuID = HA1.StuID \nJOIN Has_Allergy HA2 ON S.StuID = HA2.StuID \nWHERE HA1.Allergy = 'milk' AND HA2.Allergy = 'cat';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT S.LName, S.Age \nFROM Student S \nJOIN Has_Allergy HA1 ON S.StuID = HA1.StuID \nJOIN Has_Allergy HA2 ON S.StuID = HA2.StuID \nWHERE HA1.Allergy = 'milk' AND HA2.Allergy = 'cat';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT S.LName, S.Age \nFROM Student AS S \nJOIN Has_Allergy AS HA1 ON S.StuID = HA1.StuID \nJOIN Has_Allergy AS HA2 ON S.StuID = HA2.StuID \nWHERE HA1.Allergy = 'milk' AND HA2.Allergy = 'cat';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.520",
        "c_low": "SELECT S.LName, S.Age \nFROM Student S \nJOIN Has_Allergy HA ON S.StuID = HA.StuID \nWHERE HA.Allergy IN ('milk', 'cat') \nGROUP BY S.StuID;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "c_mid": "SELECT S.LName, S.Age \nFROM Student S \nJOIN Has_Allergy HA ON S.StuID = HA.StuID \nWHERE HA.Allergy IN ('milk', 'cat')",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    }\n}\n",
        "c_high": "SELECT S.LName, S.Age \nFROM Student AS S \nJOIN Has_Allergy AS HA ON S.StuID = HA.StuID \nWHERE HA.Allergy IN ('milk', 'cat') \nGROUP BY S.StuID \nHAVING COUNT(DISTINCT HA.Allergy) = 2;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Student.LName, Student.Age \nFROM Student \nJOIN Has_Allergy ON Student.StuID = Has_Allergy.StuID \nWHERE Has_Allergy.Allergy IN ('milk', 'cat') \nGROUP BY Student.StuID \nHAVING COUNT(Has_Allergy.Allergy) = 2;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT S.LName, S.Age \nFROM Student AS S \nJOIN Has_Allergy AS H ON S.StuID = H.StuID \nWHERE H.Allergy IN ('milk', 'cat') \nGROUP BY S.StuID;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT S.LName, S.Age \nFROM Student AS S \nJOIN Has_Allergy AS HA ON S.StuID = HA.StuID \nWHERE HA.Allergy IN ('milk', 'cat') \nGROUP BY S.StuID \nHAVING COUNT(DISTINCT HA.Allergy) = 2;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.522",
        "c_low": "SELECT a.Allergy, at.AllergyType \nFROM Student s \nJOIN Has_Allergy ha ON s.StuID = ha.StuID \nJOIN Allergy_Type at ON ha.Allergy = at.Allergy \nWHERE s.Fname = 'Lisa' AND s.Sex = 'Female' \nORDER BY a.Allergy;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the type or category of a specific allergy from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the name of the allergy being queried.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type WHERE allergy  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of distinct allergy names from the 'Allergy_Type' table. The query uses a placeholder to represent the specific allergy type if needed in future modifications.\",\n        \"virtual_table\": \"SELECT count(DISTINCT allergy) FROM Allergy_type\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of different allergies categorized under a specific type from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the allergy type being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT A.Allergy, AT.AllergyType \nFROM Student S \nJOIN Has_Allergy A ON S.StuID = A.StuID \nJOIN Allergy_Type AT ON A.Allergy = AT.Allergy \nWHERE S.Fname = 'Lisa' AND S.Sex = 'Female' \nORDER BY A.Allergy;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of allergy types from the 'Allergy_Type' table, grouped by their category. The results are ordered by the count of occurrences in ascending order, with a limit set by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    }\n}\n",
        "c_high": "SELECT T1.Allergy, T1.AllergyType FROM Allergy_Type AS T1 JOIN Has_Allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Fname = 'Lisa' AND T3.Sex = 'Female' ORDER BY T1.Allergy",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT a.Allergy, a.AllergyType \nFROM Student s \nJOIN Has_Allergy ha ON s.StuID = ha.StuID \nJOIN Allergy_Type a ON ha.Allergy = a.Allergy \nWHERE s.Fname = 'Lisa' AND s.Sex = 'Female' \nORDER BY a.Allergy;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of allergy types from the 'Allergy_Type' table, grouped by their category. The results are ordered by the count of occurrences in ascending order, with a limit set by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the type or category of a specific allergy from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the name of the allergy being queried.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type WHERE allergy  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT A.Allergy, AT.AllergyType \nFROM Student S \nJOIN Has_Allergy A ON S.StuID = A.StuID \nJOIN Allergy_Type AT ON A.Allergy = AT.Allergy \nWHERE S.Fname = 'Lisa' AND S.Sex = 'Female' \nORDER BY A.Allergy;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT T1.Allergy, T1.AllergyType FROM Allergy_Type AS T1 JOIN Has_Allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Fname = 'Lisa' AND T3.Sex = 'Female' ORDER BY T1.Allergy",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.523",
        "c_low": "SELECT Fname, Sex \nFROM Student \nWHERE StuID IN (\n    SELECT StuID \n    FROM Has_Allergy \n    WHERE Allergy = 'milk'\n) \nAND StuID NOT IN (\n    SELECT StuID \n    FROM Has_Allergy \n    WHERE Allergy = 'cat'\n);",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the type or category of a specific allergy from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the name of the allergy being queried.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type WHERE allergy  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of distinct allergy names from the 'Allergy_Type' table. The query uses a placeholder to represent the specific allergy type if needed in future modifications.\",\n        \"virtual_table\": \"SELECT count(DISTINCT allergy) FROM Allergy_type\"\n    }\n}\n",
        "c_mid": "SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Allergy WHERE Allergy = 'milk') AND StuID NOT IN (SELECT StuID FROM Has_Allergy WHERE Allergy = 'cat');",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    }\n}\n",
        "c_high": "SELECT S.Fname, S.Sex \nFROM Student AS S \nJOIN Has_Allergy AS HA1 ON S.StuID = HA1.StuID \nWHERE HA1.Allergy = 'milk' \nAND S.StuID NOT IN ( \n    SELECT HA2.StuID \n    FROM Has_Allergy AS HA2 \n    WHERE HA2.Allergy = 'cat' \n)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT S.Fname, S.Sex \nFROM Student S \nJOIN Has_Allergy HA1 ON S.StuID = HA1.StuID \nWHERE HA1.Allergy = 'milk' \nAND S.StuID NOT IN (SELECT HA2.StuID FROM Has_Allergy HA2 WHERE HA2.Allergy = 'cat');",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT S.Fname, S.Sex \nFROM Student S \nJOIN Has_Allergy HA1 ON S.StuID = HA1.StuID \nWHERE HA1.Allergy = 'milk' \nAND S.StuID NOT IN (SELECT HA2.StuID FROM Has_Allergy HA2 WHERE HA2.Allergy = 'cat')",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    }\n}\n",
        "t_3+": "SELECT S.Fname, S.Sex \nFROM Student AS S \nJOIN Has_Allergy AS HA ON S.StuID = HA.StuID \nWHERE HA.Allergy = 'milk' \nAND S.StuID NOT IN (SELECT HA2.StuID \n                    FROM Has_Allergy AS HA2 \n                    WHERE HA2.Allergy = 'cat');",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.524",
        "c_low": "SELECT Fname, Sex \nFROM Student \nWHERE StuID IN (\n    SELECT StuID \n    FROM Has_Allergy \n    WHERE Allergy = 'milk'\n) \nAND StuID NOT IN (\n    SELECT StuID \n    FROM Has_Allergy \n    WHERE Allergy = 'cats'\n);",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the type or category of a specific allergy from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the name of the allergy being queried.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type WHERE allergy  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT S.Fname, S.Sex \nFROM Student S \nJOIN Has_Allergy HA1 ON S.StuID = HA1.StuID \nJOIN Has_Allergy HA2 ON S.StuID = HA2.StuID \nWHERE HA1.Allergy = 'milk' AND HA2.Allergy = 'cats'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    }\n}\n",
        "c_high": "SELECT S.Fname, S.Sex \nFROM Student AS S \nJOIN Has_Allergy AS HA ON S.StuID = HA.StuID \nWHERE HA.Allergy = 'milk' \nAND S.StuID NOT IN (SELECT HA2.StuID \n                    FROM Has_Allergy AS HA2 \n                    WHERE HA2.Allergy = 'cats');",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT S.Fname, S.Sex \nFROM Student S \nJOIN Has_Allergy HA1 ON S.StuID = HA1.StuID \nJOIN Has_Allergy HA2 ON S.StuID = HA2.StuID \nWHERE HA1.Allergy = 'milk' AND HA2.Allergy = 'cats'",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Allergy WHERE Allergy = 'milk') AND StuID NOT IN (SELECT StuID FROM Has_Allergy WHERE Allergy = 'cats')",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT S.Fname, S.Sex \nFROM Student AS S \nJOIN Has_Allergy AS HA1 ON S.StuID = HA1.StuID \nJOIN Allergy_Type AS AT1 ON HA1.Allergy = AT1.Allergy \nWHERE AT1.Allergy = 'milk' \nAND S.StuID NOT IN (\n    SELECT HA2.StuID \n    FROM Has_Allergy AS HA2 \n    JOIN Allergy_Type AS AT2 ON HA2.Allergy = AT2.Allergy \n    WHERE AT2.Allergy = 'cats'\n)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.525",
        "c_low": "SELECT AVG(Age) FROM Student WHERE StuID IN (SELECT StuID FROM Has_Allergy WHERE Allergy IN (SELECT Allergy FROM Allergy_Type WHERE AllergyType IN ('food', 'animal')));",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of different allergies categorized under a specific type from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the allergy type being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT AVG(CAST(Age AS INTEGER)) FROM Student WHERE StuID IN (SELECT StuID FROM Has_Allergy WHERE Allergy IN (SELECT Allergy FROM Allergy_Type WHERE AllergyType IN ('food', 'animal')));",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    }\n}\n",
        "c_high": "SELECT AVG(CAST(Age AS INTEGER)) AS Average_Age \nFROM Student \nWHERE StuID IN (\n    SELECT T2.StuID \n    FROM Has_Allergy AS T2 \n    JOIN Allergy_Type AS T1 ON T1.Allergy = T2.Allergy \n    WHERE T1.AllergyType IN ('food', 'animal')\n)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT AVG(CAST(Age AS INTEGER)) AS average_age \nFROM Student \nWHERE StuID IN (\n    SELECT StuID \n    FROM Has_Allergy \n    WHERE Allergy IN (\n        SELECT Allergy \n        FROM Allergy_Type \n        WHERE AllergyType IN ('food', 'animal')\n    )\n)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT AVG(CAST(Age AS INTEGER)) FROM Student WHERE StuID IN (SELECT StuID FROM Has_Allergy WHERE Allergy IN (SELECT Allergy FROM Allergy_Type WHERE AllergyType IN ('food', 'animal')));",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT AVG(CAST(Age AS INTEGER)) AS Average_Age\nFROM Student\nWHERE StuID IN (\n    SELECT T2.StuID\n    FROM Has_Allergy AS T2\n    JOIN Allergy_Type AS T1 ON T1.Allergy = T2.Allergy\n    WHERE T1.AllergyType IN ('food', 'animal')\n)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.526",
        "c_low": "SELECT AVG(Age) AS Average_Age\nFROM Student\nWHERE StuID IN (\n    SELECT Has_Allergy.StuID\n    FROM Has_Allergy\n    JOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy\n    WHERE AllergyType IN ('food', 'animal')\n);",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Student' table who are older than a specified age. The placeholder in the WHERE clause represents the age limit.\",\n        \"virtual_table\": \"SELECT StuID FROM Student WHERE age  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT AVG(CAST(S.Age AS INTEGER)) AS average_age\nFROM Student S\nJOIN Has_Allergy HA ON S.StuID = HA.StuID\nJOIN Allergy_Type AT ON HA.Allergy = AT.Allergy\nWHERE AT.AllergyType IN ('food', 'animal');",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    }\n}\n",
        "c_high": "SELECT AVG(CAST(Age AS INTEGER)) AS Average_Age\nFROM Student\nWHERE StuID IN (\n    SELECT T2.StuID\n    FROM Has_Allergy AS T2\n    JOIN Allergy_Type AS T1 ON T1.Allergy = T2.Allergy\n    WHERE T1.AllergyType IN ('food', 'animal')\n)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT AVG(CAST(S.Age AS INTEGER)) AS Average_Age\nFROM Student S\nJOIN Has_Allergy HA ON S.StuID = HA.StuID\nJOIN Allergy_Type AT ON HA.Allergy = AT.Allergy\nWHERE AT.AllergyType IN ('food', 'animal');",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT AVG(CAST(Age AS INTEGER)) AS average_age \nFROM Student \nWHERE StuID IN (\n    SELECT T1.StuID \n    FROM Has_Allergy AS T1 \n    JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy \n    WHERE T2.AllergyType IN ('food', 'animal')\n)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT AVG(CAST(Age AS INTEGER)) AS average_age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Allergy WHERE Allergy IN (SELECT Allergy FROM Allergy_Type WHERE AllergyType IN ('food', 'animal')));",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.527",
        "c_low": "SELECT Fname, LName FROM Student WHERE StuID IN (SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_Allergy)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "c_mid": "SELECT Fname, LName FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Allergy WHERE Allergy IN (SELECT Allergy FROM Allergy_Type WHERE AllergyType = 'Food'));",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    }\n}\n",
        "c_high": "SELECT Fname, LName FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Allergy WHERE Allergy IN (SELECT Allergy FROM Allergy_Type WHERE AllergyType = 'Food'));",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Fname, LName FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Allergy WHERE Allergy IN (SELECT Allergy FROM Allergy_Type WHERE AllergyType = 'Food'));",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Fname, LName FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Allergy)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    }\n}\n",
        "t_3+": "SELECT Fname, LName FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Allergy WHERE Allergy IN (SELECT Allergy FROM Allergy_Type WHERE AllergyType = 'Food'));",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.528",
        "c_low": "SELECT Fname, LName FROM Student WHERE StuID IN (SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_Allergy)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "c_mid": "SELECT Fname || ' ' || LName AS FullName \nFROM Student \nWHERE StuID NOT IN (\n    SELECT StuID \n    FROM Has_Allergy \n    JOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy \n    WHERE Allergy_Type.AllergyType = 'Food'\n);",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    }\n}\n",
        "c_high": "SELECT Fname, LName FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Allergy)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Fname || ' ' || LName AS FullName \nFROM Student \nWHERE StuID NOT IN (SELECT StuID FROM Has_Allergy)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Fname || ' ' || LName AS FullName \nFROM Student \nWHERE StuID NOT IN (SELECT StuID FROM Has_Allergy)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    }\n}\n",
        "t_3+": "SELECT Fname, LName FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Allergy)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.529",
        "c_low": "SELECT COUNT(DISTINCT s.StuID) \nFROM Student s \nJOIN Has_Allergy ha ON s.StuID = ha.StuID \nJOIN Allergy_Type at ON ha.Allergy = at.Allergy \nWHERE s.Sex = 'M' AND at.AllergyType = 'Food';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of different allergies categorized under a specific type from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the allergy type being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of distinct allergy names from the 'Allergy_Type' table. The query uses a placeholder to represent the specific allergy type if needed in future modifications.\",\n        \"virtual_table\": \"SELECT count(DISTINCT allergy) FROM Allergy_type\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "c_mid": "SELECT COUNT(DISTINCT S.StuID) \nFROM Student AS S \nJOIN Has_Allergy AS H ON S.StuID = H.StuID \nJOIN Allergy_Type AS A ON H.Allergy = A.Allergy \nWHERE S.Sex = 'M' AND A.AllergyType = 'Food';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    }\n}\n",
        "c_high": "SELECT COUNT(*) FROM Student WHERE Sex = 'M' AND StuID IN (SELECT StuID FROM Has_Allergy JOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy WHERE AllergyType = 'Food')",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT COUNT(*) FROM Student WHERE Sex = 'M' AND StuID IN (SELECT StuID FROM Has_Allergy WHERE Allergy IN (SELECT Allergy FROM Allergy_Type WHERE AllergyType = 'Food'));",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT COUNT(*) FROM Student WHERE Sex = 'M' AND StuID IN (SELECT StuID FROM Has_Allergy WHERE Allergy IN (SELECT Allergy FROM Allergy_Type WHERE AllergyType = 'Food'))",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(*) FROM Student AS S JOIN Has_Allergy AS H ON S.StuID = H.StuID JOIN Allergy_Type AS A ON H.Allergy = A.Allergy WHERE S.Sex = 'M' AND A.AllergyType = 'Food';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.530",
        "c_low": "SELECT COUNT(DISTINCT s.StuID) \nFROM Student s \nJOIN Has_Allergy ha ON s.StuID = ha.StuID \nJOIN Allergy_Type at ON ha.Allergy = at.Allergy \nWHERE s.Sex = 'M' AND at.AllergyType = 'Food';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the type or category of a specific allergy from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the name of the allergy being queried.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type WHERE allergy  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of different allergies categorized under a specific type from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the allergy type being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT COUNT(DISTINCT S.StuID) \nFROM Student S \nJOIN Has_Allergy HA ON S.StuID = HA.StuID \nJOIN Allergy_Type AT ON HA.Allergy = AT.Allergy \nWHERE S.Sex = 'M' AND AT.AllergyType = 'Food';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    }\n}\n",
        "c_high": "SELECT COUNT(DISTINCT S.StuID) \nFROM Student S \nJOIN Has_Allergy HA ON S.StuID = HA.StuID \nJOIN Allergy_Type AT ON HA.Allergy = AT.Allergy \nWHERE S.Sex = 'M' AND AT.AllergyType = 'Food';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT COUNT(DISTINCT s.StuID) \nFROM Student s \nJOIN Has_Allergy ha ON s.StuID = ha.StuID \nJOIN Allergy_Type at ON ha.Allergy = at.Allergy \nWHERE s.Sex = 'M' AND at.AllergyType = 'Food';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT COUNT(*) FROM Student WHERE Sex = 'M' AND StuID IN (SELECT StuID FROM Has_Allergy WHERE Allergy IN (SELECT Allergy FROM Allergy_Type WHERE AllergyType = 'Food'));",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(DISTINCT S.StuID) \nFROM Student S \nJOIN Has_Allergy HA ON S.StuID = HA.StuID \nJOIN Allergy_Type AT ON HA.Allergy = AT.Allergy \nWHERE S.Sex = 'M' AND AT.AllergyType = 'Food';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.531",
        "c_low": "SELECT DISTINCT S.Fname, S.city_code \nFROM Student S \nJOIN Has_Allergy HA ON S.StuID = HA.StuID \nWHERE HA.Allergy IN ('milk', 'cat');",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of distinct allergy names from the 'Allergy_Type' table. The query uses a placeholder to represent the specific allergy type if needed in future modifications.\",\n        \"virtual_table\": \"SELECT count(DISTINCT allergy) FROM Allergy_type\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the type or category of a specific allergy from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the name of the allergy being queried.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type WHERE allergy  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT S.Fname, S.city_code \nFROM Student S \nJOIN Has_Allergy HA ON S.StuID = HA.StuID \nWHERE HA.Allergy IN ('milk', 'cat');",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT S.Fname, S.city_code \nFROM Student AS S \nJOIN Has_Allergy AS HA ON S.StuID = HA.StuID \nWHERE HA.Allergy IN ('milk', 'cat');",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT Student.Fname, Student.city_code \nFROM Student \nJOIN Has_Allergy ON Student.StuID = Has_Allergy.StuID \nWHERE Has_Allergy.Allergy IN ('milk', 'cat');",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT S.Fname, S.city_code \nFROM Student S \nJOIN Has_Allergy HA ON S.StuID = HA.StuID \nWHERE HA.Allergy IN ('milk', 'cat');",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT S.Fname, S.city_code \nFROM Student AS S \nJOIN Has_Allergy AS H ON S.StuID = H.StuID \nWHERE H.Allergy IN ('milk', 'cat');",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.532",
        "c_low": "SELECT DISTINCT S.Fname, S.city_code \nFROM Student S \nJOIN Has_Allergy HA ON S.StuID = HA.StuID \nWHERE HA.Allergy IN (\"milk\", \"cat\")",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the type or category of a specific allergy from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the name of the allergy being queried.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type WHERE allergy  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of distinct allergy names from the 'Allergy_Type' table. The query uses a placeholder to represent the specific allergy type if needed in future modifications.\",\n        \"virtual_table\": \"SELECT count(DISTINCT allergy) FROM Allergy_type\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT S.Fname, S.city_code \nFROM Student S \nJOIN Has_Allergy HA ON S.StuID = HA.StuID \nWHERE HA.Allergy IN ('milk', 'cat');",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT S.Fname, S.city_code \nFROM Student AS S \nJOIN Has_Allergy AS HA ON S.StuID = HA.StuID \nWHERE HA.Allergy IN ('milk', 'cat');",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT Student.Fname, Student.city_code \nFROM Student \nJOIN Has_Allergy ON Student.StuID = Has_Allergy.StuID \nWHERE Has_Allergy.Allergy IN ('milk', 'cat');",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT S.Fname, S.city_code \nFROM Student S \nJOIN Has_Allergy H ON S.StuID = H.StuID \nWHERE H.Allergy IN ('milk', 'cat')",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT S.Fname, S.city_code \nFROM Student AS S \nJOIN Has_Allergy AS HA ON S.StuID = HA.StuID \nWHERE HA.Allergy IN ('milk', 'cat');",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.533",
        "c_low": "SELECT COUNT(*) FROM Student WHERE StuID IN (SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_Allergy WHERE Allergy IN ('food', 'animal')) AND Age > 18;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Student' table who are older than a specified age. The placeholder in the WHERE clause represents the age limit.\",\n        \"virtual_table\": \"SELECT StuID FROM Student WHERE age  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of students from the 'Student' table who are of a specific age. The placeholder in the WHERE clause represents the age of the students being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Student WHERE age  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT COUNT(*) \nFROM Student \nWHERE Age > 18 \nAND StuID NOT IN (\n    SELECT StuID \n    FROM Has_Allergy \n    WHERE Allergy IN (\n        SELECT Allergy \n        FROM Allergy_Type \n        WHERE AllergyType IN ('food', 'animal')\n    )\n);",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    }\n}\n",
        "c_high": "SELECT COUNT(*) \nFROM Student \nWHERE Age > 18 \nAND StuID NOT IN (\n    SELECT StuID \n    FROM Has_Allergy \n    WHERE Allergy IN (\n        SELECT Allergy \n        FROM Allergy_Type \n        WHERE AllergyType IN ('food', 'animal')\n    )\n)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n",
        "t_1": "SELECT COUNT(*) \nFROM Student \nWHERE Age > 18 \nAND StuID NOT IN (\n    SELECT StuID \n    FROM Has_Allergy \n    WHERE Allergy IN ('food', 'animal')\n);",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT COUNT(*) FROM Student WHERE Age > 18 AND StuID NOT IN (SELECT StuID FROM Has_Allergy WHERE Allergy IN (SELECT Allergy FROM Allergy_Type WHERE AllergyType IN ('food', 'animal')));",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(*) FROM Student WHERE Age > 18 AND StuID NOT IN (SELECT StuID FROM Has_Allergy WHERE Allergy IN (SELECT Allergy FROM Allergy_Type WHERE AllergyType IN ('food', 'animal')));",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.534",
        "c_low": "SELECT COUNT(*) FROM Student WHERE Age > 18 AND StuID NOT IN (SELECT StuID FROM Has_Allergy WHERE Allergy IN (SELECT Allergy FROM Allergy_Type WHERE AllergyType IN ('food', 'animal')));",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of different allergies categorized under a specific type from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the allergy type being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of distinct allergy names from the 'Allergy_Type' table. The query uses a placeholder to represent the specific allergy type if needed in future modifications.\",\n        \"virtual_table\": \"SELECT count(DISTINCT allergy) FROM Allergy_type\"\n    }\n}\n",
        "c_mid": "SELECT COUNT(*) FROM Student WHERE Age > 18 AND StuID NOT IN (SELECT StuID FROM Has_Allergy WHERE Allergy IN (SELECT Allergy FROM Allergy_Type WHERE AllergyType IN ('food', 'animal')));",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    }\n}\n",
        "c_high": "SELECT COUNT(*) FROM Student WHERE Age > 18 AND StuID NOT IN (SELECT StuID FROM Has_Allergy WHERE Allergy IN (SELECT Allergy FROM Allergy_Type WHERE AllergyType IN ('food', 'animal')));",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT COUNT(*) FROM Student WHERE Age > 18 AND StuID NOT IN (SELECT StuID FROM Has_Allergy WHERE Allergy IN (SELECT Allergy FROM Allergy_Type WHERE AllergyType IN ('food', 'animal')));",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT COUNT(*) FROM Student WHERE Age > 18 AND StuID NOT IN (SELECT StuID FROM Has_Allergy WHERE Allergy IN (SELECT Allergy FROM Allergy_Type WHERE AllergyType IN ('food', 'animal')));",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(*) FROM Student WHERE Age > 18 AND StuID NOT IN (SELECT StuID FROM Has_Allergy WHERE Allergy IN (SELECT Allergy FROM Allergy_Type WHERE AllergyType IN ('food', 'animal')));",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.535",
        "c_low": "SELECT Fname, Major FROM Student WHERE StuID IN (SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_Allergy WHERE Allergy = 'soy')",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "c_mid": "SELECT Fname, Major \nFROM Student \nWHERE StuID NOT IN (\n    SELECT StuID \n    FROM Has_Allergy \n    WHERE Allergy = 'soy'\n);",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT Fname, Major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Allergy WHERE Allergy = 'soy')",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n",
        "t_1": "SELECT Fname, Major \nFROM Student \nWHERE StuID NOT IN (\n    SELECT StuID \n    FROM Has_Allergy \n    WHERE Allergy = 'soy'\n);",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT Fname, Major FROM Student WHERE StuID IN (SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_Allergy WHERE Allergy = 'soy')",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT Fname, Major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Allergy WHERE Allergy = 'soy')",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.536",
        "c_low": "SELECT Student.Fname, Student.Major \nFROM Student \nJOIN Has_Allergy ON Student.StuID = Has_Allergy.StuID \nJOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy \nWHERE Allergy_Type.AllergyType != 'Soy';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Student.Fname, Student.Major \nFROM Student \nJOIN Has_Allergy ON Student.StuID = Has_Allergy.StuID \nJOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy \nWHERE Allergy_Type.AllergyType = 'Soy'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT S.Fname, S.Major FROM Student AS S JOIN Has_Allergy AS H ON S.StuID = H.StuID JOIN Allergy_Type AS A ON H.Allergy = A.Allergy WHERE A.Allergy = 'soy';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n",
        "t_1": "SELECT Student.Fname, Student.Major \nFROM Student \nJOIN Has_Allergy ON Student.StuID = Has_Allergy.StuID \nJOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy \nWHERE Allergy_Type.AllergyType = 'Soy'",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT Student.Fname, Student.Major \nFROM Student \nJOIN Has_Allergy ON Student.StuID = Has_Allergy.StuID \nJOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy \nWHERE Allergy_Type.AllergyType = 'soy';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT S.Fname, S.Major FROM Student AS S JOIN Has_Allergy AS H ON S.StuID = H.StuID JOIN Allergy_Type AS A ON H.Allergy = A.Allergy WHERE A.Allergy = 'soy';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.542",
        "c_low": "SELECT billing_country, AVG(total) AS average_invoice_size\nFROM invoices\nGROUP BY billing_country\nORDER BY average_invoice_size DESC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT customers.country, AVG(invoices.total) AS average_invoice_size\nFROM customers\nJOIN invoices ON customers.id = invoices.customer_id\nGROUP BY customers.country\nORDER BY average_invoice_size DESC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total amount of invoices for a specific customer identified by their first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_high": "SELECT billing_country, AVG(total) AS average_invoice_size FROM invoices GROUP BY billing_country ORDER BY average_invoice_size DESC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average total amount of invoices grouped by billing country. The results are ordered in descending order based on the average total, and a placeholder is included to limit the number of results returned.\",\n        \"virtual_table\": \"SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total invoice amounts grouped by billing country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display based on their total invoice amounts.\",\n        \"virtual_table\": \"SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total number of invoices issued per country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display in the result.\",\n        \"virtual_table\": \"SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_1": "SELECT billing_country, AVG(total) AS average_invoice_size \nFROM invoices \nGROUP BY billing_country \nORDER BY AVG(total) DESC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average total amount of invoices grouped by billing country. The results are ordered in descending order based on the average total, and a placeholder is included to limit the number of results returned.\",\n        \"virtual_table\": \"SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total invoice amounts grouped by billing country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display based on their total invoice amounts.\",\n        \"virtual_table\": \"SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total number of invoices issued per country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display in the result.\",\n        \"virtual_table\": \"SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_2": "SELECT customers.country, AVG(invoices.total) AS average_invoice_size \nFROM customers \nJOIN invoices ON customers.id = invoices.customer_id \nGROUP BY customers.country \nORDER BY average_invoice_size DESC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customers along with their first and last names, and the count of invoices associated with each customer. The results are grouped by customer ID and ordered by the number of invoices in descending order, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total invoice amounts for each customer from the 'customers' table. It retrieves the first and last names of customers along with the sum of their associated invoice totals. The results are grouped by customer ID and ordered in descending order based on the total amount, with a limit on the number of results returned as specified by the placeholder.\",\n        \"virtual_table\": \"SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total amount of invoices for a specific customer identified by their first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "t_3+": "SELECT billing_country, AVG(total) AS average_invoice_size\nFROM invoices\nGROUP BY billing_country\nORDER BY average_invoice_size DESC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.553",
        "c_low": "SELECT title FROM albums ORDER BY title ASC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the titles of albums from the 'albums' table that are associated with a specific artist. The placeholder in the WHERE clause represents the name of the artist.\",\n        \"virtual_table\": \"SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the titles of albums from the 'albums' table that are associated with a specific artist from the 'artists' table. The placeholder in the WHERE clause represents the artist's name.\",\n        \"virtual_table\": \"SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT * FROM albums ORDER BY title ASC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT title FROM albums ORDER BY title ASC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles of albums from the 'albums' table that have more than a specified number of tracks associated with them. The placeholder in the HAVING clause represents the minimum count of tracks required for an album to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_1": "SELECT * FROM albums ORDER BY title ASC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT title FROM albums ORDER BY title ASC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the titles of albums from the 'albums' table that are associated with a specific artist. The placeholder in the WHERE clause represents the name of the artist.\",\n        \"virtual_table\": \"SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the titles of albums from the 'albums' table that are associated with a specific artist from the 'artists' table. The placeholder in the WHERE clause represents the artist's name.\",\n        \"virtual_table\": \"SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles of albums from the 'albums' table that have more than a specified number of tracks associated with them. The placeholder in the HAVING clause represents the minimum count of tracks required for an album to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_3+": "SELECT * FROM albums ORDER BY title ASC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.555",
        "c_low": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the titles of albums from the 'albums' table that are associated with a specific artist. The placeholder in the WHERE clause represents the name of the artist.\",\n        \"virtual_table\": \"SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the titles of albums from the 'albums' table that are associated with a specific artist from the 'artists' table. The placeholder in the WHERE clause represents the artist's name.\",\n        \"virtual_table\": \"SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT * FROM albums WHERE title LIKE 'A%' ORDER BY title ASC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title ASC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles of albums from the 'albums' table that have more than a specified number of tracks associated with them. The placeholder in the HAVING clause represents the minimum count of tracks required for an album to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_1": "SELECT * FROM albums WHERE title LIKE 'A%' ORDER BY title ASC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the titles of albums from the 'albums' table that are associated with a specific artist. The placeholder in the WHERE clause represents the name of the artist.\",\n        \"virtual_table\": \"SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the titles of albums from the 'albums' table that are associated with a specific artist from the 'artists' table. The placeholder in the WHERE clause represents the artist's name.\",\n        \"virtual_table\": \"SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles of albums from the 'albums' table that have more than a specified number of tracks associated with them. The placeholder in the HAVING clause represents the minimum count of tracks required for an album to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_3+": "SELECT * FROM albums WHERE title LIKE 'A%' ORDER BY title ASC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.560",
        "c_low": "SELECT SUM(total) AS total_amount\nFROM invoices\nWHERE billing_city = 'Chicago' AND billing_state = 'Illinois';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT sum(total) FROM invoices WHERE billing_city = 'Chicago' AND billing_state = 'Illinois';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total amount of invoices for a specific customer identified by their first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of invoices associated with customers from the 'customers' table, filtered by the customer's first and last name. The placeholders in the WHERE clause represent the first and last names of the customer.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_high": "SELECT SUM(total) FROM invoices WHERE billing_city = 'Chicago' AND billing_state = 'Illinois';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total invoice amounts grouped by billing country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display based on their total invoice amounts.\",\n        \"virtual_table\": \"SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average total amount of invoices grouped by billing country. The results are ordered in descending order based on the average total, and a placeholder is included to limit the number of results returned.\",\n        \"virtual_table\": \"SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total number of invoices issued per country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display in the result.\",\n        \"virtual_table\": \"SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_1": "SELECT SUM(total) FROM invoices WHERE billing_city = 'Chicago' AND billing_state = 'Illinois';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total invoice amounts grouped by billing country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display based on their total invoice amounts.\",\n        \"virtual_table\": \"SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average total amount of invoices grouped by billing country. The results are ordered in descending order based on the average total, and a placeholder is included to limit the number of results returned.\",\n        \"virtual_table\": \"SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total number of invoices issued per country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display in the result.\",\n        \"virtual_table\": \"SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_2": "SELECT SUM(total) FROM invoices WHERE billing_city = 'Chicago' AND billing_state = 'Illinois';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total amount of invoices for a specific customer identified by their first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total invoice amounts for each customer from the 'customers' table. It retrieves the first and last names of customers along with the sum of their associated invoice totals. The results are grouped by customer ID and ordered in descending order based on the total amount, with a limit on the number of results returned as specified by the placeholder.\",\n        \"virtual_table\": \"SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of invoices associated with customers from the 'customers' table, filtered by the customer's first and last name. The placeholders in the WHERE clause represent the first and last names of the customer.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "t_3+": "SELECT SUM(total) AS total_amount\nFROM invoices\nWHERE billing_city = 'Chicago' AND billing_state = 'Illinois';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.564",
        "c_low": "SELECT billing_state, COUNT(*) AS invoice_count\nFROM invoices\nGROUP BY billing_state;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT state, COUNT(*) AS invoice_count FROM invoices JOIN customers ON invoices.customer_id = customers.id GROUP BY state;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total amount of invoices for a specific customer identified by their first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of invoices associated with customers from the 'customers' table, filtered by the customer's first and last name. The placeholders in the WHERE clause represent the first and last names of the customer.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_high": "SELECT billing_state, COUNT(*) AS invoice_count FROM invoices GROUP BY billing_state;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average total amount of invoices grouped by billing country. The results are ordered in descending order based on the average total, and a placeholder is included to limit the number of results returned.\",\n        \"virtual_table\": \"SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total number of invoices issued per country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display in the result.\",\n        \"virtual_table\": \"SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total invoice amounts grouped by billing country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display based on their total invoice amounts.\",\n        \"virtual_table\": \"SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_1": "SELECT billing_state, COUNT(*) AS invoice_count FROM invoices GROUP BY billing_state;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average total amount of invoices grouped by billing country. The results are ordered in descending order based on the average total, and a placeholder is included to limit the number of results returned.\",\n        \"virtual_table\": \"SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total number of invoices issued per country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display in the result.\",\n        \"virtual_table\": \"SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total invoice amounts grouped by billing country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display based on their total invoice amounts.\",\n        \"virtual_table\": \"SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_2": "SELECT billing_state, COUNT(*) AS invoice_count FROM invoices GROUP BY billing_state;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customers along with their first and last names, and the count of invoices associated with each customer. The results are grouped by customer ID and ordered by the number of invoices in descending order, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the total amount of invoices for a specific customer identified by their first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of invoices associated with customers from the 'customers' table, filtered by the customer's first and last name. The placeholders in the WHERE clause represent the first and last names of the customer.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "t_3+": "SELECT billing_state, COUNT(*) AS invoice_count\nFROM invoices\nGROUP BY billing_state;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.565",
        "c_low": "SELECT billing_state, COUNT(*) AS invoice_count\nFROM invoices\nGROUP BY billing_state\nORDER BY invoice_count DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT billing_state, COUNT(*) AS invoice_count \nFROM invoices \nGROUP BY billing_state \nORDER BY invoice_count DESC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total amount of invoices for a specific customer identified by their first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of invoices associated with customers from the 'customers' table, filtered by the customer's first and last name. The placeholders in the WHERE clause represent the first and last names of the customer.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_high": "SELECT billing_state, COUNT(*) AS invoice_count FROM invoices GROUP BY billing_state ORDER BY invoice_count DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average total amount of invoices grouped by billing country. The results are ordered in descending order based on the average total, and a placeholder is included to limit the number of results returned.\",\n        \"virtual_table\": \"SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total number of invoices issued per country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display in the result.\",\n        \"virtual_table\": \"SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total invoice amounts grouped by billing country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display based on their total invoice amounts.\",\n        \"virtual_table\": \"SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_1": "SELECT billing_state, COUNT(*) AS invoice_count FROM invoices GROUP BY billing_state ORDER BY invoice_count DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average total amount of invoices grouped by billing country. The results are ordered in descending order based on the average total, and a placeholder is included to limit the number of results returned.\",\n        \"virtual_table\": \"SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total number of invoices issued per country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display in the result.\",\n        \"virtual_table\": \"SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total invoice amounts grouped by billing country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display based on their total invoice amounts.\",\n        \"virtual_table\": \"SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_2": "SELECT billing_state, COUNT(*) as invoice_count \nFROM invoices \nGROUP BY billing_state \nORDER BY invoice_count DESC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customers along with their first and last names, and the count of invoices associated with each customer. The results are grouped by customer ID and ordered by the number of invoices in descending order, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the total amount of invoices for a specific customer identified by their first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of invoices associated with customers from the 'customers' table, filtered by the customer's first and last name. The placeholders in the WHERE clause represent the first and last names of the customer.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "t_3+": "SELECT billing_state, COUNT(*) AS invoice_count\nFROM invoices\nGROUP BY billing_state\nORDER BY invoice_count DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.566",
        "c_low": "SELECT billing_state, COUNT(*) AS invoice_count\nFROM invoices\nGROUP BY billing_state\nORDER BY invoice_count DESC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT billing_state, COUNT(*) AS invoice_count \nFROM invoices \nGROUP BY billing_state \nORDER BY invoice_count DESC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total amount of invoices for a specific customer identified by their first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of invoices associated with customers from the 'customers' table, filtered by the customer's first and last name. The placeholders in the WHERE clause represent the first and last names of the customer.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_high": "SELECT billing_state, COUNT(*) FROM invoices GROUP BY billing_state ORDER BY COUNT(*) DESC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average total amount of invoices grouped by billing country. The results are ordered in descending order based on the average total, and a placeholder is included to limit the number of results returned.\",\n        \"virtual_table\": \"SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total number of invoices issued per country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display in the result.\",\n        \"virtual_table\": \"SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total invoice amounts grouped by billing country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display based on their total invoice amounts.\",\n        \"virtual_table\": \"SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_1": "SELECT billing_state, COUNT(*) FROM invoices GROUP BY billing_state ORDER BY COUNT(*) DESC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average total amount of invoices grouped by billing country. The results are ordered in descending order based on the average total, and a placeholder is included to limit the number of results returned.\",\n        \"virtual_table\": \"SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total number of invoices issued per country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display in the result.\",\n        \"virtual_table\": \"SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total invoice amounts grouped by billing country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display based on their total invoice amounts.\",\n        \"virtual_table\": \"SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_2": "SELECT billing_state, COUNT(*) as invoice_count FROM invoices GROUP BY billing_state ORDER BY invoice_count DESC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customers along with their first and last names, and the count of invoices associated with each customer. The results are grouped by customer ID and ordered by the number of invoices in descending order, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the total amount of invoices for a specific customer identified by their first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total invoice amounts for each customer from the 'customers' table. It retrieves the first and last names of customers along with the sum of their associated invoice totals. The results are grouped by customer ID and ordered in descending order based on the total amount, with a limit on the number of results returned as specified by the placeholder.\",\n        \"virtual_table\": \"SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_3+": "SELECT billing_state, COUNT(*) AS invoice_count\nFROM invoices\nGROUP BY billing_state\nORDER BY invoice_count DESC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.567",
        "c_low": "SELECT COUNT(*) AS number_of_invoices, SUM(total) AS invoice_total\nFROM invoices\nJOIN customers ON invoices.customer_id = customers.id\nWHERE customers.state = 'California';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT COUNT(*) AS number_of_invoices, SUM(T2.total) AS invoice_total \nFROM customers AS T1 \nJOIN invoices AS T2 ON T1.id = T2.customer_id \nWHERE T1.state = 'California';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total amount of invoices for a specific customer identified by their first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of invoices associated with customers from the 'customers' table, filtered by the customer's first and last name. The placeholders in the WHERE clause represent the first and last names of the customer.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_high": "SELECT COUNT(*) AS number_of_invoices, SUM(total) AS total_invoice_amount \nFROM invoices \nWHERE billing_state = 'California';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total number of invoices issued per country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display in the result.\",\n        \"virtual_table\": \"SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total invoice amounts grouped by billing country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display based on their total invoice amounts.\",\n        \"virtual_table\": \"SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the average total amount of invoices grouped by billing country. The results are ordered in descending order based on the average total, and a placeholder is included to limit the number of results returned.\",\n        \"virtual_table\": \"SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_1": "SELECT COUNT(*) AS number_of_invoices, SUM(total) AS total_invoice_amount FROM invoices WHERE billing_state = 'California';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total number of invoices issued per country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display in the result.\",\n        \"virtual_table\": \"SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total invoice amounts grouped by billing country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display based on their total invoice amounts.\",\n        \"virtual_table\": \"SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the average total amount of invoices grouped by billing country. The results are ordered in descending order based on the average total, and a placeholder is included to limit the number of results returned.\",\n        \"virtual_table\": \"SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_2": "SELECT COUNT(*) AS invoice_count, SUM(T2.total) AS total_amount FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.state = 'California';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total amount of invoices for a specific customer identified by their first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customers along with their first and last names, and the count of invoices associated with each customer. The results are grouped by customer ID and ordered by the number of invoices in descending order, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of invoices associated with customers from the 'customers' table, filtered by the customer's first and last name. The placeholders in the WHERE clause represent the first and last names of the customer.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(*) AS number_of_invoices, SUM(total) AS invoice_total\nFROM invoices\nJOIN customers ON invoices.customer_id = customers.id\nWHERE customers.state = 'California';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.568",
        "c_low": "SELECT COUNT(*) AS number_of_invoices, SUM(total) AS total_billed\nFROM invoices\nJOIN customers ON invoices.customer_id = customers.id\nWHERE customers.state = 'CA';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT COUNT(*) AS number_of_invoices, SUM(total) AS total_billed FROM invoices AS T1 JOIN customers AS T2 ON T1.customer_id = T2.id WHERE T2.state = 'CA';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total amount of invoices for a specific customer identified by their first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of invoices associated with customers from the 'customers' table, filtered by the customer's first and last name. The placeholders in the WHERE clause represent the first and last names of the customer.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_high": "SELECT COUNT(*) AS number_of_invoices, SUM(total) AS total_billed FROM invoices WHERE billing_state = 'CA';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total invoice amounts grouped by billing country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display based on their total invoice amounts.\",\n        \"virtual_table\": \"SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average total amount of invoices grouped by billing country. The results are ordered in descending order based on the average total, and a placeholder is included to limit the number of results returned.\",\n        \"virtual_table\": \"SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total number of invoices issued per country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display in the result.\",\n        \"virtual_table\": \"SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_1": "SELECT COUNT(*) AS number_of_invoices, SUM(total) AS total_billed FROM invoices WHERE billing_state = 'CA';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total invoice amounts grouped by billing country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display based on their total invoice amounts.\",\n        \"virtual_table\": \"SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average total amount of invoices grouped by billing country. The results are ordered in descending order based on the average total, and a placeholder is included to limit the number of results returned.\",\n        \"virtual_table\": \"SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total number of invoices issued per country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display in the result.\",\n        \"virtual_table\": \"SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_2": "SELECT COUNT(*) AS number_of_invoices, SUM(total) AS total_billed FROM invoices AS T1 JOIN customers AS T2 ON T1.customer_id = T2.id WHERE T2.state = 'CA';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total amount of invoices for a specific customer identified by their first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customers along with their first and last names, and the count of invoices associated with each customer. The results are grouped by customer ID and ordered by the number of invoices in descending order, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total invoice amounts for each customer from the 'customers' table. It retrieves the first and last names of customers along with the sum of their associated invoice totals. The results are grouped by customer ID and ordered in descending order based on the total amount, with a limit on the number of results returned as specified by the placeholder.\",\n        \"virtual_table\": \"SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(*) AS number_of_invoices, SUM(total) AS total_billed\nFROM invoices\nJOIN customers ON invoices.customer_id = customers.id\nWHERE customers.state = 'CA';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.575",
        "c_low": "SELECT email, phone FROM employees WHERE first_name = 'Astrid' AND last_name = 'Gruber';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT email, phone FROM employees WHERE first_name = 'Astrid' AND last_name = 'Gruber';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT email, phone FROM employees WHERE first_name = 'Astrid' AND last_name = 'Gruber';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT email, phone FROM employees WHERE first_name = 'Astrid' AND last_name = 'Gruber';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT email, phone FROM employees WHERE first_name = 'Astrid' AND last_name = 'Gruber';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT email, phone FROM employees WHERE first_name = 'Astrid' AND last_name = 'Gruber';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.580",
        "c_low": "SELECT COUNT(*) AS customer_count FROM customers WHERE state = 'California';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT COUNT(*) AS customer_count FROM customers WHERE state = 'California';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT COUNT(*) AS customer_count FROM customers WHERE state = 'California';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT COUNT(*) AS customer_count FROM customers WHERE state = 'California';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT COUNT(*) AS customer_count FROM customers WHERE state = 'California';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT COUNT(*) AS customer_count FROM customers WHERE state = 'California';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.587",
        "c_low": "SELECT employees.first_name, employees.last_name, employees.hire_date, employees.phone \nFROM employees \nWHERE employees.first_name = 'Nancy' AND employees.last_name = 'Edwards';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT employees.first_name, employees.last_name, employees.hire_date, employees.phone \nFROM employees \nWHERE employees.first_name = 'Nancy' AND employees.last_name = 'Edwards';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT employees.first_name, employees.last_name, employees.hire_date, employees.phone \nFROM employees \nWHERE employees.first_name = 'Nancy' AND employees.last_name = 'Edwards';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT employees.first_name, employees.last_name, employees.hire_date, employees.phone \nFROM employees \nWHERE employees.first_name = 'Nancy' AND employees.last_name = 'Edwards';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT employees.first_name, employees.last_name, employees.hire_date, employees.phone \nFROM employees \nWHERE employees.first_name = 'Nancy' AND employees.last_name = 'Edwards';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT employees.first_name, employees.last_name, employees.hire_date, employees.phone \nFROM employees \nWHERE employees.first_name = 'Nancy' AND employees.last_name = 'Edwards';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.589",
        "c_low": "SELECT first_name || ' ' || last_name AS full_name\nFROM employees\nWHERE reports_to = (SELECT id FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards');",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT T2.first_name, T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = 'Nancy' AND T1.last_name = 'Edwards';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of employees who report to a specific manager from the 'employees' table. The placeholders in the WHERE clause represent the first and last names of the manager.\",\n        \"virtual_table\": \"SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_high": "SELECT first_name, last_name FROM employees WHERE reports_to = (SELECT id FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards');",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of employees and their managers from the 'employees' table. It lists the first and last names of managers along with the count of employees reporting to each manager. The results are grouped by the manager's identifier and ordered by the number of reports in descending order, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_1": "SELECT T2.first_name, T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = 'Nancy' AND T1.last_name = 'Edwards';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of employees who report to a specific manager from the 'employees' table. The placeholders in the WHERE clause represent the first and last names of the manager.\",\n        \"virtual_table\": \"SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a summary of employees and their managers from the 'employees' table. It lists the first and last names of managers along with the count of employees reporting to each manager. The results are grouped by the manager's identifier and ordered by the number of reports in descending order, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_2": "SELECT first_name || ' ' || last_name AS full_name \nFROM employees \nWHERE reports_to = (SELECT id FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards');",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT first_name || ' ' || last_name AS full_name\nFROM employees\nWHERE reports_to = (SELECT id FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards');",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.592",
        "c_low": "SELECT address, city, state, country, postal_code FROM customers WHERE first_name = 'Nancy' AND last_name = 'Edwards';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT address, city, state, country, postal_code FROM customers WHERE first_name = 'Nancy' AND last_name = 'Edwards';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT address, city, state, country, postal_code FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT address, city, state, country, postal_code FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT address, city, state, country, postal_code FROM customers WHERE first_name = 'Nancy' AND last_name = 'Edwards';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT address, city, state, country, postal_code FROM customers WHERE first_name = 'Nancy' AND last_name = 'Edwards';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.593",
        "c_low": "SELECT e.first_name || ' ' || e.last_name AS full_name\nFROM employees e\nJOIN customers c ON e.id = c.support_rep_id\nGROUP BY e.id\nORDER BY COUNT(c.id) DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT e.first_name || ' ' || e.last_name AS full_name\nFROM employees e\nJOIN customers c ON c.support_rep_id = e.id\nGROUP BY e.id\nORDER BY COUNT(c.id) DESC\nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of customers supported by a specific employee from the 'employees' table. The join condition links the 'customers' table to the 'employees' table based on the support representative's ID. The placeholders in the WHERE clause represent the first and last names of the employee whose customer count is being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_high": "SELECT E.first_name, E.last_name \nFROM employees AS E \nJOIN customers AS C ON C.support_rep_id = E.id \nJOIN invoices AS I ON I.customer_id = C.id \nGROUP BY E.id \nORDER BY COUNT(I.id) DESC \nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customers along with their first and last names, and the count of invoices associated with each customer. The results are grouped by customer ID and ordered by the number of invoices in descending order, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_1": "SELECT e.first_name || ' ' || e.last_name AS full_name\nFROM employees e\nJOIN customers c ON e.id = c.support_rep_id\nGROUP BY e.id\nORDER BY COUNT(c.id) DESC\nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT e.first_name, e.last_name \nFROM employees e \nJOIN customers c ON c.support_rep_id = e.id \nGROUP BY e.id \nORDER BY COUNT(c.id) DESC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of customers supported by a specific employee from the 'employees' table. The join condition links the 'customers' table to the 'employees' table based on the support representative's ID. The placeholders in the WHERE clause represent the first and last names of the employee whose customer count is being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customers along with their first and last names, and the count of invoices associated with each customer. The results are grouped by customer ID and ordered by the number of invoices in descending order, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_3+": "SELECT e.first_name || ' ' || e.last_name AS full_name\nFROM employees e\nJOIN customers c ON e.id = c.support_rep_id\nGROUP BY e.id\nORDER BY COUNT(c.id) DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.594",
        "c_low": "SELECT e.first_name || ' ' || e.last_name AS full_name\nFROM employees e\nJOIN customers c ON e.id = c.support_rep_id\nGROUP BY e.id\nORDER BY COUNT(c.id) DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT e.first_name || ' ' || e.last_name AS full_name\nFROM employees e\nJOIN customers c ON e.id = c.support_rep_id\nGROUP BY e.id\nORDER BY COUNT(c.id) DESC\nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT e.first_name, e.last_name FROM employees AS e JOIN customers AS c ON e.id = c.support_rep_id GROUP BY e.id ORDER BY COUNT(c.id) DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customers along with their first and last names, and the count of invoices associated with each customer. The results are grouped by customer ID and ordered by the number of invoices in descending order, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_1": "SELECT e.first_name || ' ' || e.last_name AS full_name\nFROM employees e\nJOIN customers c ON e.id = c.support_rep_id\nGROUP BY e.id\nORDER BY COUNT(c.id) DESC\nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT e.first_name, e.last_name FROM employees AS e JOIN customers AS c ON e.id = c.support_rep_id GROUP BY e.id ORDER BY COUNT(c.id) DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customers along with their first and last names, and the count of invoices associated with each customer. The results are grouped by customer ID and ordered by the number of invoices in descending order, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_3+": "SELECT e.first_name || ' ' || e.last_name AS full_name\nFROM employees e\nJOIN customers c ON e.id = c.support_rep_id\nGROUP BY e.id\nORDER BY COUNT(c.id) DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.604",
        "c_low": "SELECT city, COUNT(*) AS number_of_employees\nFROM employees\nWHERE title LIKE '%IT%'\nGROUP BY city;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT city, COUNT(*) AS number_of_employees\nFROM employees\nWHERE title LIKE '%IT%'\nGROUP BY city;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT city, COUNT(*) AS number_of_employees\nFROM employees\nWHERE title LIKE '%IT%'\nGROUP BY city;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT city, COUNT(*) AS number_of_employees\nFROM employees\nWHERE title LIKE '%IT%'\nGROUP BY city;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT city, COUNT(*) AS employee_count \nFROM employees \nWHERE title LIKE '%IT%'\nGROUP BY city;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT city, COUNT(*) AS number_of_employees\nFROM employees\nWHERE title LIKE '%IT%'\nGROUP BY city;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.606",
        "c_low": "SELECT e.first_name, e.last_name, COUNT(e2.id) AS reports_count\nFROM employees e\nLEFT JOIN employees e2 ON e.id = e2.reports_to\nGROUP BY e.id;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT T1.first_name, T1.last_name, COUNT(T2.id) AS report_count \nFROM employees AS T1 \nLEFT JOIN employees AS T2 ON T1.id = T2.reports_to \nGROUP BY T1.id;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of employees who report to a specific manager from the 'employees' table. The placeholders in the WHERE clause represent the first and last names of the manager.\",\n        \"virtual_table\": \"SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_high": "SELECT T2.first_name, T2.last_name, COUNT(T1.reports_to) AS report_count \nFROM employees AS T1 \nJOIN employees AS T2 ON T1.reports_to = T2.id \nGROUP BY T1.reports_to \nORDER BY report_count DESC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of employees and their managers from the 'employees' table. It lists the first and last names of managers along with the count of employees reporting to each manager. The results are grouped by the manager's identifier and ordered by the number of reports in descending order, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_1": "SELECT T2.first_name, T2.last_name, COUNT(T1.reports_to) AS report_count \nFROM employees AS T1 \nJOIN employees AS T2 ON T1.reports_to = T2.id \nGROUP BY T1.reports_to \nORDER BY report_count DESC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of employees who report to a specific manager from the 'employees' table. The placeholders in the WHERE clause represent the first and last names of the manager.\",\n        \"virtual_table\": \"SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a summary of employees and their managers from the 'employees' table. It lists the first and last names of managers along with the count of employees reporting to each manager. The results are grouped by the manager's identifier and ordered by the number of reports in descending order, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_2": "SELECT e.first_name, e.last_name, COUNT(e2.id) AS reports_count\nFROM employees e\nLEFT JOIN employees e2 ON e.id = e2.reports_to\nGROUP BY e.id;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT e.first_name, e.last_name, COUNT(e2.id) AS reports_count\nFROM employees e\nLEFT JOIN employees e2 ON e.id = e2.reports_to\nGROUP BY e.id;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.608",
        "c_low": "SELECT COUNT(*) AS order_count \nFROM invoices \nJOIN customers ON invoices.customer_id = customers.id \nWHERE customers.first_name = 'Luca' AND customers.last_name = 'Mancini';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = 'Luca' AND T1.last_name = 'Mancini';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total amount of invoices for a specific customer identified by their first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of invoices associated with customers from the 'customers' table, filtered by the customer's first and last name. The placeholders in the WHERE clause represent the first and last names of the customer.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_high": "SELECT COUNT(*) FROM invoices AS T1 JOIN customers AS T2 ON T1.customer_id = T2.id WHERE T2.first_name = 'Luca' AND T2.last_name = 'Mancini';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total number of invoices issued per country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display in the result.\",\n        \"virtual_table\": \"SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customers along with their first and last names, and the count of invoices associated with each customer. The results are grouped by customer ID and ordered by the number of invoices in descending order, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total invoice amounts grouped by billing country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display based on their total invoice amounts.\",\n        \"virtual_table\": \"SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_1": "SELECT COUNT(*) FROM invoices WHERE customer_id = (SELECT id FROM customers WHERE first_name = 'Luca' AND last_name = 'Mancini');",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total number of invoices issued per country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display in the result.\",\n        \"virtual_table\": \"SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total invoice amounts grouped by billing country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display based on their total invoice amounts.\",\n        \"virtual_table\": \"SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the average total amount of invoices grouped by billing country. The results are ordered in descending order based on the average total, and a placeholder is included to limit the number of results returned.\",\n        \"virtual_table\": \"SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_2": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = 'Luca' AND T1.last_name = 'Mancini';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total amount of invoices for a specific customer identified by their first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customers along with their first and last names, and the count of invoices associated with each customer. The results are grouped by customer ID and ordered by the number of invoices in descending order, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of invoices associated with customers from the 'customers' table, filtered by the customer's first and last name. The placeholders in the WHERE clause represent the first and last names of the customer.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(*) AS order_count \nFROM invoices \nJOIN customers ON invoices.customer_id = customers.id \nWHERE customers.first_name = 'Luca' AND customers.last_name = 'Mancini';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.611",
        "c_low": "SELECT * FROM media_types;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT name FROM media_types;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre and media type. The placeholders in the WHERE clause represent the genre's name and the media type's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] AND T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre or media type. The placeholders in the WHERE clause represent the genre's name and the media type's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] OR T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_high": "SELECT * FROM media_types;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT * FROM media_types;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT * FROM media_types;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT * FROM media_types;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre and media type. The placeholders in the WHERE clause represent the genre's name and the media type's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] AND T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre or media type. The placeholders in the WHERE clause represent the genre's name and the media type's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] OR T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n"
    },
    {
        "sample_id": "train.623",
        "c_low": "SELECT albums.title FROM albums JOIN tracks ON albums.id = tracks.album_id WHERE tracks.name = 'Balls to the Wall';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the titles of albums from the 'albums' table that are associated with a specific artist. The placeholder in the WHERE clause represents the name of the artist.\",\n        \"virtual_table\": \"SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the titles of albums from the 'albums' table that are associated with a specific artist from the 'artists' table. The placeholder in the WHERE clause represents the artist's name.\",\n        \"virtual_table\": \"SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre. The placeholder in the WHERE clause represents the genre's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_mid": "SELECT albums.title \nFROM albums \nJOIN tracks ON albums.id = tracks.album_id \nWHERE tracks.name = 'Balls to the Wall';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT albums.title \nFROM albums \nJOIN tracks ON albums.id = tracks.album_id \nWHERE tracks.name = 'Balls to the Wall';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles of albums from the 'albums' table that have more than a specified number of tracks associated with them. The placeholder in the HAVING clause represents the minimum count of tracks required for an album to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_1": "SELECT albums.title \nFROM albums \nJOIN tracks ON albums.id = tracks.album_id \nWHERE tracks.name = 'Balls to the Wall';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT albums.title FROM albums JOIN tracks ON albums.id = tracks.album_id WHERE tracks.name = 'Balls to the Wall';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the titles of albums from the 'albums' table that are associated with a specific artist. The placeholder in the WHERE clause represents the name of the artist.\",\n        \"virtual_table\": \"SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the titles of albums from the 'albums' table that have more than a specified number of tracks associated with them. The placeholder in the HAVING clause represents the minimum count of tracks required for an album to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the titles of albums from the 'albums' table that are associated with a specific artist from the 'artists' table. The placeholder in the WHERE clause represents the artist's name.\",\n        \"virtual_table\": \"SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT albums.title \nFROM albums \nJOIN tracks ON albums.id = tracks.album_id \nWHERE tracks.name = 'Balls to the Wall';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.624",
        "c_low": "SELECT albums.title FROM albums JOIN tracks ON albums.id = tracks.album_id WHERE tracks.name = 'Ball to the Wall';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the titles of albums from the 'albums' table that are associated with a specific artist. The placeholder in the WHERE clause represents the name of the artist.\",\n        \"virtual_table\": \"SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the titles of albums from the 'albums' table that are associated with a specific artist from the 'artists' table. The placeholder in the WHERE clause represents the artist's name.\",\n        \"virtual_table\": \"SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT albums.title \nFROM albums \nJOIN tracks ON albums.id = tracks.album_id \nWHERE tracks.name = 'Ball to the Wall';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT albums.title \nFROM albums \nJOIN tracks ON albums.id = tracks.album_id \nWHERE tracks.name = 'Ball to the Wall';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles of albums from the 'albums' table that have more than a specified number of tracks associated with them. The placeholder in the HAVING clause represents the minimum count of tracks required for an album to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_1": "SELECT albums.title \nFROM albums \nJOIN tracks ON albums.id = tracks.album_id \nWHERE tracks.name = 'Ball to the Wall';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id WHERE T2.name = 'Ball to the Wall';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the titles of albums from the 'albums' table that are associated with a specific artist. The placeholder in the WHERE clause represents the name of the artist.\",\n        \"virtual_table\": \"SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the titles of albums from the 'albums' table that have more than a specified number of tracks associated with them. The placeholder in the HAVING clause represents the minimum count of tracks required for an album to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the titles of albums from the 'albums' table that are associated with a specific artist from the 'artists' table. The placeholder in the WHERE clause represents the artist's name.\",\n        \"virtual_table\": \"SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT albums.title \nFROM albums \nJOIN tracks ON albums.id = tracks.album_id \nWHERE tracks.name = 'Ball to the Wall';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.625",
        "c_low": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = 'Balls to the Wall';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that are included in a specific playlist. The query joins the 'tracks' table with the 'playlist_tracks' table to associate tracks with their respective playlists, and then filters the results based on the name of the playlist provided as a placeholder.\",\n        \"virtual_table\": \"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre. The placeholder in the WHERE clause represents the genre's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_mid": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id WHERE T1.title = 'Balls to the Wall';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre or media type. The placeholders in the WHERE clause represent the genre's name and the media type's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] OR T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_high": "SELECT T1.name FROM tracks AS T1 JOIN albums AS T2 ON T1.album_id = T2.id WHERE T2.title = 'Balls to the Wall'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks that are present in two different playlists. The placeholders in the WHERE clause represent the names of the playlists being compared.\",\n        \"virtual_table\": \"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of tracks that are present in one playlist but not in another playlist. The placeholders in the WHERE clause represent the names of the playlists being compared.\",\n        \"virtual_table\": \"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT tracks.name \nFROM tracks \nJOIN albums ON tracks.album_id = albums.id \nWHERE albums.title = 'Balls to the Wall';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id WHERE T1.title = 'Balls to the Wall';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre. The placeholder in the WHERE clause represents the genre's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "t_3+": "SELECT T1.name FROM tracks AS T1 JOIN albums AS T2 ON T1.album_id = T2.id WHERE T2.title = 'Balls to the Wall';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks that are present in two different playlists. The placeholders in the WHERE clause represent the names of the playlists being compared.\",\n        \"virtual_table\": \"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that are included in a specific playlist. The query joins the 'tracks' table with the 'playlist_tracks' table to associate tracks with their respective playlists, and then filters the results based on the name of the playlist provided as a placeholder.\",\n        \"virtual_table\": \"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of tracks that are present in one playlist but not in another playlist. The placeholders in the WHERE clause represent the names of the playlists being compared.\",\n        \"virtual_table\": \"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.626",
        "c_low": "SELECT T1.name FROM tracks AS T1 JOIN albums AS T2 ON T1.album_id = T2.id WHERE T2.title = 'Balls to the Wall';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that are included in a specific playlist. The query joins the 'tracks' table with the 'playlist_tracks' table to associate tracks with their respective playlists, and then filters the results based on the name of the playlist provided as a placeholder.\",\n        \"virtual_table\": \"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre. The placeholder in the WHERE clause represents the genre's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the titles of albums from the 'albums' table that are associated with a specific artist. The placeholder in the WHERE clause represents the name of the artist.\",\n        \"virtual_table\": \"SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_mid": "SELECT tracks.name \nFROM tracks \nJOIN albums ON tracks.album_id = albums.id \nWHERE albums.title = 'Balls to the Wall';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that have been purchased by a specific customer. The query joins multiple tables to filter the results based on the customer's first and last names, represented by placeholders in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = [PLACEHOLDER-TYPE:STRING] AND T4.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre or media type. The placeholders in the WHERE clause represent the genre's name and the media type's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] OR T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre and media type. The placeholders in the WHERE clause represent the genre's name and the media type's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] AND T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_high": "SELECT T1.name FROM tracks AS T1 JOIN albums AS T2 ON T1.album_id = T2.id WHERE T2.title = 'Balls to the Wall';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks that are present in two different playlists. The placeholders in the WHERE clause represent the names of the playlists being compared.\",\n        \"virtual_table\": \"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of tracks that are present in one playlist but not in another playlist. The placeholders in the WHERE clause represent the names of the playlists being compared.\",\n        \"virtual_table\": \"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles of albums from the 'albums' table that have more than a specified number of tracks associated with them. The placeholder in the HAVING clause represents the minimum count of tracks required for an album to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_1": "SELECT tracks.name \nFROM tracks \nJOIN albums ON tracks.album_id = albums.id \nWHERE albums.title = 'Balls to the Wall';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id WHERE T1.title = 'Balls to the Wall';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre. The placeholder in the WHERE clause represents the genre's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the titles of albums from the 'albums' table that are associated with a specific artist. The placeholder in the WHERE clause represents the name of the artist.\",\n        \"virtual_table\": \"SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles of albums from the 'albums' table that have more than a specified number of tracks associated with them. The placeholder in the HAVING clause represents the minimum count of tracks required for an album to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_3+": "SELECT T1.title FROM albums AS T1 WHERE T1.title = 'Balls to the Wall';\nSELECT T1.name FROM tracks AS T1 JOIN albums AS T2 ON T1.album_id = T2.id WHERE T2.title = 'Balls to the Wall';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks that are present in two different playlists. The placeholders in the WHERE clause represent the names of the playlists being compared.\",\n        \"virtual_table\": \"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that are included in a specific playlist. The query joins the 'tracks' table with the 'playlist_tracks' table to associate tracks with their respective playlists, and then filters the results based on the name of the playlist provided as a placeholder.\",\n        \"virtual_table\": \"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that have been purchased by a specific customer. The query joins multiple tables to filter the results based on the customer's first and last names, represented by placeholders in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = [PLACEHOLDER-TYPE:STRING] AND T4.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n"
    },
    {
        "sample_id": "train.630",
        "c_low": "SELECT T1.name \nFROM tracks AS T1 \nJOIN media_types AS T2 ON T1.media_type_id = T2.id \nJOIN genres AS T3 ON T1.genre_id = T3.id \nWHERE T3.name = 'Rock' AND T2.name = 'MPEG audio';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre. The placeholder in the WHERE clause represents the genre's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that are included in a specific playlist. The query joins the 'tracks' table with the 'playlist_tracks' table to associate tracks with their respective playlists, and then filters the results based on the name of the playlist provided as a placeholder.\",\n        \"virtual_table\": \"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_mid": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = 'Rock' AND T3.name = 'MPEG audio';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre and media type. The placeholders in the WHERE clause represent the genre's name and the media type's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] AND T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre or media type. The placeholders in the WHERE clause represent the genre's name and the media type's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] OR T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to specific genres. The genres are filtered based on the names provided in the WHERE clause, allowing for the selection of tracks from one or two specified genres.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] OR T1.name = [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT tracks.name \nFROM tracks \nJOIN media_types ON tracks.media_type_id = media_types.id \nJOIN genres ON tracks.genre_id = genres.id \nWHERE genres.name = 'Rock' AND media_types.name = 'MPEG audio';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks that are present in two different playlists. The placeholders in the WHERE clause represent the names of the playlists being compared.\",\n        \"virtual_table\": \"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of tracks that are present in one playlist but not in another playlist. The placeholders in the WHERE clause represent the names of the playlists being compared.\",\n        \"virtual_table\": \"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT tracks.name \nFROM tracks \nJOIN media_types ON tracks.media_type_id = media_types.id \nJOIN genres ON tracks.genre_id = genres.id \nWHERE genres.name = 'Rock' AND media_types.name = 'MPEG audio';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T2.media_type_id = T3.id WHERE T1.name = 'Rock' AND T3.name = 'MPEG audio';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre. The placeholder in the WHERE clause represents the genre's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to specific genres. The genres are filtered based on the names provided in the WHERE clause, allowing for the selection of tracks from one or two specified genres.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] OR T1.name = [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = 'Rock' AND T3.name = 'MPEG audio';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre and media type. The placeholders in the WHERE clause represent the genre's name and the media type's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] AND T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre or media type. The placeholders in the WHERE clause represent the genre's name and the media type's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] OR T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of tracks that are present in two different playlists. The placeholders in the WHERE clause represent the names of the playlists being compared.\",\n        \"virtual_table\": \"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.632",
        "c_low": "SELECT T1.name FROM tracks AS T1 JOIN genres AS T2 ON T1.genre_id = T2.id JOIN media_types AS T3 ON T1.media_type_id = T3.id WHERE T2.name = 'Rock' AND T3.name = 'MPEG';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre. The placeholder in the WHERE clause represents the genre's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that are included in a specific playlist. The query joins the 'tracks' table with the 'playlist_tracks' table to associate tracks with their respective playlists, and then filters the results based on the name of the playlist provided as a placeholder.\",\n        \"virtual_table\": \"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_mid": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = 'Rock' AND T3.name = 'MPEG';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre and media type. The placeholders in the WHERE clause represent the genre's name and the media type's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] AND T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre or media type. The placeholders in the WHERE clause represent the genre's name and the media type's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] OR T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to specific genres. The genres are filtered based on the names provided in the WHERE clause, allowing for the selection of tracks from one or two specified genres.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] OR T1.name = [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT T1.name \nFROM tracks AS T1 \nJOIN media_types AS T2 ON T1.media_type_id = T2.id \nJOIN genres AS T3 ON T1.genre_id = T3.id \nWHERE T3.name = 'Rock' AND T2.name = 'MPEG';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks that are present in two different playlists. The placeholders in the WHERE clause represent the names of the playlists being compared.\",\n        \"virtual_table\": \"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a summary of the number of tracks associated with each genre from the 'genres' table. It counts the tracks that belong to each genre and orders the results in descending order based on the count. The placeholder in the LIMIT clause allows the user to specify the maximum number of genres to return.\",\n        \"virtual_table\": \"SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_1": "SELECT tracks.name \nFROM tracks \nJOIN genres ON tracks.genre_id = genres.id \nJOIN media_types ON tracks.media_type_id = media_types.id \nWHERE genres.name = 'Rock' AND media_types.name = 'MPEG';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T2.media_type_id = T3.id WHERE T1.name = 'Rock' AND T3.name = 'MPEG';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre. The placeholder in the WHERE clause represents the genre's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to specific genres. The genres are filtered based on the names provided in the WHERE clause, allowing for the selection of tracks from one or two specified genres.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] OR T1.name = [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of tracks grouped by their respective genres from the 'genres' and 'tracks' tables. The placeholder in the SELECT clause represents the count of tracks, while the genre name is displayed alongside it.\",\n        \"virtual_table\": \"SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name;\"\n    }\n}\n",
        "t_3+": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = 'Rock' AND T3.name = 'MPEG';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre and media type. The placeholders in the WHERE clause represent the genre's name and the media type's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] AND T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre or media type. The placeholders in the WHERE clause represent the genre's name and the media type's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] OR T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that are included in a specific playlist. The query joins the 'tracks' table with the 'playlist_tracks' table to associate tracks with their respective playlists, and then filters the results based on the name of the playlist provided as a placeholder.\",\n        \"virtual_table\": \"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n"
    },
    {
        "sample_id": "train.640",
        "c_low": "SELECT T3.name \nFROM customers AS C \nJOIN invoices AS I ON C.id = I.customer_id \nJOIN invoice_lines AS IL ON I.id = IL.invoice_id \nJOIN tracks AS T3 ON IL.track_id = T3.id \nWHERE C.first_name = 'Dean' AND C.last_name = 'Peeters';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre. The placeholder in the WHERE clause represents the genre's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_mid": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = 'Dean' AND T4.last_name = 'Peeters';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that have been purchased by a specific customer. The query joins multiple tables to filter the results based on the customer's first and last names, represented by placeholders in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = [PLACEHOLDER-TYPE:STRING] AND T4.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre or media type. The placeholders in the WHERE clause represent the genre's name and the media type's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] OR T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre and media type. The placeholders in the WHERE clause represent the genre's name and the media type's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] AND T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_high": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T2.invoice_id = T3.id JOIN customers AS T4 ON T3.customer_id = T4.id WHERE T4.first_name = 'Dean' AND T4.last_name = 'Peeters';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks that are present in two different playlists. The placeholders in the WHERE clause represent the names of the playlists being compared.\",\n        \"virtual_table\": \"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the titles of albums from the 'albums' table that have more than a specified number of tracks associated with them. The placeholder in the HAVING clause represents the minimum count of tracks required for an album to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_1": "SELECT tracks.name \nFROM tracks \nJOIN invoice_lines ON tracks.id = invoice_lines.track_id \nJOIN invoices ON invoice_lines.invoice_id = invoices.id \nJOIN customers ON invoices.customer_id = customers.id \nWHERE customers.first_name = 'Dean' AND customers.last_name = 'Peeters';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T3.name FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id JOIN invoice_lines AS T4 ON T2.id = T4.invoice_id JOIN tracks AS T3 ON T4.track_id = T3.id WHERE T1.first_name = 'Dean' AND T1.last_name = 'Peeters';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre. The placeholder in the WHERE clause represents the genre's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to specific genres. The genres are filtered based on the names provided in the WHERE clause, allowing for the selection of tracks from one or two specified genres.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] OR T1.name = [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles of albums from the 'albums' table that have more than a specified number of tracks associated with them. The placeholder in the HAVING clause represents the minimum count of tracks required for an album to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_3+": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = 'Dean' AND T4.last_name = 'Peeters';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that have been purchased by a specific customer. The query joins multiple tables to filter the results based on the customer's first and last names, represented by placeholders in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = [PLACEHOLDER-TYPE:STRING] AND T4.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre or media type. The placeholders in the WHERE clause represent the genre's name and the media type's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] OR T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre and media type. The placeholders in the WHERE clause represent the genre's name and the media type's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] AND T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n"
    },
    {
        "sample_id": "train.656",
        "c_low": "SELECT Age, COUNT(*) as Count FROM editor GROUP BY Age ORDER BY Count DESC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Age, COUNT(*) as AgeCount FROM editor GROUP BY Age ORDER BY AgeCount DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of editors from the 'editor' table who are either of a specific age or another specified age. The placeholders in the WHERE clause represent the ages to filter the editors.\",\n        \"virtual_table\": \"SELECT Name FROM editor WHERE Age  =  [PLACEHOLDER-TYPE:NUMBER] OR Age  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of editors who are part of a committee for journal entries that have sales figures exceeding a specified amount. The placeholders in the WHERE clause represent the sales threshold.\",\n        \"virtual_table\": \"SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID WHERE T3.Sales  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT Age, COUNT(*) as AgeCount FROM editor GROUP BY Age ORDER BY AgeCount DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of editors from the 'editor' table who have contributed to the journal committee at least a specified number of times. The placeholder in the HAVING clause represents the minimum count of contributions required.\",\n        \"virtual_table\": \"SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of editors from the 'editor' table who are not involved in any journal committee. The placeholder in the subquery represents the editor IDs that are linked to the journal committee.\",\n        \"virtual_table\": \"SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)\"\n    }\n}\n",
        "t_1": "SELECT Age, COUNT(*) as AgeCount FROM editor GROUP BY Age ORDER BY AgeCount DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of editors from the 'editor' table who are either of a specific age or another specified age. The placeholders in the WHERE clause represent the ages to filter the editors.\",\n        \"virtual_table\": \"SELECT Name FROM editor WHERE Age  =  [PLACEHOLDER-TYPE:NUMBER] OR Age  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Age, COUNT(*) as AgeCount FROM editor GROUP BY Age ORDER BY AgeCount DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of editors from the 'editor' table who have contributed to the journal committee at least a specified number of times. The placeholder in the HAVING clause represents the minimum count of contributions required.\",\n        \"virtual_table\": \"SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of editors from the 'editor' table who are not involved in any journal committee. The placeholder in the subquery represents the editor IDs that are linked to the journal committee.\",\n        \"virtual_table\": \"SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)\"\n    }\n}\n",
        "t_3+": "SELECT Age, COUNT(Age) AS AgeCount FROM editor GROUP BY Age ORDER BY AgeCount DESC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of editors who are part of a committee for journal entries that have sales figures exceeding a specified amount. The placeholders in the WHERE clause represent the sales threshold.\",\n        \"virtual_table\": \"SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID WHERE T3.Sales  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.662",
        "c_low": "SELECT editor.Editor_ID, editor.Name, COUNT(journal_committee.Journal_ID) AS Committee_Count\nFROM editor\nLEFT JOIN journal_committee ON editor.Editor_ID = journal_committee.Editor_ID\nGROUP BY editor.Editor_ID, editor.Name;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT e.Editor_ID, e.Name, COUNT(jc.Journal_ID) AS Committee_Count\nFROM editor AS e\nLEFT JOIN journal_committee AS jc ON e.Editor_ID = jc.Editor_ID\nGROUP BY e.Editor_ID, e.Name;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of editors who are part of a committee for journal entries that have sales figures exceeding a specified amount. The placeholders in the WHERE clause represent the sales threshold.\",\n        \"virtual_table\": \"SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID WHERE T3.Sales  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of editors from the 'editor' table who are either of a specific age or another specified age. The placeholders in the WHERE clause represent the ages to filter the editors.\",\n        \"virtual_table\": \"SELECT Name FROM editor WHERE Age  =  [PLACEHOLDER-TYPE:NUMBER] OR Age  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT e.Editor_ID, e.Name, COUNT(jc.Journal_ID) AS Committee_Count\nFROM editor e\nLEFT JOIN journal_committee jc ON e.Editor_ID = jc.Editor_ID\nGROUP BY e.Editor_ID, e.Name;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of editors from the 'editor' table who are not involved in any journal committee. The placeholder in the subquery represents the editor IDs that are linked to the journal committee.\",\n        \"virtual_table\": \"SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of editors from the 'editor' table who have contributed to the journal committee at least a specified number of times. The placeholder in the HAVING clause represents the minimum count of contributions required.\",\n        \"virtual_table\": \"SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT editor.Editor_ID, editor.Name, COUNT(journal_committee.Journal_ID) AS Committee_Count\nFROM editor\nLEFT JOIN journal_committee ON editor.Editor_ID = journal_committee.Editor_ID\nGROUP BY editor.Editor_ID, editor.Name;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of editors from the 'editor' table who are either of a specific age or another specified age. The placeholders in the WHERE clause represent the ages to filter the editors.\",\n        \"virtual_table\": \"SELECT Name FROM editor WHERE Age  =  [PLACEHOLDER-TYPE:NUMBER] OR Age  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT e.Editor_ID, e.Name, COUNT(jc.Journal_ID) AS Committee_Count\nFROM editor e\nLEFT JOIN journal_committee jc ON e.Editor_ID = jc.Editor_ID\nGROUP BY e.Editor_ID, e.Name;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of editors from the 'editor' table who are not involved in any journal committee. The placeholder in the subquery represents the editor IDs that are linked to the journal committee.\",\n        \"virtual_table\": \"SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of editors from the 'editor' table who have contributed to the journal committee at least a specified number of times. The placeholder in the HAVING clause represents the minimum count of contributions required.\",\n        \"virtual_table\": \"SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT editor.Editor_ID, editor.Name, COUNT(journal_committee.Journal_ID) AS Committee_Count \nFROM editor \nLEFT JOIN journal_committee ON editor.Editor_ID = journal_committee.Editor_ID \nGROUP BY editor.Editor_ID, editor.Name;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of editors who are part of a committee for journal entries that have sales figures exceeding a specified amount. The placeholders in the WHERE clause represent the sales threshold.\",\n        \"virtual_table\": \"SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID WHERE T3.Sales  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.665",
        "c_low": "SELECT Date, Theme, Sales \nFROM journal \nWHERE Journal_ID NOT IN (\n    SELECT Journal_ID \n    FROM journal_committee \n    WHERE Editor_ID IN (\n        SELECT Editor_ID \n        FROM editor\n    )\n);",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Date, Theme, Sales FROM journal WHERE Journal_ID NOT IN (SELECT T1.Journal_ID FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of editors who are part of a committee for journal entries that have sales figures exceeding a specified amount. The placeholders in the WHERE clause represent the sales threshold.\",\n        \"virtual_table\": \"SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID WHERE T3.Sales  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT j.Date, j.Theme, j.Sales \nFROM journal j \nWHERE j.Journal_ID NOT IN (SELECT jc.Journal_ID FROM journal_committee jc)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of editors from the 'editor' table who are not involved in any journal committee. The placeholder in the subquery represents the editor IDs that are linked to the journal committee.\",\n        \"virtual_table\": \"SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of editors from the 'editor' table who have contributed to the journal committee at least a specified number of times. The placeholder in the HAVING clause represents the minimum count of contributions required.\",\n        \"virtual_table\": \"SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Date, Theme, Sales \nFROM journal \nWHERE Journal_ID NOT IN (\n    SELECT Journal_ID \n    FROM journal_committee \n    WHERE Editor_ID IN (\n        SELECT Editor_ID \n        FROM editor\n    )\n);",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT j.Date, j.Theme, j.Sales \nFROM journal j \nWHERE j.Journal_ID NOT IN (SELECT jc.Journal_ID FROM journal_committee jc)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of editors from the 'editor' table who are not involved in any journal committee. The placeholder in the subquery represents the editor IDs that are linked to the journal committee.\",\n        \"virtual_table\": \"SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of editors from the 'editor' table who have contributed to the journal committee at least a specified number of times. The placeholder in the HAVING clause represents the minimum count of contributions required.\",\n        \"virtual_table\": \"SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Date, Theme, Sales FROM journal WHERE Journal_ID NOT IN (SELECT T1.Journal_ID FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of editors who are part of a committee for journal entries that have sales figures exceeding a specified amount. The placeholders in the WHERE clause represent the sales threshold.\",\n        \"virtual_table\": \"SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID WHERE T3.Sales  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.677",
        "c_low": "SELECT customer_id, COUNT(account_id) AS number_of_accounts \nFROM Accounts \nGROUP BY customer_id;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of accounts associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT customer_id, count(*) FROM Accounts GROUP BY customer_id",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of accounts associated with each customer from the 'Accounts' table. The placeholder in the SELECT clause represents the customer identifier, and the count function aggregates the total number of accounts per customer.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id\"\n    }\n}\n",
        "c_high": "SELECT customer_id, count(*) AS number_of_accounts FROM Accounts GROUP BY customer_id",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer first and last names along with their associated customer IDs from the 'Accounts' and 'Customers' tables. The data is grouped by customer ID and ordered by the count of accounts associated with each customer in ascending order, with a limit on the number of results specified by a placeholder.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of accounts associated with each customer from the 'Accounts' table. The placeholder in the LIMIT clause represents the maximum number of customers to display based on their account count.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT customer_id, count(*) AS number_of_accounts FROM Accounts GROUP BY customer_id",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of accounts associated with each customer from the 'Accounts' table. The placeholder in the SELECT clause represents the customer identifier, and the count function aggregates the total number of accounts per customer.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of accounts associated with each customer from the 'Accounts' table. The placeholder in the LIMIT clause represents the maximum number of customers to display based on their account count.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T1.customer_id, COUNT(T1.account_id) AS number_of_accounts \nFROM Accounts AS T1 \nGROUP BY T1.customer_id;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer first and last names along with their associated customer IDs from the 'Accounts' and 'Customers' tables. The data is grouped by customer ID and ordered by the count of accounts associated with each customer in ascending order, with a limit on the number of results specified by a placeholder.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of accounts associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT c.customer_id, COUNT(a.account_id) AS number_of_accounts\nFROM Customers c\nLEFT JOIN Accounts a ON c.customer_id = a.customer_id\nGROUP BY c.customer_id;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.682",
        "c_low": "SELECT T1.customer_id, T1.customer_first_name, T1.customer_last_name \nFROM Customers AS T1 \nJOIN Accounts AS T2 ON T1.customer_id = T2.customer_id \nGROUP BY T1.customer_id \nORDER BY COUNT(T2.account_id) ASC \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of accounts associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of first and last names of customers from the 'Customers' table who have associated accounts in the 'Accounts' table. The join condition links the customer to their respective account using the customer ID.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT C.customer_first_name, C.customer_last_name, A.customer_id \nFROM Customers AS C \nJOIN (SELECT customer_id, COUNT(*) AS account_count \n      FROM Accounts \n      GROUP BY customer_id) AS A \nON C.customer_id = A.customer_id \nORDER BY A.account_count ASC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customers who do not have any associated accounts. It selects the first and last names of customers from the 'Customers' table and excludes those who have accounts by performing an EXCEPT operation with a subquery that joins the 'Customers' table with the 'Accounts' table based on the customer ID.\",\n        \"virtual_table\": \"SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of accounts associated with each customer from the 'Accounts' table. The placeholder in the SELECT clause represents the customer identifier, and the count function aggregates the total number of accounts per customer.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id\"\n    }\n}\n",
        "c_high": "SELECT T2.customer_first_name, T2.customer_last_name, T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer first and last names along with their associated customer IDs from the 'Accounts' and 'Customers' tables. The data is grouped by customer ID and ordered by the count of accounts associated with each customer in ascending order, with a limit on the number of results specified by a placeholder.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of accounts associated with each customer from the 'Accounts' table. The placeholder in the LIMIT clause represents the maximum number of customers to display based on their account count.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of customer IDs along with their first and last names from the 'Customers' table, specifically for customers who have a certain number of cards associated with them. The placeholder in the HAVING clause represents the minimum count of cards a customer must have to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT customer_id, customer_first_name, customer_last_name \nFROM Customers \nWHERE customer_id = (\n    SELECT customer_id \n    FROM Accounts \n    GROUP BY customer_id \n    ORDER BY COUNT(*) ASC \n    LIMIT 1\n);",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of accounts associated with each customer from the 'Accounts' table. The placeholder in the LIMIT clause represents the maximum number of customers to display based on their account count.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of accounts associated with each customer from the 'Accounts' table. The placeholder in the SELECT clause represents the customer identifier, and the count function aggregates the total number of accounts per customer.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id\"\n    }\n}\n",
        "t_2": "SELECT T2.customer_first_name, T2.customer_last_name, T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer first and last names along with their associated customer IDs from the 'Accounts' and 'Customers' tables. The data is grouped by customer ID and ordered by the count of accounts associated with each customer in ascending order, with a limit on the number of results specified by a placeholder.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customers who do not have any associated accounts. It selects the first and last names of customers from the 'Customers' table and excludes those who have accounts by performing an EXCEPT operation with a subquery that joins the 'Customers' table with the 'Accounts' table based on the customer ID.\",\n        \"virtual_table\": \"SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of accounts associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT c.customer_id, c.customer_first_name || ' ' || c.customer_last_name AS full_name\nFROM Customers c\nJOIN Accounts a ON c.customer_id = a.customer_id\nGROUP BY c.customer_id\nORDER BY COUNT(a.account_id) ASC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.686",
        "c_low": "SELECT customer_first_name, customer_last_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of accounts associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT customer_first_name, customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customers who do not have any associated accounts. It selects the first and last names of customers from the 'Customers' table and excludes those who have accounts by performing an EXCEPT operation with a subquery that joins the 'Customers' table with the 'Accounts' table based on the customer ID.\",\n        \"virtual_table\": \"SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\"\n    }\n}\n",
        "c_high": "SELECT customer_first_name, customer_last_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts);",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer first and last names along with their associated customer IDs from the 'Accounts' and 'Customers' tables. The data is grouped by customer ID and ordered by the count of accounts associated with each customer in ascending order, with a limit on the number of results specified by a placeholder.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT customer_first_name || ' ' || customer_last_name AS full_name\nFROM Customers\nWHERE customer_id NOT IN (\n    SELECT customer_id\n    FROM Accounts\n);",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT customer_first_name, customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customers who do not have any associated accounts. It selects the first and last names of customers from the 'Customers' table and excludes those who have accounts by performing an EXCEPT operation with a subquery that joins the 'Customers' table with the 'Accounts' table based on the customer ID.\",\n        \"virtual_table\": \"SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of accounts associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of customer first and last names along with their associated customer IDs from the 'Accounts' and 'Customers' tables. The data is grouped by customer ID and ordered by the count of accounts associated with each customer in ascending order, with a limit on the number of results specified by a placeholder.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT customer_first_name || ' ' || customer_last_name AS full_name\nFROM Customers\nWHERE customer_id NOT IN (\n    SELECT customer_id\n    FROM Accounts\n);",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.688",
        "c_low": "SELECT DISTINCT T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of accounts associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of first and last names of customers from the 'Customers' table who have associated accounts in the 'Accounts' table. The join condition links the customer to their respective account using the customer ID.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\"\n    }\n}\n",
        "c_mid": "SELECT C.customer_first_name, C.customer_last_name \nFROM Customers C \nJOIN Accounts A ON C.customer_id = A.customer_id",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customers who do not have any associated accounts. It selects the first and last names of customers from the 'Customers' table and excludes those who have accounts by performing an EXCEPT operation with a subquery that joins the 'Customers' table with the 'Accounts' table based on the customer ID.\",\n        \"virtual_table\": \"SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of accounts associated with each customer from the 'Accounts' table. The placeholder in the SELECT clause represents the customer identifier, and the count function aggregates the total number of accounts per customer.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id\"\n    }\n}\n",
        "c_high": "SELECT T2.customer_first_name, T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer first and last names along with their associated customer IDs from the 'Accounts' and 'Customers' tables. The data is grouped by customer ID and ordered by the count of accounts associated with each customer in ascending order, with a limit on the number of results specified by a placeholder.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the first and last names, along with the phone number of customers associated with a specific account name from the 'Accounts' table. The placeholder in the WHERE clause represents the name of the account.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the number of accounts associated with each customer from the 'Accounts' table. The placeholder in the LIMIT clause represents the maximum number of customers to display based on their account count.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT c.customer_first_name, c.customer_last_name \nFROM Customers c \nJOIN Accounts a ON c.customer_id = a.customer_id;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of accounts associated with each customer from the 'Accounts' table. The placeholder in the LIMIT clause represents the maximum number of customers to display based on their account count.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of accounts associated with each customer from the 'Accounts' table. The placeholder in the SELECT clause represents the customer identifier, and the count function aggregates the total number of accounts per customer.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id\"\n    }\n}\n",
        "t_2": "SELECT T2.customer_first_name, T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer first and last names along with their associated customer IDs from the 'Accounts' and 'Customers' tables. The data is grouped by customer ID and ordered by the count of accounts associated with each customer in ascending order, with a limit on the number of results specified by a placeholder.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of accounts associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the first and last names, along with the phone number of customers associated with a specific account name from the 'Accounts' table. The placeholder in the WHERE clause represents the name of the account.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Customers.customer_first_name || ' ' || Customers.customer_last_name AS full_name\nFROM Customers\nJOIN Accounts ON Customers.customer_id = Accounts.customer_id;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.694",
        "c_low": "SELECT customer_id, customer_first_name || ' ' || customer_last_name AS full_name, customer_phone FROM Customers;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of accounts associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT customer_id, customer_first_name || ' ' || customer_last_name AS full_name, customer_phone FROM Customers;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT customer_id, customer_first_name || ' ' || customer_last_name AS full_name, customer_phone FROM Customers",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer first and last names along with their associated customer IDs from the 'Accounts' and 'Customers' tables. The data is grouped by customer ID and ordered by the count of accounts associated with each customer in ascending order, with a limit on the number of results specified by a placeholder.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the first and last names, along with the phone number of customers associated with a specific account name from the 'Accounts' table. The placeholder in the WHERE clause represents the name of the account.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the first name, last name, and phone number of customers associated with a specific card number from the 'Customers' and 'Customers_Cards' tables. The placeholder in the WHERE clause represents the card number being queried.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT customer_id, customer_first_name || ' ' || customer_last_name AS full_name, customer_phone FROM Customers;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT customer_id, customer_first_name || ' ' || customer_last_name AS full_name, customer_phone FROM Customers",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer first and last names along with their associated customer IDs from the 'Accounts' and 'Customers' tables. The data is grouped by customer ID and ordered by the count of accounts associated with each customer in ascending order, with a limit on the number of results specified by a placeholder.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the first and last names, along with the phone number of customers associated with a specific account name from the 'Accounts' table. The placeholder in the WHERE clause represents the name of the account.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the first name, last name, and phone number of customers associated with a specific card number from the 'Customers' and 'Customers_Cards' tables. The placeholder in the WHERE clause represents the card number being queried.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT customer_id, customer_first_name || ' ' || customer_last_name AS full_name, customer_phone FROM Customers;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.704",
        "c_low": "SELECT C.customer_first_name || ' ' || C.customer_last_name AS full_name, C.customer_phone \nFROM Customers AS C \nJOIN Customers_Cards AS CC ON C.customer_id = CC.customer_id \nWHERE CC.card_number = '4560596484842';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of accounts associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT C.customer_first_name || ' ' || C.customer_last_name AS full_name, C.customer_phone \nFROM Customers AS C \nJOIN Customers_Cards AS CC ON C.customer_id = CC.customer_id \nWHERE CC.card_number = '4560596484842';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with a specific customer identified by their first and last names, as well as a specific card type. The placeholders in the WHERE clause represent the customer's first name, last name, and the card type code.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING] AND T1.card_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT T2.customer_first_name, T2.customer_last_name, T2.customer_phone FROM Customers_Cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.card_number = '4560596484842'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the first name, last name, and phone number of customers associated with a specific card number from the 'Customers' and 'Customers_Cards' tables. The placeholder in the WHERE clause represents the card number being queried.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the first and last names, along with the phone number of customers associated with a specific account name from the 'Accounts' table. The placeholder in the WHERE clause represents the name of the account.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of customer first and last names along with their associated customer IDs from the 'Accounts' and 'Customers' tables. The data is grouped by customer ID and ordered by the count of accounts associated with each customer in ascending order, with a limit on the number of results specified by a placeholder.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Customers.customer_first_name || ' ' || Customers.customer_last_name AS full_name, Customers.customer_phone\nFROM Customers\nJOIN Customers_Cards ON Customers.customer_id = Customers_Cards.customer_id\nWHERE Customers_Cards.card_number = '4560596484842';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T2.customer_first_name, T2.customer_last_name, T2.customer_phone FROM Customers_Cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.card_number = '4560596484842'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the first name, last name, and phone number of customers associated with a specific card number from the 'Customers' and 'Customers_Cards' tables. The placeholder in the WHERE clause represents the card number being queried.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the first and last names, along with the phone number of customers associated with a specific account name from the 'Accounts' table. The placeholder in the WHERE clause represents the name of the account.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with a specific customer identified by their first and last names, as well as a specific card type. The placeholders in the WHERE clause represent the customer's first name, last name, and the card type code.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING] AND T1.card_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Customers.customer_first_name || ' ' || Customers.customer_last_name AS full_name, Customers.customer_phone\nFROM Customers\nJOIN Customers_Cards ON Customers.customer_id = Customers_Cards.customer_id\nWHERE Customers_Cards.card_number = '4560596484842';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.707",
        "c_low": "SELECT count(*) FROM Customers_Cards WHERE card_type_code = 'debit'",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of accounts associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT COUNT(*) FROM Customers_Cards WHERE card_type_code = 'debit';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of financial transactions grouped by card type from the 'Financial_Transactions' and 'Customers_Cards' tables. The placeholder in the SELECT statement represents the card type code, while the count reflects the number of transactions associated with each card type.\",\n        \"virtual_table\": \"SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with a specific customer identified by their first and last names, as well as a specific card type. The placeholders in the WHERE clause represent the customer's first name, last name, and the card type code.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING] AND T1.card_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the number of cards associated with each customer from the 'Customers_Cards' table. The placeholder in the SELECT clause represents the customer identifier, and the count function aggregates the total number of cards per customer.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id\"\n    }\n}\n",
        "c_high": "SELECT COUNT(*) FROM Customers_Cards WHERE card_type_code = 'debit';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of cards held by each customer from the 'Customers_Cards' table. The placeholder in the LIMIT clause allows the user to specify the maximum number of customers to display based on the count of their cards.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the different types of cards issued to customers, specifically focusing on the card type codes. It filters the results to only include those card types that have been issued a number of times equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of card types that should be considered.\",\n        \"virtual_table\": \"SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of customer IDs along with their first and last names from the 'Customers' table, specifically for customers who have a certain number of cards associated with them. The placeholder in the HAVING clause represents the minimum count of cards a customer must have to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT COUNT(*) FROM Customers_Cards WHERE card_type_code = 'debit';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of cards held by each customer from the 'Customers_Cards' table. The placeholder in the LIMIT clause allows the user to specify the maximum number of customers to display based on the count of their cards.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of cards associated with each customer from the 'Customers_Cards' table. The placeholder in the SELECT clause represents the customer identifier, and the count function aggregates the total number of cards per customer.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of different card types from the 'Customers_Cards' table. The placeholder in the SELECT clause represents the card type code, while the count function aggregates the number of occurrences for each card type.\",\n        \"virtual_table\": \"SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code\"\n    }\n}\n",
        "t_2": "SELECT count(*) FROM Customers_Cards WHERE card_type_code = 'debit'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of financial transactions grouped by card type from the 'Financial_Transactions' and 'Customers_Cards' tables. The placeholder in the SELECT statement represents the card type code, while the count reflects the number of transactions associated with each card type.\",\n        \"virtual_table\": \"SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with a specific customer identified by their first and last names, as well as a specific card type. The placeholders in the WHERE clause represent the customer's first name, last name, and the card type code.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING] AND T1.card_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(*) AS debit_card_count FROM Customers_Cards WHERE card_type_code = 'debit';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.716",
        "c_low": "SELECT C.customer_id, C.customer_first_name || ' ' || C.customer_last_name AS full_name\nFROM Customers C\nJOIN Customers_Cards CC ON C.customer_id = CC.customer_id\nGROUP BY C.customer_id\nHAVING COUNT(CC.card_id) >= 2;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of accounts associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT C.customer_id, C.customer_first_name || ' ' || C.customer_last_name AS full_name\nFROM Customers AS C\nJOIN Customers_Cards AS CC ON C.customer_id = CC.customer_id\nGROUP BY C.customer_id\nHAVING COUNT(CC.card_id) >= 2;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with a specific customer identified by their first and last names, as well as a specific card type. The placeholders in the WHERE clause represent the customer's first name, last name, and the card type code.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING] AND T1.card_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of cards associated with each customer from the 'Customers_Cards' table. The placeholder in the SELECT clause represents the customer identifier, and the count function aggregates the total number of cards per customer.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id\"\n    }\n}\n",
        "c_high": "SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name \nFROM Customers_Cards AS T1 \nJOIN Customers AS T2 ON T1.customer_id = T2.customer_id \nGROUP BY T1.customer_id \nHAVING COUNT(*) >= 2;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer IDs along with their first and last names from the 'Customers' table, specifically for customers who have a certain number of cards associated with them. The placeholder in the HAVING clause represents the minimum count of cards a customer must have to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer first and last names along with their associated customer IDs from the 'Accounts' and 'Customers' tables. The data is grouped by customer ID and ordered by the count of accounts associated with each customer in ascending order, with a limit on the number of results specified by a placeholder.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the first name, last name, and phone number of customers associated with a specific card number from the 'Customers' and 'Customers_Cards' tables. The placeholder in the WHERE clause represents the card number being queried.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT c.customer_id, c.customer_first_name || ' ' || c.customer_last_name AS full_name\nFROM Customers c\nJOIN (\n    SELECT customer_id, COUNT(*) AS card_count\n    FROM Customers_Cards\n    GROUP BY customer_id\n    HAVING COUNT(*) >= 2\n) cc ON c.customer_id = cc.customer_id;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of cards held by each customer from the 'Customers_Cards' table. The placeholder in the LIMIT clause allows the user to specify the maximum number of customers to display based on the count of their cards.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of cards associated with each customer from the 'Customers_Cards' table. The placeholder in the SELECT clause represents the customer identifier, and the count function aggregates the total number of cards per customer.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id\"\n    }\n}\n",
        "t_2": "SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name FROM Customers_Cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*) >= 2",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer IDs along with their first and last names from the 'Customers' table, specifically for customers who have a certain number of cards associated with them. The placeholder in the HAVING clause represents the minimum count of cards a customer must have to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with a specific customer identified by their first and last names, as well as a specific card type. The placeholders in the WHERE clause represent the customer's first name, last name, and the card type code.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING] AND T1.card_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT c.customer_id, c.customer_first_name || ' ' || c.customer_last_name AS full_name\nFROM Customers c\nJOIN Customers_Cards cc ON c.customer_id = cc.customer_id\nGROUP BY c.customer_id\nHAVING COUNT(cc.card_id) >= 2;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.717",
        "c_low": "SELECT T2.customer_id, T2.customer_first_name, T2.customer_last_name \nFROM Customers AS T2 \nJOIN Accounts AS T1 ON T1.customer_id = T2.customer_id \nGROUP BY T2.customer_id, T2.customer_first_name, T2.customer_last_name \nORDER BY COUNT(T1.account_id) ASC \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of accounts associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of first and last names of customers from the 'Customers' table who have associated accounts in the 'Accounts' table. The join condition links the customer to their respective account using the customer ID.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT C.customer_id, C.customer_first_name, C.customer_last_name \nFROM Customers C \nJOIN Accounts A ON C.customer_id = A.customer_id \nGROUP BY C.customer_id, C.customer_first_name, C.customer_last_name \nORDER BY COUNT(A.account_id) ASC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customers who do not have any associated accounts. It selects the first and last names of customers from the 'Customers' table and excludes those who have accounts by performing an EXCEPT operation with a subquery that joins the 'Customers' table with the 'Accounts' table based on the customer ID.\",\n        \"virtual_table\": \"SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with a specific customer identified by their first and last names, as well as a specific card type. The placeholders in the WHERE clause represent the customer's first name, last name, and the card type code.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING] AND T1.card_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT T2.customer_id, T2.customer_first_name, T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) ASC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer first and last names along with their associated customer IDs from the 'Accounts' and 'Customers' tables. The data is grouped by customer ID and ordered by the count of accounts associated with each customer in ascending order, with a limit on the number of results specified by a placeholder.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the first and last names, along with the phone number of customers associated with a specific account name from the 'Accounts' table. The placeholder in the WHERE clause represents the name of the account.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of customer IDs along with their first and last names from the 'Customers' table, specifically for customers who have a certain number of cards associated with them. The placeholder in the HAVING clause represents the minimum count of cards a customer must have to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT c.customer_id, c.customer_first_name, c.customer_last_name \nFROM Customers c \nJOIN (SELECT customer_id, COUNT(*) as account_count \n      FROM Accounts \n      GROUP BY customer_id \n      ORDER BY account_count ASC \n      LIMIT 1) a \nON c.customer_id = a.customer_id;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of accounts associated with each customer from the 'Accounts' table. The placeholder in the LIMIT clause represents the maximum number of customers to display based on their account count.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.customer_id, T2.customer_first_name, T2.customer_last_name \nFROM Accounts AS T1 \nJOIN Customers AS T2 ON T1.customer_id = T2.customer_id \nGROUP BY T1.customer_id \nORDER BY COUNT(*) ASC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer first and last names along with their associated customer IDs from the 'Accounts' and 'Customers' tables. The data is grouped by customer ID and ordered by the count of accounts associated with each customer in ascending order, with a limit on the number of results specified by a placeholder.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of accounts associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of customers who do not have any associated accounts. It selects the first and last names of customers from the 'Customers' table and excludes those who have accounts by performing an EXCEPT operation with a subquery that joins the 'Customers' table with the 'Accounts' table based on the customer ID.\",\n        \"virtual_table\": \"SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\"\n    }\n}\n",
        "t_3+": "SELECT c.customer_id, c.customer_first_name, c.customer_last_name \nFROM Customers c \nJOIN Accounts a ON c.customer_id = a.customer_id \nGROUP BY c.customer_id, c.customer_first_name, c.customer_last_name \nORDER BY COUNT(a.account_id) ASC \nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.718",
        "c_low": "SELECT T2.customer_id, T2.customer_first_name || ' ' || T2.customer_last_name AS full_name\nFROM Customers AS T2\nJOIN Accounts AS T1 ON T2.customer_id = T1.customer_id\nGROUP BY T2.customer_id\nORDER BY COUNT(T1.account_id) ASC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of accounts associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of first and last names of customers from the 'Customers' table who have associated accounts in the 'Accounts' table. The join condition links the customer to their respective account using the customer ID.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\"\n    }\n}\n",
        "c_mid": "SELECT C.customer_id, C.customer_first_name || ' ' || C.customer_last_name AS full_name \nFROM Customers C \nJOIN (SELECT customer_id, COUNT(*) AS account_count \n      FROM Accounts \n      GROUP BY customer_id) AS A \nON C.customer_id = A.customer_id \nORDER BY A.account_count ASC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customers who do not have any associated accounts. It selects the first and last names of customers from the 'Customers' table and excludes those who have accounts by performing an EXCEPT operation with a subquery that joins the 'Customers' table with the 'Accounts' table based on the customer ID.\",\n        \"virtual_table\": \"SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of accounts associated with each customer from the 'Accounts' table. The placeholder in the SELECT clause represents the customer identifier, and the count function aggregates the total number of accounts per customer.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id\"\n    }\n}\n",
        "c_high": "SELECT T2.customer_id, T2.customer_first_name || ' ' || T2.customer_last_name AS full_name \nFROM Accounts AS T1 \nJOIN Customers AS T2 ON T1.customer_id = T2.customer_id \nGROUP BY T1.customer_id \nORDER BY count(*) ASC \nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer first and last names along with their associated customer IDs from the 'Accounts' and 'Customers' tables. The data is grouped by customer ID and ordered by the count of accounts associated with each customer in ascending order, with a limit on the number of results specified by a placeholder.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the first and last names, along with the phone number of customers associated with a specific account name from the 'Accounts' table. The placeholder in the WHERE clause represents the name of the account.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the number of accounts associated with each customer from the 'Accounts' table. The placeholder in the LIMIT clause represents the maximum number of customers to display based on their account count.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT c.customer_id, c.customer_first_name || ' ' || c.customer_last_name AS full_name \nFROM Customers c \nJOIN (SELECT customer_id, COUNT(*) AS account_count \n      FROM Accounts \n      GROUP BY customer_id \n      ORDER BY account_count ASC \n      LIMIT 1) AS ac \nON c.customer_id = ac.customer_id;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of accounts associated with each customer from the 'Accounts' table. The placeholder in the LIMIT clause represents the maximum number of customers to display based on their account count.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of accounts associated with each customer from the 'Accounts' table. The placeholder in the SELECT clause represents the customer identifier, and the count function aggregates the total number of accounts per customer.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id\"\n    }\n}\n",
        "t_2": "SELECT T2.customer_id, T2.customer_first_name || ' ' || T2.customer_last_name AS full_name \nFROM Accounts AS T1 \nJOIN Customers AS T2 ON T1.customer_id = T2.customer_id \nGROUP BY T1.customer_id \nORDER BY COUNT(T1.account_id) ASC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customers who do not have any associated accounts. It selects the first and last names of customers from the 'Customers' table and excludes those who have accounts by performing an EXCEPT operation with a subquery that joins the 'Customers' table with the 'Accounts' table based on the customer ID.\",\n        \"virtual_table\": \"SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer first and last names along with their associated customer IDs from the 'Accounts' and 'Customers' tables. The data is grouped by customer ID and ordered by the count of accounts associated with each customer in ascending order, with a limit on the number of results specified by a placeholder.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of accounts associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT c.customer_id, c.customer_first_name || ' ' || c.customer_last_name AS full_name\nFROM Customers c\nJOIN Accounts a ON c.customer_id = a.customer_id\nGROUP BY c.customer_id\nORDER BY COUNT(a.account_id) ASC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.721",
        "c_low": "SELECT card_type_code FROM Customers_Cards GROUP BY card_type_code ORDER BY COUNT(card_id) DESC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT card_type_code, COUNT(*) as card_count FROM Customers_Cards GROUP BY card_type_code ORDER BY card_count DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of different card types from the 'Customers_Cards' table. The placeholder in the SELECT clause represents the card type code, while the count function aggregates the number of occurrences for each card type.\",\n        \"virtual_table\": \"SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with a specific customer identified by their first and last names, as well as a specific card type. The placeholders in the WHERE clause represent the customer's first name, last name, and the card type code.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING] AND T1.card_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of financial transactions grouped by card type from the 'Financial_Transactions' and 'Customers_Cards' tables. The placeholder in the SELECT statement represents the card type code, while the count reflects the number of transactions associated with each card type.\",\n        \"virtual_table\": \"SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code\"\n    }\n}\n",
        "c_high": "SELECT card_type_code FROM Customers_Cards GROUP BY card_type_code HAVING count(*) = (SELECT MAX(card_count) FROM (SELECT card_type_code, count(*) as card_count FROM Customers_Cards GROUP BY card_type_code))",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the different types of cards issued to customers, specifically focusing on the card type codes. It filters the results to only include those card types that have been issued a number of times equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of card types that should be considered.\",\n        \"virtual_table\": \"SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of cards held by each customer from the 'Customers_Cards' table. The placeholder in the LIMIT clause allows the user to specify the maximum number of customers to display based on the count of their cards.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of customer IDs along with their first and last names from the 'Customers' table, specifically for customers who have a certain number of cards associated with them. The placeholder in the HAVING clause represents the minimum count of cards a customer must have to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT card_type_code FROM Customers_Cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the different types of cards issued to customers, specifically focusing on the card type codes. It filters the results to only include those card types that have been issued a number of times equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of card types that should be considered.\",\n        \"virtual_table\": \"SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of different card types from the 'Customers_Cards' table. The placeholder in the SELECT clause represents the card type code, while the count function aggregates the number of occurrences for each card type.\",\n        \"virtual_table\": \"SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the number of cards associated with each customer from the 'Customers_Cards' table. The placeholder in the SELECT clause represents the customer identifier, and the count function aggregates the total number of cards per customer.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id\"\n    }\n}\n",
        "t_2": "SELECT T2.card_type_code, COUNT(*) as card_count \nFROM Customers_Cards AS T2 \nJOIN Financial_Transactions AS T1 ON T1.card_id = T2.card_id \nGROUP BY T2.card_type_code \nORDER BY card_count DESC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with a specific customer identified by their first and last names, as well as a specific card type. The placeholders in the WHERE clause represent the customer's first name, last name, and the card type code.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING] AND T1.card_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of financial transactions grouped by card type from the 'Financial_Transactions' and 'Customers_Cards' tables. The placeholder in the SELECT statement represents the card type code, while the count reflects the number of transactions associated with each card type.\",\n        \"virtual_table\": \"SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT card_type_code, COUNT(card_id) AS card_count\nFROM Customers_Cards\nGROUP BY card_type_code\nORDER BY card_count DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.722",
        "c_low": "SELECT card_type_code\nFROM Customers_Cards\nGROUP BY card_type_code\nORDER BY COUNT(card_id) DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT card_type_code FROM Customers_Cards GROUP BY card_type_code ORDER BY COUNT(*) DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of different card types from the 'Customers_Cards' table. The placeholder in the SELECT clause represents the card type code, while the count function aggregates the number of occurrences for each card type.\",\n        \"virtual_table\": \"SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with a specific customer identified by their first and last names, as well as a specific card type. The placeholders in the WHERE clause represent the customer's first name, last name, and the card type code.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING] AND T1.card_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of financial transactions grouped by card type from the 'Financial_Transactions' and 'Customers_Cards' tables. The placeholder in the SELECT statement represents the card type code, while the count reflects the number of transactions associated with each card type.\",\n        \"virtual_table\": \"SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code\"\n    }\n}\n",
        "c_high": "SELECT card_type_code FROM Customers_Cards GROUP BY card_type_code HAVING count(*) >= 1 ORDER BY count(*) DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the different types of cards issued to customers, specifically focusing on the card type codes. It filters the results to only include those card types that have been issued a number of times equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of card types that should be considered.\",\n        \"virtual_table\": \"SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of cards held by each customer from the 'Customers_Cards' table. The placeholder in the LIMIT clause allows the user to specify the maximum number of customers to display based on the count of their cards.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT card_type_code FROM Customers_Cards GROUP BY card_type_code ORDER BY COUNT(*) DESC LIMIT 1",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the different types of cards issued to customers, specifically focusing on the card type codes. It filters the results to only include those card types that have been issued a number of times equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of card types that should be considered.\",\n        \"virtual_table\": \"SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of different card types from the 'Customers_Cards' table. The placeholder in the SELECT clause represents the card type code, while the count function aggregates the number of occurrences for each card type.\",\n        \"virtual_table\": \"SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the number of cards associated with each customer from the 'Customers_Cards' table. The placeholder in the SELECT clause represents the customer identifier, and the count function aggregates the total number of cards per customer.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id\"\n    }\n}\n",
        "t_2": "SELECT T2.card_type_code, count(*) as transaction_count \nFROM Financial_Transactions AS T1 \nJOIN Customers_Cards AS T2 ON T1.card_id = T2.card_id \nGROUP BY T2.card_type_code \nORDER BY transaction_count DESC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with a specific customer identified by their first and last names, as well as a specific card type. The placeholders in the WHERE clause represent the customer's first name, last name, and the card type code.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING] AND T1.card_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of financial transactions grouped by card type from the 'Financial_Transactions' and 'Customers_Cards' tables. The placeholder in the SELECT statement represents the card type code, while the count reflects the number of transactions associated with each card type.\",\n        \"virtual_table\": \"SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code\"\n    }\n}\n",
        "t_3+": "SELECT card_type_code\nFROM Customers_Cards\nGROUP BY card_type_code\nORDER BY COUNT(card_id) DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.727",
        "c_low": "SELECT customer_id, customer_first_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customers_Cards WHERE card_type_code = 'credit')",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of accounts associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT customer_id, customer_first_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customers_Cards WHERE card_type_code = 'credit')",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customers who do not have any associated accounts. It selects the first and last names of customers from the 'Customers' table and excludes those who have accounts by performing an EXCEPT operation with a subquery that joins the 'Customers' table with the 'Accounts' table based on the customer ID.\",\n        \"virtual_table\": \"SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with a specific customer identified by their first and last names, as well as a specific card type. The placeholders in the WHERE clause represent the customer's first name, last name, and the card type code.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING] AND T1.card_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT C.customer_id, C.customer_first_name \nFROM Customers AS C \nLEFT JOIN Customers_Cards AS CC ON C.customer_id = CC.customer_id \nWHERE CC.card_id IS NULL;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer IDs along with their first and last names from the 'Customers' table, specifically for customers who have a certain number of cards associated with them. The placeholder in the HAVING clause represents the minimum count of cards a customer must have to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the first name, last name, and phone number of customers associated with a specific card number from the 'Customers' and 'Customers_Cards' tables. The placeholder in the WHERE clause represents the card number being queried.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of customer first and last names along with their associated customer IDs from the 'Accounts' and 'Customers' tables. The data is grouped by customer ID and ordered by the count of accounts associated with each customer in ascending order, with a limit on the number of results specified by a placeholder.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT c.customer_id, c.customer_first_name \nFROM Customers c \nLEFT JOIN Customers_Cards cc ON c.customer_id = cc.customer_id AND cc.card_type_code = 'credit' \nWHERE cc.card_id IS NULL;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT customer_id, customer_first_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customers_Cards WHERE card_type_code = 'credit')",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customers who do not have any associated accounts. It selects the first and last names of customers from the 'Customers' table and excludes those who have accounts by performing an EXCEPT operation with a subquery that joins the 'Customers' table with the 'Accounts' table based on the customer ID.\",\n        \"virtual_table\": \"SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer IDs along with their first and last names from the 'Customers' table, specifically for customers who have a certain number of cards associated with them. The placeholder in the HAVING clause represents the minimum count of cards a customer must have to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the first name, last name, and phone number of customers associated with a specific card number from the 'Customers' and 'Customers_Cards' tables. The placeholder in the WHERE clause represents the card number being queried.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT c.customer_id, c.customer_first_name\nFROM Customers c\nLEFT JOIN Customers_Cards cc ON c.customer_id = cc.customer_id AND cc.card_type_code = 'credit'\nWHERE cc.card_id IS NULL;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.728",
        "c_low": "SELECT customer_id, customer_first_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customers_Cards WHERE card_type_code = 'credit');",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of accounts associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT customer_id, customer_first_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customers_Cards WHERE card_type_code = 'credit')",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customers who do not have any associated accounts. It selects the first and last names of customers from the 'Customers' table and excludes those who have accounts by performing an EXCEPT operation with a subquery that joins the 'Customers' table with the 'Accounts' table based on the customer ID.\",\n        \"virtual_table\": \"SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with a specific customer identified by their first and last names, as well as a specific card type. The placeholders in the WHERE clause represent the customer's first name, last name, and the card type code.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING] AND T1.card_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT customer_id, customer_first_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customers_Cards WHERE card_type_code = 'credit')",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer IDs along with their first and last names from the 'Customers' table, specifically for customers who have a certain number of cards associated with them. The placeholder in the HAVING clause represents the minimum count of cards a customer must have to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer first and last names along with their associated customer IDs from the 'Accounts' and 'Customers' tables. The data is grouped by customer ID and ordered by the count of accounts associated with each customer in ascending order, with a limit on the number of results specified by a placeholder.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the first name, last name, and phone number of customers associated with a specific card number from the 'Customers' and 'Customers_Cards' tables. The placeholder in the WHERE clause represents the card number being queried.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT c.customer_id, c.customer_first_name \nFROM Customers c \nLEFT JOIN Customers_Cards cc ON c.customer_id = cc.customer_id AND cc.card_type_code = 'credit' \nWHERE cc.card_id IS NULL;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT customer_id, customer_first_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customers_Cards WHERE card_type_code = 'credit')",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customers who do not have any associated accounts. It selects the first and last names of customers from the 'Customers' table and excludes those who have accounts by performing an EXCEPT operation with a subquery that joins the 'Customers' table with the 'Accounts' table based on the customer ID.\",\n        \"virtual_table\": \"SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer IDs along with their first and last names from the 'Customers' table, specifically for customers who have a certain number of cards associated with them. The placeholder in the HAVING clause represents the minimum count of cards a customer must have to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT c.customer_id, c.customer_first_name \nFROM Customers c \nLEFT JOIN Customers_Cards cc ON c.customer_id = cc.customer_id AND cc.card_type_code = 'credit' \nWHERE cc.card_id IS NULL;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.729",
        "c_low": "SELECT DISTINCT card_type_code FROM Customers_Cards;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT card_type_code, count(*) FROM Customers_Cards GROUP BY card_type_code",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of different card types from the 'Customers_Cards' table. The placeholder in the SELECT clause represents the card type code, while the count function aggregates the number of occurrences for each card type.\",\n        \"virtual_table\": \"SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with a specific customer identified by their first and last names, as well as a specific card type. The placeholders in the WHERE clause represent the customer's first name, last name, and the card type code.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING] AND T1.card_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of financial transactions grouped by card type from the 'Financial_Transactions' and 'Customers_Cards' tables. The placeholder in the SELECT statement represents the card type code, while the count reflects the number of transactions associated with each card type.\",\n        \"virtual_table\": \"SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT card_type_code FROM Customers_Cards;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the different types of cards issued to customers, specifically focusing on the card type codes. It filters the results to only include those card types that have been issued a number of times equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of card types that should be considered.\",\n        \"virtual_table\": \"SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of cards held by each customer from the 'Customers_Cards' table. The placeholder in the LIMIT clause allows the user to specify the maximum number of customers to display based on the count of their cards.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT card_type_code FROM Customers_Cards GROUP BY card_type_code",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the different types of cards issued to customers, specifically focusing on the card type codes. It filters the results to only include those card types that have been issued a number of times equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of card types that should be considered.\",\n        \"virtual_table\": \"SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of different card types from the 'Customers_Cards' table. The placeholder in the SELECT clause represents the card type code, while the count function aggregates the number of occurrences for each card type.\",\n        \"virtual_table\": \"SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the number of cards held by each customer from the 'Customers_Cards' table. The placeholder in the LIMIT clause allows the user to specify the maximum number of customers to display based on the count of their cards.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT T2.card_type_code FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with a specific customer identified by their first and last names, as well as a specific card type. The placeholders in the WHERE clause represent the customer's first name, last name, and the card type code.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING] AND T1.card_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of financial transactions grouped by card type from the 'Financial_Transactions' and 'Customers_Cards' tables. The placeholder in the SELECT statement represents the card type code, while the count reflects the number of transactions associated with each card type.\",\n        \"virtual_table\": \"SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT card_type_code FROM Customers_Cards;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.735",
        "c_low": "SELECT transaction_type, COUNT(*) AS transaction_count \nFROM Financial_Transactions \nGROUP BY transaction_type;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT transaction_type, COUNT(*) as transaction_count FROM Financial_Transactions GROUP BY transaction_type",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of financial transactions grouped by card type from the 'Financial_Transactions' and 'Customers_Cards' tables. The placeholder in the SELECT statement represents the card type code, while the count reflects the number of transactions associated with each card type.\",\n        \"virtual_table\": \"SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of transactions associated with each account from the 'Financial_Transactions' table. The placeholder in the SELECT clause represents the account identifier, and the count function aggregates the total number of transactions per account.\",\n        \"virtual_table\": \"SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of different card types from the 'Customers_Cards' table. The placeholder in the SELECT clause represents the card type code, while the count function aggregates the number of occurrences for each card type.\",\n        \"virtual_table\": \"SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code\"\n    }\n}\n",
        "c_high": "SELECT transaction_type, COUNT(*) AS transaction_count \nFROM Financial_Transactions \nGROUP BY transaction_type;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT transaction_type, COUNT(*) as transaction_count FROM Financial_Transactions GROUP BY transaction_type;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of transactions associated with each account from the 'Financial_Transactions' table. The placeholder in the SELECT clause represents the account identifier, and the count function aggregates the total number of transactions per account.\",\n        \"virtual_table\": \"SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of different card types from the 'Customers_Cards' table. The placeholder in the SELECT clause represents the card type code, while the count function aggregates the number of occurrences for each card type.\",\n        \"virtual_table\": \"SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code\"\n    }\n}\n",
        "t_2": "SELECT T2.card_type_code, count(*) FROM Financial_Transactions AS T1 JOIN Customers_Cards AS T2 ON T1.card_id = T2.card_id GROUP BY T2.card_type_code",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of financial transactions grouped by card type from the 'Financial_Transactions' and 'Customers_Cards' tables. The placeholder in the SELECT statement represents the card type code, while the count reflects the number of transactions associated with each card type.\",\n        \"virtual_table\": \"SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code\"\n    }\n}\n",
        "t_3+": "SELECT transaction_type, COUNT(*) AS transaction_count \nFROM Financial_Transactions \nGROUP BY transaction_type;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.743",
        "c_low": "SELECT transaction_type, SUM(transaction_amount) AS total_amount\nFROM Financial_Transactions\nGROUP BY transaction_type\nORDER BY total_amount DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT transaction_type, SUM(transaction_amount) AS total_amount \nFROM Financial_Transactions \nGROUP BY transaction_type \nORDER BY total_amount DESC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of transactions associated with each account from the 'Financial_Transactions' table. The placeholder in the SELECT clause represents the account identifier, and the count function aggregates the total number of transactions per account.\",\n        \"virtual_table\": \"SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of financial transactions grouped by card type from the 'Financial_Transactions' and 'Customers_Cards' tables. The placeholder in the SELECT statement represents the card type code, while the count reflects the number of transactions associated with each card type.\",\n        \"virtual_table\": \"SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code\"\n    }\n}\n",
        "c_high": "SELECT transaction_type, SUM(transaction_amount) AS total_amount\nFROM Financial_Transactions\nGROUP BY transaction_type\nORDER BY total_amount DESC\nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT transaction_type, SUM(transaction_amount) AS total_amount \nFROM Financial_Transactions \nGROUP BY transaction_type \nORDER BY total_amount DESC \nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of transactions associated with each account from the 'Financial_Transactions' table. The placeholder in the SELECT clause represents the account identifier, and the count function aggregates the total number of transactions per account.\",\n        \"virtual_table\": \"SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id\"\n    }\n}\n",
        "t_2": "SELECT transaction_type, SUM(transaction_amount) AS total_amount \nFROM Financial_Transactions \nGROUP BY transaction_type \nORDER BY total_amount DESC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of financial transactions grouped by card type from the 'Financial_Transactions' and 'Customers_Cards' tables. The placeholder in the SELECT statement represents the card type code, while the count reflects the number of transactions associated with each card type.\",\n        \"virtual_table\": \"SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code\"\n    }\n}\n",
        "t_3+": "SELECT transaction_type, SUM(transaction_amount) AS total_amount\nFROM Financial_Transactions\nGROUP BY transaction_type\nORDER BY total_amount DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.745",
        "c_low": "SELECT Accounts.account_id, COUNT(Financial_Transactions.transaction_id) AS transaction_count\nFROM Accounts\nLEFT JOIN Financial_Transactions ON Accounts.account_id = Financial_Transactions.account_id\nGROUP BY Accounts.account_id;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT account_id, COUNT(*) AS transaction_count FROM Financial_Transactions GROUP BY account_id",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of transactions associated with each account from the 'Financial_Transactions' table. The placeholder in the SELECT clause represents the account identifier, and the count function aggregates the total number of transactions per account.\",\n        \"virtual_table\": \"SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of accounts associated with each customer from the 'Accounts' table. The placeholder in the SELECT clause represents the customer identifier, and the count function aggregates the total number of accounts per customer.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of financial transactions grouped by card type from the 'Financial_Transactions' and 'Customers_Cards' tables. The placeholder in the SELECT statement represents the card type code, while the count reflects the number of transactions associated with each card type.\",\n        \"virtual_table\": \"SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code\"\n    }\n}\n",
        "c_high": "SELECT account_id, COUNT(transaction_id) AS number_of_transactions \nFROM Financial_Transactions \nGROUP BY account_id;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of accounts associated with each customer from the 'Accounts' table. The placeholder in the LIMIT clause represents the maximum number of customers to display based on their account count.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer first and last names along with their associated customer IDs from the 'Accounts' and 'Customers' tables. The data is grouped by customer ID and ordered by the count of accounts associated with each customer in ascending order, with a limit on the number of results specified by a placeholder.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT account_id, COUNT(*) AS transaction_count FROM Financial_Transactions GROUP BY account_id",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of transactions associated with each account from the 'Financial_Transactions' table. The placeholder in the SELECT clause represents the account identifier, and the count function aggregates the total number of transactions per account.\",\n        \"virtual_table\": \"SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of accounts associated with each customer from the 'Accounts' table. The placeholder in the SELECT clause represents the customer identifier, and the count function aggregates the total number of accounts per customer.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the number of accounts associated with each customer from the 'Accounts' table. The placeholder in the LIMIT clause represents the maximum number of customers to display based on their account count.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT account_id, COUNT(transaction_id) AS number_of_transactions FROM Financial_Transactions GROUP BY account_id",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer first and last names along with their associated customer IDs from the 'Accounts' and 'Customers' tables. The data is grouped by customer ID and ordered by the count of accounts associated with each customer in ascending order, with a limit on the number of results specified by a placeholder.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of financial transactions grouped by card type from the 'Financial_Transactions' and 'Customers_Cards' tables. The placeholder in the SELECT statement represents the card type code, while the count reflects the number of transactions associated with each card type.\",\n        \"virtual_table\": \"SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code\"\n    }\n}\n",
        "t_3+": "SELECT Accounts.account_id, COUNT(Financial_Transactions.transaction_id) AS transaction_count\nFROM Accounts\nLEFT JOIN Financial_Transactions ON Accounts.account_id = Financial_Transactions.account_id\nGROUP BY Accounts.account_id;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.777",
        "c_low": "SELECT DISTINCT Year_Opened FROM track WHERE Seating >= 5000 UNION SELECT DISTINCT Year_Opened FROM track WHERE Seating <= 4000;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the years when racing tracks were opened, specifically filtering tracks based on their seating capacity. The placeholders in the WHERE clause allow users to specify a range for the seating capacity of the tracks they are interested in.\",\n        \"virtual_table\": \"SELECT year_opened FROM track WHERE seating BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT Year_Opened FROM track WHERE Track_ID IN (SELECT Track_ID FROM track WHERE Seating >= 5000) AND Track_ID IN (SELECT Track_ID FROM track WHERE Seating <= 4000);",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies the locations of racing tracks that have a seating capacity greater than a specified number and less than another specified number. The placeholders in the WHERE clauses represent the seating capacity limits.\",\n        \"virtual_table\": \"SELECT LOCATION FROM track WHERE seating  >  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT LOCATION FROM track WHERE seating  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT year_opened FROM track WHERE seating >= 5000 OR seating <= 4000;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and seating capacities of racing tracks from the 'track' table that were opened after a specific year. The placeholder in the WHERE clause represents the year of opening.\",\n        \"virtual_table\": \"SELECT name ,  seating FROM track WHERE year_opened  >  [PLACEHOLDER-TYPE:NUMBER] ORDER BY seating\"\n    }\n}\n",
        "t_1": "SELECT Year_Opened FROM track WHERE Seating >= 5000 UNION SELECT Year_Opened FROM track WHERE Seating <= 4000;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the years when racing tracks were opened, specifically filtering tracks based on their seating capacity. The placeholders in the WHERE clause allow users to specify a range for the seating capacity of the tracks they are interested in.\",\n        \"virtual_table\": \"SELECT year_opened FROM track WHERE seating BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and seating capacities of racing tracks from the 'track' table that were opened after a specific year. The placeholder in the WHERE clause represents the year of opening.\",\n        \"virtual_table\": \"SELECT name ,  seating FROM track WHERE year_opened  >  [PLACEHOLDER-TYPE:NUMBER] ORDER BY seating\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the locations of racing tracks that have a seating capacity greater than a specified number and less than another specified number. The placeholders in the WHERE clauses represent the seating capacity limits.\",\n        \"virtual_table\": \"SELECT LOCATION FROM track WHERE seating  >  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT LOCATION FROM track WHERE seating  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT Year_Opened FROM track WHERE Seating >= 5000 OR Seating <= 4000;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT DISTINCT Year_Opened FROM track WHERE Seating >= 5000 OR Seating <= 4000;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.779",
        "c_low": "SELECT track.Name, COUNT(race.Race_ID) AS Number_of_Races\nFROM track\nLEFT JOIN race ON track.Track_ID = race.Track_ID\nGROUP BY track.Name;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the years when racing tracks were opened, specifically filtering tracks based on their seating capacity. The placeholders in the WHERE clause allow users to specify a range for the seating capacity of the tracks they are interested in.\",\n        \"virtual_table\": \"SELECT year_opened FROM track WHERE seating BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT T2.Name, COUNT(T1.Race_ID) AS Number_of_Races FROM race AS T1 JOIN track AS T2 ON T1.Track_ID = T2.Track_ID GROUP BY T2.Track_ID ORDER BY Number_of_Races DESC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names of racing tracks associated with races, sorted by the number of races held at each track. The placeholder in the LIMIT clause allows the user to specify the maximum number of track names to retrieve.\",\n        \"virtual_table\": \"SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of racing tracks from the 'track' table that do not host any races. The placeholder in the subquery represents the track identifiers associated with races.\",\n        \"virtual_table\": \"SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the locations of racing tracks that have a seating capacity greater than a specified number and less than another specified number. The placeholders in the WHERE clauses represent the seating capacity limits.\",\n        \"virtual_table\": \"SELECT LOCATION FROM track WHERE seating  >  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT LOCATION FROM track WHERE seating  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT T2.Name, COUNT(T1.Race_ID) AS Number_of_Races FROM race AS T1 JOIN track AS T2 ON T1.Track_ID = T2.Track_ID GROUP BY T2.Track_ID",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and locations of racing tracks associated with a specific number of races. The placeholder in the HAVING clause represents the count of races that must be matched for the tracks to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and seating capacities of racing tracks from the 'track' table that were opened after a specific year. The placeholder in the WHERE clause represents the year of opening.\",\n        \"virtual_table\": \"SELECT name ,  seating FROM track WHERE year_opened  >  [PLACEHOLDER-TYPE:NUMBER] ORDER BY seating\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of racing tracks that do not host any races of a specific classification. The placeholder in the WHERE clause represents the classification of the race events.\",\n        \"virtual_table\": \"SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT track.Name, COUNT(race.Race_ID) AS Number_of_Races\nFROM track\nLEFT JOIN race ON track.Track_ID = race.Track_ID\nGROUP BY track.Name;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and seating capacities of racing tracks from the 'track' table that were opened after a specific year. The placeholder in the WHERE clause represents the year of opening.\",\n        \"virtual_table\": \"SELECT name ,  seating FROM track WHERE year_opened  >  [PLACEHOLDER-TYPE:NUMBER] ORDER BY seating\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the years when racing tracks were opened, specifically filtering tracks based on their seating capacity. The placeholders in the WHERE clause allow users to specify a range for the seating capacity of the tracks they are interested in.\",\n        \"virtual_table\": \"SELECT year_opened FROM track WHERE seating BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the locations of racing tracks that have a seating capacity greater than a specified number and less than another specified number. The placeholders in the WHERE clauses represent the seating capacity limits.\",\n        \"virtual_table\": \"SELECT LOCATION FROM track WHERE seating  >  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT LOCATION FROM track WHERE seating  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.Name, COUNT(T1.Race_ID) AS Number_of_Races FROM race AS T1 JOIN track AS T2 ON T1.Track_ID = T2.Track_ID GROUP BY T2.Track_ID",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names of racing tracks associated with races, sorted by the number of races held at each track. The placeholder in the LIMIT clause allows the user to specify the maximum number of track names to retrieve.\",\n        \"virtual_table\": \"SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and locations of racing tracks associated with a specific number of races. The placeholder in the HAVING clause represents the count of races that must be matched for the tracks to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of racing tracks from the 'track' table that do not host any races. The placeholder in the subquery represents the track identifiers associated with races.\",\n        \"virtual_table\": \"SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)\"\n    }\n}\n",
        "t_3+": "SELECT track.Name, COUNT(race.Race_ID) AS Number_of_Races\nFROM track\nLEFT JOIN race ON track.Track_ID = race.Track_ID\nGROUP BY track.Track_ID, track.Name;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.780",
        "c_low": "SELECT track.Name, COUNT(race.Race_ID) AS Race_Count\nFROM track\nLEFT JOIN race ON track.Track_ID = race.Track_ID\nGROUP BY track.Name;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the years when racing tracks were opened, specifically filtering tracks based on their seating capacity. The placeholders in the WHERE clause allow users to specify a range for the seating capacity of the tracks they are interested in.\",\n        \"virtual_table\": \"SELECT year_opened FROM track WHERE seating BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the classifications of races from the 'race' table, grouping them by class and filtering to show only those classes that have a specified minimum number of races. The placeholder in the HAVING clause represents the minimum count of races required for a class to be included in the results.\",\n        \"virtual_table\": \"SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT T2.Name, COUNT(T1.Race_ID) AS Race_Count FROM race AS T1 JOIN track AS T2 ON T1.Track_ID = T2.Track_ID GROUP BY T2.Track_ID",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names of racing tracks associated with races, sorted by the number of races held at each track. The placeholder in the LIMIT clause allows the user to specify the maximum number of track names to retrieve.\",\n        \"virtual_table\": \"SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of racing tracks from the 'track' table that do not host any races. The placeholder in the subquery represents the track identifiers associated with races.\",\n        \"virtual_table\": \"SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the locations of racing tracks that have a seating capacity greater than a specified number and less than another specified number. The placeholders in the WHERE clauses represent the seating capacity limits.\",\n        \"virtual_table\": \"SELECT LOCATION FROM track WHERE seating  >  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT LOCATION FROM track WHERE seating  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT T2.Name, COUNT(T1.Race_ID) AS Race_Count FROM race AS T1 JOIN track AS T2 ON T1.Track_ID = T2.Track_ID GROUP BY T2.Track_ID",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and locations of racing tracks associated with a specific number of races. The placeholder in the HAVING clause represents the count of races that must be matched for the tracks to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and seating capacities of racing tracks from the 'track' table that were opened after a specific year. The placeholder in the WHERE clause represents the year of opening.\",\n        \"virtual_table\": \"SELECT name ,  seating FROM track WHERE year_opened  >  [PLACEHOLDER-TYPE:NUMBER] ORDER BY seating\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of racing tracks that do not host any races of a specific classification. The placeholder in the WHERE clause represents the classification of the race events.\",\n        \"virtual_table\": \"SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT track.Name, COUNT(race.Race_ID) AS Race_Count \nFROM track \nLEFT JOIN race ON track.Track_ID = race.Track_ID \nGROUP BY track.Name;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and seating capacities of racing tracks from the 'track' table that were opened after a specific year. The placeholder in the WHERE clause represents the year of opening.\",\n        \"virtual_table\": \"SELECT name ,  seating FROM track WHERE year_opened  >  [PLACEHOLDER-TYPE:NUMBER] ORDER BY seating\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the years when racing tracks were opened, specifically filtering tracks based on their seating capacity. The placeholders in the WHERE clause allow users to specify a range for the seating capacity of the tracks they are interested in.\",\n        \"virtual_table\": \"SELECT year_opened FROM track WHERE seating BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the classifications of races from the 'race' table, grouping them by class and filtering to show only those classes that have a specified minimum number of races. The placeholder in the HAVING clause represents the minimum count of races required for a class to be included in the results.\",\n        \"virtual_table\": \"SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.Name, COUNT(T1.Race_ID) AS Race_Count FROM race AS T1 JOIN track AS T2 ON T1.Track_ID = T2.Track_ID GROUP BY T2.Track_ID",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names of racing tracks associated with races, sorted by the number of races held at each track. The placeholder in the LIMIT clause allows the user to specify the maximum number of track names to retrieve.\",\n        \"virtual_table\": \"SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and locations of racing tracks associated with a specific number of races. The placeholder in the HAVING clause represents the count of races that must be matched for the tracks to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of racing tracks from the 'track' table that do not host any races. The placeholder in the subquery represents the track identifiers associated with races.\",\n        \"virtual_table\": \"SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)\"\n    }\n}\n",
        "t_3+": "SELECT track.Name, COUNT(race.Race_ID) AS Race_Count\nFROM track\nLEFT JOIN race ON track.Track_ID = race.Track_ID\nGROUP BY track.Name;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.789",
        "c_low": "SELECT count(*) FROM member WHERE Membership_card = 'black'",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of members from the 'member' table who do not reside at a specific address. The placeholder in the WHERE clause represents the address that members should not match.\",\n        \"virtual_table\": \"SELECT count(*) FROM member WHERE address != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT COUNT(*) FROM member WHERE Membership_card = 'black'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of members grouped by their residential addresses from the 'member' table. The placeholder in the SELECT clause represents the count of members, while the address is displayed for each group.\",\n        \"virtual_table\": \"SELECT count(*) ,  address FROM member GROUP BY address\"\n    }\n}\n",
        "c_high": "SELECT COUNT(*) FROM member WHERE Membership_card = 'black'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves the membership cards of members who share the same residential address. The query uses an INTERSECT operation to find members with identical addresses, represented by placeholders for the address values.\",\n        \"virtual_table\": \"SELECT membership_card FROM member WHERE address  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT membership_card FROM member WHERE address  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT COUNT(*) FROM member WHERE membership_card = 'black'",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves the membership cards of members who share the same residential address. The query uses an INTERSECT operation to find members with identical addresses, represented by placeholders for the address values.\",\n        \"virtual_table\": \"SELECT membership_card FROM member WHERE address  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT membership_card FROM member WHERE address  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of members grouped by their residential addresses from the 'member' table. The placeholder in the SELECT clause represents the count of members, while the address is displayed for each group.\",\n        \"virtual_table\": \"SELECT count(*) ,  address FROM member GROUP BY address\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table counts the number of members from the 'member' table who do not reside at a specific address. The placeholder in the WHERE clause represents the address that members should not match.\",\n        \"virtual_table\": \"SELECT count(*) FROM member WHERE address != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT COUNT(*) AS Number_of_Members FROM member WHERE Membership_card = 'black';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT COUNT(*) AS Number_of_Members FROM member WHERE Membership_card = 'black';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.792",
        "c_low": "SELECT Member_ID, Name FROM member WHERE Age < 30 OR Level_of_membership = 'black';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Member_ID, Name FROM member WHERE Age < 30 OR Level_of_membership = 'black';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT Member_ID, Name FROM member WHERE Age < 30 OR Membership_card = 'black'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves the addresses of members whose ages are below a certain threshold and also above another threshold. The placeholders in the WHERE clauses represent the age limits for filtering the members.\",\n        \"virtual_table\": \"SELECT address FROM member WHERE age  <  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT address FROM member WHERE age  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Member_ID, Name FROM member WHERE Age < 30 OR Membership_card = 'black'",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves the addresses of members whose ages are below a certain threshold and also above another threshold. The placeholders in the WHERE clauses represent the age limits for filtering the members.\",\n        \"virtual_table\": \"SELECT address FROM member WHERE age  <  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT address FROM member WHERE age  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Member_ID, Name FROM member WHERE Age < 30 OR Level_of_membership = 'black';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT Member_ID, Name FROM member WHERE Age < 30 OR Membership_card = 'black';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.794",
        "c_low": "SELECT Membership_card, COUNT(Member_ID) AS Member_Count \nFROM member \nGROUP BY Membership_card \nHAVING COUNT(Member_ID) > 5;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Membership_card FROM member GROUP BY Membership_card HAVING COUNT(Member_ID) > 5;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of members grouped by their residential addresses from the 'member' table. The placeholder in the SELECT clause represents the count of members, while the address is displayed for each group.\",\n        \"virtual_table\": \"SELECT count(*) ,  address FROM member GROUP BY address\"\n    }\n}\n",
        "c_high": "SELECT membership_card FROM member GROUP BY membership_card HAVING COUNT(Member_ID) > 5;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves the membership cards of members who share the same residential address. The query uses an INTERSECT operation to find members with identical addresses, represented by placeholders for the address values.\",\n        \"virtual_table\": \"SELECT membership_card FROM member WHERE address  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT membership_card FROM member WHERE address  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT membership_card FROM member GROUP BY membership_card HAVING COUNT(Member_ID) > 5;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves the membership cards of members who share the same residential address. The query uses an INTERSECT operation to find members with identical addresses, represented by placeholders for the address values.\",\n        \"virtual_table\": \"SELECT membership_card FROM member WHERE address  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT membership_card FROM member WHERE address  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of members grouped by their residential addresses from the 'member' table. The placeholder in the SELECT clause represents the count of members, while the address is displayed for each group.\",\n        \"virtual_table\": \"SELECT count(*) ,  address FROM member GROUP BY address\"\n    }\n}\n",
        "t_2": "SELECT Membership_card, COUNT(Member_ID) AS Member_Count\nFROM member\nGROUP BY Membership_card\nHAVING COUNT(Member_ID) > 5;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT Membership_card, COUNT(Member_ID) AS Member_Count\nFROM member\nGROUP BY Membership_card\nHAVING COUNT(Member_ID) > 5;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.798",
        "c_low": "SELECT Address FROM shop WHERE Shop_ID NOT IN (SELECT DISTINCT shop.Shop_ID FROM happy_hour_member JOIN member ON happy_hour_member.Member_ID = member.Member_ID WHERE member.Level_of_membership = 'black')",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of members from the 'member' table who do not reside at a specific address. The placeholder in the WHERE clause represents the address that members should not match.\",\n        \"virtual_table\": \"SELECT count(*) FROM member WHERE address != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of members from the 'member' table who reside at specific addresses. The placeholders in the WHERE clause represent the addresses being queried.\",\n        \"virtual_table\": \"SELECT name FROM member WHERE address  =  [PLACEHOLDER-TYPE:STRING] OR address  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT shop.Address \nFROM shop \nLEFT JOIN (SELECT count(*) AS member_count, Address \n            FROM member \n            WHERE Level_of_membership = 'black' \n            GROUP BY Address) AS member_counts \nON shop.Address = member_counts.Address \nWHERE member_counts.member_count IS NULL;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of members grouped by their residential addresses from the 'member' table. The placeholder in the SELECT clause represents the count of members, while the address is displayed for each group.\",\n        \"virtual_table\": \"SELECT count(*) ,  address FROM member GROUP BY address\"\n    }\n}\n",
        "c_high": "SELECT address FROM shop WHERE shop_id NOT IN (SELECT DISTINCT shop_id FROM happy_hour_member WHERE member_id IN (SELECT member_id FROM member WHERE membership_card = 'black'))",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves the membership cards of members who share the same residential address. The query uses an INTERSECT operation to find members with identical addresses, represented by placeholders for the address values.\",\n        \"virtual_table\": \"SELECT membership_card FROM member WHERE address  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT membership_card FROM member WHERE address  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the addresses and the number of staff for shops that are not hosting any happy hour events. The placeholder in the WHERE clause is used to filter out shops that are involved in happy hours.\",\n        \"virtual_table\": \"SELECT address ,  num_of_staff FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM happy_hour)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table retrieves the addresses of members whose ages are below a certain threshold and also above another threshold. The placeholders in the WHERE clauses represent the age limits for filtering the members.\",\n        \"virtual_table\": \"SELECT address FROM member WHERE age  <  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT address FROM member WHERE age  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT Address FROM member m WHERE NOT EXISTS (SELECT 1 FROM member WHERE m.Address = member.Address AND member.Level_of_membership = 'black')",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of members from the 'member' table who do not reside at a specific address. The placeholder in the WHERE clause represents the address that members should not match.\",\n        \"virtual_table\": \"SELECT count(*) FROM member WHERE address != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table retrieves the membership cards of members who share the same residential address. The query uses an INTERSECT operation to find members with identical addresses, represented by placeholders for the address values.\",\n        \"virtual_table\": \"SELECT membership_card FROM member WHERE address  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT membership_card FROM member WHERE address  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of members from the 'member' table who reside at specific addresses. The placeholders in the WHERE clause represent the addresses being queried.\",\n        \"virtual_table\": \"SELECT name FROM member WHERE address  =  [PLACEHOLDER-TYPE:STRING] OR address  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT Address FROM shop WHERE Shop_ID NOT IN (SELECT DISTINCT shop.Shop_ID FROM shop JOIN happy_hour ON shop.Shop_ID = happy_hour.Shop_ID JOIN happy_hour_member ON happy_hour.HH_ID = happy_hour_member.HH_ID JOIN member ON happy_hour_member.Member_ID = member.Member_ID WHERE member.Level_of_membership = 'black')",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the addresses and the number of staff for shops that are not hosting any happy hour events. The placeholder in the WHERE clause is used to filter out shops that are involved in happy hours.\",\n        \"virtual_table\": \"SELECT address ,  num_of_staff FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM happy_hour)\"\n    }\n}\n",
        "t_3+": "SELECT Address FROM shop WHERE Shop_ID NOT IN (SELECT DISTINCT Shop_ID FROM happy_hour_member INNER JOIN member ON happy_hour_member.Member_ID = member.Member_ID WHERE member.Level_of_membership = 'black');",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.814",
        "c_low": "SELECT FirstName || ' ' || LastName AS FullName FROM Employee WHERE City = 'Calgary';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the cities of customers who are supported by a specific employee. The placeholder in the WHERE clause represents the postal code of the customer.\",\n        \"virtual_table\": \"SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT FirstName || ' ' || LastName AS FullName\nFROM Employee\nWHERE City = 'Calgary';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT FirstName || ' ' || LastName AS FullName\nFROM Employee\nWHERE City = 'Calgary';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT FirstName || ' ' || LastName AS FullName\nFROM Employee\nWHERE City = 'Calgary';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT FirstName || ' ' || LastName AS FullName FROM Employee WHERE City = 'Calgary';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the cities of customers who are supported by a specific employee. The placeholder in the WHERE clause represents the postal code of the customer.\",\n        \"virtual_table\": \"SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT FirstName || ' ' || LastName AS FullName\nFROM Employee\nWHERE City = 'Calgary';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.825",
        "c_low": "SELECT T2.Name, COUNT(*) AS AlbumCount \nFROM Album AS T1 \nJOIN Artist AS T2 ON T1.ArtistId = T2.ArtistId \nGROUP BY T2.Name \nORDER BY AlbumCount DESC \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of artists from the 'Artist' table who have created a specific album. The placeholder in the WHERE clause represents the title of the album.\",\n        \"virtual_table\": \"SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of albums from the 'Album' table that are associated with a specific artist from the 'Artist' table. The placeholder in the WHERE clause represents the name of the artist.\",\n        \"virtual_table\": \"SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles of albums from the 'Album' table that are associated with a specific artist. The placeholder in the WHERE clause represents the name of the artist.\",\n        \"virtual_table\": \"SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT T2.Name FROM Album AS T1 JOIN Artist AS T2 ON T1.ArtistId = T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"The virtual table lists the names of artists who have created albums, ordered by the number of albums they have produced. The placeholder in the LIMIT clause allows the user to specify the maximum number of artist names to retrieve.\",\n        \"virtual_table\": \"SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT T2.Name, COUNT(T1.AlbumId) AS AlbumCount \nFROM Album AS T1 \nJOIN Artist AS T2 ON T1.ArtistId = T2.ArtistId \nGROUP BY T1.ArtistId \nORDER BY AlbumCount DESC \nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of artist names along with their corresponding artist identifiers from the 'Album' and 'Artist' tables. It filters the results to include only those artists who have a specified minimum number of albums, represented by a placeholder for numeric values. The results are grouped by artist identifier and ordered by the artist's name.\",\n        \"virtual_table\": \"SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER] ORDER BY T2.Name\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of artists from the 'Artist' table who do not have any albums associated with them. The subquery identifies artists that are linked to albums, and the main query counts those artists who are not in that list.\",\n        \"virtual_table\": \"SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)\"\n    },\n    \"2\": {\n        \"description\": \"The virtual table summarizes the titles of albums along with their unique identifiers and the count of tracks associated with each album. It combines data from the 'Album' and 'Track' tables, grouping the results by album identifier to provide a count of tracks for each album.\",\n        \"virtual_table\": \"SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID\"\n    }\n}\n",
        "t_1": "SELECT Artist.Name, COUNT(Album.AlbumId) AS AlbumCount\nFROM Artist\nJOIN Album ON Artist.ArtistId = Album.ArtistId\nGROUP BY Artist.ArtistId\nORDER BY AlbumCount DESC\nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"The virtual table lists the names of artists who have created albums, ordered by the number of albums they have produced. The placeholder in the LIMIT clause allows the user to specify the maximum number of artist names to retrieve.\",\n        \"virtual_table\": \"SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of artists from the 'Artist' table who have created a specific album. The placeholder in the WHERE clause represents the title of the album.\",\n        \"virtual_table\": \"SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of albums from the 'Album' table that are associated with a specific artist from the 'Artist' table. The placeholder in the WHERE clause represents the name of the artist.\",\n        \"virtual_table\": \"SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Artist.Name, COUNT(Album.AlbumId) AS AlbumCount\nFROM Artist\nJOIN Album ON Artist.ArtistId = Album.ArtistId\nGROUP BY Artist.ArtistId\nORDER BY AlbumCount DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.837",
        "c_low": "SELECT MediaType.Name, COUNT(*) AS TrackCount\nFROM MediaType\nLEFT JOIN Track ON MediaType.MediaTypeId = Track.MediaTypeId\nGROUP BY MediaType.Name\nORDER BY TrackCount ASC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of tracks associated with a specific media type from the 'MediaType' and 'Track' tables. The placeholder in the WHERE clause represents the name of the media type being queried.\",\n        \"virtual_table\": \"SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"The virtual table displays the distinct unit prices of tracks from the 'Track' table. The placeholder in the SELECT clause represents the unit price of each track, ensuring that only unique values are shown.\",\n        \"virtual_table\": \"SELECT distinct(UnitPrice) FROM TRACK\"\n    }\n}\n",
        "c_mid": "SELECT T1.Name FROM MediaType AS T1 JOIN Track AS T2 ON T1.MediaTypeId = T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of media types from the 'MediaType' table, ordered by the number of tracks associated with each media type in ascending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of media types to retrieve.\",\n        \"virtual_table\": \"SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the maximum and minimum duration of tracks from a specific genre. The data is retrieved by joining the 'Genre' and 'Track' tables based on the genre identifier. The placeholder in the WHERE clause represents the name of the genre for which the duration statistics are being queried.\",\n        \"virtual_table\": \"SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT MediaTypeId, COUNT(*) AS TrackCount FROM Track GROUP BY MediaTypeId ORDER BY TrackCount ASC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"The virtual table summarizes the titles of albums along with their unique identifiers and the count of tracks associated with each album. It combines data from the 'Album' and 'Track' tables, grouping the results by album identifier to provide a count of tracks for each album.\",\n        \"virtual_table\": \"SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID\"\n    }\n}\n",
        "t_1": "SELECT MediaType.Name, COUNT(Track.TrackId) AS TrackCount\nFROM Track\nJOIN MediaType ON Track.MediaTypeId = MediaType.MediaTypeId\nGROUP BY MediaType.Name\nORDER BY TrackCount ASC\nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"The virtual table displays the distinct unit prices of tracks from the 'Track' table. The placeholder in the SELECT clause represents the unit price of each track, ensuring that only unique values are shown.\",\n        \"virtual_table\": \"SELECT distinct(UnitPrice) FROM TRACK\"\n    }\n}\n",
        "t_2": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of tracks associated with a specific media type from the 'MediaType' and 'Track' tables. The placeholder in the WHERE clause represents the name of the media type being queried.\",\n        \"virtual_table\": \"SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of media types from the 'MediaType' table, ordered by the number of tracks associated with each media type in ascending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of media types to retrieve.\",\n        \"virtual_table\": \"SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"The virtual table summarizes the titles of albums along with their unique identifiers and the count of tracks associated with each album. It combines data from the 'Album' and 'Track' tables, grouping the results by album identifier to provide a count of tracks for each album.\",\n        \"virtual_table\": \"SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID\"\n    }\n}\n",
        "t_3+": "SELECT MediaType.Name, COUNT(Track.TrackId) AS TrackCount\nFROM Track\nJOIN MediaType ON Track.MediaTypeId = MediaType.MediaTypeId\nGROUP BY MediaType.Name\nORDER BY TrackCount ASC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.839",
        "c_low": "SELECT Album.AlbumId, Album.Title \nFROM Album \nJOIN Track ON Album.AlbumId = Track.AlbumId \nWHERE Track.UnitPrice > 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"The virtual table displays the distinct unit prices of tracks from the 'Track' table. The placeholder in the SELECT clause represents the unit price of each track, ensuring that only unique values are shown.\",\n        \"virtual_table\": \"SELECT distinct(UnitPrice) FROM TRACK\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the titles of albums from the 'Album' table that are associated with a specific artist. The placeholder in the WHERE clause represents the name of the artist.\",\n        \"virtual_table\": \"SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of artists from the 'Artist' table who have created a specific album. The placeholder in the WHERE clause represents the title of the album.\",\n        \"virtual_table\": \"SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT A.AlbumId, A.Title \nFROM Album A \nJOIN Track T ON A.AlbumId = T.AlbumId \nWHERE T.UnitPrice > 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"The virtual table lists the names of artists who have created albums, ordered by the number of albums they have produced. The placeholder in the LIMIT clause allows the user to specify the maximum number of artist names to retrieve.\",\n        \"virtual_table\": \"SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT T1.Title, T1.AlbumId FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 GROUP BY T1.AlbumId",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of album titles along with their unique identifiers from the 'Album' table, specifically for tracks that have a unit price exceeding a specified amount. The placeholder in the WHERE clause represents the minimum unit price for filtering the tracks.\",\n        \"virtual_table\": \"SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY T2.AlbumID\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of artist names along with their corresponding artist identifiers from the 'Album' and 'Artist' tables. It filters the results to include only those artists who have a specified minimum number of albums, represented by a placeholder for numeric values. The results are grouped by artist identifier and ordered by the artist's name.\",\n        \"virtual_table\": \"SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER] ORDER BY T2.Name\"\n    },\n    \"2\": {\n        \"description\": \"The virtual table summarizes the titles of albums along with their unique identifiers and the count of tracks associated with each album. It combines data from the 'Album' and 'Track' tables, grouping the results by album identifier to provide a count of tracks for each album.\",\n        \"virtual_table\": \"SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID\"\n    }\n}\n",
        "t_1": "SELECT Album.AlbumId, Album.Title \nFROM Album \nJOIN Track ON Album.AlbumId = Track.AlbumId \nWHERE Track.UnitPrice > 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"The virtual table displays the distinct unit prices of tracks from the 'Track' table. The placeholder in the SELECT clause represents the unit price of each track, ensuring that only unique values are shown.\",\n        \"virtual_table\": \"SELECT distinct(UnitPrice) FROM TRACK\"\n    }\n}\n",
        "t_2": "SELECT T1.Title, T1.AlbumId FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 GROUP BY T1.AlbumId",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of album titles along with their unique identifiers from the 'Album' table, specifically for tracks that have a unit price exceeding a specified amount. The placeholder in the WHERE clause represents the minimum unit price for filtering the tracks.\",\n        \"virtual_table\": \"SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY T2.AlbumID\"\n    },\n    \"1\": {\n        \"description\": \"The virtual table lists the names of artists who have created albums, ordered by the number of albums they have produced. The placeholder in the LIMIT clause allows the user to specify the maximum number of artist names to retrieve.\",\n        \"virtual_table\": \"SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of artist names along with their corresponding artist identifiers from the 'Album' and 'Artist' tables. It filters the results to include only those artists who have a specified minimum number of albums, represented by a placeholder for numeric values. The results are grouped by artist identifier and ordered by the artist's name.\",\n        \"virtual_table\": \"SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER] ORDER BY T2.Name\"\n    }\n}\n",
        "t_3+": "SELECT Album.AlbumId, Album.Title \nFROM Album \nJOIN Track ON Album.AlbumId = Track.AlbumId \nWHERE Track.UnitPrice > 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.846",
        "c_low": "SELECT FirstName || ' ' || LastName AS FullName \nFROM Customer \nWHERE Email = 'luisg@embraer.com.br';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the cities of customers who are supported by a specific employee. The placeholder in the WHERE clause represents the postal code of the customer.\",\n        \"virtual_table\": \"SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT FirstName || ' ' || LastName AS FullName \nFROM Customer \nWHERE Email = 'luisg@embraer.com.br';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique first names of customers from the 'Customer' table who have made purchases, as indicated by their presence in the 'Invoice' table. The placeholder in the WHERE clause represents the country of the customers.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT FirstName, LastName FROM Customer WHERE Email = 'luisg@embraer.com.br'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of employees who are assigned as support representatives for customers with a specific first name. The placeholder in the WHERE clause represents the customer's first name.\",\n        \"virtual_table\": \"SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT FirstName || ' ' || LastName AS FullName \nFROM Customer \nWHERE Email = 'luisg@embraer.com.br';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT FirstName, LastName FROM Customer WHERE Email = 'luisg@embraer.com.br'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of employees who are assigned as support representatives for customers with a specific first name. The placeholder in the WHERE clause represents the customer's first name.\",\n        \"virtual_table\": \"SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the cities of customers who are supported by a specific employee. The placeholder in the WHERE clause represents the postal code of the customer.\",\n        \"virtual_table\": \"SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique first names of customers from the 'Customer' table who have made purchases, as indicated by their presence in the 'Invoice' table. The placeholder in the WHERE clause represents the country of the customers.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT FirstName || ' ' || LastName AS FullName \nFROM Customer \nWHERE Email = 'luisg@embraer.com.br';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.850",
        "c_low": "SELECT Employee.FirstName || ' ' || Employee.LastName AS FullName\nFROM Employee\nJOIN Customer ON Employee.EmployeeId = Customer.SupportRepId\nWHERE Customer.FirstName = 'Leonie';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Employee.FirstName || ' ' || Employee.LastName AS FullName\nFROM Employee\nJOIN Customer ON Employee.EmployeeId = Customer.SupportRepId\nWHERE Customer.FirstName = 'Leonie';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT T2.FirstName, T2.LastName FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.FirstName = 'Leonie'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of employees who are assigned as support representatives for customers with a specific first name. The placeholder in the WHERE clause represents the customer's first name.\",\n        \"virtual_table\": \"SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT Employee.FirstName || ' ' || Employee.LastName AS FullName\nFROM Employee\nJOIN Customer ON Employee.EmployeeId = Customer.SupportRepId\nWHERE Customer.FirstName = 'Leonie';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T2.FirstName, T2.LastName FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.FirstName = 'Leonie'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of employees who are assigned as support representatives for customers with a specific first name. The placeholder in the WHERE clause represents the customer's first name.\",\n        \"virtual_table\": \"SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Employee.FirstName || ' ' || Employee.LastName AS FullName\nFROM Employee\nJOIN Customer ON Employee.EmployeeId = Customer.SupportRepId\nWHERE Customer.FirstName = 'Leonie';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.857",
        "c_low": "SELECT DISTINCT Customer.LastName \nFROM Customer \nLEFT JOIN Invoice ON Customer.CustomerId = Invoice.CustomerId \nGROUP BY Customer.CustomerId \nHAVING SUM(CASE WHEN Invoice.Total > 20 THEN 1 ELSE 0 END) = 0;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT DISTINCT C.LastName \nFROM Customer AS C \nLEFT JOIN Invoice AS I ON C.CustomerId = I.CustomerId \nGROUP BY C.CustomerId \nHAVING SUM(I.Total) <= 20;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique first names of customers from the 'Customer' table who have made purchases, as indicated by their presence in the 'Invoice' table. The placeholder in the WHERE clause represents the country of the customers.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT Customer.LastName \nFROM Customer \nLEFT JOIN Invoice ON Customer.CustomerId = Invoice.CustomerId \nGROUP BY Customer.CustomerId \nHAVING SUM(COALESCE(Invoice.Total, 0)) <= 20;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT DISTINCT Customer.LastName\nFROM Customer\nLEFT JOIN Invoice ON Customer.CustomerId = Invoice.CustomerId\nGROUP BY Customer.CustomerId\nHAVING SUM(CASE WHEN Invoice.Total > 20 THEN 1 ELSE 0 END) = 0;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT DISTINCT C.LastName \nFROM Customer AS C \nLEFT JOIN Invoice AS I ON C.CustomerId = I.CustomerId \nGROUP BY C.CustomerId \nHAVING SUM(I.Total) <= 20;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique first names of customers from the 'Customer' table who have made purchases, as indicated by their presence in the 'Invoice' table. The placeholder in the WHERE clause represents the country of the customers.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT Customer.LastName\nFROM Customer\nLEFT JOIN Invoice ON Customer.CustomerId = Invoice.CustomerId\nGROUP BY Customer.CustomerId\nHAVING SUM(CASE WHEN Invoice.Total > 20 THEN 1 ELSE 0 END) = 0;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.858",
        "c_low": "SELECT DISTINCT Customer.LastName \nFROM Customer \nLEFT JOIN Invoice ON Customer.CustomerId = Invoice.CustomerId \nGROUP BY Customer.CustomerId \nHAVING SUM(Invoice.Total) <= 20;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT DISTINCT C.LastName \nFROM Customer AS C \nLEFT JOIN Invoice AS I ON C.CustomerId = I.CustomerId \nGROUP BY C.CustomerId \nHAVING SUM(I.Total) <= 20;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique first names of customers from the 'Customer' table who have made purchases, as indicated by their presence in the 'Invoice' table. The placeholder in the WHERE clause represents the country of the customers.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT Customer.LastName \nFROM Customer \nLEFT JOIN Invoice ON Customer.CustomerId = Invoice.CustomerId \nGROUP BY Customer.CustomerId \nHAVING SUM(Invoice.Total) <= 20;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT DISTINCT Customer.LastName \nFROM Customer \nLEFT JOIN Invoice ON Customer.CustomerId = Invoice.CustomerId \nGROUP BY Customer.CustomerId \nHAVING SUM(Invoice.Total) <= 20;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT DISTINCT C.LastName \nFROM Customer AS C \nLEFT JOIN Invoice AS I ON C.CustomerId = I.CustomerId \nGROUP BY C.CustomerId \nHAVING SUM(I.Total) <= 20;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique first names of customers from the 'Customer' table who have made purchases, as indicated by their presence in the 'Invoice' table. The placeholder in the WHERE clause represents the country of the customers.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT Customer.LastName \nFROM Customer \nLEFT JOIN Invoice ON Customer.CustomerId = Invoice.CustomerId \nGROUP BY Customer.CustomerId \nHAVING SUM(Invoice.Total) <= 20;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.861",
        "c_low": "SELECT Address FROM Customer WHERE CustomerId IN (SELECT CustomerId FROM Invoice) AND Country = 'Germany';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique billing countries from the 'Invoice' table. The placeholder in the SELECT statement indicates that the query will return distinct values for the billing country associated with invoices.\",\n        \"virtual_table\": \"SELECT distinct(BillingCountry) FROM INVOICE\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the cities of customers who are supported by a specific employee. The placeholder in the WHERE clause represents the postal code of the customer.\",\n        \"virtual_table\": \"SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT Address, City, State, Country, PostalCode FROM Customer WHERE Country = 'Germany' AND CustomerId IN (SELECT CustomerId FROM Invoice)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique first names of customers from the 'Customer' table who have made purchases, as indicated by their presence in the 'Invoice' table. The placeholder in the WHERE clause represents the country of the customers.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the invoice dates for customers from the 'Customer' table based on their first and last names. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  [PLACEHOLDER-TYPE:STRING] AND LastName  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode \nFROM Customer \nJOIN Invoice ON Customer.CustomerId = Invoice.CustomerId \nWHERE Customer.Country = 'Germany';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT DISTINCT Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode \nFROM Customer \nJOIN Invoice ON Customer.CustomerId = Invoice.CustomerId \nWHERE Customer.Country = 'Germany';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique billing countries from the 'Invoice' table. The placeholder in the SELECT statement indicates that the query will return distinct values for the billing country associated with invoices.\",\n        \"virtual_table\": \"SELECT distinct(BillingCountry) FROM INVOICE\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT Address FROM Customer WHERE Country = 'Germany' AND CustomerId IN (SELECT CustomerId FROM Invoice)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique first names of customers from the 'Customer' table who have made purchases, as indicated by their presence in the 'Invoice' table. The placeholder in the WHERE clause represents the country of the customers.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the invoice dates for customers from the 'Customer' table based on their first and last names. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  [PLACEHOLDER-TYPE:STRING] AND LastName  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the cities of customers who are supported by a specific employee. The placeholder in the WHERE clause represents the postal code of the customer.\",\n        \"virtual_table\": \"SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode \nFROM Customer \nJOIN Invoice ON Customer.CustomerId = Invoice.CustomerId \nWHERE Customer.Country = 'Germany';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.862",
        "c_low": "SELECT DISTINCT Address, City, State, PostalCode FROM Customer AS C JOIN Invoice AS I ON C.CustomerId = I.CustomerId WHERE C.Country = 'Germany';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique billing countries from the 'Invoice' table. The placeholder in the SELECT statement indicates that the query will return distinct values for the billing country associated with invoices.\",\n        \"virtual_table\": \"SELECT distinct(BillingCountry) FROM INVOICE\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the cities of customers who are supported by a specific employee. The placeholder in the WHERE clause represents the postal code of the customer.\",\n        \"virtual_table\": \"SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT Address FROM Customer WHERE Country = 'Germany' AND CustomerId IN (SELECT CustomerId FROM Invoice)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique first names of customers from the 'Customer' table who have made purchases, as indicated by their presence in the 'Invoice' table. The placeholder in the WHERE clause represents the country of the customers.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the invoice dates for customers from the 'Customer' table based on their first and last names. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  [PLACEHOLDER-TYPE:STRING] AND LastName  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode \nFROM Customer \nJOIN Invoice ON Customer.CustomerId = Invoice.CustomerId \nWHERE Customer.Country = 'Germany';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT DISTINCT Customer.Address, Customer.City, Customer.State, Customer.PostalCode \nFROM Customer \nJOIN Invoice ON Customer.CustomerId = Invoice.CustomerId \nWHERE Customer.Country = 'Germany';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique billing countries from the 'Invoice' table. The placeholder in the SELECT statement indicates that the query will return distinct values for the billing country associated with invoices.\",\n        \"virtual_table\": \"SELECT distinct(BillingCountry) FROM INVOICE\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT Address FROM Customer WHERE Country = 'Germany' AND CustomerId IN (SELECT CustomerId FROM Invoice)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique first names of customers from the 'Customer' table who have made purchases, as indicated by their presence in the 'Invoice' table. The placeholder in the WHERE clause represents the country of the customers.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the invoice dates for customers from the 'Customer' table based on their first and last names. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  [PLACEHOLDER-TYPE:STRING] AND LastName  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the cities of customers who are supported by a specific employee. The placeholder in the WHERE clause represents the postal code of the customer.\",\n        \"virtual_table\": \"SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode \nFROM Customer \nJOIN Invoice ON Customer.CustomerId = Invoice.CustomerId \nWHERE Customer.Country = 'Germany';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.869",
        "c_low": "SELECT e.FirstName, e.EmployeeId\nFROM Employee e\nJOIN Customer c ON e.EmployeeId = c.SupportRepId\nGROUP BY e.EmployeeId\nHAVING COUNT(c.CustomerId) >= 10;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT e.FirstName, e.EmployeeId\nFROM Employee e\nJOIN Customer c ON e.EmployeeId = c.SupportRepId\nGROUP BY e.EmployeeId\nHAVING COUNT(c.CustomerId) >= 10;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT E.FirstName, E.EmployeeId \nFROM Employee AS E \nJOIN Customer AS C ON E.EmployeeId = C.SupportRepId \nGROUP BY E.EmployeeId, E.FirstName \nHAVING COUNT(C.CustomerId) >= 10;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of employees who are assigned as support representatives for customers with a specific first name. The placeholder in the WHERE clause represents the customer's first name.\",\n        \"virtual_table\": \"SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT e.FirstName, e.EmployeeId\nFROM Employee e\nJOIN Customer c ON e.EmployeeId = c.SupportRepId\nGROUP BY e.EmployeeId\nHAVING COUNT(c.CustomerId) >= 10;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT E.FirstName, E.EmployeeId \nFROM Employee AS E \nJOIN Customer AS C ON E.EmployeeId = C.SupportRepId \nGROUP BY E.EmployeeId, E.FirstName \nHAVING COUNT(C.CustomerId) >= 10;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of employees who are assigned as support representatives for customers with a specific first name. The placeholder in the WHERE clause represents the customer's first name.\",\n        \"virtual_table\": \"SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT e.FirstName, e.EmployeeId\nFROM Employee e\nJOIN Customer c ON e.EmployeeId = c.SupportRepId\nGROUP BY e.EmployeeId\nHAVING COUNT(c.CustomerId) >= 10;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.870",
        "c_low": "SELECT E.FirstName, E.EmployeeId \nFROM Employee AS E \nJOIN Customer AS C ON E.EmployeeId = C.SupportRepId \nGROUP BY E.EmployeeId, E.FirstName \nHAVING COUNT(C.CustomerId) >= 10;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the cities of customers who are supported by a specific employee. The placeholder in the WHERE clause represents the postal code of the customer.\",\n        \"virtual_table\": \"SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT e.FirstName, e.EmployeeId AS SupportRepId\nFROM Employee e\nJOIN Customer c ON e.EmployeeId = c.SupportRepId\nGROUP BY e.EmployeeId\nHAVING COUNT(c.CustomerId) >= 10;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT E.FirstName, E.EmployeeId \nFROM Employee AS E \nJOIN Customer AS C ON E.EmployeeId = C.SupportRepId \nGROUP BY E.EmployeeId, E.FirstName \nHAVING COUNT(C.CustomerId) >= 10;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of employees who are assigned as support representatives for customers with a specific first name. The placeholder in the WHERE clause represents the customer's first name.\",\n        \"virtual_table\": \"SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT e.FirstName, e.EmployeeId AS SupportRepId\nFROM Employee e\nJOIN Customer c ON e.EmployeeId = c.SupportRepId\nGROUP BY e.EmployeeId\nHAVING COUNT(c.CustomerId) >= 10;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT E.FirstName, E.EmployeeId \nFROM Employee AS E \nJOIN Customer AS C ON E.EmployeeId = C.SupportRepId \nGROUP BY E.EmployeeId \nHAVING COUNT(C.CustomerId) >= 10;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of employees who are assigned as support representatives for customers with a specific first name. The placeholder in the WHERE clause represents the customer's first name.\",\n        \"virtual_table\": \"SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the cities of customers who are supported by a specific employee. The placeholder in the WHERE clause represents the postal code of the customer.\",\n        \"virtual_table\": \"SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT e.FirstName, e.EmployeeId AS SupportRepId\nFROM Employee e\nJOIN Customer c ON e.EmployeeId = c.SupportRepId\nGROUP BY e.EmployeeId\nHAVING COUNT(c.CustomerId) >= 10;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.871",
        "c_low": "SELECT e.LastName\nFROM Employee e\nJOIN Customer c ON e.EmployeeId = c.SupportRepId\nGROUP BY e.EmployeeId\nHAVING COUNT(c.CustomerId) <= 20;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT e.LastName\nFROM Employee e\nJOIN Customer c ON e.EmployeeId = c.SupportRepId\nGROUP BY e.EmployeeId\nHAVING COUNT(c.CustomerId) <= 20;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT E.LastName\nFROM Employee AS E\nJOIN Customer AS C ON E.EmployeeId = C.SupportRepId\nGROUP BY E.EmployeeId\nHAVING COUNT(C.CustomerId) <= 20;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of employees who are assigned as support representatives for customers with a specific first name. The placeholder in the WHERE clause represents the customer's first name.\",\n        \"virtual_table\": \"SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT e.LastName\nFROM Employee e\nJOIN Customer c ON e.EmployeeId = c.SupportRepId\nGROUP BY e.EmployeeId\nHAVING COUNT(c.CustomerId) <= 20;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT E.LastName\nFROM Employee AS E\nJOIN Customer AS C ON E.EmployeeId = C.SupportRepId\nGROUP BY E.LastName\nHAVING COUNT(C.CustomerId) <= 20;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of employees who are assigned as support representatives for customers with a specific first name. The placeholder in the WHERE clause represents the customer's first name.\",\n        \"virtual_table\": \"SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT e.LastName\nFROM Employee e\nJOIN Customer c ON e.EmployeeId = c.SupportRepId\nGROUP BY e.EmployeeId\nHAVING COUNT(c.CustomerId) <= 20;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.872",
        "c_low": "SELECT e.LastName\nFROM Employee e\nJOIN Customer c ON e.EmployeeId = c.SupportRepId\nGROUP BY e.EmployeeId\nHAVING COUNT(c.CustomerId) <= 20;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT e.LastName\nFROM Employee e\nJOIN Customer c ON e.EmployeeId = c.SupportRepId\nGROUP BY e.EmployeeId\nHAVING COUNT(c.CustomerId) <= 20;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT E.LastName \nFROM Employee AS E \nJOIN Customer AS C ON E.EmployeeId = C.SupportRepId \nGROUP BY E.EmployeeId \nHAVING COUNT(C.CustomerId) <= 20;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of employees who are assigned as support representatives for customers with a specific first name. The placeholder in the WHERE clause represents the customer's first name.\",\n        \"virtual_table\": \"SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT e.LastName\nFROM Employee e\nJOIN Customer c ON e.EmployeeId = c.SupportRepId\nGROUP BY e.EmployeeId\nHAVING COUNT(c.CustomerId) <= 20;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT E.LastName \nFROM Employee AS E \nJOIN Customer AS C ON E.EmployeeId = C.SupportRepId \nGROUP BY E.EmployeeId \nHAVING COUNT(C.CustomerId) <= 20;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of employees who are assigned as support representatives for customers with a specific first name. The placeholder in the WHERE clause represents the customer's first name.\",\n        \"virtual_table\": \"SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT e.LastName\nFROM Employee e\nJOIN Customer c ON e.EmployeeId = c.SupportRepId\nGROUP BY e.EmployeeId\nHAVING COUNT(c.CustomerId) <= 20;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.893",
        "c_low": "SELECT ap.Customer_Phone \nFROM Available_Policies ap \nJOIN Customers_Policies cp ON ap.Policy_ID = cp.Policy_ID \nJOIN Customers c ON cp.Customer_ID = c.Customer_ID \nWHERE ap.policy_type_code = 'Life Insurance';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of policies associated with a specific customer from the 'Customers' table. The placeholder in the WHERE clause represents the customer's name.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT ap.Customer_Phone \nFROM Available_Policies AS ap \nJOIN Customers_Policies AS cp ON ap.Policy_ID = cp.Policy_ID \nJOIN Services AS s ON cp.Policy_ID = s.Service_ID \nWHERE s.Service_name = 'Life Insurance';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of customers who have reported a first notification of loss associated with specific services. The placeholders in the WHERE clause represent the names of the services being queried.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  [PLACEHOLDER-TYPE:STRING] OR t3.service_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer names from the 'Customers' table who have associated policies in the 'Customers_Policies' table. The results are grouped by customer name and ordered by the number of policies each customer has, with a limit on the number of results returned based on a specified number placeholder.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT ap.Customer_Phone \nFROM Available_Policies AS ap \nJOIN Customers_Policies AS cp ON ap.Policy_ID = cp.Policy_ID \nJOIN Customers AS c ON cp.Customer_ID = c.Customer_ID \nWHERE ap.policy_type_code = 'Life Insurance';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves distinct policy type codes from the 'Available_Policies' table for a specific customer. The customer is identified by their name, which is determined by selecting the most frequently occurring customer name from the 'Customers' table. The placeholders in the query allow for dynamic input of the customer name and the limit for the number of customers to consider.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT ap.Customer_Phone \nFROM Available_Policies ap \nJOIN Customers_Policies cp ON ap.Policy_ID = cp.Policy_ID \nJOIN Services s ON cp.Policy_ID = s.Service_ID \nWHERE s.Service_name = 'Life Insurance';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT ap.Customer_Phone \nFROM Available_Policies ap \nJOIN Customers_Policies cp ON ap.Policy_ID = cp.Policy_ID \nJOIN First_Notification_of_Loss fnol ON cp.Customer_ID = fnol.Customer_ID AND cp.Policy_ID = fnol.Policy_ID \nJOIN Services s ON fnol.Service_ID = s.Service_ID \nWHERE s.Service_name = 'Life Insurance';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of policies associated with a specific customer from the 'Customers' table. The placeholder in the WHERE clause represents the customer's name.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer names from the 'Customers' table who have associated policies in the 'Customers_Policies' table. The results are grouped by customer name and ordered by the number of policies each customer has, with a limit on the number of results returned based on a specified number placeholder.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT ap.Customer_Phone \nFROM Available_Policies AS ap \nJOIN Customers_Policies AS cp ON ap.Policy_ID = cp.Policy_ID \nJOIN First_Notification_of_Loss AS fnol ON cp.Customer_ID = fnol.Customer_ID AND cp.Policy_ID = fnol.Policy_ID \nJOIN Services AS s ON fnol.Service_ID = s.Service_ID \nWHERE s.Service_name = 'Life Insurance';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of customers who have reported a first notification of loss associated with specific services. The placeholders in the WHERE clause represent the names of the services being queried.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  [PLACEHOLDER-TYPE:STRING] OR t3.service_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table retrieves distinct policy type codes from the 'Available_Policies' table for a specific customer. The customer is identified by their name, which is determined by selecting the most frequently occurring customer name from the 'Customers' table. The placeholders in the query allow for dynamic input of the customer name and the limit for the number of customers to consider.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n"
    },
    {
        "sample_id": "train.894",
        "c_low": "SELECT ap.Customer_Phone \nFROM Available_Policies ap \nJOIN Customers_Policies cp ON ap.Policy_ID = cp.Policy_ID \nJOIN Customers c ON cp.Customer_ID = c.Customer_ID \nWHERE ap.policy_type_code = 'Life Insurance';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of policies associated with a specific customer from the 'Customers' table. The placeholder in the WHERE clause represents the customer's name.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT ap.Customer_Phone \nFROM Available_Policies AS ap \nJOIN Customers_Policies AS cp ON ap.Policy_ID = cp.Policy_ID \nJOIN Customers AS c ON cp.Customer_ID = c.Customer_ID \nWHERE ap.policy_type_code = 'Life Insurance';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of customers who have reported a first notification of loss associated with specific services. The placeholders in the WHERE clause represent the names of the services being queried.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  [PLACEHOLDER-TYPE:STRING] OR t3.service_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer names from the 'Customers' table who have associated policies in the 'Customers_Policies' table. The results are grouped by customer name and ordered by the number of policies each customer has, with a limit on the number of results returned based on a specified number placeholder.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT ap.Customer_Phone \nFROM Available_Policies ap \nJOIN Customers_Policies cp ON ap.Policy_ID = cp.Policy_ID \nJOIN Customers c ON cp.Customer_ID = c.Customer_ID \nWHERE ap.policy_type_code = 'Life Insurance';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves distinct policy type codes from the 'Available_Policies' table for a specific customer. The customer is identified by their name, which is determined by selecting the most frequently occurring customer name from the 'Customers' table. The placeholders in the query allow for dynamic input of the customer name and the limit for the number of customers to consider.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT ap.Customer_Phone\nFROM Available_Policies ap\nJOIN Customers_Policies cp ON ap.Policy_ID = cp.Policy_ID\nJOIN Services s ON ap.policy_type_code = s.Service_ID\nWHERE s.Service_name = 'Life Insurance';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT ap.Customer_Phone \nFROM Available_Policies AS ap \nJOIN Customers_Policies AS cp ON ap.Policy_ID = cp.Policy_ID \nJOIN Customers AS c ON cp.Customer_ID = c.Customer_ID \nWHERE ap.policy_type_code = 'Life Insurance';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer names from the 'Customers' table who have associated policies in the 'Customers_Policies' table. The results are grouped by customer name and ordered by the number of policies each customer has, with a limit on the number of results returned based on a specified number placeholder.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of policies associated with a specific customer from the 'Customers' table. The placeholder in the WHERE clause represents the customer's name.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT ap.Customer_Phone \nFROM Available_Policies AS ap \nJOIN Customers_Policies AS cp ON ap.Policy_ID = cp.Policy_ID \nJOIN Customers AS c ON cp.Customer_ID = c.Customer_ID \nWHERE ap.policy_type_code = 'Life Insurance';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of customers who have reported a first notification of loss associated with specific services. The placeholders in the WHERE clause represent the names of the services being queried.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  [PLACEHOLDER-TYPE:STRING] OR t3.service_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table retrieves distinct policy type codes from the 'Available_Policies' table for a specific customer. The customer is identified by their name, which is determined by selecting the most frequently occurring customer name from the 'Customers' table. The placeholders in the query allow for dynamic input of the customer name and the limit for the number of customers to consider.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n"
    },
    {
        "sample_id": "train.895",
        "c_low": "SELECT policy_type_code, COUNT(*) as policy_count \nFROM Available_Policies AS ap \nJOIN Customers_Policies AS cp ON ap.Policy_ID = cp.Policy_ID \nGROUP BY policy_type_code \nORDER BY policy_count DESC \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of policies associated with a specific customer from the 'Customers' table. The placeholder in the WHERE clause represents the customer's name.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT policy_type_code, COUNT(*) as policy_count FROM Available_Policies GROUP BY policy_type_code ORDER BY policy_count DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a distinct list of policy types associated with a specific customer from the 'Customers', 'Customers_Policies', and 'Available_Policies' tables. The placeholder in the WHERE clause represents the name of the customer whose policies are being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer names from the 'Customers' table who have associated policies in the 'Customers_Policies' table. The results are grouped by customer name and ordered by the number of policies each customer has, with a limit on the number of results returned based on a specified number placeholder.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT policy_type_code, COUNT(*) as record_count \nFROM Available_Policies \nJOIN Customers_Policies ON Available_Policies.Policy_ID = Customers_Policies.Policy_ID \nGROUP BY policy_type_code \nORDER BY record_count DESC \nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves distinct policy type codes from the 'Available_Policies' table for a specific customer. The customer is identified by their name, which is determined by selecting the most frequently occurring customer name from the 'Customers' table. The placeholders in the query allow for dynamic input of the customer name and the limit for the number of customers to consider.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_1": "SELECT policy_type_code, COUNT(*) as record_count \nFROM Available_Policies \nJOIN Customers_Policies ON Available_Policies.Policy_ID = Customers_Policies.Policy_ID \nGROUP BY policy_type_code \nORDER BY record_count DESC \nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT policy_type_code, COUNT(*) as policy_count \nFROM Available_Policies \nJOIN Customers_Policies ON Available_Policies.Policy_ID = Customers_Policies.Policy_ID \nGROUP BY policy_type_code \nORDER BY policy_count DESC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of policies associated with a specific customer from the 'Customers' table. The placeholder in the WHERE clause represents the customer's name.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer names from the 'Customers' table who have associated policies in the 'Customers_Policies' table. The results are grouped by customer name and ordered by the number of policies each customer has, with a limit on the number of results returned based on a specified number placeholder.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT policy_type_code, COUNT(*) as record_count FROM Available_Policies GROUP BY policy_type_code ORDER BY record_count DESC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves distinct policy type codes from the 'Available_Policies' table for a specific customer. The customer is identified by their name, which is determined by selecting the most frequently occurring customer name from the 'Customers' table. The placeholders in the query allow for dynamic input of the customer name and the limit for the number of customers to consider.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of policy types associated with a specific customer from the 'Customers', 'Customers_Policies', and 'Available_Policies' tables. The placeholder in the WHERE clause represents the name of the customer whose policies are being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.896",
        "c_low": "SELECT policy_type_code, COUNT(*) as policy_count \nFROM Available_Policies \nGROUP BY policy_type_code \nORDER BY policy_count DESC \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of policies associated with a specific customer from the 'Customers' table. The placeholder in the WHERE clause represents the customer's name.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT policy_type_code, COUNT(*) as frequency FROM Available_Policies GROUP BY policy_type_code ORDER BY frequency DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a distinct list of policy types associated with a specific customer from the 'Customers', 'Customers_Policies', and 'Available_Policies' tables. The placeholder in the WHERE clause represents the name of the customer whose policies are being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer names from the 'Customers' table who have associated policies in the 'Customers_Policies' table. The results are grouped by customer name and ordered by the number of policies each customer has, with a limit on the number of results returned based on a specified number placeholder.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT policy_type_code, COUNT(*) as frequency FROM Available_Policies GROUP BY policy_type_code ORDER BY frequency DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves distinct policy type codes from the 'Available_Policies' table for a specific customer. The customer is identified by their name, which is determined by selecting the most frequently occurring customer name from the 'Customers' table. The placeholders in the query allow for dynamic input of the customer name and the limit for the number of customers to consider.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the opening and closing dates of policies associated with a specific customer from the 'Customers' and 'Customers_Policies' tables. The placeholder in the WHERE clause represents the name of the customer being queried.\",\n        \"virtual_table\": \"SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT policy_type_code, COUNT(*) as frequency\nFROM Available_Policies\nGROUP BY policy_type_code\nORDER BY frequency DESC\nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT policy_type_code, COUNT(*) as frequency FROM Available_Policies GROUP BY policy_type_code ORDER BY frequency DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer names from the 'Customers' table who have associated policies in the 'Customers_Policies' table. The results are grouped by customer name and ordered by the number of policies each customer has, with a limit on the number of results returned based on a specified number placeholder.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of policies associated with a specific customer from the 'Customers' table. The placeholder in the WHERE clause represents the customer's name.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the opening and closing dates of policies associated with a specific customer from the 'Customers' and 'Customers_Policies' tables. The placeholder in the WHERE clause represents the name of the customer being queried.\",\n        \"virtual_table\": \"SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT policy_type_code, COUNT(*) as frequency FROM Available_Policies GROUP BY policy_type_code ORDER BY frequency DESC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves distinct policy type codes from the 'Available_Policies' table for a specific customer. The customer is identified by their name, which is determined by selecting the most frequently occurring customer name from the 'Customers' table. The placeholders in the query allow for dynamic input of the customer name and the limit for the number of customers to consider.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of policy types associated with a specific customer from the 'Customers', 'Customers_Policies', and 'Available_Policies' tables. The placeholder in the WHERE clause represents the name of the customer whose policies are being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.897",
        "c_low": "SELECT ap.Customer_Phone\nFROM Available_Policies ap\nJOIN Customers_Policies cp ON ap.Policy_ID = cp.Policy_ID\nJOIN (SELECT policy_type_code, COUNT(*) as policy_count\n      FROM Available_Policies\n      JOIN Customers_Policies ON Available_Policies.Policy_ID = Customers_Policies.Policy_ID\n      GROUP BY policy_type_code\n      ORDER BY policy_count DESC\n      LIMIT 1) AS most_popular_policy ON ap.policy_type_code = most_popular_policy.policy_type_code;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of policies associated with a specific customer from the 'Customers' table. The placeholder in the WHERE clause represents the customer's name.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT ap.Customer_Phone \nFROM Available_Policies AS ap \nJOIN Customers_Policies AS cp ON ap.Policy_ID = cp.Policy_ID \nJOIN Customers AS c ON cp.Customer_ID = c.Customer_ID \nWHERE ap.policy_type_code = (\n    SELECT policy_type_code \n    FROM Available_Policies \n    JOIN Customers_Policies ON Available_Policies.Policy_ID = Customers_Policies.Policy_ID \n    GROUP BY policy_type_code \n    ORDER BY COUNT(*) DESC \n    LIMIT 1\n);",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a distinct list of policy types associated with a specific customer from the 'Customers', 'Customers_Policies', and 'Available_Policies' tables. The placeholder in the WHERE clause represents the name of the customer whose policies are being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer names from the 'Customers' table who have associated policies in the 'Customers_Policies' table. The results are grouped by customer name and ordered by the number of policies each customer has, with a limit on the number of results returned based on a specified number placeholder.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of customers who have reported a first notification of loss associated with specific services. The placeholders in the WHERE clause represent the names of the services being queried.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  [PLACEHOLDER-TYPE:STRING] OR t3.service_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT ap.Customer_Phone \nFROM Available_Policies AS ap \nJOIN Customers_Policies AS cp ON ap.Policy_ID = cp.Policy_ID \nJOIN Customers AS c ON cp.Customer_ID = c.Customer_ID \nWHERE ap.policy_type_code = \n    (SELECT policy_type_code \n     FROM Available_Policies \n     GROUP BY policy_type_code \n     ORDER BY COUNT(*) DESC \n     LIMIT 1);",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves distinct policy type codes from the 'Available_Policies' table for a specific customer. The customer is identified by their name, which is determined by selecting the most frequently occurring customer name from the 'Customers' table. The placeholders in the query allow for dynamic input of the customer name and the limit for the number of customers to consider.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT ap.Customer_Phone\nFROM Available_Policies ap\nJOIN Customers_Policies cp ON ap.Policy_ID = cp.Policy_ID\nJOIN (\n    SELECT policy_type_code, COUNT(*) as policy_count\n    FROM Available_Policies\n    JOIN Customers_Policies ON Available_Policies.Policy_ID = Customers_Policies.Policy_ID\n    GROUP BY policy_type_code\n    ORDER BY policy_count DESC\n    LIMIT 1\n) popular_policy ON ap.policy_type_code = popular_policy.policy_type_code;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT ap.Customer_Phone \nFROM Available_Policies AS ap \nJOIN Customers_Policies AS cp ON ap.Policy_ID = cp.Policy_ID \nJOIN Customers AS c ON cp.Customer_ID = c.Customer_ID \nWHERE ap.policy_type_code = (\n    SELECT policy_type_code \n    FROM Available_Policies \n    JOIN Customers_Policies ON Available_Policies.Policy_ID = Customers_Policies.Policy_ID \n    GROUP BY policy_type_code \n    ORDER BY COUNT(*) DESC \n    LIMIT 1\n)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer names from the 'Customers' table who have associated policies in the 'Customers_Policies' table. The results are grouped by customer name and ordered by the number of policies each customer has, with a limit on the number of results returned based on a specified number placeholder.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of policies associated with a specific customer from the 'Customers' table. The placeholder in the WHERE clause represents the customer's name.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT ap.Customer_Phone FROM Available_Policies AS ap JOIN Customers_Policies AS cp ON ap.Policy_ID = cp.Policy_ID JOIN Customers AS c ON cp.Customer_ID = c.Customer_ID WHERE ap.policy_type_code = (SELECT ap2.policy_type_code FROM Available_Policies AS ap2 JOIN Customers_Policies AS cp2 ON ap2.Policy_ID = cp2.Policy_ID JOIN Customers AS c2 ON cp2.Customer_ID = c2.Customer_ID GROUP BY ap2.policy_type_code ORDER BY COUNT(*) DESC LIMIT 1)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves distinct policy type codes from the 'Available_Policies' table for a specific customer. The customer is identified by their name, which is determined by selecting the most frequently occurring customer name from the 'Customers' table. The placeholders in the query allow for dynamic input of the customer name and the limit for the number of customers to consider.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of policy types associated with a specific customer from the 'Customers', 'Customers_Policies', and 'Available_Policies' tables. The placeholder in the WHERE clause represents the name of the customer whose policies are being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of customers who have reported a first notification of loss associated with specific services. The placeholders in the WHERE clause represent the names of the services being queried.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  [PLACEHOLDER-TYPE:STRING] OR t3.service_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.898",
        "c_low": "WITH PolicyCounts AS (\n    SELECT ap.policy_type_code, COUNT(cp.Policy_ID) AS policy_count\n    FROM Available_Policies ap\n    JOIN Customers_Policies cp ON ap.Policy_ID = cp.Policy_ID\n    GROUP BY ap.policy_type_code\n),\nMostCommonPolicy AS (\n    SELECT policy_type_code\n    FROM PolicyCounts\n    ORDER BY policy_count DESC\n    LIMIT 1\n)\nSELECT c.Customer_Phone\nFROM Customers c\nJOIN Customers_Policies cp ON c.Customer_ID = cp.Customer_ID\nJOIN Available_Policies ap ON cp.Policy_ID = ap.Policy_ID\nWHERE ap.policy_type_code = (SELECT policy_type_code FROM MostCommonPolicy);",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of policies associated with a specific customer from the 'Customers' table. The placeholder in the WHERE clause represents the customer's name.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT ap.Customer_Phone \nFROM Available_Policies AS ap \nJOIN Customers_Policies AS cp ON ap.Policy_ID = cp.Policy_ID \nJOIN Customers AS c ON cp.Customer_ID = c.Customer_ID \nWHERE ap.policy_type_code = (\n    SELECT policy_type_code \n    FROM Available_Policies \n    GROUP BY policy_type_code \n    ORDER BY COUNT(*) DESC \n    LIMIT 1\n);",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer names from the 'Customers' table who have associated policies in the 'Customers_Policies' table. The results are grouped by customer name and ordered by the number of policies each customer has, with a limit on the number of results returned based on a specified number placeholder.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of policy types associated with a specific customer from the 'Customers', 'Customers_Policies', and 'Available_Policies' tables. The placeholder in the WHERE clause represents the name of the customer whose policies are being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of customers who have reported a first notification of loss associated with specific services. The placeholders in the WHERE clause represent the names of the services being queried.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  [PLACEHOLDER-TYPE:STRING] OR t3.service_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT ap.Customer_Phone FROM Available_Policies ap JOIN Customers_Policies cp ON ap.Policy_ID = cp.Policy_ID JOIN Customers c ON cp.Customer_ID = c.Customer_ID WHERE ap.policy_type_code = (SELECT policy_type_code FROM Available_Policies GROUP BY policy_type_code ORDER BY COUNT(*) DESC LIMIT 1)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves distinct policy type codes from the 'Available_Policies' table for a specific customer. The customer is identified by their name, which is determined by selecting the most frequently occurring customer name from the 'Customers' table. The placeholders in the query allow for dynamic input of the customer name and the limit for the number of customers to consider.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT c.Customer_Phone\nFROM Customers c\nJOIN Customers_Policies cp ON c.Customer_ID = cp.Customer_ID\nJOIN Available_Policies ap ON cp.Policy_ID = ap.Policy_ID\nWHERE ap.policy_type_code = (\n    SELECT policy_type_code\n    FROM Available_Policies\n    GROUP BY policy_type_code\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n);",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT ap.Customer_Phone\nFROM Available_Policies ap\nJOIN Customers_Policies cp ON ap.Policy_ID = cp.Policy_ID\nJOIN Customers c ON cp.Customer_ID = c.Customer_ID\nWHERE ap.policy_type_code = (\n    SELECT policy_type_code\n    FROM Available_Policies\n    GROUP BY policy_type_code\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer names from the 'Customers' table who have associated policies in the 'Customers_Policies' table. The results are grouped by customer name and ordered by the number of policies each customer has, with a limit on the number of results returned based on a specified number placeholder.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of policies associated with a specific customer from the 'Customers' table. The placeholder in the WHERE clause represents the customer's name.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT t1.Customer_Phone FROM Customers AS t1 JOIN Customers_Policies AS t2 ON t1.Customer_ID = t2.Customer_ID JOIN Available_Policies AS t3 ON t2.Policy_ID = t3.Policy_ID WHERE t3.policy_type_code = (SELECT policy_type_code FROM Available_Policies GROUP BY policy_type_code ORDER BY COUNT(*) DESC LIMIT 1)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves distinct policy type codes from the 'Available_Policies' table for a specific customer. The customer is identified by their name, which is determined by selecting the most frequently occurring customer name from the 'Customers' table. The placeholders in the query allow for dynamic input of the customer name and the limit for the number of customers to consider.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of policy types associated with a specific customer from the 'Customers', 'Customers_Policies', and 'Available_Policies' tables. The placeholder in the WHERE clause represents the name of the customer whose policies are being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of customers who have reported a first notification of loss associated with specific services. The placeholders in the WHERE clause represent the names of the services being queried.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  [PLACEHOLDER-TYPE:STRING] OR t3.service_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.899",
        "c_low": "SELECT policy_type_code FROM Available_Policies WHERE Policy_ID IN (SELECT Policy_ID FROM Customers_Policies GROUP BY Policy_ID HAVING COUNT(DISTINCT Customer_ID) > 4);",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of policies associated with a specific customer from the 'Customers' table. The placeholder in the WHERE clause represents the customer's name.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id GROUP BY t3.policy_type_code HAVING COUNT(DISTINCT t1.customer_id) > 4;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a distinct list of policy types associated with a specific customer from the 'Customers', 'Customers_Policies', and 'Available_Policies' tables. The placeholder in the WHERE clause represents the name of the customer whose policies are being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer names from the 'Customers' table who have associated policies in the 'Customers_Policies' table. The results are grouped by customer name and ordered by the number of policies each customer has, with a limit on the number of results returned based on a specified number placeholder.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of customers who have reported a first notification of loss associated with specific services. The placeholders in the WHERE clause represent the names of the services being queried.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  [PLACEHOLDER-TYPE:STRING] OR t3.service_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT policy_type_code FROM Available_Policies WHERE Policy_ID IN (SELECT Policy_ID FROM Customers_Policies GROUP BY Policy_ID HAVING COUNT(DISTINCT Customer_ID) > 4)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves distinct policy type codes from the 'Available_Policies' table for a specific customer. The customer is identified by their name, which is determined by selecting the most frequently occurring customer name from the 'Customers' table. The placeholders in the query allow for dynamic input of the customer name and the limit for the number of customers to consider.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_1": "SELECT ap.policy_type_code\nFROM Available_Policies ap\nJOIN Customers_Policies cp ON ap.Policy_ID = cp.Policy_ID\nGROUP BY ap.policy_type_code\nHAVING COUNT(DISTINCT cp.Customer_ID) > 4;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT ap.policy_type_code FROM Available_Policies AS ap JOIN Customers_Policies AS cp ON ap.Policy_ID = cp.Policy_ID GROUP BY ap.policy_type_code HAVING COUNT(DISTINCT cp.Customer_ID) > 4;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of policies associated with a specific customer from the 'Customers' table. The placeholder in the WHERE clause represents the customer's name.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer names from the 'Customers' table who have associated policies in the 'Customers_Policies' table. The results are grouped by customer name and ordered by the number of policies each customer has, with a limit on the number of results returned based on a specified number placeholder.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT policy_type_code FROM Available_Policies WHERE Policy_ID IN (SELECT Policy_ID FROM Customers_Policies GROUP BY Policy_ID HAVING COUNT(DISTINCT Customer_ID) > 4)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves distinct policy type codes from the 'Available_Policies' table for a specific customer. The customer is identified by their name, which is determined by selecting the most frequently occurring customer name from the 'Customers' table. The placeholders in the query allow for dynamic input of the customer name and the limit for the number of customers to consider.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of policy types associated with a specific customer from the 'Customers', 'Customers_Policies', and 'Available_Policies' tables. The placeholder in the WHERE clause represents the name of the customer whose policies are being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of customers who have reported a first notification of loss associated with specific services. The placeholders in the WHERE clause represent the names of the services being queried.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  [PLACEHOLDER-TYPE:STRING] OR t3.service_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.900",
        "c_low": "SELECT policy_type_code FROM Available_Policies WHERE Policy_ID IN (SELECT Policy_ID FROM Customers_Policies GROUP BY Policy_ID HAVING COUNT(DISTINCT Customer_ID) > 4);",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of policies associated with a specific customer from the 'Customers' table. The placeholder in the WHERE clause represents the customer's name.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT policy_type_code FROM Available_Policies WHERE Policy_ID IN (SELECT Policy_ID FROM Customers_Policies GROUP BY Policy_ID HAVING COUNT(DISTINCT Customer_ID) > 4);",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a distinct list of policy types associated with a specific customer from the 'Customers', 'Customers_Policies', and 'Available_Policies' tables. The placeholder in the WHERE clause represents the name of the customer whose policies are being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer names from the 'Customers' table who have associated policies in the 'Customers_Policies' table. The results are grouped by customer name and ordered by the number of policies each customer has, with a limit on the number of results returned based on a specified number placeholder.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT policy_type_code FROM Available_Policies WHERE Policy_ID IN (SELECT Policy_ID FROM Customers_Policies GROUP BY Policy_ID HAVING COUNT(DISTINCT Customer_ID) > 4)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves distinct policy type codes from the 'Available_Policies' table for a specific customer. The customer is identified by their name, which is determined by selecting the most frequently occurring customer name from the 'Customers' table. The placeholders in the query allow for dynamic input of the customer name and the limit for the number of customers to consider.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_1": "SELECT ap.policy_type_code\nFROM Available_Policies ap\nJOIN Customers_Policies cp ON ap.Policy_ID = cp.Policy_ID\nGROUP BY ap.policy_type_code\nHAVING COUNT(DISTINCT cp.Customer_ID) > 4;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT policy_type_code FROM Available_Policies WHERE Policy_ID IN (SELECT Policy_ID FROM Customers_Policies GROUP BY Policy_ID HAVING COUNT(Customer_ID) > 4);",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of policies associated with a specific customer from the 'Customers' table. The placeholder in the WHERE clause represents the customer's name.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer names from the 'Customers' table who have associated policies in the 'Customers_Policies' table. The results are grouped by customer name and ordered by the number of policies each customer has, with a limit on the number of results returned based on a specified number placeholder.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT policy_type_code FROM Available_Policies WHERE Policy_ID IN (SELECT Policy_ID FROM Customers_Policies GROUP BY Policy_ID HAVING COUNT(DISTINCT Customer_ID) > 4)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves distinct policy type codes from the 'Available_Policies' table for a specific customer. The customer is identified by their name, which is determined by selecting the most frequently occurring customer name from the 'Customers' table. The placeholders in the query allow for dynamic input of the customer name and the limit for the number of customers to consider.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of policy types associated with a specific customer from the 'Customers', 'Customers_Policies', and 'Available_Policies' tables. The placeholder in the WHERE clause represents the name of the customer whose policies are being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.930",
        "c_low": "SELECT Customer_ID FROM Customers ORDER BY Customer_ID;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Customer_ID FROM Customers ORDER BY Customer_ID ASC",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer IDs and their corresponding names from the 'Customers' table, sorted in ascending order by customer ID. The placeholders represent the customer identifiers and names.\",\n        \"virtual_table\": \"SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC\"\n    }\n}\n",
        "c_high": "SELECT Customer_ID FROM Customers ORDER BY Customer_ID;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT Customer_ID FROM Customers ORDER BY Customer_ID ASC",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer IDs and their corresponding names from the 'Customers' table, sorted in ascending order by customer ID. The placeholders represent the customer identifiers and names.\",\n        \"virtual_table\": \"SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC\"\n    }\n}\n",
        "t_2": "SELECT Customer_ID FROM Customers ORDER BY Customer_ID;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT Customer_ID FROM Customers ORDER BY Customer_ID;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.946",
        "c_low": "SELECT name, Trade_Name FROM medicine WHERE FDA_approved = 'yes';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT name, Trade_Name FROM medicine WHERE FDA_approved = 'yes';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes that interact with a specific medicine, filtered by the medicine's name and the type of interaction. The placeholders in the WHERE clause represent the medicine's name and the interaction type.\",\n        \"virtual_table\": \"SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the occurrences of each interaction type and orders them in descending order, allowing the user to specify a limit on the number of results returned.\",\n        \"virtual_table\": \"SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the types of interactions between a specific medicine and enzyme. It retrieves the interaction type from the 'medicine_enzyme_interaction' table by joining it with the 'medicine' and 'enzyme' tables based on their respective identifiers. The placeholders in the WHERE clause represent the names of the enzyme and the medicine involved in the interaction.\",\n        \"virtual_table\": \"SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT name, Trade_Name FROM medicine WHERE FDA_approved = 'yes';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique identifiers and trade names of medicines that are involved in interactions with enzymes, filtered to include only those medicines that have interactions with a specified minimum count. The placeholder in the HAVING clause represents the minimum number of interactions required.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the unique identifiers and names of medicines from the 'medicine' table that are involved in interactions with enzymes, as indicated in the 'medicine_enzyme_interaction' table. The placeholder in the HAVING clause represents the minimum number of interactions required for the medicines to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a distinct list of enzyme names, their geographical locations, and the products they produce, specifically for those enzymes that interact with medicines in a certain way. The placeholder in the WHERE clause represents the type of interaction being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT name, Trade_Name FROM medicine WHERE FDA_approved = 'yes';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the occurrences of each interaction type and orders them in descending order, allowing the user to specify a limit on the number of results returned.\",\n        \"virtual_table\": \"SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT name, Trade_Name FROM medicine WHERE FDA_approved = 'yes';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique identifiers and trade names of medicines that are involved in interactions with enzymes, filtered to include only those medicines that have interactions with a specified minimum count. The placeholder in the HAVING clause represents the minimum number of interactions required.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the unique identifiers and names of medicines from the 'medicine' table that are involved in interactions with enzymes, as indicated in the 'medicine_enzyme_interaction' table. The placeholder in the HAVING clause represents the minimum number of interactions required for the medicines to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a distinct list of enzyme names, their geographical locations, and the products they produce, specifically for those enzymes that interact with medicines in a certain way. The placeholder in the WHERE clause represents the type of interaction being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT name, Trade_Name FROM medicine WHERE FDA_approved = 'yes';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes that interact with a specific medicine, filtered by the medicine's name and the type of interaction. The placeholders in the WHERE clause represent the medicine's name and the interaction type.\",\n        \"virtual_table\": \"SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the types of interactions between a specific medicine and enzyme. It retrieves the interaction type from the 'medicine_enzyme_interaction' table by joining it with the 'medicine' and 'enzyme' tables based on their respective identifiers. The placeholders in the WHERE clause represent the names of the enzyme and the medicine involved in the interaction.\",\n        \"virtual_table\": \"SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.951",
        "c_low": "SELECT m.id, m.name, m.FDA_approved\nFROM medicine m\nJOIN medicine_enzyme_interaction mei ON m.id = mei.medicine_id\nGROUP BY m.id, m.name, m.FDA_approved\nORDER BY COUNT(mei.enzyme_id) DESC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes from the 'enzyme' table that produce a specific product. The placeholder in the WHERE clause represents the product that should not be associated with the enzymes.\",\n        \"virtual_table\": \"SELECT name FROM enzyme WHERE product != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT m.id, m.name, m.FDA_approved\nFROM medicine AS m\nJOIN medicine_enzyme_interaction AS mei ON m.id = mei.medicine_id\nGROUP BY m.id, m.name, m.FDA_approved\nORDER BY COUNT(mei.enzyme_id) DESC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the occurrences of each interaction type and orders them in descending order, allowing the user to specify a limit on the number of results returned.\",\n        \"virtual_table\": \"SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of enzymes that interact with a specific medicine, filtered by the medicine's name and the type of interaction. The placeholders in the WHERE clause represent the medicine's name and the interaction type.\",\n        \"virtual_table\": \"SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the types of interactions between a specific medicine and enzyme. It retrieves the interaction type from the 'medicine_enzyme_interaction' table by joining it with the 'medicine' and 'enzyme' tables based on their respective identifiers. The placeholders in the WHERE clause represent the names of the enzyme and the medicine involved in the interaction.\",\n        \"virtual_table\": \"SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT T1.id, T1.name, T1.FDA_approved \nFROM medicine AS T1 \nJOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id \nGROUP BY T1.id \nORDER BY COUNT(T2.enzyme_id) DESC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique identifiers and trade names of medicines that are involved in interactions with enzymes, filtered to include only those medicines that have interactions with a specified minimum count. The placeholder in the HAVING clause represents the minimum number of interactions required.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of enzyme names, their geographical locations, and the products they produce, specifically for those enzymes that interact with medicines in a certain way. The placeholder in the WHERE clause represents the type of interaction being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the unique identifiers and names of medicines from the 'medicine' table that are involved in interactions with enzymes, as indicated in the 'medicine_enzyme_interaction' table. The placeholder in the HAVING clause represents the minimum number of interactions required for the medicines to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT m.id, m.name, m.FDA_approved\nFROM medicine m\nJOIN medicine_enzyme_interaction mei ON m.id = mei.medicine_id\nGROUP BY m.id, m.name, m.FDA_approved\nORDER BY COUNT(mei.enzyme_id) DESC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the occurrences of each interaction type and orders them in descending order, allowing the user to specify a limit on the number of results returned.\",\n        \"virtual_table\": \"SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the products produced by enzymes, their chromosome locations, and their association with porphyria disorders from the 'enzyme' table, filtered by a specific geographical location. The placeholder in the WHERE clause represents the location of the enzyme's activity.\",\n        \"virtual_table\": \"SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of enzymes from the 'enzyme' table that produce a specific product. The placeholder in the WHERE clause represents the product that should not be associated with the enzymes.\",\n        \"virtual_table\": \"SELECT name FROM enzyme WHERE product != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT T1.id, T1.name, T1.FDA_approved \nFROM medicine AS T1 \nJOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id \nGROUP BY T1.id \nORDER BY COUNT(T2.enzyme_id) DESC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique identifiers and trade names of medicines that are involved in interactions with enzymes, filtered to include only those medicines that have interactions with a specified minimum count. The placeholder in the HAVING clause represents the minimum number of interactions required.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of enzyme names, their geographical locations, and the products they produce, specifically for those enzymes that interact with medicines in a certain way. The placeholder in the WHERE clause represents the type of interaction being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the unique identifiers and names of medicines from the 'medicine' table that are involved in interactions with enzymes, as indicated in the 'medicine_enzyme_interaction' table. The placeholder in the HAVING clause represents the minimum number of interactions required for the medicines to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT m.id, m.name, m.FDA_approved\nFROM medicine AS m\nJOIN medicine_enzyme_interaction AS mei ON m.id = mei.medicine_id\nGROUP BY m.id, m.name, m.FDA_approved\nORDER BY COUNT(mei.enzyme_id) DESC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes that interact with a specific medicine, filtered by the medicine's name and the type of interaction. The placeholders in the WHERE clause represent the medicine's name and the interaction type.\",\n        \"virtual_table\": \"SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the types of interactions between a specific medicine and enzyme. It retrieves the interaction type from the 'medicine_enzyme_interaction' table by joining it with the 'medicine' and 'enzyme' tables based on their respective identifiers. The placeholders in the WHERE clause represent the names of the enzyme and the medicine involved in the interaction.\",\n        \"virtual_table\": \"SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.952",
        "c_low": "SELECT m.id, m.name, m.FDA_approved\nFROM medicine m\nJOIN medicine_enzyme_interaction mei ON m.id = mei.medicine_id\nGROUP BY m.id, m.name, m.FDA_approved\nORDER BY COUNT(mei.enzyme_id) DESC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes from the 'enzyme' table that produce a specific product. The placeholder in the WHERE clause represents the product that should not be associated with the enzymes.\",\n        \"virtual_table\": \"SELECT name FROM enzyme WHERE product != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT m.id, m.name, m.FDA_approved\nFROM medicine AS m\nJOIN medicine_enzyme_interaction AS mei ON m.id = mei.medicine_id\nGROUP BY m.id, m.name, m.FDA_approved\nORDER BY COUNT(mei.enzyme_id) DESC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the occurrences of each interaction type and orders them in descending order, allowing the user to specify a limit on the number of results returned.\",\n        \"virtual_table\": \"SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of enzymes that interact with a specific medicine, filtered by the medicine's name and the type of interaction. The placeholders in the WHERE clause represent the medicine's name and the interaction type.\",\n        \"virtual_table\": \"SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the types of interactions between a specific medicine and enzyme. It retrieves the interaction type from the 'medicine_enzyme_interaction' table by joining it with the 'medicine' and 'enzyme' tables based on their respective identifiers. The placeholders in the WHERE clause represent the names of the enzyme and the medicine involved in the interaction.\",\n        \"virtual_table\": \"SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT T1.id, T1.name, T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id ORDER BY COUNT(T2.enzyme_id) DESC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique identifiers and trade names of medicines that are involved in interactions with enzymes, filtered to include only those medicines that have interactions with a specified minimum count. The placeholder in the HAVING clause represents the minimum number of interactions required.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the unique identifiers and names of medicines from the 'medicine' table that are involved in interactions with enzymes, as indicated in the 'medicine_enzyme_interaction' table. The placeholder in the HAVING clause represents the minimum number of interactions required for the medicines to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a distinct list of enzyme names, their geographical locations, and the products they produce, specifically for those enzymes that interact with medicines in a certain way. The placeholder in the WHERE clause represents the type of interaction being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT m.id, m.name, m.FDA_approved \nFROM medicine m \nJOIN (\n    SELECT medicine_id, COUNT(*) as interaction_count \n    FROM medicine_enzyme_interaction \n    GROUP BY medicine_id \n) AS interaction_counts ON m.id = interaction_counts.medicine_id \nORDER BY interaction_count DESC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the occurrences of each interaction type and orders them in descending order, allowing the user to specify a limit on the number of results returned.\",\n        \"virtual_table\": \"SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the products produced by enzymes, their chromosome locations, and their association with porphyria disorders from the 'enzyme' table, filtered by a specific geographical location. The placeholder in the WHERE clause represents the location of the enzyme's activity.\",\n        \"virtual_table\": \"SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of enzymes from the 'enzyme' table that produce a specific product. The placeholder in the WHERE clause represents the product that should not be associated with the enzymes.\",\n        \"virtual_table\": \"SELECT name FROM enzyme WHERE product != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT T1.id, T1.name, T1.FDA_approved \nFROM medicine AS T1 \nJOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id \nGROUP BY T1.id \nORDER BY COUNT(T2.enzyme_id) DESC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique identifiers and trade names of medicines that are involved in interactions with enzymes, filtered to include only those medicines that have interactions with a specified minimum count. The placeholder in the HAVING clause represents the minimum number of interactions required.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the unique identifiers and names of medicines from the 'medicine' table that are involved in interactions with enzymes, as indicated in the 'medicine_enzyme_interaction' table. The placeholder in the HAVING clause represents the minimum number of interactions required for the medicines to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a distinct list of enzyme names, their geographical locations, and the products they produce, specifically for those enzymes that interact with medicines in a certain way. The placeholder in the WHERE clause represents the type of interaction being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT m.id, m.name, m.FDA_approved\nFROM medicine AS m\nJOIN medicine_enzyme_interaction AS mei ON m.id = mei.medicine_id\nGROUP BY m.id, m.name, m.FDA_approved\nORDER BY COUNT(mei.enzyme_id) DESC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes that interact with a specific medicine, filtered by the medicine's name and the type of interaction. The placeholders in the WHERE clause represent the medicine's name and the interaction type.\",\n        \"virtual_table\": \"SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the types of interactions between a specific medicine and enzyme. It retrieves the interaction type from the 'medicine_enzyme_interaction' table by joining it with the 'medicine' and 'enzyme' tables based on their respective identifiers. The placeholders in the WHERE clause represent the names of the enzyme and the medicine involved in the interaction.\",\n        \"virtual_table\": \"SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.953",
        "c_low": "SELECT e.id, e.name \nFROM enzyme e \nJOIN medicine_enzyme_interaction mei ON e.id = mei.enzyme_id \nWHERE mei.interaction_type = 'activator' \nGROUP BY e.id, e.name \nORDER BY COUNT(mei.medicine_id) DESC \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes from the 'enzyme' table that produce a specific product. The placeholder in the WHERE clause represents the product that should not be associated with the enzymes.\",\n        \"virtual_table\": \"SELECT name FROM enzyme WHERE product != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the total count of enzymes recorded in the 'enzyme' table. It does not filter or specify any conditions, thus returning the overall number of entries present.\",\n        \"virtual_table\": \"SELECT count(*) FROM enzyme\"\n    }\n}\n",
        "c_mid": "SELECT enzyme.id, enzyme.name \nFROM enzyme \nJOIN medicine_enzyme_interaction ON enzyme.id = medicine_enzyme_interaction.enzyme_id \nWHERE medicine_enzyme_interaction.interaction_type = 'activator' \nGROUP BY enzyme.id, enzyme.name \nORDER BY COUNT(medicine_enzyme_interaction.medicine_id) DESC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes that interact with a specific medicine, filtered by the medicine's name and the type of interaction. The placeholders in the WHERE clause represent the medicine's name and the interaction type.\",\n        \"virtual_table\": \"SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the occurrences of each interaction type and orders them in descending order, allowing the user to specify a limit on the number of results returned.\",\n        \"virtual_table\": \"SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the types of interactions between a specific medicine and enzyme. It retrieves the interaction type from the 'medicine_enzyme_interaction' table by joining it with the 'medicine' and 'enzyme' tables based on their respective identifiers. The placeholders in the WHERE clause represent the names of the enzyme and the medicine involved in the interaction.\",\n        \"virtual_table\": \"SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT T1.id, T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id = T1.id WHERE T2.interaction_type = 'activator' GROUP BY T1.id ORDER BY COUNT(T2.medicine_id) DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a distinct list of enzyme names, their geographical locations, and the products they produce, specifically for those enzymes that interact with medicines in a certain way. The placeholder in the WHERE clause represents the type of interaction being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique identifiers and trade names of medicines that are involved in interactions with enzymes, filtered to include only those medicines that have interactions with a specified minimum count. The placeholder in the HAVING clause represents the minimum number of interactions required.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the unique identifiers and names of medicines from the 'medicine' table that are involved in interactions with enzymes, as indicated in the 'medicine_enzyme_interaction' table. The placeholder in the HAVING clause represents the minimum number of interactions required for the medicines to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT e.id, e.name\nFROM enzyme e\nJOIN medicine_enzyme_interaction mei ON e.id = mei.enzyme_id\nWHERE mei.interaction_type = 'activator'\nGROUP BY e.id, e.name\nORDER BY COUNT(mei.medicine_id) DESC\nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the occurrences of each interaction type and orders them in descending order, allowing the user to specify a limit on the number of results returned.\",\n        \"virtual_table\": \"SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the products produced by enzymes, their chromosome locations, and their association with porphyria disorders from the 'enzyme' table, filtered by a specific geographical location. The placeholder in the WHERE clause represents the location of the enzyme's activity.\",\n        \"virtual_table\": \"SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of enzymes from the 'enzyme' table that produce a specific product. The placeholder in the WHERE clause represents the product that should not be associated with the enzymes.\",\n        \"virtual_table\": \"SELECT name FROM enzyme WHERE product != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT T1.id, T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id = T1.id WHERE T2.interaction_type = 'activator' GROUP BY T1.id ORDER BY COUNT(T2.medicine_id) DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a distinct list of enzyme names, their geographical locations, and the products they produce, specifically for those enzymes that interact with medicines in a certain way. The placeholder in the WHERE clause represents the type of interaction being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique identifiers and trade names of medicines that are involved in interactions with enzymes, filtered to include only those medicines that have interactions with a specified minimum count. The placeholder in the HAVING clause represents the minimum number of interactions required.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the unique identifiers and names of medicines from the 'medicine' table that are involved in interactions with enzymes, as indicated in the 'medicine_enzyme_interaction' table. The placeholder in the HAVING clause represents the minimum number of interactions required for the medicines to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT enzyme.id, enzyme.name \nFROM enzyme \nJOIN medicine_enzyme_interaction ON enzyme.id = medicine_enzyme_interaction.enzyme_id \nWHERE medicine_enzyme_interaction.interaction_type = 'activator' \nGROUP BY enzyme.id, enzyme.name \nORDER BY COUNT(medicine_enzyme_interaction.medicine_id) DESC \nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes that interact with a specific medicine, filtered by the medicine's name and the type of interaction. The placeholders in the WHERE clause represent the medicine's name and the interaction type.\",\n        \"virtual_table\": \"SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the types of interactions between a specific medicine and enzyme. It retrieves the interaction type from the 'medicine_enzyme_interaction' table by joining it with the 'medicine' and 'enzyme' tables based on their respective identifiers. The placeholders in the WHERE clause represent the names of the enzyme and the medicine involved in the interaction.\",\n        \"virtual_table\": \"SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.954",
        "c_low": "SELECT e.id, e.name\nFROM enzyme e\nJOIN medicine_enzyme_interaction mei ON e.id = mei.enzyme_id\nWHERE mei.interaction_type = 'activator'\nGROUP BY e.id, e.name\nORDER BY COUNT(mei.medicine_id) DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes from the 'enzyme' table that produce a specific product. The placeholder in the WHERE clause represents the product that should not be associated with the enzymes.\",\n        \"virtual_table\": \"SELECT name FROM enzyme WHERE product != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT enzyme.id, enzyme.name \nFROM enzyme \nJOIN medicine_enzyme_interaction ON enzyme.id = medicine_enzyme_interaction.enzyme_id \nWHERE medicine_enzyme_interaction.interaction_type = 'activator' \nGROUP BY enzyme.id, enzyme.name \nORDER BY COUNT(medicine_enzyme_interaction.medicine_id) DESC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes that interact with a specific medicine, filtered by the medicine's name and the type of interaction. The placeholders in the WHERE clause represent the medicine's name and the interaction type.\",\n        \"virtual_table\": \"SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the occurrences of each interaction type and orders them in descending order, allowing the user to specify a limit on the number of results returned.\",\n        \"virtual_table\": \"SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the types of interactions between a specific medicine and enzyme. It retrieves the interaction type from the 'medicine_enzyme_interaction' table by joining it with the 'medicine' and 'enzyme' tables based on their respective identifiers. The placeholders in the WHERE clause represent the names of the enzyme and the medicine involved in the interaction.\",\n        \"virtual_table\": \"SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT T1.id, T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id = T1.id GROUP BY T1.id ORDER BY COUNT(T2.medicine_id) DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a distinct list of enzyme names, their geographical locations, and the products they produce, specifically for those enzymes that interact with medicines in a certain way. The placeholder in the WHERE clause represents the type of interaction being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique identifiers and trade names of medicines that are involved in interactions with enzymes, filtered to include only those medicines that have interactions with a specified minimum count. The placeholder in the HAVING clause represents the minimum number of interactions required.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the unique identifiers and names of medicines from the 'medicine' table that are involved in interactions with enzymes, as indicated in the 'medicine_enzyme_interaction' table. The placeholder in the HAVING clause represents the minimum number of interactions required for the medicines to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT e.id, e.name\nFROM enzyme e\nJOIN medicine_enzyme_interaction mei ON e.id = mei.enzyme_id\nWHERE mei.interaction_type = 'activator'\nGROUP BY e.id, e.name\nORDER BY COUNT(mei.medicine_id) DESC\nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the occurrences of each interaction type and orders them in descending order, allowing the user to specify a limit on the number of results returned.\",\n        \"virtual_table\": \"SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the products produced by enzymes, their chromosome locations, and their association with porphyria disorders from the 'enzyme' table, filtered by a specific geographical location. The placeholder in the WHERE clause represents the location of the enzyme's activity.\",\n        \"virtual_table\": \"SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of enzymes from the 'enzyme' table that produce a specific product. The placeholder in the WHERE clause represents the product that should not be associated with the enzymes.\",\n        \"virtual_table\": \"SELECT name FROM enzyme WHERE product != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT T1.id, T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id = T1.id GROUP BY T1.id ORDER BY COUNT(T2.medicine_id) DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a distinct list of enzyme names, their geographical locations, and the products they produce, specifically for those enzymes that interact with medicines in a certain way. The placeholder in the WHERE clause represents the type of interaction being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique identifiers and trade names of medicines that are involved in interactions with enzymes, filtered to include only those medicines that have interactions with a specified minimum count. The placeholder in the HAVING clause represents the minimum number of interactions required.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the unique identifiers and names of medicines from the 'medicine' table that are involved in interactions with enzymes, as indicated in the 'medicine_enzyme_interaction' table. The placeholder in the HAVING clause represents the minimum number of interactions required for the medicines to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT enzyme.id, enzyme.name FROM enzyme JOIN medicine_enzyme_interaction ON enzyme.id = medicine_enzyme_interaction.enzyme_id GROUP BY enzyme.id ORDER BY COUNT(medicine_enzyme_interaction.medicine_id) DESC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes that interact with a specific medicine, filtered by the medicine's name and the type of interaction. The placeholders in the WHERE clause represent the medicine's name and the interaction type.\",\n        \"virtual_table\": \"SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the types of interactions between a specific medicine and enzyme. It retrieves the interaction type from the 'medicine_enzyme_interaction' table by joining it with the 'medicine' and 'enzyme' tables based on their respective identifiers. The placeholders in the WHERE clause represent the names of the enzyme and the medicine involved in the interaction.\",\n        \"virtual_table\": \"SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.958",
        "c_low": "SELECT interaction_type, COUNT(*) as type_count \nFROM medicine_enzyme_interaction \nGROUP BY interaction_type \nORDER BY type_count DESC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes from the 'enzyme' table that produce a specific product. The placeholder in the WHERE clause represents the product that should not be associated with the enzymes.\",\n        \"virtual_table\": \"SELECT name FROM enzyme WHERE product != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the total count of enzymes recorded in the 'enzyme' table. It does not filter or specify any conditions, thus returning the overall number of entries present.\",\n        \"virtual_table\": \"SELECT count(*) FROM enzyme\"\n    }\n}\n",
        "c_mid": "SELECT interaction_type, COUNT(*) as interaction_count FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY interaction_count DESC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the occurrences of each interaction type and orders them in descending order, allowing the user to specify a limit on the number of results returned.\",\n        \"virtual_table\": \"SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of enzymes that interact with a specific medicine, filtered by the medicine's name and the type of interaction. The placeholders in the WHERE clause represent the medicine's name and the interaction type.\",\n        \"virtual_table\": \"SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the types of interactions between a specific medicine and enzyme. It retrieves the interaction type from the 'medicine_enzyme_interaction' table by joining it with the 'medicine' and 'enzyme' tables based on their respective identifiers. The placeholders in the WHERE clause represent the names of the enzyme and the medicine involved in the interaction.\",\n        \"virtual_table\": \"SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT interaction_type, COUNT(*) as interaction_count FROM medicine_enzyme_interaction GROUP BY interaction_type",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a distinct list of enzyme names, their geographical locations, and the products they produce, specifically for those enzymes that interact with medicines in a certain way. The placeholder in the WHERE clause represents the type of interaction being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the unique identifiers and names of medicines from the 'medicine' table that are involved in interactions with enzymes, as indicated in the 'medicine_enzyme_interaction' table. The placeholder in the HAVING clause represents the minimum number of interactions required for the medicines to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique identifiers and trade names of medicines that are involved in interactions with enzymes, filtered to include only those medicines that have interactions with a specified minimum count. The placeholder in the HAVING clause represents the minimum number of interactions required.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT interaction_type, COUNT(*) as interaction_count FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY interaction_count DESC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the occurrences of each interaction type and orders them in descending order, allowing the user to specify a limit on the number of results returned.\",\n        \"virtual_table\": \"SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the products produced by enzymes, their chromosome locations, and their association with porphyria disorders from the 'enzyme' table, filtered by a specific geographical location. The placeholder in the WHERE clause represents the location of the enzyme's activity.\",\n        \"virtual_table\": \"SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of enzymes from the 'enzyme' table that produce a specific product. The placeholder in the WHERE clause represents the product that should not be associated with the enzymes.\",\n        \"virtual_table\": \"SELECT name FROM enzyme WHERE product != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT interaction_type, COUNT(*) as interaction_count FROM medicine_enzyme_interaction GROUP BY interaction_type",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a distinct list of enzyme names, their geographical locations, and the products they produce, specifically for those enzymes that interact with medicines in a certain way. The placeholder in the WHERE clause represents the type of interaction being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the unique identifiers and names of medicines from the 'medicine' table that are involved in interactions with enzymes, as indicated in the 'medicine_enzyme_interaction' table. The placeholder in the HAVING clause represents the minimum number of interactions required for the medicines to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique identifiers and trade names of medicines that are involved in interactions with enzymes, filtered to include only those medicines that have interactions with a specified minimum count. The placeholder in the HAVING clause represents the minimum number of interactions required.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT interaction_type, COUNT(*) as count FROM medicine_enzyme_interaction GROUP BY interaction_type",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes that interact with a specific medicine, filtered by the medicine's name and the type of interaction. The placeholders in the WHERE clause represent the medicine's name and the interaction type.\",\n        \"virtual_table\": \"SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the types of interactions between a specific medicine and enzyme. It retrieves the interaction type from the 'medicine_enzyme_interaction' table by joining it with the 'medicine' and 'enzyme' tables based on their respective identifiers. The placeholders in the WHERE clause represent the names of the enzyme and the medicine involved in the interaction.\",\n        \"virtual_table\": \"SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.966",
        "c_low": "SELECT e.name, e.Location, e.Product \nFROM enzyme e \nJOIN medicine_enzyme_interaction mei ON e.id = mei.enzyme_id \nWHERE mei.interaction_type = 'inhibitor';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes from the 'enzyme' table that produce a specific product. The placeholder in the WHERE clause represents the product that should not be associated with the enzymes.\",\n        \"virtual_table\": \"SELECT name FROM enzyme WHERE product != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT T1.name, T1.Location, T1.Product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id WHERE T2.interaction_type = 'inhibitor'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes that interact with a specific medicine, filtered by the medicine's name and the type of interaction. The placeholders in the WHERE clause represent the medicine's name and the interaction type.\",\n        \"virtual_table\": \"SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the products produced by enzymes, their chromosome locations, and their association with porphyria disorders from the 'enzyme' table, filtered by a specific geographical location. The placeholder in the WHERE clause represents the location of the enzyme's activity.\",\n        \"virtual_table\": \"SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the occurrences of each interaction type and orders them in descending order, allowing the user to specify a limit on the number of results returned.\",\n        \"virtual_table\": \"SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT T1.name, T1.Location, T1.Product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id = T1.id WHERE T2.interaction_type = 'inhibitor'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a distinct list of enzyme names, their geographical locations, and the products they produce, specifically for those enzymes that interact with medicines in a certain way. The placeholder in the WHERE clause represents the type of interaction being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique identifiers and trade names of medicines that are involved in interactions with enzymes, filtered to include only those medicines that have interactions with a specified minimum count. The placeholder in the HAVING clause represents the minimum number of interactions required.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the unique identifiers and names of medicines from the 'medicine' table that are involved in interactions with enzymes, as indicated in the 'medicine_enzyme_interaction' table. The placeholder in the HAVING clause represents the minimum number of interactions required for the medicines to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT e.name, e.Location, e.Product \nFROM enzyme e \nJOIN medicine_enzyme_interaction mei ON e.id = mei.enzyme_id \nWHERE mei.interaction_type = 'inhibitor';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the products produced by enzymes, their chromosome locations, and their association with porphyria disorders from the 'enzyme' table, filtered by a specific geographical location. The placeholder in the WHERE clause represents the location of the enzyme's activity.\",\n        \"virtual_table\": \"SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of enzymes from the 'enzyme' table that produce a specific product. The placeholder in the WHERE clause represents the product that should not be associated with the enzymes.\",\n        \"virtual_table\": \"SELECT name FROM enzyme WHERE product != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the occurrences of each interaction type and orders them in descending order, allowing the user to specify a limit on the number of results returned.\",\n        \"virtual_table\": \"SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT T1.name, T1.Location, T1.Product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id = T1.id WHERE T2.interaction_type = 'inhibitor'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a distinct list of enzyme names, their geographical locations, and the products they produce, specifically for those enzymes that interact with medicines in a certain way. The placeholder in the WHERE clause represents the type of interaction being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique identifiers and trade names of medicines that are involved in interactions with enzymes, filtered to include only those medicines that have interactions with a specified minimum count. The placeholder in the HAVING clause represents the minimum number of interactions required.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the unique identifiers and names of medicines from the 'medicine' table that are involved in interactions with enzymes, as indicated in the 'medicine_enzyme_interaction' table. The placeholder in the HAVING clause represents the minimum number of interactions required for the medicines to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT T1.name, T1.Location, T1.Product \nFROM enzyme AS T1 \nJOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id \nWHERE T2.interaction_type = 'inhibitor';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes that interact with a specific medicine, filtered by the medicine's name and the type of interaction. The placeholders in the WHERE clause represent the medicine's name and the interaction type.\",\n        \"virtual_table\": \"SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the types of interactions between a specific medicine and enzyme. It retrieves the interaction type from the 'medicine_enzyme_interaction' table by joining it with the 'medicine' and 'enzyme' tables based on their respective identifiers. The placeholders in the WHERE clause represent the names of the enzyme and the medicine involved in the interaction.\",\n        \"virtual_table\": \"SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.967",
        "c_low": "SELECT m1.name, m1.Trade_Name \nFROM medicine m1 \nJOIN medicine_enzyme_interaction mei1 ON m1.id = mei1.medicine_id \nJOIN medicine_enzyme_interaction mei2 ON m1.id = mei2.medicine_id \nWHERE mei1.interaction_type = 'inhibitor' \nAND mei2.interaction_type = 'activator';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes from the 'enzyme' table that produce a specific product. The placeholder in the WHERE clause represents the product that should not be associated with the enzymes.\",\n        \"virtual_table\": \"SELECT name FROM enzyme WHERE product != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT m1.name, m1.Trade_Name \nFROM medicine AS m1 \nJOIN medicine_enzyme_interaction AS mei1 ON m1.id = mei1.medicine_id \nJOIN enzyme AS e ON mei1.enzyme_id = e.id \nWHERE mei1.interaction_type = 'inhibitor' \nAND m1.id IN (\n    SELECT mei2.medicine_id \n    FROM medicine_enzyme_interaction AS mei2 \n    WHERE mei2.interaction_type = 'activator' \n    GROUP BY mei2.medicine_id\n)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes that interact with a specific medicine, filtered by the medicine's name and the type of interaction. The placeholders in the WHERE clause represent the medicine's name and the interaction type.\",\n        \"virtual_table\": \"SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the occurrences of each interaction type and orders them in descending order, allowing the user to specify a limit on the number of results returned.\",\n        \"virtual_table\": \"SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the types of interactions between a specific medicine and enzyme. It retrieves the interaction type from the 'medicine_enzyme_interaction' table by joining it with the 'medicine' and 'enzyme' tables based on their respective identifiers. The placeholders in the WHERE clause represent the names of the enzyme and the medicine involved in the interaction.\",\n        \"virtual_table\": \"SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT M1.name, M1.Trade_Name \nFROM medicine AS M1 \nJOIN medicine_enzyme_interaction AS MEI1 ON MEI1.medicine_id = M1.id \nJOIN medicine_enzyme_interaction AS MEI2 ON MEI2.medicine_id = M1.id \nWHERE MEI1.interaction_type = 'inhibitor' AND MEI2.interaction_type = 'activator' \nGROUP BY M1.id;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique identifiers and trade names of medicines that are involved in interactions with enzymes, filtered to include only those medicines that have interactions with a specified minimum count. The placeholder in the HAVING clause represents the minimum number of interactions required.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of enzyme names, their geographical locations, and the products they produce, specifically for those enzymes that interact with medicines in a certain way. The placeholder in the WHERE clause represents the type of interaction being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the unique identifiers and names of medicines from the 'medicine' table that are involved in interactions with enzymes, as indicated in the 'medicine_enzyme_interaction' table. The placeholder in the HAVING clause represents the minimum number of interactions required for the medicines to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT m1.name, m1.Trade_Name \nFROM medicine m1 \nJOIN medicine_enzyme_interaction mei1 ON m1.id = mei1.medicine_id \nJOIN medicine_enzyme_interaction mei2 ON m1.id = mei2.medicine_id \nWHERE mei1.interaction_type = 'inhibitor' AND mei2.interaction_type = 'activitor';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the occurrences of each interaction type and orders them in descending order, allowing the user to specify a limit on the number of results returned.\",\n        \"virtual_table\": \"SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of enzymes from the 'enzyme' table that produce a specific product. The placeholder in the WHERE clause represents the product that should not be associated with the enzymes.\",\n        \"virtual_table\": \"SELECT name FROM enzyme WHERE product != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides information about the products produced by enzymes, their chromosome locations, and their association with porphyria disorders from the 'enzyme' table, filtered by a specific geographical location. The placeholder in the WHERE clause represents the location of the enzyme's activity.\",\n        \"virtual_table\": \"SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT M1.name, M1.Trade_Name \nFROM medicine AS M1 \nJOIN medicine_enzyme_interaction AS MEI1 ON MEI1.medicine_id = M1.id \nJOIN medicine_enzyme_interaction AS MEI2 ON MEI2.medicine_id = M1.id \nWHERE MEI1.interaction_type = 'inhibitor' AND MEI2.interaction_type = 'activator' \nGROUP BY M1.id;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique identifiers and trade names of medicines that are involved in interactions with enzymes, filtered to include only those medicines that have interactions with a specified minimum count. The placeholder in the HAVING clause represents the minimum number of interactions required.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of enzyme names, their geographical locations, and the products they produce, specifically for those enzymes that interact with medicines in a certain way. The placeholder in the WHERE clause represents the type of interaction being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the unique identifiers and names of medicines from the 'medicine' table that are involved in interactions with enzymes, as indicated in the 'medicine_enzyme_interaction' table. The placeholder in the HAVING clause represents the minimum number of interactions required for the medicines to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT M1.name, M1.Trade_Name \nFROM medicine AS M1 \nJOIN medicine_enzyme_interaction AS MEI1 ON M1.id = MEI1.medicine_id \nJOIN enzyme AS E1 ON MEI1.enzyme_id = E1.id \nJOIN medicine_enzyme_interaction AS MEI2 ON M1.id = MEI2.medicine_id \nJOIN enzyme AS E2 ON MEI2.enzyme_id = E2.id \nWHERE MEI1.interaction_type = 'inhibitor' AND MEI2.interaction_type = 'activator';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes that interact with a specific medicine, filtered by the medicine's name and the type of interaction. The placeholders in the WHERE clause represent the medicine's name and the interaction type.\",\n        \"virtual_table\": \"SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the types of interactions between a specific medicine and enzyme. It retrieves the interaction type from the 'medicine_enzyme_interaction' table by joining it with the 'medicine' and 'enzyme' tables based on their respective identifiers. The placeholders in the WHERE clause represent the names of the enzyme and the medicine involved in the interaction.\",\n        \"virtual_table\": \"SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.968",
        "c_low": "SELECT m.name, m.Trade_Name \nFROM medicine m \nJOIN medicine_enzyme_interaction mei ON m.id = mei.medicine_id \nWHERE mei.interaction_type IN ('inhibitor', 'activator')",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes from the 'enzyme' table that produce a specific product. The placeholder in the WHERE clause represents the product that should not be associated with the enzymes.\",\n        \"virtual_table\": \"SELECT name FROM enzyme WHERE product != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT T3.name, T3.Trade_Name FROM medicine AS T3 JOIN medicine_enzyme_interaction AS T2 ON T3.id = T2.medicine_id JOIN enzyme AS T1 ON T2.enzyme_id = T1.id WHERE T2.interaction_type IN ('inhibitor', 'activator')",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes that interact with a specific medicine, filtered by the medicine's name and the type of interaction. The placeholders in the WHERE clause represent the medicine's name and the interaction type.\",\n        \"virtual_table\": \"SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the occurrences of each interaction type and orders them in descending order, allowing the user to specify a limit on the number of results returned.\",\n        \"virtual_table\": \"SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the types of interactions between a specific medicine and enzyme. It retrieves the interaction type from the 'medicine_enzyme_interaction' table by joining it with the 'medicine' and 'enzyme' tables based on their respective identifiers. The placeholders in the WHERE clause represent the names of the enzyme and the medicine involved in the interaction.\",\n        \"virtual_table\": \"SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT M.name, M.Trade_Name \nFROM medicine AS M \nJOIN medicine_enzyme_interaction AS MEI ON MEI.medicine_id = M.id \nWHERE MEI.interaction_type IN ('inhibitor', 'activator')",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique identifiers and trade names of medicines that are involved in interactions with enzymes, filtered to include only those medicines that have interactions with a specified minimum count. The placeholder in the HAVING clause represents the minimum number of interactions required.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of enzyme names, their geographical locations, and the products they produce, specifically for those enzymes that interact with medicines in a certain way. The placeholder in the WHERE clause represents the type of interaction being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the unique identifiers and names of medicines from the 'medicine' table that are involved in interactions with enzymes, as indicated in the 'medicine_enzyme_interaction' table. The placeholder in the HAVING clause represents the minimum number of interactions required for the medicines to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT m.name, m.Trade_Name \nFROM medicine m \nJOIN medicine_enzyme_interaction mei ON m.id = mei.medicine_id \nJOIN enzyme e ON mei.enzyme_id = e.id \nWHERE mei.interaction_type IN ('inhibitor', 'activator');",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the occurrences of each interaction type and orders them in descending order, allowing the user to specify a limit on the number of results returned.\",\n        \"virtual_table\": \"SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of enzymes from the 'enzyme' table that produce a specific product. The placeholder in the WHERE clause represents the product that should not be associated with the enzymes.\",\n        \"virtual_table\": \"SELECT name FROM enzyme WHERE product != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides information about the products produced by enzymes, their chromosome locations, and their association with porphyria disorders from the 'enzyme' table, filtered by a specific geographical location. The placeholder in the WHERE clause represents the location of the enzyme's activity.\",\n        \"virtual_table\": \"SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT M.name, M.Trade_Name \nFROM medicine AS M \nJOIN medicine_enzyme_interaction AS MEI ON MEI.medicine_id = M.id \nWHERE MEI.interaction_type IN ('inhibitor', 'activator')",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique identifiers and trade names of medicines that are involved in interactions with enzymes, filtered to include only those medicines that have interactions with a specified minimum count. The placeholder in the HAVING clause represents the minimum number of interactions required.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of enzyme names, their geographical locations, and the products they produce, specifically for those enzymes that interact with medicines in a certain way. The placeholder in the WHERE clause represents the type of interaction being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the unique identifiers and names of medicines from the 'medicine' table that are involved in interactions with enzymes, as indicated in the 'medicine_enzyme_interaction' table. The placeholder in the HAVING clause represents the minimum number of interactions required for the medicines to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT T3.name, T3.Trade_Name FROM medicine AS T3 JOIN medicine_enzyme_interaction AS T2 ON T3.id = T2.medicine_id JOIN enzyme AS T1 ON T2.enzyme_id = T1.id WHERE T2.interaction_type IN ('inhibitor', 'activator')",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes that interact with a specific medicine, filtered by the medicine's name and the type of interaction. The placeholders in the WHERE clause represent the medicine's name and the interaction type.\",\n        \"virtual_table\": \"SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the types of interactions between a specific medicine and enzyme. It retrieves the interaction type from the 'medicine_enzyme_interaction' table by joining it with the 'medicine' and 'enzyme' tables based on their respective identifiers. The placeholders in the WHERE clause represent the names of the enzyme and the medicine involved in the interaction.\",\n        \"virtual_table\": \"SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.969",
        "c_low": "SELECT m.name, m.Trade_Name \nFROM medicine m \nWHERE m.id NOT IN (\n    SELECT mei.medicine_id \n    FROM medicine_enzyme_interaction mei \n    JOIN enzyme e ON mei.enzyme_id = e.id \n    WHERE e.Product = 'Heme'\n);",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes from the 'enzyme' table that produce a specific product. The placeholder in the WHERE clause represents the product that should not be associated with the enzymes.\",\n        \"virtual_table\": \"SELECT name FROM enzyme WHERE product != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT name, Trade_Name FROM medicine WHERE id NOT IN (SELECT medicine_id FROM medicine_enzyme_interaction WHERE enzyme_id IN (SELECT id FROM enzyme WHERE Product = 'Heme'));",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes that interact with a specific medicine, filtered by the medicine's name and the type of interaction. The placeholders in the WHERE clause represent the medicine's name and the interaction type.\",\n        \"virtual_table\": \"SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the occurrences of each interaction type and orders them in descending order, allowing the user to specify a limit on the number of results returned.\",\n        \"virtual_table\": \"SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides information about the products produced by enzymes, their chromosome locations, and their association with porphyria disorders from the 'enzyme' table, filtered by a specific geographical location. The placeholder in the WHERE clause represents the location of the enzyme's activity.\",\n        \"virtual_table\": \"SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT m.name, m.Trade_Name \nFROM medicine AS m \nWHERE m.id NOT IN (\n    SELECT me.medicine_id \n    FROM medicine_enzyme_interaction AS me \n    JOIN enzyme AS e ON me.enzyme_id = e.id \n    WHERE e.Product = 'Heme'\n);",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique identifiers and trade names of medicines that are involved in interactions with enzymes, filtered to include only those medicines that have interactions with a specified minimum count. The placeholder in the HAVING clause represents the minimum number of interactions required.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of enzyme names, their geographical locations, and the products they produce, specifically for those enzymes that interact with medicines in a certain way. The placeholder in the WHERE clause represents the type of interaction being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the unique identifiers and names of medicines from the 'medicine' table that are involved in interactions with enzymes, as indicated in the 'medicine_enzyme_interaction' table. The placeholder in the HAVING clause represents the minimum number of interactions required for the medicines to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT m.name, m.Trade_Name \nFROM medicine m \nWHERE m.id NOT IN (\n    SELECT mei.medicine_id \n    FROM medicine_enzyme_interaction mei \n    JOIN enzyme e ON mei.enzyme_id = e.id \n    WHERE e.Product = 'Heme'\n);",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes from the 'enzyme' table that produce a specific product. The placeholder in the WHERE clause represents the product that should not be associated with the enzymes.\",\n        \"virtual_table\": \"SELECT name FROM enzyme WHERE product != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the occurrences of each interaction type and orders them in descending order, allowing the user to specify a limit on the number of results returned.\",\n        \"virtual_table\": \"SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides information about the products produced by enzymes, their chromosome locations, and their association with porphyria disorders from the 'enzyme' table, filtered by a specific geographical location. The placeholder in the WHERE clause represents the location of the enzyme's activity.\",\n        \"virtual_table\": \"SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT m.name, m.Trade_Name \nFROM medicine AS m \nWHERE m.id NOT IN (\n    SELECT me.medicine_id \n    FROM medicine_enzyme_interaction AS me \n    JOIN enzyme AS e ON me.enzyme_id = e.id \n    WHERE e.Product = 'Heme'\n);",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique identifiers and trade names of medicines that are involved in interactions with enzymes, filtered to include only those medicines that have interactions with a specified minimum count. The placeholder in the HAVING clause represents the minimum number of interactions required.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of enzyme names, their geographical locations, and the products they produce, specifically for those enzymes that interact with medicines in a certain way. The placeholder in the WHERE clause represents the type of interaction being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the unique identifiers and names of medicines from the 'medicine' table that are involved in interactions with enzymes, as indicated in the 'medicine_enzyme_interaction' table. The placeholder in the HAVING clause represents the minimum number of interactions required for the medicines to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT m.name, m.Trade_Name \nFROM medicine AS m \nWHERE m.id NOT IN (\n    SELECT me.medicine_id \n    FROM medicine_enzyme_interaction AS me \n    JOIN enzyme AS e ON me.enzyme_id = e.id \n    WHERE e.Product = 'Heme'\n)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes that interact with a specific medicine, filtered by the medicine's name and the type of interaction. The placeholders in the WHERE clause represent the medicine's name and the interaction type.\",\n        \"virtual_table\": \"SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the types of interactions between a specific medicine and enzyme. It retrieves the interaction type from the 'medicine_enzyme_interaction' table by joining it with the 'medicine' and 'enzyme' tables based on their respective identifiers. The placeholders in the WHERE clause represent the names of the enzyme and the medicine involved in the interaction.\",\n        \"virtual_table\": \"SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.970",
        "c_low": "SELECT m.name, m.Trade_Name \nFROM medicine m \nWHERE m.id NOT IN (\n    SELECT mei.medicine_id \n    FROM medicine_enzyme_interaction mei \n    JOIN enzyme e ON mei.enzyme_id = e.id \n    WHERE e.Product = 'Heme'\n);",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes from the 'enzyme' table that produce a specific product. The placeholder in the WHERE clause represents the product that should not be associated with the enzymes.\",\n        \"virtual_table\": \"SELECT name FROM enzyme WHERE product != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT m.name, m.Trade_Name \nFROM medicine AS m \nWHERE m.id NOT IN (\n    SELECT mei.medicine_id \n    FROM medicine_enzyme_interaction AS mei \n    JOIN enzyme AS e ON mei.enzyme_id = e.id \n    WHERE e.Product = 'Heme'\n);",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes that interact with a specific medicine, filtered by the medicine's name and the type of interaction. The placeholders in the WHERE clause represent the medicine's name and the interaction type.\",\n        \"virtual_table\": \"SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the occurrences of each interaction type and orders them in descending order, allowing the user to specify a limit on the number of results returned.\",\n        \"virtual_table\": \"SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the types of interactions between a specific medicine and enzyme. It retrieves the interaction type from the 'medicine_enzyme_interaction' table by joining it with the 'medicine' and 'enzyme' tables based on their respective identifiers. The placeholders in the WHERE clause represent the names of the enzyme and the medicine involved in the interaction.\",\n        \"virtual_table\": \"SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT T1.name, T1.Trade_Name \nFROM medicine AS T1 \nWHERE T1.id NOT IN (\n    SELECT T2.medicine_id \n    FROM medicine_enzyme_interaction AS T2 \n    JOIN enzyme AS T3 ON T2.enzyme_id = T3.id \n    WHERE T3.product = 'Heme'\n)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique identifiers and trade names of medicines that are involved in interactions with enzymes, filtered to include only those medicines that have interactions with a specified minimum count. The placeholder in the HAVING clause represents the minimum number of interactions required.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the unique identifiers and names of medicines from the 'medicine' table that are involved in interactions with enzymes, as indicated in the 'medicine_enzyme_interaction' table. The placeholder in the HAVING clause represents the minimum number of interactions required for the medicines to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a distinct list of enzyme names, their geographical locations, and the products they produce, specifically for those enzymes that interact with medicines in a certain way. The placeholder in the WHERE clause represents the type of interaction being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT m.name, m.Trade_Name \nFROM medicine m \nWHERE m.id NOT IN (\n    SELECT mei.medicine_id \n    FROM medicine_enzyme_interaction mei \n    JOIN enzyme e ON mei.enzyme_id = e.id \n    WHERE e.Product = 'Heme'\n);",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the occurrences of each interaction type and orders them in descending order, allowing the user to specify a limit on the number of results returned.\",\n        \"virtual_table\": \"SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of enzymes from the 'enzyme' table that produce a specific product. The placeholder in the WHERE clause represents the product that should not be associated with the enzymes.\",\n        \"virtual_table\": \"SELECT name FROM enzyme WHERE product != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides information about the products produced by enzymes, their chromosome locations, and their association with porphyria disorders from the 'enzyme' table, filtered by a specific geographical location. The placeholder in the WHERE clause represents the location of the enzyme's activity.\",\n        \"virtual_table\": \"SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT T1.name, T1.Trade_Name \nFROM medicine AS T1 \nWHERE T1.id NOT IN (\n    SELECT T2.medicine_id \n    FROM medicine_enzyme_interaction AS T2 \n    JOIN enzyme AS T3 ON T2.enzyme_id = T3.id \n    WHERE T3.product = 'Heme'\n)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique identifiers and trade names of medicines that are involved in interactions with enzymes, filtered to include only those medicines that have interactions with a specified minimum count. The placeholder in the HAVING clause represents the minimum number of interactions required.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the unique identifiers and names of medicines from the 'medicine' table that are involved in interactions with enzymes, as indicated in the 'medicine_enzyme_interaction' table. The placeholder in the HAVING clause represents the minimum number of interactions required for the medicines to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a distinct list of enzyme names, their geographical locations, and the products they produce, specifically for those enzymes that interact with medicines in a certain way. The placeholder in the WHERE clause represents the type of interaction being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT m.name, m.Trade_Name \nFROM medicine AS m \nWHERE m.id NOT IN (\n    SELECT me.medicine_id \n    FROM medicine_enzyme_interaction AS me \n    JOIN enzyme AS e ON me.enzyme_id = e.id \n    WHERE e.Product = 'Heme'\n);",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes that interact with a specific medicine, filtered by the medicine's name and the type of interaction. The placeholders in the WHERE clause represent the medicine's name and the interaction type.\",\n        \"virtual_table\": \"SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the types of interactions between a specific medicine and enzyme. It retrieves the interaction type from the 'medicine_enzyme_interaction' table by joining it with the 'medicine' and 'enzyme' tables based on their respective identifiers. The placeholders in the WHERE clause represent the names of the enzyme and the medicine involved in the interaction.\",\n        \"virtual_table\": \"SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.994",
        "c_low": "SELECT b.All_Games, u.Location \nFROM basketball_match b \nJOIN university u ON b.School_ID = u.School_ID \nWHERE u.School = 'Clemson';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the winning percentages of basketball teams in the ACC, sorted in descending order. The placeholder in the LIMIT clause allows the user to specify the number of results to return.\",\n        \"virtual_table\": \"SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT bm.All_Games, u.Location \nFROM basketball_match bm \nJOIN university u ON bm.School_ID = u.School_ID \nWHERE u.School = 'Clemson';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the enrollment numbers and primary athletic conference of universities, sorted by the year they were founded. The placeholder in the LIMIT clause allows for specifying the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT t2.All_Games, t1.Location FROM university AS t1 JOIN basketball_match AS t2 ON t1.School_ID = t2.School_ID WHERE t2.Team_Name = 'Clemson'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the overall game record of a specific basketball team along with the geographical location of the university associated with that team. The placeholder in the WHERE clause represents the name of the basketball team being queried.\",\n        \"virtual_table\": \"SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT bm.All_Games, u.Location \nFROM basketball_match bm \nJOIN university u ON bm.School_ID = u.School_ID \nWHERE u.School = 'Clemson';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the winning percentages of basketball teams in the ACC, sorted in descending order. The placeholder in the LIMIT clause allows the user to specify the number of results to return.\",\n        \"virtual_table\": \"SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the enrollment numbers and primary athletic conference of universities, sorted by the year they were founded. The placeholder in the LIMIT clause allows for specifying the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT t2.All_Games, t1.Location FROM university AS t1 JOIN basketball_match AS t2 ON t1.School_ID = t2.School_ID WHERE t2.Team_Name = 'Clemson'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the overall game record of a specific basketball team along with the geographical location of the university associated with that team. The placeholder in the WHERE clause represents the name of the basketball team being queried.\",\n        \"virtual_table\": \"SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT bm.All_Games, u.Location \nFROM basketball_match bm \nJOIN university u ON bm.School_ID = u.School_ID \nWHERE u.School = 'Clemson';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1005",
        "c_low": "SELECT * FROM university WHERE Founded > 1850 OR Affiliation = 'Public';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of universities sorted by their enrollment numbers in descending order, showing the year each university was founded. The placeholder in the LIMIT clause allows for specifying the maximum number of universities to retrieve.\",\n        \"virtual_table\": \"SELECT founded FROM university ORDER BY enrollment DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT * FROM university WHERE founded > 1850 OR affiliation = 'public';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of universities that have a specific type of affiliation, excluding those with the specified affiliation. The results are ordered by the year the university was founded in descending order, and the number of results returned is limited by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT founded FROM university WHERE affiliation != [PLACEHOLDER-TYPE:STRING] ORDER BY founded DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the enrollment numbers and primary athletic conference of universities, sorted by the year they were founded. The placeholder in the LIMIT clause allows for specifying the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average enrollment of universities that were established before a specific year. The placeholder in the WHERE clause represents the year of establishment.\",\n        \"virtual_table\": \"SELECT avg(enrollment) FROM university WHERE founded  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT * FROM university WHERE Founded > 1850 OR Affiliation = 'Public'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total enrollment of universities grouped by their affiliation type, specifically for those universities established after a certain year. The placeholder in the WHERE clause represents the year of establishment.\",\n        \"virtual_table\": \"SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY affiliation\"\n    }\n}\n",
        "t_1": "SELECT * FROM university WHERE founded > 1850 OR affiliation = 'public'",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total enrollment of universities grouped by their affiliation type, specifically for those universities established after a certain year. The placeholder in the WHERE clause represents the year of establishment.\",\n        \"virtual_table\": \"SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY affiliation\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of universities that have a specific type of affiliation, excluding those with the specified affiliation. The results are ordered by the year the university was founded in descending order, and the number of results returned is limited by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT founded FROM university WHERE affiliation != [PLACEHOLDER-TYPE:STRING] ORDER BY founded DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of universities sorted by their enrollment numbers in descending order, showing the year each university was founded. The placeholder in the LIMIT clause allows for specifying the maximum number of universities to retrieve.\",\n        \"virtual_table\": \"SELECT founded FROM university ORDER BY enrollment DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT * FROM university WHERE Founded > 1850 OR Affiliation = 'Public';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT * FROM university WHERE Founded > 1850 OR Affiliation = 'Public';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1006",
        "c_low": "SELECT School FROM university WHERE Founded < 1850 OR Affiliation = 'Public';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of universities sorted by their enrollment numbers in descending order, showing the year each university was founded. The placeholder in the LIMIT clause allows for specifying the maximum number of universities to retrieve.\",\n        \"virtual_table\": \"SELECT founded FROM university ORDER BY enrollment DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT School FROM university WHERE founded < 1850 OR affiliation = 'public'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of universities that have a specific type of affiliation, excluding those with the specified affiliation. The results are ordered by the year the university was founded in descending order, and the number of results returned is limited by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT founded FROM university WHERE affiliation != [PLACEHOLDER-TYPE:STRING] ORDER BY founded DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the enrollment numbers and primary athletic conference of universities, sorted by the year they were founded. The placeholder in the LIMIT clause allows for specifying the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average enrollment of universities that were established before a specific year. The placeholder in the WHERE clause represents the year of establishment.\",\n        \"virtual_table\": \"SELECT avg(enrollment) FROM university WHERE founded  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT School FROM university WHERE Founded < 1850 OR Affiliation = 'Public';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total enrollment of universities grouped by their affiliation type, specifically for those universities established after a certain year. The placeholder in the WHERE clause represents the year of establishment.\",\n        \"virtual_table\": \"SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY affiliation\"\n    }\n}\n",
        "t_1": "SELECT School FROM university WHERE Founded < 1850 OR Affiliation = 'Public'",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total enrollment of universities grouped by their affiliation type, specifically for those universities established after a certain year. The placeholder in the WHERE clause represents the year of establishment.\",\n        \"virtual_table\": \"SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY affiliation\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of universities that have a specific type of affiliation, excluding those with the specified affiliation. The results are ordered by the year the university was founded in descending order, and the number of results returned is limited by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT founded FROM university WHERE affiliation != [PLACEHOLDER-TYPE:STRING] ORDER BY founded DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the enrollment numbers and primary athletic conference of universities, sorted by the year they were founded. The placeholder in the LIMIT clause allows for specifying the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT School FROM university WHERE Founded < 1850 OR Affiliation = 'Public';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT School FROM university WHERE Founded < 1850 OR Affiliation = 'Public';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1025",
        "c_low": "SELECT chip_model.Model_name, screen_mode.Graphics_mode \nFROM phone \nJOIN chip_model ON phone.chip_model = chip_model.Model_name \nJOIN screen_mode ON phone.screen_mode = screen_mode.Graphics_mode \nWHERE phone.Hardware_Model_name = 'LG-P760';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the chip models from the 'chip_model' table that were launched within a specific range of years. The placeholders in the WHERE clause represent the start and end years of the launch period.\",\n        \"virtual_table\": \"SELECT Model_name FROM chip_model WHERE Launch_year BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the maximum and minimum RAM capacities in MiB for chip models used in phones manufactured by a specific company. The placeholders in the WHERE clause represent the company's name.\",\n        \"virtual_table\": \"SELECT max(T1.RAM_MiB) ,  min(T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of chip models along with their RAM sizes from the 'chip_model' table. The results are ordered by the amount of RAM in ascending order, and the placeholder indicates the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT Model_name ,  RAM_MiB FROM chip_model ORDER BY RAM_MiB ASC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "c_mid": "SELECT T1.Model_name, T3.Graphics_mode FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = 'LG-P760';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the hardware model names of phones that either support a specific type of screen mode or have a RAM capacity greater than a specified amount. The placeholders in the WHERE clause represent the screen mode type and the RAM capacity respectively.\",\n        \"virtual_table\": \"SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T3.Type = [PLACEHOLDER-TYPE:STRING] OR T1.RAM_MiB  >  [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the hardware model names and company names of phones that utilize a specific type of screen mode from the 'screen_mode' table. The placeholder in the WHERE clause represents the type of screen mode being queried.\",\n        \"virtual_table\": \"SELECT T2.Hardware_Model_name ,  T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides information about the WiFi capabilities and the type of screen mode for phones based on a specific hardware model name. The placeholders in the WHERE clause represent the hardware model name of the phone.\",\n        \"virtual_table\": \"SELECT T1.WiFi , T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_high": "SELECT T1.Model_name, T2.Graphics_mode FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T2.Hardware_Model_name = 'LG-P760';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a distinct list of hardware model names and their corresponding company names from the 'phone' table, filtered by the screen modes that use a specific range of kilobytes. The placeholders in the WHERE clause represent the lower and upper limits of kilobytes used by the screen mode.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Hardware_Model_name , T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.used_kb BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of distinct hardware model names of phones that are associated with a specific type of screen mode or a specific company name. The placeholders in the WHERE clause represent the type of screen mode and the company name, allowing users to filter the results based on their criteria.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  [PLACEHOLDER-TYPE:STRING] OR t2.Company_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides information about the character cells, resolution in pixels, and the number of hardware colors supported by the screen modes of phones that match a specific hardware model name. The placeholder in the WHERE clause represents the hardware model name of the phone.\",\n        \"virtual_table\": \"SELECT T1.Char_cells ,  T1.Pixels ,  T1.Hardware_colours FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Hardware_Model_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "t_1": "SELECT chip_model.Model_name, screen_mode.Graphics_mode \nFROM phone \nJOIN chip_model ON phone.chip_model = chip_model.Model_name \nJOIN screen_mode ON phone.screen_mode = screen_mode.Graphics_mode \nWHERE phone.Hardware_Model_name = 'LG-P760';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the chip models from the 'chip_model' table that were launched within a specific range of years. The placeholders in the WHERE clause represent the start and end years of the launch period.\",\n        \"virtual_table\": \"SELECT Model_name FROM chip_model WHERE Launch_year BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of chip models along with their RAM sizes from the 'chip_model' table. The results are ordered by the amount of RAM in ascending order, and the placeholder indicates the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT Model_name ,  RAM_MiB FROM chip_model ORDER BY RAM_MiB ASC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the hardware model names and company names of phones from the 'phone' table that have a specific type of accreditation. The placeholder in the WHERE clause represents the accreditation type being queried.\",\n        \"virtual_table\": \"SELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "t_2": "SELECT T1.Model_name, T2.Graphics_mode FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T2.Hardware_Model_name = 'LG-P760';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the hardware model names and company names of phones that utilize a specific type of screen mode from the 'screen_mode' table. The placeholder in the WHERE clause represents the type of screen mode being queried.\",\n        \"virtual_table\": \"SELECT T2.Hardware_Model_name ,  T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of hardware model names and their corresponding company names from the 'phone' table, filtered by the screen modes that use a specific range of kilobytes. The placeholders in the WHERE clause represent the lower and upper limits of kilobytes used by the screen mode.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Hardware_Model_name , T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.used_kb BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of distinct hardware model names of phones that are associated with a specific type of screen mode or a specific company name. The placeholders in the WHERE clause represent the type of screen mode and the company name, allowing users to filter the results based on their criteria.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  [PLACEHOLDER-TYPE:STRING] OR t2.Company_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT T1.Model_name, T3.Graphics_mode FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = 'LG-P760';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the hardware model names of phones that either support a specific type of screen mode or have a RAM capacity greater than a specified amount. The placeholders in the WHERE clause represent the screen mode type and the RAM capacity respectively.\",\n        \"virtual_table\": \"SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T3.Type = [PLACEHOLDER-TYPE:STRING] OR T1.RAM_MiB  >  [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the WiFi capabilities and the type of screen mode for phones based on a specific hardware model name. The placeholders in the WHERE clause represent the hardware model name of the phone.\",\n        \"virtual_table\": \"SELECT T1.WiFi , T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1050",
        "c_low": "SELECT Model_name FROM chip_model WHERE Model_name NOT IN (SELECT chip_model FROM phone WHERE Accreditation_type = 'full');",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the chip models from the 'chip_model' table that were launched within a specific range of years. The placeholders in the WHERE clause represent the start and end years of the launch period.\",\n        \"virtual_table\": \"SELECT Model_name FROM chip_model WHERE Launch_year BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of chip models from the 'chip_model' table that have specific WiFi capabilities. The placeholder in the WHERE clause represents the WiFi capability being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM chip_model WHERE wifi  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the maximum and minimum RAM capacities in MiB for chip models used in phones manufactured by a specific company. The placeholders in the WHERE clause represent the company's name.\",\n        \"virtual_table\": \"SELECT max(T1.RAM_MiB) ,  min(T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_mid": "SELECT Model_name FROM chip_model WHERE Model_name NOT IN (SELECT chip_model FROM phone WHERE Accreditation_type = 'full');",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the hardware model names and company names of phones from the 'phone' table that have a specific type of accreditation. The placeholder in the WHERE clause represents the accreditation type being queried.\",\n        \"virtual_table\": \"SELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of hardware model names of phones that utilize chip models launched in a specific year. The results are ordered by the amount of RAM in descending order, and the number of results returned can be limited by a placeholder value.\",\n        \"virtual_table\": \"SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = [PLACEHOLDER-TYPE:NUMBER] ORDER BY T1.RAM_MiB DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides information about the WiFi capabilities and the type of screen mode for phones based on a specific hardware model name. The placeholders in the WHERE clause represent the hardware model name of the phone.\",\n        \"virtual_table\": \"SELECT T1.WiFi , T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_high": "SELECT Model_name FROM chip_model WHERE Model_name NOT IN (SELECT chip_model FROM phone WHERE Accreditation_type = 'full');",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the hardware model names and company names of phones that utilize chip models launched in a specific year or have a RAM capacity exceeding a certain amount. The placeholders in the WHERE clause represent the launch year and the RAM size criteria.\",\n        \"virtual_table\": \"SELECT T2.Hardware_Model_name ,  T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = [PLACEHOLDER-TYPE:NUMBER] OR T1.RAM_MiB  >  [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of distinct hardware model names of phones from the 'phone' table that are associated with a specific company and do not use a particular type of screen mode. The placeholders in the WHERE clause represent the company name and the type of screen mode to filter the results accordingly.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE t2.Company_name  =  [PLACEHOLDER-TYPE:STRING] AND T1.Type != [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of distinct hardware model names of phones that are associated with a specific type of screen mode or a specific company name. The placeholders in the WHERE clause represent the type of screen mode and the company name, allowing users to filter the results based on their criteria.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  [PLACEHOLDER-TYPE:STRING] OR t2.Company_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT Model_name FROM chip_model WHERE Model_name NOT IN (SELECT DISTINCT chip_model FROM phone WHERE Accreditation_type = 'full');",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the hardware model names and company names of phones from the 'phone' table that have a specific type of accreditation. The placeholder in the WHERE clause represents the accreditation type being queried.\",\n        \"virtual_table\": \"SELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the chip models from the 'chip_model' table that were launched within a specific range of years. The placeholders in the WHERE clause represent the start and end years of the launch period.\",\n        \"virtual_table\": \"SELECT Model_name FROM chip_model WHERE Launch_year BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of chip models from the 'chip_model' table that have specific WiFi capabilities. The placeholder in the WHERE clause represents the WiFi capability being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM chip_model WHERE wifi  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT Model_name FROM chip_model WHERE Model_name NOT IN (SELECT chip_model FROM phone WHERE Accreditation_type = 'full');",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of hardware model names of phones that utilize chip models launched in a specific year. The results are ordered by the amount of RAM in descending order, and the number of results returned can be limited by a placeholder value.\",\n        \"virtual_table\": \"SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = [PLACEHOLDER-TYPE:NUMBER] ORDER BY T1.RAM_MiB DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the hardware model names and company names of phones that utilize chip models launched in a specific year or have a RAM capacity exceeding a certain amount. The placeholders in the WHERE clause represent the launch year and the RAM size criteria.\",\n        \"virtual_table\": \"SELECT T2.Hardware_Model_name ,  T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = [PLACEHOLDER-TYPE:NUMBER] OR T1.RAM_MiB  >  [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of distinct hardware model names of phones from the 'phone' table that are associated with a specific company and do not use a particular type of screen mode. The placeholders in the WHERE clause represent the company name and the type of screen mode to filter the results accordingly.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE t2.Company_name  =  [PLACEHOLDER-TYPE:STRING] AND T1.Type != [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "t_3+": "SELECT Model_name FROM chip_model WHERE Model_name NOT IN (SELECT chip_model FROM phone WHERE Accreditation_type = 'full');",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the WiFi capabilities and the type of screen mode for phones based on a specific hardware model name. The placeholders in the WHERE clause represent the hardware model name of the phone.\",\n        \"virtual_table\": \"SELECT T1.WiFi , T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the hardware model names of phones that either support a specific type of screen mode or have a RAM capacity greater than a specified amount. The placeholders in the WHERE clause represent the screen mode type and the RAM capacity respectively.\",\n        \"virtual_table\": \"SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T3.Type = [PLACEHOLDER-TYPE:STRING] OR T1.RAM_MiB  >  [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1051",
        "c_low": "SELECT DISTINCT S.Pixels FROM screen_mode AS S JOIN phone AS P ON S.Graphics_mode = P.screen_mode WHERE P.Accreditation_type = 'full' OR P.Accreditation_type = 'Provisional';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the maximum and minimum RAM capacities in MiB for chip models used in phones manufactured by a specific company. The placeholders in the WHERE clause represent the company's name.\",\n        \"virtual_table\": \"SELECT max(T1.RAM_MiB) ,  min(T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_mid": "SELECT T3.Pixels FROM phone AS T1 JOIN screen_mode AS T3 ON T1.screen_mode = T3.Graphics_mode WHERE T1.Accreditation_type = 'full' OR T1.Accreditation_type = 'Provisional';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the WiFi capabilities and the type of screen mode for phones based on a specific hardware model name. The placeholders in the WHERE clause represent the hardware model name of the phone.\",\n        \"virtual_table\": \"SELECT T1.WiFi , T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the hardware model names of phones that either support a specific type of screen mode or have a RAM capacity greater than a specified amount. The placeholders in the WHERE clause represent the screen mode type and the RAM capacity respectively.\",\n        \"virtual_table\": \"SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T3.Type = [PLACEHOLDER-TYPE:STRING] OR T1.RAM_MiB  >  [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the hardware model names and company names of phones that utilize a specific type of screen mode from the 'screen_mode' table. The placeholder in the WHERE clause represents the type of screen mode being queried.\",\n        \"virtual_table\": \"SELECT T2.Hardware_Model_name ,  T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT T1.Pixels FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Accreditation_type = 'full' OR T2.Accreditation_type = 'Provisional';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the character cells, resolution in pixels, and the number of hardware colors supported by the screen modes of phones that match a specific hardware model name. The placeholder in the WHERE clause represents the hardware model name of the phone.\",\n        \"virtual_table\": \"SELECT T1.Char_cells ,  T1.Pixels ,  T1.Hardware_colours FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Hardware_Model_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of hardware model names and their corresponding company names from the 'phone' table, filtered by the screen modes that use a specific range of kilobytes. The placeholders in the WHERE clause represent the lower and upper limits of kilobytes used by the screen mode.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Hardware_Model_name , T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.used_kb BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of distinct hardware model names of phones that are associated with a specific type of screen mode or a specific company name. The placeholders in the WHERE clause represent the type of screen mode and the company name, allowing users to filter the results based on their criteria.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  [PLACEHOLDER-TYPE:STRING] OR t2.Company_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT sm.Pixels \nFROM screen_mode sm \nJOIN phone p ON sm.Graphics_mode = p.screen_mode \nWHERE p.Accreditation_type IN ('Full', 'Provisional');",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the hardware model names and company names of phones from the 'phone' table that have a specific type of accreditation. The placeholder in the WHERE clause represents the accreditation type being queried.\",\n        \"virtual_table\": \"SELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of phones manufactured by each company from the 'phone' table. The placeholder in the LIMIT clause allows the user to specify the maximum number of companies to display, sorted by the count of phones in ascending order.\",\n        \"virtual_table\": \"SELECT Company_name ,  count(*) FROM phone GROUP BY Company_name ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT T1.Pixels FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Accreditation_type = 'Full' OR T2.Accreditation_type = 'Provisional';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the character cells, resolution in pixels, and the number of hardware colors supported by the screen modes of phones that match a specific hardware model name. The placeholder in the WHERE clause represents the hardware model name of the phone.\",\n        \"virtual_table\": \"SELECT T1.Char_cells ,  T1.Pixels ,  T1.Hardware_colours FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Hardware_Model_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the hardware model names and company names of phones that utilize a specific type of screen mode from the 'screen_mode' table. The placeholder in the WHERE clause represents the type of screen mode being queried.\",\n        \"virtual_table\": \"SELECT T2.Hardware_Model_name ,  T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a distinct list of hardware model names and their corresponding company names from the 'phone' table, filtered by the screen modes that use a specific range of kilobytes. The placeholders in the WHERE clause represent the lower and upper limits of kilobytes used by the screen mode.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Hardware_Model_name , T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.used_kb BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_3+": "SELECT T3.Pixels FROM phone AS T1 JOIN screen_mode AS T3 ON T1.screen_mode = T3.Graphics_mode WHERE T1.Accreditation_type = 'Full' OR T1.Accreditation_type = 'Provisional';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the WiFi capabilities and the type of screen mode for phones based on a specific hardware model name. The placeholders in the WHERE clause represent the hardware model name of the phone.\",\n        \"virtual_table\": \"SELECT T1.WiFi , T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the hardware model names of phones that either support a specific type of screen mode or have a RAM capacity greater than a specified amount. The placeholders in the WHERE clause represent the screen mode type and the RAM capacity respectively.\",\n        \"virtual_table\": \"SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T3.Type = [PLACEHOLDER-TYPE:STRING] OR T1.RAM_MiB  >  [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1060",
        "c_low": "SELECT Player FROM player WHERE Team IN (SELECT Team_id FROM match_season WHERE College = 'UCLA');",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.College = 'UCLA'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the official native languages of countries represented by players who attended specific colleges. The placeholders in the WHERE clause allow for filtering based on the names of the colleges.\",\n        \"virtual_table\": \"SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  [PLACEHOLDER-TYPE:STRING] OR T2.College  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT Player FROM player WHERE Team IN (SELECT Team FROM match_season WHERE College = 'UCLA')",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of colleges from which players have participated in matches during a specific season. The results are grouped by college, and only those colleges with a number of players equal to or greater than a specified threshold are included. The placeholder in the HAVING clause represents the minimum number of players required from each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER] ORDER BY College DESC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the colleges that have produced a significant number of players participating in matches during a specific season. The placeholder in the HAVING clause represents the minimum count of players that must be associated with each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Player FROM player WHERE Team IN (SELECT Team FROM match_season WHERE College = 'UCLA')",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of colleges from which players have participated in matches during a specific season. The results are grouped by college, and only those colleges with a number of players equal to or greater than a specified threshold are included. The placeholder in the HAVING clause represents the minimum number of players required from each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER] ORDER BY College DESC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the colleges that have produced a significant number of players participating in matches during a specific season. The placeholder in the HAVING clause represents the minimum count of players that must be associated with each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.College = 'UCLA'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the official native languages of countries represented by players who attended specific colleges. The placeholders in the WHERE clause allow for filtering based on the names of the colleges.\",\n        \"virtual_table\": \"SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  [PLACEHOLDER-TYPE:STRING] OR T2.College  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Player FROM player WHERE Team IN (SELECT Team_id FROM match_season WHERE College = 'UCLA');",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1064",
        "c_low": "SELECT Draft_Pick_Number, Draft_Class FROM match_season WHERE Position = 'defender';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the positions of players from the 'match_season' table who are part of a specific team. The placeholder in the WHERE clause represents the name of the team.\",\n        \"virtual_table\": \"SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT Draft_Pick_Number, Draft_Class FROM match_season WHERE Position = 'defender';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT Draft_Pick_Number, Draft_Class FROM match_season WHERE Position = 'defender'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the draft pick number and draft class of players from the 'match_season' table who play in a specific position. The placeholder in the WHERE clause represents the position of the player.\",\n        \"virtual_table\": \"SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and years played of players from the 'player' table who are part of a specific team. The placeholder in the WHERE clause represents the name of the team.\",\n        \"virtual_table\": \"SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT Draft_Pick_Number, Draft_Class FROM match_season WHERE Position = 'defender'",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the draft pick number and draft class of players from the 'match_season' table who play in a specific position. The placeholder in the WHERE clause represents the position of the player.\",\n        \"virtual_table\": \"SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT Draft_Pick_Number, Draft_Class FROM match_season WHERE Position = 'defender';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and years played of players from the 'player' table who are part of a specific team. The placeholder in the WHERE clause represents the name of the team.\",\n        \"virtual_table\": \"SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the positions of players from the 'match_season' table who are part of a specific team. The placeholder in the WHERE clause represents the name of the team.\",\n        \"virtual_table\": \"SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Draft_Pick_Number, Draft_Class FROM match_season WHERE Position = 'defender';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1073",
        "c_low": "SELECT T2.Player, T1.Season, T1.Country \nFROM match_season AS T1 \nJOIN country AS T2 ON T1.Country = T2.Country_id;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the players from the 'match_season' table who represent a specific country. The query joins the 'country' table to filter players based on the country's name, with a placeholder for the country name in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the positions of players from the 'match_season' table who are part of a specific team. The placeholder in the WHERE clause represents the name of the team.\",\n        \"virtual_table\": \"SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT T2.Player, T1.Season, T1.Country \nFROM match_season AS T1 \nJOIN player AS T2 ON T1.Player = T2.Player \nORDER BY T2.Player;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique player positions from the 'match_season' table for players representing countries with a specific capital city. The placeholder in the WHERE clause represents the name of the capital city.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table counts the distinct official native languages of countries represented by players in a specific position during matches. The placeholder in the WHERE clause represents the player's position.\",\n        \"virtual_table\": \"SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the official native languages of countries represented by players who attended specific colleges. The placeholders in the WHERE clause allow for filtering based on the names of the colleges.\",\n        \"virtual_table\": \"SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  [PLACEHOLDER-TYPE:STRING] OR T2.College  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT ms.Player, ms.Season, c.Country_name \nFROM match_season AS ms \nJOIN country AS c ON ms.Country = c.Country_id;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and years played of players from the 'player' table who are part of a specific team. The placeholder in the WHERE clause represents the name of the team.\",\n        \"virtual_table\": \"SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT player.Player, match_season.Season, match_season.Country \nFROM player \nJOIN match_season ON player.Player = match_season.Player;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T2.Player, T1.Season, T1.Country \nFROM match_season AS T1 \nJOIN player AS T2 ON T1.Player = T2.Player \nJOIN country AS T3 ON T1.Country = T3.Country_id;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the players from the 'match_season' table who represent a specific country. The query joins the 'country' table to filter players based on the country's name, with a placeholder for the country name in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and years played of players from the 'player' table who are part of a specific team. The placeholder in the WHERE clause represents the name of the team.\",\n        \"virtual_table\": \"SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique player positions from the 'match_season' table for players representing countries with a specific capital city. The placeholder in the WHERE clause represents the name of the capital city.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT player.Player, match_season.Season, match_season.Country \nFROM player \nJOIN match_season ON player.Player = match_season.Player;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1080",
        "c_low": "SELECT COUNT(DISTINCT c.Official_native_language) \nFROM match_season AS ms \nJOIN country AS c ON ms.Country = c.Country_id \nWHERE ms.Position = 'defender';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the players from the 'match_season' table who represent a specific country. The query joins the 'country' table to filter players based on the country's name, with a placeholder for the country name in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = 'defender'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the distinct official native languages of countries represented by players in a specific position during matches. The placeholder in the WHERE clause represents the player's position.\",\n        \"virtual_table\": \"SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the official native languages of countries represented by players who attended specific colleges. The placeholders in the WHERE clause allow for filtering based on the names of the colleges.\",\n        \"virtual_table\": \"SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  [PLACEHOLDER-TYPE:STRING] OR T2.College  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique player positions from the 'match_season' table for players representing countries with a specific capital city. The placeholder in the WHERE clause represents the name of the capital city.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT COUNT(DISTINCT c.Official_native_language) AS Distinct_Languages\nFROM match_season ms\nJOIN country c ON ms.Country = c.Country_id\nWHERE ms.Position = 'defender';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT COUNT(DISTINCT c.Official_native_language) AS Distinct_Languages\nFROM match_season ms\nJOIN country c ON ms.Country = c.Country_id\nWHERE ms.Position = 'defender';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = 'defender'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the distinct official native languages of countries represented by players in a specific position during matches. The placeholder in the WHERE clause represents the player's position.\",\n        \"virtual_table\": \"SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the official native languages of countries represented by players who attended specific colleges. The placeholders in the WHERE clause allow for filtering based on the names of the colleges.\",\n        \"virtual_table\": \"SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  [PLACEHOLDER-TYPE:STRING] OR T2.College  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique player positions from the 'match_season' table for players representing countries with a specific capital city. The placeholder in the WHERE clause represents the name of the capital city.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(DISTINCT c.Official_native_language) AS Distinct_Languages\nFROM match_season ms\nJOIN country c ON ms.Country = c.Country_id\nWHERE ms.Position = 'defender';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1082",
        "c_low": "SELECT T1.Season, T2.Player, T3.Name \nFROM match_season AS T1 \nJOIN player AS T2 ON T1.Player = T2.Player \nJOIN team AS T3 ON T2.Team = T3.Team_id;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the positions of players from the 'match_season' table who are part of a specific team. The placeholder in the WHERE clause represents the name of the team.\",\n        \"virtual_table\": \"SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the players from the 'match_season' table who represent a specific country. The query joins the 'country' table to filter players based on the country's name, with a placeholder for the country name in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT T1.Season, T2.Player, T3.Name \nFROM match_season AS T1 \nJOIN player AS T2 ON T1.Player = T2.Player \nJOIN team AS T3 ON T2.Team = T3.Team_id;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique player positions from the 'match_season' table for players representing countries with a specific capital city. The placeholder in the WHERE clause represents the name of the capital city.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of distinct colleges represented by players in a specific team from the 'match_season' table. The placeholder in the WHERE clause allows for filtering by the team's name.\",\n        \"virtual_table\": \"SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT MS.Season, MS.Player, T.Name FROM match_season AS MS JOIN team AS T ON MS.Team = T.Team_id;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and years played of players from the 'player' table who are part of a specific team. The placeholder in the WHERE clause represents the name of the team.\",\n        \"virtual_table\": \"SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT match_season.Season, match_season.Player, team.Name \nFROM match_season \nJOIN team ON match_season.Team = team.Team_id;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T1.Season, T2.Player, T3.Name \nFROM match_season AS T1 \nJOIN player AS T2 ON T1.Player = T2.Player \nJOIN team AS T3 ON T2.Team = T3.Team_id;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the positions of players from the 'match_season' table who are part of a specific team. The placeholder in the WHERE clause represents the name of the team.\",\n        \"virtual_table\": \"SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and years played of players from the 'player' table who are part of a specific team. The placeholder in the WHERE clause represents the name of the team.\",\n        \"virtual_table\": \"SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the players from the 'match_season' table who represent a specific country. The query joins the 'country' table to filter players based on the country's name, with a placeholder for the country name in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT match_season.Season, match_season.Player, team.Name \nFROM match_season \nJOIN team ON match_season.Team = team.Team_id;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1083",
        "c_low": "SELECT T2.Player, T1.Season, T2.Team \nFROM match_season AS T1 \nJOIN player AS T2 ON T1.Player = T2.Player \nGROUP BY T2.Player, T1.Season, T2.Team;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the positions of players from the 'match_season' table who are part of a specific team. The placeholder in the WHERE clause represents the name of the team.\",\n        \"virtual_table\": \"SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the players from the 'match_season' table who represent a specific country. The query joins the 'country' table to filter players based on the country's name, with a placeholder for the country name in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT match_season.Player, match_season.Season, match_season.Team \nFROM match_season;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT match_season.Player, match_season.Season, match_season.Team \nFROM match_season;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and years played of players from the 'player' table who are part of a specific team. The placeholder in the WHERE clause represents the name of the team.\",\n        \"virtual_table\": \"SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT match_season.Player, match_season.Season, match_season.Team\nFROM match_season;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T2.Player, T1.Season, T2.Team FROM match_season AS T1 JOIN player AS T2 ON T1.Player = T2.Player_ID;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and years played of players from the 'player' table who are part of a specific team. The placeholder in the WHERE clause represents the name of the team.\",\n        \"virtual_table\": \"SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the positions of players from the 'match_season' table who are part of a specific team. The placeholder in the WHERE clause represents the name of the team.\",\n        \"virtual_table\": \"SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the players from the 'match_season' table who represent a specific country. The query joins the 'country' table to filter players based on the country's name, with a placeholder for the country name in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT match_season.Player, match_season.Season, match_season.Team FROM match_season;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1092",
        "c_low": "SELECT c.Country_name, COUNT(ms.Player) AS Number_of_Players\nFROM country AS c\nLEFT JOIN match_season AS ms ON c.Country_id = ms.Country\nGROUP BY c.Country_name;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the players from the 'match_season' table who represent a specific country. The query joins the 'country' table to filter players based on the country's name, with a placeholder for the country name in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT C.Country_name, COUNT(M.Player) AS Number_of_Players \nFROM country AS C \nJOIN match_season AS M ON C.Country_id = M.Country \nGROUP BY C.Country_name;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the distinct official native languages of countries represented by players in a specific position during matches. The placeholder in the WHERE clause represents the player's position.\",\n        \"virtual_table\": \"SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique player positions from the 'match_season' table for players representing countries with a specific capital city. The placeholder in the WHERE clause represents the name of the capital city.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT c.Country_name, COUNT(p.Player_ID) AS Number_of_Players\nFROM country c\nLEFT JOIN match_season ms ON c.Country_id = ms.Country\nLEFT JOIN player p ON ms.Team = p.Team\nGROUP BY c.Country_name;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT c.Country_name, COUNT(p.Player_ID) AS Number_of_Players\nFROM country c\nLEFT JOIN match_season ms ON c.Country_id = ms.Country\nLEFT JOIN player p ON ms.Player = p.Player\nGROUP BY c.Country_name;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT C.Country_name, COUNT(M.Player) AS Number_of_Players \nFROM country AS C \nJOIN match_season AS M ON C.Country_id = M.Country \nGROUP BY C.Country_name;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the distinct official native languages of countries represented by players in a specific position during matches. The placeholder in the WHERE clause represents the player's position.\",\n        \"virtual_table\": \"SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the players from the 'match_season' table who represent a specific country. The query joins the 'country' table to filter players based on the country's name, with a placeholder for the country name in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique player positions from the 'match_season' table for players representing countries with a specific capital city. The placeholder in the WHERE clause represents the name of the capital city.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT c.Country_name, COUNT(p.Player_ID) AS Number_of_Players\nFROM country c\nLEFT JOIN match_season ms ON c.Country_id = ms.Country\nLEFT JOIN player p ON ms.Team = p.Team\nGROUP BY c.Country_name;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1093",
        "c_low": "SELECT T1.Country_name, COUNT(T2.Player) AS Player_Count \nFROM country AS T1 \nJOIN match_season AS T2 ON T1.Country_id = T2.Country \nGROUP BY T1.Country_name;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the players from the 'match_season' table who represent a specific country. The query joins the 'country' table to filter players based on the country's name, with a placeholder for the country name in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT T1.Country_name, COUNT(T2.Player) AS Player_Count \nFROM country AS T1 \nJOIN match_season AS T2 ON T1.Country_id = T2.Country \nGROUP BY T1.Country_name;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the distinct official native languages of countries represented by players in a specific position during matches. The placeholder in the WHERE clause represents the player's position.\",\n        \"virtual_table\": \"SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the official native languages of countries represented by players who attended specific colleges. The placeholders in the WHERE clause allow for filtering based on the names of the colleges.\",\n        \"virtual_table\": \"SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  [PLACEHOLDER-TYPE:STRING] OR T2.College  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique player positions from the 'match_season' table for players representing countries with a specific capital city. The placeholder in the WHERE clause represents the name of the capital city.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT country.Country_name, COUNT(player.Player_ID) AS Player_Count \nFROM country \nJOIN match_season ON country.Country_id = match_season.Country \nJOIN player ON match_season.Player = player.Player \nGROUP BY country.Country_name;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and years played of players from the 'player' table who are part of a specific team. The placeholder in the WHERE clause represents the name of the team.\",\n        \"virtual_table\": \"SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT Country, COUNT(Player) AS Number_of_Players\nFROM match_season\nGROUP BY Country;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T1.Country_name, COUNT(T2.Player) AS Player_Count FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country GROUP BY T1.Country_name;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the players from the 'match_season' table who represent a specific country. The query joins the 'country' table to filter players based on the country's name, with a placeholder for the country name in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table counts the distinct official native languages of countries represented by players in a specific position during matches. The placeholder in the WHERE clause represents the player's position.\",\n        \"virtual_table\": \"SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the official native languages of countries represented by players who attended specific colleges. The placeholders in the WHERE clause allow for filtering based on the names of the colleges.\",\n        \"virtual_table\": \"SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  [PLACEHOLDER-TYPE:STRING] OR T2.College  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Country, COUNT(Player) AS Number_of_Players\nFROM match_season\nGROUP BY Country;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1094",
        "c_low": "SELECT Player, College FROM player ORDER BY College ASC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Player, College FROM player ORDER BY College ASC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT Player, College FROM player ORDER BY College ASC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of colleges from which players have participated in matches during a specific season. The results are grouped by college, and only those colleges with a number of players equal to or greater than a specified threshold are included. The placeholder in the HAVING clause represents the minimum number of players required from each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER] ORDER BY College DESC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the colleges that have produced a significant number of players participating in matches during a specific season. The placeholder in the HAVING clause represents the minimum count of players that must be associated with each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Player, College FROM player ORDER BY College ASC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of colleges from which players have participated in matches during a specific season. The results are grouped by college, and only those colleges with a number of players equal to or greater than a specified threshold are included. The placeholder in the HAVING clause represents the minimum number of players required from each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER] ORDER BY College DESC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the colleges that have produced a significant number of players participating in matches during a specific season. The placeholder in the HAVING clause represents the minimum count of players that must be associated with each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Player, College FROM player ORDER BY College ASC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT Player, College FROM player ORDER BY College ASC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1098",
        "c_low": "SELECT College, COUNT(*) as College_Count \nFROM match_season \nGROUP BY College \nORDER BY College_Count DESC \nLIMIT 3;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT College, COUNT(*) as College_Count FROM match_season GROUP BY College ORDER BY College_Count DESC LIMIT 3;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of distinct colleges represented by players in a specific team from the 'match_season' table. The placeholder in the WHERE clause allows for filtering by the team's name.\",\n        \"virtual_table\": \"SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the official native languages of countries represented by players who attended specific colleges. The placeholders in the WHERE clause allow for filtering based on the names of the colleges.\",\n        \"virtual_table\": \"SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  [PLACEHOLDER-TYPE:STRING] OR T2.College  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT College, COUNT(*) as Player_Count FROM match_season GROUP BY College ORDER BY Player_Count DESC LIMIT 3",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of colleges from which players have participated in matches during a specific season. The results are grouped by college, and only those colleges with a number of players equal to or greater than a specified threshold are included. The placeholder in the HAVING clause represents the minimum number of players required from each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER] ORDER BY College DESC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the colleges that have produced a significant number of players participating in matches during a specific season. The placeholder in the HAVING clause represents the minimum count of players that must be associated with each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT College, COUNT(*) as Player_Count FROM match_season GROUP BY College ORDER BY Player_Count DESC LIMIT 3",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of colleges from which players have participated in matches during a specific season. The results are grouped by college, and only those colleges with a number of players equal to or greater than a specified threshold are included. The placeholder in the HAVING clause represents the minimum number of players required from each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER] ORDER BY College DESC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the colleges that have produced a significant number of players participating in matches during a specific season. The placeholder in the HAVING clause represents the minimum count of players that must be associated with each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT College, COUNT(*) as College_Count FROM match_season GROUP BY College ORDER BY College_Count DESC LIMIT 3;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of distinct colleges represented by players in a specific team from the 'match_season' table. The placeholder in the WHERE clause allows for filtering by the team's name.\",\n        \"virtual_table\": \"SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the official native languages of countries represented by players who attended specific colleges. The placeholders in the WHERE clause allow for filtering based on the names of the colleges.\",\n        \"virtual_table\": \"SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  [PLACEHOLDER-TYPE:STRING] OR T2.College  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT College, COUNT(*) as College_Count \nFROM match_season \nGROUP BY College \nORDER BY College_Count DESC \nLIMIT 3;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1099",
        "c_low": "SELECT College, COUNT(*) as Player_Count\nFROM match_season\nGROUP BY College\nORDER BY Player_Count DESC\nLIMIT 3;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT College, COUNT(*) as Player_Count FROM match_season GROUP BY College ORDER BY Player_Count DESC LIMIT 3;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the official native languages of countries represented by players who attended specific colleges. The placeholders in the WHERE clause allow for filtering based on the names of the colleges.\",\n        \"virtual_table\": \"SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  [PLACEHOLDER-TYPE:STRING] OR T2.College  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of distinct colleges represented by players in a specific team from the 'match_season' table. The placeholder in the WHERE clause allows for filtering by the team's name.\",\n        \"virtual_table\": \"SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT College, COUNT(*) as Player_Count FROM match_season GROUP BY College ORDER BY Player_Count DESC LIMIT 3;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the colleges that have produced a significant number of players participating in matches during a specific season. The placeholder in the HAVING clause represents the minimum count of players that must be associated with each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of colleges from which players have participated in matches during a specific season. The results are grouped by college, and only those colleges with a number of players equal to or greater than a specified threshold are included. The placeholder in the HAVING clause represents the minimum number of players required from each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER] ORDER BY College DESC\"\n    }\n}\n",
        "t_1": "SELECT College, COUNT(*) as Player_Count FROM match_season GROUP BY College ORDER BY Player_Count DESC LIMIT 3;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the colleges that have produced a significant number of players participating in matches during a specific season. The placeholder in the HAVING clause represents the minimum count of players that must be associated with each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of colleges from which players have participated in matches during a specific season. The results are grouped by college, and only those colleges with a number of players equal to or greater than a specified threshold are included. The placeholder in the HAVING clause represents the minimum number of players required from each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER] ORDER BY College DESC\"\n    }\n}\n",
        "t_2": "SELECT College, COUNT(*) as Player_Count FROM match_season GROUP BY College ORDER BY Player_Count DESC LIMIT 3;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the official native languages of countries represented by players who attended specific colleges. The placeholders in the WHERE clause allow for filtering based on the names of the colleges.\",\n        \"virtual_table\": \"SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  [PLACEHOLDER-TYPE:STRING] OR T2.College  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of distinct colleges represented by players in a specific team from the 'match_season' table. The placeholder in the WHERE clause allows for filtering by the team's name.\",\n        \"virtual_table\": \"SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT College, COUNT(*) as Player_Count\nFROM match_season\nGROUP BY College\nORDER BY Player_Count DESC\nLIMIT 3;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1106",
        "c_low": "SELECT DISTINCT c.Country_name \nFROM country AS c \nJOIN match_season AS ms ON c.Country_id = ms.Country \nWHERE ms.Position IN ('forward', 'defender') \nGROUP BY c.Country_name \nHAVING COUNT(DISTINCT ms.Position) = 2;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the players from the 'match_season' table who represent a specific country. The query joins the 'country' table to filter players based on the country's name, with a placeholder for the country name in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the positions of players from the 'match_season' table who are part of a specific team. The placeholder in the WHERE clause represents the name of the team.\",\n        \"virtual_table\": \"SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT C.Country_name \nFROM country AS C \nJOIN match_season AS MS1 ON C.Country_id = MS1.Country \nJOIN match_season AS MS2 ON C.Country_id = MS2.Country \nWHERE MS1.Position = 'forward' AND MS2.Position = 'defender';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique player positions from the 'match_season' table for players representing countries with a specific capital city. The placeholder in the WHERE clause represents the name of the capital city.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table counts the distinct official native languages of countries represented by players in a specific position during matches. The placeholder in the WHERE clause represents the player's position.\",\n        \"virtual_table\": \"SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the official native languages of countries represented by players who attended specific colleges. The placeholders in the WHERE clause allow for filtering based on the names of the colleges.\",\n        \"virtual_table\": \"SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  [PLACEHOLDER-TYPE:STRING] OR T2.College  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT C.Country_name \nFROM country AS C \nJOIN match_season AS MS ON C.Country_id = MS.Country \nWHERE MS.Position IN ('forward', 'defender') \nGROUP BY C.Country_name \nHAVING COUNT(DISTINCT MS.Position) = 2;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and years played of players from the 'player' table who are part of a specific team. The placeholder in the WHERE clause represents the name of the team.\",\n        \"virtual_table\": \"SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT c.Country_name\nFROM country c\nJOIN match_season ms ON c.Country_id = ms.Country\nWHERE ms.Position IN ('forward', 'defender')\nGROUP BY c.Country_name\nHAVING COUNT(DISTINCT ms.Position) = 2;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT DISTINCT C.Country_name \nFROM country AS C \nJOIN match_season AS MS1 ON C.Country_id = MS1.Country \nJOIN match_season AS MS2 ON C.Country_id = MS2.Country \nWHERE MS1.Position = 'forward' AND MS2.Position = 'defender';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique player positions from the 'match_season' table for players representing countries with a specific capital city. The placeholder in the WHERE clause represents the name of the capital city.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table counts the distinct official native languages of countries represented by players in a specific position during matches. The placeholder in the WHERE clause represents the player's position.\",\n        \"virtual_table\": \"SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the players from the 'match_season' table who represent a specific country. The query joins the 'country' table to filter players based on the country's name, with a placeholder for the country name in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT c.Country_name\nFROM country c\nJOIN match_season ms ON c.Country_id = ms.Country\nWHERE ms.Position IN ('forward', 'defender')\nGROUP BY c.Country_name\nHAVING COUNT(DISTINCT ms.Position) = 2;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1107",
        "c_low": "SELECT DISTINCT c.Country_name \nFROM country AS c \nJOIN match_season AS ms ON c.Country_id = ms.Country \nWHERE ms.Position IN ('Forward', 'Defender');",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the players from the 'match_season' table who represent a specific country. The query joins the 'country' table to filter players based on the country's name, with a placeholder for the country name in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the positions of players from the 'match_season' table who are part of a specific team. The placeholder in the WHERE clause represents the name of the team.\",\n        \"virtual_table\": \"SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position IN ('Forward', 'Defender')",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique player positions from the 'match_season' table for players representing countries with a specific capital city. The placeholder in the WHERE clause represents the name of the capital city.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table counts the distinct official native languages of countries represented by players in a specific position during matches. The placeholder in the WHERE clause represents the player's position.\",\n        \"virtual_table\": \"SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the official native languages of countries represented by players who attended specific colleges. The placeholders in the WHERE clause allow for filtering based on the names of the colleges.\",\n        \"virtual_table\": \"SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  [PLACEHOLDER-TYPE:STRING] OR T2.College  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT c.Country_name \nFROM country AS c \nJOIN match_season AS ms ON c.Country_id = ms.Country \nWHERE ms.Position IN ('Forward', 'Defender');",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and years played of players from the 'player' table who are part of a specific team. The placeholder in the WHERE clause represents the name of the team.\",\n        \"virtual_table\": \"SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT c.Country_name \nFROM country c \nJOIN match_season ms ON c.Country_id = ms.Country \nWHERE ms.Position IN ('Forward', 'Defender');",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT DISTINCT C.Country_name \nFROM country AS C \nJOIN match_season AS MS ON C.Country_id = MS.Country \nWHERE MS.Position IN ('Forward', 'Defender');",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique player positions from the 'match_season' table for players representing countries with a specific capital city. The placeholder in the WHERE clause represents the name of the capital city.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table counts the distinct official native languages of countries represented by players in a specific position during matches. The placeholder in the WHERE clause represents the player's position.\",\n        \"virtual_table\": \"SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the players from the 'match_season' table who represent a specific country. The query joins the 'country' table to filter players based on the country's name, with a placeholder for the country name in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT c.Country_name \nFROM country c \nJOIN match_season ms ON c.Country_id = ms.Country \nWHERE ms.Position IN ('Forward', 'Defender');",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1108",
        "c_low": "SELECT DISTINCT m.College\nFROM match_season m\nJOIN player p ON m.Player = p.Player\nWHERE m.Position IN ('midfielder', 'defender')\nGROUP BY m.College\nHAVING COUNT(DISTINCT m.Position) = 2;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT DISTINCT T1.College \nFROM match_season AS T1 \nWHERE T1.Position = 'midfielder' \nAND T1.College IN (SELECT College FROM match_season WHERE Position = 'defender');",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the official native languages of countries represented by players who attended specific colleges. The placeholders in the WHERE clause allow for filtering based on the names of the colleges.\",\n        \"virtual_table\": \"SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  [PLACEHOLDER-TYPE:STRING] OR T2.College  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of distinct colleges represented by players in a specific team from the 'match_season' table. The placeholder in the WHERE clause allows for filtering by the team's name.\",\n        \"virtual_table\": \"SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT College FROM match_season WHERE Position IN ('midfielder', 'defender') GROUP BY College HAVING COUNT(DISTINCT Player) = 2",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the colleges that have produced a significant number of players participating in matches during a specific season. The placeholder in the HAVING clause represents the minimum count of players that must be associated with each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of colleges from which players have participated in matches during a specific season. The results are grouped by college, and only those colleges with a number of players equal to or greater than a specified threshold are included. The placeholder in the HAVING clause represents the minimum number of players required from each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER] ORDER BY College DESC\"\n    }\n}\n",
        "t_1": "SELECT College FROM match_season WHERE Position IN ('midfielder', 'defender') GROUP BY College HAVING COUNT(DISTINCT Player) = 2",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the colleges that have produced a significant number of players participating in matches during a specific season. The placeholder in the HAVING clause represents the minimum count of players that must be associated with each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of colleges from which players have participated in matches during a specific season. The results are grouped by college, and only those colleges with a number of players equal to or greater than a specified threshold are included. The placeholder in the HAVING clause represents the minimum number of players required from each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER] ORDER BY College DESC\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT T1.College \nFROM match_season AS T1 \nWHERE T1.Position = 'midfielder' \nAND T1.College IN (SELECT College FROM match_season WHERE Position = 'defender');",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the official native languages of countries represented by players who attended specific colleges. The placeholders in the WHERE clause allow for filtering based on the names of the colleges.\",\n        \"virtual_table\": \"SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  [PLACEHOLDER-TYPE:STRING] OR T2.College  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of distinct colleges represented by players in a specific team from the 'match_season' table. The placeholder in the WHERE clause allows for filtering by the team's name.\",\n        \"virtual_table\": \"SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT m.College\nFROM match_season m\nWHERE m.Position IN ('midfielder', 'defender')\nGROUP BY m.College\nHAVING COUNT(DISTINCT m.Position) = 2;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1109",
        "c_low": "SELECT DISTINCT College FROM match_season WHERE Position IN ('Midfielder', 'Defender')",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the positions of players from the 'match_season' table who are part of a specific team. The placeholder in the WHERE clause represents the name of the team.\",\n        \"virtual_table\": \"SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT College FROM match_season WHERE Position = 'Midfielder' OR Position = 'Defender';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the official native languages of countries represented by players who attended specific colleges. The placeholders in the WHERE clause allow for filtering based on the names of the colleges.\",\n        \"virtual_table\": \"SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  [PLACEHOLDER-TYPE:STRING] OR T2.College  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of distinct colleges represented by players in a specific team from the 'match_season' table. The placeholder in the WHERE clause allows for filtering by the team's name.\",\n        \"virtual_table\": \"SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique player positions from the 'match_season' table for players representing countries with a specific capital city. The placeholder in the WHERE clause represents the name of the capital city.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT College FROM match_season WHERE Position IN ('Midfielder', 'Defender') GROUP BY College HAVING count(*) >= 1 ORDER BY College DESC",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of colleges from which players have participated in matches during a specific season. The results are grouped by college, and only those colleges with a number of players equal to or greater than a specified threshold are included. The placeholder in the HAVING clause represents the minimum number of players required from each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER] ORDER BY College DESC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the colleges that have produced a significant number of players participating in matches during a specific season. The placeholder in the HAVING clause represents the minimum count of players that must be associated with each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT College FROM match_season WHERE Position IN ('Midfielder', 'Defender') GROUP BY College HAVING count(*) >= 1 ORDER BY College DESC",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of colleges from which players have participated in matches during a specific season. The results are grouped by college, and only those colleges with a number of players equal to or greater than a specified threshold are included. The placeholder in the HAVING clause represents the minimum number of players required from each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER] ORDER BY College DESC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the colleges that have produced a significant number of players participating in matches during a specific season. The placeholder in the HAVING clause represents the minimum count of players that must be associated with each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT College FROM match_season WHERE Position = 'Midfielder' OR Position = 'Defender';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the official native languages of countries represented by players who attended specific colleges. The placeholders in the WHERE clause allow for filtering based on the names of the colleges.\",\n        \"virtual_table\": \"SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  [PLACEHOLDER-TYPE:STRING] OR T2.College  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of distinct colleges represented by players in a specific team from the 'match_season' table. The placeholder in the WHERE clause allows for filtering by the team's name.\",\n        \"virtual_table\": \"SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique player positions from the 'match_season' table for players representing countries with a specific capital city. The placeholder in the WHERE clause represents the name of the capital city.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT College \nFROM match_season \nWHERE Position IN ('Midfielder', 'Defender');",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1122",
        "c_low": "SELECT DISTINCT Country FROM mountain WHERE Height > 5000;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the heights of mountains that climbers have ascended, ordered by the points awarded to the climbers. The placeholder in the LIMIT clause allows for specifying the number of results to return.\",\n        \"virtual_table\": \"SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT Country FROM mountain WHERE Height > 5000",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the climbing times of climbers who have ascended mountains located in a specific country. The placeholder in the WHERE clause represents the name of the country.\",\n        \"virtual_table\": \"SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT Country FROM mountain WHERE Height > '5000'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of mountains climbed by climbers from a specific country. The placeholder in the WHERE clause represents the country of origin of the climbers.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of countries that have more than a specified number of mountains in the 'mountain' table. The placeholder in the HAVING clause represents the minimum count of mountains required for a country to be included in the results.\",\n        \"virtual_table\": \"SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the number of climbers from each country who have climbed mountains. The placeholder in the SELECT statement allows for the retrieval of the country names, while the COUNT function aggregates the total number of climbers per country.\",\n        \"virtual_table\": \"SELECT Country ,  COUNT(*) FROM climber GROUP BY Country\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT Country FROM mountain WHERE Height > 5000",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of countries that have more than a specified number of mountains in the 'mountain' table. The placeholder in the HAVING clause represents the minimum count of mountains required for a country to be included in the results.\",\n        \"virtual_table\": \"SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of climbers from each country who have climbed mountains. The placeholder in the SELECT statement allows for the retrieval of the country names, while the COUNT function aggregates the total number of climbers per country.\",\n        \"virtual_table\": \"SELECT Country ,  COUNT(*) FROM climber GROUP BY Country\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT Country FROM mountain WHERE Height > 5000",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of mountains climbed by climbers from a specific country. The placeholder in the WHERE clause represents the country of origin of the climbers.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the climbing times of climbers who have ascended mountains located in a specific country. The placeholder in the WHERE clause represents the name of the country.\",\n        \"virtual_table\": \"SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the heights of mountains that climbers have ascended, ordered by the points awarded to the climbers. The placeholder in the LIMIT clause allows for specifying the number of results to return.\",\n        \"virtual_table\": \"SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT Country FROM mountain WHERE Height > '5000';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1123",
        "c_low": "SELECT DISTINCT Country FROM mountain WHERE Height > 5000;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the heights of mountains that climbers have ascended, ordered by the points awarded to the climbers. The placeholder in the LIMIT clause allows for specifying the number of results to return.\",\n        \"virtual_table\": \"SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT Country FROM mountain WHERE Height > 5000",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the climbing times of climbers who have ascended mountains located in a specific country. The placeholder in the WHERE clause represents the name of the country.\",\n        \"virtual_table\": \"SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT Country FROM mountain WHERE Height > 5000",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of countries that have more than a specified number of mountains in the 'mountain' table. The placeholder in the HAVING clause represents the minimum count of mountains required for a country to be included in the results.\",\n        \"virtual_table\": \"SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the distinct names of mountains climbed by climbers from a specific country. The placeholder in the WHERE clause represents the country of origin of the climbers.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the number of climbers from each country who have climbed mountains. The placeholder in the SELECT statement allows for the retrieval of the country names, while the COUNT function aggregates the total number of climbers per country.\",\n        \"virtual_table\": \"SELECT Country ,  COUNT(*) FROM climber GROUP BY Country\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT Country FROM mountain WHERE Height > 5000",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of countries that have more than a specified number of mountains in the 'mountain' table. The placeholder in the HAVING clause represents the minimum count of mountains required for a country to be included in the results.\",\n        \"virtual_table\": \"SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of climbers from each country who have climbed mountains. The placeholder in the SELECT statement allows for the retrieval of the country names, while the COUNT function aggregates the total number of climbers per country.\",\n        \"virtual_table\": \"SELECT Country ,  COUNT(*) FROM climber GROUP BY Country\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT Country FROM mountain WHERE Height > 5000",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of mountains climbed by climbers from a specific country. The placeholder in the WHERE clause represents the country of origin of the climbers.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the heights of mountains that climbers have ascended, ordered by the points awarded to the climbers. The placeholder in the LIMIT clause allows for specifying the number of results to return.\",\n        \"virtual_table\": \"SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the climbing times of climbers who have ascended mountains located in a specific country. The placeholder in the WHERE clause represents the name of the country.\",\n        \"virtual_table\": \"SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT Country FROM mountain WHERE Height > '5000';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1144",
        "c_low": "SELECT DISTINCT Country FROM mountain WHERE Height > 5600 OR Height < 5200;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the heights of mountains that climbers have ascended, ordered by the points awarded to the climbers. The placeholder in the LIMIT clause allows for specifying the number of results to return.\",\n        \"virtual_table\": \"SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT Country FROM mountain WHERE Height > 5600 OR Height < 5200;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the climbing times of climbers who have ascended mountains located in a specific country. The placeholder in the WHERE clause represents the name of the country.\",\n        \"virtual_table\": \"SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT Country FROM mountain WHERE Height > '5600' OR Height < '5200'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of mountains climbed by climbers from a specific country. The placeholder in the WHERE clause represents the country of origin of the climbers.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of countries that have more than a specified number of mountains in the 'mountain' table. The placeholder in the HAVING clause represents the minimum count of mountains required for a country to be included in the results.\",\n        \"virtual_table\": \"SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the number of climbers from each country who have climbed mountains. The placeholder in the SELECT statement allows for the retrieval of the country names, while the COUNT function aggregates the total number of climbers per country.\",\n        \"virtual_table\": \"SELECT Country ,  COUNT(*) FROM climber GROUP BY Country\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT Country FROM mountain WHERE Height > 5600 OR Height < 5200;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of countries that have more than a specified number of mountains in the 'mountain' table. The placeholder in the HAVING clause represents the minimum count of mountains required for a country to be included in the results.\",\n        \"virtual_table\": \"SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of climbers from each country who have climbed mountains. The placeholder in the SELECT statement allows for the retrieval of the country names, while the COUNT function aggregates the total number of climbers per country.\",\n        \"virtual_table\": \"SELECT Country ,  COUNT(*) FROM climber GROUP BY Country\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT Country FROM mountain WHERE Height > 5600 OR Height < 5200;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of mountains climbed by climbers from a specific country. The placeholder in the WHERE clause represents the country of origin of the climbers.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the heights of mountains that climbers have ascended, ordered by the points awarded to the climbers. The placeholder in the LIMIT clause allows for specifying the number of results to return.\",\n        \"virtual_table\": \"SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the climbing times of climbers who have ascended mountains located in a specific country. The placeholder in the WHERE clause represents the name of the country.\",\n        \"virtual_table\": \"SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT Country FROM mountain WHERE Height > '5600' OR Height < '5200';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1145",
        "c_low": "SELECT DISTINCT Country FROM mountain WHERE Height > 5600 OR Height < 5200 GROUP BY Country HAVING COUNT(CASE WHEN Height > 5600 THEN 1 END) > 0 AND COUNT(CASE WHEN Height < 5200 THEN 1 END) > 0;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the heights of mountains that climbers have ascended, ordered by the points awarded to the climbers. The placeholder in the LIMIT clause allows for specifying the number of results to return.\",\n        \"virtual_table\": \"SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT Country FROM mountain WHERE Height > 5600 OR Height < 5200 GROUP BY Country HAVING COUNT(CASE WHEN Height > 5600 THEN 1 END) > 0 AND COUNT(CASE WHEN Height < 5200 THEN 1 END) > 0;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the climbing times of climbers who have ascended mountains located in a specific country. The placeholder in the WHERE clause represents the name of the country.\",\n        \"virtual_table\": \"SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT Country FROM mountain WHERE Height > 5600 AND Height < 5200",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of mountains climbed by climbers from a specific country. The placeholder in the WHERE clause represents the country of origin of the climbers.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of countries that have more than a specified number of mountains in the 'mountain' table. The placeholder in the HAVING clause represents the minimum count of mountains required for a country to be included in the results.\",\n        \"virtual_table\": \"SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the number of climbers from each country who have climbed mountains. The placeholder in the SELECT statement allows for the retrieval of the country names, while the COUNT function aggregates the total number of climbers per country.\",\n        \"virtual_table\": \"SELECT Country ,  COUNT(*) FROM climber GROUP BY Country\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT m1.Country \nFROM mountain m1, mountain m2 \nWHERE m1.Height > 5600 AND m2.Height < 5200 AND m1.Country = m2.Country;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of countries that have more than a specified number of mountains in the 'mountain' table. The placeholder in the HAVING clause represents the minimum count of mountains required for a country to be included in the results.\",\n        \"virtual_table\": \"SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of climbers from each country who have climbed mountains. The placeholder in the SELECT statement allows for the retrieval of the country names, while the COUNT function aggregates the total number of climbers per country.\",\n        \"virtual_table\": \"SELECT Country ,  COUNT(*) FROM climber GROUP BY Country\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT Country FROM mountain WHERE Height > 5600 AND Height < 5200",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of mountains climbed by climbers from a specific country. The placeholder in the WHERE clause represents the country of origin of the climbers.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the climbing times of climbers who have ascended mountains located in a specific country. The placeholder in the WHERE clause represents the name of the country.\",\n        \"virtual_table\": \"SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the heights of mountains that climbers have ascended, ordered by the points awarded to the climbers. The placeholder in the LIMIT clause allows for specifying the number of results to return.\",\n        \"virtual_table\": \"SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT Country FROM mountain WHERE Height > 5600 OR Height < 5200;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1164",
        "c_low": "SELECT Birth_Place, COUNT(*) as Count\nFROM people\nGROUP BY Birth_Place\nORDER BY Count DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Birth_Place, COUNT(Birth_Place) AS Place_Count FROM people GROUP BY Birth_Place ORDER BY Place_Count DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the birth date and place of individuals associated with bodybuilders, sorted by the total weight lifted in descending order. The placeholder in the LIMIT clause allows for specifying the number of records to return.\",\n        \"virtual_table\": \"SELECT T2.Birth_Date ,  T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*) >= 1 ORDER BY COUNT(*) DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the birth places of individuals from the 'people' table, grouped by their birth place. The placeholder in the HAVING clause represents the minimum count of individuals required to include a birth place in the results.\",\n        \"virtual_table\": \"SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*) >= 1 ORDER BY COUNT(*) DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the birth places of individuals from the 'people' table, grouped by their birth place. The placeholder in the HAVING clause represents the minimum count of individuals required to include a birth place in the results.\",\n        \"virtual_table\": \"SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Birth_Place, COUNT(Birth_Place) AS Place_Count FROM people GROUP BY Birth_Place ORDER BY Place_Count DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the birth date and place of individuals associated with bodybuilders, sorted by the total weight lifted in descending order. The placeholder in the LIMIT clause allows for specifying the number of records to return.\",\n        \"virtual_table\": \"SELECT T2.Birth_Date ,  T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Birth_Place, COUNT(*) as Count\nFROM people\nGROUP BY Birth_Place\nORDER BY Count DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1171",
        "c_low": "SELECT p.Weight \nFROM body_builder bb \nJOIN people p ON bb.People_ID = p.People_ID \nWHERE bb.Snatch > 140 OR p.Height > 200;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the average weight lifted in the snatch event by bodybuilders from the 'body_builder' table. The result provides insights into the performance of bodybuilders in this specific event.\",\n        \"virtual_table\": \"SELECT avg(Snatch) FROM body_builder\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the clean jerk weights lifted by bodybuilders from the 'body_builder' table, sorted in descending order based on the total weight lifted across all events. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT T2.Weight FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Snatch > 140 OR T2.Height > 200;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of individuals from the 'people' table who are bodybuilders and have lifted a total weight exceeding a specified amount. The placeholder in the WHERE clause represents the total weight lifted.\",\n        \"virtual_table\": \"SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the heights of bodybuilders from the 'body_builder' table whose total weight lifted is below a specified threshold. The placeholder in the WHERE clause represents the maximum total weight lifted.\",\n        \"virtual_table\": \"SELECT T2.Height FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the birth date and place of individuals associated with bodybuilders, sorted by the total weight lifted in descending order. The placeholder in the LIMIT clause allows for specifying the number of records to return.\",\n        \"virtual_table\": \"SELECT T2.Birth_Date ,  T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT p.Weight FROM people p JOIN body_builder bb ON p.People_ID = bb.People_ID WHERE bb.Snatch > 140 OR p.Height > 200;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and birthplaces of individuals from the 'people' table who are not associated with any bodybuilder in the 'body_builder' table. The query uses an EXCEPT clause to exclude those who have a corresponding entry in the bodybuilder records.\",\n        \"virtual_table\": \"SELECT Name ,  birth_place FROM people EXCEPT SELECT T1.Name ,  T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id  =  T2.people_id\"\n    }\n}\n",
        "t_1": "SELECT p.Weight \nFROM body_builder bb \nJOIN people p ON bb.People_ID = p.People_ID \nWHERE bb.Snatch > 140 OR p.Height > 200;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the average weight lifted in the snatch event by bodybuilders from the 'body_builder' table. The result provides insights into the performance of bodybuilders in this specific event.\",\n        \"virtual_table\": \"SELECT avg(Snatch) FROM body_builder\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the clean jerk weights lifted by bodybuilders from the 'body_builder' table, sorted in descending order based on the total weight lifted across all events. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.Weight FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Snatch > 140 OR T2.Height > 200;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of individuals from the 'people' table who are bodybuilders and have lifted a total weight exceeding a specified amount. The placeholder in the WHERE clause represents the total weight lifted.\",\n        \"virtual_table\": \"SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the heights of bodybuilders from the 'body_builder' table whose total weight lifted is below a specified threshold. The placeholder in the WHERE clause represents the maximum total weight lifted.\",\n        \"virtual_table\": \"SELECT T2.Height FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the birth date and place of individuals associated with bodybuilders, sorted by the total weight lifted in descending order. The placeholder in the LIMIT clause allows for specifying the number of records to return.\",\n        \"virtual_table\": \"SELECT T2.Birth_Date ,  T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT p.Weight \nFROM body_builder bb \nJOIN people p ON bb.People_ID = p.People_ID \nWHERE bb.Snatch > 140 OR p.Height > 200;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1188",
        "c_low": "SELECT Party, COUNT(*) as Representative_Count \nFROM representative \nGROUP BY Party \nORDER BY Representative_Count DESC \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Party, COUNT(*) as RepresentativeCount FROM representative GROUP BY Party ORDER BY RepresentativeCount DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of representatives from the 'representative' table who have participated in elections where the total number of votes cast exceeds a specified threshold. The placeholder in the WHERE clause represents the minimum number of votes required to filter the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE Votes  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the average number of votes received in elections for representatives belonging to a specific political party. The placeholder in the WHERE clause represents the name of the political party.\",\n        \"virtual_table\": \"SELECT avg(T1.Votes) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE T2.Party  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT Party FROM representative GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of political parties from the 'representative' table that have a minimum number of representatives, as specified by the placeholder. The query groups the representatives by their party affiliation and filters the results based on the count of representatives in each party.\",\n        \"virtual_table\": \"SELECT Party FROM representative GROUP BY Party HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of states from the 'representative' table that have a number of representatives equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of representatives required for a state to be included in the results.\",\n        \"virtual_table\": \"SELECT State FROM representative GROUP BY State HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the political parties that are represented in two different states. The placeholders in the WHERE clauses represent the names of the states being compared.\",\n        \"virtual_table\": \"SELECT Party FROM representative WHERE State  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Party FROM representative WHERE State  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT Party FROM representative GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of political parties from the 'representative' table that have a minimum number of representatives, as specified by the placeholder. The query groups the representatives by their party affiliation and filters the results based on the count of representatives in each party.\",\n        \"virtual_table\": \"SELECT Party FROM representative GROUP BY Party HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of states from the 'representative' table that have a number of representatives equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of representatives required for a state to be included in the results.\",\n        \"virtual_table\": \"SELECT State FROM representative GROUP BY State HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the political parties that are represented in two different states. The placeholders in the WHERE clauses represent the names of the states being compared.\",\n        \"virtual_table\": \"SELECT Party FROM representative WHERE State  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Party FROM representative WHERE State  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT T2.Party, COUNT(T2.Representative_ID) AS Representative_Count FROM representative AS T2 GROUP BY T2.Party ORDER BY Representative_Count DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of representatives from the 'representative' table who have participated in elections where the total number of votes cast exceeds a specified threshold. The placeholder in the WHERE clause represents the minimum number of votes required to filter the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE Votes  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the average number of votes received in elections for representatives belonging to a specific political party. The placeholder in the WHERE clause represents the name of the political party.\",\n        \"virtual_table\": \"SELECT avg(T1.Votes) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE T2.Party  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Party, COUNT(*) as NumberOfRepresentatives\nFROM representative\nGROUP BY Party\nORDER BY NumberOfRepresentatives DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1220",
        "c_low": "SELECT A.apt_number, B.booking_start_date, B.booking_end_date \nFROM Apartment_Bookings AS B \nJOIN Apartments AS A ON B.apt_id = A.apt_id;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the total number of rooms across all apartments in a specific apartment building identified by its abbreviated name. The placeholder in the WHERE clause represents the building's short name.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average number of rooms in apartments that have been booked with a specific booking status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT T2.apt_number, T1.booking_start_date, T1.booking_end_date \nFROM Apartment_Bookings AS T1 \nJOIN Apartments AS T2 ON T1.apt_id = T2.apt_id;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique apartment numbers from the 'Apartments' table that are associated with bookings having a specific status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT A.apt_number, B.booking_start_date, B.booking_end_date \nFROM Apartment_Bookings AS B \nJOIN Apartments AS A ON B.apt_id = A.apt_id;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the first and last names of guests who have made apartment bookings with a specific booking status. The placeholder in the WHERE clause represents the status of the booking.\",\n        \"virtual_table\": \"SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_1": "SELECT a.apt_number, ab.booking_start_date, ab.booking_end_date \nFROM Apartment_Bookings ab \nJOIN Apartments a ON ab.apt_id = a.apt_id;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type.\",\n        \"virtual_table\": \"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\"\n    }\n}\n",
        "t_2": "SELECT T2.apt_number, T1.booking_start_date, T1.booking_end_date \nFROM Apartment_Bookings AS T1 \nJOIN Apartments AS T2 ON T1.apt_id = T2.apt_id;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique apartment numbers from the 'Apartments' table that are associated with bookings having a specific status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Apartments.apt_number, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date\nFROM Apartment_Bookings\nJOIN Apartments ON Apartment_Bookings.apt_id = Apartments.apt_id;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1221",
        "c_low": "SELECT A.apt_number, B.booking_start_date, B.booking_end_date \nFROM Apartment_Bookings AS B \nJOIN Apartments AS A ON B.apt_id = A.apt_id;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the total number of rooms across all apartments in a specific apartment building identified by its abbreviated name. The placeholder in the WHERE clause represents the building's short name.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average number of rooms in apartments that have been booked with a specific booking status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT T2.apt_number, T1.booking_start_date, T1.booking_end_date \nFROM Apartment_Bookings AS T1 \nJOIN Apartments AS T2 ON T1.apt_id = T2.apt_id;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique apartment numbers from the 'Apartments' table that are associated with bookings having a specific status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT A.apt_number, B.booking_start_date, B.booking_end_date \nFROM Apartment_Bookings AS B \nJOIN Apartments AS A ON B.apt_id = A.apt_id;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the first and last names of guests who have made apartment bookings with a specific booking status. The placeholder in the WHERE clause represents the status of the booking.\",\n        \"virtual_table\": \"SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_1": "SELECT a.apt_number, ab.booking_start_date, ab.booking_end_date \nFROM Apartment_Bookings ab \nJOIN Apartments a ON ab.apt_id = a.apt_id;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type.\",\n        \"virtual_table\": \"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\"\n    }\n}\n",
        "t_2": "SELECT A.apt_number, B.booking_start_date, B.booking_end_date \nFROM Apartment_Bookings AS B \nJOIN Apartments AS A ON B.apt_id = A.apt_id;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the first and last names of guests who have made apartment bookings with a specific booking status. The placeholder in the WHERE clause represents the status of the booking.\",\n        \"virtual_table\": \"SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Apartments.apt_number, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date\nFROM Apartment_Bookings\nJOIN Apartments ON Apartment_Bookings.apt_id = Apartments.apt_id;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1222",
        "c_low": "SELECT AB.booking_start_date, AB.booking_end_date \nFROM Apartment_Bookings AS AB \nJOIN Apartments AS A ON AB.apt_id = A.apt_id \nWHERE A.apt_type_code = 'Duplex';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the addresses of apartment buildings that contain apartments with a specified number of bathrooms. The placeholder in the WHERE clause represents the minimum number of bathrooms required for the apartments.\",\n        \"virtual_table\": \"SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average number of rooms in apartments that have been booked with a specific booking status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT AB.booking_start_date, AB.booking_end_date \nFROM Apartment_Bookings AB \nJOIN Apartments A ON AB.apt_id = A.apt_id \nWHERE A.apt_type_code = 'Duplex';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique apartment numbers from the 'Apartments' table that are associated with bookings having a specific status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT AB.booking_start_date, AB.booking_end_date \nFROM Apartment_Bookings AB \nJOIN Apartments A ON AB.apt_id = A.apt_id \nWHERE A.apt_type_code = 'Duplex';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the first and last names of guests who have made apartment bookings with a specific booking status. The placeholder in the WHERE clause represents the status of the booking.\",\n        \"virtual_table\": \"SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_1": "SELECT ab.booking_start_date, ab.booking_end_date \nFROM Apartment_Bookings ab \nJOIN Apartments a ON ab.apt_id = a.apt_id \nWHERE a.apt_type_code = 'Duplex';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type.\",\n        \"virtual_table\": \"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\"\n    }\n}\n",
        "t_2": "SELECT AB.booking_start_date, AB.booking_end_date \nFROM Apartment_Bookings AB \nJOIN Apartments A ON AB.apt_id = A.apt_id \nWHERE A.apt_type_code = 'Duplex';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the first and last names of guests who have made apartment bookings with a specific booking status. The placeholder in the WHERE clause represents the status of the booking.\",\n        \"virtual_table\": \"SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT ab.booking_start_date, ab.booking_end_date\nFROM Apartments a\nJOIN Apartment_Bookings ab ON a.apt_id = ab.apt_id\nWHERE a.apt_type_code = 'Duplex';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1223",
        "c_low": "SELECT booking_start_date, booking_end_date FROM Apartment_Bookings AS AB JOIN Apartments AS A ON AB.apt_id = A.apt_id WHERE A.apt_type_code = 'Duplex';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the average number of rooms in apartments that have been booked with a specific booking status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total number of rooms across all apartments in a specific apartment building identified by its abbreviated name. The placeholder in the WHERE clause represents the building's short name.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT AB.booking_start_date, AB.booking_end_date \nFROM Apartment_Bookings AS AB \nJOIN Apartments AS A ON AB.apt_id = A.apt_id \nWHERE A.apt_type_code = 'Duplex';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique apartment numbers from the 'Apartments' table that are associated with bookings having a specific status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT AB.booking_start_date, AB.booking_end_date \nFROM Apartment_Bookings AB \nJOIN Apartments A ON AB.apt_id = A.apt_id \nWHERE A.apt_type_code = 'Duplex';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the first and last names of guests who have made apartment bookings with a specific booking status. The placeholder in the WHERE clause represents the status of the booking.\",\n        \"virtual_table\": \"SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_1": "SELECT ab.booking_start_date, ab.booking_end_date \nFROM Apartment_Bookings ab \nJOIN Apartments a ON ab.apt_id = a.apt_id \nWHERE a.apt_type_code = 'Duplex';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type.\",\n        \"virtual_table\": \"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\"\n    }\n}\n",
        "t_2": "SELECT AB.booking_start_date, AB.booking_end_date \nFROM Apartment_Bookings AB \nJOIN Apartments A ON AB.apt_id = A.apt_id \nWHERE A.apt_type_code = 'Duplex';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the first and last names of guests who have made apartment bookings with a specific booking status. The placeholder in the WHERE clause represents the status of the booking.\",\n        \"virtual_table\": \"SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT ab.booking_start_date, ab.booking_end_date\nFROM Apartments a\nJOIN Apartment_Bookings ab ON a.apt_id = ab.apt_id\nWHERE a.apt_type_code = 'Duplex';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1224",
        "c_low": "SELECT AB.booking_start_date, AB.booking_end_date \nFROM Apartment_Bookings AS AB \nJOIN Apartments AS A ON AB.apt_id = A.apt_id \nWHERE A.bedroom_count > 2;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the average number of rooms in apartments that have been booked with a specific booking status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the addresses of apartment buildings that contain apartments with a specified number of bathrooms. The placeholder in the WHERE clause represents the minimum number of bathrooms required for the apartments.\",\n        \"virtual_table\": \"SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT AB.booking_start_date, AB.booking_end_date \nFROM Apartment_Bookings AB \nJOIN Apartments A ON AB.apt_id = A.apt_id \nWHERE A.bedroom_count > 2;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique apartment numbers from the 'Apartments' table that are associated with bookings having a specific status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT booking_start_date, booking_end_date \nFROM Apartment_Bookings AS AB \nJOIN Apartments AS A ON AB.apt_id = A.apt_id \nWHERE A.bedroom_count > 2;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of guests who have made apartment bookings with a specific booking status. The placeholder in the WHERE clause represents the status of the booking.\",\n        \"virtual_table\": \"SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_1": "SELECT ab.booking_start_date, ab.booking_end_date \nFROM Apartments a \nJOIN Apartment_Bookings ab ON a.apt_id = ab.apt_id \nWHERE a.bedroom_count > 2;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_2": "SELECT A.booking_start_date, A.booking_end_date \nFROM Apartment_Bookings AS A \nJOIN Apartments AS B ON A.apt_id = B.apt_id \nWHERE B.bedroom_count > 2;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of guests who have made apartment bookings with a specific booking status. The placeholder in the WHERE clause represents the status of the booking.\",\n        \"virtual_table\": \"SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date\nFROM Apartments\nJOIN Apartment_Bookings ON Apartments.apt_id = Apartment_Bookings.apt_id\nWHERE Apartments.bedroom_count > 2;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1225",
        "c_low": "SELECT booking_start_date, booking_end_date FROM Apartment_Bookings AS AB JOIN Apartments AS A ON AB.apt_id = A.apt_id WHERE A.bedroom_count > 2;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the average number of rooms in apartments that have been booked with a specific booking status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total number of rooms across all apartments in a specific apartment building identified by its abbreviated name. The placeholder in the WHERE clause represents the building's short name.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT AB.booking_start_date, AB.booking_end_date \nFROM Apartment_Bookings AS AB \nJOIN Apartments AS A ON AB.apt_id = A.apt_id \nWHERE A.bedroom_count > 2;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique apartment numbers from the 'Apartments' table that are associated with bookings having a specific status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT booking_start_date, booking_end_date FROM Apartment_Bookings AS AB JOIN Apartments AS A ON AB.apt_id = A.apt_id WHERE A.bedroom_count > 2;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the first and last names of guests who have made apartment bookings with a specific booking status. The placeholder in the WHERE clause represents the status of the booking.\",\n        \"virtual_table\": \"SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_1": "SELECT ab.booking_start_date, ab.booking_end_date \nFROM Apartment_Bookings ab \nJOIN Apartments a ON ab.apt_id = a.apt_id \nWHERE a.bedroom_count > 2;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type.\",\n        \"virtual_table\": \"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\"\n    }\n}\n",
        "t_2": "SELECT booking_start_date, booking_end_date FROM Apartment_Bookings AS AB JOIN Apartments AS A ON AB.apt_id = A.apt_id WHERE A.bedroom_count > 2;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the first and last names of guests who have made apartment bookings with a specific booking status. The placeholder in the WHERE clause represents the status of the booking.\",\n        \"virtual_table\": \"SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average number of rooms in apartments that have been booked with a specific booking status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date \nFROM Apartments \nJOIN Apartment_Bookings ON Apartments.apt_id = Apartment_Bookings.apt_id \nWHERE Apartments.bedroom_count > 2;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1229",
        "c_low": "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = 'Confirmed'",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the average number of rooms in apartments that have been booked with a specific booking status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total number of rooms across all apartments in a specific apartment building identified by its abbreviated name. The placeholder in the WHERE clause represents the building's short name.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = 'Confirmed'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique apartment numbers from the 'Apartments' table that are associated with bookings having a specific status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = 'Confirmed'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the first and last names of guests who have made apartment bookings with a specific booking status. The placeholder in the WHERE clause represents the status of the booking.\",\n        \"virtual_table\": \"SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT a.apt_number \nFROM Apartments a \nJOIN Apartment_Bookings ab ON a.apt_id = ab.apt_id \nWHERE ab.booking_status_code = 'Confirmed';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type.\",\n        \"virtual_table\": \"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = 'Confirmed'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique apartment numbers from the 'Apartments' table that are associated with bookings having a specific status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT a.apt_number \nFROM Apartments a \nJOIN Apartment_Bookings ab ON a.apt_id = ab.apt_id \nWHERE ab.booking_status_code = 'Confirmed';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1232",
        "c_low": "SELECT G.guest_first_name, B.booking_start_date, B.booking_end_date \nFROM Apartment_Bookings AS B \nJOIN Guests AS G ON B.guest_id = G.guest_id;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total number of rooms across all apartments in a specific apartment building identified by its abbreviated name. The placeholder in the WHERE clause represents the building's short name.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average number of rooms in apartments that have been booked with a specific booking status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT Guests.guest_first_name, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date \nFROM Apartment_Bookings \nJOIN Guests ON Apartment_Bookings.guest_id = Guests.guest_id;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique apartment numbers from the 'Apartments' table that are associated with bookings having a specific status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT T2.guest_first_name, T1.booking_start_date, T1.booking_end_date \nFROM Apartment_Bookings AS T1 \nJOIN Guests AS T2 ON T1.guest_id = T2.guest_id;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of guests who have made apartment bookings with a specific booking status. The placeholder in the WHERE clause represents the status of the booking.\",\n        \"virtual_table\": \"SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_1": "SELECT Guests.guest_first_name, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date \nFROM Apartment_Bookings \nJOIN Guests ON Apartment_Bookings.guest_id = Guests.guest_id;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_2": "SELECT T2.guest_first_name, T1.booking_start_date, T1.booking_end_date \nFROM Apartment_Bookings AS T1 \nJOIN Guests AS T2 ON T1.guest_id = T2.guest_id;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of guests who have made apartment bookings with a specific booking status. The placeholder in the WHERE clause represents the status of the booking.\",\n        \"virtual_table\": \"SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total number of rooms across all apartments in a specific apartment building identified by its abbreviated name. The placeholder in the WHERE clause represents the building's short name.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Guests.guest_first_name, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date\nFROM Apartment_Bookings\nJOIN Guests ON Apartment_Bookings.guest_id = Guests.guest_id;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1233",
        "c_low": "SELECT G.guest_first_name, AB.booking_start_date, AB.booking_end_date \nFROM Apartment_Bookings AS AB \nJOIN Guests AS G ON AB.guest_id = G.guest_id;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the total number of rooms across all apartments in a specific apartment building identified by its abbreviated name. The placeholder in the WHERE clause represents the building's short name.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average number of rooms in apartments that have been booked with a specific booking status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT Guests.guest_first_name, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date \nFROM Apartment_Bookings \nJOIN Guests ON Apartment_Bookings.guest_id = Guests.guest_id;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique apartment numbers from the 'Apartments' table that are associated with bookings having a specific status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT T2.guest_first_name, T1.booking_start_date, T1.booking_end_date \nFROM Apartment_Bookings AS T1 \nJOIN Guests AS T2 ON T1.guest_id = T2.guest_id;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of guests who have made apartment bookings with a specific booking status. The placeholder in the WHERE clause represents the status of the booking.\",\n        \"virtual_table\": \"SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_1": "SELECT Guests.guest_first_name, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date \nFROM Apartment_Bookings \nJOIN Guests ON Apartment_Bookings.guest_id = Guests.guest_id;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_2": "SELECT T2.guest_first_name, T1.booking_start_date, T1.booking_end_date \nFROM Apartment_Bookings AS T1 \nJOIN Guests AS T2 ON T1.guest_id = T2.guest_id;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of guests who have made apartment bookings with a specific booking status. The placeholder in the WHERE clause represents the status of the booking.\",\n        \"virtual_table\": \"SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Guests.guest_first_name, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date\nFROM Apartment_Bookings\nJOIN Guests ON Apartment_Bookings.guest_id = Guests.guest_id;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1234",
        "c_low": "SELECT AB.booking_start_date, AB.booking_end_date \nFROM Apartment_Bookings AS AB \nJOIN Guests AS G ON AB.guest_id = G.guest_id \nWHERE G.gender_code = 'Female';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the average number of rooms in apartments that have been booked with a specific booking status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT AB.booking_start_date, AB.booking_end_date \nFROM Apartment_Bookings AS AB \nJOIN Guests AS G ON AB.guest_id = G.guest_id \nWHERE G.gender_code = 'Female';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique apartment numbers from the 'Apartments' table that are associated with bookings having a specific status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT T1.booking_start_date, T1.booking_end_date \nFROM Apartment_Bookings AS T1 \nJOIN Guests AS T2 ON T1.guest_id = T2.guest_id \nWHERE T2.gender_code = 'Female'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of guests who have made apartment bookings with a specific booking status. The placeholder in the WHERE clause represents the status of the booking.\",\n        \"virtual_table\": \"SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of guests categorized by their gender from the 'Guests' table. The placeholder in the SELECT clause represents the gender code, while the COUNT function aggregates the total number of guests for each gender, ordered by the count in descending order.\",\n        \"virtual_table\": \"SELECT gender_code ,  COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date \nFROM Apartment_Bookings \nJOIN Guests ON Apartment_Bookings.guest_id = Guests.guest_id \nWHERE Guests.gender_code = 'Female';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of guests categorized by their gender from the 'Guests' table. The placeholder in the SELECT clause represents the gender code, while the COUNT function aggregates the total number of guests for each gender, ordered by the count in descending order.\",\n        \"virtual_table\": \"SELECT gender_code ,  COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_2": "SELECT T1.booking_start_date, T1.booking_end_date \nFROM Apartment_Bookings AS T1 \nJOIN Guests AS T2 ON T1.guest_id = T2.guest_id \nWHERE T2.gender_code = 'Female';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of guests who have made apartment bookings with a specific booking status. The placeholder in the WHERE clause represents the status of the booking.\",\n        \"virtual_table\": \"SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date \nFROM Apartment_Bookings \nJOIN Guests ON Apartment_Bookings.guest_id = Guests.guest_id \nWHERE Guests.gender_code = 'Female';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1235",
        "c_low": "SELECT AB.booking_start_date, AB.booking_end_date \nFROM Apartment_Bookings AS AB \nJOIN Guests AS G ON AB.guest_id = G.guest_id \nWHERE G.gender_code = 'Female';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the average number of rooms in apartments that have been booked with a specific booking status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT T1.booking_start_date, T1.booking_end_date \nFROM Apartment_Bookings AS T1 \nJOIN Guests AS T2 ON T1.guest_id = T2.guest_id \nWHERE T2.gender_code = 'Female';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique apartment numbers from the 'Apartments' table that are associated with bookings having a specific status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT T1.booking_start_date, T1.booking_end_date \nFROM Apartment_Bookings AS T1 \nJOIN Guests AS T2 ON T1.guest_id = T2.guest_id \nWHERE T2.gender_code = 'Female'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of guests who have made apartment bookings with a specific booking status. The placeholder in the WHERE clause represents the status of the booking.\",\n        \"virtual_table\": \"SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_1": "SELECT ab.booking_start_date, ab.booking_end_date \nFROM Apartment_Bookings ab \nJOIN Guests g ON ab.guest_id = g.guest_id \nWHERE g.gender_code = 'Female';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of guests categorized by their gender from the 'Guests' table. The placeholder in the SELECT clause represents the gender code, while the COUNT function aggregates the total number of guests for each gender, ordered by the count in descending order.\",\n        \"virtual_table\": \"SELECT gender_code ,  COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC\"\n    }\n}\n",
        "t_2": "SELECT T1.booking_start_date, T1.booking_end_date \nFROM Apartment_Bookings AS T1 \nJOIN Guests AS T2 ON T1.guest_id = T2.guest_id \nWHERE T2.gender_code = 'Female';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of guests who have made apartment bookings with a specific booking status. The placeholder in the WHERE clause represents the status of the booking.\",\n        \"virtual_table\": \"SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date\nFROM Apartment_Bookings\nJOIN Guests ON Apartment_Bookings.guest_id = Guests.guest_id\nWHERE Guests.gender_code = 'Female';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1238",
        "c_low": "SELECT DISTINCT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 4;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total number of rooms in apartments that have a specific facility associated with them. The placeholder in the WHERE clause represents the facility code that is being queried.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the addresses of apartment buildings that contain apartments with a specified number of bathrooms. The placeholder in the WHERE clause represents the minimum number of bathrooms required for the apartments.\",\n        \"virtual_table\": \"SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT AF.facility_code \nFROM Apartments AS A \nJOIN Apartment_Facilities AS AF ON A.apt_id = AF.apt_id \nWHERE A.bedroom_count > 4;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique apartment numbers from the 'Apartments' table that are associated with bookings having a specific status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT af.facility_code \nFROM Apartments a \nJOIN Apartment_Facilities af ON a.apt_id = af.apt_id \nWHERE a.bedroom_count > 4;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type.\",\n        \"virtual_table\": \"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT af.facility_code \nFROM Apartments a \nJOIN Apartment_Facilities af ON a.apt_id = af.apt_id \nWHERE a.bedroom_count > 4;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type.\",\n        \"virtual_table\": \"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 4;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total number of rooms in apartments that have a specific facility associated with them. The placeholder in the WHERE clause represents the facility code that is being queried.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the addresses of apartment buildings that contain apartments with a specified number of bathrooms. The placeholder in the WHERE clause represents the minimum number of bathrooms required for the apartments.\",\n        \"virtual_table\": \"SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT af.facility_code\nFROM Apartments a\nJOIN Apartment_Facilities af ON a.apt_id = af.apt_id\nWHERE a.bedroom_count > 4;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1239",
        "c_low": "SELECT DISTINCT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 4;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the total number of rooms in apartments that have a specific facility associated with them. The placeholder in the WHERE clause represents the facility code that is being queried.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the addresses of apartment buildings that contain apartments with a specified number of bathrooms. The placeholder in the WHERE clause represents the minimum number of bathrooms required for the apartments.\",\n        \"virtual_table\": \"SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT T3.facility_code \nFROM Apartment_Facilities AS T3 \nJOIN Apartments AS T2 ON T3.apt_id = T2.apt_id \nWHERE T2.bedroom_count > 4;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique apartment numbers from the 'Apartments' table that are associated with bookings having a specific status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT AF.facility_code \nFROM Apartments A \nJOIN Apartment_Facilities AF ON A.apt_id = AF.apt_id \nWHERE A.bedroom_count > 4;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type.\",\n        \"virtual_table\": \"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the type code and apartment number of apartments located in buildings managed by a specific building manager. The placeholder in the WHERE clause represents the name of the building manager.\",\n        \"virtual_table\": \"SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT af.facility_code \nFROM Apartments a \nJOIN Apartment_Facilities af ON a.apt_id = af.apt_id \nWHERE a.bedroom_count > 4;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type.\",\n        \"virtual_table\": \"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT T1.facility_code \nFROM Apartment_Facilities AS T1 \nJOIN Apartments AS T2 ON T1.apt_id = T2.apt_id \nWHERE T2.bedroom_count > 4;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the total number of rooms in apartments that have a specific facility associated with them. The placeholder in the WHERE clause represents the facility code that is being queried.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT af.facility_code \nFROM Apartments a \nJOIN Apartment_Facilities af ON a.apt_id = af.apt_id \nWHERE a.bedroom_count > 4;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1256",
        "c_low": "SELECT apt_type_code, AVG(room_count) AS average_rooms \nFROM Apartments \nGROUP BY apt_type_code \nORDER BY average_rooms DESC \nLIMIT 3;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the average number of rooms in apartments that have been booked with a specific booking status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total number of rooms across all apartments in a specific apartment building identified by its abbreviated name. The placeholder in the WHERE clause represents the building's short name.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT apt_type_code, AVG(room_count) AS average_rooms\nFROM Apartments\nGROUP BY apt_type_code\nORDER BY average_rooms DESC\nLIMIT 3;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique apartment numbers from the 'Apartments' table that are associated with bookings having a specific status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT apt_type_code, AVG(room_count) AS average_rooms \nFROM Apartments \nGROUP BY apt_type_code \nORDER BY average_rooms DESC \nLIMIT 3;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type.\",\n        \"virtual_table\": \"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT apt_type_code, AVG(room_count) AS average_rooms \nFROM Apartments \nGROUP BY apt_type_code \nORDER BY average_rooms DESC \nLIMIT 3;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type.\",\n        \"virtual_table\": \"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_2": "SELECT apt_type_code, AVG(room_count) AS average_rooms \nFROM Apartments \nGROUP BY apt_type_code \nORDER BY average_rooms DESC \nLIMIT 3;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the average number of rooms in apartments that have been booked with a specific booking status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total number of rooms across all apartments in a specific apartment building identified by its abbreviated name. The placeholder in the WHERE clause represents the building's short name.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT apt_type_code, AVG(room_count) AS average_rooms\nFROM Apartments\nGROUP BY apt_type_code\nORDER BY average_rooms DESC\nLIMIT 3;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1257",
        "c_low": "SELECT apt_type_code, AVG(room_count) AS average_room_count \nFROM Apartments \nGROUP BY apt_type_code \nORDER BY average_room_count DESC \nLIMIT 3;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total number of rooms across all apartments in a specific apartment building identified by its abbreviated name. The placeholder in the WHERE clause represents the building's short name.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the average number of rooms in apartments that have been booked with a specific booking status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total number of rooms in apartments that have a specific facility associated with them. The placeholder in the WHERE clause represents the facility code that is being queried.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT apt_type_code, AVG(room_count) AS average_room_count\nFROM Apartments\nGROUP BY apt_type_code\nORDER BY average_room_count DESC\nLIMIT 3;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT apt_type_code, AVG(room_count) AS average_room_count \nFROM Apartments \nGROUP BY apt_type_code \nORDER BY average_room_count DESC \nLIMIT 3;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type.\",\n        \"virtual_table\": \"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the apartment numbers from the 'Apartments' table that are available based on a specific availability status. The query uses an INTERSECT operation to find common apartment numbers that meet the availability criteria specified by the placeholders.\",\n        \"virtual_table\": \"SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT apt_type_code, AVG(room_count) AS average_room_count \nFROM Apartments \nGROUP BY apt_type_code \nORDER BY average_room_count DESC \nLIMIT 3;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type.\",\n        \"virtual_table\": \"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_2": "SELECT apt_type_code, AVG(room_count) AS average_room_count \nFROM Apartments \nGROUP BY apt_type_code \nORDER BY average_room_count DESC \nLIMIT 3;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total number of rooms across all apartments in a specific apartment building identified by its abbreviated name. The placeholder in the WHERE clause represents the building's short name.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the average number of rooms in apartments that have been booked with a specific booking status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total number of rooms in apartments that have a specific facility associated with them. The placeholder in the WHERE clause represents the facility code that is being queried.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT apt_type_code, AVG(room_count) AS average_room_count\nFROM Apartments\nGROUP BY apt_type_code\nORDER BY average_room_count DESC\nLIMIT 3;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1258",
        "c_low": "SELECT apt_type_code, MAX(room_count) AS max_rooms, bathroom_count, bedroom_count \nFROM Apartments \nGROUP BY apt_type_code \nORDER BY max_rooms DESC \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total number of rooms across all apartments in a specific apartment building identified by its abbreviated name. The placeholder in the WHERE clause represents the building's short name.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the addresses of apartment buildings that contain apartments with a specified number of bathrooms. The placeholder in the WHERE clause represents the minimum number of bathrooms required for the apartments.\",\n        \"virtual_table\": \"SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total number of rooms in apartments that have a specific facility associated with them. The placeholder in the WHERE clause represents the facility code that is being queried.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT apt_type_code, MAX(room_count) AS max_rooms, bathroom_count, bedroom_count \nFROM Apartments \nGROUP BY apt_type_code \nORDER BY max_rooms DESC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique apartment numbers from the 'Apartments' table that are associated with bookings having a specific status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT apt_type_code, MAX(total_rooms) AS max_rooms, bathrooms, bedrooms \nFROM (\n    SELECT a.apt_type_code, \n           SUM(a.room_count) AS total_rooms, \n           AVG(a.bathroom_count) AS bathrooms, \n           AVG(a.bedroom_count) AS bedrooms \n    FROM Apartments a \n    GROUP BY a.apt_type_code\n) AS apartment_summary;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type.\",\n        \"virtual_table\": \"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_1": "SELECT apt_type_code, SUM(bathroom_count) AS total_bathrooms, SUM(bedroom_count) AS total_bedrooms, SUM(room_count) AS total_rooms\nFROM Apartments\nGROUP BY apt_type_code\nORDER BY total_rooms DESC\nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type.\",\n        \"virtual_table\": \"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_2": "SELECT apt_type_code, MAX(room_count) AS max_rooms, bathroom_count, bedroom_count \nFROM Apartments \nGROUP BY apt_type_code \nORDER BY max_rooms DESC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total number of rooms across all apartments in a specific apartment building identified by its abbreviated name. The placeholder in the WHERE clause represents the building's short name.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the addresses of apartment buildings that contain apartments with a specified number of bathrooms. The placeholder in the WHERE clause represents the minimum number of bathrooms required for the apartments.\",\n        \"virtual_table\": \"SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total number of rooms in apartments that have a specific facility associated with them. The placeholder in the WHERE clause represents the facility code that is being queried.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT apt_type_code, MAX(room_count) AS max_rooms, bathroom_count, bedroom_count\nFROM Apartments\nGROUP BY apt_type_code, bathroom_count, bedroom_count\nORDER BY max_rooms DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1259",
        "c_low": "SELECT apt_type_code, bathroom_count, bedroom_count FROM Apartments ORDER BY room_count DESC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total number of rooms across all apartments in a specific apartment building identified by its abbreviated name. The placeholder in the WHERE clause represents the building's short name.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the total number of rooms in apartments that have a specific facility associated with them. The placeholder in the WHERE clause represents the facility code that is being queried.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the addresses of apartment buildings that contain apartments with a specified number of bathrooms. The placeholder in the WHERE clause represents the minimum number of bathrooms required for the apartments.\",\n        \"virtual_table\": \"SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT apt_type_code, bathroom_count, bedroom_count FROM Apartments ORDER BY room_count DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique apartment numbers from the 'Apartments' table that are associated with bookings having a specific status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT apt_type_code, bathroom_count, bedroom_count \nFROM Apartments \nORDER BY room_count DESC \nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type.\",\n        \"virtual_table\": \"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the type code and apartment number of apartments located in buildings managed by a specific building manager. The placeholder in the WHERE clause represents the name of the building manager.\",\n        \"virtual_table\": \"SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT apt_type_code, SUM(bathroom_count) AS total_bathrooms, SUM(bedroom_count) AS total_bedrooms \nFROM Apartments \nGROUP BY apt_type_code \nORDER BY (SUM(room_count)) DESC \nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type.\",\n        \"virtual_table\": \"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_2": "SELECT apt_type_code, bathroom_count, bedroom_count FROM Apartments ORDER BY room_count DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total number of rooms across all apartments in a specific apartment building identified by its abbreviated name. The placeholder in the WHERE clause represents the building's short name.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the total number of rooms in apartments that have a specific facility associated with them. The placeholder in the WHERE clause represents the facility code that is being queried.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the addresses of apartment buildings that contain apartments with a specified number of bathrooms. The placeholder in the WHERE clause represents the minimum number of bathrooms required for the apartments.\",\n        \"virtual_table\": \"SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT apt_type_code, bathroom_count, bedroom_count \nFROM Apartments \nORDER BY room_count DESC \nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1260",
        "c_low": "SELECT apt_type_code, COUNT(*) as type_count FROM Apartments GROUP BY apt_type_code ORDER BY type_count DESC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the average number of rooms in apartments that have been booked with a specific booking status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total number of rooms across all apartments in a specific apartment building identified by its abbreviated name. The placeholder in the WHERE clause represents the building's short name.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT apt_type_code, COUNT(*) as count FROM Apartments GROUP BY apt_type_code ORDER BY count DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique apartment numbers from the 'Apartments' table that are associated with bookings having a specific status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT apt_type_code, COUNT(*) as apartment_count FROM Apartments GROUP BY apt_type_code ORDER BY apartment_count DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type.\",\n        \"virtual_table\": \"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the type code and apartment number of apartments located in buildings managed by a specific building manager. The placeholder in the WHERE clause represents the name of the building manager.\",\n        \"virtual_table\": \"SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_1": "SELECT apt_type_code, COUNT(*) as apartment_count \nFROM Apartments \nGROUP BY apt_type_code \nORDER BY apartment_count DESC \nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type.\",\n        \"virtual_table\": \"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_2": "SELECT apt_type_code, COUNT(*) as type_count FROM Apartments GROUP BY apt_type_code ORDER BY type_count DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the type code and apartment number of apartments located in buildings managed by a specific building manager. The placeholder in the WHERE clause represents the name of the building manager.\",\n        \"virtual_table\": \"SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT apt_type_code, COUNT(*) as type_count\nFROM Apartments\nGROUP BY apt_type_code\nORDER BY type_count DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    }
]