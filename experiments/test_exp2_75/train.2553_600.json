[
    {
        "sample_id": "train.1",
        "c_low": "SELECT head.name, head.born_state, head.age FROM head ORDER BY head.age;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of department heads from the 'head' table who were not born in a specific state. The placeholder in the WHERE clause represents the state name that is being excluded.\",\n        \"virtual_table\": \"SELECT name FROM head WHERE born_state != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT head.name, head.born_state, head.age FROM head ORDER BY head.age;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT h.name, h.born_state, h.age FROM head AS h ORDER BY h.age;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the states of birth for department heads from the 'head' table, grouped by state. The placeholder in the HAVING clause represents the minimum count of department heads required for a state to be included in the results.\",\n        \"virtual_table\": \"SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and total number of employees in departments where the head is temporarily acting. The placeholder in the WHERE clause represents the status of the head's position.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT name, born_state, age FROM head ORDER BY age;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the states of birth for department heads from the 'head' table, grouped by state. The placeholder in the HAVING clause represents the minimum count of department heads required for a state to be included in the results.\",\n        \"virtual_table\": \"SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of department heads from the 'head' table who were not born in a specific state. The placeholder in the WHERE clause represents the state name that is being excluded.\",\n        \"virtual_table\": \"SELECT name FROM head WHERE born_state != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT head.name, head.born_state, head.age FROM head JOIN management ON head.head_ID = management.head_ID JOIN department ON management.department_ID = department.Department_ID ORDER BY head.age;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and total number of employees in departments where the head is temporarily acting. The placeholder in the WHERE clause represents the status of the head's position.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT head.name, head.born_state, head.age FROM head ORDER BY head.age;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1",
        "c_low": "SELECT head.name, head.born_state, head.age FROM head ORDER BY head.age;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of department heads from the 'head' table who were not born in a specific state. The placeholder in the WHERE clause represents the state name that is being excluded.\",\n        \"virtual_table\": \"SELECT name FROM head WHERE born_state != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT head.name, head.born_state, head.age FROM head ORDER BY head.age;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT h.name, h.born_state, h.age FROM head AS h ORDER BY h.age;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the states of birth for department heads from the 'head' table, grouped by state. The placeholder in the HAVING clause represents the minimum count of department heads required for a state to be included in the results.\",\n        \"virtual_table\": \"SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and total number of employees in departments where the head is temporarily acting. The placeholder in the WHERE clause represents the status of the head's position.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT name, born_state, age FROM head ORDER BY age;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the states of birth for department heads from the 'head' table, grouped by state. The placeholder in the HAVING clause represents the minimum count of department heads required for a state to be included in the results.\",\n        \"virtual_table\": \"SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of department heads from the 'head' table who were not born in a specific state. The placeholder in the WHERE clause represents the state name that is being excluded.\",\n        \"virtual_table\": \"SELECT name FROM head WHERE born_state != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT head.name, head.born_state, head.age FROM head JOIN management ON head.head_ID = management.head_ID ORDER BY head.age;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and total number of employees in departments where the head is temporarily acting. The placeholder in the WHERE clause represents the status of the head's position.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT head.name, head.born_state, head.age FROM head JOIN management ON head.head_ID = management.head_ID JOIN department ON management.department_ID = department.Department_ID ORDER BY head.age;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2",
        "c_low": "SELECT strftime('%Y', Creation) AS creation_year, Name, Budget_in_Billions FROM department;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT strftime('%Y', Creation) AS creation_year, Name, Budget_in_Billions FROM department;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT strftime('%Y', Creation) AS creation_year, Name, Budget_in_Billions FROM department;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT strftime('%Y', Creation) AS creation_year, Name, Budget_in_Billions FROM department;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT strftime('%Y', Creation) AS Creation_Year, Name, Budget_in_Billions FROM department;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT strftime('%Y', Creation) AS creation_year, Name, Budget_in_Billions FROM department;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.6",
        "c_low": "SELECT DISTINCT substr(Creation, 1, 4) AS Creation_Year \nFROM department \nJOIN management ON department.Department_ID = management.department_ID \nJOIN head ON management.head_ID = head.head_ID \nWHERE head.born_state = 'Alabama';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of department heads from the 'head' table who were not born in a specific state. The placeholder in the WHERE clause represents the state name that is being excluded.\",\n        \"virtual_table\": \"SELECT name FROM head WHERE born_state != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT substr(Creation, 1, 4) AS Creation_Year\nFROM department d\nJOIN management m ON d.Department_ID = m.department_ID\nJOIN head h ON m.head_ID = h.head_ID\nWHERE h.born_state = 'Alabama';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT DISTINCT Creation FROM department WHERE Department_ID IN (SELECT department_ID FROM management WHERE head_ID IN (SELECT head_ID FROM head WHERE born_state = 'Alabama'));",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the states of birth for department heads from the 'head' table, grouped by state. The placeholder in the HAVING clause represents the minimum count of department heads required for a state to be included in the results.\",\n        \"virtual_table\": \"SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a summary of departments from the 'department' table, including their unique identifiers and names, along with the count of heads managing each department. The results are filtered to show only those departments that have more than a specified number of heads managing them, as indicated by the placeholder in the HAVING clause.\",\n        \"virtual_table\": \"SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT strftime('%Y', Creation) AS creation_year \nFROM department d \nJOIN management m ON d.Department_ID = m.department_ID \nJOIN head h ON m.head_ID = h.head_ID \nWHERE h.born_state = 'Alabama';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of department heads from the 'head' table who were not born in a specific state. The placeholder in the WHERE clause represents the state name that is being excluded.\",\n        \"virtual_table\": \"SELECT name FROM head WHERE born_state != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the states of birth for department heads from the 'head' table, grouped by state. The placeholder in the HAVING clause represents the minimum count of department heads required for a state to be included in the results.\",\n        \"virtual_table\": \"SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT strftime('%Y', Creation) AS creation_year \nFROM department AS d \nJOIN management AS m ON d.Department_ID = m.department_ID \nJOIN head AS h ON m.head_ID = h.head_ID \nWHERE h.born_state = 'Alabama';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of departments from the 'department' table, including their unique identifiers and names, along with the count of heads managing each department. The results are filtered to show only those departments that have more than a specified number of heads managing them, as indicated by the placeholder in the HAVING clause.\",\n        \"virtual_table\": \"SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT substr(Creation, 1, 4) AS Creation_Year\nFROM department d\nJOIN management m ON d.Department_ID = m.department_ID\nJOIN head h ON m.head_ID = h.head_ID\nWHERE h.born_state = 'Alabama';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.8",
        "c_low": "SELECT strftime('%Y', Creation) AS Year, COUNT(*) AS DepartmentCount\nFROM department\nGROUP BY Year\nORDER BY DepartmentCount DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT strftime('%Y', Creation) AS Year, COUNT(*) AS DepartmentCount\nFROM department\nGROUP BY Year\nORDER BY DepartmentCount DESC\nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT strftime('%Y', Creation) AS year, COUNT(*) AS department_count \nFROM department \nGROUP BY year \nORDER BY department_count DESC \nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of departments from the 'department' table, including their unique identifiers and names, along with the count of heads managing each department. The results are filtered to show only those departments that have more than a specified number of heads managing them, as indicated by the placeholder in the HAVING clause.\",\n        \"virtual_table\": \"SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT strftime('%Y', Creation) AS establishment_year, COUNT(*) AS num_departments\nFROM department\nGROUP BY establishment_year\nORDER BY num_departments DESC\nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT strftime('%Y', Creation) AS year, COUNT(*) AS department_count \nFROM department \nGROUP BY year \nORDER BY department_count DESC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of departments from the 'department' table, including their unique identifiers and names, along with the count of heads managing each department. The results are filtered to show only those departments that have more than a specified number of heads managing them, as indicated by the placeholder in the HAVING clause.\",\n        \"virtual_table\": \"SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT strftime('%Y', Creation) AS Year, COUNT(*) AS DepartmentCount\nFROM department\nGROUP BY Year\nORDER BY DepartmentCount DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.12",
        "c_low": "SELECT DISTINCT h.age \nFROM head h \nJOIN management m ON h.head_ID = m.head_ID \nWHERE m.temporary_acting = 'yes';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT DISTINCT h.age \nFROM head h \nJOIN management m ON h.head_ID = m.head_ID \nWHERE m.temporary_acting = 'yes';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT DISTINCT h.age \nFROM head h \nJOIN management m ON h.head_ID = m.head_ID \nWHERE m.temporary_acting = 'yes';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT DISTINCT h.age \nFROM head h \nJOIN management m ON h.head_ID = m.head_ID \nWHERE m.temporary_acting = 'yes';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT DISTINCT h.age \nFROM head h \nJOIN management m ON h.head_ID = m.head_ID \nWHERE m.temporary_acting = 'yes';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT DISTINCT h.age \nFROM head h \nJOIN management m ON h.head_ID = m.head_ID \nWHERE m.temporary_acting = 'yes';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.13",
        "c_low": "SELECT DISTINCT h1.born_state \nFROM head h1 \nJOIN management m1 ON h1.head_ID = m1.head_ID \nJOIN department d1 ON m1.department_ID = d1.Department_ID \nWHERE d1.Name = 'Treasury' \n   OR d1.Name = 'Homeland Security';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of department heads from the 'head' table who were not born in a specific state. The placeholder in the WHERE clause represents the state name that is being excluded.\",\n        \"virtual_table\": \"SELECT name FROM head WHERE born_state != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT h1.born_state\nFROM department d1\nJOIN management m1 ON d1.Department_ID = m1.department_ID\nJOIN head h1 ON m1.head_ID = h1.head_ID\nWHERE d1.Name = 'Treasury'\nUNION\nSELECT DISTINCT h2.born_state\nFROM department d2\nJOIN management m2 ON d2.Department_ID = m2.department_ID\nJOIN head h2 ON m2.head_ID = h2.head_ID\nWHERE d2.Name = 'Homeland Security';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT h1.born_state \nFROM head h1 \nJOIN management m1 ON h1.head_ID = m1.head_ID \nJOIN department d1 ON m1.department_ID = d1.Department_ID \nWHERE d1.Name = 'Treasury' \n   OR d1.Name = 'Homeland Security' \nGROUP BY h1.born_state \nHAVING COUNT(DISTINCT d1.Name) = 2;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the states of birth for department heads from the 'head' table, grouped by state. The placeholder in the HAVING clause represents the minimum count of department heads required for a state to be included in the results.\",\n        \"virtual_table\": \"SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT h1.born_state \nFROM head h1 \nJOIN management m1 ON h1.head_ID = m1.head_ID \nJOIN department d1 ON m1.department_ID = d1.Department_ID \nWHERE d1.Name = 'Treasury' \nUNION \nSELECT h2.born_state \nFROM head h2 \nJOIN management m2 ON h2.head_ID = m2.head_ID \nJOIN department d2 ON m2.department_ID = d2.Department_ID \nWHERE d2.Name = 'Homeland Security';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of department heads from the 'head' table who were not born in a specific state. The placeholder in the WHERE clause represents the state name that is being excluded.\",\n        \"virtual_table\": \"SELECT name FROM head WHERE born_state != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the states of birth for department heads from the 'head' table, grouped by state. The placeholder in the HAVING clause represents the minimum count of department heads required for a state to be included in the results.\",\n        \"virtual_table\": \"SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT h1.born_state\nFROM department d1\nJOIN management m1 ON d1.Department_ID = m1.department_ID\nJOIN head h1 ON m1.head_ID = h1.head_ID\nWHERE d1.Name = 'Treasury'\nUNION\nSELECT DISTINCT h2.born_state\nFROM department d2\nJOIN management m2 ON d2.Department_ID = m2.department_ID\nJOIN head h2 ON m2.head_ID = h2.head_ID\nWHERE d2.Name = 'Homeland Security';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT DISTINCT h1.born_state\nFROM department d1\nJOIN management m1 ON d1.Department_ID = m1.department_ID\nJOIN head h1 ON m1.head_ID = h1.head_ID\nWHERE d1.Name = 'Treasury'\nUNION\nSELECT DISTINCT h2.born_state\nFROM department d2\nJOIN management m2 ON d2.Department_ID = m2.department_ID\nJOIN head h2 ON m2.head_ID = h2.head_ID\nWHERE d2.Name = 'Homeland Security';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.19",
        "c_low": "SELECT Farm_ID, Total_Horses FROM farm ORDER BY Total_Horses ASC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Farm_ID, Total_Horses FROM farm ORDER BY Total_Horses ASC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT Farm_ID, Total_Horses FROM farm ORDER BY Total_Horses ASC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT Farm_ID, Total_Horses FROM farm ORDER BY Total_Horses ASC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT Farm_ID, Total_Horses FROM farm ORDER BY Total_Horses ASC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT Farm_ID, Total_Horses FROM farm ORDER BY Total_Horses ASC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.44",
        "c_low": "SELECT Status, COUNT(*) AS City_Count\nFROM city\nGROUP BY Status\nORDER BY City_Count DESC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Status, COUNT(*) AS City_Count FROM city GROUP BY Status ORDER BY City_Count DESC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the status of cities that have hosted competitions, grouped by the city identifier. The results are ordered by the number of competitions hosted in descending order, with a limit on the number of cities returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the official names and current statuses of cities from the 'city' table, ordered by their population in descending order. The placeholder in the LIMIT clause represents the maximum number of cities to be returned.\",\n        \"virtual_table\": \"SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT Status, COUNT(*) AS City_Count FROM city GROUP BY Status ORDER BY City_Count DESC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the official names of cities that have hosted more than a specified number of competitions. The placeholder in the HAVING clause represents the minimum count of competitions that a city must have hosted to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Status, COUNT(*) AS City_Count \nFROM city \nGROUP BY Status \nORDER BY City_Count DESC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the official names and current statuses of cities from the 'city' table, ordered by their population in descending order. The placeholder in the LIMIT clause represents the maximum number of cities to be returned.\",\n        \"virtual_table\": \"SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Status, COUNT(*) AS City_Count FROM city GROUP BY Status ORDER BY City_Count DESC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the status of cities that have hosted competitions, grouped by the city identifier. The results are ordered by the number of competitions hosted in descending order, with a limit on the number of cities returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the official names of cities that have hosted more than a specified number of competitions. The placeholder in the HAVING clause represents the minimum count of competitions that a city must have hosted to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Status, COUNT(*) AS City_Count\nFROM city\nGROUP BY Status\nORDER BY City_Count DESC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.45",
        "c_low": "SELECT Status, COUNT(*) AS Frequency \nFROM city \nGROUP BY Status \nORDER BY Frequency ASC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Status, COUNT(*) AS Frequency FROM city GROUP BY Status ORDER BY Frequency ASC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the official names and current statuses of cities from the 'city' table, ordered by their population in descending order. The placeholder in the LIMIT clause represents the maximum number of cities to be returned.\",\n        \"virtual_table\": \"SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the status of cities that have hosted competitions, grouped by the city identifier. The results are ordered by the number of competitions hosted in descending order, with a limit on the number of cities returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT Status, COUNT(*) AS Frequency \nFROM city \nGROUP BY Status \nORDER BY Frequency ASC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT Status, COUNT(Status) AS Frequency FROM city GROUP BY Status ORDER BY Frequency ASC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the official names and current statuses of cities from the 'city' table, ordered by their population in descending order. The placeholder in the LIMIT clause represents the maximum number of cities to be returned.\",\n        \"virtual_table\": \"SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Status, COUNT(*) AS Frequency FROM city GROUP BY Status ORDER BY Frequency ASC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the status of cities that have hosted competitions, grouped by the city identifier. The results are ordered by the number of competitions hosted in descending order, with a limit on the number of cities returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Status, COUNT(*) AS Frequency \nFROM city \nGROUP BY Status \nORDER BY Frequency ASC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.46",
        "c_low": "SELECT Status, COUNT(*) as Count\nFROM city\nGROUP BY Status\nORDER BY Count DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Status, COUNT(*) as Count FROM city GROUP BY Status ORDER BY Count DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the status of cities that have hosted competitions, grouped by the city identifier. The results are ordered by the number of competitions hosted in descending order, with a limit on the number of cities returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the official names and current statuses of cities from the 'city' table, ordered by their population in descending order. The placeholder in the LIMIT clause represents the maximum number of cities to be returned.\",\n        \"virtual_table\": \"SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the themes of competitions hosted in cities that have a population greater than a specified number. The placeholder in the WHERE clause represents the population threshold.\",\n        \"virtual_table\": \"SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT Status, COUNT(*) as Count\nFROM city\nGROUP BY Status\nORDER BY Count DESC\nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT Status, COUNT(Status) AS Status_Count FROM city GROUP BY Status ORDER BY Status_Count DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the official names and current statuses of cities from the 'city' table, ordered by their population in descending order. The placeholder in the LIMIT clause represents the maximum number of cities to be returned.\",\n        \"virtual_table\": \"SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Status, COUNT(*) as Count FROM city GROUP BY Status ORDER BY Count DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the status of cities that have hosted competitions, grouped by the city identifier. The results are ordered by the number of competitions hosted in descending order, with a limit on the number of cities returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the themes of competitions hosted in cities that have a population greater than a specified number. The placeholder in the WHERE clause represents the population threshold.\",\n        \"virtual_table\": \"SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Status, COUNT(*) as Count\nFROM city\nGROUP BY Status\nORDER BY Count DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.47",
        "c_low": "SELECT Status, COUNT(Status) AS Status_Count\nFROM city\nGROUP BY Status\nORDER BY Status_Count DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Status, COUNT(*) as Status_Count FROM city GROUP BY Status ORDER BY Status_Count DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the status of cities that have hosted competitions, grouped by the city identifier. The results are ordered by the number of competitions hosted in descending order, with a limit on the number of cities returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the official names and current statuses of cities from the 'city' table, ordered by their population in descending order. The placeholder in the LIMIT clause represents the maximum number of cities to be returned.\",\n        \"virtual_table\": \"SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the themes of competitions hosted in cities that have a population greater than a specified number. The placeholder in the WHERE clause represents the population threshold.\",\n        \"virtual_table\": \"SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT Status, COUNT(Status) AS Status_Count\nFROM city\nGROUP BY Status\nORDER BY Status_Count DESC\nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT Status, COUNT(Status) AS Status_Count FROM city GROUP BY Status ORDER BY Status_Count DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the official names and current statuses of cities from the 'city' table, ordered by their population in descending order. The placeholder in the LIMIT clause represents the maximum number of cities to be returned.\",\n        \"virtual_table\": \"SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Status, COUNT(*) as Status_Count FROM city GROUP BY Status ORDER BY Status_Count DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the status of cities that have hosted competitions, grouped by the city identifier. The results are ordered by the number of competitions hosted in descending order, with a limit on the number of cities returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the themes of competitions hosted in cities that have a population greater than a specified number. The placeholder in the WHERE clause represents the population threshold.\",\n        \"virtual_table\": \"SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Status, COUNT(Status) AS Status_Count\nFROM city\nGROUP BY Status\nORDER BY Status_Count DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.50",
        "c_low": "SELECT Status FROM city WHERE Population > 1500 AND Population < 500;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Status FROM city WHERE Population > 1500 AND Population < 500",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the official names and current statuses of cities from the 'city' table, ordered by their population in descending order. The placeholder in the LIMIT clause represents the maximum number of cities to be returned.\",\n        \"virtual_table\": \"SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the status of cities that have hosted competitions, grouped by the city identifier. The results are ordered by the number of competitions hosted in descending order, with a limit on the number of cities returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the themes of competitions hosted in cities that have a population greater than a specified number. The placeholder in the WHERE clause represents the population threshold.\",\n        \"virtual_table\": \"SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT Status FROM city WHERE Population > 1500 AND Population < 500;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT Status FROM city WHERE Population > 1500 AND Population < 500;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the official names and current statuses of cities from the 'city' table, ordered by their population in descending order. The placeholder in the LIMIT clause represents the maximum number of cities to be returned.\",\n        \"virtual_table\": \"SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Status FROM city WHERE Population > 1500 AND Population < 500",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the status of cities that have hosted competitions, grouped by the city identifier. The results are ordered by the number of competitions hosted in descending order, with a limit on the number of cities returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the themes of competitions hosted in cities that have a population greater than a specified number. The placeholder in the WHERE clause represents the population threshold.\",\n        \"virtual_table\": \"SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Status FROM city WHERE Population > 1500 AND Population < 500;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.51",
        "c_low": "SELECT DISTINCT Status FROM city WHERE Population > 1500 OR Population < 500;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT DISTINCT Status FROM city WHERE Population > 1500 OR Population < 500;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the official names and current statuses of cities from the 'city' table, ordered by their population in descending order. The placeholder in the LIMIT clause represents the maximum number of cities to be returned.\",\n        \"virtual_table\": \"SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the themes of competitions hosted in cities that have a population greater than a specified number. The placeholder in the WHERE clause represents the population threshold.\",\n        \"virtual_table\": \"SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the status of cities that have hosted competitions, grouped by the city identifier. The results are ordered by the number of competitions hosted in descending order, with a limit on the number of cities returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT Status FROM city WHERE Population > 1500 OR Population < 500;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the official names of cities that have hosted more than a specified number of competitions. The placeholder in the HAVING clause represents the minimum count of competitions that a city must have hosted to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT Status FROM city WHERE Population > 1500 OR Population < 500;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the official names and current statuses of cities from the 'city' table, ordered by their population in descending order. The placeholder in the LIMIT clause represents the maximum number of cities to be returned.\",\n        \"virtual_table\": \"SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT Status FROM city WHERE Population > 1500 UNION SELECT DISTINCT Status FROM city WHERE Population < 500;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the themes of competitions hosted in cities that have a population greater than a specified number. The placeholder in the WHERE clause represents the population threshold.\",\n        \"virtual_table\": \"SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the status of cities that have hosted competitions, grouped by the city identifier. The results are ordered by the number of competitions hosted in descending order, with a limit on the number of cities returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the official names of cities that have hosted more than a specified number of competitions. The placeholder in the HAVING clause represents the minimum count of competitions that a city must have hosted to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT Status FROM city WHERE Population > 1500 OR Population < 500;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.56",
        "c_low": "SELECT course_name, COUNT(student_id) AS number_of_students \nFROM (\n    SELECT T1.student_id, T2.course_name \n    FROM Student_Course_Registrations AS T1 \n    JOIN Courses AS T2 ON T1.course_id = T2.course_id\n) AS course_student_list \nGROUP BY course_name \nORDER BY number_of_students DESC \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Registrations AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id ORDER BY COUNT(*) DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of students who attended a specific course from the 'Courses' table. The placeholder in the WHERE clause represents the name of the course being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    }\n}\n",
        "c_high": "SELECT course_id, COUNT(student_id) AS student_count \nFROM Student_Course_Registrations \nGROUP BY course_id \nORDER BY student_count DESC \nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT course_id, COUNT(student_id) AS student_count\nFROM Student_Course_Registrations\nGROUP BY course_id\nORDER BY student_count DESC\nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Registrations AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "t_3+": "SELECT course_id, COUNT(student_id) AS student_count\nFROM Student_Course_Registrations\nGROUP BY course_id\nORDER BY student_count DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.58",
        "c_low": "SELECT student_id FROM (SELECT student_id, COUNT(course_id) AS course_count FROM Student_Course_Registrations GROUP BY student_id) WHERE course_count = (SELECT MIN(course_count) FROM (SELECT COUNT(course_id) AS course_count FROM Student_Course_Registrations GROUP BY student_id));",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT student_id FROM Student_Course_Registrations GROUP BY student_id HAVING COUNT(course_id) = (SELECT MIN(course_count) FROM (SELECT COUNT(course_id) AS course_count FROM Student_Course_Registrations GROUP BY student_id));",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of students who attended a specific course from the 'Courses' table. The placeholder in the WHERE clause represents the name of the course being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT student_id FROM (SELECT T1.student_id, COUNT(*) AS course_count FROM Students AS T1 JOIN Student_Course_Registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id) AS course_counts ORDER BY course_count ASC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Students' table who have not attended any courses. The subquery checks the 'Student_Course_Attendance' table to filter out those students who have registered for and attended courses.\",\n        \"virtual_table\": \"SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    }\n}\n",
        "t_1": "SELECT student_id\nFROM Student_Course_Registrations\nGROUP BY student_id\nHAVING COUNT(course_id) = (\n    SELECT MIN(course_count)\n    FROM (\n        SELECT COUNT(course_id) AS course_count\n        FROM Student_Course_Registrations\n        GROUP BY student_id\n    ) AS course_counts\n);",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT student_id FROM Student_Course_Registrations GROUP BY student_id ORDER BY COUNT(course_id) ASC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Students' table who have not attended any courses. The subquery checks the 'Student_Course_Attendance' table to filter out those students who have registered for and attended courses.\",\n        \"virtual_table\": \"SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "t_3+": "SELECT student_id\nFROM Student_Course_Registrations\nGROUP BY student_id\nHAVING COUNT(course_id) = (\n    SELECT MIN(course_count)\n    FROM (\n        SELECT COUNT(course_id) AS course_count\n        FROM Student_Course_Registrations\n        GROUP BY student_id\n    ) AS course_counts\n);",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.59",
        "c_low": "SELECT student_id FROM (SELECT student_id, COUNT(course_id) AS course_count FROM Student_Course_Registrations GROUP BY student_id) WHERE course_count = (SELECT MIN(course_count) FROM (SELECT COUNT(course_id) AS course_count FROM Student_Course_Registrations GROUP BY student_id));",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT student_id FROM Student_Course_Registrations GROUP BY student_id HAVING COUNT(course_id) = (SELECT MIN(course_count) FROM (SELECT COUNT(course_id) AS course_count FROM Student_Course_Registrations GROUP BY student_id));",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT student_id FROM (SELECT T1.student_id, COUNT(*) AS course_count FROM Students AS T1 JOIN Student_Course_Registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id) AS course_counts WHERE course_count = (SELECT MIN(course_count) FROM (SELECT COUNT(*) AS course_count FROM Students AS T1 JOIN Student_Course_Registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id));",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Students' table who have not attended any courses. The subquery checks the 'Student_Course_Attendance' table to filter out those students who have registered for and attended courses.\",\n        \"virtual_table\": \"SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    }\n}\n",
        "t_1": "SELECT student_id FROM Student_Course_Registrations GROUP BY student_id HAVING COUNT(course_id) = (SELECT MIN(course_count) FROM (SELECT COUNT(course_id) AS course_count FROM Student_Course_Registrations GROUP BY student_id));",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT student_id FROM Student_Course_Registrations GROUP BY student_id HAVING COUNT(course_id) = (SELECT MIN(course_count) FROM (SELECT COUNT(course_id) AS course_count FROM Student_Course_Registrations GROUP BY student_id));",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Students' table who have not attended any courses. The subquery checks the 'Student_Course_Attendance' table to filter out those students who have registered for and attended courses.\",\n        \"virtual_table\": \"SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    }\n}\n",
        "t_3+": "SELECT student_id FROM Student_Course_Registrations GROUP BY student_id HAVING COUNT(course_id) = (SELECT MIN(course_count) FROM (SELECT COUNT(course_id) AS course_count FROM Student_Course_Registrations GROUP BY student_id));",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.64",
        "c_low": "SELECT DISTINCT student_id FROM Student_Course_Attendance;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT student_id FROM Student_Course_Attendance;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT student_id FROM Student_Course_Attendance;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Students' table who have not attended any courses. The subquery checks the 'Student_Course_Attendance' table to filter out those students who have registered for and attended courses.\",\n        \"virtual_table\": \"SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT student_id FROM Student_Course_Attendance;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT student_id FROM Student_Course_Attendance;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT student_id FROM Student_Course_Attendance;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.65",
        "c_low": "SELECT DISTINCT student_id FROM Student_Course_Attendance;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT student_id FROM Student_Course_Attendance;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of students who attended a specific course from the 'Courses' table. The placeholder in the WHERE clause represents the name of the course being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT student_id FROM Student_Course_Attendance;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Students' table who have not attended any courses. The subquery checks the 'Student_Course_Attendance' table to filter out those students who have registered for and attended courses.\",\n        \"virtual_table\": \"SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT student_id FROM Student_Course_Attendance;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT student_id FROM Student_Course_Attendance;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT student_id FROM Student_Course_Attendance;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.67",
        "c_low": "SELECT S.student_id, P.first_name, P.middle_name, P.last_name, R.registration_date \nFROM Students AS S \nJOIN People AS P ON S.student_id = P.person_id \nJOIN Student_Course_Registrations AS R ON S.student_id = R.student_id \nWHERE R.registration_date = (SELECT MAX(registration_date) FROM Student_Course_Registrations)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT S.student_details FROM Students AS S JOIN Student_Course_Registrations AS R ON S.student_id = R.student_id ORDER BY R.registration_date DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    }\n}\n",
        "c_high": "SELECT S.student_id, S.student_details \nFROM Students S \nJOIN Student_Course_Registrations R ON S.student_id = R.student_id \nWHERE R.registration_date = (SELECT MAX(registration_date) FROM Student_Course_Registrations)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    }\n}\n",
        "t_1": "SELECT s.student_id, s.student_details \nFROM Students s \nJOIN Student_Course_Registrations scr ON s.student_id = scr.student_id \nORDER BY scr.registration_date DESC \nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT S.student_id, S.student_details \nFROM Students AS S \nJOIN Student_Course_Registrations AS R ON S.student_id = R.student_id \nWHERE R.registration_date = (SELECT MAX(registration_date) FROM Student_Course_Registrations)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT s.student_id, s.student_details \nFROM Students s \nJOIN Student_Course_Registrations scr ON s.student_id = scr.student_id \nORDER BY scr.registration_date DESC \nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.68",
        "c_low": "SELECT T1.student_id, T2.course_name, T1.registration_date \nFROM student_course_registrations AS T1 \nJOIN courses AS T2 ON T1.course_id = T2.course_id \nORDER BY T1.registration_date DESC \nLIMIT 10;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT S.student_id, S.student_details, SCR.registration_date, C.course_name \nFROM Students AS S \nJOIN Student_Course_Registrations AS SCR ON S.student_id = SCR.student_id \nJOIN Courses AS C ON SCR.course_id = C.course_id \nORDER BY SCR.registration_date DESC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    }\n}\n",
        "c_high": "SELECT S.student_id, S.student_details, C.course_id, C.course_name, R.registration_date \nFROM Students AS S \nJOIN Student_Course_Registrations AS R ON S.student_id = R.student_id \nJOIN Courses AS C ON R.course_id = C.course_id \nWHERE R.registration_date = (SELECT MAX(registration_date) FROM Student_Course_Registrations)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    }\n}\n",
        "t_1": "SELECT s.student_id, s.student_details, scr.registration_date, c.course_name \nFROM Students s \nJOIN Student_Course_Registrations scr ON s.student_id = scr.student_id \nJOIN Courses c ON scr.course_id = c.course_id \nORDER BY scr.registration_date DESC \nLIMIT 10;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT S.student_id, S.student_details, C.course_name, SCR.registration_date \nFROM Students AS S \nJOIN Student_Course_Registrations AS SCR ON S.student_id = SCR.student_id \nJOIN Courses AS C ON SCR.course_id = C.course_id \nORDER BY SCR.registration_date DESC \nLIMIT 10;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT s.student_id, s.student_details, scr.registration_date, c.course_name \nFROM Students s \nJOIN Student_Course_Registrations scr ON s.student_id = scr.student_id \nJOIN Courses c ON scr.course_id = c.course_id \nORDER BY scr.registration_date DESC \nLIMIT 10;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.76",
        "c_low": "SELECT candidate_id FROM Candidate_Assessments ORDER BY assessment_date DESC LIMIT 1",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of candidate identifiers from the 'Candidate_Assessments' table, ordered by the date of assessment in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT T2.candidate_id FROM candidates AS T2 JOIN student_course_attendance AS T1 ON T2.candidate_id = T1.student_id ORDER BY T1.date_of_attendance DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table retrieves the unique identifier of candidates from the 'candidates' table who are associated with a person in the 'people' table based on a specific email address. The placeholder in the WHERE clause represents the email address of the person.\",\n        \"virtual_table\": \"SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT candidate_id FROM candidates WHERE candidate_id IN (SELECT student_id FROM (SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance) AS combined_courses) ORDER BY candidate_id DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT candidate_id FROM Candidate_Assessments ORDER BY assessment_date DESC LIMIT 1",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of candidate identifiers from the 'Candidate_Assessments' table, ordered by the date of assessment in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT candidate_id FROM candidates WHERE candidate_id IN (SELECT student_id FROM student_course_attendance ORDER BY date_of_attendance DESC LIMIT 1)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT c.candidate_id\nFROM Candidates c\nJOIN Student_Course_Attendance sca ON c.candidate_id = sca.student_id\nJOIN Student_Course_Registrations scr ON sca.student_id = scr.student_id AND sca.course_id = scr.course_id\nORDER BY sca.date_of_attendance DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.77",
        "c_low": "SELECT S.student_id, P.first_name, P.last_name, COUNT(SCR.course_id) AS course_count\nFROM Students AS S\nJOIN People AS P ON S.student_id = P.person_id\nJOIN Student_Course_Registrations AS SCR ON S.student_id = SCR.student_id\nGROUP BY S.student_id, P.first_name, P.last_name\nORDER BY course_count DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT S.student_id, S.student_details \nFROM Students AS S \nJOIN Student_Course_Registrations AS R ON S.student_id = R.student_id \nGROUP BY S.student_id \nORDER BY COUNT(R.course_id) DESC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of students who attended a specific course from the 'Courses' table. The placeholder in the WHERE clause represents the name of the course being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    }\n}\n",
        "c_high": "SELECT S.student_id, S.student_details \nFROM Students AS S \nJOIN (\n    SELECT T1.student_id, COUNT(*) AS course_count \n    FROM Students AS T1 \n    JOIN Student_Course_Registrations AS T2 ON T1.student_id = T2.student_id \n    GROUP BY T1.student_id \n) AS CourseCounts ON S.student_id = CourseCounts.student_id \nWHERE CourseCounts.course_count = (\n    SELECT MAX(course_count) \n    FROM (\n        SELECT COUNT(*) AS course_count \n        FROM Student_Course_Registrations \n        GROUP BY student_id\n    )\n)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    }\n}\n",
        "t_1": "SELECT s.student_id, s.student_details\nFROM Students s\nJOIN Student_Course_Registrations scr ON s.student_id = scr.student_id\nGROUP BY s.student_id\nORDER BY COUNT(scr.course_id) DESC\nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T1.student_id, T1.student_details \nFROM students AS T1 \nJOIN (\n    SELECT T1.student_id, COUNT(*) AS course_count \n    FROM students AS T1 \n    JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id \n    GROUP BY T1.student_id \n) AS T2 ON T1.student_id = T2.student_id \nWHERE T2.course_count = (\n    SELECT MAX(course_count) \n    FROM (\n        SELECT COUNT(*) AS course_count \n        FROM student_course_registrations \n        GROUP BY student_id\n    )\n)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    }\n}\n",
        "t_3+": "SELECT s.student_id, s.student_details\nFROM Students s\nJOIN Student_Course_Registrations scr ON s.student_id = scr.student_id\nGROUP BY s.student_id\nORDER BY COUNT(scr.course_id) DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.78",
        "c_low": "SELECT student_id, COUNT(course_id) AS course_count\nFROM Student_Course_Registrations\nGROUP BY student_id\nORDER BY course_count DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT S.student_id, S.student_details \nFROM Students AS S \nJOIN Student_Course_Registrations AS R ON S.student_id = R.student_id \nGROUP BY S.student_id \nORDER BY COUNT(R.course_id) DESC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of students who attended a specific course from the 'Courses' table. The placeholder in the WHERE clause represents the name of the course being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    }\n}\n",
        "c_high": "SELECT S.student_id, S.student_details \nFROM Students AS S \nJOIN (\n    SELECT T1.student_id, COUNT(*) AS course_count \n    FROM Students AS T1 \n    JOIN Student_Course_Registrations AS T2 ON T1.student_id = T2.student_id \n    GROUP BY T1.student_id \n) AS CourseCounts ON S.student_id = CourseCounts.student_id \nWHERE CourseCounts.course_count = (\n    SELECT MAX(course_count) \n    FROM (\n        SELECT COUNT(*) AS course_count \n        FROM Student_Course_Registrations \n        GROUP BY student_id\n    )\n)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    }\n}\n",
        "t_1": "SELECT s.student_id, s.student_details, COUNT(scr.course_id) AS course_count\nFROM Students s\nJOIN Student_Course_Registrations scr ON s.student_id = scr.student_id\nGROUP BY s.student_id, s.student_details\nORDER BY course_count DESC\nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T1.student_id, T1.student_details \nFROM students AS T1 \nJOIN (\n    SELECT T1.student_id, COUNT(*) AS course_count \n    FROM students AS T1 \n    JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id \n    GROUP BY T1.student_id \n) AS T3 ON T1.student_id = T3.student_id \nWHERE T3.course_count = (\n    SELECT MAX(course_count) \n    FROM (\n        SELECT COUNT(*) AS course_count \n        FROM students AS T1 \n        JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id \n        GROUP BY T1.student_id\n    ) AS T4\n);",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    }\n}\n",
        "t_3+": "SELECT s.student_id, p.first_name, p.last_name, COUNT(scr.course_id) AS course_count\nFROM Students s\nJOIN People p ON s.student_id = p.person_id\nJOIN Student_Course_Registrations scr ON s.student_id = scr.student_id\nGROUP BY s.student_id, p.first_name, p.last_name\nORDER BY course_count DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.81",
        "c_low": "SELECT course_name, COUNT(student_id) AS registered_students_count \nFROM (\n    SELECT T1.student_id, T2.course_name \n    FROM Student_Course_Registrations AS T1 \n    JOIN Courses AS T2 ON T1.course_id = T2.course_id\n) AS course_student_list \nGROUP BY course_name;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT C.course_name, COUNT(SCR.student_id) AS registered_students_count \nFROM Courses AS C \nJOIN Student_Course_Registrations AS SCR ON C.course_id = SCR.course_id \nGROUP BY C.course_id \nORDER BY registered_students_count DESC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of students who attended a specific course from the 'Courses' table. The placeholder in the WHERE clause represents the name of the course being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    }\n}\n",
        "c_high": "SELECT C.course_name, COUNT(SCR.student_id) AS registered_students_count \nFROM Courses AS C \nLEFT JOIN Student_Course_Registrations AS SCR ON C.course_id = SCR.course_id \nGROUP BY C.course_id;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Courses.course_name, COUNT(Student_Course_Registrations.student_id) AS registered_students_count\nFROM Courses\nLEFT JOIN Student_Course_Registrations ON Courses.course_id = Student_Course_Registrations.course_id\nGROUP BY Courses.course_name;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T2.course_name, COUNT(T1.student_id) AS registered_students_count \nFROM Student_Course_Registrations AS T1 \nJOIN Courses AS T2 ON T1.course_id = T2.course_id \nGROUP BY T2.course_name;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Courses.course_name, COUNT(Student_Course_Registrations.student_id) AS registered_students_count\nFROM Courses\nLEFT JOIN Student_Course_Registrations ON Courses.course_id = Student_Course_Registrations.course_id\nGROUP BY Courses.course_name;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.82",
        "c_low": "SELECT T2.course_id, COUNT(T1.student_id) AS student_count, T2.course_name \nFROM Student_Course_Registrations AS T1 \nJOIN Courses AS T2 ON T1.course_id = T2.course_id \nGROUP BY T2.course_id, T2.course_name;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT C.course_id, C.course_name, COUNT(SCR.student_id) AS student_count \nFROM Courses AS C \nLEFT JOIN Student_Course_Registrations AS SCR ON C.course_id = SCR.course_id \nGROUP BY C.course_id, C.course_name;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of students who attended a specific course from the 'Courses' table. The placeholder in the WHERE clause represents the name of the course being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    }\n}\n",
        "c_high": "SELECT C.course_id, C.course_name, COUNT(SCR.student_id) AS student_count \nFROM Courses AS C \nLEFT JOIN Student_Course_Registrations AS SCR ON C.course_id = SCR.course_id \nGROUP BY C.course_id, C.course_name;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    }\n}\n",
        "t_1": "SELECT c.course_id, c.course_name, COUNT(scr.student_id) AS student_count\nFROM Courses c\nLEFT JOIN Student_Course_Registrations scr ON c.course_id = scr.course_id\nGROUP BY c.course_id, c.course_name;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT C.course_id, C.course_name, COUNT(SCR.student_id) AS student_count \nFROM Courses AS C \nLEFT JOIN Student_Course_Registrations AS SCR ON C.course_id = SCR.course_id \nGROUP BY C.course_id, C.course_name;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    }\n}\n",
        "t_3+": "SELECT Courses.course_id, COUNT(Student_Course_Registrations.student_id) AS student_count, Courses.course_name\nFROM Courses\nLEFT JOIN Student_Course_Registrations ON Courses.course_id = Student_Course_Registrations.course_id\nGROUP BY Courses.course_id, Courses.course_name;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.89",
        "c_low": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = '301' ORDER BY registration_date DESC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = '301' ORDER BY registration_date DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = '301' ORDER BY registration_date DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Students' table who have not attended any courses. The subquery checks the 'Student_Course_Attendance' table to filter out those students who have registered for and attended courses.\",\n        \"virtual_table\": \"SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\"\n    }\n}\n",
        "t_1": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = '301' ORDER BY registration_date DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = '301' ORDER BY registration_date DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    }\n}\n",
        "t_3+": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = '301' ORDER BY registration_date DESC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.90",
        "c_low": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = '301' ORDER BY registration_date DESC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = '301' ORDER BY registration_date DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = '301' ORDER BY registration_date DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Students' table who have not attended any courses. The subquery checks the 'Student_Course_Attendance' table to filter out those students who have registered for and attended courses.\",\n        \"virtual_table\": \"SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\"\n    }\n}\n",
        "t_1": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = '301' ORDER BY registration_date DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = '301' ORDER BY registration_date DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "t_3+": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = '301' ORDER BY registration_date DESC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.92",
        "c_low": "SELECT DISTINCT T1.city FROM Addresses AS T1 JOIN People_Addresses AS T2 ON T1.address_id = T2.address_id",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique cities from the 'Addresses' table that are associated with people through the 'People_Addresses' table. The placeholder in the JOIN clause represents the relationship between addresses and people.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique cities where students are located, by joining the 'Addresses', 'People_Addresses', and 'Students' tables. The placeholders in the query represent the necessary identifiers for the relationships between these tables.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT city FROM Addresses;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT DISTINCT city FROM Addresses;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT DISTINCT city FROM Addresses;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT DISTINCT T1.city FROM Addresses AS T1 JOIN People_Addresses AS T2 ON T1.address_id = T2.address_id",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique cities from the 'Addresses' table that are associated with people through the 'People_Addresses' table. The placeholder in the JOIN clause represents the relationship between addresses and people.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT T1.city FROM Addresses AS T1 JOIN People_Addresses AS T2 ON T1.address_id = T2.address_id JOIN Students AS T3 ON T2.person_id = T3.student_id",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique cities where students are located, by joining the 'Addresses', 'People_Addresses', and 'Students' tables. The placeholders in the query represent the necessary identifiers for the relationships between these tables.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id\"\n    }\n}\n"
    },
    {
        "sample_id": "train.93",
        "c_low": "SELECT DISTINCT T1.city FROM Addresses AS T1 JOIN People_Addresses AS T2 ON T1.address_id = T2.address_id JOIN Students AS T3 ON T2.person_id = T3.student_id",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique cities where students are located, by joining the 'Addresses', 'People_Addresses', and 'Students' tables. The placeholders in the query represent the necessary identifiers for the relationships between these tables.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique cities from the 'Addresses' table that are associated with people through the 'People_Addresses' table. The placeholder in the JOIN clause represents the relationship between addresses and people.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT a.city\nFROM Addresses a\nJOIN People_Addresses pa ON a.address_id = pa.address_id\nJOIN Students s ON pa.person_id = s.student_id;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT DISTINCT a.city\nFROM Addresses a\nJOIN People_Addresses pa ON a.address_id = pa.address_id\nJOIN Students s ON pa.person_id = s.student_id;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT DISTINCT a.city\nFROM Addresses a\nJOIN People_Addresses pa ON a.address_id = pa.address_id\nJOIN Students s ON pa.person_id = s.student_id;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT DISTINCT T1.city FROM Addresses AS T1 JOIN People_Addresses AS T2 ON T1.address_id = T2.address_id JOIN Students AS T3 ON T2.person_id = T3.student_id",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique cities from the 'Addresses' table that are associated with people through the 'People_Addresses' table. The placeholder in the JOIN clause represents the relationship between addresses and people.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT T1.city FROM Addresses AS T1 JOIN People_Addresses AS T2 ON T1.address_id = T2.address_id JOIN Students AS T3 ON T2.person_id = T3.student_id",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique cities where students are located, by joining the 'Addresses', 'People_Addresses', and 'Students' tables. The placeholders in the query represent the necessary identifiers for the relationships between these tables.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id\"\n    }\n}\n"
    },
    {
        "sample_id": "train.103",
        "c_low": "SELECT S.student_id, P.first_name, P.middle_name, P.last_name, SC.course_name \nFROM (SELECT T1.student_id, T2.course_name \n      FROM Student_Course_Registrations AS T1 \n      JOIN Courses AS T2 ON T1.course_id = T2.course_id) AS S \nLEFT JOIN Student_Course_Attendance AS A ON S.student_id = A.student_id \nLEFT JOIN People AS P ON S.student_id = P.person_id \nWHERE A.course_id IS NULL;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT S.student_id, S.student_details \nFROM Students AS S \nJOIN Student_Course_Registrations AS R ON S.student_id = R.student_id \nLEFT JOIN Student_Course_Attendance AS A ON R.student_id = A.student_id AND R.course_id = A.course_id \nWHERE A.student_id IS NULL;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT S.student_id, S.student_details \nFROM Students S \nWHERE S.student_id IN (SELECT student_id FROM Student_Course_Registrations) \nAND S.student_id NOT IN (SELECT student_id FROM Student_Course_Attendance);",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Students' table who have not attended any courses. The subquery checks the 'Student_Course_Attendance' table to filter out those students who have registered for and attended courses.\",\n        \"virtual_table\": \"SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    }\n}\n",
        "t_1": "SELECT s.student_id, s.student_details \nFROM Students s \nJOIN Student_Course_Registrations scr ON s.student_id = scr.student_id \nLEFT JOIN Student_Course_Attendance sca ON scr.student_id = sca.student_id AND scr.course_id = sca.course_id \nWHERE sca.student_id IS NULL;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT * FROM Students WHERE student_id IN (SELECT student_id FROM Student_Course_Registrations) AND student_id NOT IN (SELECT student_id FROM Student_Course_Attendance)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Students' table who have not attended any courses. The subquery checks the 'Student_Course_Attendance' table to filter out those students who have registered for and attended courses.\",\n        \"virtual_table\": \"SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "t_3+": "SELECT s.student_id, s.student_details \nFROM Students s \nJOIN Student_Course_Registrations scr ON s.student_id = scr.student_id \nLEFT JOIN Student_Course_Attendance sca ON scr.student_id = sca.student_id AND scr.course_id = sca.course_id \nWHERE sca.student_id IS NULL;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.104",
        "c_low": "SELECT S.student_id, P.first_name, P.middle_name, P.last_name, S.student_details \nFROM Students AS S \nJOIN People AS P ON S.student_id = P.person_id \nWHERE S.student_id NOT IN (\n    SELECT DISTINCT SC.student_id \n    FROM Student_Course_Attendance AS SC\n)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT s.student_id, s.student_details \nFROM Students s \nLEFT JOIN Student_Course_Registrations r ON s.student_id = r.student_id \nLEFT JOIN Student_Course_Attendance a ON r.student_id = a.student_id AND r.course_id = a.course_id \nWHERE a.student_id IS NULL;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT * FROM Students WHERE student_id NOT IN (SELECT student_id FROM Student_Course_Attendance)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Students' table who have not attended any courses. The subquery checks the 'Student_Course_Attendance' table to filter out those students who have registered for and attended courses.\",\n        \"virtual_table\": \"SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    }\n}\n",
        "t_1": "SELECT s.student_id, s.student_details \nFROM Students s \nLEFT JOIN Student_Course_Registrations scr ON s.student_id = scr.student_id \nLEFT JOIN Student_Course_Attendance sca ON scr.student_id = sca.student_id AND scr.course_id = sca.course_id \nWHERE sca.student_id IS NULL;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT * FROM Students WHERE student_id NOT IN (SELECT student_id FROM Student_Course_Attendance)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Students' table who have not attended any courses. The subquery checks the 'Student_Course_Attendance' table to filter out those students who have registered for and attended courses.\",\n        \"virtual_table\": \"SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT s.student_id, s.student_details \nFROM Students s \nLEFT JOIN Student_Course_Registrations scr ON s.student_id = scr.student_id \nLEFT JOIN Student_Course_Attendance sca ON scr.student_id = sca.student_id AND scr.course_id = sca.course_id \nWHERE scr.student_id IS NOT NULL AND sca.student_id IS NULL;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.105",
        "c_low": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = (SELECT course_id FROM Courses WHERE course_name = 'Statistics') ORDER BY registration_date;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = (SELECT course_id FROM Courses WHERE course_name = 'Statistics') ORDER BY registration_date;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = (SELECT course_id FROM Courses WHERE course_name = 'Statistics') ORDER BY registration_date;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Students' table who have not attended any courses. The subquery checks the 'Student_Course_Attendance' table to filter out those students who have registered for and attended courses.\",\n        \"virtual_table\": \"SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\"\n    }\n}\n",
        "t_1": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = 'statistics' ORDER BY registration_date;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = (SELECT course_id FROM Courses WHERE course_name = 'Statistics') ORDER BY registration_date;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = (SELECT course_id FROM Courses WHERE course_name = 'Statistics') ORDER BY registration_date;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.106",
        "c_low": "SELECT student_id FROM (SELECT T1.student_id, T2.course_name FROM Student_Course_Registrations AS T1 JOIN Courses AS T2 ON T1.course_id = T2.course_id) WHERE course_name = 'Statistics' ORDER BY registration_date;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = (SELECT course_id FROM Courses WHERE course_name = 'Statistics') ORDER BY registration_date;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = (SELECT course_id FROM Courses WHERE course_name = 'Statistics') ORDER BY registration_date;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Students' table who have not attended any courses. The subquery checks the 'Student_Course_Attendance' table to filter out those students who have registered for and attended courses.\",\n        \"virtual_table\": \"SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    }\n}\n",
        "t_1": "SELECT scr.student_id \nFROM Student_Course_Registrations scr \nJOIN Courses c ON scr.course_id = c.course_id \nWHERE c.course_name = 'Statistics' \nORDER BY scr.registration_date;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT student_id FROM Student_Course_Registrations AS T1 JOIN Courses AS T2 ON T1.course_id = T2.course_id WHERE T2.course_name = 'Statistics' ORDER BY T1.registration_date;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "t_3+": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = (SELECT course_id FROM Courses WHERE course_name = 'Statistics') ORDER BY registration_date;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.123",
        "c_low": "SELECT zip_code, AVG(mean_temperature_f) AS average_mean_temperature\nFROM weather\nWHERE strftime('%m', date) = '08'\nGROUP BY zip_code;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the date and the temperature range (difference between maximum and minimum temperatures) from the 'weather' table, ordered by the temperature range. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT zip_code, AVG(mean_temperature_f) AS average_mean_temperature\nFROM weather\nWHERE strftime('%m', date) = '08'\nGROUP BY zip_code;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT zip_code, avg(mean_temperature_f) FROM weather WHERE date LIKE '2023-08%' GROUP BY zip_code",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average number of bikes available at stations that are not located in a specific city. The placeholder in the WHERE clause represents the name of the city to exclude from the average calculation.\",\n        \"virtual_table\": \"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "t_1": "SELECT zip_code, avg(mean_temperature_f) AS average_mean_temperature\nFROM weather\nWHERE date LIKE '2023-08%'\nGROUP BY zip_code;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT zip_code, AVG(mean_temperature_f) AS average_mean_temperature\nFROM weather\nWHERE date BETWEEN '2023-08-01' AND '2023-08-31'\nGROUP BY zip_code;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the average number of bikes available at stations that are not located in a specific city. The placeholder in the WHERE clause represents the name of the city to exclude from the average calculation.\",\n        \"virtual_table\": \"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "t_3+": "SELECT zip_code, AVG(mean_temperature_f) AS average_mean_temperature\nFROM weather\nWHERE strftime('%m', date) = '08'\nGROUP BY zip_code;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.133",
        "c_low": "SELECT start_station_name, start_station_id\nFROM trip\nWHERE strftime('%m', start_date) = '08'\nGROUP BY start_station_id, start_station_name\nORDER BY COUNT(*) DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT start_station_name, start_station_id FROM trip WHERE strftime('%Y-%m', start_date) >= '2023-08' GROUP BY start_station_id ORDER BY COUNT(*) DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique bike stations that currently have a certain number of bikes available. The query joins the 'station' table with the 'status' table to filter stations based on their bike availability, using a placeholder for the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT start_station_name, start_station_id FROM trip WHERE start_date >= '2023-08-01' GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the unique station IDs from the 'station' table located in a specific city. It intersects with the 'status' table to find stations that have an average number of available bikes greater than a specified threshold. The placeholders in the WHERE and HAVING clauses represent the city name and the minimum average bikes available, respectively.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT start_station_id, start_station_name \nFROM trip \nWHERE start_date >= '2023-08-01' \nGROUP BY start_station_id, start_station_name \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT start_station_name, start_station_id FROM trip WHERE start_date >= '2023-08-01' GROUP BY start_station_id ORDER BY COUNT(*) DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT start_station_name, start_station_id\nFROM trip\nWHERE strftime('%m', start_date) = '08'\nGROUP BY start_station_id, start_station_name\nORDER BY COUNT(*) DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.134",
        "c_low": "SELECT start_station_name, start_station_id \nFROM trip \nWHERE strftime('%Y-%m', start_date) = '2023-08' \nGROUP BY start_station_name, start_station_id \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT start_station_name, start_station_id \nFROM trip \nWHERE strftime('%Y-%m', start_date) = '2023-08' \nGROUP BY start_station_id \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique bike stations that currently have a certain number of bikes available. The query joins the 'station' table with the 'status' table to filter stations based on their bike availability, using a placeholder for the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT start_station_id, start_station_name \nFROM trip \nWHERE strftime('%Y-%m', start_date) = '2023-08' \nGROUP BY start_station_id, start_station_name \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the unique station IDs from the 'station' table located in a specific city. It intersects with the 'status' table to find stations that have an average number of available bikes greater than a specified threshold. The placeholders in the WHERE and HAVING clauses represent the city name and the minimum average bikes available, respectively.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT start_station_name, start_station_id \nFROM trip \nWHERE strftime('%Y-%m', start_date) = '2023-08' \nGROUP BY start_station_id, start_station_name \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_2": "SELECT start_station_name, start_station_id \nFROM trip \nWHERE strftime('%Y-%m', start_date) = '2023-08' \nGROUP BY start_station_id \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT start_station_name, start_station_id \nFROM trip \nWHERE strftime('%Y-%m', start_date) = '2023-08' \nGROUP BY start_station_name, start_station_id \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.135",
        "c_low": "SELECT bike_id, COUNT(*) as trip_count \nFROM trip \nWHERE zip_code = '94002' \nGROUP BY bike_id \nORDER BY trip_count DESC \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT bike_id, COUNT(*) as trip_count \nFROM trip \nWHERE zip_code = '94002' \nGROUP BY bike_id \nORDER BY trip_count DESC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique bike stations that currently have a certain number of bikes available. The query joins the 'station' table with the 'status' table to filter stations based on their bike availability, using a placeholder for the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT bike_id, COUNT(*) as trip_count \nFROM trip \nWHERE zip_code = '94002' \nGROUP BY bike_id \nORDER BY trip_count DESC \nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the average number of bikes available at stations that are not located in a specific city. The placeholder in the WHERE clause represents the name of the city to exclude from the average calculation.\",\n        \"virtual_table\": \"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT bike_id, COUNT(*) as trip_count \nFROM trip \nWHERE zip_code = '94002' \nGROUP BY bike_id \nORDER BY trip_count DESC \nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT bike_id, COUNT(*) as trip_count \nFROM trip \nWHERE zip_code = '94002' \nGROUP BY bike_id \nORDER BY trip_count DESC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the average number of bikes available at stations that are not located in a specific city. The placeholder in the WHERE clause represents the name of the city to exclude from the average calculation.\",\n        \"virtual_table\": \"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT bike_id, COUNT(*) AS trip_count\nFROM trip\nWHERE zip_code = '94002'\nGROUP BY bike_id\nORDER BY trip_count DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.136",
        "c_low": "SELECT bike_id FROM trip WHERE zip_code = '94002' ORDER BY duration DESC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT bike_id FROM trip WHERE zip_code = '94002' GROUP BY bike_id ORDER BY SUM(duration) DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique bike stations that currently have a certain number of bikes available. The query joins the 'station' table with the 'status' table to filter stations based on their bike availability, using a placeholder for the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT bike_id FROM trip WHERE zip_code = '94002' ORDER BY duration DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the average number of bikes available at stations that are not located in a specific city. The placeholder in the WHERE clause represents the name of the city to exclude from the average calculation.\",\n        \"virtual_table\": \"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the unique station IDs from the 'station' table located in a specific city. It intersects with the 'status' table to find stations that have an average number of available bikes greater than a specified threshold. The placeholders in the WHERE and HAVING clauses represent the city name and the minimum average bikes available, respectively.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT bike_id FROM trip WHERE zip_code = '94002' ORDER BY duration DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT bike_id FROM trip WHERE zip_code = '94002' ORDER BY duration DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique bike stations that currently have a certain number of bikes available. The query joins the 'station' table with the 'status' table to filter stations based on their bike availability, using a placeholder for the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT bike_id\nFROM trip\nWHERE zip_code = '94002'\nORDER BY duration DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.137",
        "c_low": "SELECT COUNT(*) FROM weather WHERE mean_humidity > 50 AND mean_visibility > 8;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the date and the temperature range (difference between maximum and minimum temperatures) from the 'weather' table, ordered by the temperature range. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT COUNT(*) FROM weather WHERE mean_humidity > 50 AND mean_visibility > 8;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT COUNT(*) FROM weather WHERE mean_humidity > 50 AND mean_visibility_miles > 8;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    }\n}\n",
        "t_1": "SELECT COUNT(*) FROM weather WHERE mean_humidity > 50 AND mean_visibility_miles > 8;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    }\n}\n",
        "t_2": "SELECT COUNT(*) \nFROM weather \nWHERE mean_humidity > 50 AND mean_visibility > 8;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT COUNT(*) \nFROM weather \nWHERE mean_humidity > 50 AND mean_visibility > 8;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.142",
        "c_low": "SELECT s.id FROM station s JOIN status st ON s.id = st.station_id WHERE s.city = 'San Francisco' AND st.bikes_available > 10;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T1.city = 'San Francisco' AND T2.bikes_available > 10",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique bike stations that currently have a certain number of bikes available. The query joins the 'station' table with the 'status' table to filter stations based on their bike availability, using a placeholder for the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average longitude of bike stations from the 'station' table that do not have the maximum number of available bikes reported in the 'status' table. The placeholder in the HAVING clause represents a numeric value for filtering the bike availability.\",\n        \"virtual_table\": \"SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT id FROM station WHERE city = 'San Francisco' INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available) > 10",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the unique station IDs from the 'station' table located in a specific city. It intersects with the 'status' table to find stations that have an average number of available bikes greater than a specified threshold. The placeholders in the WHERE and HAVING clauses represent the city name and the minimum average bikes available, respectively.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT s.id FROM station s JOIN status st ON s.id = st.station_id WHERE s.city = 'San Francisco' AND st.bikes_available > 10;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T1.city = 'San Francisco' GROUP BY T1.id HAVING avg(T2.bikes_available) > 10",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT s.id \nFROM station s \nJOIN status st ON s.id = st.station_id \nWHERE s.city = 'San Francisco' \nAND st.bikes_available > 10;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.143",
        "c_low": "SELECT s.name, s.id \nFROM station s \nJOIN status st ON s.id = st.station_id \nGROUP BY s.id \nHAVING AVG(st.bikes_available) > 14 OR strftime('%m', s.installation_date) = '12'",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT T1.id, T1.name \nFROM station AS T1 \nLEFT JOIN status AS T2 ON T1.id = T2.station_id \nGROUP BY T1.id, T1.name \nHAVING AVG(T2.bikes_available) > 14 OR strftime('%m', T1.installation_date) = '12'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique bike stations that currently have a certain number of bikes available. The query joins the 'station' table with the 'status' table to filter stations based on their bike availability, using a placeholder for the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average longitude of bike stations from the 'station' table that do not have the maximum number of available bikes reported in the 'status' table. The placeholder in the HAVING clause represents a numeric value for filtering the bike availability.\",\n        \"virtual_table\": \"SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT id, name FROM station WHERE id IN (SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available) > 14) OR installation_date LIKE '%-12-%';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the unique station IDs from the 'station' table located in a specific city. It intersects with the 'status' table to find stations that have an average number of available bikes greater than a specified threshold. The placeholders in the WHERE and HAVING clauses represent the city name and the minimum average bikes available, respectively.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT s.name, s.id \nFROM station s \nJOIN status st ON s.id = st.station_id \nGROUP BY s.id, s.name \nHAVING AVG(st.bikes_available) > 14 OR strftime('%m', s.installation_date) = '12';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT id, name FROM station WHERE id IN (SELECT T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available) > 14) OR installation_date LIKE '%-12-%';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT name, id \nFROM station \nWHERE id IN (\n    SELECT station_id \n    FROM status \n    GROUP BY station_id \n    HAVING AVG(bikes_available) > 14\n) OR installation_date LIKE '%-12-%';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.144",
        "c_low": "SELECT s.name, s.id \nFROM station s \nJOIN status st ON s.id = st.station_id \nGROUP BY s.id \nHAVING AVG(st.bikes_available) > 14 \nOR s.installation_date LIKE '%-12-%';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT T1.id, T1.name \nFROM station AS T1 \nJOIN status AS T2 ON T1.id = T2.station_id \nGROUP BY T1.id, T1.name \nHAVING AVG(T2.bikes_available) > 14 OR \n       strftime('%m', T1.installation_date) = '12'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique bike stations that currently have a certain number of bikes available. The query joins the 'station' table with the 'status' table to filter stations based on their bike availability, using a placeholder for the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average longitude of bike stations from the 'station' table that do not have the maximum number of available bikes reported in the 'status' table. The placeholder in the HAVING clause represents a numeric value for filtering the bike availability.\",\n        \"virtual_table\": \"SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT id, name FROM station WHERE id IN (SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available) > 14) OR installation_date LIKE '%-12-%';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the unique station IDs from the 'station' table located in a specific city. It intersects with the 'status' table to find stations that have an average number of available bikes greater than a specified threshold. The placeholders in the WHERE and HAVING clauses represent the city name and the minimum average bikes available, respectively.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT s.name, s.id \nFROM station s \nJOIN status st ON s.id = st.station_id \nGROUP BY s.id, s.name \nHAVING AVG(st.bikes_available) > 14 OR strftime('%m', s.installation_date) = '12';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT T1.id, T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T1.id HAVING avg(T2.bikes_available) > 14 UNION SELECT T1.id, T1.name FROM station AS T1 WHERE strftime('%m', T1.installation_date) = '12'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique bike stations that currently have a certain number of bikes available. The query joins the 'station' table with the 'status' table to filter stations based on their bike availability, using a placeholder for the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT s.name, s.id \nFROM station s \nJOIN status st ON s.id = st.station_id \nGROUP BY s.id \nHAVING AVG(st.bikes_available) > 14 \n   OR s.installation_date LIKE '%-12-%';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.145",
        "c_low": "SELECT cloud_cover, COUNT(cloud_cover) AS count\nFROM weather\nWHERE zip_code = 94107\nGROUP BY cloud_cover\nORDER BY count DESC\nLIMIT 3;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT cloud_cover, COUNT(cloud_cover) as count\nFROM weather\nWHERE zip_code = 94107\nGROUP BY cloud_cover\nORDER BY count DESC\nLIMIT 3;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT cloud_cover, COUNT(cloud_cover) as count FROM weather WHERE zip_code = 94107 GROUP BY cloud_cover ORDER BY count DESC LIMIT 3;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    }\n}\n",
        "t_1": "SELECT cloud_cover, COUNT(cloud_cover) as count FROM weather WHERE zip_code = 94107 GROUP BY cloud_cover ORDER BY count DESC LIMIT 3;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    }\n}\n",
        "t_2": "SELECT cloud_cover, COUNT(cloud_cover) AS frequency\nFROM weather\nWHERE zip_code = 94107\nGROUP BY cloud_cover\nORDER BY frequency DESC\nLIMIT 3;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT cloud_cover, COUNT(cloud_cover) AS count\nFROM weather\nWHERE zip_code = 94107\nGROUP BY cloud_cover\nORDER BY count DESC\nLIMIT 3;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.146",
        "c_low": "SELECT cloud_cover, COUNT(cloud_cover) AS count\nFROM weather\nWHERE zip_code = 94107\nGROUP BY cloud_cover\nORDER BY count DESC\nLIMIT 3;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT cloud_cover, COUNT(cloud_cover) as count\nFROM weather\nWHERE zip_code = 94107\nGROUP BY cloud_cover\nORDER BY count DESC\nLIMIT 3;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT cloud_cover, COUNT(cloud_cover) as cover_count \nFROM weather \nWHERE zip_code = 94107 \nGROUP BY cloud_cover \nORDER BY cover_count DESC \nLIMIT 3;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    }\n}\n",
        "t_1": "SELECT cloud_cover, COUNT(cloud_cover) as count FROM weather WHERE zip_code = 94107 GROUP BY cloud_cover ORDER BY count DESC LIMIT 3;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    }\n}\n",
        "t_2": "SELECT cloud_cover, COUNT(cloud_cover) AS count\nFROM weather\nWHERE zip_code = 94107\nGROUP BY cloud_cover\nORDER BY count DESC\nLIMIT 3;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT cloud_cover, COUNT(cloud_cover) AS cover_count\nFROM weather\nWHERE zip_code = 94107\nGROUP BY cloud_cover\nORDER BY cover_count DESC\nLIMIT 3;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.153",
        "c_low": "SELECT zip_code, date FROM weather WHERE max_temperature_f = 80",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the date and the temperature range (difference between maximum and minimum temperatures) from the 'weather' table, ordered by the temperature range. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT date, zip_code FROM weather WHERE max_temperature_f = 80",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT zip_code, date FROM weather WHERE max_temperature_f = 80",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT zip_code, date FROM weather WHERE max_temperature_f = 80",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_2": "SELECT date, zip_code \nFROM weather \nWHERE max_temperature_f = 80;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT date, zip_code \nFROM weather \nWHERE max_temperature_f = 80;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.154",
        "c_low": "SELECT DISTINCT s.zip_code, w.date \nFROM station s \nJOIN status st ON s.id = st.station_id \nJOIN weather w ON w.zip_code = s.city \nWHERE w.max_temperature_f >= 80;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the date and the temperature range (difference between maximum and minimum temperatures) from the 'weather' table, ordered by the temperature range. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT w.zip_code, w.date \nFROM weather w \nJOIN station s ON s.city = (SELECT city FROM station WHERE id = s.id) \nWHERE w.max_temperature_f >= 80;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT s.city, w.zip_code, w.date FROM weather w JOIN station s ON s.city = w.zip_code WHERE w.max_temperature_f >= 80",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT zip_code, date FROM weather WHERE max_temperature_f >= 80",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT zip_code, date FROM weather WHERE max_temperature_f >= 80",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT w.zip_code, w.date\nFROM weather w\nJOIN station s ON s.city = w.zip_code\nWHERE w.max_temperature_f >= 80;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.155",
        "c_low": "SELECT trip.id FROM trip JOIN weather ON trip.zip_code = weather.zip_code WHERE weather.mean_temperature_f > 60;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the date and the temperature range (difference between maximum and minimum temperatures) from the 'weather' table, ordered by the temperature range. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT id FROM trip WHERE zip_code IN (SELECT zip_code FROM weather WHERE mean_temperature_f > 60)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT id FROM trip WHERE zip_code IN (SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_temperature_f) > 60)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT id FROM trip WHERE zip_code IN (SELECT zip_code FROM weather WHERE avg(mean_temperature_f) > 60 GROUP BY zip_code)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_2": "SELECT trip.id \nFROM trip \nJOIN weather ON trip.zip_code = weather.zip_code \nWHERE weather.mean_temperature_f > 60;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT trip.id \nFROM trip \nJOIN weather ON trip.zip_code = weather.zip_code \nWHERE weather.mean_temperature_f > 60;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.156",
        "c_low": "SELECT trip.id\nFROM trip\nJOIN weather ON trip.start_date LIKE '%' || weather.date || '%'\nWHERE weather.mean_temperature_f > 60;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the date and the temperature range (difference between maximum and minimum temperatures) from the 'weather' table, ordered by the temperature range. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT id FROM trip WHERE start_date IN (SELECT start_date FROM trip WHERE zip_code IN (SELECT zip_code FROM weather WHERE mean_temperature_f > 60))",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT trip.id FROM trip JOIN (SELECT zip_code, avg(mean_temperature_f) as avg_temp FROM weather GROUP BY zip_code) as temp ON trip.zip_code = temp.zip_code WHERE temp.avg_temp > 60;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT id FROM trip WHERE zip_code IN (SELECT zip_code FROM weather WHERE avg(mean_temperature_f) > 60 GROUP BY zip_code)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT trip.id FROM trip JOIN weather ON trip.start_date = weather.date WHERE weather.mean_temperature_f > 60;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT trip.id\nFROM trip\nJOIN weather ON trip.start_date LIKE '%' || weather.date || '%'\nWHERE weather.mean_temperature_f > 60;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.160",
        "c_low": "SELECT w1.date, w1.zip_code \nFROM weather w1 \nWHERE w1.min_dew_point_f < (\n    SELECT MIN(w2.min_dew_point_f) \n    FROM weather w2 \n    WHERE w2.zip_code = 94107\n) \nAND w1.zip_code IS NOT NULL;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the date and the temperature range (difference between maximum and minimum temperatures) from the 'weather' table, ordered by the temperature range. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT date, zip_code FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT w1.zip_code, w1.min_dew_point_f \nFROM weather w1 \nWHERE w1.min_dew_point_f < (\n    SELECT MIN(w2.min_dew_point_f) \n    FROM weather w2 \n    WHERE w2.zip_code = 94107\n) \nGROUP BY w1.zip_code;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT date, zip_code FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT w.zip_code \nFROM weather w \nWHERE w.min_dew_point_f < (SELECT MIN(min_dew_point_f) FROM weather WHERE zip_code = 94107) \nGROUP BY w.zip_code;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT w.zip_code \nFROM weather w \nWHERE w.min_dew_point_f < (SELECT MIN(min_dew_point_f) FROM weather WHERE zip_code = 94107) \nGROUP BY w.zip_code;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.161",
        "c_low": "SELECT t.end_station_id, s.installation_date\nFROM trip t\nJOIN station s ON t.end_station_id = s.id;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT end_station_id, installation_date FROM trip JOIN station ON trip.end_station_id = station.id",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT s.installation_date FROM trip t JOIN station s ON t.end_station_id = s.id;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT s.installation_date \nFROM trip t \nJOIN station s ON t.end_station_id = s.id;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_2": "SELECT s.installation_date FROM trip t JOIN station s ON t.end_station_id = s.id;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT t.end_station_id, s.installation_date\nFROM trip t\nJOIN station s ON t.end_station_id = s.id;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.162",
        "c_low": "SELECT s.name AS end_station_name, s.installation_date \nFROM trip t \nJOIN station s ON t.end_station_id = s.id;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT s.installation_date FROM trip t JOIN station s ON t.end_station_id = s.id;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT s.installation_date \nFROM station s \nJOIN trip t ON s.id = t.end_station_id \nGROUP BY s.id;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT station.installation_date FROM station JOIN trip ON station.id = trip.end_station_id;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT s.installation_date \nFROM station s \nJOIN trip t ON s.id = t.end_station_id;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT s.name AS end_station_name, s.installation_date \nFROM trip t \nJOIN station s ON t.end_station_id = s.id;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.163",
        "c_low": "SELECT trip.id \nFROM trip \nJOIN station ON trip.start_station_id = station.id \nWHERE station.dock_count = (SELECT MAX(dock_count) FROM station);",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT trip.id FROM trip JOIN station ON trip.start_station_id = station.id WHERE station.dock_count = (SELECT MAX(dock_count) FROM station);",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT trip.id FROM trip JOIN station ON trip.start_station_id = station.id ORDER BY station.dock_count DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT id FROM trip WHERE start_station_id = (SELECT id FROM station ORDER BY dock_count DESC LIMIT 1)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_2": "SELECT trip.id FROM trip JOIN station ON trip.start_station_id = station.id ORDER BY station.dock_count DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT trip.id \nFROM trip \nJOIN station ON trip.start_station_id = station.id \nWHERE station.dock_count = (SELECT MAX(dock_count) FROM station);",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.164",
        "c_low": "SELECT trip.id \nFROM trip \nJOIN station ON trip.start_station_id = station.id \nWHERE station.dock_count = (SELECT MAX(dock_count) FROM station);",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT id FROM trip WHERE start_station_id = (SELECT id FROM station ORDER BY dock_count DESC LIMIT 1)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique bike stations that currently have a certain number of bikes available. The query joins the 'station' table with the 'status' table to filter stations based on their bike availability, using a placeholder for the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT id FROM trip WHERE start_station_id = (SELECT id FROM station ORDER BY dock_count DESC LIMIT 1)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the unique station IDs from the 'station' table located in a specific city. It intersects with the 'status' table to find stations that have an average number of available bikes greater than a specified threshold. The placeholders in the WHERE and HAVING clauses represent the city name and the minimum average bikes available, respectively.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT id FROM trip WHERE start_station_id = (SELECT id FROM station ORDER BY dock_count DESC LIMIT 1)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_2": "SELECT id FROM trip WHERE start_station_id = (SELECT id FROM station ORDER BY dock_count DESC LIMIT 1)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT trip.id \nFROM trip \nJOIN station ON trip.start_station_id = station.id \nWHERE station.dock_count = (SELECT MAX(dock_count) FROM station);",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.165",
        "c_low": "SELECT COUNT(*) AS trip_count \nFROM trip \nWHERE end_station_name NOT IN (SELECT name FROM station WHERE city = 'San Francisco');",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 ON T1.id = T2.start_station_id AND T3.id = T2.end_station_id WHERE T1.city != 'San Francisco' AND T3.city != 'San Francisco'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT COUNT(*) FROM trip WHERE end_station_name NOT IN (SELECT name FROM station WHERE city = 'San Francisco')",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the average number of bikes available at stations that are not located in a specific city. The placeholder in the WHERE clause represents the name of the city to exclude from the average calculation.\",\n        \"virtual_table\": \"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "t_1": "SELECT COUNT(*) AS trip_count \nFROM trip \nWHERE end_station_name NOT IN (SELECT name FROM station WHERE city = 'San Francisco');",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT count(*) FROM trip WHERE end_station_id NOT IN (SELECT id FROM station WHERE city = 'San Francisco')",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average number of bikes available at stations that are not located in a specific city. The placeholder in the WHERE clause represents the name of the city to exclude from the average calculation.\",\n        \"virtual_table\": \"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(*) AS trip_count \nFROM trip \nWHERE end_station_name NOT IN (SELECT name FROM station WHERE city = 'San Francisco');",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.166",
        "c_low": "SELECT COUNT(*) AS trip_count \nFROM trip \nWHERE end_station_name != 'San Francisco';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id WHERE T2.city != 'San Francisco'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT COUNT(*) FROM trip WHERE end_station_name != 'San Francisco'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the average number of bikes available at stations that are not located in a specific city. The placeholder in the WHERE clause represents the name of the city to exclude from the average calculation.\",\n        \"virtual_table\": \"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "t_1": "SELECT COUNT(*) FROM trip WHERE end_station_name != 'San Francisco';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_2": "SELECT count(*) FROM trip WHERE end_station_name != 'San Francisco'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average number of bikes available at stations that are not located in a specific city. The placeholder in the WHERE clause represents the name of the city to exclude from the average calculation.\",\n        \"virtual_table\": \"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(*) AS trip_count \nFROM trip \nWHERE end_station_name != 'San Francisco';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.167",
        "c_low": "SELECT date FROM weather WHERE zip_code = 94107 AND events NOT LIKE '%Fog%' AND events NOT LIKE '%Rain%';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT date FROM weather WHERE zip_code = 94107 AND events NOT LIKE '%Fog%' AND events NOT LIKE '%Rain%';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT date FROM weather WHERE zip_code = 94107 AND events NOT LIKE '%Fog%' AND events NOT LIKE '%Rain%'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average number of bikes available at stations that are not located in a specific city. The placeholder in the WHERE clause represents the name of the city to exclude from the average calculation.\",\n        \"virtual_table\": \"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "t_1": "SELECT date FROM weather WHERE zip_code = 94107 AND events NOT LIKE '%Fog%' AND events NOT LIKE '%Rain%';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT date FROM weather WHERE zip_code = 94107 AND events NOT LIKE '%Fog%' AND events NOT LIKE '%Rain%';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the average number of bikes available at stations that are not located in a specific city. The placeholder in the WHERE clause represents the name of the city to exclude from the average calculation.\",\n        \"virtual_table\": \"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT date FROM weather WHERE zip_code = 94107 AND events NOT LIKE '%Fog%' AND events NOT LIKE '%Rain%';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.168",
        "c_low": "SELECT date FROM weather WHERE zip_code = 94107 AND events NOT LIKE '%fog%' AND events NOT LIKE '%rain%';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT date FROM weather WHERE zip_code = 94107 AND events IS NULL AND precipitation_inches = 0",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT date FROM weather WHERE zip_code = 94107 AND precipitation_inches = 0 AND events NOT LIKE '%fog%'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average number of bikes available at stations that are not located in a specific city. The placeholder in the WHERE clause represents the name of the city to exclude from the average calculation.\",\n        \"virtual_table\": \"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "t_1": "SELECT date FROM weather WHERE zip_code = 94107 AND precipitation_inches = 0 AND events = 0",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT date FROM weather WHERE zip_code = 94107 AND precipitation_inches = 0 AND events NOT LIKE '%fog%'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the average number of bikes available at stations that are not located in a specific city. The placeholder in the WHERE clause represents the name of the city to exclude from the average calculation.\",\n        \"virtual_table\": \"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT date FROM weather WHERE zip_code = 94107 AND events NOT LIKE '%fog%' AND events NOT LIKE '%rain%';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.172",
        "c_low": "SELECT s.name \nFROM station s \nJOIN status st ON s.id = st.station_id \nWHERE st.bikes_available > 10 \nAND s.city != 'San Jose';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available > 10 AND T1.city != 'San Jose'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique bike stations that currently have a certain number of bikes available. The query joins the 'station' table with the 'status' table to filter stations based on their bike availability, using a placeholder for the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average longitude of bike stations from the 'station' table that do not have the maximum number of available bikes reported in the 'status' table. The placeholder in the HAVING clause represents a numeric value for filtering the bike availability.\",\n        \"virtual_table\": \"SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available) > 10 EXCEPT SELECT name FROM station WHERE city = 'San Jose'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average number of bikes available at stations that are not located in a specific city. The placeholder in the WHERE clause represents the name of the city to exclude from the average calculation.\",\n        \"virtual_table\": \"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "t_1": "SELECT s.name \nFROM station s \nJOIN status st ON s.id = st.station_id \nWHERE st.bikes_available > 10 \nAND s.city != 'San Jose';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available > 10 AND T1.city != 'San Jose'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT name FROM station s JOIN status st ON s.id = st.station_id WHERE st.bikes_available > 10 AND s.city != 'San Jose';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.183",
        "c_low": "SELECT city, MAX(lat) as highest_latitude \nFROM station \nGROUP BY city \nORDER BY highest_latitude DESC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT city, MAX(lat) AS highest_latitude\nFROM station\nGROUP BY city\nORDER BY highest_latitude DESC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT city, MAX(lat) as highest_latitude \nFROM station \nGROUP BY city \nORDER BY highest_latitude DESC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT city, MAX(lat) as highest_latitude \nFROM station \nGROUP BY city \nORDER BY highest_latitude DESC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT city, MAX(lat) AS highest_latitude\nFROM station\nGROUP BY city\nORDER BY highest_latitude DESC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT city, MAX(lat) AS highest_latitude\nFROM station\nGROUP BY city\nORDER BY highest_latitude DESC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.184",
        "c_low": "SELECT city, name FROM station WHERE lat = (SELECT MAX(lat) FROM station GROUP BY city) ORDER BY lat DESC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT city, name FROM station ORDER BY lat DESC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT name FROM station WHERE city IS NOT NULL ORDER BY lat DESC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT city, name FROM station WHERE lat = (SELECT MAX(lat) FROM station GROUP BY city) ORDER BY lat DESC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT city, name FROM station ORDER BY lat DESC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT city, name FROM station ORDER BY CAST(lat AS REAL) DESC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.188",
        "c_low": "SELECT id, duration FROM trip ORDER BY duration DESC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT id, duration FROM trip ORDER BY duration DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT id, duration FROM trip ORDER BY duration DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT id, duration FROM trip ORDER BY duration DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_2": "SELECT id, duration FROM trip ORDER BY duration DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT id, duration FROM trip ORDER BY duration DESC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.189",
        "c_low": "SELECT s.long, AVG(t.duration) AS average_duration\nFROM station s\nJOIN trip t ON s.id = t.start_station_id\nGROUP BY s.id, s.long;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT s.long, AVG(t.duration) AS average_duration\nFROM station s\nJOIN trip t ON s.id = t.start_station_id\nGROUP BY s.id;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the average longitude of bike stations from the 'station' table that do not have the maximum number of available bikes reported in the 'status' table. The placeholder in the HAVING clause represents a numeric value for filtering the bike availability.\",\n        \"virtual_table\": \"SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT s.long, AVG(t.duration) AS average_duration\nFROM station s\nJOIN trip t ON s.id = t.start_station_id\nGROUP BY s.id, s.long;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the average number of bikes available at stations that are not located in a specific city. The placeholder in the WHERE clause represents the name of the city to exclude from the average calculation.\",\n        \"virtual_table\": \"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the unique station IDs from the 'station' table located in a specific city. It intersects with the 'status' table to find stations that have an average number of available bikes greater than a specified threshold. The placeholders in the WHERE and HAVING clauses represent the city name and the minimum average bikes available, respectively.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT s.long, AVG(t.duration) AS average_duration\nFROM station s\nJOIN trip t ON s.id = t.start_station_id\nGROUP BY s.id;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT s.long, AVG(t.duration) AS average_duration\nFROM station s\nJOIN trip t ON s.id = t.start_station_id\nGROUP BY s.id, s.long;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the average longitude of bike stations from the 'station' table that do not have the maximum number of available bikes reported in the 'status' table. The placeholder in the HAVING clause represents a numeric value for filtering the bike availability.\",\n        \"virtual_table\": \"SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT s.long, AVG(t.duration) AS average_duration\nFROM station s\nJOIN trip t ON s.id = t.start_station_id\nGROUP BY s.id, s.long;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.190",
        "c_low": "SELECT s.id, s.name, s.long, AVG(t.duration) AS average_duration\nFROM station s\nJOIN trip t ON s.id = t.start_station_id\nGROUP BY s.id, s.name, s.long;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT start_station_id, start_station_name, long, AVG(duration) AS average_duration\nFROM trip\nGROUP BY start_station_id, start_station_name, long;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT start_station_id, start_station_name, long, AVG(duration) AS average_duration\nFROM trip\nJOIN station ON trip.start_station_id = station.id\nGROUP BY start_station_id, start_station_name, long;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the unique station IDs from the 'station' table located in a specific city. It intersects with the 'status' table to find stations that have an average number of available bikes greater than a specified threshold. The placeholders in the WHERE and HAVING clauses represent the city name and the minimum average bikes available, respectively.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT s.id, s.name, s.long, AVG(t.duration) AS average_duration\nFROM station s\nJOIN trip t ON s.id = t.start_station_id\nGROUP BY s.id, s.name, s.long;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT start_station_id, name, long, AVG(duration) AS average_duration\nFROM trip\nJOIN station ON trip.start_station_id = station.id\nGROUP BY start_station_id, name, long;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average longitude of bike stations from the 'station' table that do not have the maximum number of available bikes reported in the 'status' table. The placeholder in the HAVING clause represents a numeric value for filtering the bike availability.\",\n        \"virtual_table\": \"SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_3+": "SELECT trip.start_station_id, station.name, station.long, AVG(trip.duration) AS average_duration\nFROM trip\nJOIN station ON trip.start_station_id = station.id\nGROUP BY trip.start_station_id, station.name, station.long;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.191",
        "c_low": "SELECT s.lat, MIN(t.duration) AS min_duration\nFROM station s\nJOIN trip t ON s.id = t.end_station_id\nGROUP BY s.id, s.lat;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT s.lat, MIN(t.duration) AS min_duration\nFROM station s\nJOIN trip t ON s.id = t.end_station_id\nGROUP BY s.id;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average longitude of bike stations from the 'station' table that do not have the maximum number of available bikes reported in the 'status' table. The placeholder in the HAVING clause represents a numeric value for filtering the bike availability.\",\n        \"virtual_table\": \"SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT s.lat, MIN(t.duration) AS min_duration\nFROM station s\nJOIN trip t ON s.id = t.end_station_id\nGROUP BY s.id, s.lat;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT s.lat, MIN(t.duration) AS min_duration\nFROM station s\nJOIN trip t ON s.id = t.end_station_id\nGROUP BY s.id;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT s.lat, MIN(t.duration) AS min_duration\nFROM station s\nJOIN trip t ON s.id = t.end_station_id\nGROUP BY s.id;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT s.lat, MIN(t.duration) AS min_duration\nFROM station s\nJOIN trip t ON s.id = t.end_station_id\nGROUP BY s.id;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.192",
        "c_low": "SELECT s.id, s.name, s.lat, MIN(t.duration) AS min_duration\nFROM station s\nJOIN trip t ON s.id = t.end_station_id\nGROUP BY s.id, s.name, s.lat;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT end_station_id, end_station_name, lat, MIN(duration) AS min_duration \nFROM trip \nJOIN station ON trip.end_station_id = station.id \nGROUP BY end_station_id, end_station_name, lat;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT end_station_id, end_station_name, lat, MIN(duration) AS min_duration \nFROM trip \nJOIN station ON trip.end_station_id = station.id \nGROUP BY end_station_id, end_station_name, lat;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT end_station_id, end_station_name, MIN(duration) AS min_duration \nFROM trip \nGROUP BY end_station_id, end_station_name;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT end_station_id, name, lat, MIN(duration) AS min_duration \nFROM trip \nJOIN station ON trip.end_station_id = station.id \nGROUP BY end_station_id, name, lat;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT end_station_id, end_station_name, lat, MIN(duration) AS min_duration\nFROM trip\nJOIN station ON trip.end_station_id = station.id\nGROUP BY end_station_id, end_station_name, lat;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.195",
        "c_low": "SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f < 70;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the date and the temperature range (difference between maximum and minimum temperatures) from the 'weather' table, ordered by the temperature range. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT zip_code FROM weather WHERE zip_code NOT IN (SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f >= 70)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT zip_code FROM weather WHERE zip_code NOT IN (SELECT zip_code FROM weather WHERE max_dew_point_f >= 70)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT zip_code FROM weather WHERE zip_code NOT IN (SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f >= 70)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f < 70;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f < 70;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.196",
        "c_low": "SELECT DISTINCT zip_code \nFROM weather \nWHERE max_dew_point_f < 70 \nGROUP BY zip_code \nHAVING COUNT(DISTINCT date) = (SELECT COUNT(DISTINCT date) FROM weather)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the date and the temperature range (difference between maximum and minimum temperatures) from the 'weather' table, ordered by the temperature range. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT zip_code FROM weather WHERE zip_code NOT IN (SELECT zip_code FROM weather WHERE max_dew_point_f >= 70)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT zip_code FROM weather GROUP BY zip_code HAVING MAX(max_dew_point_f) < 70",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f < 70",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f < 70;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f < 70;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.198",
        "c_low": "SELECT id FROM trip WHERE duration = (SELECT AVG(duration) FROM trip WHERE zip_code = '94103')",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT id FROM trip WHERE duration >= (SELECT avg(duration) FROM trip WHERE zip_code = '94103')",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT id FROM trip WHERE duration = (SELECT avg(duration) FROM trip WHERE zip_code = '94103')",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT id FROM trip WHERE duration >= (SELECT avg(duration) FROM trip WHERE zip_code = '94103')",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT id FROM trip WHERE duration = (SELECT AVG(duration) FROM trip WHERE zip_code = '94103')",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT id FROM trip WHERE duration = (SELECT AVG(duration) FROM trip WHERE zip_code = '94103')",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.204",
        "c_low": "SELECT station.id, station.name FROM station JOIN status ON station.id = status.station_id WHERE status.bikes_available > 12;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT T1.id, T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available > 12",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique bike stations that currently have a certain number of bikes available. The query joins the 'station' table with the 'status' table to filter stations based on their bike availability, using a placeholder for the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average longitude of bike stations from the 'station' table that do not have the maximum number of available bikes reported in the 'status' table. The placeholder in the HAVING clause represents a numeric value for filtering the bike availability.\",\n        \"virtual_table\": \"SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT T1.id, T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T1.id HAVING avg(T2.bikes_available) > 12;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the unique station IDs from the 'station' table located in a specific city. It intersects with the 'status' table to find stations that have an average number of available bikes greater than a specified threshold. The placeholders in the WHERE and HAVING clauses represent the city name and the minimum average bikes available, respectively.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT s.id, s.name FROM station s JOIN status st ON s.id = st.station_id WHERE st.bikes_available > 12;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT T1.id, T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available > 12",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique bike stations that currently have a certain number of bikes available. The query joins the 'station' table with the 'status' table to filter stations based on their bike availability, using a placeholder for the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT station.id, station.name \nFROM station \nJOIN status ON station.id = status.station_id \nWHERE status.bikes_available > 12;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.205",
        "c_low": "SELECT zip_code\nFROM trip\nJOIN weather ON trip.start_date LIKE weather.date || '%'\nGROUP BY zip_code\nHAVING AVG(mean_humidity) < 70 AND COUNT(trip.id) >= 100;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT zip_code FROM weather WHERE mean_humidity < 70 AND zip_code IN (SELECT zip_code FROM trip GROUP BY zip_code HAVING COUNT(id) >= 100)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT zip_code \nFROM weather \nJOIN trip ON trip.zip_code = weather.zip_code \nGROUP BY zip_code \nHAVING avg(mean_humidity) < 70 AND COUNT(trip.id) >= 100;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT zip_code \nFROM weather \nGROUP BY zip_code \nHAVING avg(mean_humidity) < 70 \nAND (SELECT COUNT(*) FROM trip WHERE trip.zip_code = weather.zip_code) >= 100;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT zip_code\nFROM trip\nJOIN weather ON trip.start_date LIKE weather.date || '%'\nGROUP BY zip_code\nHAVING AVG(mean_humidity) < 70 AND COUNT(trip.id) >= 100;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT zip_code\nFROM trip\nJOIN weather ON trip.start_date LIKE weather.date || '%'\nGROUP BY zip_code\nHAVING AVG(mean_humidity) < 70 AND COUNT(trip.id) >= 100;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.206",
        "c_low": "SELECT zip_code \nFROM trip \nWHERE zip_code IN (\n    SELECT zip_code \n    FROM weather \n    GROUP BY zip_code \n    HAVING AVG(mean_humidity) < 70\n) \nGROUP BY zip_code \nHAVING COUNT(id) >= 100;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT zip_code \nFROM weather \nJOIN trip ON weather.zip_code = trip.zip_code \nGROUP BY zip_code \nHAVING avg(mean_humidity) < 70 AND COUNT(trip.id) >= 100;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT zip_code \nFROM weather \nJOIN trip ON weather.zip_code = trip.zip_code \nGROUP BY zip_code \nHAVING avg(mean_humidity) < 70 AND COUNT(trip.id) >= 100;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    }\n}\n",
        "t_1": "SELECT zip_code \nFROM weather \nGROUP BY zip_code \nHAVING avg(mean_humidity) < 70 \nAND (SELECT COUNT(*) FROM trip WHERE trip.zip_code = weather.zip_code) >= 100;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT zip_code \nFROM trip \nWHERE zip_code IN (\n    SELECT zip_code \n    FROM weather \n    WHERE mean_humidity < 70\n) \nGROUP BY zip_code \nHAVING COUNT(id) >= 100;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT zip_code \nFROM trip \nWHERE zip_code IN (\n    SELECT zip_code \n    FROM weather \n    WHERE mean_humidity < 70\n) \nGROUP BY zip_code \nHAVING COUNT(id) >= 100;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.208",
        "c_low": "SELECT name FROM station WHERE city = 'Palo Alto' AND id NOT IN (SELECT end_station_id FROM trip)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT name FROM station WHERE city = 'Palo Alto' AND id NOT IN (SELECT end_station_id FROM trip)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT name FROM station WHERE city = 'Palo Alto' EXCEPT SELECT end_station_name FROM trip;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT name FROM station WHERE city = 'Palo Alto' AND id NOT IN (SELECT end_station_id FROM trip)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT name FROM station WHERE city = 'Palo Alto' EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*) > 0",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT name FROM station WHERE city = 'Palo Alto' AND id NOT IN (SELECT end_station_id FROM trip);",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.211",
        "c_low": "SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude FROM station WHERE id IN (SELECT start_station_id FROM trip)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude FROM trip;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude FROM station JOIN trip ON station.id = trip.start_station_id;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    }\n}\n",
        "t_1": "SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude FROM trip;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude FROM trip;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the average longitude of bike stations from the 'station' table that do not have the maximum number of available bikes reported in the 'status' table. The placeholder in the HAVING clause represents a numeric value for filtering the bike availability.\",\n        \"virtual_table\": \"SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude\nFROM station\nJOIN trip ON station.id = trip.start_station_id;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.212",
        "c_low": "SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude FROM station WHERE id IN (SELECT start_station_id FROM trip);",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT avg(lat) AS average_latitude, avg(long) AS average_longitude FROM station WHERE id IN (SELECT start_station_id FROM trip)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the average longitude of bike stations from the 'station' table that do not have the maximum number of available bikes reported in the 'status' table. The placeholder in the HAVING clause represents a numeric value for filtering the bike availability.\",\n        \"virtual_table\": \"SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude \nFROM station \nWHERE id IN (SELECT start_station_id FROM trip)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude \nFROM station \nWHERE id IN (SELECT DISTINCT start_station_id FROM trip);",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude FROM station WHERE id IN (SELECT start_station_id FROM trip)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude\nFROM station\nWHERE id IN (\n    SELECT start_station_id\n    FROM trip\n);",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.214",
        "c_low": "SELECT DISTINCT b.Writer\nFROM book b\nORDER BY b.Writer ASC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT DISTINCT Writer FROM book ORDER BY Writer ASC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the writers of books from the 'book' table that have a publication price exceeding a specified amount. The placeholder in the WHERE clause represents the minimum price of the publication.\",\n        \"virtual_table\": \"SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the titles of books from the 'book' table that are not written by a specific writer. The placeholder in the WHERE clause represents the writer's identifier.\",\n        \"virtual_table\": \"SELECT Title FROM book WHERE Writer != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT Writer FROM book GROUP BY Writer ORDER BY Writer ASC",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of writers from the 'book' table who have authored more than a specified number of books. The placeholder in the HAVING clause represents the minimum count of books that a writer must have authored to be included in the results.\",\n        \"virtual_table\": \"SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT Writer FROM book ORDER BY Writer ASC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of writers from the 'book' table who have authored more than a specified number of books. The placeholder in the HAVING clause represents the minimum count of books that a writer must have authored to be included in the results.\",\n        \"virtual_table\": \"SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the titles of books from the 'book' table that are not written by a specific writer. The placeholder in the WHERE clause represents the writer's identifier.\",\n        \"virtual_table\": \"SELECT Title FROM book WHERE Writer != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T1.Writer ASC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the writers of books from the 'book' table that have a publication price exceeding a specified amount. The placeholder in the WHERE clause represents the minimum price of the publication.\",\n        \"virtual_table\": \"SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT b.Writer\nFROM book b\nORDER BY b.Writer ASC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.227",
        "c_low": "SELECT Publication_Date, COUNT(*) as count FROM publication GROUP BY Publication_Date ORDER BY count DESC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of distinct publication dates from the 'publication' table. The result will indicate how many unique dates exist for the publications recorded.\",\n        \"virtual_table\": \"SELECT COUNT (DISTINCT Publication_Date) FROM publication\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of publishers from the 'publication' table, ordered by the retail price of their publications in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of publishers to retrieve.\",\n        \"virtual_table\": \"SELECT Publisher FROM publication ORDER BY Price DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT Publication_Date, COUNT(*) as count FROM publication GROUP BY Publication_Date ORDER BY count DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the retail prices of publications from the 'publication' table that are published by specific publishers. The placeholders in the WHERE clause represent the names of the publishers being queried.\",\n        \"virtual_table\": \"SELECT Price FROM publication WHERE Publisher  =  [PLACEHOLDER-TYPE:STRING] OR Publisher  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the writers of books from the 'book' table that have a publication price exceeding a specified amount. The placeholder in the WHERE clause represents the minimum price of the publication.\",\n        \"virtual_table\": \"SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT Publication_Date, COUNT(*) as Publication_Count FROM publication GROUP BY Publication_Date ORDER BY Publication_Count DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of publications by each publisher from the 'publication' table. The query groups the results by the publisher's name and counts the total number of publications for each publisher.\",\n        \"virtual_table\": \"SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\"\n    }\n}\n",
        "t_1": "SELECT Publication_Date, COUNT(*) as Publication_Count FROM publication GROUP BY Publication_Date ORDER BY Publication_Count DESC LIMIT 1",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of distinct publication dates from the 'publication' table. The result will indicate how many unique dates exist for the publications recorded.\",\n        \"virtual_table\": \"SELECT COUNT (DISTINCT Publication_Date) FROM publication\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of publications by each publisher from the 'publication' table. The query groups the results by the publisher's name and counts the total number of publications for each publisher.\",\n        \"virtual_table\": \"SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the retail prices of publications from the 'publication' table that are published by specific publishers. The placeholders in the WHERE clause represent the names of the publishers being queried.\",\n        \"virtual_table\": \"SELECT Price FROM publication WHERE Publisher  =  [PLACEHOLDER-TYPE:STRING] OR Publisher  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT Publication_Date, COUNT(*) as count FROM publication GROUP BY Publication_Date ORDER BY count DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the writers of books from the 'book' table that have a publication price exceeding a specified amount. The placeholder in the WHERE clause represents the minimum price of the publication.\",\n        \"virtual_table\": \"SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Publication_Date, COUNT(*) as count FROM publication GROUP BY Publication_Date ORDER BY count DESC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.230",
        "c_low": "SELECT DISTINCT Publisher FROM publication WHERE Price > 10000000 OR Price < 5000000;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of publishers from the 'publication' table, ordered by the retail price of their publications in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of publishers to retrieve.\",\n        \"virtual_table\": \"SELECT Publisher FROM publication ORDER BY Price DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of distinct publication dates from the 'publication' table. The result will indicate how many unique dates exist for the publications recorded.\",\n        \"virtual_table\": \"SELECT COUNT (DISTINCT Publication_Date) FROM publication\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT Publisher FROM publication WHERE Price > 10000000 OR Price < 5000000;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the writers of books from the 'book' table that have a publication price exceeding a specified amount. The placeholder in the WHERE clause represents the minimum price of the publication.\",\n        \"virtual_table\": \"SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the retail prices of publications from the 'publication' table that are published by specific publishers. The placeholders in the WHERE clause represent the names of the publishers being queried.\",\n        \"virtual_table\": \"SELECT Price FROM publication WHERE Publisher  =  [PLACEHOLDER-TYPE:STRING] OR Publisher  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT Publisher FROM publication WHERE Price > 10000000 INTERSECT SELECT DISTINCT Publisher FROM publication WHERE Price < 5000000",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct publishers from the 'publication' table whose publications have a retail price exceeding a specified amount. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT DISTINCT Publisher FROM publication WHERE Price  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of publishers from the 'publication' table that have published more than a specified number of publications. The placeholder in the HAVING clause represents the minimum count of publications required to be included in the results.\",\n        \"virtual_table\": \"SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the number of publications by each publisher from the 'publication' table. The query groups the results by the publisher's name and counts the total number of publications for each publisher.\",\n        \"virtual_table\": \"SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT Publisher FROM publication WHERE Price > 10000000 UNION SELECT DISTINCT Publisher FROM publication WHERE Price < 5000000;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct publishers from the 'publication' table whose publications have a retail price exceeding a specified amount. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT DISTINCT Publisher FROM publication WHERE Price  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of publishers from the 'publication' table, ordered by the retail price of their publications in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of publishers to retrieve.\",\n        \"virtual_table\": \"SELECT Publisher FROM publication ORDER BY Price DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of publishers from the 'publication' table that have published more than a specified number of publications. The placeholder in the HAVING clause represents the minimum count of publications required to be included in the results.\",\n        \"virtual_table\": \"SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT Publisher FROM publication WHERE Price > 10000000 OR Price < 5000000;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the writers of books from the 'book' table that have a publication price exceeding a specified amount. The placeholder in the WHERE clause represents the minimum price of the publication.\",\n        \"virtual_table\": \"SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT p.Publisher \nFROM publication p \nWHERE p.Price > 10000000 OR p.Price < 5000000;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.255",
        "c_low": "SELECT a.Name \nFROM actor a \nJOIN musical m ON a.Musical_ID = m.Musical_ID \nORDER BY m.Year DESC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the duration of performances by actors from the 'actor' table, ordered by the age of the actors at the time of their performances in descending order. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT Duration FROM actor ORDER BY Age DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID ORDER BY T2.Year DESC",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT actor.Name \nFROM actor \nJOIN musical ON actor.Musical_ID = musical.Musical_ID \nORDER BY musical.Year DESC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT actor.Name \nFROM actor \nJOIN musical ON actor.Musical_ID = musical.Musical_ID \nORDER BY musical.Year DESC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the duration of performances by actors from the 'actor' table, ordered by the age of the actors at the time of their performances in descending order. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT Duration FROM actor ORDER BY Age DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID ORDER BY T2.Year DESC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT actor.Name\nFROM actor\nJOIN musical ON actor.Musical_ID = musical.Musical_ID\nORDER BY musical.Year DESC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.256",
        "c_low": "SELECT m.Name, COUNT(a.Actor_ID) AS Number_of_Actors\nFROM musical m\nLEFT JOIN actor a ON m.Musical_ID = a.Musical_ID\nGROUP BY m.Name;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT T2.Name, COUNT(T1.Actor_ID) AS NumberOfActors \nFROM musical AS T2 \nJOIN actor AS T1 ON T1.Musical_ID = T2.Musical_ID \nGROUP BY T2.Name;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT T2.Name, COUNT(T1.Actor_ID) AS Number_of_Actors \nFROM actor AS T1 \nJOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID \nGROUP BY T2.Musical_ID",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT m.Name, COUNT(a.Actor_ID) AS Number_of_Actors \nFROM musical m \nLEFT JOIN actor a ON m.Musical_ID = a.Musical_ID \nGROUP BY m.Name;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT T2.Name, COUNT(T1.Actor_ID) AS Number_of_Actors FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T2.Musical_ID",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT m.Name, COUNT(a.Actor_ID) AS Number_of_Actors\nFROM musical m\nLEFT JOIN actor a ON m.Musical_ID = a.Musical_ID\nGROUP BY m.Name;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.257",
        "c_low": "SELECT m.Name, COUNT(a.Actor_ID) AS Actor_Count\nFROM musical m\nLEFT JOIN actor a ON m.Musical_ID = a.Musical_ID\nGROUP BY m.Musical_ID;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the duration of performances by actors from the 'actor' table, ordered by the age of the actors at the time of their performances in descending order. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT Duration FROM actor ORDER BY Age DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT T2.Name, COUNT(T1.Actor_ID) AS Actor_Count \nFROM musical AS T2 \nLEFT JOIN actor AS T1 ON T1.Musical_ID = T2.Musical_ID \nGROUP BY T2.Name;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT T2.Name, COUNT(T1.Actor_ID) AS Actor_Count FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T2.Name;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT m.Name, COUNT(a.Actor_ID) AS Actor_Count \nFROM musical m \nLEFT JOIN actor a ON m.Musical_ID = a.Musical_ID \nGROUP BY m.Name;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the duration of performances by actors from the 'actor' table, ordered by the age of the actors at the time of their performances in descending order. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT Duration FROM actor ORDER BY Age DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.Name, COUNT(T1.Actor_ID) AS Actor_Count FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T2.Name;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT musical.Name, COUNT(actor.Actor_ID) AS Actor_Count\nFROM musical\nLEFT JOIN actor ON musical.Musical_ID = actor.Musical_ID\nGROUP BY musical.Name;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.260",
        "c_low": "SELECT Nominee, COUNT(Musical_ID) AS Number_of_Musicals\nFROM musical\nWHERE Result = 'Nominated'\nGROUP BY Nominee;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Nominee, COUNT(DISTINCT Musical_ID) AS NumberOfMusicals\nFROM musical\nGROUP BY Nominee;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT Nominee, COUNT(*) AS NumberOfNominations FROM musical GROUP BY Nominee",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Nominee, COUNT(*) AS NumberOfMusicals\nFROM musical\nGROUP BY Nominee;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Nominee, COUNT(*) AS NumberOfMusicals\nFROM musical\nWHERE Result = 'Nominated'\nGROUP BY Nominee;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Nominee, COUNT(Musical_ID) AS Number_of_Musicals\nFROM musical\nWHERE Result = 'Nominated'\nGROUP BY Nominee;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.261",
        "c_low": "SELECT Nominee, COUNT(*) AS Nominations\nFROM musical\nWHERE Result = 'Nominated'\nGROUP BY Nominee;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Nominee, COUNT(*) AS Nominations\nFROM musical\nGROUP BY Nominee;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT Nominee, COUNT(*) AS Nominations FROM musical GROUP BY Nominee",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Nominee, COUNT(*) AS Nominations\nFROM musical\nGROUP BY Nominee;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Nominee, COUNT(*) AS Nominations\nFROM musical\nWHERE Result = 'Nominated'\nGROUP BY Nominee;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Nominee, COUNT(*) AS Nominations\nFROM musical\nWHERE Result = 'Nominated'\nGROUP BY Nominee;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.262",
        "c_low": "SELECT Nominee, COUNT(*) AS NominationCount\nFROM musical\nGROUP BY Nominee\nORDER BY NominationCount DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Nominee, COUNT(*) AS NominationCount\nFROM musical\nGROUP BY Nominee\nORDER BY NominationCount DESC\nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT Nominee, COUNT(*) AS NominationCount\nFROM musical\nGROUP BY Nominee\nORDER BY NominationCount DESC\nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT Nominee, COUNT(*) AS NominationCount\nFROM musical\nGROUP BY Nominee\nORDER BY NominationCount DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.263",
        "c_low": "SELECT Nominee, COUNT(*) AS NominationCount\nFROM musical\nGROUP BY Nominee\nORDER BY NominationCount DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Nominee, COUNT(*) as NominationCount FROM musical GROUP BY Nominee ORDER BY NominationCount DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*) = (SELECT MAX(nomination_count) FROM (SELECT COUNT(*) AS nomination_count FROM musical GROUP BY Nominee));",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*) > 0 ORDER BY COUNT(*) DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Nominee, COUNT(*) as NominationCount FROM musical GROUP BY Nominee ORDER BY NominationCount DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Nominee, COUNT(*) AS NominationCount\nFROM musical\nGROUP BY Nominee\nORDER BY NominationCount DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.267",
        "c_low": "SELECT Nominee, COUNT(*) as NominationCount \nFROM musical \nWHERE Result = 'Nominated' \nGROUP BY Nominee \nHAVING COUNT(*) > 2;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Nominee, COUNT(*) as NominationCount \nFROM musical \nWHERE Result = 'Nominated' \nGROUP BY Nominee \nHAVING COUNT(*) > 2;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*) > 2",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*) > 2",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Nominee, COUNT(*) as NominationCount \nFROM musical \nWHERE Result = 'Nominated' \nGROUP BY Nominee \nHAVING COUNT(*) > 2;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT Nominee, COUNT(*) as NominationCount \nFROM musical \nWHERE Result = 'Nominated' \nGROUP BY Nominee \nHAVING COUNT(*) > 2;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.272",
        "c_low": "SELECT Name, Nominee FROM musical WHERE Award IN ('Bob Fosse', 'Cleavant Derricks');",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID WHERE T2.Award IN ('Bob Fosse', 'Cleavant Derricks')",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT Nominee FROM musical WHERE Award = 'Bob Fosse' INTERSECT SELECT Nominee FROM musical WHERE Award = 'Cleavant Derricks'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Nominee FROM musical WHERE Award = 'Bob Fosse' INTERSECT SELECT Nominee FROM musical WHERE Award = 'Cleavant Derricks'",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Nominee FROM musical WHERE Award IN ('Bob Fosse', 'Cleavant Derricks')",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Name, Nominee FROM musical WHERE Award IN ('Bob Fosse', 'Cleavant Derricks');",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.273",
        "c_low": "SELECT DISTINCT Nominee \nFROM musical \nWHERE Award IN ('Bob Fosse', 'Cleavant Derricks') \nAND Result = 'Nominated';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT DISTINCT Nominee FROM musical WHERE Award IN ('Bob Fosse', 'Cleavant Derricks') AND Result = 'Nominated';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT Nominee FROM musical WHERE Award = 'Bob Fosse' INTERSECT SELECT Nominee FROM musical WHERE Award = 'Cleavant Derricks'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Nominee FROM musical WHERE Award = 'Bob Fosse' INTERSECT SELECT Nominee FROM musical WHERE Award = 'Cleavant Derricks'",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT Nominee FROM musical WHERE Award IN ('Bob Fosse', 'Cleavant Derricks') AND Result = 'Nominated';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT Nominee \nFROM musical \nWHERE Award IN ('Bob Fosse', 'Cleavant Derricks') \nAND Result = 'Nominated';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.285",
        "c_low": "SELECT up.name \nFROM user_profiles up \nWHERE up.followers > (SELECT followers FROM user_profiles WHERE name = 'Tyler Swift')",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT name FROM user_profiles WHERE followers > (SELECT followers FROM user_profiles WHERE name = 'Tyler Swift')",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and email addresses of users from the 'user_profiles' table, ordered by the number of followers they have. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the average number of followers for users from the 'user_profiles' table who have not posted any tweets. The placeholder in the subquery represents the user identifiers of those who have tweeted.\",\n        \"virtual_table\": \"SELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the identifiers of users being followed by a specific user or users from the 'user_profiles' table. The placeholders in the WHERE clause represent the names of the users whose followings are being queried.\",\n        \"virtual_table\": \"SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING] OR T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT name FROM user_profiles WHERE followers > (SELECT followers FROM user_profiles WHERE name = 'Tyler Swift')",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of users from the 'user_profiles' table who have posted more than a specified number of tweets. The placeholder in the HAVING clause represents the minimum count of tweets a user must have posted to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of users from the 'user_profiles' table along with the count of tweets they have posted. It filters the results to only include users who have posted more than a specified number of tweets, represented by a placeholder in the HAVING clause.\",\n        \"virtual_table\": \"SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names and partition identifiers of users from the 'user_profiles' table who have posted fewer tweets than a specified number. The placeholder in the HAVING clause represents the maximum number of tweets a user can have to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT name FROM user_profiles WHERE followers > (SELECT followers FROM user_profiles WHERE name = 'Tyler Swift')",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and email addresses of users from the 'user_profiles' table, ordered by the number of followers they have. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT name FROM user_profiles WHERE followers > (SELECT followers FROM user_profiles WHERE name = 'Tyler Swift')",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of users from the 'user_profiles' table who have posted more than a specified number of tweets. The placeholder in the HAVING clause represents the minimum count of tweets a user must have posted to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of users from the 'user_profiles' table along with the count of tweets they have posted. It filters the results to only include users who have posted more than a specified number of tweets, represented by a placeholder in the HAVING clause.\",\n        \"virtual_table\": \"SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names and partition identifiers of users from the 'user_profiles' table who have posted fewer tweets than a specified number. The placeholder in the HAVING clause represents the maximum number of tweets a user can have to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT up.name \nFROM user_profiles up \nWHERE up.followers > (SELECT followers FROM user_profiles WHERE name = 'Tyler Swift')",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.286",
        "c_low": "SELECT name, email FROM user_profiles WHERE followers > 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT name, email FROM user_profiles WHERE followers > 1",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and email addresses of users from the 'user_profiles' table, ordered by the number of followers they have. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the identifiers of users being followed by a specific user or users from the 'user_profiles' table. The placeholders in the WHERE clause represent the names of the users whose followings are being queried.\",\n        \"virtual_table\": \"SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING] OR T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average number of followers for users from the 'user_profiles' table who have not posted any tweets. The placeholder in the subquery represents the user identifiers of those who have tweeted.\",\n        \"virtual_table\": \"SELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)\"\n    }\n}\n",
        "c_high": "SELECT name, email FROM user_profiles WHERE followers > 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of users from the 'user_profiles' table who have posted more than a specified number of tweets. The placeholder in the HAVING clause represents the minimum count of tweets a user must have posted to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of users from the 'user_profiles' table along with the count of tweets they have posted. It filters the results to only include users who have posted more than a specified number of tweets, represented by a placeholder in the HAVING clause.\",\n        \"virtual_table\": \"SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names and partition identifiers of users from the 'user_profiles' table who have posted fewer tweets than a specified number. The placeholder in the HAVING clause represents the maximum number of tweets a user can have to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT name, email FROM user_profiles WHERE followers > 1",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and email addresses of users from the 'user_profiles' table, ordered by the number of followers they have. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT name, email FROM user_profiles WHERE followers > 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of users from the 'user_profiles' table who have posted more than a specified number of tweets. The placeholder in the HAVING clause represents the minimum count of tweets a user must have posted to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the identifiers of users being followed by a specific user or users from the 'user_profiles' table. The placeholders in the WHERE clause represent the names of the users whose followings are being queried.\",\n        \"virtual_table\": \"SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING] OR T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names of users from the 'user_profiles' table along with the count of tweets they have posted. It filters the results to only include users who have posted more than a specified number of tweets, represented by a placeholder in the HAVING clause.\",\n        \"virtual_table\": \"SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT name, email FROM user_profiles WHERE followers > 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.288",
        "c_low": "SELECT f1 FROM follows WHERE f2 IN (SELECT uid FROM user_profiles WHERE name IN ('Mary', 'Susan'));",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = 'Mary' OR T1.name = 'Susan'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the identifiers of users being followed by a specific user or users from the 'user_profiles' table. The placeholders in the WHERE clause represent the names of the users whose followings are being queried.\",\n        \"virtual_table\": \"SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING] OR T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and email addresses of users from the 'user_profiles' table, ordered by the number of followers they have. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT f1 FROM follows WHERE f2 IN (SELECT uid FROM user_profiles WHERE name IN ('Mary', 'Susan'))",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of users from the 'user_profiles' table who have posted more than a specified number of tweets. The placeholder in the HAVING clause represents the minimum count of tweets a user must have posted to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and partition identifiers of users from the 'user_profiles' table who have posted fewer tweets than a specified number. The placeholder in the HAVING clause represents the maximum number of tweets a user can have to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names of users from the 'user_profiles' table along with the count of tweets they have posted. It filters the results to only include users who have posted more than a specified number of tweets, represented by a placeholder in the HAVING clause.\",\n        \"virtual_table\": \"SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT uid FROM follows WHERE f1 IN (SELECT uid FROM user_profiles WHERE name IN ('Mary', 'Susan'));",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and email addresses of users from the 'user_profiles' table, ordered by the number of followers they have. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = 'Mary' OR T1.name = 'Susan'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the identifiers of users being followed by a specific user or users from the 'user_profiles' table. The placeholders in the WHERE clause represent the names of the users whose followings are being queried.\",\n        \"virtual_table\": \"SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING] OR T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of users from the 'user_profiles' table who have posted more than a specified number of tweets. The placeholder in the HAVING clause represents the minimum count of tweets a user must have posted to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names and partition identifiers of users from the 'user_profiles' table who have posted fewer tweets than a specified number. The placeholder in the HAVING clause represents the maximum number of tweets a user can have to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT f1 FROM follows WHERE f2 IN (SELECT uid FROM user_profiles WHERE name IN ('Mary', 'Susan'));",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.293",
        "c_low": "SELECT up.name\nFROM user_profiles up\nJOIN follows f ON up.uid = f.f2\nGROUP BY up.uid\nORDER BY COUNT(f.f1) DESC\nLIMIT 5;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT name FROM user_profiles WHERE uid IN (SELECT f1 FROM follows GROUP BY f1 ORDER BY COUNT(f2) DESC LIMIT 5)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and email addresses of users from the 'user_profiles' table, ordered by the number of followers they have. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT T1.name FROM user_profiles AS T1 JOIN follows AS F ON T1.uid = F.f2 GROUP BY F.f2 ORDER BY COUNT(F.f1) DESC LIMIT 5;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of users from the 'user_profiles' table who have posted more than a specified number of tweets. The placeholder in the HAVING clause represents the minimum count of tweets a user must have posted to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT name FROM user_profiles WHERE uid IN (SELECT f1 FROM follows GROUP BY f1 ORDER BY COUNT(f2) DESC LIMIT 5)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and email addresses of users from the 'user_profiles' table, ordered by the number of followers they have. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T1.name FROM user_profiles AS T1 JOIN follows AS F ON T1.uid = F.f2 GROUP BY F.f2 ORDER BY COUNT(F.f1) DESC LIMIT 5;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of users from the 'user_profiles' table who have posted more than a specified number of tweets. The placeholder in the HAVING clause represents the minimum count of tweets a user must have posted to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT up.name\nFROM user_profiles up\nJOIN follows f ON up.uid = f.f2\nGROUP BY up.uid\nORDER BY COUNT(f.f1) DESC\nLIMIT 5;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.295",
        "c_low": "SELECT user_profiles.name, COUNT(tweets.id) AS tweet_count\nFROM user_profiles\nLEFT JOIN tweets ON user_profiles.uid = tweets.uid\nGROUP BY user_profiles.uid;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT user_profiles.name, COUNT(tweets.id) AS tweet_count \nFROM user_profiles \nLEFT JOIN tweets ON user_profiles.uid = tweets.uid \nGROUP BY user_profiles.uid;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the average number of followers for users from the 'user_profiles' table who have not posted any tweets. The placeholder in the subquery represents the user identifiers of those who have tweeted.\",\n        \"virtual_table\": \"SELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and email addresses of users from the 'user_profiles' table, ordered by the number of followers they have. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the identifiers of users being followed by a specific user or users from the 'user_profiles' table. The placeholders in the WHERE clause represent the names of the users whose followings are being queried.\",\n        \"virtual_table\": \"SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING] OR T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT T1.name, count(*) AS tweet_count FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T1.uid",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names of users from the 'user_profiles' table along with the count of tweets they have posted. It filters the results to only include users who have posted more than a specified number of tweets, represented by a placeholder in the HAVING clause.\",\n        \"virtual_table\": \"SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of users from the 'user_profiles' table who have posted more than a specified number of tweets. The placeholder in the HAVING clause represents the minimum count of tweets a user must have posted to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names and partition identifiers of users from the 'user_profiles' table who have posted fewer tweets than a specified number. The placeholder in the HAVING clause represents the maximum number of tweets a user can have to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT up.name, COUNT(t.id) AS tweet_count \nFROM user_profiles up \nLEFT JOIN tweets t ON up.uid = t.uid \nGROUP BY up.uid \nORDER BY tweet_count DESC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and email addresses of users from the 'user_profiles' table, ordered by the number of followers they have. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T1.name, count(*) AS tweet_count FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T1.uid",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names of users from the 'user_profiles' table along with the count of tweets they have posted. It filters the results to only include users who have posted more than a specified number of tweets, represented by a placeholder in the HAVING clause.\",\n        \"virtual_table\": \"SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of users from the 'user_profiles' table who have posted more than a specified number of tweets. The placeholder in the HAVING clause represents the minimum count of tweets a user must have posted to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names and partition identifiers of users from the 'user_profiles' table who have posted fewer tweets than a specified number. The placeholder in the HAVING clause represents the maximum number of tweets a user can have to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT user_profiles.name, COUNT(tweets.id) AS tweet_count\nFROM user_profiles\nLEFT JOIN tweets ON user_profiles.uid = tweets.uid\nGROUP BY user_profiles.uid;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.304",
        "c_low": "SELECT attribute_data_type\nFROM Attribute_Definitions\nGROUP BY attribute_data_type\nHAVING COUNT(attribute_id) > 3;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT ad.attribute_data_type, COUNT(ad.attribute_id) AS attribute_count \nFROM Attribute_Definitions AS ad \nGROUP BY ad.attribute_data_type \nHAVING COUNT(ad.attribute_id) > 3;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and unique identifiers of attributes from the 'Attribute_Definitions' table that are associated with specific catalog entries in the 'Catalog_Contents_Additional_Attributes' table. The placeholder in the WHERE clause represents the value of the attribute being queried.\",\n        \"virtual_table\": \"SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*) > 3",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of the different data types defined in the 'Attribute_Definitions' table, specifically those that have more than a specified number of occurrences. The placeholder in the HAVING clause represents the minimum count of attributes required to be included in the results.\",\n        \"virtual_table\": \"SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*) > 3",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of the different data types defined in the 'Attribute_Definitions' table, specifically those that have more than a specified number of occurrences. The placeholder in the HAVING clause represents the minimum count of attributes required to be included in the results.\",\n        \"virtual_table\": \"SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT ad.attribute_data_type, COUNT(ad.attribute_id) AS attribute_count \nFROM Attribute_Definitions AS ad \nGROUP BY ad.attribute_data_type \nHAVING COUNT(ad.attribute_id) > 3;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and unique identifiers of attributes from the 'Attribute_Definitions' table that are associated with specific catalog entries in the 'Catalog_Contents_Additional_Attributes' table. The placeholder in the WHERE clause represents the value of the attribute being queried.\",\n        \"virtual_table\": \"SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT attribute_data_type\nFROM Attribute_Definitions\nGROUP BY attribute_data_type\nHAVING COUNT(attribute_id) > 3;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.311",
        "c_low": "SELECT catalog_publisher, COUNT(catalog_id) AS catalog_count\nFROM Catalogs\nGROUP BY catalog_publisher\nORDER BY catalog_count DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    }\n}\n",
        "c_mid": "SELECT catalog_publisher, COUNT(catalog_id) AS catalog_count \nFROM Catalogs \nGROUP BY catalog_publisher \nORDER BY catalog_count DESC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique catalog publishers from the 'Catalogs' table that match a specific pattern. The placeholder in the WHERE clause allows for filtering based on the publisher's name.\",\n        \"virtual_table\": \"SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that have a next entry in the catalog hierarchy. The placeholder in the WHERE clause represents a numeric identifier for filtering entries based on their next entry ID.\",\n        \"virtual_table\": \"SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT catalog_publisher, COUNT(catalog_id) AS catalog_count\nFROM Catalogs\nGROUP BY catalog_publisher\nORDER BY catalog_count DESC\nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT catalog_publisher, COUNT(catalog_id) AS catalog_count \nFROM Catalogs \nGROUP BY catalog_publisher \nORDER BY catalog_count DESC \nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique catalog publishers from the 'Catalogs' table that match a specific pattern. The placeholder in the WHERE clause allows for filtering based on the publisher's name.\",\n        \"virtual_table\": \"SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    }\n}\n",
        "t_2": "SELECT catalog_publisher, COUNT(catalog_id) AS catalog_count\nFROM Catalogs\nGROUP BY catalog_publisher\nORDER BY catalog_count DESC\nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT catalog_publisher, COUNT(catalog_id) AS catalog_count\nFROM Catalogs\nGROUP BY catalog_publisher\nORDER BY catalog_count DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.312",
        "c_low": "SELECT catalog_publisher FROM Catalogs GROUP BY catalog_publisher ORDER BY COUNT(catalog_id) DESC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    }\n}\n",
        "c_mid": "SELECT catalog_publisher FROM Catalogs GROUP BY catalog_publisher ORDER BY COUNT(catalog_id) DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique catalog publishers from the 'Catalogs' table that match a specific pattern. The placeholder in the WHERE clause allows for filtering based on the publisher's name.\",\n        \"virtual_table\": \"SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that have a next entry in the catalog hierarchy. The placeholder in the WHERE clause represents a numeric identifier for filtering entries based on their next entry ID.\",\n        \"virtual_table\": \"SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT catalog_publisher, COUNT(catalog_id) AS catalog_count\nFROM Catalogs\nGROUP BY catalog_publisher\nORDER BY catalog_count DESC\nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT catalog_publisher FROM Catalogs GROUP BY catalog_publisher ORDER BY COUNT(catalog_id) DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique catalog publishers from the 'Catalogs' table that match a specific pattern. The placeholder in the WHERE clause allows for filtering based on the publisher's name.\",\n        \"virtual_table\": \"SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    }\n}\n",
        "t_2": "SELECT catalog_publisher, COUNT(catalog_id) AS catalog_count\nFROM Catalogs\nGROUP BY catalog_publisher\nORDER BY catalog_count DESC\nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT catalog_publisher, COUNT(catalog_id) AS catalog_count\nFROM Catalogs\nGROUP BY catalog_publisher\nORDER BY catalog_count DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.315",
        "c_low": "SELECT catalog_entry_name\nFROM Catalog_Contents\nWHERE catalog_entry_id IN (\n    SELECT catalog_entry_id\n    FROM Catalog_Contents_Additional_Attributes\n    GROUP BY attribute_id\n    ORDER BY COUNT(DISTINCT catalog_entry_id) DESC\n    LIMIT 1\n)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    }\n}\n",
        "c_mid": "SELECT cc.catalog_entry_name \nFROM Catalog_Contents AS cc \nJOIN Catalog_Contents_Additional_Attributes AS cca ON cc.catalog_entry_id = cca.catalog_entry_id \nWHERE cca.attribute_id IN (\n    SELECT attribute_id \n    FROM Catalog_Contents_Additional_Attributes \n    GROUP BY attribute_id \n    ORDER BY COUNT(*) DESC \n    LIMIT 1\n)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that have a next entry in the catalog hierarchy. The placeholder in the WHERE clause represents a numeric identifier for filtering entries based on their next entry ID.\",\n        \"virtual_table\": \"SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names and unique identifiers of attributes from the 'Attribute_Definitions' table that are associated with specific catalog entries in the 'Catalog_Contents_Additional_Attributes' table. The placeholder in the WHERE clause represents the value of the attribute being queried.\",\n        \"virtual_table\": \"SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT cc.catalog_entry_name\nFROM Catalog_Contents cc\nJOIN Catalog_Contents_Additional_Attributes cca ON cc.catalog_entry_id = cca.catalog_entry_id\nWHERE cca.attribute_id = (\n    SELECT attribute_id\n    FROM Catalog_Contents_Additional_Attributes\n    GROUP BY attribute_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT catalog_entry_name\nFROM Catalog_Contents_Additional_Attributes\nWHERE attribute_id = (\n    SELECT attribute_id\n    FROM Catalog_Contents_Additional_Attributes\n    GROUP BY attribute_id\n    ORDER BY COUNT(catalog_entry_id) DESC\n    LIMIT 1\n)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that have a next entry in the catalog hierarchy. The placeholder in the WHERE clause represents a numeric identifier for filtering entries based on their next entry ID.\",\n        \"virtual_table\": \"SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT cc.catalog_entry_name \nFROM Catalog_Contents AS cc \nJOIN Catalog_Contents_Additional_Attributes AS cca ON cc.catalog_entry_id = cca.catalog_entry_id \nWHERE cca.attribute_id = (\n    SELECT attribute_id \n    FROM Catalog_Contents_Additional_Attributes \n    GROUP BY attribute_id \n    ORDER BY COUNT(*) DESC \n    LIMIT 1\n)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and unique identifiers of attributes from the 'Attribute_Definitions' table that are associated with specific catalog entries in the 'Catalog_Contents_Additional_Attributes' table. The placeholder in the WHERE clause represents the value of the attribute being queried.\",\n        \"virtual_table\": \"SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT cc.catalog_entry_name\nFROM Catalog_Contents cc\nJOIN Catalog_Contents_Additional_Attributes cca ON cc.catalog_entry_id = cca.catalog_entry_id\nWHERE cca.attribute_id = (\n    SELECT attribute_id\n    FROM Catalog_Contents_Additional_Attributes\n    GROUP BY attribute_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.316",
        "c_low": "SELECT catalog_entry_name\nFROM Catalog_Contents\nWHERE catalog_entry_id IN (\n    SELECT catalog_entry_id\n    FROM Catalog_Contents_Additional_Attributes\n    GROUP BY catalog_entry_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    }\n}\n",
        "c_mid": "SELECT cc.catalog_entry_name\nFROM Catalog_Contents AS cc\nJOIN Catalog_Contents_Additional_Attributes AS cca ON cc.catalog_entry_id = cca.catalog_entry_id\nGROUP BY cca.attribute_id\nORDER BY COUNT(cca.catalog_entry_id) DESC\nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that have a next entry in the catalog hierarchy. The placeholder in the WHERE clause represents a numeric identifier for filtering entries based on their next entry ID.\",\n        \"virtual_table\": \"SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names and unique identifiers of attributes from the 'Attribute_Definitions' table that are associated with specific catalog entries in the 'Catalog_Contents_Additional_Attributes' table. The placeholder in the WHERE clause represents the value of the attribute being queried.\",\n        \"virtual_table\": \"SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT cc.catalog_entry_name\nFROM Catalog_Contents cc\nJOIN Catalog_Contents_Additional_Attributes cca ON cc.catalog_entry_id = cca.catalog_entry_id\nJOIN (\n    SELECT attribute_id\n    FROM Catalog_Contents_Additional_Attributes\n    GROUP BY attribute_id\n    HAVING COUNT(*) = (\n        SELECT MAX(attr_count)\n        FROM (\n            SELECT COUNT(*) as attr_count\n            FROM Catalog_Contents_Additional_Attributes\n            GROUP BY attribute_id\n        )\n    )\n) AS most_entries ON cca.attribute_id = most_entries.attribute_id;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of the different data types defined in the 'Attribute_Definitions' table, specifically those that have more than a specified number of occurrences. The placeholder in the HAVING clause represents the minimum count of attributes required to be included in the results.\",\n        \"virtual_table\": \"SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT catalog_entry_name\nFROM Catalog_Contents cc\nJOIN Catalog_Contents_Additional_Attributes cca ON cc.catalog_entry_id = cca.catalog_entry_id\nGROUP BY cc.catalog_entry_name\nORDER BY COUNT(cca.attribute_id) DESC\nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that have a next entry in the catalog hierarchy. The placeholder in the WHERE clause represents a numeric identifier for filtering entries based on their next entry ID.\",\n        \"virtual_table\": \"SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT cc.catalog_entry_name\nFROM Catalog_Contents AS cc\nJOIN Catalog_Contents_Additional_Attributes AS cca ON cc.catalog_entry_id = cca.catalog_entry_id\nWHERE cca.attribute_id IN (\n    SELECT attribute_id\n    FROM Catalog_Contents_Additional_Attributes\n    GROUP BY attribute_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n);",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and unique identifiers of attributes from the 'Attribute_Definitions' table that are associated with specific catalog entries in the 'Catalog_Contents_Additional_Attributes' table. The placeholder in the WHERE clause represents the value of the attribute being queried.\",\n        \"virtual_table\": \"SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT cc.catalog_entry_name\nFROM Catalog_Contents cc\nJOIN Catalog_Contents_Additional_Attributes cca ON cc.catalog_entry_id = cca.catalog_entry_id\nGROUP BY cca.attribute_id\nORDER BY COUNT(cca.catalog_entry_id) DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.317",
        "c_low": "SELECT catalog_entry_name FROM Catalog_Contents WHERE catalog_entry_id IN (SELECT catalog_entry_id FROM Catalog_Contents ORDER BY price_in_dollars DESC LIMIT 1)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    }\n}\n",
        "c_mid": "SELECT catalog_entry_name FROM Catalog_Contents WHERE price_in_dollars = (SELECT MAX(price_in_dollars) FROM Catalog_Contents)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that have a next entry in the catalog hierarchy. The placeholder in the WHERE clause represents a numeric identifier for filtering entries based on their next entry ID.\",\n        \"virtual_table\": \"SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT cc.catalog_entry_name\nFROM Catalogs c\nJOIN Catalog_Contents cc ON c.catalog_id = cc.catalog_level_number\nORDER BY cc.price_in_dollars DESC\nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT catalog_entry_name FROM Catalog_Contents WHERE price_in_dollars = (SELECT MAX(price_in_dollars) FROM Catalog_Contents)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that have a next entry in the catalog hierarchy. The placeholder in the WHERE clause represents a numeric identifier for filtering entries based on their next entry ID.\",\n        \"virtual_table\": \"SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT cc.catalog_entry_name\nFROM Catalogs c\nJOIN Catalog_Contents cc ON c.catalog_id = cc.catalog_level_number\nORDER BY cc.price_in_dollars DESC\nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT cc.catalog_entry_name\nFROM Catalogs c\nJOIN Catalog_Contents cc ON c.catalog_id = cc.catalog_id\nORDER BY cc.price_in_dollars DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.319",
        "c_low": "SELECT cs.catalog_level_name \nFROM Catalogs c \nJOIN Catalog_Contents cc ON c.catalog_id = cc.catalog_id \nJOIN Catalog_Structure cs ON cc.catalog_level_number = cs.catalog_level_number \nWHERE cc.price_in_dollars = (\n    SELECT MIN(price_in_dollars) \n    FROM Catalog_Contents \n    WHERE catalog_id = c.catalog_id\n) \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    }\n}\n",
        "c_mid": "SELECT cs.catalog_level_name \nFROM Catalogs c \nJOIN Catalog_Contents cc ON c.catalog_id = cc.catalog_id \nJOIN Catalog_Structure cs ON cc.catalog_level_number = cs.catalog_level_number \nWHERE c.catalog_id = (SELECT catalog_id \n                      FROM Catalogs \n                      ORDER BY (SELECT MIN(price_in_dollars) FROM Catalog_Contents WHERE catalog_id = Catalogs.catalog_id) \n                      LIMIT 1)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names and level numbers of catalog levels from the 'Catalog_Structure' table that fall within a specified range of level numbers. The placeholders in the WHERE clause represent the lower and upper bounds of the level number range.\",\n        \"virtual_table\": \"SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that have a next entry in the catalog hierarchy. The placeholder in the WHERE clause represents a numeric identifier for filtering entries based on their next entry ID.\",\n        \"virtual_table\": \"SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT cs.catalog_level_name\nFROM Catalogs c\nJOIN Catalog_Contents cc ON c.catalog_id = cc.catalog_id\nJOIN Catalog_Structure cs ON cc.catalog_level_number = cs.catalog_level_number\nORDER BY cc.price_in_dollars ASC\nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT cs.catalog_level_name \nFROM Catalogs c \nJOIN Catalog_Contents cc ON c.catalog_id = cc.catalog_id \nJOIN Catalog_Structure cs ON cc.catalog_level_number = cs.catalog_level_number \nWHERE c.catalog_id = (SELECT catalog_id \n                      FROM Catalog_Contents \n                      ORDER BY price_in_dollars ASC \n                      LIMIT 1)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names and level numbers of catalog levels from the 'Catalog_Structure' table that fall within a specified range of level numbers. The placeholders in the WHERE clause represent the lower and upper bounds of the level number range.\",\n        \"virtual_table\": \"SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that have a next entry in the catalog hierarchy. The placeholder in the WHERE clause represents a numeric identifier for filtering entries based on their next entry ID.\",\n        \"virtual_table\": \"SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT cs.catalog_level_name\nFROM Catalogs c\nJOIN Catalog_Contents cc ON c.catalog_id = cc.catalog_id\nJOIN Catalog_Structure cs ON cc.catalog_level_number = cs.catalog_level_number\nORDER BY cc.price_in_dollars ASC\nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT cs.catalog_level_name\nFROM Catalogs c\nJOIN Catalog_Contents cc ON c.catalog_id = cc.catalog_id\nJOIN Catalog_Structure cs ON cc.catalog_level_number = cs.catalog_level_number\nORDER BY cc.price_in_dollars ASC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.320",
        "c_low": "SELECT cs.catalog_level_name\nFROM Catalogs c\nJOIN Catalog_Contents cc ON c.catalog_id = cc.catalog_id\nWHERE cc.price_in_dollars = (\n    SELECT MIN(price_in_dollars)\n    FROM Catalog_Contents\n);\n",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT cs.catalog_level_name \nFROM Catalog_Contents cc \nJOIN Catalog_Structure cs ON cc.catalog_level_number = cs.catalog_level_number \nWHERE cc.price_in_dollars = (\n    SELECT MIN(price_in_dollars) \n    FROM Catalog_Contents\n);",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names and level numbers of catalog levels from the 'Catalog_Structure' table that fall within a specified range of level numbers. The placeholders in the WHERE clause represent the lower and upper bounds of the level number range.\",\n        \"virtual_table\": \"SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT cs.catalog_level_name\nFROM Catalogs c\nJOIN Catalog_Contents cc ON c.catalog_id = cc.catalog_id\nWHERE cc.price_in_dollars = (\n    SELECT MIN(price_in_dollars)\n    FROM Catalog_Contents\n)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT cs.catalog_level_name \nFROM Catalog_Contents cc \nJOIN Catalog_Structure cs ON cc.catalog_level_number = cs.catalog_level_number \nWHERE cc.price_in_dollars = (SELECT MIN(price_in_dollars) FROM Catalog_Contents);",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names and level numbers of catalog levels from the 'Catalog_Structure' table that fall within a specified range of level numbers. The placeholders in the WHERE clause represent the lower and upper bounds of the level number range.\",\n        \"virtual_table\": \"SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT cs.catalog_level_name\nFROM Catalogs c\nJOIN Catalog_Contents cc ON c.catalog_id = cc.catalog_id\nWHERE cc.price_in_dollars = (\n    SELECT MIN(price_in_dollars)\n    FROM Catalog_Contents\n)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT cs.catalog_level_name\nFROM Catalogs c\nJOIN Catalog_Contents cc ON c.catalog_id = cc.catalog_id\nWHERE cc.price_in_dollars = (\n    SELECT MIN(price_in_dollars)\n    FROM Catalog_Contents\n)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.329",
        "c_low": "SELECT DISTINCT(catalog_entry_name) FROM Catalog_Contents WHERE catalog_level_number = '8'",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    }\n}\n",
        "c_mid": "SELECT catalog_entry_name FROM Catalog_Contents WHERE catalog_level_number = '8'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and level numbers of catalog levels from the 'Catalog_Structure' table that fall within a specified range of level numbers. The placeholders in the WHERE clause represent the lower and upper bounds of the level number range.\",\n        \"virtual_table\": \"SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that have a next entry in the catalog hierarchy. The placeholder in the WHERE clause represents a numeric identifier for filtering entries based on their next entry ID.\",\n        \"virtual_table\": \"SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT catalog_entry_name FROM Catalog_Contents WHERE catalog_level_number = '8';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT catalog_entry_name FROM Catalog_Contents WHERE catalog_level_number = '8'",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and level numbers of catalog levels from the 'Catalog_Structure' table that fall within a specified range of level numbers. The placeholders in the WHERE clause represent the lower and upper bounds of the level number range.\",\n        \"virtual_table\": \"SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that have a next entry in the catalog hierarchy. The placeholder in the WHERE clause represents a numeric identifier for filtering entries based on their next entry ID.\",\n        \"virtual_table\": \"SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    }\n}\n",
        "t_2": "SELECT catalog_entry_name FROM Catalog_Contents WHERE catalog_level_number = '8';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT catalog_entry_name FROM Catalog_Contents WHERE catalog_level_number = '8';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.330",
        "c_low": "SELECT DISTINCT(catalog_entry_name) FROM Catalog_Contents WHERE catalog_level_number = '8'",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    }\n}\n",
        "c_mid": "SELECT catalog_entry_name FROM Catalog_Contents WHERE catalog_level_number = '8'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and level numbers of catalog levels from the 'Catalog_Structure' table that fall within a specified range of level numbers. The placeholders in the WHERE clause represent the lower and upper bounds of the level number range.\",\n        \"virtual_table\": \"SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that have a next entry in the catalog hierarchy. The placeholder in the WHERE clause represents a numeric identifier for filtering entries based on their next entry ID.\",\n        \"virtual_table\": \"SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT catalog_entry_name FROM Catalog_Contents WHERE catalog_level_number = '8';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT catalog_entry_name FROM Catalog_Contents WHERE catalog_level_number = '8'",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and level numbers of catalog levels from the 'Catalog_Structure' table that fall within a specified range of level numbers. The placeholders in the WHERE clause represent the lower and upper bounds of the level number range.\",\n        \"virtual_table\": \"SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that have a next entry in the catalog hierarchy. The placeholder in the WHERE clause represents a numeric identifier for filtering entries based on their next entry ID.\",\n        \"virtual_table\": \"SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    }\n}\n",
        "t_2": "SELECT catalog_entry_name FROM Catalog_Contents WHERE catalog_level_number = '8';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and unique identifiers of attributes from the 'Attribute_Definitions' table that are associated with specific catalog entries in the 'Catalog_Contents_Additional_Attributes' table. The placeholder in the WHERE clause represents the value of the attribute being queried.\",\n        \"virtual_table\": \"SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT catalog_entry_name FROM Catalog_Contents WHERE catalog_level_number = '8';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.331",
        "c_low": "SELECT catalog_entry_name FROM Catalog_Contents WHERE length < 3 OR height > 5;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT catalog_entry_name FROM Catalog_Contents WHERE length < 3 OR height > 5;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT catalog_entry_name FROM Catalog_Contents WHERE length < 3 OR height > 5;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT catalog_entry_name FROM Catalog_Contents WHERE length < 3 OR height > 5;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT catalog_entry_name FROM Catalog_Contents WHERE length < 3 OR height > 5;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT catalog_entry_name FROM Catalog_Contents WHERE length < 3 OR height > 5;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.332",
        "c_low": "SELECT DISTINCT(catalog_entry_name) FROM Catalog_Contents WHERE length < 3 OR length > 5;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    }\n}\n",
        "c_mid": "SELECT catalog_entry_name FROM Catalog_Contents WHERE length < 3 OR length > 5;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that have a next entry in the catalog hierarchy. The placeholder in the WHERE clause represents a numeric identifier for filtering entries based on their next entry ID.\",\n        \"virtual_table\": \"SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names and level numbers of catalog levels from the 'Catalog_Structure' table that fall within a specified range of level numbers. The placeholders in the WHERE clause represent the lower and upper bounds of the level number range.\",\n        \"virtual_table\": \"SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT catalog_entry_name FROM Catalog_Contents WHERE length < 3 OR length > 5;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT catalog_entry_name FROM Catalog_Contents WHERE length < 3 OR length > 5;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that have a next entry in the catalog hierarchy. The placeholder in the WHERE clause represents a numeric identifier for filtering entries based on their next entry ID.\",\n        \"virtual_table\": \"SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names and level numbers of catalog levels from the 'Catalog_Structure' table that fall within a specified range of level numbers. The placeholders in the WHERE clause represent the lower and upper bounds of the level number range.\",\n        \"virtual_table\": \"SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT catalog_entry_name FROM Catalog_Contents WHERE length < 3 OR length > 5;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT catalog_entry_name FROM Catalog_Contents WHERE length < 3 OR length > 5;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.337",
        "c_low": "SELECT date_of_latest_revision, COUNT(*) as revision_count \nFROM Catalogs \nGROUP BY date_of_latest_revision \nHAVING COUNT(*) > 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT date_of_latest_revision, COUNT(*) as revision_count\nFROM Catalogs\nGROUP BY date_of_latest_revision\nHAVING COUNT(*) > 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT date_of_latest_revision, COUNT(*) as revision_count \nFROM Catalogs \nGROUP BY date_of_latest_revision \nHAVING COUNT(*) > 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT date_of_latest_revision, COUNT(*) as revision_count \nFROM Catalogs \nGROUP BY date_of_latest_revision \nHAVING COUNT(*) > 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT date_of_latest_revision, COUNT(*) as revision_count \nFROM Catalogs \nGROUP BY date_of_latest_revision \nHAVING COUNT(*) > 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT date_of_latest_revision, COUNT(*) as revision_count \nFROM Catalogs \nGROUP BY date_of_latest_revision \nHAVING COUNT(*) > 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.338",
        "c_low": "SELECT date_of_latest_revision, COUNT(*) as revision_count \nFROM Catalogs \nGROUP BY date_of_latest_revision \nHAVING COUNT(*) > 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    }\n}\n",
        "c_mid": "SELECT date_of_latest_revision, COUNT(*) as revision_count \nFROM Catalogs \nGROUP BY date_of_latest_revision \nHAVING COUNT(*) > 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT date_of_publication, COUNT(date_of_latest_revision) AS revision_count\nFROM Catalogs\nGROUP BY date_of_publication\nHAVING revision_count > 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT date_of_latest_revision, COUNT(*) as revision_count \nFROM Catalogs \nGROUP BY date_of_latest_revision \nHAVING COUNT(*) > 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    }\n}\n",
        "t_2": "SELECT date_of_publication, COUNT(date_of_latest_revision) AS revision_count\nFROM Catalogs\nGROUP BY date_of_publication\nHAVING revision_count > 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT date_of_publication, COUNT(date_of_latest_revision) AS revision_count\nFROM Catalogs\nGROUP BY date_of_publication\nHAVING revision_count > 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.387",
        "c_low": "SELECT origin FROM flight WHERE destination = 'Honolulu';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT origin FROM flight WHERE destination = 'Honolulu';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique flight destinations from the 'Flight' table, grouped by destination and ordered by the number of flights to each destination. The placeholder in the LIMIT clause allows the user to specify the maximum number of destinations to retrieve.\",\n        \"virtual_table\": \"SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT origin FROM flight WHERE destination = 'Honolulu';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT origin FROM flight WHERE destination = 'Honolulu';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique flight destinations from the 'Flight' table, grouped by destination and ordered by the number of flights to each destination. The placeholder in the LIMIT clause allows the user to specify the maximum number of destinations to retrieve.\",\n        \"virtual_table\": \"SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT origin FROM flight WHERE destination = 'Honolulu';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT origin FROM flight WHERE destination = 'Honolulu';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.388",
        "c_low": "SELECT DISTINCT origin FROM flight WHERE destination = 'Honolulu';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT DISTINCT origin FROM flight WHERE destination = 'Honolulu';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique flight destinations from the 'Flight' table, grouped by destination and ordered by the number of flights to each destination. The placeholder in the LIMIT clause allows the user to specify the maximum number of destinations to retrieve.\",\n        \"virtual_table\": \"SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT origin FROM flight WHERE destination = 'Honolulu';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT DISTINCT origin FROM flight WHERE destination = 'Honolulu';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique flight destinations from the 'Flight' table, grouped by destination and ordered by the number of flights to each destination. The placeholder in the LIMIT clause allows the user to specify the maximum number of destinations to retrieve.\",\n        \"virtual_table\": \"SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT origin FROM flight WHERE destination = 'Honolulu';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT DISTINCT origin FROM flight WHERE destination = 'Honolulu';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.390",
        "c_low": "SELECT departure_date, arrival_date FROM flight WHERE origin = 'LA' AND destination = 'Honolulu';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the flight numbers from the 'Flight' table that are operated by a specific aircraft model. The placeholder in the WHERE clause represents the name of the aircraft model.\",\n        \"virtual_table\": \"SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT departure_date, arrival_date FROM flight WHERE origin = 'LA' AND destination = 'Honolulu';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT departure_date, arrival_date FROM flight WHERE origin = 'LA' AND destination = 'Honolulu';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT departure_date, arrival_date FROM flight WHERE origin = 'LA' AND destination = 'Honolulu';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT departure_date, arrival_date FROM flight WHERE origin = 'LA' AND destination = 'Honolulu';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the flight numbers from the 'Flight' table that are operated by a specific aircraft model. The placeholder in the WHERE clause represents the name of the aircraft model.\",\n        \"virtual_table\": \"SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT departure_date, arrival_date FROM flight WHERE origin = 'LA' AND destination = 'Honolulu';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.394",
        "c_low": "SELECT AVG(price) AS average_price FROM flight WHERE origin = 'LA' AND destination = 'Honolulu';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT AVG(price) AS average_price FROM flight WHERE origin = 'LA' AND destination = 'Honolulu';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of flight numbers and their corresponding distances from the 'Flight' table, sorted by ticket price in descending order. The placeholder in the LIMIT clause indicates the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT AVG(price) AS average_price FROM flight WHERE origin = 'LA' AND destination = 'Honolulu';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT AVG(price) AS average_price FROM flight WHERE origin = 'LA' AND destination = 'Honolulu';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of flight numbers and their corresponding distances from the 'Flight' table, sorted by ticket price in descending order. The placeholder in the LIMIT clause indicates the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT AVG(price) AS average_price FROM flight WHERE origin = 'LA' AND destination = 'Honolulu';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT AVG(price) AS average_price FROM flight WHERE origin = 'LA' AND destination = 'Honolulu';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.400",
        "c_low": "SELECT flno FROM flight ORDER BY distance ASC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the flight numbers from the 'Flight' table that are operated by a specific aircraft model. The placeholder in the WHERE clause represents the name of the aircraft model.\",\n        \"virtual_table\": \"SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of aircraft associated with a specific flight number from the 'Flight' table. The placeholder in the WHERE clause represents the flight number being queried.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT flno FROM flight ORDER BY distance ASC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of flight numbers and their corresponding distances from the 'Flight' table, sorted by ticket price in descending order. The placeholder in the LIMIT clause indicates the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique flight destinations from the 'Flight' table, grouped by destination and ordered by the number of flights to each destination. The placeholder in the LIMIT clause allows the user to specify the maximum number of destinations to retrieve.\",\n        \"virtual_table\": \"SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT flno FROM flight ORDER BY distance ASC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT flno FROM flight ORDER BY distance ASC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of flight numbers and their corresponding distances from the 'Flight' table, sorted by ticket price in descending order. The placeholder in the LIMIT clause indicates the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique flight destinations from the 'Flight' table, grouped by destination and ordered by the number of flights to each destination. The placeholder in the LIMIT clause allows the user to specify the maximum number of destinations to retrieve.\",\n        \"virtual_table\": \"SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT flno FROM flight ORDER BY distance ASC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the flight numbers from the 'Flight' table that are operated by a specific aircraft model. The placeholder in the WHERE clause represents the name of the aircraft model.\",\n        \"virtual_table\": \"SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of aircraft associated with a specific flight number from the 'Flight' table. The placeholder in the WHERE clause represents the flight number being queried.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT flno FROM flight ORDER BY distance ASC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.402",
        "c_low": "SELECT AVG(distance) AS average_distance, AVG(price) AS average_price FROM flight WHERE origin = 'LA';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT AVG(distance) AS average_distance, AVG(price) AS average_price FROM flight WHERE origin = 'LA';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of flight numbers and their corresponding distances from the 'Flight' table, sorted by ticket price in descending order. The placeholder in the LIMIT clause indicates the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of aircraft from the 'Aircraft' table that have a maximum travel distance greater than the average distance of all aircraft. The subquery calculates the average distance, and the main query filters aircraft based on this value.\",\n        \"virtual_table\": \"SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique flight destinations from the 'Flight' table, grouped by destination and ordered by the number of flights to each destination. The placeholder in the LIMIT clause allows the user to specify the maximum number of destinations to retrieve.\",\n        \"virtual_table\": \"SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT AVG(distance) AS average_distance, AVG(price) AS average_price FROM flight WHERE origin = 'LA';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT AVG(distance) AS average_distance, AVG(price) AS average_price FROM flight WHERE origin = 'LA';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of flight numbers and their corresponding distances from the 'Flight' table, sorted by ticket price in descending order. The placeholder in the LIMIT clause indicates the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of aircraft from the 'Aircraft' table that have a maximum travel distance greater than the average distance of all aircraft. The subquery calculates the average distance, and the main query filters aircraft based on this value.\",\n        \"virtual_table\": \"SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique flight destinations from the 'Flight' table, grouped by destination and ordered by the number of flights to each destination. The placeholder in the LIMIT clause allows the user to specify the maximum number of destinations to retrieve.\",\n        \"virtual_table\": \"SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT AVG(distance) AS average_distance, AVG(price) AS average_price FROM flight WHERE origin = 'LA';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT AVG(distance) AS average_distance, AVG(price) AS average_price FROM flight WHERE origin = 'LA';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.407",
        "c_low": "SELECT origin, COUNT(*) AS flight_count\nFROM flight\nGROUP BY origin\nORDER BY flight_count DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT origin FROM flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique flight destinations from the 'Flight' table, grouped by destination and ordered by the number of flights to each destination. The placeholder in the LIMIT clause allows the user to specify the maximum number of destinations to retrieve.\",\n        \"virtual_table\": \"SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT origin, COUNT(*) AS flight_count\nFROM flight\nGROUP BY origin\nORDER BY flight_count DESC\nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT origin FROM flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique flight destinations from the 'Flight' table, grouped by destination and ordered by the number of flights to each destination. The placeholder in the LIMIT clause allows the user to specify the maximum number of destinations to retrieve.\",\n        \"virtual_table\": \"SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT origin, COUNT(*) AS flight_count\nFROM flight\nGROUP BY origin\nORDER BY flight_count DESC\nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT origin, COUNT(*) as flight_count \nFROM flight \nGROUP BY origin \nORDER BY flight_count DESC \nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.408",
        "c_low": "SELECT origin, COUNT(*) AS flight_count\nFROM flight\nGROUP BY origin\nORDER BY flight_count DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT origin FROM flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique flight destinations from the 'Flight' table, grouped by destination and ordered by the number of flights to each destination. The placeholder in the LIMIT clause allows the user to specify the maximum number of destinations to retrieve.\",\n        \"virtual_table\": \"SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT origin, COUNT(*) AS flight_count\nFROM flight\nGROUP BY origin\nORDER BY flight_count DESC\nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT origin FROM flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique flight destinations from the 'Flight' table, grouped by destination and ordered by the number of flights to each destination. The placeholder in the LIMIT clause allows the user to specify the maximum number of destinations to retrieve.\",\n        \"virtual_table\": \"SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT origin, COUNT(*) AS flight_count\nFROM flight\nGROUP BY origin\nORDER BY flight_count DESC\nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT origin, COUNT(*) AS flight_count \nFROM flight \nGROUP BY origin \nORDER BY flight_count DESC \nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.415",
        "c_low": "SELECT T2.name, COUNT(T1.flno) AS number_of_flights \nFROM flight AS T1 \nJOIN aircraft AS T2 ON T1.aid = T2.aid \nGROUP BY T2.name;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the flight numbers from the 'Flight' table that are operated by a specific aircraft model. The placeholder in the WHERE clause represents the name of the aircraft model.\",\n        \"virtual_table\": \"SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of aircraft associated with a specific flight number from the 'Flight' table. The placeholder in the WHERE clause represents the flight number being queried.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT a.name, COUNT(f.flno) AS number_of_flights\nFROM aircraft a\nLEFT JOIN flight f ON a.aid = f.aid\nGROUP BY a.aid, a.name;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of aircraft IDs and their corresponding names from the 'aircraft' table, sorted by the maximum distance each aircraft can travel in descending order. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of flight numbers and their corresponding distances from the 'Flight' table, sorted by ticket price in descending order. The placeholder in the LIMIT clause indicates the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT T2.name, COUNT(T1.flno) AS number_of_flights \nFROM flight AS T1 \nJOIN aircraft AS T2 ON T1.aid = T2.aid \nGROUP BY T2.aid",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of aircraft that are associated with flights, specifically those that have been used for a number of flights equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of flights for which the aircraft must be listed.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT a.name, COUNT(f.flno) AS number_of_flights\nFROM aircraft a\nLEFT JOIN flight f ON a.aid = f.aid\nGROUP BY a.aid, a.name;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of aircraft IDs and their corresponding names from the 'aircraft' table, sorted by the maximum distance each aircraft can travel in descending order. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of flight numbers and their corresponding distances from the 'Flight' table, sorted by ticket price in descending order. The placeholder in the LIMIT clause indicates the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.name, COUNT(T1.flno) AS number_of_flights FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T2.name",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the flight numbers from the 'Flight' table that are operated by a specific aircraft model. The placeholder in the WHERE clause represents the name of the aircraft model.\",\n        \"virtual_table\": \"SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of aircraft associated with a specific flight number from the 'Flight' table. The placeholder in the WHERE clause represents the flight number being queried.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of aircraft that are associated with flights, specifically those that have been used for a number of flights equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of flights for which the aircraft must be listed.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT a.name, COUNT(f.flno) AS number_of_flights\nFROM aircraft a\nLEFT JOIN flight f ON a.aid = f.aid\nGROUP BY a.aid;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.416",
        "c_low": "SELECT T2.name, COUNT(T1.flno) AS flight_count \nFROM flight AS T1 \nJOIN aircraft AS T2 ON T1.aid = T2.aid \nGROUP BY T2.name;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the flight numbers from the 'Flight' table that are operated by a specific aircraft model. The placeholder in the WHERE clause represents the name of the aircraft model.\",\n        \"virtual_table\": \"SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of aircraft associated with a specific flight number from the 'Flight' table. The placeholder in the WHERE clause represents the flight number being queried.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft. The placeholders in the WHERE clause represent the employee's name.\",\n        \"virtual_table\": \"SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT a.name, COUNT(f.flno) AS flight_count \nFROM aircraft a \nLEFT JOIN flight f ON a.aid = f.aid \nGROUP BY a.name;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of aircraft from the 'Aircraft' table that have a maximum travel distance greater than the average distance of all aircraft. The subquery calculates the average distance, and the main query filters aircraft based on this value.\",\n        \"virtual_table\": \"SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of aircraft IDs and their corresponding names from the 'aircraft' table, sorted by the maximum distance each aircraft can travel in descending order. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT T2.name, COUNT(T1.flno) AS flight_count FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T2.name",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of aircraft that are associated with flights, specifically those that have been used for a number of flights equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of flights for which the aircraft must be listed.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT a.name, COUNT(f.flno) AS flight_count \nFROM aircraft a \nLEFT JOIN flight f ON a.aid = f.aid \nGROUP BY a.aid, a.name;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of aircraft from the 'Aircraft' table that have a maximum travel distance greater than the average distance of all aircraft. The subquery calculates the average distance, and the main query filters aircraft based on this value.\",\n        \"virtual_table\": \"SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of aircraft IDs and their corresponding names from the 'aircraft' table, sorted by the maximum distance each aircraft can travel in descending order. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.name, COUNT(T1.flno) AS flight_count FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T2.name;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the flight numbers from the 'Flight' table that are operated by a specific aircraft model. The placeholder in the WHERE clause represents the name of the aircraft model.\",\n        \"virtual_table\": \"SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of aircraft associated with a specific flight number from the 'Flight' table. The placeholder in the WHERE clause represents the flight number being queried.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of aircraft that are associated with flights, specifically those that have been used for a number of flights equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of flights for which the aircraft must be listed.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT aircraft.name, COUNT(flight.flno) AS flight_count \nFROM aircraft \nLEFT JOIN flight ON aircraft.aid = flight.aid \nGROUP BY aircraft.name;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft. The placeholders in the WHERE clause represent the employee's name.\",\n        \"virtual_table\": \"SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft model. The placeholders in the JOIN clauses represent the employee ID and the aircraft name, allowing users to filter results based on the desired aircraft model.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.429",
        "c_low": "SELECT name FROM employee WHERE eid NOT IN (SELECT eid FROM certificate JOIN aircraft ON certificate.aid = aircraft.aid WHERE aircraft.name = 'Boeing 737-800')",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft. The placeholders in the WHERE clause represent the employee's name.\",\n        \"virtual_table\": \"SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft model. The placeholders in the JOIN clauses represent the employee ID and the aircraft name, allowing users to filter results based on the desired aircraft model.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies employees from the 'Employee' table who do not hold any certificates related to aircraft. The query uses the EXCEPT clause to exclude those employees who are present in the 'Certificate' table, ensuring that only those without certifications are selected.\",\n        \"virtual_table\": \"SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate\"\n    }\n}\n",
        "c_mid": "SELECT name FROM employee WHERE eid NOT IN (SELECT eid FROM certificate WHERE aid IN (SELECT aid FROM aircraft WHERE name = 'Boeing 737-800'));",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT name FROM employee WHERE eid NOT IN (SELECT eid FROM certificate JOIN aircraft ON certificate.aid = aircraft.aid WHERE aircraft.name = 'Boeing 737-800');",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and salaries of employees who hold certificates for aircraft. The data is aggregated by employee ID, and the results are ordered by the number of certificates held, allowing users to see which employees are most certified. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies employees who hold certificates for a specific aircraft model. The query uses an INTERSECT operation to find employees who are certified for the same aircraft model specified by the placeholder in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT name FROM employee WHERE eid NOT IN (SELECT eid FROM certificate WHERE aid IN (SELECT aid FROM aircraft WHERE name = 'Boeing 737-800'));",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT name FROM employee WHERE eid NOT IN (SELECT eid FROM certificate WHERE aid IN (SELECT aid FROM aircraft WHERE name = 'Boeing 737-800'));",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies employees from the 'Employee' table who do not hold any certificates related to aircraft. The query uses the EXCEPT clause to exclude those employees who are present in the 'Certificate' table, ensuring that only those without certifications are selected.\",\n        \"virtual_table\": \"SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and salaries of employees who hold certificates for aircraft. The data is aggregated by employee ID, and the results are ordered by the number of certificates held, allowing users to see which employees are most certified. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the flight numbers from the 'Flight' table that are operated by a specific aircraft model. The placeholder in the WHERE clause represents the name of the aircraft model.\",\n        \"virtual_table\": \"SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT name FROM employee WHERE eid NOT IN (SELECT eid FROM certificate JOIN aircraft ON certificate.aid = aircraft.aid WHERE aircraft.name = 'Boeing 737-800');",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft. The placeholders in the WHERE clause represent the employee's name.\",\n        \"virtual_table\": \"SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft model. The placeholders in the JOIN clauses represent the employee ID and the aircraft name, allowing users to filter results based on the desired aircraft model.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies employees who hold certificates for a specific aircraft model. The query uses an INTERSECT operation to find employees who are certified for the same aircraft model specified by the placeholder in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.430",
        "c_low": "SELECT name FROM employee WHERE eid NOT IN (SELECT eid FROM certificate JOIN aircraft ON certificate.aid = aircraft.aid WHERE aircraft.name = 'Boeing 737-800')",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft. The placeholders in the WHERE clause represent the employee's name.\",\n        \"virtual_table\": \"SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft model. The placeholders in the JOIN clauses represent the employee ID and the aircraft name, allowing users to filter results based on the desired aircraft model.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies employees from the 'Employee' table who do not hold any certificates related to aircraft. The query uses the EXCEPT clause to exclude those employees who are present in the 'Certificate' table, ensuring that only those without certifications are selected.\",\n        \"virtual_table\": \"SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate\"\n    }\n}\n",
        "c_mid": "SELECT e.name \nFROM employee e \nLEFT JOIN certificate c ON e.eid = c.eid \nLEFT JOIN aircraft a ON c.aid = a.aid \nWHERE a.name != 'Boeing 737-800' OR a.name IS NULL;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT name FROM employee WHERE eid NOT IN (SELECT T1.eid FROM certificate AS T2 JOIN aircraft AS T3 ON T2.aid = T3.aid WHERE T3.name = 'Boeing 737-800')",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies employees who hold certificates for a specific aircraft model. The query uses an INTERSECT operation to find employees who are certified for the same aircraft model specified by the placeholder in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and salaries of employees who hold certificates for aircraft. The data is aggregated by employee ID, and the results are ordered by the number of certificates held, allowing users to see which employees are most certified. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT e.name \nFROM employee e \nLEFT JOIN certificate c ON e.eid = c.eid \nLEFT JOIN aircraft a ON c.aid = a.aid \nWHERE a.name != 'Boeing 737-800' OR a.name IS NULL;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT name FROM employee WHERE eid NOT IN (SELECT eid FROM certificate WHERE aid IN (SELECT aid FROM aircraft WHERE name = 'Boeing 737-800'));",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies employees from the 'Employee' table who do not hold any certificates related to aircraft. The query uses the EXCEPT clause to exclude those employees who are present in the 'Certificate' table, ensuring that only those without certifications are selected.\",\n        \"virtual_table\": \"SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and salaries of employees who hold certificates for aircraft. The data is aggregated by employee ID, and the results are ordered by the number of certificates held, allowing users to see which employees are most certified. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT name FROM employee WHERE eid NOT IN (SELECT T1.eid FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid JOIN aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = 'Boeing 737-800')",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft. The placeholders in the WHERE clause represent the employee's name.\",\n        \"virtual_table\": \"SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft model. The placeholders in the JOIN clauses represent the employee ID and the aircraft name, allowing users to filter results based on the desired aircraft model.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies employees who hold certificates for a specific aircraft model. The query uses an INTERSECT operation to find employees who are certified for the same aircraft model specified by the placeholder in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.431",
        "c_low": "SELECT T3.name FROM Aircraft AS T3 JOIN Certificate AS T2 ON T3.aid = T2.aid GROUP BY T3.name ORDER BY COUNT(T2.eid) ASC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft. The placeholders in the WHERE clause represent the employee's name.\",\n        \"virtual_table\": \"SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft model. The placeholders in the JOIN clauses represent the employee ID and the aircraft name, allowing users to filter results based on the desired aircraft model.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies employees from the 'Employee' table who do not hold any certificates related to aircraft. The query uses the EXCEPT clause to exclude those employees who are present in the 'Certificate' table, ensuring that only those without certifications are selected.\",\n        \"virtual_table\": \"SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate\"\n    }\n}\n",
        "c_mid": "SELECT a.name\nFROM aircraft a\nJOIN certificate c ON a.aid = c.aid\nGROUP BY a.aid\nORDER BY COUNT(c.eid) ASC\nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of aircraft IDs and their corresponding names from the 'aircraft' table, sorted by the maximum distance each aircraft can travel in descending order. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT T3.name FROM Aircraft AS T3 JOIN Certificate AS T2 ON T3.aid = T2.aid GROUP BY T3.aid ORDER BY COUNT(T2.eid) ASC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and salaries of employees who hold certificates for aircraft. The data is aggregated by employee ID, and the results are ordered by the number of certificates held, allowing users to see which employees are most certified. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies employees who hold certificates for a specific aircraft model. The query uses an INTERSECT operation to find employees who are certified for the same aircraft model specified by the placeholder in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of aircraft that are associated with flights, specifically those that have been used for a number of flights equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of flights for which the aircraft must be listed.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT a.name\nFROM aircraft a\nJOIN certificate c ON a.aid = c.aid\nGROUP BY a.aid\nORDER BY COUNT(c.eid) ASC\nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of aircraft IDs and their corresponding names from the 'aircraft' table, sorted by the maximum distance each aircraft can travel in descending order. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T2.aid ORDER BY COUNT(T1.eid) ASC LIMIT 1",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and salaries of employees who hold certificates for aircraft. The data is aggregated by employee ID, and the results are ordered by the number of certificates held, allowing users to see which employees are most certified. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of aircraft that are associated with flights, specifically those that have been used for a number of flights equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of flights for which the aircraft must be listed.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies employees from the 'Employee' table who do not hold any certificates related to aircraft. The query uses the EXCEPT clause to exclude those employees who are present in the 'Certificate' table, ensuring that only those without certifications are selected.\",\n        \"virtual_table\": \"SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate\"\n    }\n}\n",
        "t_3+": "SELECT T3.name FROM Aircraft AS T3 JOIN Certificate AS T2 ON T3.aid = T2.aid GROUP BY T3.name ORDER BY COUNT(T2.eid) ASC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft. The placeholders in the WHERE clause represent the employee's name.\",\n        \"virtual_table\": \"SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft model. The placeholders in the JOIN clauses represent the employee ID and the aircraft name, allowing users to filter results based on the desired aircraft model.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies employees who hold certificates for a specific aircraft model. The query uses an INTERSECT operation to find employees who are certified for the same aircraft model specified by the placeholder in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.432",
        "c_low": "SELECT T3.name FROM Aircraft AS T3 JOIN (SELECT T2.aid, COUNT(T2.eid) AS certified_count FROM Certificate AS T2 GROUP BY T2.aid) AS T1 ON T3.aid = T1.aid WHERE T1.certified_count = (SELECT MIN(certified_count) FROM (SELECT COUNT(T2.eid) AS certified_count FROM Certificate AS T2 GROUP BY T2.aid));",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft. The placeholders in the WHERE clause represent the employee's name.\",\n        \"virtual_table\": \"SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft model. The placeholders in the JOIN clauses represent the employee ID and the aircraft name, allowing users to filter results based on the desired aircraft model.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies employees from the 'Employee' table who do not hold any certificates related to aircraft. The query uses the EXCEPT clause to exclude those employees who are present in the 'Certificate' table, ensuring that only those without certifications are selected.\",\n        \"virtual_table\": \"SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate\"\n    }\n}\n",
        "c_mid": "SELECT a.name\nFROM aircraft a\nLEFT JOIN certificate c ON a.aid = c.aid\nGROUP BY a.aid\nORDER BY COUNT(c.eid) ASC\nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT T3.name FROM Aircraft AS T3 JOIN Certificate AS T2 ON T3.aid = T2.aid GROUP BY T3.aid ORDER BY COUNT(T2.eid) ASC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies employees who hold certificates for a specific aircraft model. The query uses an INTERSECT operation to find employees who are certified for the same aircraft model specified by the placeholder in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and salaries of employees who hold certificates for aircraft. The data is aggregated by employee ID, and the results are ordered by the number of certificates held, allowing users to see which employees are most certified. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of aircraft that are associated with flights, specifically those that have been used for a number of flights equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of flights for which the aircraft must be listed.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT a.name\nFROM aircraft a\nJOIN certificate c ON a.aid = c.aid\nGROUP BY a.aid\nORDER BY COUNT(c.eid) ASC\nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T2.name FROM Aircraft AS T2 JOIN Certificate AS T1 ON T2.aid = T1.aid GROUP BY T2.aid ORDER BY COUNT(T1.eid) ASC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and salaries of employees who hold certificates for aircraft. The data is aggregated by employee ID, and the results are ordered by the number of certificates held, allowing users to see which employees are most certified. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of aircraft that are associated with flights, specifically those that have been used for a number of flights equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of flights for which the aircraft must be listed.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies employees from the 'Employee' table who do not hold any certificates related to aircraft. The query uses the EXCEPT clause to exclude those employees who are present in the 'Certificate' table, ensuring that only those without certifications are selected.\",\n        \"virtual_table\": \"SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate\"\n    }\n}\n",
        "t_3+": "SELECT T3.name FROM Aircraft AS T3 JOIN Certificate AS T2 ON T3.aid = T2.aid GROUP BY T3.name ORDER BY COUNT(T2.eid) ASC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft. The placeholders in the WHERE clause represent the employee's name.\",\n        \"virtual_table\": \"SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft model. The placeholders in the JOIN clauses represent the employee ID and the aircraft name, allowing users to filter results based on the desired aircraft model.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies employees who hold certificates for a specific aircraft model. The query uses an INTERSECT operation to find employees who are certified for the same aircraft model specified by the placeholder in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.433",
        "c_low": "SELECT T3.name, T3.distance FROM Aircraft AS T3 JOIN Certificate AS T2 ON T3.aid = T2.aid GROUP BY T3.aid HAVING COUNT(T2.eid) >= 5 AND T3.distance > 5000;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft. The placeholders in the WHERE clause represent the employee's name.\",\n        \"virtual_table\": \"SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft model. The placeholders in the JOIN clauses represent the employee ID and the aircraft name, allowing users to filter results based on the desired aircraft model.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the flight numbers from the 'Flight' table that are operated by a specific aircraft model. The placeholder in the WHERE clause represents the name of the aircraft model.\",\n        \"virtual_table\": \"SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT a.name, a.distance \nFROM aircraft a \nJOIN certificate c ON a.aid = c.aid \nGROUP BY a.aid \nHAVING a.distance > 5000 AND COUNT(c.eid) >= 5;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of aircraft IDs and their corresponding names from the 'aircraft' table, sorted by the maximum distance each aircraft can travel in descending order. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of aircraft from the 'Aircraft' table that have a maximum travel distance greater than the average distance of all aircraft. The subquery calculates the average distance, and the main query filters aircraft based on this value.\",\n        \"virtual_table\": \"SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)\"\n    }\n}\n",
        "c_high": "SELECT A.name, A.distance FROM aircraft AS A JOIN certificate AS C ON A.aid = C.aid GROUP BY A.aid HAVING A.distance > 5000 AND COUNT(C.eid) >= 5;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and salaries of employees who hold certificates for aircraft. The data is aggregated by employee ID, and the results are ordered by the number of certificates held, allowing users to see which employees are most certified. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of aircraft that are associated with flights, specifically those that have been used for a number of flights equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of flights for which the aircraft must be listed.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies employees who hold certificates for a specific aircraft model. The query uses an INTERSECT operation to find employees who are certified for the same aircraft model specified by the placeholder in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT a.name, a.distance \nFROM aircraft a \nJOIN certificate c ON a.aid = c.aid \nWHERE a.distance > 5000 \nGROUP BY a.aid \nHAVING COUNT(c.eid) >= 5;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of aircraft IDs and their corresponding names from the 'aircraft' table, sorted by the maximum distance each aircraft can travel in descending order. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of aircraft from the 'Aircraft' table that have a maximum travel distance greater than the average distance of all aircraft. The subquery calculates the average distance, and the main query filters aircraft based on this value.\",\n        \"virtual_table\": \"SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)\"\n    }\n}\n",
        "t_2": "SELECT A.name, A.distance FROM aircraft AS A JOIN certificate AS C ON A.aid = C.aid GROUP BY A.aid HAVING A.distance > 5000 AND COUNT(C.eid) >= 5;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and salaries of employees who hold certificates for aircraft. The data is aggregated by employee ID, and the results are ordered by the number of certificates held, allowing users to see which employees are most certified. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of aircraft that are associated with flights, specifically those that have been used for a number of flights equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of flights for which the aircraft must be listed.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the flight numbers from the 'Flight' table that are operated by a specific aircraft model. The placeholder in the WHERE clause represents the name of the aircraft model.\",\n        \"virtual_table\": \"SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT T3.name, T3.distance FROM Aircraft AS T3 JOIN Certificate AS T2 ON T3.aid = T2.aid GROUP BY T3.aid HAVING COUNT(T2.eid) >= 5 AND T3.distance > 5000;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft. The placeholders in the WHERE clause represent the employee's name.\",\n        \"virtual_table\": \"SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft model. The placeholders in the JOIN clauses represent the employee ID and the aircraft name, allowing users to filter results based on the desired aircraft model.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies employees who hold certificates for a specific aircraft model. The query uses an INTERSECT operation to find employees who are certified for the same aircraft model specified by the placeholder in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.434",
        "c_low": "SELECT name, distance FROM aircraft WHERE distance > 5000",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the flight numbers from the 'Flight' table that are operated by a specific aircraft model. The placeholder in the WHERE clause represents the name of the aircraft model.\",\n        \"virtual_table\": \"SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft. The placeholders in the WHERE clause represent the employee's name.\",\n        \"virtual_table\": \"SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names of aircraft associated with a specific flight number from the 'Flight' table. The placeholder in the WHERE clause represents the flight number being queried.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT name, distance FROM aircraft WHERE distance > 5000",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of aircraft from the 'Aircraft' table that have a maximum travel distance greater than the average distance of all aircraft. The subquery calculates the average distance, and the main query filters aircraft based on this value.\",\n        \"virtual_table\": \"SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of aircraft IDs and their corresponding names from the 'aircraft' table, sorted by the maximum distance each aircraft can travel in descending order. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of flight numbers and their corresponding distances from the 'Flight' table, sorted by ticket price in descending order. The placeholder in the LIMIT clause indicates the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT T2.name, T2.distance FROM aircraft AS T2 WHERE T2.distance > 5000 AND T2.aid IN (SELECT T1.aid FROM flight AS T1 GROUP BY T1.aid HAVING COUNT(*) >= 5);",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of aircraft that are associated with flights, specifically those that have been used for a number of flights equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of flights for which the aircraft must be listed.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT name, distance FROM aircraft WHERE distance > 5000",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of aircraft from the 'Aircraft' table that have a maximum travel distance greater than the average distance of all aircraft. The subquery calculates the average distance, and the main query filters aircraft based on this value.\",\n        \"virtual_table\": \"SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of aircraft IDs and their corresponding names from the 'aircraft' table, sorted by the maximum distance each aircraft can travel in descending order. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of flight numbers and their corresponding distances from the 'Flight' table, sorted by ticket price in descending order. The placeholder in the LIMIT clause indicates the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.name, T2.distance FROM Aircraft AS T2 JOIN (SELECT T1.aid FROM Flight AS T1 GROUP BY T1.aid HAVING COUNT(T1.flno) >= 5) AS T3 ON T2.aid = T3.aid WHERE T2.distance > 5000;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of aircraft that are associated with flights, specifically those that have been used for a number of flights equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of flights for which the aircraft must be listed.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the flight numbers from the 'Flight' table that are operated by a specific aircraft model. The placeholder in the WHERE clause represents the name of the aircraft model.\",\n        \"virtual_table\": \"SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names of aircraft associated with a specific flight number from the 'Flight' table. The placeholder in the WHERE clause represents the flight number being queried.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT name, distance FROM aircraft WHERE distance > 5000",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft. The placeholders in the WHERE clause represent the employee's name.\",\n        \"virtual_table\": \"SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft model. The placeholders in the JOIN clauses represent the employee ID and the aircraft name, allowing users to filter results based on the desired aircraft model.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.437",
        "c_low": "SELECT e.name, e.salary \nFROM employee e \nJOIN certificate c ON e.eid = c.eid \nJOIN aircraft a ON c.aid = a.aid \nWHERE a.distance > 5000 \nGROUP BY e.eid \nORDER BY COUNT(c.eid) DESC \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft. The placeholders in the WHERE clause represent the employee's name.\",\n        \"virtual_table\": \"SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft model. The placeholders in the JOIN clauses represent the employee ID and the aircraft name, allowing users to filter results based on the desired aircraft model.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies employees from the 'Employee' table who do not hold any certificates related to aircraft. The query uses the EXCEPT clause to exclude those employees who are present in the 'Certificate' table, ensuring that only those without certifications are selected.\",\n        \"virtual_table\": \"SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate\"\n    }\n}\n",
        "c_mid": "SELECT e.name, e.salary \nFROM employee e \nJOIN certificate c ON e.eid = c.eid \nJOIN aircraft a ON c.aid = a.aid \nWHERE a.distance > 5000 \nGROUP BY e.eid \nORDER BY COUNT(c.eid) DESC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of aircraft from the 'Aircraft' table that have a maximum travel distance greater than the average distance of all aircraft. The subquery calculates the average distance, and the main query filters aircraft based on this value.\",\n        \"virtual_table\": \"SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of aircraft IDs and their corresponding names from the 'aircraft' table, sorted by the maximum distance each aircraft can travel in descending order. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of employees from the 'Employee' table who earn more than the average salary of all employees. The subquery calculates the average salary, and the main query filters employees based on this value.\",\n        \"virtual_table\": \"SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)\"\n    }\n}\n",
        "c_high": "SELECT E.name, E.salary \nFROM employee AS E \nJOIN certificate AS C ON E.eid = C.eid \nJOIN aircraft AS A ON C.aid = A.aid \nWHERE A.distance > 5000 \nGROUP BY E.eid \nORDER BY COUNT(C.eid) DESC \nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and salaries of employees who hold certificates for aircraft. The data is aggregated by employee ID, and the results are ordered by the number of certificates held, allowing users to see which employees are most certified. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies employees who hold certificates for a specific aircraft model. The query uses an INTERSECT operation to find employees who are certified for the same aircraft model specified by the placeholder in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of aircraft that are associated with flights, specifically those that have been used for a number of flights equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of flights for which the aircraft must be listed.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT e.name, e.salary \nFROM employee e \nJOIN certificate c ON e.eid = c.eid \nJOIN aircraft a ON c.aid = a.aid \nWHERE a.distance > 5000 \nGROUP BY e.eid \nORDER BY COUNT(c.eid) DESC \nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of aircraft from the 'Aircraft' table that have a maximum travel distance greater than the average distance of all aircraft. The subquery calculates the average distance, and the main query filters aircraft based on this value.\",\n        \"virtual_table\": \"SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of aircraft IDs and their corresponding names from the 'aircraft' table, sorted by the maximum distance each aircraft can travel in descending order. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of employees from the 'Employee' table who earn more than the average salary of all employees. The subquery calculates the average salary, and the main query filters employees based on this value.\",\n        \"virtual_table\": \"SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)\"\n    }\n}\n",
        "t_2": "SELECT T1.name, T1.salary \nFROM employee AS T1 \nJOIN certificate AS T2 ON T1.eid = T2.eid \nJOIN aircraft AS T3 ON T2.aid = T3.aid \nWHERE T3.distance > 5000 \nGROUP BY T1.eid \nORDER BY COUNT(T2.aid) DESC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and salaries of employees who hold certificates for aircraft. The data is aggregated by employee ID, and the results are ordered by the number of certificates held, allowing users to see which employees are most certified. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies employees from the 'Employee' table who do not hold any certificates related to aircraft. The query uses the EXCEPT clause to exclude those employees who are present in the 'Certificate' table, ensuring that only those without certifications are selected.\",\n        \"virtual_table\": \"SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of aircraft that are associated with flights, specifically those that have been used for a number of flights equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of flights for which the aircraft must be listed.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT e.name, e.salary \nFROM employee AS e \nJOIN certificate AS c ON e.eid = c.eid \nJOIN aircraft AS a ON c.aid = a.aid \nWHERE a.distance > 5000 \nGROUP BY e.eid \nORDER BY COUNT(c.eid) DESC \nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft. The placeholders in the WHERE clause represent the employee's name.\",\n        \"virtual_table\": \"SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft model. The placeholders in the JOIN clauses represent the employee ID and the aircraft name, allowing users to filter results based on the desired aircraft model.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies employees who hold certificates for a specific aircraft model. The query uses an INTERSECT operation to find employees who are certified for the same aircraft model specified by the placeholder in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.438",
        "c_low": "SELECT e.name, e.salary FROM employee e JOIN certificate c ON e.eid = c.eid JOIN aircraft a ON c.aid = a.aid WHERE a.distance > 5000 GROUP BY e.eid ORDER BY COUNT(c.eid) DESC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft. The placeholders in the WHERE clause represent the employee's name.\",\n        \"virtual_table\": \"SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft model. The placeholders in the JOIN clauses represent the employee ID and the aircraft name, allowing users to filter results based on the desired aircraft model.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies employees from the 'Employee' table who do not hold any certificates related to aircraft. The query uses the EXCEPT clause to exclude those employees who are present in the 'Certificate' table, ensuring that only those without certifications are selected.\",\n        \"virtual_table\": \"SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate\"\n    }\n}\n",
        "c_mid": "SELECT e.name, e.salary \nFROM employee e \nJOIN certificate c ON e.eid = c.eid \nJOIN aircraft a ON c.aid = a.aid \nWHERE a.distance > 5000 \nGROUP BY e.eid \nORDER BY COUNT(c.aid) DESC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of employees from the 'Employee' table who earn more than the average salary of all employees. The subquery calculates the average salary, and the main query filters employees based on this value.\",\n        \"virtual_table\": \"SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the employee IDs and names from the 'Employee' table, ordered by their annual salary in descending order. The placeholder in the LIMIT clause represents the maximum number of employees to be displayed.\",\n        \"virtual_table\": \"SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT T1.name, T1.salary \nFROM employee AS T1 \nJOIN certificate AS T2 ON T1.eid = T2.eid \nJOIN aircraft AS T3 ON T3.aid = T2.aid \nWHERE T3.distance > 5000 \nGROUP BY T1.eid \nORDER BY count(T2.eid) DESC \nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and salaries of employees who hold certificates for aircraft. The data is aggregated by employee ID, and the results are ordered by the number of certificates held, allowing users to see which employees are most certified. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies employees who hold certificates for a specific aircraft model. The query uses an INTERSECT operation to find employees who are certified for the same aircraft model specified by the placeholder in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of aircraft that are associated with flights, specifically those that have been used for a number of flights equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of flights for which the aircraft must be listed.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT e.name, e.salary \nFROM employee e \nJOIN certificate c ON e.eid = c.eid \nJOIN aircraft a ON c.aid = a.aid \nWHERE a.distance > 5000 \nGROUP BY e.eid \nORDER BY COUNT(c.eid) DESC \nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of employees from the 'Employee' table who earn more than the average salary of all employees. The subquery calculates the average salary, and the main query filters employees based on this value.\",\n        \"virtual_table\": \"SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the employee IDs of employees from the 'Employee' table who have a salary greater than a specified amount. The placeholder in the WHERE clause represents the salary threshold.\",\n        \"virtual_table\": \"SELECT eid FROM Employee WHERE salary  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the employee IDs and names from the 'Employee' table, ordered by their annual salary in descending order. The placeholder in the LIMIT clause represents the maximum number of employees to be displayed.\",\n        \"virtual_table\": \"SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T1.name, T1.salary FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid JOIN aircraft AS T3 ON T2.aid = T3.aid WHERE T3.distance > 5000 GROUP BY T1.eid ORDER BY count(T2.eid) DESC LIMIT 1",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and salaries of employees who hold certificates for aircraft. The data is aggregated by employee ID, and the results are ordered by the number of certificates held, allowing users to see which employees are most certified. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies employees from the 'Employee' table who do not hold any certificates related to aircraft. The query uses the EXCEPT clause to exclude those employees who are present in the 'Certificate' table, ensuring that only those without certifications are selected.\",\n        \"virtual_table\": \"SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of aircraft that are associated with flights, specifically those that have been used for a number of flights equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of flights for which the aircraft must be listed.\",\n        \"virtual_table\": \"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT e.name, e.salary FROM employee e JOIN certificate c ON e.eid = c.eid JOIN aircraft a ON c.aid = a.aid WHERE a.distance > 5000 GROUP BY e.eid ORDER BY COUNT(c.eid) DESC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft. The placeholders in the WHERE clause represent the employee's name.\",\n        \"virtual_table\": \"SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of employees who hold a certificate for a specific aircraft model. The placeholders in the JOIN clauses represent the employee ID and the aircraft name, allowing users to filter results based on the desired aircraft model.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies employees who hold certificates for a specific aircraft model. The query uses an INTERSECT operation to find employees who are certified for the same aircraft model specified by the placeholder in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.442",
        "c_low": "SELECT COUNT(DISTINCT Allergy) FROM Allergy_Type;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of distinct allergy names from the 'Allergy_Type' table. The query uses a placeholder to represent the specific allergy type if needed in future modifications.\",\n        \"virtual_table\": \"SELECT count(DISTINCT allergy) FROM Allergy_type\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of different allergies categorized under a specific type from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the allergy type being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the type or category of a specific allergy from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the name of the allergy being queried.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type WHERE allergy  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT COUNT(DISTINCT Allergy) FROM Has_Allergy;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    }\n}\n",
        "c_high": "SELECT COUNT(DISTINCT Allergy) AS distinct_allergies FROM Has_Allergy;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT COUNT(DISTINCT Allergy) FROM Allergy_Type;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of distinct allergy names from the 'Allergy_Type' table. The query uses a placeholder to represent the specific allergy type if needed in future modifications.\",\n        \"virtual_table\": \"SELECT count(DISTINCT allergy) FROM Allergy_type\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    }\n}\n",
        "t_2": "SELECT COUNT(DISTINCT Allergy) AS distinct_allergies FROM Has_Allergy;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(DISTINCT Allergy) AS distinct_allergies FROM Allergy_Type;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.448",
        "c_low": "SELECT DISTINCT Allergy FROM Allergy_Type",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the type or category of a specific allergy from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the name of the allergy being queried.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type WHERE allergy  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of different allergies categorized under a specific type from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the allergy type being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of distinct allergy names from the 'Allergy_Type' table. The query uses a placeholder to represent the specific allergy type if needed in future modifications.\",\n        \"virtual_table\": \"SELECT count(DISTINCT allergy) FROM Allergy_type\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT Allergy FROM Allergy_Type",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of allergy types from the 'Allergy_Type' table, grouped by their category. The results are ordered by the count of occurrences in ascending order, with a limit set by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT Allergy FROM Allergy_Type",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT Allergy FROM Allergy_Type",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the type or category of a specific allergy from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the name of the allergy being queried.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type WHERE allergy  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of allergy types from the 'Allergy_Type' table, grouped by their category. The results are ordered by the count of occurrences in ascending order, with a limit set by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT Allergy FROM Allergy_Type",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT Allergy FROM Allergy_Type",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.450",
        "c_low": "SELECT AllergyType FROM Allergy_Type WHERE Allergy = 'cat allergy'",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the type or category of a specific allergy from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the name of the allergy being queried.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type WHERE allergy  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of different allergies categorized under a specific type from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the allergy type being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of distinct allergy names from the 'Allergy_Type' table. The query uses a placeholder to represent the specific allergy type if needed in future modifications.\",\n        \"virtual_table\": \"SELECT count(DISTINCT allergy) FROM Allergy_type\"\n    }\n}\n",
        "c_mid": "SELECT AllergyType FROM Allergy_Type WHERE Allergy = 'cat allergy'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a distinct list of allergies from the 'Allergy_Type' table that belong to a specific category of allergy. The placeholder in the WHERE clause represents the type of allergy being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of allergy types from the 'Allergy_Type' table, grouped by their category. The results are ordered by the count of occurrences in ascending order, with a limit set by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT AllergyType FROM Allergy_Type WHERE Allergy = 'cat allergy'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT AllergyType FROM Allergy_Type WHERE Allergy = 'cat allergy'",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the type or category of a specific allergy from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the name of the allergy being queried.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type WHERE allergy  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of allergies from the 'Allergy_Type' table that belong to a specific category of allergy. The placeholder in the WHERE clause represents the type of allergy being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    }\n}\n",
        "t_2": "SELECT T2.AllergyType FROM Allergy_Type AS T2 WHERE T2.Allergy = 'cat allergy'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    }\n}\n",
        "t_3+": "SELECT T1.AllergyType FROM Allergy_Type AS T1 WHERE T1.Allergy = 'cat allergy'",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.452",
        "c_low": "SELECT COUNT(DISTINCT Allergy) FROM Allergy_Type WHERE AllergyType = 'Animal';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of distinct allergy names from the 'Allergy_Type' table. The query uses a placeholder to represent the specific allergy type if needed in future modifications.\",\n        \"virtual_table\": \"SELECT count(DISTINCT allergy) FROM Allergy_type\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of different allergies categorized under a specific type from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the allergy type being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the type or category of a specific allergy from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the name of the allergy being queried.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type WHERE allergy  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT T2.allergytype, COUNT(*) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.allergytype",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of allergy types from the 'Allergy_Type' table, grouped by their category. The results are ordered by the count of occurrences in ascending order, with a limit set by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT COUNT(DISTINCT Allergy) AS Animal_Allergy_Count FROM Allergy_Type WHERE AllergyType = 'Animal';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT count(DISTINCT Allergy) FROM Allergy_Type WHERE AllergyType = 'Animal'",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of allergy types from the 'Allergy_Type' table, grouped by their category. The results are ordered by the count of occurrences in ascending order, with a limit set by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of distinct allergy names from the 'Allergy_Type' table. The query uses a placeholder to represent the specific allergy type if needed in future modifications.\",\n        \"virtual_table\": \"SELECT count(DISTINCT allergy) FROM Allergy_type\"\n    }\n}\n",
        "t_2": "SELECT T2.AllergyType, COUNT(*) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.AllergyType",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(DISTINCT Allergy) AS Animal_Allergy_Count FROM Allergy_Type WHERE AllergyType = 'Animal';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.455",
        "c_low": "SELECT AllergyType, COUNT(Allergy) AS AllergyCount \nFROM Allergy_Type \nGROUP BY AllergyType \nORDER BY AllergyCount DESC \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of different allergies categorized under a specific type from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the allergy type being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of distinct allergy names from the 'Allergy_Type' table. The query uses a placeholder to represent the specific allergy type if needed in future modifications.\",\n        \"virtual_table\": \"SELECT count(DISTINCT allergy) FROM Allergy_type\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the type or category of a specific allergy from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the name of the allergy being queried.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type WHERE allergy  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT T2.allergytype, COUNT(*) AS student_count \nFROM Has_Allergy AS T1 \nJOIN Allergy_Type AS T2 ON T1.allergy = T2.allergy \nGROUP BY T2.allergytype \nORDER BY student_count DESC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    }\n}\n",
        "c_high": "SELECT AllergyType, COUNT(Allergy) AS AllergyCount \nFROM Allergy_Type \nGROUP BY AllergyType \nORDER BY AllergyCount DESC \nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT at.AllergyType, COUNT(ha.Allergy) AS AllergyCount \nFROM Allergy_Type at \nJOIN Has_Allergy ha ON at.Allergy = ha.Allergy \nGROUP BY at.AllergyType \nORDER BY AllergyCount DESC \nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of allergy types from the 'Allergy_Type' table, grouped by their category. The results are ordered by the count of occurrences in ascending order, with a limit set by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.AllergyType, COUNT(*) AS AllergyCount \nFROM Has_Allergy AS T1 \nJOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy \nGROUP BY T2.AllergyType \nORDER BY AllergyCount DESC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT AllergyType, COUNT(Allergy) AS AllergyCount FROM Allergy_Type JOIN Has_Allergy ON Allergy_Type.Allergy = Has_Allergy.Allergy GROUP BY AllergyType ORDER BY AllergyCount DESC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.456",
        "c_low": "SELECT AllergyType, COUNT(*) as AllergyCount \nFROM Allergy_Type \nJOIN Has_Allergy ON Allergy_Type.Allergy = Has_Allergy.Allergy \nGROUP BY AllergyType \nORDER BY AllergyCount DESC \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the type or category of a specific allergy from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the name of the allergy being queried.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type WHERE allergy  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of distinct allergy names from the 'Allergy_Type' table. The query uses a placeholder to represent the specific allergy type if needed in future modifications.\",\n        \"virtual_table\": \"SELECT count(DISTINCT allergy) FROM Allergy_type\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of different allergies categorized under a specific type from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the allergy type being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT T2.AllergyType, COUNT(*) AS StudentCount \nFROM Has_Allergy AS T1 \nJOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy \nGROUP BY T2.AllergyType \nORDER BY StudentCount DESC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of allergy types from the 'Allergy_Type' table, grouped by their category. The results are ordered by the count of occurrences in ascending order, with a limit set by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT AllergyType, COUNT(*) as AllergyCount \nFROM Allergy_Type AS AT \nJOIN Has_Allergy AS HA ON AT.Allergy = HA.Allergy \nGROUP BY AllergyType \nORDER BY AllergyCount DESC \nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT AllergyType, COUNT(*) as StudentCount \nFROM Has_Allergy \nJOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy \nGROUP BY AllergyType \nORDER BY StudentCount DESC \nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of allergy types from the 'Allergy_Type' table, grouped by their category. The results are ordered by the count of occurrences in ascending order, with a limit set by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the type or category of a specific allergy from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the name of the allergy being queried.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type WHERE allergy  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT T2.AllergyType, COUNT(*) AS StudentCount \nFROM Has_Allergy AS T1 \nJOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy \nGROUP BY T2.AllergyType \nORDER BY StudentCount DESC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT AllergyType, COUNT(*) as AllergyCount FROM Allergy_Type AS T1 JOIN Has_Allergy AS T2 ON T1.Allergy = T2.Allergy GROUP BY AllergyType ORDER BY AllergyCount DESC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.458",
        "c_low": "SELECT AllergyType, COUNT(*) AS AllergyCount \nFROM Allergy_Type \nJOIN Has_Allergy ON Allergy_Type.Allergy = Has_Allergy.Allergy \nGROUP BY AllergyType \nORDER BY AllergyCount ASC \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the type or category of a specific allergy from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the name of the allergy being queried.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type WHERE allergy  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of distinct allergy names from the 'Allergy_Type' table. The query uses a placeholder to represent the specific allergy type if needed in future modifications.\",\n        \"virtual_table\": \"SELECT count(DISTINCT allergy) FROM Allergy_type\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of different allergies categorized under a specific type from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the allergy type being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT T2.allergytype FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.AllergyType ORDER BY COUNT(*) ASC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of allergy types from the 'Allergy_Type' table, grouped by their category. The results are ordered by the count of occurrences in ascending order, with a limit set by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT AllergyType, COUNT(*) AS AllergyCount \nFROM Allergy_Type AS AT \nJOIN Has_Allergy AS HA ON AT.Allergy = HA.Allergy \nGROUP BY AllergyType \nORDER BY AllergyCount ASC \nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT AllergyType FROM (SELECT AllergyType, COUNT(*) as count FROM Has_Allergy JOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy GROUP BY AllergyType) ORDER BY count ASC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the type or category of a specific allergy from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the name of the allergy being queried.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type WHERE allergy  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of allergy types from the 'Allergy_Type' table, grouped by their category. The results are ordered by the count of occurrences in ascending order, with a limit set by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT allergytype FROM (SELECT T2.allergytype, COUNT(*) AS allergy_count FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.allergytype) AS subquery ORDER BY allergy_count ASC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT AllergyType, COUNT(*) AS AllergyCount \nFROM Has_Allergy \nJOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy \nGROUP BY AllergyType \nORDER BY AllergyCount ASC \nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.462",
        "c_low": "SELECT Fname || ' ' || LName AS FullName FROM Student;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Fname || ' ' || LName AS FullName FROM Student;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT Fname || ' ' || LName AS FullName FROM Student;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT Fname || ' ' || LName AS FullName FROM Student;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT Fname || ' ' || LName AS FullName FROM Student;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT Fname || ' ' || LName AS FullName FROM Student;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.470",
        "c_low": "SELECT Fname || ' ' || LName AS FullName, Age FROM Student WHERE Sex = 'F';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Fname || ' ' || LName AS FullName, Age FROM Student WHERE Sex = 'F';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT Fname || ' ' || LName AS FullName, Age FROM Student WHERE Sex = 'F';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT Fname || ' ' || LName AS FullName, Age FROM Student WHERE Sex = 'F';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT Fname || ' ' || LName AS FullName, Age FROM Student WHERE Sex = 'F';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT Fname || ' ' || LName AS FullName, Age FROM Student WHERE Sex = 'F';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.471",
        "c_low": "SELECT StuID FROM Student WHERE Sex = 'Male'",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Student' table who are older than a specified age. The placeholder in the WHERE clause represents the age limit.\",\n        \"virtual_table\": \"SELECT StuID FROM Student WHERE age  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT StuID FROM Student WHERE Sex = 'Male';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT StuID FROM Student WHERE Sex = 'Male';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT StuID FROM Student WHERE Sex = 'Male'",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Student' table who are older than a specified age. The placeholder in the WHERE clause represents the age limit.\",\n        \"virtual_table\": \"SELECT StuID FROM Student WHERE age  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT StuID FROM Student WHERE Sex = 'Male';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT StuID FROM Student WHERE Sex = 'Male';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.472",
        "c_low": "SELECT StuID FROM Student WHERE Sex = 'Male'",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Student' table who are older than a specified age. The placeholder in the WHERE clause represents the age limit.\",\n        \"virtual_table\": \"SELECT StuID FROM Student WHERE age  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the academic advisor's name for a specific student identified by their unique student ID. The placeholder in the WHERE clause represents the student's ID.\",\n        \"virtual_table\": \"SELECT Advisor FROM Student WHERE StuID  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT StuID FROM Student WHERE Sex = 'Male';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT StuID FROM Student WHERE Sex = 'Male';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT StuID FROM Student WHERE Sex = 'Male'",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Student' table who are older than a specified age. The placeholder in the WHERE clause represents the age limit.\",\n        \"virtual_table\": \"SELECT StuID FROM Student WHERE age  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the academic advisor's name for a specific student identified by their unique student ID. The placeholder in the WHERE clause represents the student's ID.\",\n        \"virtual_table\": \"SELECT Advisor FROM Student WHERE StuID  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT StuID FROM Student WHERE Sex = 'Male';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT StuID FROM Student WHERE Sex = 'Male';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.491",
        "c_low": "SELECT Major, COUNT(*) as StudentCount\nFROM Student\nGROUP BY Major\nORDER BY StudentCount DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT major, COUNT(*) as student_count FROM Student GROUP BY major ORDER BY student_count DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of students in each academic major from the 'Student' table. The query groups the results by the 'major' column and counts the number of students in each group.\",\n        \"virtual_table\": \"SELECT major ,  count(*) FROM Student GROUP BY major\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of students residing in each city, based on the 'Student' table. The placeholder in the SELECT statement allows for counting the number of students grouped by their city codes.\",\n        \"virtual_table\": \"SELECT city_code ,  count(*) FROM Student GROUP BY city_code\"\n    }\n}\n",
        "c_high": "SELECT Major, COUNT(*) as StudentCount \nFROM Student \nGROUP BY Major \nORDER BY StudentCount DESC \nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT major, COUNT(*) as student_count FROM Student GROUP BY major ORDER BY student_count DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of students in each academic major from the 'Student' table. The query groups the results by the 'major' column and counts the number of students in each group.\",\n        \"virtual_table\": \"SELECT major ,  count(*) FROM Student GROUP BY major\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of students residing in each city, based on the 'Student' table. The placeholder in the SELECT statement allows for counting the number of students grouped by their city codes.\",\n        \"virtual_table\": \"SELECT city_code ,  count(*) FROM Student GROUP BY city_code\"\n    }\n}\n",
        "t_2": "SELECT Major, COUNT(*) as StudentCount\nFROM Student\nGROUP BY Major\nORDER BY StudentCount DESC\nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT Major, COUNT(*) as StudentCount\nFROM Student\nGROUP BY Major\nORDER BY StudentCount DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.492",
        "c_low": "SELECT Major FROM Student GROUP BY Major ORDER BY COUNT(*) DESC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT major FROM (SELECT major, count(*) as student_count FROM Student GROUP BY major) ORDER BY student_count DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of students in each academic major from the 'Student' table. The query groups the results by the 'major' column and counts the number of students in each group.\",\n        \"virtual_table\": \"SELECT major ,  count(*) FROM Student GROUP BY major\"\n    }\n}\n",
        "c_high": "SELECT Major FROM Student GROUP BY Major ORDER BY COUNT(*) DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT major FROM (SELECT major, count(*) as student_count FROM Student GROUP BY major) ORDER BY student_count DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of students in each academic major from the 'Student' table. The query groups the results by the 'major' column and counts the number of students in each group.\",\n        \"virtual_table\": \"SELECT major ,  count(*) FROM Student GROUP BY major\"\n    }\n}\n",
        "t_2": "SELECT Major FROM Student GROUP BY Major ORDER BY COUNT(*) DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT Major FROM Student GROUP BY Major ORDER BY COUNT(*) DESC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.501",
        "c_low": "SELECT Advisor, COUNT(StuID) AS StudentCount \nFROM Student \nGROUP BY Advisor \nORDER BY StudentCount DESC \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the academic advisor's name for a specific student identified by their unique student ID. The placeholder in the WHERE clause represents the student's ID.\",\n        \"virtual_table\": \"SELECT Advisor FROM Student WHERE StuID  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT advisor, COUNT(*) AS student_count FROM Student GROUP BY advisor ORDER BY student_count DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of students assigned to each academic advisor from the 'Student' table. The placeholder in the SELECT clause represents the advisor's name, and the count function aggregates the number of students per advisor.\",\n        \"virtual_table\": \"SELECT advisor ,  count(*) FROM Student GROUP BY advisor\"\n    }\n}\n",
        "c_high": "SELECT Advisor, COUNT(StuID) AS StudentCount\nFROM Student\nGROUP BY Advisor\nORDER BY StudentCount DESC\nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT advisor FROM (SELECT advisor, count(*) as student_count FROM Student GROUP BY advisor) ORDER BY student_count DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of students assigned to each academic advisor from the 'Student' table. The placeholder in the SELECT clause represents the advisor's name, and the count function aggregates the number of students per advisor.\",\n        \"virtual_table\": \"SELECT advisor ,  count(*) FROM Student GROUP BY advisor\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the academic advisor's name for a specific student identified by their unique student ID. The placeholder in the WHERE clause represents the student's ID.\",\n        \"virtual_table\": \"SELECT Advisor FROM Student WHERE StuID  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Advisor, COUNT(StuID) AS StudentCount \nFROM Student \nGROUP BY Advisor \nORDER BY StudentCount DESC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT Advisor, COUNT(StuID) AS StudentCount \nFROM Student \nGROUP BY Advisor \nORDER BY StudentCount DESC \nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.502",
        "c_low": "SELECT Advisor, COUNT(StuID) AS StudentCount \nFROM Student \nGROUP BY Advisor \nORDER BY StudentCount DESC \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the academic advisor's name for a specific student identified by their unique student ID. The placeholder in the WHERE clause represents the student's ID.\",\n        \"virtual_table\": \"SELECT Advisor FROM Student WHERE StuID  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT advisor FROM (SELECT advisor, count(*) as student_count FROM Student GROUP BY advisor) ORDER BY student_count DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of students assigned to each academic advisor from the 'Student' table. The placeholder in the SELECT clause represents the advisor's name, and the count function aggregates the number of students per advisor.\",\n        \"virtual_table\": \"SELECT advisor ,  count(*) FROM Student GROUP BY advisor\"\n    }\n}\n",
        "c_high": "SELECT Advisor, COUNT(StuID) AS StudentCount \nFROM Student \nGROUP BY Advisor \nORDER BY StudentCount DESC \nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT advisor FROM (SELECT advisor, count(*) as student_count FROM Student GROUP BY advisor) ORDER BY student_count DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of students assigned to each academic advisor from the 'Student' table. The placeholder in the SELECT clause represents the advisor's name, and the count function aggregates the number of students per advisor.\",\n        \"virtual_table\": \"SELECT advisor ,  count(*) FROM Student GROUP BY advisor\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the academic advisor's name for a specific student identified by their unique student ID. The placeholder in the WHERE clause represents the student's ID.\",\n        \"virtual_table\": \"SELECT Advisor FROM Student WHERE StuID  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Advisor, COUNT(StuID) AS StudentCount \nFROM Student \nGROUP BY Advisor \nORDER BY StudentCount DESC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT Advisor, COUNT(StuID) AS StudentCount \nFROM Student \nGROUP BY Advisor \nORDER BY StudentCount DESC \nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.503",
        "c_low": "SELECT COUNT(DISTINCT Has_Allergy.StuID) AS StudentCount \nFROM Has_Allergy \nWHERE Has_Allergy.Allergy = 'cat';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "c_mid": "SELECT COUNT(*) FROM Has_Allergy WHERE Allergy = 'cat';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    }\n}\n",
        "c_high": "SELECT COUNT(DISTINCT H.StuID) AS StudentCount \nFROM Has_Allergy H \nWHERE H.Allergy = 'cat'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n",
        "t_1": "SELECT COUNT(*) FROM Has_Allergy WHERE Allergy = 'cat';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT COUNT(*) FROM Has_Allergy WHERE Allergy = 'cat'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(DISTINCT H.StuID) AS StudentCount \nFROM Has_Allergy AS H \nWHERE H.Allergy = 'cat';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.504",
        "c_low": "SELECT COUNT(DISTINCT Has_Allergy.StuID) \nFROM Has_Allergy \nJOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy \nWHERE Allergy_Type.Allergy = 'cat';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of different allergies categorized under a specific type from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the allergy type being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT COUNT(*) FROM Has_Allergy WHERE Allergy = 'cat'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    }\n}\n",
        "c_high": "SELECT COUNT(DISTINCT T2.StuID) AS StudentCount \nFROM Has_Allergy AS T2 \nWHERE T2.Allergy = 'cat';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT COUNT(DISTINCT StuID) FROM Has_Allergy WHERE Allergy = 'cat';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT COUNT(DISTINCT H.StuID) FROM Has_Allergy H JOIN Allergy_Type A ON H.Allergy = A.Allergy WHERE A.Allergy = 'cat'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(DISTINCT H.StuID) AS StudentCount \nFROM Has_Allergy AS H \nWHERE H.Allergy = 'cat';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.508",
        "c_low": "SELECT * FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Allergy)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "c_mid": "SELECT * FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Allergy)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    }\n}\n",
        "c_high": "SELECT StuID, Fname, LName FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Allergy)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT StuID, Fname, LName FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Allergy)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_Allergy",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    }\n}\n",
        "t_3+": "SELECT * FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Allergy)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.509",
        "c_low": "SELECT COUNT(DISTINCT Student.StuID) \nFROM Student \nJOIN Has_Allergy ON Student.StuID = Has_Allergy.StuID \nJOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy \nWHERE Student.Sex = 'Female' AND (Allergy_Type.Allergy = 'Milk' OR Allergy_Type.Allergy = 'Egg');",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of different allergies categorized under a specific type from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the allergy type being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of distinct allergy names from the 'Allergy_Type' table. The query uses a placeholder to represent the specific allergy type if needed in future modifications.\",\n        \"virtual_table\": \"SELECT count(DISTINCT allergy) FROM Allergy_type\"\n    }\n}\n",
        "c_mid": "SELECT COUNT(*) FROM Student S JOIN Has_Allergy H ON S.StuID = H.StuID JOIN Allergy_Type A ON H.Allergy = A.Allergy WHERE S.Sex = 'Female' AND (A.Allergy = 'Milk' OR A.Allergy = 'Egg');",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    }\n}\n",
        "c_high": "SELECT COUNT(*) FROM Student WHERE Sex = 'Female' AND StuID IN (SELECT StuID FROM Has_Allergy WHERE Allergy IN ('milk', 'egg'));",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT COUNT(*) FROM Student s JOIN Has_Allergy ha ON s.StuID = ha.StuID WHERE s.Sex = 'Female' AND ha.Allergy IN ('milk', 'egg');",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT COUNT(*) FROM Student WHERE Sex = 'Female' AND StuID IN (SELECT StuID FROM Has_Allergy WHERE Allergy IN ('milk', 'egg'));",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(*) FROM Student AS S JOIN Has_Allergy AS HA ON S.StuID = HA.StuID WHERE S.Sex = 'Female' AND HA.Allergy IN ('Milk', 'Egg');",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.510",
        "c_low": "SELECT COUNT(DISTINCT Student.StuID) \nFROM Student \nJOIN Has_Allergy ON Student.StuID = Has_Allergy.StuID \nWHERE Student.Sex = 'Female' \nAND (Has_Allergy.Allergy = 'Milk' OR Has_Allergy.Allergy = 'Eggs');",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of different allergies categorized under a specific type from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the allergy type being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of distinct allergy names from the 'Allergy_Type' table. The query uses a placeholder to represent the specific allergy type if needed in future modifications.\",\n        \"virtual_table\": \"SELECT count(DISTINCT allergy) FROM Allergy_type\"\n    }\n}\n",
        "c_mid": "SELECT COUNT(DISTINCT S.StuID) \nFROM Student S \nJOIN Has_Allergy HA ON S.StuID = HA.StuID \nWHERE S.Sex = 'Female' AND HA.Allergy IN ('milk', 'eggs');",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    }\n}\n",
        "c_high": "SELECT COUNT(*) FROM Student AS S JOIN Has_Allergy AS HA ON S.StuID = HA.StuID WHERE S.Sex = 'Female' AND (HA.Allergy = 'Milk' OR HA.Allergy = 'Eggs');",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT COUNT(*) \nFROM Student s \nJOIN Has_Allergy ha ON s.StuID = ha.StuID \nWHERE s.Sex = 'Female' AND (ha.Allergy = 'milk' OR ha.Allergy = 'eggs');",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT COUNT(*) FROM Student AS S JOIN Has_Allergy AS H ON S.StuID = H.StuID WHERE S.Sex = 'Female' AND H.Allergy IN ('milk', 'eggs')",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(DISTINCT S.StuID) \nFROM Student AS S \nJOIN Has_Allergy AS HA ON S.StuID = HA.StuID \nWHERE S.Sex = 'Female' AND HA.Allergy IN ('Milk', 'Eggs');",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.511",
        "c_low": "SELECT COUNT(DISTINCT Has_Allergy.StuID) \nFROM Has_Allergy \nJOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy \nWHERE Allergy_Type.AllergyType = 'Food';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of distinct allergy names from the 'Allergy_Type' table. The query uses a placeholder to represent the specific allergy type if needed in future modifications.\",\n        \"virtual_table\": \"SELECT count(DISTINCT allergy) FROM Allergy_type\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of different allergies categorized under a specific type from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the allergy type being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT COUNT(DISTINCT T1.StuID) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.AllergyType = 'Food';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    }\n}\n",
        "c_high": "SELECT COUNT(DISTINCT H.StuID) \nFROM Has_Allergy H \nJOIN Allergy_Type A ON H.Allergy = A.Allergy \nWHERE A.AllergyType = 'Food';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n",
        "t_1": "SELECT COUNT(DISTINCT StuID) FROM Has_Allergy WHERE Allergy IN (SELECT Allergy FROM Allergy_Type WHERE AllergyType = 'Food');",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT COUNT(DISTINCT T1.StuID) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.AllergyType = 'Food'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(DISTINCT T2.StuID) AS StudentCount \nFROM Has_Allergy AS T2 \nJOIN Allergy_Type AS T1 ON T1.Allergy = T2.Allergy \nWHERE T1.AllergyType = 'Food';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.512",
        "c_low": "SELECT COUNT(DISTINCT Has_Allergy.StuID) \nFROM Has_Allergy \nJOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy \nWHERE Allergy_Type.AllergyType = 'Food';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of distinct allergy names from the 'Allergy_Type' table. The query uses a placeholder to represent the specific allergy type if needed in future modifications.\",\n        \"virtual_table\": \"SELECT count(DISTINCT allergy) FROM Allergy_type\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of different allergies categorized under a specific type from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the allergy type being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT T2.allergytype, count(*) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = 'Food' GROUP BY T2.allergytype",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    }\n}\n",
        "c_high": "SELECT COUNT(DISTINCT T2.StuID) AS StudentCount \nFROM Has_Allergy AS T2 \nJOIN Allergy_Type AS T1 ON T1.Allergy = T2.Allergy \nWHERE T1.AllergyType = 'Food';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT COUNT(DISTINCT Has_Allergy.StuID) \nFROM Has_Allergy \nJOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy \nWHERE Allergy_Type.AllergyType = 'Food';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT COUNT(DISTINCT T1.StuID) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.AllergyType = 'Food'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(DISTINCT T2.StuID) AS StudentCount \nFROM Allergy_Type AS T1 \nJOIN Has_Allergy AS T2 ON T1.Allergy = T2.Allergy \nWHERE T1.AllergyType = 'Food'",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.513",
        "c_low": "SELECT Allergy, COUNT(StuID) AS StudentCount \nFROM Has_Allergy \nGROUP BY Allergy \nORDER BY StudentCount DESC \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of distinct allergy names from the 'Allergy_Type' table. The query uses a placeholder to represent the specific allergy type if needed in future modifications.\",\n        \"virtual_table\": \"SELECT count(DISTINCT allergy) FROM Allergy_type\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of different allergies categorized under a specific type from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the allergy type being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT T2.allergytype, COUNT(*) AS student_count \nFROM Has_Allergy AS T1 \nJOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy \nGROUP BY T2.allergytype \nORDER BY student_count DESC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    }\n}\n",
        "c_high": "SELECT Allergy, COUNT(StuID) AS StudentCount \nFROM Has_Allergy \nGROUP BY Allergy \nORDER BY StudentCount DESC \nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Allergy, COUNT(*) as StudentCount \nFROM Has_Allergy \nGROUP BY Allergy \nORDER BY StudentCount DESC \nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.AllergyType, COUNT(*) AS StudentCount \nFROM Has_Allergy AS T1 \nJOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy \nGROUP BY T2.AllergyType \nORDER BY StudentCount DESC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT Allergy, COUNT(StuID) AS StudentCount FROM Has_Allergy GROUP BY Allergy ORDER BY StudentCount DESC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.514",
        "c_low": "SELECT Allergy, COUNT(*) as AllergyCount\nFROM Has_Allergy\nGROUP BY Allergy\nORDER BY AllergyCount DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the type or category of a specific allergy from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the name of the allergy being queried.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type WHERE allergy  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of distinct allergy names from the 'Allergy_Type' table. The query uses a placeholder to represent the specific allergy type if needed in future modifications.\",\n        \"virtual_table\": \"SELECT count(DISTINCT allergy) FROM Allergy_type\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of different allergies categorized under a specific type from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the allergy type being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT T2.allergytype, COUNT(*) AS student_count \nFROM Has_Allergy AS T1 \nJOIN Allergy_Type AS T2 ON T1.allergy = T2.allergy \nGROUP BY T2.allergytype \nORDER BY student_count DESC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    }\n}\n",
        "c_high": "SELECT Allergy, COUNT(*) as AllergyCount FROM Has_Allergy GROUP BY Allergy ORDER BY AllergyCount DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Allergy, COUNT(*) as StudentCount FROM Has_Allergy GROUP BY Allergy ORDER BY StudentCount DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of allergy types from the 'Allergy_Type' table, grouped by their category. The results are ordered by the count of occurrences in ascending order, with a limit set by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT AllergyType, COUNT(*) AS StudentCount FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy GROUP BY AllergyType ORDER BY StudentCount DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT Allergy, COUNT(*) as AllergyCount FROM Has_Allergy GROUP BY Allergy ORDER BY AllergyCount DESC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.518",
        "c_low": "SELECT at.AllergyType, COUNT(ha.StuID) AS StudentCount\nFROM Allergy_Type at\nLEFT JOIN Has_Allergy ha ON at.Allergy = ha.Allergy\nGROUP BY at.AllergyType;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of distinct allergy names from the 'Allergy_Type' table. The query uses a placeholder to represent the specific allergy type if needed in future modifications.\",\n        \"virtual_table\": \"SELECT count(DISTINCT allergy) FROM Allergy_type\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of different allergies categorized under a specific type from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the allergy type being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "c_mid": "SELECT T2.AllergyType, COUNT(*) \nFROM Has_Allergy AS T1 \nJOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy \nGROUP BY T2.AllergyType",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    }\n}\n",
        "c_high": "SELECT AT.AllergyType, COUNT(S.StuID) AS StudentCount\nFROM Allergy_Type AS AT\nJOIN Has_Allergy AS HA ON AT.Allergy = HA.Allergy\nJOIN Student AS S ON S.StuID = HA.StuID\nGROUP BY AT.AllergyType;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT at.AllergyType, COUNT(ha.StuID) AS StudentCount\nFROM Allergy_Type at\nLEFT JOIN Has_Allergy ha ON at.Allergy = ha.Allergy\nGROUP BY at.AllergyType;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.AllergyType, COUNT(*) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.AllergyType",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT AT.AllergyType, COUNT(S.StuID) AS StudentCount \nFROM Allergy_Type AS AT \nJOIN Has_Allergy AS HA ON AT.Allergy = HA.Allergy \nJOIN Student AS S ON S.StuID = HA.StuID \nGROUP BY AT.AllergyType;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.519",
        "c_low": "SELECT S.LName, S.Age \nFROM Student S \nJOIN Has_Allergy HA1 ON S.StuID = HA1.StuID \nJOIN Has_Allergy HA2 ON S.StuID = HA2.StuID \nWHERE HA1.Allergy = 'milk' AND HA2.Allergy = 'cat';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "c_mid": "SELECT S.LName, S.Age \nFROM Student S \nJOIN Has_Allergy HA1 ON S.StuID = HA1.StuID \nJOIN Has_Allergy HA2 ON S.StuID = HA2.StuID \nWHERE HA1.Allergy = 'milk' AND HA2.Allergy = 'cat';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    }\n}\n",
        "c_high": "SELECT S.LName, S.Age \nFROM Student AS S \nJOIN Has_Allergy AS HA1 ON S.StuID = HA1.StuID \nJOIN Has_Allergy AS HA2 ON S.StuID = HA2.StuID \nWHERE HA1.Allergy = 'milk' AND HA2.Allergy = 'cat';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT S.LName, S.Age \nFROM Student S \nJOIN Has_Allergy HA1 ON S.StuID = HA1.StuID \nJOIN Has_Allergy HA2 ON S.StuID = HA2.StuID \nWHERE HA1.Allergy = 'milk' AND HA2.Allergy = 'cat';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT S.LName, S.Age \nFROM Student S \nJOIN Has_Allergy HA1 ON S.StuID = HA1.StuID \nJOIN Has_Allergy HA2 ON S.StuID = HA2.StuID \nWHERE HA1.Allergy = 'milk' AND HA2.Allergy = 'cat';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT S.LName, S.Age \nFROM Student AS S \nJOIN Has_Allergy AS HA1 ON S.StuID = HA1.StuID \nJOIN Has_Allergy AS HA2 ON S.StuID = HA2.StuID \nWHERE HA1.Allergy = 'milk' AND HA2.Allergy = 'cat';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.520",
        "c_low": "SELECT S.LName, S.Age \nFROM Student S \nJOIN Has_Allergy HA ON S.StuID = HA.StuID \nWHERE HA.Allergy IN ('milk', 'cat') \nGROUP BY S.StuID;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "c_mid": "SELECT S.LName, S.Age \nFROM Student S \nJOIN Has_Allergy HA ON S.StuID = HA.StuID \nWHERE HA.Allergy IN ('milk', 'cat')",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    }\n}\n",
        "c_high": "SELECT S.LName, S.Age \nFROM Student AS S \nJOIN Has_Allergy AS HA ON S.StuID = HA.StuID \nWHERE HA.Allergy IN ('milk', 'cat') \nGROUP BY S.StuID \nHAVING COUNT(DISTINCT HA.Allergy) = 2;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Student.LName, Student.Age \nFROM Student \nJOIN Has_Allergy ON Student.StuID = Has_Allergy.StuID \nWHERE Has_Allergy.Allergy IN ('milk', 'cat') \nGROUP BY Student.StuID \nHAVING COUNT(Has_Allergy.Allergy) = 2;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT S.LName, S.Age \nFROM Student AS S \nJOIN Has_Allergy AS H ON S.StuID = H.StuID \nWHERE H.Allergy IN ('milk', 'cat') \nGROUP BY S.StuID;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT S.LName, S.Age \nFROM Student AS S \nJOIN Has_Allergy AS HA ON S.StuID = HA.StuID \nWHERE HA.Allergy IN ('milk', 'cat') \nGROUP BY S.StuID \nHAVING COUNT(DISTINCT HA.Allergy) = 2;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.522",
        "c_low": "SELECT a.Allergy, at.AllergyType \nFROM Student s \nJOIN Has_Allergy ha ON s.StuID = ha.StuID \nJOIN Allergy_Type at ON ha.Allergy = at.Allergy \nWHERE s.Fname = 'Lisa' AND s.Sex = 'Female' \nORDER BY a.Allergy;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the type or category of a specific allergy from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the name of the allergy being queried.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type WHERE allergy  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of distinct allergy names from the 'Allergy_Type' table. The query uses a placeholder to represent the specific allergy type if needed in future modifications.\",\n        \"virtual_table\": \"SELECT count(DISTINCT allergy) FROM Allergy_type\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of different allergies categorized under a specific type from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the allergy type being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT A.Allergy, AT.AllergyType \nFROM Student S \nJOIN Has_Allergy A ON S.StuID = A.StuID \nJOIN Allergy_Type AT ON A.Allergy = AT.Allergy \nWHERE S.Fname = 'Lisa' AND S.Sex = 'Female' \nORDER BY A.Allergy;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of allergy types from the 'Allergy_Type' table, grouped by their category. The results are ordered by the count of occurrences in ascending order, with a limit set by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    }\n}\n",
        "c_high": "SELECT T1.Allergy, T1.AllergyType FROM Allergy_Type AS T1 JOIN Has_Allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Fname = 'Lisa' AND T3.Sex = 'Female' ORDER BY T1.Allergy",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT a.Allergy, a.AllergyType \nFROM Student s \nJOIN Has_Allergy ha ON s.StuID = ha.StuID \nJOIN Allergy_Type a ON ha.Allergy = a.Allergy \nWHERE s.Fname = 'Lisa' AND s.Sex = 'Female' \nORDER BY a.Allergy;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of allergy types from the 'Allergy_Type' table, grouped by their category. The results are ordered by the count of occurrences in ascending order, with a limit set by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the type or category of a specific allergy from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the name of the allergy being queried.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type WHERE allergy  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT A.Allergy, AT.AllergyType \nFROM Student S \nJOIN Has_Allergy A ON S.StuID = A.StuID \nJOIN Allergy_Type AT ON A.Allergy = AT.Allergy \nWHERE S.Fname = 'Lisa' AND S.Sex = 'Female' \nORDER BY A.Allergy;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT T1.Allergy, T1.AllergyType FROM Allergy_Type AS T1 JOIN Has_Allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Fname = 'Lisa' AND T3.Sex = 'Female' ORDER BY T1.Allergy",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.523",
        "c_low": "SELECT Fname, Sex \nFROM Student \nWHERE StuID IN (\n    SELECT StuID \n    FROM Has_Allergy \n    WHERE Allergy = 'milk'\n) \nAND StuID NOT IN (\n    SELECT StuID \n    FROM Has_Allergy \n    WHERE Allergy = 'cat'\n);",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the type or category of a specific allergy from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the name of the allergy being queried.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type WHERE allergy  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of distinct allergy names from the 'Allergy_Type' table. The query uses a placeholder to represent the specific allergy type if needed in future modifications.\",\n        \"virtual_table\": \"SELECT count(DISTINCT allergy) FROM Allergy_type\"\n    }\n}\n",
        "c_mid": "SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Allergy WHERE Allergy = 'milk') AND StuID NOT IN (SELECT StuID FROM Has_Allergy WHERE Allergy = 'cat');",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    }\n}\n",
        "c_high": "SELECT S.Fname, S.Sex \nFROM Student AS S \nJOIN Has_Allergy AS HA1 ON S.StuID = HA1.StuID \nWHERE HA1.Allergy = 'milk' \nAND S.StuID NOT IN ( \n    SELECT HA2.StuID \n    FROM Has_Allergy AS HA2 \n    WHERE HA2.Allergy = 'cat' \n)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT S.Fname, S.Sex \nFROM Student S \nJOIN Has_Allergy HA1 ON S.StuID = HA1.StuID \nWHERE HA1.Allergy = 'milk' \nAND S.StuID NOT IN (SELECT HA2.StuID FROM Has_Allergy HA2 WHERE HA2.Allergy = 'cat');",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT S.Fname, S.Sex \nFROM Student S \nJOIN Has_Allergy HA1 ON S.StuID = HA1.StuID \nWHERE HA1.Allergy = 'milk' \nAND S.StuID NOT IN (SELECT HA2.StuID FROM Has_Allergy HA2 WHERE HA2.Allergy = 'cat')",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    }\n}\n",
        "t_3+": "SELECT S.Fname, S.Sex \nFROM Student AS S \nJOIN Has_Allergy AS HA ON S.StuID = HA.StuID \nWHERE HA.Allergy = 'milk' \nAND S.StuID NOT IN (SELECT HA2.StuID \n                    FROM Has_Allergy AS HA2 \n                    WHERE HA2.Allergy = 'cat');",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.524",
        "c_low": "SELECT Fname, Sex \nFROM Student \nWHERE StuID IN (\n    SELECT StuID \n    FROM Has_Allergy \n    WHERE Allergy = 'milk'\n) \nAND StuID NOT IN (\n    SELECT StuID \n    FROM Has_Allergy \n    WHERE Allergy = 'cats'\n);",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the type or category of a specific allergy from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the name of the allergy being queried.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type WHERE allergy  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT S.Fname, S.Sex \nFROM Student S \nJOIN Has_Allergy HA1 ON S.StuID = HA1.StuID \nJOIN Has_Allergy HA2 ON S.StuID = HA2.StuID \nWHERE HA1.Allergy = 'milk' AND HA2.Allergy = 'cats'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    }\n}\n",
        "c_high": "SELECT S.Fname, S.Sex \nFROM Student AS S \nJOIN Has_Allergy AS HA ON S.StuID = HA.StuID \nWHERE HA.Allergy = 'milk' \nAND S.StuID NOT IN (SELECT HA2.StuID \n                    FROM Has_Allergy AS HA2 \n                    WHERE HA2.Allergy = 'cats');",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT S.Fname, S.Sex \nFROM Student S \nJOIN Has_Allergy HA1 ON S.StuID = HA1.StuID \nJOIN Has_Allergy HA2 ON S.StuID = HA2.StuID \nWHERE HA1.Allergy = 'milk' AND HA2.Allergy = 'cats'",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Allergy WHERE Allergy = 'milk') AND StuID NOT IN (SELECT StuID FROM Has_Allergy WHERE Allergy = 'cats')",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT S.Fname, S.Sex \nFROM Student AS S \nJOIN Has_Allergy AS HA1 ON S.StuID = HA1.StuID \nJOIN Allergy_Type AS AT1 ON HA1.Allergy = AT1.Allergy \nWHERE AT1.Allergy = 'milk' \nAND S.StuID NOT IN (\n    SELECT HA2.StuID \n    FROM Has_Allergy AS HA2 \n    JOIN Allergy_Type AS AT2 ON HA2.Allergy = AT2.Allergy \n    WHERE AT2.Allergy = 'cats'\n)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.525",
        "c_low": "SELECT AVG(Age) FROM Student WHERE StuID IN (SELECT StuID FROM Has_Allergy WHERE Allergy IN (SELECT Allergy FROM Allergy_Type WHERE AllergyType IN ('food', 'animal')));",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of different allergies categorized under a specific type from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the allergy type being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT AVG(CAST(Age AS INTEGER)) FROM Student WHERE StuID IN (SELECT StuID FROM Has_Allergy WHERE Allergy IN (SELECT Allergy FROM Allergy_Type WHERE AllergyType IN ('food', 'animal')));",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    }\n}\n",
        "c_high": "SELECT AVG(CAST(Age AS INTEGER)) AS Average_Age \nFROM Student \nWHERE StuID IN (\n    SELECT T2.StuID \n    FROM Has_Allergy AS T2 \n    JOIN Allergy_Type AS T1 ON T1.Allergy = T2.Allergy \n    WHERE T1.AllergyType IN ('food', 'animal')\n)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT AVG(CAST(Age AS INTEGER)) AS average_age \nFROM Student \nWHERE StuID IN (\n    SELECT StuID \n    FROM Has_Allergy \n    WHERE Allergy IN (\n        SELECT Allergy \n        FROM Allergy_Type \n        WHERE AllergyType IN ('food', 'animal')\n    )\n)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT AVG(CAST(Age AS INTEGER)) FROM Student WHERE StuID IN (SELECT StuID FROM Has_Allergy WHERE Allergy IN (SELECT Allergy FROM Allergy_Type WHERE AllergyType IN ('food', 'animal')));",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT AVG(CAST(Age AS INTEGER)) AS Average_Age\nFROM Student\nWHERE StuID IN (\n    SELECT T2.StuID\n    FROM Has_Allergy AS T2\n    JOIN Allergy_Type AS T1 ON T1.Allergy = T2.Allergy\n    WHERE T1.AllergyType IN ('food', 'animal')\n)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.526",
        "c_low": "SELECT AVG(Age) AS Average_Age\nFROM Student\nWHERE StuID IN (\n    SELECT Has_Allergy.StuID\n    FROM Has_Allergy\n    JOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy\n    WHERE AllergyType IN ('food', 'animal')\n);",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Student' table who are older than a specified age. The placeholder in the WHERE clause represents the age limit.\",\n        \"virtual_table\": \"SELECT StuID FROM Student WHERE age  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT AVG(CAST(S.Age AS INTEGER)) AS average_age\nFROM Student S\nJOIN Has_Allergy HA ON S.StuID = HA.StuID\nJOIN Allergy_Type AT ON HA.Allergy = AT.Allergy\nWHERE AT.AllergyType IN ('food', 'animal');",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    }\n}\n",
        "c_high": "SELECT AVG(CAST(Age AS INTEGER)) AS Average_Age\nFROM Student\nWHERE StuID IN (\n    SELECT T2.StuID\n    FROM Has_Allergy AS T2\n    JOIN Allergy_Type AS T1 ON T1.Allergy = T2.Allergy\n    WHERE T1.AllergyType IN ('food', 'animal')\n)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT AVG(CAST(S.Age AS INTEGER)) AS Average_Age\nFROM Student S\nJOIN Has_Allergy HA ON S.StuID = HA.StuID\nJOIN Allergy_Type AT ON HA.Allergy = AT.Allergy\nWHERE AT.AllergyType IN ('food', 'animal');",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT AVG(CAST(Age AS INTEGER)) AS average_age \nFROM Student \nWHERE StuID IN (\n    SELECT T1.StuID \n    FROM Has_Allergy AS T1 \n    JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy \n    WHERE T2.AllergyType IN ('food', 'animal')\n)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT AVG(CAST(Age AS INTEGER)) AS average_age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Allergy WHERE Allergy IN (SELECT Allergy FROM Allergy_Type WHERE AllergyType IN ('food', 'animal')));",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.527",
        "c_low": "SELECT Fname, LName FROM Student WHERE StuID IN (SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_Allergy)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "c_mid": "SELECT Fname, LName FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Allergy WHERE Allergy IN (SELECT Allergy FROM Allergy_Type WHERE AllergyType = 'Food'));",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    }\n}\n",
        "c_high": "SELECT Fname, LName FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Allergy WHERE Allergy IN (SELECT Allergy FROM Allergy_Type WHERE AllergyType = 'Food'));",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Fname, LName FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Allergy WHERE Allergy IN (SELECT Allergy FROM Allergy_Type WHERE AllergyType = 'Food'));",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Fname, LName FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Allergy)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    }\n}\n",
        "t_3+": "SELECT Fname, LName FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Allergy WHERE Allergy IN (SELECT Allergy FROM Allergy_Type WHERE AllergyType = 'Food'));",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.528",
        "c_low": "SELECT Fname, LName FROM Student WHERE StuID IN (SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_Allergy)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "c_mid": "SELECT Fname || ' ' || LName AS FullName \nFROM Student \nWHERE StuID NOT IN (\n    SELECT StuID \n    FROM Has_Allergy \n    JOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy \n    WHERE Allergy_Type.AllergyType = 'Food'\n);",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    }\n}\n",
        "c_high": "SELECT Fname, LName FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Allergy)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Fname || ' ' || LName AS FullName \nFROM Student \nWHERE StuID NOT IN (SELECT StuID FROM Has_Allergy)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Fname || ' ' || LName AS FullName \nFROM Student \nWHERE StuID NOT IN (SELECT StuID FROM Has_Allergy)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    }\n}\n",
        "t_3+": "SELECT Fname, LName FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Allergy)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.529",
        "c_low": "SELECT COUNT(DISTINCT s.StuID) \nFROM Student s \nJOIN Has_Allergy ha ON s.StuID = ha.StuID \nJOIN Allergy_Type at ON ha.Allergy = at.Allergy \nWHERE s.Sex = 'M' AND at.AllergyType = 'Food';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of different allergies categorized under a specific type from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the allergy type being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of distinct allergy names from the 'Allergy_Type' table. The query uses a placeholder to represent the specific allergy type if needed in future modifications.\",\n        \"virtual_table\": \"SELECT count(DISTINCT allergy) FROM Allergy_type\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "c_mid": "SELECT COUNT(DISTINCT S.StuID) \nFROM Student AS S \nJOIN Has_Allergy AS H ON S.StuID = H.StuID \nJOIN Allergy_Type AS A ON H.Allergy = A.Allergy \nWHERE S.Sex = 'M' AND A.AllergyType = 'Food';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    }\n}\n",
        "c_high": "SELECT COUNT(*) FROM Student WHERE Sex = 'M' AND StuID IN (SELECT StuID FROM Has_Allergy JOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy WHERE AllergyType = 'Food')",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT COUNT(*) FROM Student WHERE Sex = 'M' AND StuID IN (SELECT StuID FROM Has_Allergy WHERE Allergy IN (SELECT Allergy FROM Allergy_Type WHERE AllergyType = 'Food'));",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT COUNT(*) FROM Student WHERE Sex = 'M' AND StuID IN (SELECT StuID FROM Has_Allergy WHERE Allergy IN (SELECT Allergy FROM Allergy_Type WHERE AllergyType = 'Food'))",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(*) FROM Student AS S JOIN Has_Allergy AS H ON S.StuID = H.StuID JOIN Allergy_Type AS A ON H.Allergy = A.Allergy WHERE S.Sex = 'M' AND A.AllergyType = 'Food';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.530",
        "c_low": "SELECT COUNT(DISTINCT s.StuID) \nFROM Student s \nJOIN Has_Allergy ha ON s.StuID = ha.StuID \nJOIN Allergy_Type at ON ha.Allergy = at.Allergy \nWHERE s.Sex = 'M' AND at.AllergyType = 'Food';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the type or category of a specific allergy from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the name of the allergy being queried.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type WHERE allergy  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of different allergies categorized under a specific type from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the allergy type being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT COUNT(DISTINCT S.StuID) \nFROM Student S \nJOIN Has_Allergy HA ON S.StuID = HA.StuID \nJOIN Allergy_Type AT ON HA.Allergy = AT.Allergy \nWHERE S.Sex = 'M' AND AT.AllergyType = 'Food';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    }\n}\n",
        "c_high": "SELECT COUNT(DISTINCT S.StuID) \nFROM Student S \nJOIN Has_Allergy HA ON S.StuID = HA.StuID \nJOIN Allergy_Type AT ON HA.Allergy = AT.Allergy \nWHERE S.Sex = 'M' AND AT.AllergyType = 'Food';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT COUNT(DISTINCT s.StuID) \nFROM Student s \nJOIN Has_Allergy ha ON s.StuID = ha.StuID \nJOIN Allergy_Type at ON ha.Allergy = at.Allergy \nWHERE s.Sex = 'M' AND at.AllergyType = 'Food';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT COUNT(*) FROM Student WHERE Sex = 'M' AND StuID IN (SELECT StuID FROM Has_Allergy WHERE Allergy IN (SELECT Allergy FROM Allergy_Type WHERE AllergyType = 'Food'));",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(DISTINCT S.StuID) \nFROM Student S \nJOIN Has_Allergy HA ON S.StuID = HA.StuID \nJOIN Allergy_Type AT ON HA.Allergy = AT.Allergy \nWHERE S.Sex = 'M' AND AT.AllergyType = 'Food';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.531",
        "c_low": "SELECT DISTINCT S.Fname, S.city_code \nFROM Student S \nJOIN Has_Allergy HA ON S.StuID = HA.StuID \nWHERE HA.Allergy IN ('milk', 'cat');",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of distinct allergy names from the 'Allergy_Type' table. The query uses a placeholder to represent the specific allergy type if needed in future modifications.\",\n        \"virtual_table\": \"SELECT count(DISTINCT allergy) FROM Allergy_type\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the type or category of a specific allergy from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the name of the allergy being queried.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type WHERE allergy  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT S.Fname, S.city_code \nFROM Student S \nJOIN Has_Allergy HA ON S.StuID = HA.StuID \nWHERE HA.Allergy IN ('milk', 'cat');",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT S.Fname, S.city_code \nFROM Student AS S \nJOIN Has_Allergy AS HA ON S.StuID = HA.StuID \nWHERE HA.Allergy IN ('milk', 'cat');",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT Student.Fname, Student.city_code \nFROM Student \nJOIN Has_Allergy ON Student.StuID = Has_Allergy.StuID \nWHERE Has_Allergy.Allergy IN ('milk', 'cat');",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT S.Fname, S.city_code \nFROM Student S \nJOIN Has_Allergy HA ON S.StuID = HA.StuID \nWHERE HA.Allergy IN ('milk', 'cat');",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT S.Fname, S.city_code \nFROM Student AS S \nJOIN Has_Allergy AS H ON S.StuID = H.StuID \nWHERE H.Allergy IN ('milk', 'cat');",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.532",
        "c_low": "SELECT DISTINCT S.Fname, S.city_code \nFROM Student S \nJOIN Has_Allergy HA ON S.StuID = HA.StuID \nWHERE HA.Allergy IN (\"milk\", \"cat\")",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the type or category of a specific allergy from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the name of the allergy being queried.\",\n        \"virtual_table\": \"SELECT allergytype FROM Allergy_type WHERE allergy  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of distinct allergy names from the 'Allergy_Type' table. The query uses a placeholder to represent the specific allergy type if needed in future modifications.\",\n        \"virtual_table\": \"SELECT count(DISTINCT allergy) FROM Allergy_type\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT S.Fname, S.city_code \nFROM Student S \nJOIN Has_Allergy HA ON S.StuID = HA.StuID \nWHERE HA.Allergy IN ('milk', 'cat');",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT S.Fname, S.city_code \nFROM Student AS S \nJOIN Has_Allergy AS HA ON S.StuID = HA.StuID \nWHERE HA.Allergy IN ('milk', 'cat');",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT Student.Fname, Student.city_code \nFROM Student \nJOIN Has_Allergy ON Student.StuID = Has_Allergy.StuID \nWHERE Has_Allergy.Allergy IN ('milk', 'cat');",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT S.Fname, S.city_code \nFROM Student S \nJOIN Has_Allergy H ON S.StuID = H.StuID \nWHERE H.Allergy IN ('milk', 'cat')",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT S.Fname, S.city_code \nFROM Student AS S \nJOIN Has_Allergy AS HA ON S.StuID = HA.StuID \nWHERE HA.Allergy IN ('milk', 'cat');",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.533",
        "c_low": "SELECT COUNT(*) FROM Student WHERE StuID IN (SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_Allergy WHERE Allergy IN ('food', 'animal')) AND Age > 18;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Student' table who are older than a specified age. The placeholder in the WHERE clause represents the age limit.\",\n        \"virtual_table\": \"SELECT StuID FROM Student WHERE age  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of students from the 'Student' table who are of a specific age. The placeholder in the WHERE clause represents the age of the students being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Student WHERE age  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT COUNT(*) \nFROM Student \nWHERE Age > 18 \nAND StuID NOT IN (\n    SELECT StuID \n    FROM Has_Allergy \n    WHERE Allergy IN (\n        SELECT Allergy \n        FROM Allergy_Type \n        WHERE AllergyType IN ('food', 'animal')\n    )\n);",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    }\n}\n",
        "c_high": "SELECT COUNT(*) \nFROM Student \nWHERE Age > 18 \nAND StuID NOT IN (\n    SELECT StuID \n    FROM Has_Allergy \n    WHERE Allergy IN (\n        SELECT Allergy \n        FROM Allergy_Type \n        WHERE AllergyType IN ('food', 'animal')\n    )\n)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n",
        "t_1": "SELECT COUNT(*) \nFROM Student \nWHERE Age > 18 \nAND StuID NOT IN (\n    SELECT StuID \n    FROM Has_Allergy \n    WHERE Allergy IN ('food', 'animal')\n);",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT COUNT(*) FROM Student WHERE Age > 18 AND StuID NOT IN (SELECT StuID FROM Has_Allergy WHERE Allergy IN (SELECT Allergy FROM Allergy_Type WHERE AllergyType IN ('food', 'animal')));",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(*) FROM Student WHERE Age > 18 AND StuID NOT IN (SELECT StuID FROM Has_Allergy WHERE Allergy IN (SELECT Allergy FROM Allergy_Type WHERE AllergyType IN ('food', 'animal')));",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.534",
        "c_low": "SELECT COUNT(*) FROM Student WHERE Age > 18 AND StuID NOT IN (SELECT StuID FROM Has_Allergy WHERE Allergy IN (SELECT Allergy FROM Allergy_Type WHERE AllergyType IN ('food', 'animal')));",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of different allergies categorized under a specific type from the 'Allergy_Type' table. The placeholder in the WHERE clause represents the allergy type being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Allergy_type WHERE allergytype  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of distinct allergy names from the 'Allergy_Type' table. The query uses a placeholder to represent the specific allergy type if needed in future modifications.\",\n        \"virtual_table\": \"SELECT count(DISTINCT allergy) FROM Allergy_type\"\n    }\n}\n",
        "c_mid": "SELECT COUNT(*) FROM Student WHERE Age > 18 AND StuID NOT IN (SELECT StuID FROM Has_Allergy WHERE Allergy IN (SELECT Allergy FROM Allergy_Type WHERE AllergyType IN ('food', 'animal')));",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    }\n}\n",
        "c_high": "SELECT COUNT(*) FROM Student WHERE Age > 18 AND StuID NOT IN (SELECT StuID FROM Has_Allergy WHERE Allergy IN (SELECT Allergy FROM Allergy_Type WHERE AllergyType IN ('food', 'animal')));",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT COUNT(*) FROM Student WHERE Age > 18 AND StuID NOT IN (SELECT StuID FROM Has_Allergy WHERE Allergy IN (SELECT Allergy FROM Allergy_Type WHERE AllergyType IN ('food', 'animal')));",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy from the 'Allergy_Type' table. The query groups the results by the allergy type, allowing for an overview of how many students are affected by each category of allergy.\",\n        \"virtual_table\": \"SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of students for each type of allergy recorded in the 'Has_Allergy' table. The placeholder in the SELECT statement represents the allergy name, and the count function aggregates the number of students with each allergy.\",\n        \"virtual_table\": \"SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies students from the 'Has_Allergy' table who have a certain number of allergies. The placeholder in the HAVING clause represents the minimum count of allergies a student must have to be included in the results.\",\n        \"virtual_table\": \"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT COUNT(*) FROM Student WHERE Age > 18 AND StuID NOT IN (SELECT StuID FROM Has_Allergy WHERE Allergy IN (SELECT Allergy FROM Allergy_Type WHERE AllergyType IN ('food', 'animal')));",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of students with different types of allergies by joining the 'Has_Allergy' and 'Allergy_Type' tables. The placeholder in the SELECT statement represents the allergy type, and the count reflects the number of students associated with each allergy type.\",\n        \"virtual_table\": \"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(*) FROM Student WHERE Age > 18 AND StuID NOT IN (SELECT StuID FROM Has_Allergy WHERE Allergy IN (SELECT Allergy FROM Allergy_Type WHERE AllergyType IN ('food', 'animal')));",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.535",
        "c_low": "SELECT Fname, Major FROM Student WHERE StuID IN (SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_Allergy WHERE Allergy = 'soy')",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "c_mid": "SELECT Fname, Major \nFROM Student \nWHERE StuID NOT IN (\n    SELECT StuID \n    FROM Has_Allergy \n    WHERE Allergy = 'soy'\n);",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT Fname, Major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Allergy WHERE Allergy = 'soy')",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n",
        "t_1": "SELECT Fname, Major \nFROM Student \nWHERE StuID NOT IN (\n    SELECT StuID \n    FROM Has_Allergy \n    WHERE Allergy = 'soy'\n);",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT Fname, Major FROM Student WHERE StuID IN (SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_Allergy WHERE Allergy = 'soy')",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies students from the 'Student' table who do not have any allergies recorded in the 'Has_Allergy' table. The query uses the EXCEPT clause to exclude students with allergies from the list of all students.\",\n        \"virtual_table\": \"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\"\n    }\n}\n",
        "t_3+": "SELECT Fname, Major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Allergy WHERE Allergy = 'soy')",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.536",
        "c_low": "SELECT Student.Fname, Student.Major \nFROM Student \nJOIN Has_Allergy ON Student.StuID = Has_Allergy.StuID \nJOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy \nWHERE Allergy_Type.AllergyType != 'Soy';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Student.Fname, Student.Major \nFROM Student \nJOIN Has_Allergy ON Student.StuID = Has_Allergy.StuID \nJOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy \nWHERE Allergy_Type.AllergyType = 'Soy'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT S.Fname, S.Major FROM Student AS S JOIN Has_Allergy AS H ON S.StuID = H.StuID JOIN Allergy_Type AS A ON H.Allergy = A.Allergy WHERE A.Allergy = 'soy';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n",
        "t_1": "SELECT Student.Fname, Student.Major \nFROM Student \nJOIN Has_Allergy ON Student.StuID = Has_Allergy.StuID \nJOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy \nWHERE Allergy_Type.AllergyType = 'Soy'",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT Student.Fname, Student.Major \nFROM Student \nJOIN Has_Allergy ON Student.StuID = Has_Allergy.StuID \nJOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy \nWHERE Allergy_Type.AllergyType = 'soy';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT S.Fname, S.Major FROM Student AS S JOIN Has_Allergy AS H ON S.StuID = H.StuID JOIN Allergy_Type AS A ON H.Allergy = A.Allergy WHERE A.Allergy = 'soy';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of allergies and their corresponding types for students based on their first name. The placeholders in the WHERE clause allow for filtering by a specific student's first name.\",\n        \"virtual_table\": \"SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.Allergy\"\n    }\n}\n"
    },
    {
        "sample_id": "train.542",
        "c_low": "SELECT billing_country, AVG(total) AS average_invoice_size\nFROM invoices\nGROUP BY billing_country\nORDER BY average_invoice_size DESC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT customers.country, AVG(invoices.total) AS average_invoice_size\nFROM customers\nJOIN invoices ON customers.id = invoices.customer_id\nGROUP BY customers.country\nORDER BY average_invoice_size DESC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total amount of invoices for a specific customer identified by their first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_high": "SELECT billing_country, AVG(total) AS average_invoice_size FROM invoices GROUP BY billing_country ORDER BY average_invoice_size DESC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average total amount of invoices grouped by billing country. The results are ordered in descending order based on the average total, and a placeholder is included to limit the number of results returned.\",\n        \"virtual_table\": \"SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total invoice amounts grouped by billing country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display based on their total invoice amounts.\",\n        \"virtual_table\": \"SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total number of invoices issued per country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display in the result.\",\n        \"virtual_table\": \"SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_1": "SELECT billing_country, AVG(total) AS average_invoice_size \nFROM invoices \nGROUP BY billing_country \nORDER BY AVG(total) DESC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average total amount of invoices grouped by billing country. The results are ordered in descending order based on the average total, and a placeholder is included to limit the number of results returned.\",\n        \"virtual_table\": \"SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total invoice amounts grouped by billing country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display based on their total invoice amounts.\",\n        \"virtual_table\": \"SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total number of invoices issued per country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display in the result.\",\n        \"virtual_table\": \"SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_2": "SELECT customers.country, AVG(invoices.total) AS average_invoice_size \nFROM customers \nJOIN invoices ON customers.id = invoices.customer_id \nGROUP BY customers.country \nORDER BY average_invoice_size DESC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customers along with their first and last names, and the count of invoices associated with each customer. The results are grouped by customer ID and ordered by the number of invoices in descending order, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total invoice amounts for each customer from the 'customers' table. It retrieves the first and last names of customers along with the sum of their associated invoice totals. The results are grouped by customer ID and ordered in descending order based on the total amount, with a limit on the number of results returned as specified by the placeholder.\",\n        \"virtual_table\": \"SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total amount of invoices for a specific customer identified by their first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "t_3+": "SELECT billing_country, AVG(total) AS average_invoice_size\nFROM invoices\nGROUP BY billing_country\nORDER BY average_invoice_size DESC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.553",
        "c_low": "SELECT title FROM albums ORDER BY title ASC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the titles of albums from the 'albums' table that are associated with a specific artist. The placeholder in the WHERE clause represents the name of the artist.\",\n        \"virtual_table\": \"SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the titles of albums from the 'albums' table that are associated with a specific artist from the 'artists' table. The placeholder in the WHERE clause represents the artist's name.\",\n        \"virtual_table\": \"SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT * FROM albums ORDER BY title ASC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT title FROM albums ORDER BY title ASC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles of albums from the 'albums' table that have more than a specified number of tracks associated with them. The placeholder in the HAVING clause represents the minimum count of tracks required for an album to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_1": "SELECT * FROM albums ORDER BY title ASC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT title FROM albums ORDER BY title ASC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the titles of albums from the 'albums' table that are associated with a specific artist. The placeholder in the WHERE clause represents the name of the artist.\",\n        \"virtual_table\": \"SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the titles of albums from the 'albums' table that are associated with a specific artist from the 'artists' table. The placeholder in the WHERE clause represents the artist's name.\",\n        \"virtual_table\": \"SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles of albums from the 'albums' table that have more than a specified number of tracks associated with them. The placeholder in the HAVING clause represents the minimum count of tracks required for an album to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_3+": "SELECT * FROM albums ORDER BY title ASC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.555",
        "c_low": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the titles of albums from the 'albums' table that are associated with a specific artist. The placeholder in the WHERE clause represents the name of the artist.\",\n        \"virtual_table\": \"SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the titles of albums from the 'albums' table that are associated with a specific artist from the 'artists' table. The placeholder in the WHERE clause represents the artist's name.\",\n        \"virtual_table\": \"SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT * FROM albums WHERE title LIKE 'A%' ORDER BY title ASC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title ASC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles of albums from the 'albums' table that have more than a specified number of tracks associated with them. The placeholder in the HAVING clause represents the minimum count of tracks required for an album to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_1": "SELECT * FROM albums WHERE title LIKE 'A%' ORDER BY title ASC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the titles of albums from the 'albums' table that are associated with a specific artist. The placeholder in the WHERE clause represents the name of the artist.\",\n        \"virtual_table\": \"SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the titles of albums from the 'albums' table that are associated with a specific artist from the 'artists' table. The placeholder in the WHERE clause represents the artist's name.\",\n        \"virtual_table\": \"SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles of albums from the 'albums' table that have more than a specified number of tracks associated with them. The placeholder in the HAVING clause represents the minimum count of tracks required for an album to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_3+": "SELECT * FROM albums WHERE title LIKE 'A%' ORDER BY title ASC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.560",
        "c_low": "SELECT SUM(total) AS total_amount\nFROM invoices\nWHERE billing_city = 'Chicago' AND billing_state = 'Illinois';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT sum(total) FROM invoices WHERE billing_city = 'Chicago' AND billing_state = 'Illinois';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total amount of invoices for a specific customer identified by their first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of invoices associated with customers from the 'customers' table, filtered by the customer's first and last name. The placeholders in the WHERE clause represent the first and last names of the customer.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_high": "SELECT SUM(total) FROM invoices WHERE billing_city = 'Chicago' AND billing_state = 'Illinois';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total invoice amounts grouped by billing country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display based on their total invoice amounts.\",\n        \"virtual_table\": \"SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average total amount of invoices grouped by billing country. The results are ordered in descending order based on the average total, and a placeholder is included to limit the number of results returned.\",\n        \"virtual_table\": \"SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total number of invoices issued per country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display in the result.\",\n        \"virtual_table\": \"SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_1": "SELECT SUM(total) FROM invoices WHERE billing_city = 'Chicago' AND billing_state = 'Illinois';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total invoice amounts grouped by billing country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display based on their total invoice amounts.\",\n        \"virtual_table\": \"SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average total amount of invoices grouped by billing country. The results are ordered in descending order based on the average total, and a placeholder is included to limit the number of results returned.\",\n        \"virtual_table\": \"SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total number of invoices issued per country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display in the result.\",\n        \"virtual_table\": \"SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_2": "SELECT SUM(total) FROM invoices WHERE billing_city = 'Chicago' AND billing_state = 'Illinois';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total amount of invoices for a specific customer identified by their first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total invoice amounts for each customer from the 'customers' table. It retrieves the first and last names of customers along with the sum of their associated invoice totals. The results are grouped by customer ID and ordered in descending order based on the total amount, with a limit on the number of results returned as specified by the placeholder.\",\n        \"virtual_table\": \"SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of invoices associated with customers from the 'customers' table, filtered by the customer's first and last name. The placeholders in the WHERE clause represent the first and last names of the customer.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "t_3+": "SELECT SUM(total) AS total_amount\nFROM invoices\nWHERE billing_city = 'Chicago' AND billing_state = 'Illinois';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.564",
        "c_low": "SELECT billing_state, COUNT(*) AS invoice_count\nFROM invoices\nGROUP BY billing_state;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT state, COUNT(*) AS invoice_count FROM invoices JOIN customers ON invoices.customer_id = customers.id GROUP BY state;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total amount of invoices for a specific customer identified by their first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of invoices associated with customers from the 'customers' table, filtered by the customer's first and last name. The placeholders in the WHERE clause represent the first and last names of the customer.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_high": "SELECT billing_state, COUNT(*) AS invoice_count FROM invoices GROUP BY billing_state;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average total amount of invoices grouped by billing country. The results are ordered in descending order based on the average total, and a placeholder is included to limit the number of results returned.\",\n        \"virtual_table\": \"SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total number of invoices issued per country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display in the result.\",\n        \"virtual_table\": \"SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total invoice amounts grouped by billing country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display based on their total invoice amounts.\",\n        \"virtual_table\": \"SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_1": "SELECT billing_state, COUNT(*) AS invoice_count FROM invoices GROUP BY billing_state;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average total amount of invoices grouped by billing country. The results are ordered in descending order based on the average total, and a placeholder is included to limit the number of results returned.\",\n        \"virtual_table\": \"SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total number of invoices issued per country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display in the result.\",\n        \"virtual_table\": \"SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total invoice amounts grouped by billing country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display based on their total invoice amounts.\",\n        \"virtual_table\": \"SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_2": "SELECT billing_state, COUNT(*) AS invoice_count FROM invoices GROUP BY billing_state;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customers along with their first and last names, and the count of invoices associated with each customer. The results are grouped by customer ID and ordered by the number of invoices in descending order, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the total amount of invoices for a specific customer identified by their first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of invoices associated with customers from the 'customers' table, filtered by the customer's first and last name. The placeholders in the WHERE clause represent the first and last names of the customer.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "t_3+": "SELECT billing_state, COUNT(*) AS invoice_count\nFROM invoices\nGROUP BY billing_state;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.565",
        "c_low": "SELECT billing_state, COUNT(*) AS invoice_count\nFROM invoices\nGROUP BY billing_state\nORDER BY invoice_count DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT billing_state, COUNT(*) AS invoice_count \nFROM invoices \nGROUP BY billing_state \nORDER BY invoice_count DESC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total amount of invoices for a specific customer identified by their first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of invoices associated with customers from the 'customers' table, filtered by the customer's first and last name. The placeholders in the WHERE clause represent the first and last names of the customer.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_high": "SELECT billing_state, COUNT(*) AS invoice_count FROM invoices GROUP BY billing_state ORDER BY invoice_count DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average total amount of invoices grouped by billing country. The results are ordered in descending order based on the average total, and a placeholder is included to limit the number of results returned.\",\n        \"virtual_table\": \"SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total number of invoices issued per country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display in the result.\",\n        \"virtual_table\": \"SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total invoice amounts grouped by billing country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display based on their total invoice amounts.\",\n        \"virtual_table\": \"SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_1": "SELECT billing_state, COUNT(*) AS invoice_count FROM invoices GROUP BY billing_state ORDER BY invoice_count DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average total amount of invoices grouped by billing country. The results are ordered in descending order based on the average total, and a placeholder is included to limit the number of results returned.\",\n        \"virtual_table\": \"SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total number of invoices issued per country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display in the result.\",\n        \"virtual_table\": \"SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total invoice amounts grouped by billing country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display based on their total invoice amounts.\",\n        \"virtual_table\": \"SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_2": "SELECT billing_state, COUNT(*) as invoice_count \nFROM invoices \nGROUP BY billing_state \nORDER BY invoice_count DESC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customers along with their first and last names, and the count of invoices associated with each customer. The results are grouped by customer ID and ordered by the number of invoices in descending order, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the total amount of invoices for a specific customer identified by their first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of invoices associated with customers from the 'customers' table, filtered by the customer's first and last name. The placeholders in the WHERE clause represent the first and last names of the customer.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "t_3+": "SELECT billing_state, COUNT(*) AS invoice_count\nFROM invoices\nGROUP BY billing_state\nORDER BY invoice_count DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.566",
        "c_low": "SELECT billing_state, COUNT(*) AS invoice_count\nFROM invoices\nGROUP BY billing_state\nORDER BY invoice_count DESC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT billing_state, COUNT(*) AS invoice_count \nFROM invoices \nGROUP BY billing_state \nORDER BY invoice_count DESC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total amount of invoices for a specific customer identified by their first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of invoices associated with customers from the 'customers' table, filtered by the customer's first and last name. The placeholders in the WHERE clause represent the first and last names of the customer.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_high": "SELECT billing_state, COUNT(*) FROM invoices GROUP BY billing_state ORDER BY COUNT(*) DESC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average total amount of invoices grouped by billing country. The results are ordered in descending order based on the average total, and a placeholder is included to limit the number of results returned.\",\n        \"virtual_table\": \"SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total number of invoices issued per country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display in the result.\",\n        \"virtual_table\": \"SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total invoice amounts grouped by billing country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display based on their total invoice amounts.\",\n        \"virtual_table\": \"SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_1": "SELECT billing_state, COUNT(*) FROM invoices GROUP BY billing_state ORDER BY COUNT(*) DESC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average total amount of invoices grouped by billing country. The results are ordered in descending order based on the average total, and a placeholder is included to limit the number of results returned.\",\n        \"virtual_table\": \"SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total number of invoices issued per country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display in the result.\",\n        \"virtual_table\": \"SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total invoice amounts grouped by billing country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display based on their total invoice amounts.\",\n        \"virtual_table\": \"SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_2": "SELECT billing_state, COUNT(*) as invoice_count FROM invoices GROUP BY billing_state ORDER BY invoice_count DESC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customers along with their first and last names, and the count of invoices associated with each customer. The results are grouped by customer ID and ordered by the number of invoices in descending order, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the total amount of invoices for a specific customer identified by their first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total invoice amounts for each customer from the 'customers' table. It retrieves the first and last names of customers along with the sum of their associated invoice totals. The results are grouped by customer ID and ordered in descending order based on the total amount, with a limit on the number of results returned as specified by the placeholder.\",\n        \"virtual_table\": \"SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_3+": "SELECT billing_state, COUNT(*) AS invoice_count\nFROM invoices\nGROUP BY billing_state\nORDER BY invoice_count DESC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.567",
        "c_low": "SELECT COUNT(*) AS number_of_invoices, SUM(total) AS invoice_total\nFROM invoices\nJOIN customers ON invoices.customer_id = customers.id\nWHERE customers.state = 'California';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT COUNT(*) AS number_of_invoices, SUM(T2.total) AS invoice_total \nFROM customers AS T1 \nJOIN invoices AS T2 ON T1.id = T2.customer_id \nWHERE T1.state = 'California';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total amount of invoices for a specific customer identified by their first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of invoices associated with customers from the 'customers' table, filtered by the customer's first and last name. The placeholders in the WHERE clause represent the first and last names of the customer.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_high": "SELECT COUNT(*) AS number_of_invoices, SUM(total) AS total_invoice_amount \nFROM invoices \nWHERE billing_state = 'California';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total number of invoices issued per country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display in the result.\",\n        \"virtual_table\": \"SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total invoice amounts grouped by billing country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display based on their total invoice amounts.\",\n        \"virtual_table\": \"SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the average total amount of invoices grouped by billing country. The results are ordered in descending order based on the average total, and a placeholder is included to limit the number of results returned.\",\n        \"virtual_table\": \"SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_1": "SELECT COUNT(*) AS number_of_invoices, SUM(total) AS total_invoice_amount FROM invoices WHERE billing_state = 'California';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total number of invoices issued per country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display in the result.\",\n        \"virtual_table\": \"SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total invoice amounts grouped by billing country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display based on their total invoice amounts.\",\n        \"virtual_table\": \"SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the average total amount of invoices grouped by billing country. The results are ordered in descending order based on the average total, and a placeholder is included to limit the number of results returned.\",\n        \"virtual_table\": \"SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_2": "SELECT COUNT(*) AS invoice_count, SUM(T2.total) AS total_amount FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.state = 'California';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total amount of invoices for a specific customer identified by their first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customers along with their first and last names, and the count of invoices associated with each customer. The results are grouped by customer ID and ordered by the number of invoices in descending order, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of invoices associated with customers from the 'customers' table, filtered by the customer's first and last name. The placeholders in the WHERE clause represent the first and last names of the customer.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(*) AS number_of_invoices, SUM(total) AS invoice_total\nFROM invoices\nJOIN customers ON invoices.customer_id = customers.id\nWHERE customers.state = 'California';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.568",
        "c_low": "SELECT COUNT(*) AS number_of_invoices, SUM(total) AS total_billed\nFROM invoices\nJOIN customers ON invoices.customer_id = customers.id\nWHERE customers.state = 'CA';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT COUNT(*) AS number_of_invoices, SUM(total) AS total_billed FROM invoices AS T1 JOIN customers AS T2 ON T1.customer_id = T2.id WHERE T2.state = 'CA';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total amount of invoices for a specific customer identified by their first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of invoices associated with customers from the 'customers' table, filtered by the customer's first and last name. The placeholders in the WHERE clause represent the first and last names of the customer.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_high": "SELECT COUNT(*) AS number_of_invoices, SUM(total) AS total_billed FROM invoices WHERE billing_state = 'CA';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total invoice amounts grouped by billing country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display based on their total invoice amounts.\",\n        \"virtual_table\": \"SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average total amount of invoices grouped by billing country. The results are ordered in descending order based on the average total, and a placeholder is included to limit the number of results returned.\",\n        \"virtual_table\": \"SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total number of invoices issued per country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display in the result.\",\n        \"virtual_table\": \"SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_1": "SELECT COUNT(*) AS number_of_invoices, SUM(total) AS total_billed FROM invoices WHERE billing_state = 'CA';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total invoice amounts grouped by billing country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display based on their total invoice amounts.\",\n        \"virtual_table\": \"SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average total amount of invoices grouped by billing country. The results are ordered in descending order based on the average total, and a placeholder is included to limit the number of results returned.\",\n        \"virtual_table\": \"SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total number of invoices issued per country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display in the result.\",\n        \"virtual_table\": \"SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_2": "SELECT COUNT(*) AS number_of_invoices, SUM(total) AS total_billed FROM invoices AS T1 JOIN customers AS T2 ON T1.customer_id = T2.id WHERE T2.state = 'CA';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total amount of invoices for a specific customer identified by their first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customers along with their first and last names, and the count of invoices associated with each customer. The results are grouped by customer ID and ordered by the number of invoices in descending order, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total invoice amounts for each customer from the 'customers' table. It retrieves the first and last names of customers along with the sum of their associated invoice totals. The results are grouped by customer ID and ordered in descending order based on the total amount, with a limit on the number of results returned as specified by the placeholder.\",\n        \"virtual_table\": \"SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(*) AS number_of_invoices, SUM(total) AS total_billed\nFROM invoices\nJOIN customers ON invoices.customer_id = customers.id\nWHERE customers.state = 'CA';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.575",
        "c_low": "SELECT email, phone FROM employees WHERE first_name = 'Astrid' AND last_name = 'Gruber';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT email, phone FROM employees WHERE first_name = 'Astrid' AND last_name = 'Gruber';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT email, phone FROM employees WHERE first_name = 'Astrid' AND last_name = 'Gruber';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT email, phone FROM employees WHERE first_name = 'Astrid' AND last_name = 'Gruber';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT email, phone FROM employees WHERE first_name = 'Astrid' AND last_name = 'Gruber';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT email, phone FROM employees WHERE first_name = 'Astrid' AND last_name = 'Gruber';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.580",
        "c_low": "SELECT COUNT(*) AS customer_count FROM customers WHERE state = 'California';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT COUNT(*) AS customer_count FROM customers WHERE state = 'California';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT COUNT(*) AS customer_count FROM customers WHERE state = 'California';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT COUNT(*) AS customer_count FROM customers WHERE state = 'California';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT COUNT(*) AS customer_count FROM customers WHERE state = 'California';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT COUNT(*) AS customer_count FROM customers WHERE state = 'California';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.587",
        "c_low": "SELECT employees.first_name, employees.last_name, employees.hire_date, employees.phone \nFROM employees \nWHERE employees.first_name = 'Nancy' AND employees.last_name = 'Edwards';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT employees.first_name, employees.last_name, employees.hire_date, employees.phone \nFROM employees \nWHERE employees.first_name = 'Nancy' AND employees.last_name = 'Edwards';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT employees.first_name, employees.last_name, employees.hire_date, employees.phone \nFROM employees \nWHERE employees.first_name = 'Nancy' AND employees.last_name = 'Edwards';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT employees.first_name, employees.last_name, employees.hire_date, employees.phone \nFROM employees \nWHERE employees.first_name = 'Nancy' AND employees.last_name = 'Edwards';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT employees.first_name, employees.last_name, employees.hire_date, employees.phone \nFROM employees \nWHERE employees.first_name = 'Nancy' AND employees.last_name = 'Edwards';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT employees.first_name, employees.last_name, employees.hire_date, employees.phone \nFROM employees \nWHERE employees.first_name = 'Nancy' AND employees.last_name = 'Edwards';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.589",
        "c_low": "SELECT first_name || ' ' || last_name AS full_name\nFROM employees\nWHERE reports_to = (SELECT id FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards');",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT T2.first_name, T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = 'Nancy' AND T1.last_name = 'Edwards';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of employees who report to a specific manager from the 'employees' table. The placeholders in the WHERE clause represent the first and last names of the manager.\",\n        \"virtual_table\": \"SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_high": "SELECT first_name, last_name FROM employees WHERE reports_to = (SELECT id FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards');",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of employees and their managers from the 'employees' table. It lists the first and last names of managers along with the count of employees reporting to each manager. The results are grouped by the manager's identifier and ordered by the number of reports in descending order, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_1": "SELECT T2.first_name, T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = 'Nancy' AND T1.last_name = 'Edwards';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of employees who report to a specific manager from the 'employees' table. The placeholders in the WHERE clause represent the first and last names of the manager.\",\n        \"virtual_table\": \"SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a summary of employees and their managers from the 'employees' table. It lists the first and last names of managers along with the count of employees reporting to each manager. The results are grouped by the manager's identifier and ordered by the number of reports in descending order, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_2": "SELECT first_name || ' ' || last_name AS full_name \nFROM employees \nWHERE reports_to = (SELECT id FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards');",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT first_name || ' ' || last_name AS full_name\nFROM employees\nWHERE reports_to = (SELECT id FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards');",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.592",
        "c_low": "SELECT address, city, state, country, postal_code FROM customers WHERE first_name = 'Nancy' AND last_name = 'Edwards';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT address, city, state, country, postal_code FROM customers WHERE first_name = 'Nancy' AND last_name = 'Edwards';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT address, city, state, country, postal_code FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT address, city, state, country, postal_code FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT address, city, state, country, postal_code FROM customers WHERE first_name = 'Nancy' AND last_name = 'Edwards';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT address, city, state, country, postal_code FROM customers WHERE first_name = 'Nancy' AND last_name = 'Edwards';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.593",
        "c_low": "SELECT e.first_name || ' ' || e.last_name AS full_name\nFROM employees e\nJOIN customers c ON e.id = c.support_rep_id\nGROUP BY e.id\nORDER BY COUNT(c.id) DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT e.first_name || ' ' || e.last_name AS full_name\nFROM employees e\nJOIN customers c ON c.support_rep_id = e.id\nGROUP BY e.id\nORDER BY COUNT(c.id) DESC\nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of customers supported by a specific employee from the 'employees' table. The join condition links the 'customers' table to the 'employees' table based on the support representative's ID. The placeholders in the WHERE clause represent the first and last names of the employee whose customer count is being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_high": "SELECT E.first_name, E.last_name \nFROM employees AS E \nJOIN customers AS C ON C.support_rep_id = E.id \nJOIN invoices AS I ON I.customer_id = C.id \nGROUP BY E.id \nORDER BY COUNT(I.id) DESC \nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customers along with their first and last names, and the count of invoices associated with each customer. The results are grouped by customer ID and ordered by the number of invoices in descending order, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_1": "SELECT e.first_name || ' ' || e.last_name AS full_name\nFROM employees e\nJOIN customers c ON e.id = c.support_rep_id\nGROUP BY e.id\nORDER BY COUNT(c.id) DESC\nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT e.first_name, e.last_name \nFROM employees e \nJOIN customers c ON c.support_rep_id = e.id \nGROUP BY e.id \nORDER BY COUNT(c.id) DESC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of customers supported by a specific employee from the 'employees' table. The join condition links the 'customers' table to the 'employees' table based on the support representative's ID. The placeholders in the WHERE clause represent the first and last names of the employee whose customer count is being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customers along with their first and last names, and the count of invoices associated with each customer. The results are grouped by customer ID and ordered by the number of invoices in descending order, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_3+": "SELECT e.first_name || ' ' || e.last_name AS full_name\nFROM employees e\nJOIN customers c ON e.id = c.support_rep_id\nGROUP BY e.id\nORDER BY COUNT(c.id) DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.594",
        "c_low": "SELECT e.first_name || ' ' || e.last_name AS full_name\nFROM employees e\nJOIN customers c ON e.id = c.support_rep_id\nGROUP BY e.id\nORDER BY COUNT(c.id) DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT e.first_name || ' ' || e.last_name AS full_name\nFROM employees e\nJOIN customers c ON e.id = c.support_rep_id\nGROUP BY e.id\nORDER BY COUNT(c.id) DESC\nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT e.first_name, e.last_name FROM employees AS e JOIN customers AS c ON e.id = c.support_rep_id GROUP BY e.id ORDER BY COUNT(c.id) DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customers along with their first and last names, and the count of invoices associated with each customer. The results are grouped by customer ID and ordered by the number of invoices in descending order, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_1": "SELECT e.first_name || ' ' || e.last_name AS full_name\nFROM employees e\nJOIN customers c ON e.id = c.support_rep_id\nGROUP BY e.id\nORDER BY COUNT(c.id) DESC\nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT e.first_name, e.last_name FROM employees AS e JOIN customers AS c ON e.id = c.support_rep_id GROUP BY e.id ORDER BY COUNT(c.id) DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customers along with their first and last names, and the count of invoices associated with each customer. The results are grouped by customer ID and ordered by the number of invoices in descending order, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_3+": "SELECT e.first_name || ' ' || e.last_name AS full_name\nFROM employees e\nJOIN customers c ON e.id = c.support_rep_id\nGROUP BY e.id\nORDER BY COUNT(c.id) DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.604",
        "c_low": "SELECT city, COUNT(*) AS number_of_employees\nFROM employees\nWHERE title LIKE '%IT%'\nGROUP BY city;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT city, COUNT(*) AS number_of_employees\nFROM employees\nWHERE title LIKE '%IT%'\nGROUP BY city;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT city, COUNT(*) AS number_of_employees\nFROM employees\nWHERE title LIKE '%IT%'\nGROUP BY city;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT city, COUNT(*) AS number_of_employees\nFROM employees\nWHERE title LIKE '%IT%'\nGROUP BY city;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT city, COUNT(*) AS employee_count \nFROM employees \nWHERE title LIKE '%IT%'\nGROUP BY city;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT city, COUNT(*) AS number_of_employees\nFROM employees\nWHERE title LIKE '%IT%'\nGROUP BY city;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.606",
        "c_low": "SELECT e.first_name, e.last_name, COUNT(e2.id) AS reports_count\nFROM employees e\nLEFT JOIN employees e2 ON e.id = e2.reports_to\nGROUP BY e.id;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT T1.first_name, T1.last_name, COUNT(T2.id) AS report_count \nFROM employees AS T1 \nLEFT JOIN employees AS T2 ON T1.id = T2.reports_to \nGROUP BY T1.id;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of employees who report to a specific manager from the 'employees' table. The placeholders in the WHERE clause represent the first and last names of the manager.\",\n        \"virtual_table\": \"SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_high": "SELECT T2.first_name, T2.last_name, COUNT(T1.reports_to) AS report_count \nFROM employees AS T1 \nJOIN employees AS T2 ON T1.reports_to = T2.id \nGROUP BY T1.reports_to \nORDER BY report_count DESC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of employees and their managers from the 'employees' table. It lists the first and last names of managers along with the count of employees reporting to each manager. The results are grouped by the manager's identifier and ordered by the number of reports in descending order, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_1": "SELECT T2.first_name, T2.last_name, COUNT(T1.reports_to) AS report_count \nFROM employees AS T1 \nJOIN employees AS T2 ON T1.reports_to = T2.id \nGROUP BY T1.reports_to \nORDER BY report_count DESC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of employees who report to a specific manager from the 'employees' table. The placeholders in the WHERE clause represent the first and last names of the manager.\",\n        \"virtual_table\": \"SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a summary of employees and their managers from the 'employees' table. It lists the first and last names of managers along with the count of employees reporting to each manager. The results are grouped by the manager's identifier and ordered by the number of reports in descending order, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_2": "SELECT e.first_name, e.last_name, COUNT(e2.id) AS reports_count\nFROM employees e\nLEFT JOIN employees e2 ON e.id = e2.reports_to\nGROUP BY e.id;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT e.first_name, e.last_name, COUNT(e2.id) AS reports_count\nFROM employees e\nLEFT JOIN employees e2 ON e.id = e2.reports_to\nGROUP BY e.id;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.608",
        "c_low": "SELECT COUNT(*) AS order_count \nFROM invoices \nJOIN customers ON invoices.customer_id = customers.id \nWHERE customers.first_name = 'Luca' AND customers.last_name = 'Mancini';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = 'Luca' AND T1.last_name = 'Mancini';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total amount of invoices for a specific customer identified by their first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of invoices associated with customers from the 'customers' table, filtered by the customer's first and last name. The placeholders in the WHERE clause represent the first and last names of the customer.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_high": "SELECT COUNT(*) FROM invoices AS T1 JOIN customers AS T2 ON T1.customer_id = T2.id WHERE T2.first_name = 'Luca' AND T2.last_name = 'Mancini';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total number of invoices issued per country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display in the result.\",\n        \"virtual_table\": \"SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customers along with their first and last names, and the count of invoices associated with each customer. The results are grouped by customer ID and ordered by the number of invoices in descending order, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total invoice amounts grouped by billing country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display based on their total invoice amounts.\",\n        \"virtual_table\": \"SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_1": "SELECT COUNT(*) FROM invoices WHERE customer_id = (SELECT id FROM customers WHERE first_name = 'Luca' AND last_name = 'Mancini');",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total number of invoices issued per country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display in the result.\",\n        \"virtual_table\": \"SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total invoice amounts grouped by billing country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display based on their total invoice amounts.\",\n        \"virtual_table\": \"SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the average total amount of invoices grouped by billing country. The results are ordered in descending order based on the average total, and a placeholder is included to limit the number of results returned.\",\n        \"virtual_table\": \"SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_2": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = 'Luca' AND T1.last_name = 'Mancini';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total amount of invoices for a specific customer identified by their first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customers along with their first and last names, and the count of invoices associated with each customer. The results are grouped by customer ID and ordered by the number of invoices in descending order, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of invoices associated with customers from the 'customers' table, filtered by the customer's first and last name. The placeholders in the WHERE clause represent the first and last names of the customer.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = [PLACEHOLDER-TYPE:STRING] AND T1.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(*) AS order_count \nFROM invoices \nJOIN customers ON invoices.customer_id = customers.id \nWHERE customers.first_name = 'Luca' AND customers.last_name = 'Mancini';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.611",
        "c_low": "SELECT * FROM media_types;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT name FROM media_types;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre and media type. The placeholders in the WHERE clause represent the genre's name and the media type's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] AND T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre or media type. The placeholders in the WHERE clause represent the genre's name and the media type's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] OR T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_high": "SELECT * FROM media_types;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT * FROM media_types;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT * FROM media_types;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT * FROM media_types;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre and media type. The placeholders in the WHERE clause represent the genre's name and the media type's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] AND T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre or media type. The placeholders in the WHERE clause represent the genre's name and the media type's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] OR T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n"
    },
    {
        "sample_id": "train.623",
        "c_low": "SELECT albums.title FROM albums JOIN tracks ON albums.id = tracks.album_id WHERE tracks.name = 'Balls to the Wall';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the titles of albums from the 'albums' table that are associated with a specific artist. The placeholder in the WHERE clause represents the name of the artist.\",\n        \"virtual_table\": \"SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the titles of albums from the 'albums' table that are associated with a specific artist from the 'artists' table. The placeholder in the WHERE clause represents the artist's name.\",\n        \"virtual_table\": \"SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre. The placeholder in the WHERE clause represents the genre's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_mid": "SELECT albums.title \nFROM albums \nJOIN tracks ON albums.id = tracks.album_id \nWHERE tracks.name = 'Balls to the Wall';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT albums.title \nFROM albums \nJOIN tracks ON albums.id = tracks.album_id \nWHERE tracks.name = 'Balls to the Wall';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles of albums from the 'albums' table that have more than a specified number of tracks associated with them. The placeholder in the HAVING clause represents the minimum count of tracks required for an album to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_1": "SELECT albums.title \nFROM albums \nJOIN tracks ON albums.id = tracks.album_id \nWHERE tracks.name = 'Balls to the Wall';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT albums.title FROM albums JOIN tracks ON albums.id = tracks.album_id WHERE tracks.name = 'Balls to the Wall';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the titles of albums from the 'albums' table that are associated with a specific artist. The placeholder in the WHERE clause represents the name of the artist.\",\n        \"virtual_table\": \"SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the titles of albums from the 'albums' table that have more than a specified number of tracks associated with them. The placeholder in the HAVING clause represents the minimum count of tracks required for an album to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the titles of albums from the 'albums' table that are associated with a specific artist from the 'artists' table. The placeholder in the WHERE clause represents the artist's name.\",\n        \"virtual_table\": \"SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT albums.title \nFROM albums \nJOIN tracks ON albums.id = tracks.album_id \nWHERE tracks.name = 'Balls to the Wall';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.624",
        "c_low": "SELECT albums.title FROM albums JOIN tracks ON albums.id = tracks.album_id WHERE tracks.name = 'Ball to the Wall';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the titles of albums from the 'albums' table that are associated with a specific artist. The placeholder in the WHERE clause represents the name of the artist.\",\n        \"virtual_table\": \"SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the titles of albums from the 'albums' table that are associated with a specific artist from the 'artists' table. The placeholder in the WHERE clause represents the artist's name.\",\n        \"virtual_table\": \"SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT albums.title \nFROM albums \nJOIN tracks ON albums.id = tracks.album_id \nWHERE tracks.name = 'Ball to the Wall';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT albums.title \nFROM albums \nJOIN tracks ON albums.id = tracks.album_id \nWHERE tracks.name = 'Ball to the Wall';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles of albums from the 'albums' table that have more than a specified number of tracks associated with them. The placeholder in the HAVING clause represents the minimum count of tracks required for an album to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_1": "SELECT albums.title \nFROM albums \nJOIN tracks ON albums.id = tracks.album_id \nWHERE tracks.name = 'Ball to the Wall';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id WHERE T2.name = 'Ball to the Wall';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the titles of albums from the 'albums' table that are associated with a specific artist. The placeholder in the WHERE clause represents the name of the artist.\",\n        \"virtual_table\": \"SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the titles of albums from the 'albums' table that have more than a specified number of tracks associated with them. The placeholder in the HAVING clause represents the minimum count of tracks required for an album to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the titles of albums from the 'albums' table that are associated with a specific artist from the 'artists' table. The placeholder in the WHERE clause represents the artist's name.\",\n        \"virtual_table\": \"SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT albums.title \nFROM albums \nJOIN tracks ON albums.id = tracks.album_id \nWHERE tracks.name = 'Ball to the Wall';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.625",
        "c_low": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = 'Balls to the Wall';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that are included in a specific playlist. The query joins the 'tracks' table with the 'playlist_tracks' table to associate tracks with their respective playlists, and then filters the results based on the name of the playlist provided as a placeholder.\",\n        \"virtual_table\": \"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre. The placeholder in the WHERE clause represents the genre's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_mid": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id WHERE T1.title = 'Balls to the Wall';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre or media type. The placeholders in the WHERE clause represent the genre's name and the media type's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] OR T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_high": "SELECT T1.name FROM tracks AS T1 JOIN albums AS T2 ON T1.album_id = T2.id WHERE T2.title = 'Balls to the Wall'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks that are present in two different playlists. The placeholders in the WHERE clause represent the names of the playlists being compared.\",\n        \"virtual_table\": \"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of tracks that are present in one playlist but not in another playlist. The placeholders in the WHERE clause represent the names of the playlists being compared.\",\n        \"virtual_table\": \"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT tracks.name \nFROM tracks \nJOIN albums ON tracks.album_id = albums.id \nWHERE albums.title = 'Balls to the Wall';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id WHERE T1.title = 'Balls to the Wall';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre. The placeholder in the WHERE clause represents the genre's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "t_3+": "SELECT T1.name FROM tracks AS T1 JOIN albums AS T2 ON T1.album_id = T2.id WHERE T2.title = 'Balls to the Wall';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks that are present in two different playlists. The placeholders in the WHERE clause represent the names of the playlists being compared.\",\n        \"virtual_table\": \"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that are included in a specific playlist. The query joins the 'tracks' table with the 'playlist_tracks' table to associate tracks with their respective playlists, and then filters the results based on the name of the playlist provided as a placeholder.\",\n        \"virtual_table\": \"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of tracks that are present in one playlist but not in another playlist. The placeholders in the WHERE clause represent the names of the playlists being compared.\",\n        \"virtual_table\": \"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.626",
        "c_low": "SELECT T1.name FROM tracks AS T1 JOIN albums AS T2 ON T1.album_id = T2.id WHERE T2.title = 'Balls to the Wall';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that are included in a specific playlist. The query joins the 'tracks' table with the 'playlist_tracks' table to associate tracks with their respective playlists, and then filters the results based on the name of the playlist provided as a placeholder.\",\n        \"virtual_table\": \"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre. The placeholder in the WHERE clause represents the genre's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the titles of albums from the 'albums' table that are associated with a specific artist. The placeholder in the WHERE clause represents the name of the artist.\",\n        \"virtual_table\": \"SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_mid": "SELECT tracks.name \nFROM tracks \nJOIN albums ON tracks.album_id = albums.id \nWHERE albums.title = 'Balls to the Wall';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that have been purchased by a specific customer. The query joins multiple tables to filter the results based on the customer's first and last names, represented by placeholders in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = [PLACEHOLDER-TYPE:STRING] AND T4.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre or media type. The placeholders in the WHERE clause represent the genre's name and the media type's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] OR T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre and media type. The placeholders in the WHERE clause represent the genre's name and the media type's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] AND T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_high": "SELECT T1.name FROM tracks AS T1 JOIN albums AS T2 ON T1.album_id = T2.id WHERE T2.title = 'Balls to the Wall';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks that are present in two different playlists. The placeholders in the WHERE clause represent the names of the playlists being compared.\",\n        \"virtual_table\": \"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of tracks that are present in one playlist but not in another playlist. The placeholders in the WHERE clause represent the names of the playlists being compared.\",\n        \"virtual_table\": \"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles of albums from the 'albums' table that have more than a specified number of tracks associated with them. The placeholder in the HAVING clause represents the minimum count of tracks required for an album to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_1": "SELECT tracks.name \nFROM tracks \nJOIN albums ON tracks.album_id = albums.id \nWHERE albums.title = 'Balls to the Wall';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id WHERE T1.title = 'Balls to the Wall';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre. The placeholder in the WHERE clause represents the genre's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the titles of albums from the 'albums' table that are associated with a specific artist. The placeholder in the WHERE clause represents the name of the artist.\",\n        \"virtual_table\": \"SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles of albums from the 'albums' table that have more than a specified number of tracks associated with them. The placeholder in the HAVING clause represents the minimum count of tracks required for an album to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_3+": "SELECT T1.title FROM albums AS T1 WHERE T1.title = 'Balls to the Wall';\nSELECT T1.name FROM tracks AS T1 JOIN albums AS T2 ON T1.album_id = T2.id WHERE T2.title = 'Balls to the Wall';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks that are present in two different playlists. The placeholders in the WHERE clause represent the names of the playlists being compared.\",\n        \"virtual_table\": \"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that are included in a specific playlist. The query joins the 'tracks' table with the 'playlist_tracks' table to associate tracks with their respective playlists, and then filters the results based on the name of the playlist provided as a placeholder.\",\n        \"virtual_table\": \"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that have been purchased by a specific customer. The query joins multiple tables to filter the results based on the customer's first and last names, represented by placeholders in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = [PLACEHOLDER-TYPE:STRING] AND T4.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n"
    },
    {
        "sample_id": "train.630",
        "c_low": "SELECT T1.name \nFROM tracks AS T1 \nJOIN media_types AS T2 ON T1.media_type_id = T2.id \nJOIN genres AS T3 ON T1.genre_id = T3.id \nWHERE T3.name = 'Rock' AND T2.name = 'MPEG audio';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre. The placeholder in the WHERE clause represents the genre's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that are included in a specific playlist. The query joins the 'tracks' table with the 'playlist_tracks' table to associate tracks with their respective playlists, and then filters the results based on the name of the playlist provided as a placeholder.\",\n        \"virtual_table\": \"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_mid": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = 'Rock' AND T3.name = 'MPEG audio';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre and media type. The placeholders in the WHERE clause represent the genre's name and the media type's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] AND T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre or media type. The placeholders in the WHERE clause represent the genre's name and the media type's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] OR T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to specific genres. The genres are filtered based on the names provided in the WHERE clause, allowing for the selection of tracks from one or two specified genres.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] OR T1.name = [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT tracks.name \nFROM tracks \nJOIN media_types ON tracks.media_type_id = media_types.id \nJOIN genres ON tracks.genre_id = genres.id \nWHERE genres.name = 'Rock' AND media_types.name = 'MPEG audio';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks that are present in two different playlists. The placeholders in the WHERE clause represent the names of the playlists being compared.\",\n        \"virtual_table\": \"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of tracks that are present in one playlist but not in another playlist. The placeholders in the WHERE clause represent the names of the playlists being compared.\",\n        \"virtual_table\": \"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT tracks.name \nFROM tracks \nJOIN media_types ON tracks.media_type_id = media_types.id \nJOIN genres ON tracks.genre_id = genres.id \nWHERE genres.name = 'Rock' AND media_types.name = 'MPEG audio';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T2.media_type_id = T3.id WHERE T1.name = 'Rock' AND T3.name = 'MPEG audio';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre. The placeholder in the WHERE clause represents the genre's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to specific genres. The genres are filtered based on the names provided in the WHERE clause, allowing for the selection of tracks from one or two specified genres.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] OR T1.name = [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = 'Rock' AND T3.name = 'MPEG audio';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre and media type. The placeholders in the WHERE clause represent the genre's name and the media type's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] AND T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre or media type. The placeholders in the WHERE clause represent the genre's name and the media type's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] OR T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of tracks that are present in two different playlists. The placeholders in the WHERE clause represent the names of the playlists being compared.\",\n        \"virtual_table\": \"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.632",
        "c_low": "SELECT T1.name FROM tracks AS T1 JOIN genres AS T2 ON T1.genre_id = T2.id JOIN media_types AS T3 ON T1.media_type_id = T3.id WHERE T2.name = 'Rock' AND T3.name = 'MPEG';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre. The placeholder in the WHERE clause represents the genre's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that are included in a specific playlist. The query joins the 'tracks' table with the 'playlist_tracks' table to associate tracks with their respective playlists, and then filters the results based on the name of the playlist provided as a placeholder.\",\n        \"virtual_table\": \"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_mid": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = 'Rock' AND T3.name = 'MPEG';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre and media type. The placeholders in the WHERE clause represent the genre's name and the media type's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] AND T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre or media type. The placeholders in the WHERE clause represent the genre's name and the media type's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] OR T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to specific genres. The genres are filtered based on the names provided in the WHERE clause, allowing for the selection of tracks from one or two specified genres.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] OR T1.name = [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT T1.name \nFROM tracks AS T1 \nJOIN media_types AS T2 ON T1.media_type_id = T2.id \nJOIN genres AS T3 ON T1.genre_id = T3.id \nWHERE T3.name = 'Rock' AND T2.name = 'MPEG';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks that are present in two different playlists. The placeholders in the WHERE clause represent the names of the playlists being compared.\",\n        \"virtual_table\": \"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a summary of the number of tracks associated with each genre from the 'genres' table. It counts the tracks that belong to each genre and orders the results in descending order based on the count. The placeholder in the LIMIT clause allows the user to specify the maximum number of genres to return.\",\n        \"virtual_table\": \"SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_1": "SELECT tracks.name \nFROM tracks \nJOIN genres ON tracks.genre_id = genres.id \nJOIN media_types ON tracks.media_type_id = media_types.id \nWHERE genres.name = 'Rock' AND media_types.name = 'MPEG';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T2.media_type_id = T3.id WHERE T1.name = 'Rock' AND T3.name = 'MPEG';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre. The placeholder in the WHERE clause represents the genre's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to specific genres. The genres are filtered based on the names provided in the WHERE clause, allowing for the selection of tracks from one or two specified genres.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] OR T1.name = [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of tracks grouped by their respective genres from the 'genres' and 'tracks' tables. The placeholder in the SELECT clause represents the count of tracks, while the genre name is displayed alongside it.\",\n        \"virtual_table\": \"SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name;\"\n    }\n}\n",
        "t_3+": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = 'Rock' AND T3.name = 'MPEG';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre and media type. The placeholders in the WHERE clause represent the genre's name and the media type's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] AND T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre or media type. The placeholders in the WHERE clause represent the genre's name and the media type's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] OR T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that are included in a specific playlist. The query joins the 'tracks' table with the 'playlist_tracks' table to associate tracks with their respective playlists, and then filters the results based on the name of the playlist provided as a placeholder.\",\n        \"virtual_table\": \"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n"
    },
    {
        "sample_id": "train.640",
        "c_low": "SELECT T3.name \nFROM customers AS C \nJOIN invoices AS I ON C.id = I.customer_id \nJOIN invoice_lines AS IL ON I.id = IL.invoice_id \nJOIN tracks AS T3 ON IL.track_id = T3.id \nWHERE C.first_name = 'Dean' AND C.last_name = 'Peeters';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre. The placeholder in the WHERE clause represents the genre's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_mid": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = 'Dean' AND T4.last_name = 'Peeters';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that have been purchased by a specific customer. The query joins multiple tables to filter the results based on the customer's first and last names, represented by placeholders in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = [PLACEHOLDER-TYPE:STRING] AND T4.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre or media type. The placeholders in the WHERE clause represent the genre's name and the media type's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] OR T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre and media type. The placeholders in the WHERE clause represent the genre's name and the media type's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] AND T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_high": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T2.invoice_id = T3.id JOIN customers AS T4 ON T3.customer_id = T4.id WHERE T4.first_name = 'Dean' AND T4.last_name = 'Peeters';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks that are present in two different playlists. The placeholders in the WHERE clause represent the names of the playlists being compared.\",\n        \"virtual_table\": \"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the titles of albums from the 'albums' table that have more than a specified number of tracks associated with them. The placeholder in the HAVING clause represents the minimum count of tracks required for an album to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_1": "SELECT tracks.name \nFROM tracks \nJOIN invoice_lines ON tracks.id = invoice_lines.track_id \nJOIN invoices ON invoice_lines.invoice_id = invoices.id \nJOIN customers ON invoices.customer_id = customers.id \nWHERE customers.first_name = 'Dean' AND customers.last_name = 'Peeters';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T3.name FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id JOIN invoice_lines AS T4 ON T2.id = T4.invoice_id JOIN tracks AS T3 ON T4.track_id = T3.id WHERE T1.first_name = 'Dean' AND T1.last_name = 'Peeters';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre. The placeholder in the WHERE clause represents the genre's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to specific genres. The genres are filtered based on the names provided in the WHERE clause, allowing for the selection of tracks from one or two specified genres.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] OR T1.name = [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles of albums from the 'albums' table that have more than a specified number of tracks associated with them. The placeholder in the HAVING clause represents the minimum count of tracks required for an album to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_3+": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = 'Dean' AND T4.last_name = 'Peeters';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that have been purchased by a specific customer. The query joins multiple tables to filter the results based on the customer's first and last names, represented by placeholders in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = [PLACEHOLDER-TYPE:STRING] AND T4.last_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre or media type. The placeholders in the WHERE clause represent the genre's name and the media type's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] OR T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre and media type. The placeholders in the WHERE clause represent the genre's name and the media type's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = [PLACEHOLDER-TYPE:STRING] AND T3.name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n"
    },
    {
        "sample_id": "train.656",
        "c_low": "SELECT Age, COUNT(*) as Count FROM editor GROUP BY Age ORDER BY Count DESC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Age, COUNT(*) as AgeCount FROM editor GROUP BY Age ORDER BY AgeCount DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of editors from the 'editor' table who are either of a specific age or another specified age. The placeholders in the WHERE clause represent the ages to filter the editors.\",\n        \"virtual_table\": \"SELECT Name FROM editor WHERE Age  =  [PLACEHOLDER-TYPE:NUMBER] OR Age  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of editors who are part of a committee for journal entries that have sales figures exceeding a specified amount. The placeholders in the WHERE clause represent the sales threshold.\",\n        \"virtual_table\": \"SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID WHERE T3.Sales  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT Age, COUNT(*) as AgeCount FROM editor GROUP BY Age ORDER BY AgeCount DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of editors from the 'editor' table who have contributed to the journal committee at least a specified number of times. The placeholder in the HAVING clause represents the minimum count of contributions required.\",\n        \"virtual_table\": \"SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of editors from the 'editor' table who are not involved in any journal committee. The placeholder in the subquery represents the editor IDs that are linked to the journal committee.\",\n        \"virtual_table\": \"SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)\"\n    }\n}\n",
        "t_1": "SELECT Age, COUNT(*) as AgeCount FROM editor GROUP BY Age ORDER BY AgeCount DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of editors from the 'editor' table who are either of a specific age or another specified age. The placeholders in the WHERE clause represent the ages to filter the editors.\",\n        \"virtual_table\": \"SELECT Name FROM editor WHERE Age  =  [PLACEHOLDER-TYPE:NUMBER] OR Age  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Age, COUNT(*) as AgeCount FROM editor GROUP BY Age ORDER BY AgeCount DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of editors from the 'editor' table who have contributed to the journal committee at least a specified number of times. The placeholder in the HAVING clause represents the minimum count of contributions required.\",\n        \"virtual_table\": \"SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of editors from the 'editor' table who are not involved in any journal committee. The placeholder in the subquery represents the editor IDs that are linked to the journal committee.\",\n        \"virtual_table\": \"SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)\"\n    }\n}\n",
        "t_3+": "SELECT Age, COUNT(Age) AS AgeCount FROM editor GROUP BY Age ORDER BY AgeCount DESC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of editors who are part of a committee for journal entries that have sales figures exceeding a specified amount. The placeholders in the WHERE clause represent the sales threshold.\",\n        \"virtual_table\": \"SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID WHERE T3.Sales  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.662",
        "c_low": "SELECT editor.Editor_ID, editor.Name, COUNT(journal_committee.Journal_ID) AS Committee_Count\nFROM editor\nLEFT JOIN journal_committee ON editor.Editor_ID = journal_committee.Editor_ID\nGROUP BY editor.Editor_ID, editor.Name;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT e.Editor_ID, e.Name, COUNT(jc.Journal_ID) AS Committee_Count\nFROM editor AS e\nLEFT JOIN journal_committee AS jc ON e.Editor_ID = jc.Editor_ID\nGROUP BY e.Editor_ID, e.Name;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of editors who are part of a committee for journal entries that have sales figures exceeding a specified amount. The placeholders in the WHERE clause represent the sales threshold.\",\n        \"virtual_table\": \"SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID WHERE T3.Sales  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of editors from the 'editor' table who are either of a specific age or another specified age. The placeholders in the WHERE clause represent the ages to filter the editors.\",\n        \"virtual_table\": \"SELECT Name FROM editor WHERE Age  =  [PLACEHOLDER-TYPE:NUMBER] OR Age  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT e.Editor_ID, e.Name, COUNT(jc.Journal_ID) AS Committee_Count\nFROM editor e\nLEFT JOIN journal_committee jc ON e.Editor_ID = jc.Editor_ID\nGROUP BY e.Editor_ID, e.Name;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of editors from the 'editor' table who are not involved in any journal committee. The placeholder in the subquery represents the editor IDs that are linked to the journal committee.\",\n        \"virtual_table\": \"SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of editors from the 'editor' table who have contributed to the journal committee at least a specified number of times. The placeholder in the HAVING clause represents the minimum count of contributions required.\",\n        \"virtual_table\": \"SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT editor.Editor_ID, editor.Name, COUNT(journal_committee.Journal_ID) AS Committee_Count\nFROM editor\nLEFT JOIN journal_committee ON editor.Editor_ID = journal_committee.Editor_ID\nGROUP BY editor.Editor_ID, editor.Name;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of editors from the 'editor' table who are either of a specific age or another specified age. The placeholders in the WHERE clause represent the ages to filter the editors.\",\n        \"virtual_table\": \"SELECT Name FROM editor WHERE Age  =  [PLACEHOLDER-TYPE:NUMBER] OR Age  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT e.Editor_ID, e.Name, COUNT(jc.Journal_ID) AS Committee_Count\nFROM editor e\nLEFT JOIN journal_committee jc ON e.Editor_ID = jc.Editor_ID\nGROUP BY e.Editor_ID, e.Name;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of editors from the 'editor' table who are not involved in any journal committee. The placeholder in the subquery represents the editor IDs that are linked to the journal committee.\",\n        \"virtual_table\": \"SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of editors from the 'editor' table who have contributed to the journal committee at least a specified number of times. The placeholder in the HAVING clause represents the minimum count of contributions required.\",\n        \"virtual_table\": \"SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT editor.Editor_ID, editor.Name, COUNT(journal_committee.Journal_ID) AS Committee_Count \nFROM editor \nLEFT JOIN journal_committee ON editor.Editor_ID = journal_committee.Editor_ID \nGROUP BY editor.Editor_ID, editor.Name;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of editors who are part of a committee for journal entries that have sales figures exceeding a specified amount. The placeholders in the WHERE clause represent the sales threshold.\",\n        \"virtual_table\": \"SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID WHERE T3.Sales  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.665",
        "c_low": "SELECT Date, Theme, Sales \nFROM journal \nWHERE Journal_ID NOT IN (\n    SELECT Journal_ID \n    FROM journal_committee \n    WHERE Editor_ID IN (\n        SELECT Editor_ID \n        FROM editor\n    )\n);",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Date, Theme, Sales FROM journal WHERE Journal_ID NOT IN (SELECT T1.Journal_ID FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of editors who are part of a committee for journal entries that have sales figures exceeding a specified amount. The placeholders in the WHERE clause represent the sales threshold.\",\n        \"virtual_table\": \"SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID WHERE T3.Sales  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT j.Date, j.Theme, j.Sales \nFROM journal j \nWHERE j.Journal_ID NOT IN (SELECT jc.Journal_ID FROM journal_committee jc)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of editors from the 'editor' table who are not involved in any journal committee. The placeholder in the subquery represents the editor IDs that are linked to the journal committee.\",\n        \"virtual_table\": \"SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of editors from the 'editor' table who have contributed to the journal committee at least a specified number of times. The placeholder in the HAVING clause represents the minimum count of contributions required.\",\n        \"virtual_table\": \"SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Date, Theme, Sales \nFROM journal \nWHERE Journal_ID NOT IN (\n    SELECT Journal_ID \n    FROM journal_committee \n    WHERE Editor_ID IN (\n        SELECT Editor_ID \n        FROM editor\n    )\n);",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT j.Date, j.Theme, j.Sales \nFROM journal j \nWHERE j.Journal_ID NOT IN (SELECT jc.Journal_ID FROM journal_committee jc)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of editors from the 'editor' table who are not involved in any journal committee. The placeholder in the subquery represents the editor IDs that are linked to the journal committee.\",\n        \"virtual_table\": \"SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of editors from the 'editor' table who have contributed to the journal committee at least a specified number of times. The placeholder in the HAVING clause represents the minimum count of contributions required.\",\n        \"virtual_table\": \"SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Date, Theme, Sales FROM journal WHERE Journal_ID NOT IN (SELECT T1.Journal_ID FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of editors who are part of a committee for journal entries that have sales figures exceeding a specified amount. The placeholders in the WHERE clause represent the sales threshold.\",\n        \"virtual_table\": \"SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID WHERE T3.Sales  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.677",
        "c_low": "SELECT customer_id, COUNT(account_id) AS number_of_accounts \nFROM Accounts \nGROUP BY customer_id;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of accounts associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT customer_id, count(*) FROM Accounts GROUP BY customer_id",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of accounts associated with each customer from the 'Accounts' table. The placeholder in the SELECT clause represents the customer identifier, and the count function aggregates the total number of accounts per customer.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id\"\n    }\n}\n",
        "c_high": "SELECT customer_id, count(*) AS number_of_accounts FROM Accounts GROUP BY customer_id",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer first and last names along with their associated customer IDs from the 'Accounts' and 'Customers' tables. The data is grouped by customer ID and ordered by the count of accounts associated with each customer in ascending order, with a limit on the number of results specified by a placeholder.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of accounts associated with each customer from the 'Accounts' table. The placeholder in the LIMIT clause represents the maximum number of customers to display based on their account count.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT customer_id, count(*) AS number_of_accounts FROM Accounts GROUP BY customer_id",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of accounts associated with each customer from the 'Accounts' table. The placeholder in the SELECT clause represents the customer identifier, and the count function aggregates the total number of accounts per customer.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of accounts associated with each customer from the 'Accounts' table. The placeholder in the LIMIT clause represents the maximum number of customers to display based on their account count.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T1.customer_id, COUNT(T1.account_id) AS number_of_accounts \nFROM Accounts AS T1 \nGROUP BY T1.customer_id;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer first and last names along with their associated customer IDs from the 'Accounts' and 'Customers' tables. The data is grouped by customer ID and ordered by the count of accounts associated with each customer in ascending order, with a limit on the number of results specified by a placeholder.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of accounts associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT c.customer_id, COUNT(a.account_id) AS number_of_accounts\nFROM Customers c\nLEFT JOIN Accounts a ON c.customer_id = a.customer_id\nGROUP BY c.customer_id;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.682",
        "c_low": "SELECT T1.customer_id, T1.customer_first_name, T1.customer_last_name \nFROM Customers AS T1 \nJOIN Accounts AS T2 ON T1.customer_id = T2.customer_id \nGROUP BY T1.customer_id \nORDER BY COUNT(T2.account_id) ASC \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of accounts associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of first and last names of customers from the 'Customers' table who have associated accounts in the 'Accounts' table. The join condition links the customer to their respective account using the customer ID.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT C.customer_first_name, C.customer_last_name, A.customer_id \nFROM Customers AS C \nJOIN (SELECT customer_id, COUNT(*) AS account_count \n      FROM Accounts \n      GROUP BY customer_id) AS A \nON C.customer_id = A.customer_id \nORDER BY A.account_count ASC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customers who do not have any associated accounts. It selects the first and last names of customers from the 'Customers' table and excludes those who have accounts by performing an EXCEPT operation with a subquery that joins the 'Customers' table with the 'Accounts' table based on the customer ID.\",\n        \"virtual_table\": \"SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of accounts associated with each customer from the 'Accounts' table. The placeholder in the SELECT clause represents the customer identifier, and the count function aggregates the total number of accounts per customer.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id\"\n    }\n}\n",
        "c_high": "SELECT T2.customer_first_name, T2.customer_last_name, T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer first and last names along with their associated customer IDs from the 'Accounts' and 'Customers' tables. The data is grouped by customer ID and ordered by the count of accounts associated with each customer in ascending order, with a limit on the number of results specified by a placeholder.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of accounts associated with each customer from the 'Accounts' table. The placeholder in the LIMIT clause represents the maximum number of customers to display based on their account count.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of customer IDs along with their first and last names from the 'Customers' table, specifically for customers who have a certain number of cards associated with them. The placeholder in the HAVING clause represents the minimum count of cards a customer must have to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT customer_id, customer_first_name, customer_last_name \nFROM Customers \nWHERE customer_id = (\n    SELECT customer_id \n    FROM Accounts \n    GROUP BY customer_id \n    ORDER BY COUNT(*) ASC \n    LIMIT 1\n);",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of accounts associated with each customer from the 'Accounts' table. The placeholder in the LIMIT clause represents the maximum number of customers to display based on their account count.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of accounts associated with each customer from the 'Accounts' table. The placeholder in the SELECT clause represents the customer identifier, and the count function aggregates the total number of accounts per customer.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id\"\n    }\n}\n",
        "t_2": "SELECT T2.customer_first_name, T2.customer_last_name, T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer first and last names along with their associated customer IDs from the 'Accounts' and 'Customers' tables. The data is grouped by customer ID and ordered by the count of accounts associated with each customer in ascending order, with a limit on the number of results specified by a placeholder.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customers who do not have any associated accounts. It selects the first and last names of customers from the 'Customers' table and excludes those who have accounts by performing an EXCEPT operation with a subquery that joins the 'Customers' table with the 'Accounts' table based on the customer ID.\",\n        \"virtual_table\": \"SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of accounts associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT c.customer_id, c.customer_first_name || ' ' || c.customer_last_name AS full_name\nFROM Customers c\nJOIN Accounts a ON c.customer_id = a.customer_id\nGROUP BY c.customer_id\nORDER BY COUNT(a.account_id) ASC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.686",
        "c_low": "SELECT customer_first_name, customer_last_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of accounts associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT customer_first_name, customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customers who do not have any associated accounts. It selects the first and last names of customers from the 'Customers' table and excludes those who have accounts by performing an EXCEPT operation with a subquery that joins the 'Customers' table with the 'Accounts' table based on the customer ID.\",\n        \"virtual_table\": \"SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\"\n    }\n}\n",
        "c_high": "SELECT customer_first_name, customer_last_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts);",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer first and last names along with their associated customer IDs from the 'Accounts' and 'Customers' tables. The data is grouped by customer ID and ordered by the count of accounts associated with each customer in ascending order, with a limit on the number of results specified by a placeholder.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT customer_first_name || ' ' || customer_last_name AS full_name\nFROM Customers\nWHERE customer_id NOT IN (\n    SELECT customer_id\n    FROM Accounts\n);",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT customer_first_name, customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customers who do not have any associated accounts. It selects the first and last names of customers from the 'Customers' table and excludes those who have accounts by performing an EXCEPT operation with a subquery that joins the 'Customers' table with the 'Accounts' table based on the customer ID.\",\n        \"virtual_table\": \"SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of accounts associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of customer first and last names along with their associated customer IDs from the 'Accounts' and 'Customers' tables. The data is grouped by customer ID and ordered by the count of accounts associated with each customer in ascending order, with a limit on the number of results specified by a placeholder.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT customer_first_name || ' ' || customer_last_name AS full_name\nFROM Customers\nWHERE customer_id NOT IN (\n    SELECT customer_id\n    FROM Accounts\n);",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.688",
        "c_low": "SELECT DISTINCT T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of accounts associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of first and last names of customers from the 'Customers' table who have associated accounts in the 'Accounts' table. The join condition links the customer to their respective account using the customer ID.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\"\n    }\n}\n",
        "c_mid": "SELECT C.customer_first_name, C.customer_last_name \nFROM Customers C \nJOIN Accounts A ON C.customer_id = A.customer_id",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customers who do not have any associated accounts. It selects the first and last names of customers from the 'Customers' table and excludes those who have accounts by performing an EXCEPT operation with a subquery that joins the 'Customers' table with the 'Accounts' table based on the customer ID.\",\n        \"virtual_table\": \"SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of accounts associated with each customer from the 'Accounts' table. The placeholder in the SELECT clause represents the customer identifier, and the count function aggregates the total number of accounts per customer.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id\"\n    }\n}\n",
        "c_high": "SELECT T2.customer_first_name, T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer first and last names along with their associated customer IDs from the 'Accounts' and 'Customers' tables. The data is grouped by customer ID and ordered by the count of accounts associated with each customer in ascending order, with a limit on the number of results specified by a placeholder.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the first and last names, along with the phone number of customers associated with a specific account name from the 'Accounts' table. The placeholder in the WHERE clause represents the name of the account.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the number of accounts associated with each customer from the 'Accounts' table. The placeholder in the LIMIT clause represents the maximum number of customers to display based on their account count.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT c.customer_first_name, c.customer_last_name \nFROM Customers c \nJOIN Accounts a ON c.customer_id = a.customer_id;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of accounts associated with each customer from the 'Accounts' table. The placeholder in the LIMIT clause represents the maximum number of customers to display based on their account count.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of accounts associated with each customer from the 'Accounts' table. The placeholder in the SELECT clause represents the customer identifier, and the count function aggregates the total number of accounts per customer.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id\"\n    }\n}\n",
        "t_2": "SELECT T2.customer_first_name, T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer first and last names along with their associated customer IDs from the 'Accounts' and 'Customers' tables. The data is grouped by customer ID and ordered by the count of accounts associated with each customer in ascending order, with a limit on the number of results specified by a placeholder.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of accounts associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the first and last names, along with the phone number of customers associated with a specific account name from the 'Accounts' table. The placeholder in the WHERE clause represents the name of the account.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Customers.customer_first_name || ' ' || Customers.customer_last_name AS full_name\nFROM Customers\nJOIN Accounts ON Customers.customer_id = Accounts.customer_id;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.694",
        "c_low": "SELECT customer_id, customer_first_name || ' ' || customer_last_name AS full_name, customer_phone FROM Customers;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of accounts associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT customer_id, customer_first_name || ' ' || customer_last_name AS full_name, customer_phone FROM Customers;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT customer_id, customer_first_name || ' ' || customer_last_name AS full_name, customer_phone FROM Customers",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer first and last names along with their associated customer IDs from the 'Accounts' and 'Customers' tables. The data is grouped by customer ID and ordered by the count of accounts associated with each customer in ascending order, with a limit on the number of results specified by a placeholder.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the first and last names, along with the phone number of customers associated with a specific account name from the 'Accounts' table. The placeholder in the WHERE clause represents the name of the account.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the first name, last name, and phone number of customers associated with a specific card number from the 'Customers' and 'Customers_Cards' tables. The placeholder in the WHERE clause represents the card number being queried.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT customer_id, customer_first_name || ' ' || customer_last_name AS full_name, customer_phone FROM Customers;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT customer_id, customer_first_name || ' ' || customer_last_name AS full_name, customer_phone FROM Customers",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer first and last names along with their associated customer IDs from the 'Accounts' and 'Customers' tables. The data is grouped by customer ID and ordered by the count of accounts associated with each customer in ascending order, with a limit on the number of results specified by a placeholder.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the first and last names, along with the phone number of customers associated with a specific account name from the 'Accounts' table. The placeholder in the WHERE clause represents the name of the account.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the first name, last name, and phone number of customers associated with a specific card number from the 'Customers' and 'Customers_Cards' tables. The placeholder in the WHERE clause represents the card number being queried.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT customer_id, customer_first_name || ' ' || customer_last_name AS full_name, customer_phone FROM Customers;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.704",
        "c_low": "SELECT C.customer_first_name || ' ' || C.customer_last_name AS full_name, C.customer_phone \nFROM Customers AS C \nJOIN Customers_Cards AS CC ON C.customer_id = CC.customer_id \nWHERE CC.card_number = '4560596484842';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of accounts associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT C.customer_first_name || ' ' || C.customer_last_name AS full_name, C.customer_phone \nFROM Customers AS C \nJOIN Customers_Cards AS CC ON C.customer_id = CC.customer_id \nWHERE CC.card_number = '4560596484842';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with a specific customer identified by their first and last names, as well as a specific card type. The placeholders in the WHERE clause represent the customer's first name, last name, and the card type code.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING] AND T1.card_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT T2.customer_first_name, T2.customer_last_name, T2.customer_phone FROM Customers_Cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.card_number = '4560596484842'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the first name, last name, and phone number of customers associated with a specific card number from the 'Customers' and 'Customers_Cards' tables. The placeholder in the WHERE clause represents the card number being queried.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the first and last names, along with the phone number of customers associated with a specific account name from the 'Accounts' table. The placeholder in the WHERE clause represents the name of the account.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of customer first and last names along with their associated customer IDs from the 'Accounts' and 'Customers' tables. The data is grouped by customer ID and ordered by the count of accounts associated with each customer in ascending order, with a limit on the number of results specified by a placeholder.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Customers.customer_first_name || ' ' || Customers.customer_last_name AS full_name, Customers.customer_phone\nFROM Customers\nJOIN Customers_Cards ON Customers.customer_id = Customers_Cards.customer_id\nWHERE Customers_Cards.card_number = '4560596484842';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T2.customer_first_name, T2.customer_last_name, T2.customer_phone FROM Customers_Cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.card_number = '4560596484842'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the first name, last name, and phone number of customers associated with a specific card number from the 'Customers' and 'Customers_Cards' tables. The placeholder in the WHERE clause represents the card number being queried.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the first and last names, along with the phone number of customers associated with a specific account name from the 'Accounts' table. The placeholder in the WHERE clause represents the name of the account.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with a specific customer identified by their first and last names, as well as a specific card type. The placeholders in the WHERE clause represent the customer's first name, last name, and the card type code.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING] AND T1.card_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Customers.customer_first_name || ' ' || Customers.customer_last_name AS full_name, Customers.customer_phone\nFROM Customers\nJOIN Customers_Cards ON Customers.customer_id = Customers_Cards.customer_id\nWHERE Customers_Cards.card_number = '4560596484842';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.707",
        "c_low": "SELECT count(*) FROM Customers_Cards WHERE card_type_code = 'debit'",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of accounts associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT COUNT(*) FROM Customers_Cards WHERE card_type_code = 'debit';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of financial transactions grouped by card type from the 'Financial_Transactions' and 'Customers_Cards' tables. The placeholder in the SELECT statement represents the card type code, while the count reflects the number of transactions associated with each card type.\",\n        \"virtual_table\": \"SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with a specific customer identified by their first and last names, as well as a specific card type. The placeholders in the WHERE clause represent the customer's first name, last name, and the card type code.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING] AND T1.card_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the number of cards associated with each customer from the 'Customers_Cards' table. The placeholder in the SELECT clause represents the customer identifier, and the count function aggregates the total number of cards per customer.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id\"\n    }\n}\n",
        "c_high": "SELECT COUNT(*) FROM Customers_Cards WHERE card_type_code = 'debit';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of cards held by each customer from the 'Customers_Cards' table. The placeholder in the LIMIT clause allows the user to specify the maximum number of customers to display based on the count of their cards.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the different types of cards issued to customers, specifically focusing on the card type codes. It filters the results to only include those card types that have been issued a number of times equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of card types that should be considered.\",\n        \"virtual_table\": \"SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of customer IDs along with their first and last names from the 'Customers' table, specifically for customers who have a certain number of cards associated with them. The placeholder in the HAVING clause represents the minimum count of cards a customer must have to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT COUNT(*) FROM Customers_Cards WHERE card_type_code = 'debit';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of cards held by each customer from the 'Customers_Cards' table. The placeholder in the LIMIT clause allows the user to specify the maximum number of customers to display based on the count of their cards.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of cards associated with each customer from the 'Customers_Cards' table. The placeholder in the SELECT clause represents the customer identifier, and the count function aggregates the total number of cards per customer.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of different card types from the 'Customers_Cards' table. The placeholder in the SELECT clause represents the card type code, while the count function aggregates the number of occurrences for each card type.\",\n        \"virtual_table\": \"SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code\"\n    }\n}\n",
        "t_2": "SELECT count(*) FROM Customers_Cards WHERE card_type_code = 'debit'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of financial transactions grouped by card type from the 'Financial_Transactions' and 'Customers_Cards' tables. The placeholder in the SELECT statement represents the card type code, while the count reflects the number of transactions associated with each card type.\",\n        \"virtual_table\": \"SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with a specific customer identified by their first and last names, as well as a specific card type. The placeholders in the WHERE clause represent the customer's first name, last name, and the card type code.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING] AND T1.card_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(*) AS debit_card_count FROM Customers_Cards WHERE card_type_code = 'debit';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.716",
        "c_low": "SELECT C.customer_id, C.customer_first_name || ' ' || C.customer_last_name AS full_name\nFROM Customers C\nJOIN Customers_Cards CC ON C.customer_id = CC.customer_id\nGROUP BY C.customer_id\nHAVING COUNT(CC.card_id) >= 2;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of accounts associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT C.customer_id, C.customer_first_name || ' ' || C.customer_last_name AS full_name\nFROM Customers AS C\nJOIN Customers_Cards AS CC ON C.customer_id = CC.customer_id\nGROUP BY C.customer_id\nHAVING COUNT(CC.card_id) >= 2;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with a specific customer identified by their first and last names, as well as a specific card type. The placeholders in the WHERE clause represent the customer's first name, last name, and the card type code.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING] AND T1.card_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of cards associated with each customer from the 'Customers_Cards' table. The placeholder in the SELECT clause represents the customer identifier, and the count function aggregates the total number of cards per customer.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id\"\n    }\n}\n",
        "c_high": "SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name \nFROM Customers_Cards AS T1 \nJOIN Customers AS T2 ON T1.customer_id = T2.customer_id \nGROUP BY T1.customer_id \nHAVING COUNT(*) >= 2;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer IDs along with their first and last names from the 'Customers' table, specifically for customers who have a certain number of cards associated with them. The placeholder in the HAVING clause represents the minimum count of cards a customer must have to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer first and last names along with their associated customer IDs from the 'Accounts' and 'Customers' tables. The data is grouped by customer ID and ordered by the count of accounts associated with each customer in ascending order, with a limit on the number of results specified by a placeholder.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the first name, last name, and phone number of customers associated with a specific card number from the 'Customers' and 'Customers_Cards' tables. The placeholder in the WHERE clause represents the card number being queried.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT c.customer_id, c.customer_first_name || ' ' || c.customer_last_name AS full_name\nFROM Customers c\nJOIN (\n    SELECT customer_id, COUNT(*) AS card_count\n    FROM Customers_Cards\n    GROUP BY customer_id\n    HAVING COUNT(*) >= 2\n) cc ON c.customer_id = cc.customer_id;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of cards held by each customer from the 'Customers_Cards' table. The placeholder in the LIMIT clause allows the user to specify the maximum number of customers to display based on the count of their cards.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of cards associated with each customer from the 'Customers_Cards' table. The placeholder in the SELECT clause represents the customer identifier, and the count function aggregates the total number of cards per customer.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id\"\n    }\n}\n",
        "t_2": "SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name FROM Customers_Cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*) >= 2",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer IDs along with their first and last names from the 'Customers' table, specifically for customers who have a certain number of cards associated with them. The placeholder in the HAVING clause represents the minimum count of cards a customer must have to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with a specific customer identified by their first and last names, as well as a specific card type. The placeholders in the WHERE clause represent the customer's first name, last name, and the card type code.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING] AND T1.card_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT c.customer_id, c.customer_first_name || ' ' || c.customer_last_name AS full_name\nFROM Customers c\nJOIN Customers_Cards cc ON c.customer_id = cc.customer_id\nGROUP BY c.customer_id\nHAVING COUNT(cc.card_id) >= 2;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.717",
        "c_low": "SELECT T2.customer_id, T2.customer_first_name, T2.customer_last_name \nFROM Customers AS T2 \nJOIN Accounts AS T1 ON T1.customer_id = T2.customer_id \nGROUP BY T2.customer_id, T2.customer_first_name, T2.customer_last_name \nORDER BY COUNT(T1.account_id) ASC \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of accounts associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of first and last names of customers from the 'Customers' table who have associated accounts in the 'Accounts' table. The join condition links the customer to their respective account using the customer ID.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT C.customer_id, C.customer_first_name, C.customer_last_name \nFROM Customers C \nJOIN Accounts A ON C.customer_id = A.customer_id \nGROUP BY C.customer_id, C.customer_first_name, C.customer_last_name \nORDER BY COUNT(A.account_id) ASC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customers who do not have any associated accounts. It selects the first and last names of customers from the 'Customers' table and excludes those who have accounts by performing an EXCEPT operation with a subquery that joins the 'Customers' table with the 'Accounts' table based on the customer ID.\",\n        \"virtual_table\": \"SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with a specific customer identified by their first and last names, as well as a specific card type. The placeholders in the WHERE clause represent the customer's first name, last name, and the card type code.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING] AND T1.card_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT T2.customer_id, T2.customer_first_name, T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) ASC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer first and last names along with their associated customer IDs from the 'Accounts' and 'Customers' tables. The data is grouped by customer ID and ordered by the count of accounts associated with each customer in ascending order, with a limit on the number of results specified by a placeholder.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the first and last names, along with the phone number of customers associated with a specific account name from the 'Accounts' table. The placeholder in the WHERE clause represents the name of the account.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of customer IDs along with their first and last names from the 'Customers' table, specifically for customers who have a certain number of cards associated with them. The placeholder in the HAVING clause represents the minimum count of cards a customer must have to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT c.customer_id, c.customer_first_name, c.customer_last_name \nFROM Customers c \nJOIN (SELECT customer_id, COUNT(*) as account_count \n      FROM Accounts \n      GROUP BY customer_id \n      ORDER BY account_count ASC \n      LIMIT 1) a \nON c.customer_id = a.customer_id;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of accounts associated with each customer from the 'Accounts' table. The placeholder in the LIMIT clause represents the maximum number of customers to display based on their account count.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.customer_id, T2.customer_first_name, T2.customer_last_name \nFROM Accounts AS T1 \nJOIN Customers AS T2 ON T1.customer_id = T2.customer_id \nGROUP BY T1.customer_id \nORDER BY COUNT(*) ASC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer first and last names along with their associated customer IDs from the 'Accounts' and 'Customers' tables. The data is grouped by customer ID and ordered by the count of accounts associated with each customer in ascending order, with a limit on the number of results specified by a placeholder.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of accounts associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of customers who do not have any associated accounts. It selects the first and last names of customers from the 'Customers' table and excludes those who have accounts by performing an EXCEPT operation with a subquery that joins the 'Customers' table with the 'Accounts' table based on the customer ID.\",\n        \"virtual_table\": \"SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\"\n    }\n}\n",
        "t_3+": "SELECT c.customer_id, c.customer_first_name, c.customer_last_name \nFROM Customers c \nJOIN Accounts a ON c.customer_id = a.customer_id \nGROUP BY c.customer_id, c.customer_first_name, c.customer_last_name \nORDER BY COUNT(a.account_id) ASC \nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.718",
        "c_low": "SELECT T2.customer_id, T2.customer_first_name || ' ' || T2.customer_last_name AS full_name\nFROM Customers AS T2\nJOIN Accounts AS T1 ON T2.customer_id = T1.customer_id\nGROUP BY T2.customer_id\nORDER BY COUNT(T1.account_id) ASC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of accounts associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of first and last names of customers from the 'Customers' table who have associated accounts in the 'Accounts' table. The join condition links the customer to their respective account using the customer ID.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\"\n    }\n}\n",
        "c_mid": "SELECT C.customer_id, C.customer_first_name || ' ' || C.customer_last_name AS full_name \nFROM Customers C \nJOIN (SELECT customer_id, COUNT(*) AS account_count \n      FROM Accounts \n      GROUP BY customer_id) AS A \nON C.customer_id = A.customer_id \nORDER BY A.account_count ASC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customers who do not have any associated accounts. It selects the first and last names of customers from the 'Customers' table and excludes those who have accounts by performing an EXCEPT operation with a subquery that joins the 'Customers' table with the 'Accounts' table based on the customer ID.\",\n        \"virtual_table\": \"SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of accounts associated with each customer from the 'Accounts' table. The placeholder in the SELECT clause represents the customer identifier, and the count function aggregates the total number of accounts per customer.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id\"\n    }\n}\n",
        "c_high": "SELECT T2.customer_id, T2.customer_first_name || ' ' || T2.customer_last_name AS full_name \nFROM Accounts AS T1 \nJOIN Customers AS T2 ON T1.customer_id = T2.customer_id \nGROUP BY T1.customer_id \nORDER BY count(*) ASC \nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer first and last names along with their associated customer IDs from the 'Accounts' and 'Customers' tables. The data is grouped by customer ID and ordered by the count of accounts associated with each customer in ascending order, with a limit on the number of results specified by a placeholder.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the first and last names, along with the phone number of customers associated with a specific account name from the 'Accounts' table. The placeholder in the WHERE clause represents the name of the account.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the number of accounts associated with each customer from the 'Accounts' table. The placeholder in the LIMIT clause represents the maximum number of customers to display based on their account count.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT c.customer_id, c.customer_first_name || ' ' || c.customer_last_name AS full_name \nFROM Customers c \nJOIN (SELECT customer_id, COUNT(*) AS account_count \n      FROM Accounts \n      GROUP BY customer_id \n      ORDER BY account_count ASC \n      LIMIT 1) AS ac \nON c.customer_id = ac.customer_id;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of accounts associated with each customer from the 'Accounts' table. The placeholder in the LIMIT clause represents the maximum number of customers to display based on their account count.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of accounts associated with each customer from the 'Accounts' table. The placeholder in the SELECT clause represents the customer identifier, and the count function aggregates the total number of accounts per customer.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id\"\n    }\n}\n",
        "t_2": "SELECT T2.customer_id, T2.customer_first_name || ' ' || T2.customer_last_name AS full_name \nFROM Accounts AS T1 \nJOIN Customers AS T2 ON T1.customer_id = T2.customer_id \nGROUP BY T1.customer_id \nORDER BY COUNT(T1.account_id) ASC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customers who do not have any associated accounts. It selects the first and last names of customers from the 'Customers' table and excludes those who have accounts by performing an EXCEPT operation with a subquery that joins the 'Customers' table with the 'Accounts' table based on the customer ID.\",\n        \"virtual_table\": \"SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer first and last names along with their associated customer IDs from the 'Accounts' and 'Customers' tables. The data is grouped by customer ID and ordered by the count of accounts associated with each customer in ascending order, with a limit on the number of results specified by a placeholder.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of accounts associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT c.customer_id, c.customer_first_name || ' ' || c.customer_last_name AS full_name\nFROM Customers c\nJOIN Accounts a ON c.customer_id = a.customer_id\nGROUP BY c.customer_id\nORDER BY COUNT(a.account_id) ASC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.721",
        "c_low": "SELECT card_type_code FROM Customers_Cards GROUP BY card_type_code ORDER BY COUNT(card_id) DESC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT card_type_code, COUNT(*) as card_count FROM Customers_Cards GROUP BY card_type_code ORDER BY card_count DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of different card types from the 'Customers_Cards' table. The placeholder in the SELECT clause represents the card type code, while the count function aggregates the number of occurrences for each card type.\",\n        \"virtual_table\": \"SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with a specific customer identified by their first and last names, as well as a specific card type. The placeholders in the WHERE clause represent the customer's first name, last name, and the card type code.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING] AND T1.card_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of financial transactions grouped by card type from the 'Financial_Transactions' and 'Customers_Cards' tables. The placeholder in the SELECT statement represents the card type code, while the count reflects the number of transactions associated with each card type.\",\n        \"virtual_table\": \"SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code\"\n    }\n}\n",
        "c_high": "SELECT card_type_code FROM Customers_Cards GROUP BY card_type_code HAVING count(*) = (SELECT MAX(card_count) FROM (SELECT card_type_code, count(*) as card_count FROM Customers_Cards GROUP BY card_type_code))",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the different types of cards issued to customers, specifically focusing on the card type codes. It filters the results to only include those card types that have been issued a number of times equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of card types that should be considered.\",\n        \"virtual_table\": \"SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of cards held by each customer from the 'Customers_Cards' table. The placeholder in the LIMIT clause allows the user to specify the maximum number of customers to display based on the count of their cards.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of customer IDs along with their first and last names from the 'Customers' table, specifically for customers who have a certain number of cards associated with them. The placeholder in the HAVING clause represents the minimum count of cards a customer must have to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT card_type_code FROM Customers_Cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the different types of cards issued to customers, specifically focusing on the card type codes. It filters the results to only include those card types that have been issued a number of times equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of card types that should be considered.\",\n        \"virtual_table\": \"SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of different card types from the 'Customers_Cards' table. The placeholder in the SELECT clause represents the card type code, while the count function aggregates the number of occurrences for each card type.\",\n        \"virtual_table\": \"SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the number of cards associated with each customer from the 'Customers_Cards' table. The placeholder in the SELECT clause represents the customer identifier, and the count function aggregates the total number of cards per customer.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id\"\n    }\n}\n",
        "t_2": "SELECT T2.card_type_code, COUNT(*) as card_count \nFROM Customers_Cards AS T2 \nJOIN Financial_Transactions AS T1 ON T1.card_id = T2.card_id \nGROUP BY T2.card_type_code \nORDER BY card_count DESC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with a specific customer identified by their first and last names, as well as a specific card type. The placeholders in the WHERE clause represent the customer's first name, last name, and the card type code.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING] AND T1.card_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of financial transactions grouped by card type from the 'Financial_Transactions' and 'Customers_Cards' tables. The placeholder in the SELECT statement represents the card type code, while the count reflects the number of transactions associated with each card type.\",\n        \"virtual_table\": \"SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT card_type_code, COUNT(card_id) AS card_count\nFROM Customers_Cards\nGROUP BY card_type_code\nORDER BY card_count DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.722",
        "c_low": "SELECT card_type_code\nFROM Customers_Cards\nGROUP BY card_type_code\nORDER BY COUNT(card_id) DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT card_type_code FROM Customers_Cards GROUP BY card_type_code ORDER BY COUNT(*) DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of different card types from the 'Customers_Cards' table. The placeholder in the SELECT clause represents the card type code, while the count function aggregates the number of occurrences for each card type.\",\n        \"virtual_table\": \"SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with a specific customer identified by their first and last names, as well as a specific card type. The placeholders in the WHERE clause represent the customer's first name, last name, and the card type code.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING] AND T1.card_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of financial transactions grouped by card type from the 'Financial_Transactions' and 'Customers_Cards' tables. The placeholder in the SELECT statement represents the card type code, while the count reflects the number of transactions associated with each card type.\",\n        \"virtual_table\": \"SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code\"\n    }\n}\n",
        "c_high": "SELECT card_type_code FROM Customers_Cards GROUP BY card_type_code HAVING count(*) >= 1 ORDER BY count(*) DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the different types of cards issued to customers, specifically focusing on the card type codes. It filters the results to only include those card types that have been issued a number of times equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of card types that should be considered.\",\n        \"virtual_table\": \"SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of cards held by each customer from the 'Customers_Cards' table. The placeholder in the LIMIT clause allows the user to specify the maximum number of customers to display based on the count of their cards.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT card_type_code FROM Customers_Cards GROUP BY card_type_code ORDER BY COUNT(*) DESC LIMIT 1",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the different types of cards issued to customers, specifically focusing on the card type codes. It filters the results to only include those card types that have been issued a number of times equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of card types that should be considered.\",\n        \"virtual_table\": \"SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of different card types from the 'Customers_Cards' table. The placeholder in the SELECT clause represents the card type code, while the count function aggregates the number of occurrences for each card type.\",\n        \"virtual_table\": \"SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the number of cards associated with each customer from the 'Customers_Cards' table. The placeholder in the SELECT clause represents the customer identifier, and the count function aggregates the total number of cards per customer.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id\"\n    }\n}\n",
        "t_2": "SELECT T2.card_type_code, count(*) as transaction_count \nFROM Financial_Transactions AS T1 \nJOIN Customers_Cards AS T2 ON T1.card_id = T2.card_id \nGROUP BY T2.card_type_code \nORDER BY transaction_count DESC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with a specific customer identified by their first and last names, as well as a specific card type. The placeholders in the WHERE clause represent the customer's first name, last name, and the card type code.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING] AND T1.card_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of financial transactions grouped by card type from the 'Financial_Transactions' and 'Customers_Cards' tables. The placeholder in the SELECT statement represents the card type code, while the count reflects the number of transactions associated with each card type.\",\n        \"virtual_table\": \"SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code\"\n    }\n}\n",
        "t_3+": "SELECT card_type_code\nFROM Customers_Cards\nGROUP BY card_type_code\nORDER BY COUNT(card_id) DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.727",
        "c_low": "SELECT customer_id, customer_first_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customers_Cards WHERE card_type_code = 'credit')",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of accounts associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT customer_id, customer_first_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customers_Cards WHERE card_type_code = 'credit')",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customers who do not have any associated accounts. It selects the first and last names of customers from the 'Customers' table and excludes those who have accounts by performing an EXCEPT operation with a subquery that joins the 'Customers' table with the 'Accounts' table based on the customer ID.\",\n        \"virtual_table\": \"SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with a specific customer identified by their first and last names, as well as a specific card type. The placeholders in the WHERE clause represent the customer's first name, last name, and the card type code.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING] AND T1.card_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT C.customer_id, C.customer_first_name \nFROM Customers AS C \nLEFT JOIN Customers_Cards AS CC ON C.customer_id = CC.customer_id \nWHERE CC.card_id IS NULL;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer IDs along with their first and last names from the 'Customers' table, specifically for customers who have a certain number of cards associated with them. The placeholder in the HAVING clause represents the minimum count of cards a customer must have to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the first name, last name, and phone number of customers associated with a specific card number from the 'Customers' and 'Customers_Cards' tables. The placeholder in the WHERE clause represents the card number being queried.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of customer first and last names along with their associated customer IDs from the 'Accounts' and 'Customers' tables. The data is grouped by customer ID and ordered by the count of accounts associated with each customer in ascending order, with a limit on the number of results specified by a placeholder.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT c.customer_id, c.customer_first_name \nFROM Customers c \nLEFT JOIN Customers_Cards cc ON c.customer_id = cc.customer_id AND cc.card_type_code = 'credit' \nWHERE cc.card_id IS NULL;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT customer_id, customer_first_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customers_Cards WHERE card_type_code = 'credit')",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customers who do not have any associated accounts. It selects the first and last names of customers from the 'Customers' table and excludes those who have accounts by performing an EXCEPT operation with a subquery that joins the 'Customers' table with the 'Accounts' table based on the customer ID.\",\n        \"virtual_table\": \"SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer IDs along with their first and last names from the 'Customers' table, specifically for customers who have a certain number of cards associated with them. The placeholder in the HAVING clause represents the minimum count of cards a customer must have to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the first name, last name, and phone number of customers associated with a specific card number from the 'Customers' and 'Customers_Cards' tables. The placeholder in the WHERE clause represents the card number being queried.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT c.customer_id, c.customer_first_name\nFROM Customers c\nLEFT JOIN Customers_Cards cc ON c.customer_id = cc.customer_id AND cc.card_type_code = 'credit'\nWHERE cc.card_id IS NULL;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.728",
        "c_low": "SELECT customer_id, customer_first_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customers_Cards WHERE card_type_code = 'credit');",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of accounts associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT customer_id, customer_first_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customers_Cards WHERE card_type_code = 'credit')",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customers who do not have any associated accounts. It selects the first and last names of customers from the 'Customers' table and excludes those who have accounts by performing an EXCEPT operation with a subquery that joins the 'Customers' table with the 'Accounts' table based on the customer ID.\",\n        \"virtual_table\": \"SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with a specific customer identified by their first and last names, as well as a specific card type. The placeholders in the WHERE clause represent the customer's first name, last name, and the card type code.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING] AND T1.card_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT customer_id, customer_first_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customers_Cards WHERE card_type_code = 'credit')",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer IDs along with their first and last names from the 'Customers' table, specifically for customers who have a certain number of cards associated with them. The placeholder in the HAVING clause represents the minimum count of cards a customer must have to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer first and last names along with their associated customer IDs from the 'Accounts' and 'Customers' tables. The data is grouped by customer ID and ordered by the count of accounts associated with each customer in ascending order, with a limit on the number of results specified by a placeholder.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the first name, last name, and phone number of customers associated with a specific card number from the 'Customers' and 'Customers_Cards' tables. The placeholder in the WHERE clause represents the card number being queried.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT c.customer_id, c.customer_first_name \nFROM Customers c \nLEFT JOIN Customers_Cards cc ON c.customer_id = cc.customer_id AND cc.card_type_code = 'credit' \nWHERE cc.card_id IS NULL;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT customer_id, customer_first_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customers_Cards WHERE card_type_code = 'credit')",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customers who do not have any associated accounts. It selects the first and last names of customers from the 'Customers' table and excludes those who have accounts by performing an EXCEPT operation with a subquery that joins the 'Customers' table with the 'Accounts' table based on the customer ID.\",\n        \"virtual_table\": \"SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer IDs along with their first and last names from the 'Customers' table, specifically for customers who have a certain number of cards associated with them. The placeholder in the HAVING clause represents the minimum count of cards a customer must have to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT c.customer_id, c.customer_first_name \nFROM Customers c \nLEFT JOIN Customers_Cards cc ON c.customer_id = cc.customer_id AND cc.card_type_code = 'credit' \nWHERE cc.card_id IS NULL;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.729",
        "c_low": "SELECT DISTINCT card_type_code FROM Customers_Cards;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT card_type_code, count(*) FROM Customers_Cards GROUP BY card_type_code",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of different card types from the 'Customers_Cards' table. The placeholder in the SELECT clause represents the card type code, while the count function aggregates the number of occurrences for each card type.\",\n        \"virtual_table\": \"SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with a specific customer identified by their first and last names, as well as a specific card type. The placeholders in the WHERE clause represent the customer's first name, last name, and the card type code.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING] AND T1.card_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of financial transactions grouped by card type from the 'Financial_Transactions' and 'Customers_Cards' tables. The placeholder in the SELECT statement represents the card type code, while the count reflects the number of transactions associated with each card type.\",\n        \"virtual_table\": \"SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT card_type_code FROM Customers_Cards;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the different types of cards issued to customers, specifically focusing on the card type codes. It filters the results to only include those card types that have been issued a number of times equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of card types that should be considered.\",\n        \"virtual_table\": \"SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of cards held by each customer from the 'Customers_Cards' table. The placeholder in the LIMIT clause allows the user to specify the maximum number of customers to display based on the count of their cards.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT card_type_code FROM Customers_Cards GROUP BY card_type_code",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the different types of cards issued to customers, specifically focusing on the card type codes. It filters the results to only include those card types that have been issued a number of times equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of card types that should be considered.\",\n        \"virtual_table\": \"SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of different card types from the 'Customers_Cards' table. The placeholder in the SELECT clause represents the card type code, while the count function aggregates the number of occurrences for each card type.\",\n        \"virtual_table\": \"SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the number of cards held by each customer from the 'Customers_Cards' table. The placeholder in the LIMIT clause allows the user to specify the maximum number of customers to display based on the count of their cards.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT T2.card_type_code FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with a specific customer identified by their first and last names, as well as a specific card type. The placeholders in the WHERE clause represent the customer's first name, last name, and the card type code.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING] AND T1.card_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of financial transactions grouped by card type from the 'Financial_Transactions' and 'Customers_Cards' tables. The placeholder in the SELECT statement represents the card type code, while the count reflects the number of transactions associated with each card type.\",\n        \"virtual_table\": \"SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of customer cards associated with customers who have a specific first and last name. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT card_type_code FROM Customers_Cards;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.735",
        "c_low": "SELECT transaction_type, COUNT(*) AS transaction_count \nFROM Financial_Transactions \nGROUP BY transaction_type;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT transaction_type, COUNT(*) as transaction_count FROM Financial_Transactions GROUP BY transaction_type",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of financial transactions grouped by card type from the 'Financial_Transactions' and 'Customers_Cards' tables. The placeholder in the SELECT statement represents the card type code, while the count reflects the number of transactions associated with each card type.\",\n        \"virtual_table\": \"SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of transactions associated with each account from the 'Financial_Transactions' table. The placeholder in the SELECT clause represents the account identifier, and the count function aggregates the total number of transactions per account.\",\n        \"virtual_table\": \"SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of different card types from the 'Customers_Cards' table. The placeholder in the SELECT clause represents the card type code, while the count function aggregates the number of occurrences for each card type.\",\n        \"virtual_table\": \"SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code\"\n    }\n}\n",
        "c_high": "SELECT transaction_type, COUNT(*) AS transaction_count \nFROM Financial_Transactions \nGROUP BY transaction_type;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT transaction_type, COUNT(*) as transaction_count FROM Financial_Transactions GROUP BY transaction_type;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of transactions associated with each account from the 'Financial_Transactions' table. The placeholder in the SELECT clause represents the account identifier, and the count function aggregates the total number of transactions per account.\",\n        \"virtual_table\": \"SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of different card types from the 'Customers_Cards' table. The placeholder in the SELECT clause represents the card type code, while the count function aggregates the number of occurrences for each card type.\",\n        \"virtual_table\": \"SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code\"\n    }\n}\n",
        "t_2": "SELECT T2.card_type_code, count(*) FROM Financial_Transactions AS T1 JOIN Customers_Cards AS T2 ON T1.card_id = T2.card_id GROUP BY T2.card_type_code",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of financial transactions grouped by card type from the 'Financial_Transactions' and 'Customers_Cards' tables. The placeholder in the SELECT statement represents the card type code, while the count reflects the number of transactions associated with each card type.\",\n        \"virtual_table\": \"SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code\"\n    }\n}\n",
        "t_3+": "SELECT transaction_type, COUNT(*) AS transaction_count \nFROM Financial_Transactions \nGROUP BY transaction_type;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.743",
        "c_low": "SELECT transaction_type, SUM(transaction_amount) AS total_amount\nFROM Financial_Transactions\nGROUP BY transaction_type\nORDER BY total_amount DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT transaction_type, SUM(transaction_amount) AS total_amount \nFROM Financial_Transactions \nGROUP BY transaction_type \nORDER BY total_amount DESC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of transactions associated with each account from the 'Financial_Transactions' table. The placeholder in the SELECT clause represents the account identifier, and the count function aggregates the total number of transactions per account.\",\n        \"virtual_table\": \"SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of financial transactions grouped by card type from the 'Financial_Transactions' and 'Customers_Cards' tables. The placeholder in the SELECT statement represents the card type code, while the count reflects the number of transactions associated with each card type.\",\n        \"virtual_table\": \"SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code\"\n    }\n}\n",
        "c_high": "SELECT transaction_type, SUM(transaction_amount) AS total_amount\nFROM Financial_Transactions\nGROUP BY transaction_type\nORDER BY total_amount DESC\nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT transaction_type, SUM(transaction_amount) AS total_amount \nFROM Financial_Transactions \nGROUP BY transaction_type \nORDER BY total_amount DESC \nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of transactions associated with each account from the 'Financial_Transactions' table. The placeholder in the SELECT clause represents the account identifier, and the count function aggregates the total number of transactions per account.\",\n        \"virtual_table\": \"SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id\"\n    }\n}\n",
        "t_2": "SELECT transaction_type, SUM(transaction_amount) AS total_amount \nFROM Financial_Transactions \nGROUP BY transaction_type \nORDER BY total_amount DESC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of financial transactions grouped by card type from the 'Financial_Transactions' and 'Customers_Cards' tables. The placeholder in the SELECT statement represents the card type code, while the count reflects the number of transactions associated with each card type.\",\n        \"virtual_table\": \"SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code\"\n    }\n}\n",
        "t_3+": "SELECT transaction_type, SUM(transaction_amount) AS total_amount\nFROM Financial_Transactions\nGROUP BY transaction_type\nORDER BY total_amount DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.745",
        "c_low": "SELECT Accounts.account_id, COUNT(Financial_Transactions.transaction_id) AS transaction_count\nFROM Accounts\nLEFT JOIN Financial_Transactions ON Accounts.account_id = Financial_Transactions.account_id\nGROUP BY Accounts.account_id;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT account_id, COUNT(*) AS transaction_count FROM Financial_Transactions GROUP BY account_id",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of transactions associated with each account from the 'Financial_Transactions' table. The placeholder in the SELECT clause represents the account identifier, and the count function aggregates the total number of transactions per account.\",\n        \"virtual_table\": \"SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of accounts associated with each customer from the 'Accounts' table. The placeholder in the SELECT clause represents the customer identifier, and the count function aggregates the total number of accounts per customer.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of financial transactions grouped by card type from the 'Financial_Transactions' and 'Customers_Cards' tables. The placeholder in the SELECT statement represents the card type code, while the count reflects the number of transactions associated with each card type.\",\n        \"virtual_table\": \"SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code\"\n    }\n}\n",
        "c_high": "SELECT account_id, COUNT(transaction_id) AS number_of_transactions \nFROM Financial_Transactions \nGROUP BY account_id;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of accounts associated with each customer from the 'Accounts' table. The placeholder in the LIMIT clause represents the maximum number of customers to display based on their account count.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer first and last names along with their associated customer IDs from the 'Accounts' and 'Customers' tables. The data is grouped by customer ID and ordered by the count of accounts associated with each customer in ascending order, with a limit on the number of results specified by a placeholder.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT account_id, COUNT(*) AS transaction_count FROM Financial_Transactions GROUP BY account_id",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of transactions associated with each account from the 'Financial_Transactions' table. The placeholder in the SELECT clause represents the account identifier, and the count function aggregates the total number of transactions per account.\",\n        \"virtual_table\": \"SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of accounts associated with each customer from the 'Accounts' table. The placeholder in the SELECT clause represents the customer identifier, and the count function aggregates the total number of accounts per customer.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the number of accounts associated with each customer from the 'Accounts' table. The placeholder in the LIMIT clause represents the maximum number of customers to display based on their account count.\",\n        \"virtual_table\": \"SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT account_id, COUNT(transaction_id) AS number_of_transactions FROM Financial_Transactions GROUP BY account_id",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer first and last names along with their associated customer IDs from the 'Accounts' and 'Customers' tables. The data is grouped by customer ID and ordered by the count of accounts associated with each customer in ascending order, with a limit on the number of results specified by a placeholder.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of financial transactions grouped by card type from the 'Financial_Transactions' and 'Customers_Cards' tables. The placeholder in the SELECT statement represents the card type code, while the count reflects the number of transactions associated with each card type.\",\n        \"virtual_table\": \"SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code\"\n    }\n}\n",
        "t_3+": "SELECT Accounts.account_id, COUNT(Financial_Transactions.transaction_id) AS transaction_count\nFROM Accounts\nLEFT JOIN Financial_Transactions ON Accounts.account_id = Financial_Transactions.account_id\nGROUP BY Accounts.account_id;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.777",
        "c_low": "SELECT DISTINCT Year_Opened FROM track WHERE Seating >= 5000 UNION SELECT DISTINCT Year_Opened FROM track WHERE Seating <= 4000;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the years when racing tracks were opened, specifically filtering tracks based on their seating capacity. The placeholders in the WHERE clause allow users to specify a range for the seating capacity of the tracks they are interested in.\",\n        \"virtual_table\": \"SELECT year_opened FROM track WHERE seating BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT Year_Opened FROM track WHERE Track_ID IN (SELECT Track_ID FROM track WHERE Seating >= 5000) AND Track_ID IN (SELECT Track_ID FROM track WHERE Seating <= 4000);",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies the locations of racing tracks that have a seating capacity greater than a specified number and less than another specified number. The placeholders in the WHERE clauses represent the seating capacity limits.\",\n        \"virtual_table\": \"SELECT LOCATION FROM track WHERE seating  >  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT LOCATION FROM track WHERE seating  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT year_opened FROM track WHERE seating >= 5000 OR seating <= 4000;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and seating capacities of racing tracks from the 'track' table that were opened after a specific year. The placeholder in the WHERE clause represents the year of opening.\",\n        \"virtual_table\": \"SELECT name ,  seating FROM track WHERE year_opened  >  [PLACEHOLDER-TYPE:NUMBER] ORDER BY seating\"\n    }\n}\n",
        "t_1": "SELECT Year_Opened FROM track WHERE Seating >= 5000 UNION SELECT Year_Opened FROM track WHERE Seating <= 4000;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the years when racing tracks were opened, specifically filtering tracks based on their seating capacity. The placeholders in the WHERE clause allow users to specify a range for the seating capacity of the tracks they are interested in.\",\n        \"virtual_table\": \"SELECT year_opened FROM track WHERE seating BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and seating capacities of racing tracks from the 'track' table that were opened after a specific year. The placeholder in the WHERE clause represents the year of opening.\",\n        \"virtual_table\": \"SELECT name ,  seating FROM track WHERE year_opened  >  [PLACEHOLDER-TYPE:NUMBER] ORDER BY seating\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the locations of racing tracks that have a seating capacity greater than a specified number and less than another specified number. The placeholders in the WHERE clauses represent the seating capacity limits.\",\n        \"virtual_table\": \"SELECT LOCATION FROM track WHERE seating  >  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT LOCATION FROM track WHERE seating  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT Year_Opened FROM track WHERE Seating >= 5000 OR Seating <= 4000;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT DISTINCT Year_Opened FROM track WHERE Seating >= 5000 OR Seating <= 4000;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.779",
        "c_low": "SELECT track.Name, COUNT(race.Race_ID) AS Number_of_Races\nFROM track\nLEFT JOIN race ON track.Track_ID = race.Track_ID\nGROUP BY track.Name;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the years when racing tracks were opened, specifically filtering tracks based on their seating capacity. The placeholders in the WHERE clause allow users to specify a range for the seating capacity of the tracks they are interested in.\",\n        \"virtual_table\": \"SELECT year_opened FROM track WHERE seating BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT T2.Name, COUNT(T1.Race_ID) AS Number_of_Races FROM race AS T1 JOIN track AS T2 ON T1.Track_ID = T2.Track_ID GROUP BY T2.Track_ID ORDER BY Number_of_Races DESC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names of racing tracks associated with races, sorted by the number of races held at each track. The placeholder in the LIMIT clause allows the user to specify the maximum number of track names to retrieve.\",\n        \"virtual_table\": \"SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of racing tracks from the 'track' table that do not host any races. The placeholder in the subquery represents the track identifiers associated with races.\",\n        \"virtual_table\": \"SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the locations of racing tracks that have a seating capacity greater than a specified number and less than another specified number. The placeholders in the WHERE clauses represent the seating capacity limits.\",\n        \"virtual_table\": \"SELECT LOCATION FROM track WHERE seating  >  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT LOCATION FROM track WHERE seating  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT T2.Name, COUNT(T1.Race_ID) AS Number_of_Races FROM race AS T1 JOIN track AS T2 ON T1.Track_ID = T2.Track_ID GROUP BY T2.Track_ID",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and locations of racing tracks associated with a specific number of races. The placeholder in the HAVING clause represents the count of races that must be matched for the tracks to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and seating capacities of racing tracks from the 'track' table that were opened after a specific year. The placeholder in the WHERE clause represents the year of opening.\",\n        \"virtual_table\": \"SELECT name ,  seating FROM track WHERE year_opened  >  [PLACEHOLDER-TYPE:NUMBER] ORDER BY seating\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of racing tracks that do not host any races of a specific classification. The placeholder in the WHERE clause represents the classification of the race events.\",\n        \"virtual_table\": \"SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT track.Name, COUNT(race.Race_ID) AS Number_of_Races\nFROM track\nLEFT JOIN race ON track.Track_ID = race.Track_ID\nGROUP BY track.Name;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and seating capacities of racing tracks from the 'track' table that were opened after a specific year. The placeholder in the WHERE clause represents the year of opening.\",\n        \"virtual_table\": \"SELECT name ,  seating FROM track WHERE year_opened  >  [PLACEHOLDER-TYPE:NUMBER] ORDER BY seating\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the years when racing tracks were opened, specifically filtering tracks based on their seating capacity. The placeholders in the WHERE clause allow users to specify a range for the seating capacity of the tracks they are interested in.\",\n        \"virtual_table\": \"SELECT year_opened FROM track WHERE seating BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the locations of racing tracks that have a seating capacity greater than a specified number and less than another specified number. The placeholders in the WHERE clauses represent the seating capacity limits.\",\n        \"virtual_table\": \"SELECT LOCATION FROM track WHERE seating  >  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT LOCATION FROM track WHERE seating  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.Name, COUNT(T1.Race_ID) AS Number_of_Races FROM race AS T1 JOIN track AS T2 ON T1.Track_ID = T2.Track_ID GROUP BY T2.Track_ID",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names of racing tracks associated with races, sorted by the number of races held at each track. The placeholder in the LIMIT clause allows the user to specify the maximum number of track names to retrieve.\",\n        \"virtual_table\": \"SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and locations of racing tracks associated with a specific number of races. The placeholder in the HAVING clause represents the count of races that must be matched for the tracks to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of racing tracks from the 'track' table that do not host any races. The placeholder in the subquery represents the track identifiers associated with races.\",\n        \"virtual_table\": \"SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)\"\n    }\n}\n",
        "t_3+": "SELECT track.Name, COUNT(race.Race_ID) AS Number_of_Races\nFROM track\nLEFT JOIN race ON track.Track_ID = race.Track_ID\nGROUP BY track.Track_ID, track.Name;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.780",
        "c_low": "SELECT track.Name, COUNT(race.Race_ID) AS Race_Count\nFROM track\nLEFT JOIN race ON track.Track_ID = race.Track_ID\nGROUP BY track.Name;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the years when racing tracks were opened, specifically filtering tracks based on their seating capacity. The placeholders in the WHERE clause allow users to specify a range for the seating capacity of the tracks they are interested in.\",\n        \"virtual_table\": \"SELECT year_opened FROM track WHERE seating BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the classifications of races from the 'race' table, grouping them by class and filtering to show only those classes that have a specified minimum number of races. The placeholder in the HAVING clause represents the minimum count of races required for a class to be included in the results.\",\n        \"virtual_table\": \"SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT T2.Name, COUNT(T1.Race_ID) AS Race_Count FROM race AS T1 JOIN track AS T2 ON T1.Track_ID = T2.Track_ID GROUP BY T2.Track_ID",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names of racing tracks associated with races, sorted by the number of races held at each track. The placeholder in the LIMIT clause allows the user to specify the maximum number of track names to retrieve.\",\n        \"virtual_table\": \"SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of racing tracks from the 'track' table that do not host any races. The placeholder in the subquery represents the track identifiers associated with races.\",\n        \"virtual_table\": \"SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the locations of racing tracks that have a seating capacity greater than a specified number and less than another specified number. The placeholders in the WHERE clauses represent the seating capacity limits.\",\n        \"virtual_table\": \"SELECT LOCATION FROM track WHERE seating  >  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT LOCATION FROM track WHERE seating  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT T2.Name, COUNT(T1.Race_ID) AS Race_Count FROM race AS T1 JOIN track AS T2 ON T1.Track_ID = T2.Track_ID GROUP BY T2.Track_ID",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and locations of racing tracks associated with a specific number of races. The placeholder in the HAVING clause represents the count of races that must be matched for the tracks to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and seating capacities of racing tracks from the 'track' table that were opened after a specific year. The placeholder in the WHERE clause represents the year of opening.\",\n        \"virtual_table\": \"SELECT name ,  seating FROM track WHERE year_opened  >  [PLACEHOLDER-TYPE:NUMBER] ORDER BY seating\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of racing tracks that do not host any races of a specific classification. The placeholder in the WHERE clause represents the classification of the race events.\",\n        \"virtual_table\": \"SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT track.Name, COUNT(race.Race_ID) AS Race_Count \nFROM track \nLEFT JOIN race ON track.Track_ID = race.Track_ID \nGROUP BY track.Name;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and seating capacities of racing tracks from the 'track' table that were opened after a specific year. The placeholder in the WHERE clause represents the year of opening.\",\n        \"virtual_table\": \"SELECT name ,  seating FROM track WHERE year_opened  >  [PLACEHOLDER-TYPE:NUMBER] ORDER BY seating\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the years when racing tracks were opened, specifically filtering tracks based on their seating capacity. The placeholders in the WHERE clause allow users to specify a range for the seating capacity of the tracks they are interested in.\",\n        \"virtual_table\": \"SELECT year_opened FROM track WHERE seating BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the classifications of races from the 'race' table, grouping them by class and filtering to show only those classes that have a specified minimum number of races. The placeholder in the HAVING clause represents the minimum count of races required for a class to be included in the results.\",\n        \"virtual_table\": \"SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.Name, COUNT(T1.Race_ID) AS Race_Count FROM race AS T1 JOIN track AS T2 ON T1.Track_ID = T2.Track_ID GROUP BY T2.Track_ID",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names of racing tracks associated with races, sorted by the number of races held at each track. The placeholder in the LIMIT clause allows the user to specify the maximum number of track names to retrieve.\",\n        \"virtual_table\": \"SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and locations of racing tracks associated with a specific number of races. The placeholder in the HAVING clause represents the count of races that must be matched for the tracks to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of racing tracks from the 'track' table that do not host any races. The placeholder in the subquery represents the track identifiers associated with races.\",\n        \"virtual_table\": \"SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)\"\n    }\n}\n",
        "t_3+": "SELECT track.Name, COUNT(race.Race_ID) AS Race_Count\nFROM track\nLEFT JOIN race ON track.Track_ID = race.Track_ID\nGROUP BY track.Name;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.789",
        "c_low": "SELECT count(*) FROM member WHERE Membership_card = 'black'",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of members from the 'member' table who do not reside at a specific address. The placeholder in the WHERE clause represents the address that members should not match.\",\n        \"virtual_table\": \"SELECT count(*) FROM member WHERE address != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT COUNT(*) FROM member WHERE Membership_card = 'black'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of members grouped by their residential addresses from the 'member' table. The placeholder in the SELECT clause represents the count of members, while the address is displayed for each group.\",\n        \"virtual_table\": \"SELECT count(*) ,  address FROM member GROUP BY address\"\n    }\n}\n",
        "c_high": "SELECT COUNT(*) FROM member WHERE Membership_card = 'black'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves the membership cards of members who share the same residential address. The query uses an INTERSECT operation to find members with identical addresses, represented by placeholders for the address values.\",\n        \"virtual_table\": \"SELECT membership_card FROM member WHERE address  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT membership_card FROM member WHERE address  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT COUNT(*) FROM member WHERE membership_card = 'black'",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves the membership cards of members who share the same residential address. The query uses an INTERSECT operation to find members with identical addresses, represented by placeholders for the address values.\",\n        \"virtual_table\": \"SELECT membership_card FROM member WHERE address  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT membership_card FROM member WHERE address  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of members grouped by their residential addresses from the 'member' table. The placeholder in the SELECT clause represents the count of members, while the address is displayed for each group.\",\n        \"virtual_table\": \"SELECT count(*) ,  address FROM member GROUP BY address\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table counts the number of members from the 'member' table who do not reside at a specific address. The placeholder in the WHERE clause represents the address that members should not match.\",\n        \"virtual_table\": \"SELECT count(*) FROM member WHERE address != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT COUNT(*) AS Number_of_Members FROM member WHERE Membership_card = 'black';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT COUNT(*) AS Number_of_Members FROM member WHERE Membership_card = 'black';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.792",
        "c_low": "SELECT Member_ID, Name FROM member WHERE Age < 30 OR Level_of_membership = 'black';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Member_ID, Name FROM member WHERE Age < 30 OR Level_of_membership = 'black';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT Member_ID, Name FROM member WHERE Age < 30 OR Membership_card = 'black'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves the addresses of members whose ages are below a certain threshold and also above another threshold. The placeholders in the WHERE clauses represent the age limits for filtering the members.\",\n        \"virtual_table\": \"SELECT address FROM member WHERE age  <  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT address FROM member WHERE age  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Member_ID, Name FROM member WHERE Age < 30 OR Membership_card = 'black'",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves the addresses of members whose ages are below a certain threshold and also above another threshold. The placeholders in the WHERE clauses represent the age limits for filtering the members.\",\n        \"virtual_table\": \"SELECT address FROM member WHERE age  <  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT address FROM member WHERE age  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Member_ID, Name FROM member WHERE Age < 30 OR Level_of_membership = 'black';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT Member_ID, Name FROM member WHERE Age < 30 OR Membership_card = 'black';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.794",
        "c_low": "SELECT Membership_card, COUNT(Member_ID) AS Member_Count \nFROM member \nGROUP BY Membership_card \nHAVING COUNT(Member_ID) > 5;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Membership_card FROM member GROUP BY Membership_card HAVING COUNT(Member_ID) > 5;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of members grouped by their residential addresses from the 'member' table. The placeholder in the SELECT clause represents the count of members, while the address is displayed for each group.\",\n        \"virtual_table\": \"SELECT count(*) ,  address FROM member GROUP BY address\"\n    }\n}\n",
        "c_high": "SELECT membership_card FROM member GROUP BY membership_card HAVING COUNT(Member_ID) > 5;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves the membership cards of members who share the same residential address. The query uses an INTERSECT operation to find members with identical addresses, represented by placeholders for the address values.\",\n        \"virtual_table\": \"SELECT membership_card FROM member WHERE address  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT membership_card FROM member WHERE address  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT membership_card FROM member GROUP BY membership_card HAVING COUNT(Member_ID) > 5;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves the membership cards of members who share the same residential address. The query uses an INTERSECT operation to find members with identical addresses, represented by placeholders for the address values.\",\n        \"virtual_table\": \"SELECT membership_card FROM member WHERE address  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT membership_card FROM member WHERE address  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of members grouped by their residential addresses from the 'member' table. The placeholder in the SELECT clause represents the count of members, while the address is displayed for each group.\",\n        \"virtual_table\": \"SELECT count(*) ,  address FROM member GROUP BY address\"\n    }\n}\n",
        "t_2": "SELECT Membership_card, COUNT(Member_ID) AS Member_Count\nFROM member\nGROUP BY Membership_card\nHAVING COUNT(Member_ID) > 5;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT Membership_card, COUNT(Member_ID) AS Member_Count\nFROM member\nGROUP BY Membership_card\nHAVING COUNT(Member_ID) > 5;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.798",
        "c_low": "SELECT Address FROM shop WHERE Shop_ID NOT IN (SELECT DISTINCT shop.Shop_ID FROM happy_hour_member JOIN member ON happy_hour_member.Member_ID = member.Member_ID WHERE member.Level_of_membership = 'black')",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of members from the 'member' table who do not reside at a specific address. The placeholder in the WHERE clause represents the address that members should not match.\",\n        \"virtual_table\": \"SELECT count(*) FROM member WHERE address != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of members from the 'member' table who reside at specific addresses. The placeholders in the WHERE clause represent the addresses being queried.\",\n        \"virtual_table\": \"SELECT name FROM member WHERE address  =  [PLACEHOLDER-TYPE:STRING] OR address  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT shop.Address \nFROM shop \nLEFT JOIN (SELECT count(*) AS member_count, Address \n            FROM member \n            WHERE Level_of_membership = 'black' \n            GROUP BY Address) AS member_counts \nON shop.Address = member_counts.Address \nWHERE member_counts.member_count IS NULL;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of members grouped by their residential addresses from the 'member' table. The placeholder in the SELECT clause represents the count of members, while the address is displayed for each group.\",\n        \"virtual_table\": \"SELECT count(*) ,  address FROM member GROUP BY address\"\n    }\n}\n",
        "c_high": "SELECT address FROM shop WHERE shop_id NOT IN (SELECT DISTINCT shop_id FROM happy_hour_member WHERE member_id IN (SELECT member_id FROM member WHERE membership_card = 'black'))",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves the membership cards of members who share the same residential address. The query uses an INTERSECT operation to find members with identical addresses, represented by placeholders for the address values.\",\n        \"virtual_table\": \"SELECT membership_card FROM member WHERE address  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT membership_card FROM member WHERE address  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the addresses and the number of staff for shops that are not hosting any happy hour events. The placeholder in the WHERE clause is used to filter out shops that are involved in happy hours.\",\n        \"virtual_table\": \"SELECT address ,  num_of_staff FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM happy_hour)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table retrieves the addresses of members whose ages are below a certain threshold and also above another threshold. The placeholders in the WHERE clauses represent the age limits for filtering the members.\",\n        \"virtual_table\": \"SELECT address FROM member WHERE age  <  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT address FROM member WHERE age  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT Address FROM member m WHERE NOT EXISTS (SELECT 1 FROM member WHERE m.Address = member.Address AND member.Level_of_membership = 'black')",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of members from the 'member' table who do not reside at a specific address. The placeholder in the WHERE clause represents the address that members should not match.\",\n        \"virtual_table\": \"SELECT count(*) FROM member WHERE address != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table retrieves the membership cards of members who share the same residential address. The query uses an INTERSECT operation to find members with identical addresses, represented by placeholders for the address values.\",\n        \"virtual_table\": \"SELECT membership_card FROM member WHERE address  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT membership_card FROM member WHERE address  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of members from the 'member' table who reside at specific addresses. The placeholders in the WHERE clause represent the addresses being queried.\",\n        \"virtual_table\": \"SELECT name FROM member WHERE address  =  [PLACEHOLDER-TYPE:STRING] OR address  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT Address FROM shop WHERE Shop_ID NOT IN (SELECT DISTINCT shop.Shop_ID FROM shop JOIN happy_hour ON shop.Shop_ID = happy_hour.Shop_ID JOIN happy_hour_member ON happy_hour.HH_ID = happy_hour_member.HH_ID JOIN member ON happy_hour_member.Member_ID = member.Member_ID WHERE member.Level_of_membership = 'black')",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the addresses and the number of staff for shops that are not hosting any happy hour events. The placeholder in the WHERE clause is used to filter out shops that are involved in happy hours.\",\n        \"virtual_table\": \"SELECT address ,  num_of_staff FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM happy_hour)\"\n    }\n}\n",
        "t_3+": "SELECT Address FROM shop WHERE Shop_ID NOT IN (SELECT DISTINCT Shop_ID FROM happy_hour_member INNER JOIN member ON happy_hour_member.Member_ID = member.Member_ID WHERE member.Level_of_membership = 'black');",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.814",
        "c_low": "SELECT FirstName || ' ' || LastName AS FullName FROM Employee WHERE City = 'Calgary';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the cities of customers who are supported by a specific employee. The placeholder in the WHERE clause represents the postal code of the customer.\",\n        \"virtual_table\": \"SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT FirstName || ' ' || LastName AS FullName\nFROM Employee\nWHERE City = 'Calgary';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT FirstName || ' ' || LastName AS FullName\nFROM Employee\nWHERE City = 'Calgary';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT FirstName || ' ' || LastName AS FullName\nFROM Employee\nWHERE City = 'Calgary';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT FirstName || ' ' || LastName AS FullName FROM Employee WHERE City = 'Calgary';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the cities of customers who are supported by a specific employee. The placeholder in the WHERE clause represents the postal code of the customer.\",\n        \"virtual_table\": \"SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT FirstName || ' ' || LastName AS FullName\nFROM Employee\nWHERE City = 'Calgary';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.825",
        "c_low": "SELECT T2.Name, COUNT(*) AS AlbumCount \nFROM Album AS T1 \nJOIN Artist AS T2 ON T1.ArtistId = T2.ArtistId \nGROUP BY T2.Name \nORDER BY AlbumCount DESC \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of artists from the 'Artist' table who have created a specific album. The placeholder in the WHERE clause represents the title of the album.\",\n        \"virtual_table\": \"SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of albums from the 'Album' table that are associated with a specific artist from the 'Artist' table. The placeholder in the WHERE clause represents the name of the artist.\",\n        \"virtual_table\": \"SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles of albums from the 'Album' table that are associated with a specific artist. The placeholder in the WHERE clause represents the name of the artist.\",\n        \"virtual_table\": \"SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT T2.Name FROM Album AS T1 JOIN Artist AS T2 ON T1.ArtistId = T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"The virtual table lists the names of artists who have created albums, ordered by the number of albums they have produced. The placeholder in the LIMIT clause allows the user to specify the maximum number of artist names to retrieve.\",\n        \"virtual_table\": \"SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT T2.Name, COUNT(T1.AlbumId) AS AlbumCount \nFROM Album AS T1 \nJOIN Artist AS T2 ON T1.ArtistId = T2.ArtistId \nGROUP BY T1.ArtistId \nORDER BY AlbumCount DESC \nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of artist names along with their corresponding artist identifiers from the 'Album' and 'Artist' tables. It filters the results to include only those artists who have a specified minimum number of albums, represented by a placeholder for numeric values. The results are grouped by artist identifier and ordered by the artist's name.\",\n        \"virtual_table\": \"SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER] ORDER BY T2.Name\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of artists from the 'Artist' table who do not have any albums associated with them. The subquery identifies artists that are linked to albums, and the main query counts those artists who are not in that list.\",\n        \"virtual_table\": \"SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)\"\n    },\n    \"2\": {\n        \"description\": \"The virtual table summarizes the titles of albums along with their unique identifiers and the count of tracks associated with each album. It combines data from the 'Album' and 'Track' tables, grouping the results by album identifier to provide a count of tracks for each album.\",\n        \"virtual_table\": \"SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID\"\n    }\n}\n",
        "t_1": "SELECT Artist.Name, COUNT(Album.AlbumId) AS AlbumCount\nFROM Artist\nJOIN Album ON Artist.ArtistId = Album.ArtistId\nGROUP BY Artist.ArtistId\nORDER BY AlbumCount DESC\nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"The virtual table lists the names of artists who have created albums, ordered by the number of albums they have produced. The placeholder in the LIMIT clause allows the user to specify the maximum number of artist names to retrieve.\",\n        \"virtual_table\": \"SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of artists from the 'Artist' table who have created a specific album. The placeholder in the WHERE clause represents the title of the album.\",\n        \"virtual_table\": \"SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of albums from the 'Album' table that are associated with a specific artist from the 'Artist' table. The placeholder in the WHERE clause represents the name of the artist.\",\n        \"virtual_table\": \"SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Artist.Name, COUNT(Album.AlbumId) AS AlbumCount\nFROM Artist\nJOIN Album ON Artist.ArtistId = Album.ArtistId\nGROUP BY Artist.ArtistId\nORDER BY AlbumCount DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.837",
        "c_low": "SELECT MediaType.Name, COUNT(*) AS TrackCount\nFROM MediaType\nLEFT JOIN Track ON MediaType.MediaTypeId = Track.MediaTypeId\nGROUP BY MediaType.Name\nORDER BY TrackCount ASC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of tracks associated with a specific media type from the 'MediaType' and 'Track' tables. The placeholder in the WHERE clause represents the name of the media type being queried.\",\n        \"virtual_table\": \"SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"The virtual table displays the distinct unit prices of tracks from the 'Track' table. The placeholder in the SELECT clause represents the unit price of each track, ensuring that only unique values are shown.\",\n        \"virtual_table\": \"SELECT distinct(UnitPrice) FROM TRACK\"\n    }\n}\n",
        "c_mid": "SELECT T1.Name FROM MediaType AS T1 JOIN Track AS T2 ON T1.MediaTypeId = T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of media types from the 'MediaType' table, ordered by the number of tracks associated with each media type in ascending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of media types to retrieve.\",\n        \"virtual_table\": \"SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the maximum and minimum duration of tracks from a specific genre. The data is retrieved by joining the 'Genre' and 'Track' tables based on the genre identifier. The placeholder in the WHERE clause represents the name of the genre for which the duration statistics are being queried.\",\n        \"virtual_table\": \"SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT MediaTypeId, COUNT(*) AS TrackCount FROM Track GROUP BY MediaTypeId ORDER BY TrackCount ASC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"The virtual table summarizes the titles of albums along with their unique identifiers and the count of tracks associated with each album. It combines data from the 'Album' and 'Track' tables, grouping the results by album identifier to provide a count of tracks for each album.\",\n        \"virtual_table\": \"SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID\"\n    }\n}\n",
        "t_1": "SELECT MediaType.Name, COUNT(Track.TrackId) AS TrackCount\nFROM Track\nJOIN MediaType ON Track.MediaTypeId = MediaType.MediaTypeId\nGROUP BY MediaType.Name\nORDER BY TrackCount ASC\nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"The virtual table displays the distinct unit prices of tracks from the 'Track' table. The placeholder in the SELECT clause represents the unit price of each track, ensuring that only unique values are shown.\",\n        \"virtual_table\": \"SELECT distinct(UnitPrice) FROM TRACK\"\n    }\n}\n",
        "t_2": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of tracks associated with a specific media type from the 'MediaType' and 'Track' tables. The placeholder in the WHERE clause represents the name of the media type being queried.\",\n        \"virtual_table\": \"SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of media types from the 'MediaType' table, ordered by the number of tracks associated with each media type in ascending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of media types to retrieve.\",\n        \"virtual_table\": \"SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"The virtual table summarizes the titles of albums along with their unique identifiers and the count of tracks associated with each album. It combines data from the 'Album' and 'Track' tables, grouping the results by album identifier to provide a count of tracks for each album.\",\n        \"virtual_table\": \"SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID\"\n    }\n}\n",
        "t_3+": "SELECT MediaType.Name, COUNT(Track.TrackId) AS TrackCount\nFROM Track\nJOIN MediaType ON Track.MediaTypeId = MediaType.MediaTypeId\nGROUP BY MediaType.Name\nORDER BY TrackCount ASC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.839",
        "c_low": "SELECT Album.AlbumId, Album.Title \nFROM Album \nJOIN Track ON Album.AlbumId = Track.AlbumId \nWHERE Track.UnitPrice > 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"The virtual table displays the distinct unit prices of tracks from the 'Track' table. The placeholder in the SELECT clause represents the unit price of each track, ensuring that only unique values are shown.\",\n        \"virtual_table\": \"SELECT distinct(UnitPrice) FROM TRACK\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the titles of albums from the 'Album' table that are associated with a specific artist. The placeholder in the WHERE clause represents the name of the artist.\",\n        \"virtual_table\": \"SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of artists from the 'Artist' table who have created a specific album. The placeholder in the WHERE clause represents the title of the album.\",\n        \"virtual_table\": \"SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT A.AlbumId, A.Title \nFROM Album A \nJOIN Track T ON A.AlbumId = T.AlbumId \nWHERE T.UnitPrice > 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"The virtual table lists the names of artists who have created albums, ordered by the number of albums they have produced. The placeholder in the LIMIT clause allows the user to specify the maximum number of artist names to retrieve.\",\n        \"virtual_table\": \"SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT T1.Title, T1.AlbumId FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 GROUP BY T1.AlbumId",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of album titles along with their unique identifiers from the 'Album' table, specifically for tracks that have a unit price exceeding a specified amount. The placeholder in the WHERE clause represents the minimum unit price for filtering the tracks.\",\n        \"virtual_table\": \"SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY T2.AlbumID\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of artist names along with their corresponding artist identifiers from the 'Album' and 'Artist' tables. It filters the results to include only those artists who have a specified minimum number of albums, represented by a placeholder for numeric values. The results are grouped by artist identifier and ordered by the artist's name.\",\n        \"virtual_table\": \"SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER] ORDER BY T2.Name\"\n    },\n    \"2\": {\n        \"description\": \"The virtual table summarizes the titles of albums along with their unique identifiers and the count of tracks associated with each album. It combines data from the 'Album' and 'Track' tables, grouping the results by album identifier to provide a count of tracks for each album.\",\n        \"virtual_table\": \"SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID\"\n    }\n}\n",
        "t_1": "SELECT Album.AlbumId, Album.Title \nFROM Album \nJOIN Track ON Album.AlbumId = Track.AlbumId \nWHERE Track.UnitPrice > 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"The virtual table displays the distinct unit prices of tracks from the 'Track' table. The placeholder in the SELECT clause represents the unit price of each track, ensuring that only unique values are shown.\",\n        \"virtual_table\": \"SELECT distinct(UnitPrice) FROM TRACK\"\n    }\n}\n",
        "t_2": "SELECT T1.Title, T1.AlbumId FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 GROUP BY T1.AlbumId",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of album titles along with their unique identifiers from the 'Album' table, specifically for tracks that have a unit price exceeding a specified amount. The placeholder in the WHERE clause represents the minimum unit price for filtering the tracks.\",\n        \"virtual_table\": \"SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY T2.AlbumID\"\n    },\n    \"1\": {\n        \"description\": \"The virtual table lists the names of artists who have created albums, ordered by the number of albums they have produced. The placeholder in the LIMIT clause allows the user to specify the maximum number of artist names to retrieve.\",\n        \"virtual_table\": \"SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of artist names along with their corresponding artist identifiers from the 'Album' and 'Artist' tables. It filters the results to include only those artists who have a specified minimum number of albums, represented by a placeholder for numeric values. The results are grouped by artist identifier and ordered by the artist's name.\",\n        \"virtual_table\": \"SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER] ORDER BY T2.Name\"\n    }\n}\n",
        "t_3+": "SELECT Album.AlbumId, Album.Title \nFROM Album \nJOIN Track ON Album.AlbumId = Track.AlbumId \nWHERE Track.UnitPrice > 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.846",
        "c_low": "SELECT FirstName || ' ' || LastName AS FullName \nFROM Customer \nWHERE Email = 'luisg@embraer.com.br';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the cities of customers who are supported by a specific employee. The placeholder in the WHERE clause represents the postal code of the customer.\",\n        \"virtual_table\": \"SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT FirstName || ' ' || LastName AS FullName \nFROM Customer \nWHERE Email = 'luisg@embraer.com.br';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique first names of customers from the 'Customer' table who have made purchases, as indicated by their presence in the 'Invoice' table. The placeholder in the WHERE clause represents the country of the customers.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT FirstName, LastName FROM Customer WHERE Email = 'luisg@embraer.com.br'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of employees who are assigned as support representatives for customers with a specific first name. The placeholder in the WHERE clause represents the customer's first name.\",\n        \"virtual_table\": \"SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT FirstName || ' ' || LastName AS FullName \nFROM Customer \nWHERE Email = 'luisg@embraer.com.br';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT FirstName, LastName FROM Customer WHERE Email = 'luisg@embraer.com.br'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of employees who are assigned as support representatives for customers with a specific first name. The placeholder in the WHERE clause represents the customer's first name.\",\n        \"virtual_table\": \"SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the cities of customers who are supported by a specific employee. The placeholder in the WHERE clause represents the postal code of the customer.\",\n        \"virtual_table\": \"SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique first names of customers from the 'Customer' table who have made purchases, as indicated by their presence in the 'Invoice' table. The placeholder in the WHERE clause represents the country of the customers.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT FirstName || ' ' || LastName AS FullName \nFROM Customer \nWHERE Email = 'luisg@embraer.com.br';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.850",
        "c_low": "SELECT Employee.FirstName || ' ' || Employee.LastName AS FullName\nFROM Employee\nJOIN Customer ON Employee.EmployeeId = Customer.SupportRepId\nWHERE Customer.FirstName = 'Leonie';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Employee.FirstName || ' ' || Employee.LastName AS FullName\nFROM Employee\nJOIN Customer ON Employee.EmployeeId = Customer.SupportRepId\nWHERE Customer.FirstName = 'Leonie';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT T2.FirstName, T2.LastName FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.FirstName = 'Leonie'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of employees who are assigned as support representatives for customers with a specific first name. The placeholder in the WHERE clause represents the customer's first name.\",\n        \"virtual_table\": \"SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT Employee.FirstName || ' ' || Employee.LastName AS FullName\nFROM Employee\nJOIN Customer ON Employee.EmployeeId = Customer.SupportRepId\nWHERE Customer.FirstName = 'Leonie';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T2.FirstName, T2.LastName FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.FirstName = 'Leonie'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of employees who are assigned as support representatives for customers with a specific first name. The placeholder in the WHERE clause represents the customer's first name.\",\n        \"virtual_table\": \"SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Employee.FirstName || ' ' || Employee.LastName AS FullName\nFROM Employee\nJOIN Customer ON Employee.EmployeeId = Customer.SupportRepId\nWHERE Customer.FirstName = 'Leonie';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.857",
        "c_low": "SELECT DISTINCT Customer.LastName \nFROM Customer \nLEFT JOIN Invoice ON Customer.CustomerId = Invoice.CustomerId \nGROUP BY Customer.CustomerId \nHAVING SUM(CASE WHEN Invoice.Total > 20 THEN 1 ELSE 0 END) = 0;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT DISTINCT C.LastName \nFROM Customer AS C \nLEFT JOIN Invoice AS I ON C.CustomerId = I.CustomerId \nGROUP BY C.CustomerId \nHAVING SUM(I.Total) <= 20;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique first names of customers from the 'Customer' table who have made purchases, as indicated by their presence in the 'Invoice' table. The placeholder in the WHERE clause represents the country of the customers.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT Customer.LastName \nFROM Customer \nLEFT JOIN Invoice ON Customer.CustomerId = Invoice.CustomerId \nGROUP BY Customer.CustomerId \nHAVING SUM(COALESCE(Invoice.Total, 0)) <= 20;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT DISTINCT Customer.LastName\nFROM Customer\nLEFT JOIN Invoice ON Customer.CustomerId = Invoice.CustomerId\nGROUP BY Customer.CustomerId\nHAVING SUM(CASE WHEN Invoice.Total > 20 THEN 1 ELSE 0 END) = 0;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT DISTINCT C.LastName \nFROM Customer AS C \nLEFT JOIN Invoice AS I ON C.CustomerId = I.CustomerId \nGROUP BY C.CustomerId \nHAVING SUM(I.Total) <= 20;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique first names of customers from the 'Customer' table who have made purchases, as indicated by their presence in the 'Invoice' table. The placeholder in the WHERE clause represents the country of the customers.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT Customer.LastName\nFROM Customer\nLEFT JOIN Invoice ON Customer.CustomerId = Invoice.CustomerId\nGROUP BY Customer.CustomerId\nHAVING SUM(CASE WHEN Invoice.Total > 20 THEN 1 ELSE 0 END) = 0;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.858",
        "c_low": "SELECT DISTINCT Customer.LastName \nFROM Customer \nLEFT JOIN Invoice ON Customer.CustomerId = Invoice.CustomerId \nGROUP BY Customer.CustomerId \nHAVING SUM(Invoice.Total) <= 20;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT DISTINCT C.LastName \nFROM Customer AS C \nLEFT JOIN Invoice AS I ON C.CustomerId = I.CustomerId \nGROUP BY C.CustomerId \nHAVING SUM(I.Total) <= 20;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique first names of customers from the 'Customer' table who have made purchases, as indicated by their presence in the 'Invoice' table. The placeholder in the WHERE clause represents the country of the customers.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT Customer.LastName \nFROM Customer \nLEFT JOIN Invoice ON Customer.CustomerId = Invoice.CustomerId \nGROUP BY Customer.CustomerId \nHAVING SUM(Invoice.Total) <= 20;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT DISTINCT Customer.LastName \nFROM Customer \nLEFT JOIN Invoice ON Customer.CustomerId = Invoice.CustomerId \nGROUP BY Customer.CustomerId \nHAVING SUM(Invoice.Total) <= 20;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT DISTINCT C.LastName \nFROM Customer AS C \nLEFT JOIN Invoice AS I ON C.CustomerId = I.CustomerId \nGROUP BY C.CustomerId \nHAVING SUM(I.Total) <= 20;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique first names of customers from the 'Customer' table who have made purchases, as indicated by their presence in the 'Invoice' table. The placeholder in the WHERE clause represents the country of the customers.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT Customer.LastName \nFROM Customer \nLEFT JOIN Invoice ON Customer.CustomerId = Invoice.CustomerId \nGROUP BY Customer.CustomerId \nHAVING SUM(Invoice.Total) <= 20;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.861",
        "c_low": "SELECT Address FROM Customer WHERE CustomerId IN (SELECT CustomerId FROM Invoice) AND Country = 'Germany';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique billing countries from the 'Invoice' table. The placeholder in the SELECT statement indicates that the query will return distinct values for the billing country associated with invoices.\",\n        \"virtual_table\": \"SELECT distinct(BillingCountry) FROM INVOICE\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the cities of customers who are supported by a specific employee. The placeholder in the WHERE clause represents the postal code of the customer.\",\n        \"virtual_table\": \"SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT Address, City, State, Country, PostalCode FROM Customer WHERE Country = 'Germany' AND CustomerId IN (SELECT CustomerId FROM Invoice)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique first names of customers from the 'Customer' table who have made purchases, as indicated by their presence in the 'Invoice' table. The placeholder in the WHERE clause represents the country of the customers.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the invoice dates for customers from the 'Customer' table based on their first and last names. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  [PLACEHOLDER-TYPE:STRING] AND LastName  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode \nFROM Customer \nJOIN Invoice ON Customer.CustomerId = Invoice.CustomerId \nWHERE Customer.Country = 'Germany';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT DISTINCT Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode \nFROM Customer \nJOIN Invoice ON Customer.CustomerId = Invoice.CustomerId \nWHERE Customer.Country = 'Germany';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique billing countries from the 'Invoice' table. The placeholder in the SELECT statement indicates that the query will return distinct values for the billing country associated with invoices.\",\n        \"virtual_table\": \"SELECT distinct(BillingCountry) FROM INVOICE\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT Address FROM Customer WHERE Country = 'Germany' AND CustomerId IN (SELECT CustomerId FROM Invoice)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique first names of customers from the 'Customer' table who have made purchases, as indicated by their presence in the 'Invoice' table. The placeholder in the WHERE clause represents the country of the customers.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the invoice dates for customers from the 'Customer' table based on their first and last names. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  [PLACEHOLDER-TYPE:STRING] AND LastName  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the cities of customers who are supported by a specific employee. The placeholder in the WHERE clause represents the postal code of the customer.\",\n        \"virtual_table\": \"SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode \nFROM Customer \nJOIN Invoice ON Customer.CustomerId = Invoice.CustomerId \nWHERE Customer.Country = 'Germany';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.862",
        "c_low": "SELECT DISTINCT Address, City, State, PostalCode FROM Customer AS C JOIN Invoice AS I ON C.CustomerId = I.CustomerId WHERE C.Country = 'Germany';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique billing countries from the 'Invoice' table. The placeholder in the SELECT statement indicates that the query will return distinct values for the billing country associated with invoices.\",\n        \"virtual_table\": \"SELECT distinct(BillingCountry) FROM INVOICE\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the cities of customers who are supported by a specific employee. The placeholder in the WHERE clause represents the postal code of the customer.\",\n        \"virtual_table\": \"SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT Address FROM Customer WHERE Country = 'Germany' AND CustomerId IN (SELECT CustomerId FROM Invoice)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique first names of customers from the 'Customer' table who have made purchases, as indicated by their presence in the 'Invoice' table. The placeholder in the WHERE clause represents the country of the customers.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the invoice dates for customers from the 'Customer' table based on their first and last names. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  [PLACEHOLDER-TYPE:STRING] AND LastName  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode \nFROM Customer \nJOIN Invoice ON Customer.CustomerId = Invoice.CustomerId \nWHERE Customer.Country = 'Germany';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT DISTINCT Customer.Address, Customer.City, Customer.State, Customer.PostalCode \nFROM Customer \nJOIN Invoice ON Customer.CustomerId = Invoice.CustomerId \nWHERE Customer.Country = 'Germany';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique billing countries from the 'Invoice' table. The placeholder in the SELECT statement indicates that the query will return distinct values for the billing country associated with invoices.\",\n        \"virtual_table\": \"SELECT distinct(BillingCountry) FROM INVOICE\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT Address FROM Customer WHERE Country = 'Germany' AND CustomerId IN (SELECT CustomerId FROM Invoice)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique first names of customers from the 'Customer' table who have made purchases, as indicated by their presence in the 'Invoice' table. The placeholder in the WHERE clause represents the country of the customers.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the invoice dates for customers from the 'Customer' table based on their first and last names. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  [PLACEHOLDER-TYPE:STRING] AND LastName  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the cities of customers who are supported by a specific employee. The placeholder in the WHERE clause represents the postal code of the customer.\",\n        \"virtual_table\": \"SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT Customer.Address, Customer.City, Customer.State, Customer.Country, Customer.PostalCode \nFROM Customer \nJOIN Invoice ON Customer.CustomerId = Invoice.CustomerId \nWHERE Customer.Country = 'Germany';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.869",
        "c_low": "SELECT e.FirstName, e.EmployeeId\nFROM Employee e\nJOIN Customer c ON e.EmployeeId = c.SupportRepId\nGROUP BY e.EmployeeId\nHAVING COUNT(c.CustomerId) >= 10;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT e.FirstName, e.EmployeeId\nFROM Employee e\nJOIN Customer c ON e.EmployeeId = c.SupportRepId\nGROUP BY e.EmployeeId\nHAVING COUNT(c.CustomerId) >= 10;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT E.FirstName, E.EmployeeId \nFROM Employee AS E \nJOIN Customer AS C ON E.EmployeeId = C.SupportRepId \nGROUP BY E.EmployeeId, E.FirstName \nHAVING COUNT(C.CustomerId) >= 10;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of employees who are assigned as support representatives for customers with a specific first name. The placeholder in the WHERE clause represents the customer's first name.\",\n        \"virtual_table\": \"SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT e.FirstName, e.EmployeeId\nFROM Employee e\nJOIN Customer c ON e.EmployeeId = c.SupportRepId\nGROUP BY e.EmployeeId\nHAVING COUNT(c.CustomerId) >= 10;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT E.FirstName, E.EmployeeId \nFROM Employee AS E \nJOIN Customer AS C ON E.EmployeeId = C.SupportRepId \nGROUP BY E.EmployeeId, E.FirstName \nHAVING COUNT(C.CustomerId) >= 10;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of employees who are assigned as support representatives for customers with a specific first name. The placeholder in the WHERE clause represents the customer's first name.\",\n        \"virtual_table\": \"SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT e.FirstName, e.EmployeeId\nFROM Employee e\nJOIN Customer c ON e.EmployeeId = c.SupportRepId\nGROUP BY e.EmployeeId\nHAVING COUNT(c.CustomerId) >= 10;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.870",
        "c_low": "SELECT E.FirstName, E.EmployeeId \nFROM Employee AS E \nJOIN Customer AS C ON E.EmployeeId = C.SupportRepId \nGROUP BY E.EmployeeId, E.FirstName \nHAVING COUNT(C.CustomerId) >= 10;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the cities of customers who are supported by a specific employee. The placeholder in the WHERE clause represents the postal code of the customer.\",\n        \"virtual_table\": \"SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT e.FirstName, e.EmployeeId AS SupportRepId\nFROM Employee e\nJOIN Customer c ON e.EmployeeId = c.SupportRepId\nGROUP BY e.EmployeeId\nHAVING COUNT(c.CustomerId) >= 10;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT E.FirstName, E.EmployeeId \nFROM Employee AS E \nJOIN Customer AS C ON E.EmployeeId = C.SupportRepId \nGROUP BY E.EmployeeId, E.FirstName \nHAVING COUNT(C.CustomerId) >= 10;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of employees who are assigned as support representatives for customers with a specific first name. The placeholder in the WHERE clause represents the customer's first name.\",\n        \"virtual_table\": \"SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT e.FirstName, e.EmployeeId AS SupportRepId\nFROM Employee e\nJOIN Customer c ON e.EmployeeId = c.SupportRepId\nGROUP BY e.EmployeeId\nHAVING COUNT(c.CustomerId) >= 10;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT E.FirstName, E.EmployeeId \nFROM Employee AS E \nJOIN Customer AS C ON E.EmployeeId = C.SupportRepId \nGROUP BY E.EmployeeId \nHAVING COUNT(C.CustomerId) >= 10;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of employees who are assigned as support representatives for customers with a specific first name. The placeholder in the WHERE clause represents the customer's first name.\",\n        \"virtual_table\": \"SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the cities of customers who are supported by a specific employee. The placeholder in the WHERE clause represents the postal code of the customer.\",\n        \"virtual_table\": \"SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT e.FirstName, e.EmployeeId AS SupportRepId\nFROM Employee e\nJOIN Customer c ON e.EmployeeId = c.SupportRepId\nGROUP BY e.EmployeeId\nHAVING COUNT(c.CustomerId) >= 10;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.871",
        "c_low": "SELECT e.LastName\nFROM Employee e\nJOIN Customer c ON e.EmployeeId = c.SupportRepId\nGROUP BY e.EmployeeId\nHAVING COUNT(c.CustomerId) <= 20;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT e.LastName\nFROM Employee e\nJOIN Customer c ON e.EmployeeId = c.SupportRepId\nGROUP BY e.EmployeeId\nHAVING COUNT(c.CustomerId) <= 20;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT E.LastName\nFROM Employee AS E\nJOIN Customer AS C ON E.EmployeeId = C.SupportRepId\nGROUP BY E.EmployeeId\nHAVING COUNT(C.CustomerId) <= 20;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of employees who are assigned as support representatives for customers with a specific first name. The placeholder in the WHERE clause represents the customer's first name.\",\n        \"virtual_table\": \"SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT e.LastName\nFROM Employee e\nJOIN Customer c ON e.EmployeeId = c.SupportRepId\nGROUP BY e.EmployeeId\nHAVING COUNT(c.CustomerId) <= 20;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT E.LastName\nFROM Employee AS E\nJOIN Customer AS C ON E.EmployeeId = C.SupportRepId\nGROUP BY E.LastName\nHAVING COUNT(C.CustomerId) <= 20;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of employees who are assigned as support representatives for customers with a specific first name. The placeholder in the WHERE clause represents the customer's first name.\",\n        \"virtual_table\": \"SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT e.LastName\nFROM Employee e\nJOIN Customer c ON e.EmployeeId = c.SupportRepId\nGROUP BY e.EmployeeId\nHAVING COUNT(c.CustomerId) <= 20;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.872",
        "c_low": "SELECT e.LastName\nFROM Employee e\nJOIN Customer c ON e.EmployeeId = c.SupportRepId\nGROUP BY e.EmployeeId\nHAVING COUNT(c.CustomerId) <= 20;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT e.LastName\nFROM Employee e\nJOIN Customer c ON e.EmployeeId = c.SupportRepId\nGROUP BY e.EmployeeId\nHAVING COUNT(c.CustomerId) <= 20;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT E.LastName \nFROM Employee AS E \nJOIN Customer AS C ON E.EmployeeId = C.SupportRepId \nGROUP BY E.EmployeeId \nHAVING COUNT(C.CustomerId) <= 20;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of employees who are assigned as support representatives for customers with a specific first name. The placeholder in the WHERE clause represents the customer's first name.\",\n        \"virtual_table\": \"SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT e.LastName\nFROM Employee e\nJOIN Customer c ON e.EmployeeId = c.SupportRepId\nGROUP BY e.EmployeeId\nHAVING COUNT(c.CustomerId) <= 20;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT E.LastName \nFROM Employee AS E \nJOIN Customer AS C ON E.EmployeeId = C.SupportRepId \nGROUP BY E.EmployeeId \nHAVING COUNT(C.CustomerId) <= 20;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of employees who are assigned as support representatives for customers with a specific first name. The placeholder in the WHERE clause represents the customer's first name.\",\n        \"virtual_table\": \"SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT e.LastName\nFROM Employee e\nJOIN Customer c ON e.EmployeeId = c.SupportRepId\nGROUP BY e.EmployeeId\nHAVING COUNT(c.CustomerId) <= 20;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.893",
        "c_low": "SELECT ap.Customer_Phone \nFROM Available_Policies ap \nJOIN Customers_Policies cp ON ap.Policy_ID = cp.Policy_ID \nJOIN Customers c ON cp.Customer_ID = c.Customer_ID \nWHERE ap.policy_type_code = 'Life Insurance';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of policies associated with a specific customer from the 'Customers' table. The placeholder in the WHERE clause represents the customer's name.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT ap.Customer_Phone \nFROM Available_Policies AS ap \nJOIN Customers_Policies AS cp ON ap.Policy_ID = cp.Policy_ID \nJOIN Services AS s ON cp.Policy_ID = s.Service_ID \nWHERE s.Service_name = 'Life Insurance';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of customers who have reported a first notification of loss associated with specific services. The placeholders in the WHERE clause represent the names of the services being queried.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  [PLACEHOLDER-TYPE:STRING] OR t3.service_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer names from the 'Customers' table who have associated policies in the 'Customers_Policies' table. The results are grouped by customer name and ordered by the number of policies each customer has, with a limit on the number of results returned based on a specified number placeholder.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT ap.Customer_Phone \nFROM Available_Policies AS ap \nJOIN Customers_Policies AS cp ON ap.Policy_ID = cp.Policy_ID \nJOIN Customers AS c ON cp.Customer_ID = c.Customer_ID \nWHERE ap.policy_type_code = 'Life Insurance';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves distinct policy type codes from the 'Available_Policies' table for a specific customer. The customer is identified by their name, which is determined by selecting the most frequently occurring customer name from the 'Customers' table. The placeholders in the query allow for dynamic input of the customer name and the limit for the number of customers to consider.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT ap.Customer_Phone \nFROM Available_Policies ap \nJOIN Customers_Policies cp ON ap.Policy_ID = cp.Policy_ID \nJOIN Services s ON cp.Policy_ID = s.Service_ID \nWHERE s.Service_name = 'Life Insurance';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT ap.Customer_Phone \nFROM Available_Policies ap \nJOIN Customers_Policies cp ON ap.Policy_ID = cp.Policy_ID \nJOIN First_Notification_of_Loss fnol ON cp.Customer_ID = fnol.Customer_ID AND cp.Policy_ID = fnol.Policy_ID \nJOIN Services s ON fnol.Service_ID = s.Service_ID \nWHERE s.Service_name = 'Life Insurance';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of policies associated with a specific customer from the 'Customers' table. The placeholder in the WHERE clause represents the customer's name.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer names from the 'Customers' table who have associated policies in the 'Customers_Policies' table. The results are grouped by customer name and ordered by the number of policies each customer has, with a limit on the number of results returned based on a specified number placeholder.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT ap.Customer_Phone \nFROM Available_Policies AS ap \nJOIN Customers_Policies AS cp ON ap.Policy_ID = cp.Policy_ID \nJOIN First_Notification_of_Loss AS fnol ON cp.Customer_ID = fnol.Customer_ID AND cp.Policy_ID = fnol.Policy_ID \nJOIN Services AS s ON fnol.Service_ID = s.Service_ID \nWHERE s.Service_name = 'Life Insurance';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of customers who have reported a first notification of loss associated with specific services. The placeholders in the WHERE clause represent the names of the services being queried.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  [PLACEHOLDER-TYPE:STRING] OR t3.service_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table retrieves distinct policy type codes from the 'Available_Policies' table for a specific customer. The customer is identified by their name, which is determined by selecting the most frequently occurring customer name from the 'Customers' table. The placeholders in the query allow for dynamic input of the customer name and the limit for the number of customers to consider.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n"
    },
    {
        "sample_id": "train.894",
        "c_low": "SELECT ap.Customer_Phone \nFROM Available_Policies ap \nJOIN Customers_Policies cp ON ap.Policy_ID = cp.Policy_ID \nJOIN Customers c ON cp.Customer_ID = c.Customer_ID \nWHERE ap.policy_type_code = 'Life Insurance';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of policies associated with a specific customer from the 'Customers' table. The placeholder in the WHERE clause represents the customer's name.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT ap.Customer_Phone \nFROM Available_Policies AS ap \nJOIN Customers_Policies AS cp ON ap.Policy_ID = cp.Policy_ID \nJOIN Customers AS c ON cp.Customer_ID = c.Customer_ID \nWHERE ap.policy_type_code = 'Life Insurance';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of customers who have reported a first notification of loss associated with specific services. The placeholders in the WHERE clause represent the names of the services being queried.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  [PLACEHOLDER-TYPE:STRING] OR t3.service_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer names from the 'Customers' table who have associated policies in the 'Customers_Policies' table. The results are grouped by customer name and ordered by the number of policies each customer has, with a limit on the number of results returned based on a specified number placeholder.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT ap.Customer_Phone \nFROM Available_Policies ap \nJOIN Customers_Policies cp ON ap.Policy_ID = cp.Policy_ID \nJOIN Customers c ON cp.Customer_ID = c.Customer_ID \nWHERE ap.policy_type_code = 'Life Insurance';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves distinct policy type codes from the 'Available_Policies' table for a specific customer. The customer is identified by their name, which is determined by selecting the most frequently occurring customer name from the 'Customers' table. The placeholders in the query allow for dynamic input of the customer name and the limit for the number of customers to consider.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT ap.Customer_Phone\nFROM Available_Policies ap\nJOIN Customers_Policies cp ON ap.Policy_ID = cp.Policy_ID\nJOIN Services s ON ap.policy_type_code = s.Service_ID\nWHERE s.Service_name = 'Life Insurance';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT ap.Customer_Phone \nFROM Available_Policies AS ap \nJOIN Customers_Policies AS cp ON ap.Policy_ID = cp.Policy_ID \nJOIN Customers AS c ON cp.Customer_ID = c.Customer_ID \nWHERE ap.policy_type_code = 'Life Insurance';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer names from the 'Customers' table who have associated policies in the 'Customers_Policies' table. The results are grouped by customer name and ordered by the number of policies each customer has, with a limit on the number of results returned based on a specified number placeholder.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of policies associated with a specific customer from the 'Customers' table. The placeholder in the WHERE clause represents the customer's name.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT ap.Customer_Phone \nFROM Available_Policies AS ap \nJOIN Customers_Policies AS cp ON ap.Policy_ID = cp.Policy_ID \nJOIN Customers AS c ON cp.Customer_ID = c.Customer_ID \nWHERE ap.policy_type_code = 'Life Insurance';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of customers who have reported a first notification of loss associated with specific services. The placeholders in the WHERE clause represent the names of the services being queried.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  [PLACEHOLDER-TYPE:STRING] OR t3.service_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table retrieves distinct policy type codes from the 'Available_Policies' table for a specific customer. The customer is identified by their name, which is determined by selecting the most frequently occurring customer name from the 'Customers' table. The placeholders in the query allow for dynamic input of the customer name and the limit for the number of customers to consider.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n"
    },
    {
        "sample_id": "train.895",
        "c_low": "SELECT policy_type_code, COUNT(*) as policy_count \nFROM Available_Policies AS ap \nJOIN Customers_Policies AS cp ON ap.Policy_ID = cp.Policy_ID \nGROUP BY policy_type_code \nORDER BY policy_count DESC \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of policies associated with a specific customer from the 'Customers' table. The placeholder in the WHERE clause represents the customer's name.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT policy_type_code, COUNT(*) as policy_count FROM Available_Policies GROUP BY policy_type_code ORDER BY policy_count DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a distinct list of policy types associated with a specific customer from the 'Customers', 'Customers_Policies', and 'Available_Policies' tables. The placeholder in the WHERE clause represents the name of the customer whose policies are being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer names from the 'Customers' table who have associated policies in the 'Customers_Policies' table. The results are grouped by customer name and ordered by the number of policies each customer has, with a limit on the number of results returned based on a specified number placeholder.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT policy_type_code, COUNT(*) as record_count \nFROM Available_Policies \nJOIN Customers_Policies ON Available_Policies.Policy_ID = Customers_Policies.Policy_ID \nGROUP BY policy_type_code \nORDER BY record_count DESC \nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves distinct policy type codes from the 'Available_Policies' table for a specific customer. The customer is identified by their name, which is determined by selecting the most frequently occurring customer name from the 'Customers' table. The placeholders in the query allow for dynamic input of the customer name and the limit for the number of customers to consider.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_1": "SELECT policy_type_code, COUNT(*) as record_count \nFROM Available_Policies \nJOIN Customers_Policies ON Available_Policies.Policy_ID = Customers_Policies.Policy_ID \nGROUP BY policy_type_code \nORDER BY record_count DESC \nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT policy_type_code, COUNT(*) as policy_count \nFROM Available_Policies \nJOIN Customers_Policies ON Available_Policies.Policy_ID = Customers_Policies.Policy_ID \nGROUP BY policy_type_code \nORDER BY policy_count DESC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of policies associated with a specific customer from the 'Customers' table. The placeholder in the WHERE clause represents the customer's name.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer names from the 'Customers' table who have associated policies in the 'Customers_Policies' table. The results are grouped by customer name and ordered by the number of policies each customer has, with a limit on the number of results returned based on a specified number placeholder.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT policy_type_code, COUNT(*) as record_count FROM Available_Policies GROUP BY policy_type_code ORDER BY record_count DESC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves distinct policy type codes from the 'Available_Policies' table for a specific customer. The customer is identified by their name, which is determined by selecting the most frequently occurring customer name from the 'Customers' table. The placeholders in the query allow for dynamic input of the customer name and the limit for the number of customers to consider.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of policy types associated with a specific customer from the 'Customers', 'Customers_Policies', and 'Available_Policies' tables. The placeholder in the WHERE clause represents the name of the customer whose policies are being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.896",
        "c_low": "SELECT policy_type_code, COUNT(*) as policy_count \nFROM Available_Policies \nGROUP BY policy_type_code \nORDER BY policy_count DESC \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of policies associated with a specific customer from the 'Customers' table. The placeholder in the WHERE clause represents the customer's name.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT policy_type_code, COUNT(*) as frequency FROM Available_Policies GROUP BY policy_type_code ORDER BY frequency DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a distinct list of policy types associated with a specific customer from the 'Customers', 'Customers_Policies', and 'Available_Policies' tables. The placeholder in the WHERE clause represents the name of the customer whose policies are being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer names from the 'Customers' table who have associated policies in the 'Customers_Policies' table. The results are grouped by customer name and ordered by the number of policies each customer has, with a limit on the number of results returned based on a specified number placeholder.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT policy_type_code, COUNT(*) as frequency FROM Available_Policies GROUP BY policy_type_code ORDER BY frequency DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves distinct policy type codes from the 'Available_Policies' table for a specific customer. The customer is identified by their name, which is determined by selecting the most frequently occurring customer name from the 'Customers' table. The placeholders in the query allow for dynamic input of the customer name and the limit for the number of customers to consider.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the opening and closing dates of policies associated with a specific customer from the 'Customers' and 'Customers_Policies' tables. The placeholder in the WHERE clause represents the name of the customer being queried.\",\n        \"virtual_table\": \"SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT policy_type_code, COUNT(*) as frequency\nFROM Available_Policies\nGROUP BY policy_type_code\nORDER BY frequency DESC\nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT policy_type_code, COUNT(*) as frequency FROM Available_Policies GROUP BY policy_type_code ORDER BY frequency DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer names from the 'Customers' table who have associated policies in the 'Customers_Policies' table. The results are grouped by customer name and ordered by the number of policies each customer has, with a limit on the number of results returned based on a specified number placeholder.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of policies associated with a specific customer from the 'Customers' table. The placeholder in the WHERE clause represents the customer's name.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the opening and closing dates of policies associated with a specific customer from the 'Customers' and 'Customers_Policies' tables. The placeholder in the WHERE clause represents the name of the customer being queried.\",\n        \"virtual_table\": \"SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT policy_type_code, COUNT(*) as frequency FROM Available_Policies GROUP BY policy_type_code ORDER BY frequency DESC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves distinct policy type codes from the 'Available_Policies' table for a specific customer. The customer is identified by their name, which is determined by selecting the most frequently occurring customer name from the 'Customers' table. The placeholders in the query allow for dynamic input of the customer name and the limit for the number of customers to consider.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of policy types associated with a specific customer from the 'Customers', 'Customers_Policies', and 'Available_Policies' tables. The placeholder in the WHERE clause represents the name of the customer whose policies are being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.897",
        "c_low": "SELECT ap.Customer_Phone\nFROM Available_Policies ap\nJOIN Customers_Policies cp ON ap.Policy_ID = cp.Policy_ID\nJOIN (SELECT policy_type_code, COUNT(*) as policy_count\n      FROM Available_Policies\n      JOIN Customers_Policies ON Available_Policies.Policy_ID = Customers_Policies.Policy_ID\n      GROUP BY policy_type_code\n      ORDER BY policy_count DESC\n      LIMIT 1) AS most_popular_policy ON ap.policy_type_code = most_popular_policy.policy_type_code;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of policies associated with a specific customer from the 'Customers' table. The placeholder in the WHERE clause represents the customer's name.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT ap.Customer_Phone \nFROM Available_Policies AS ap \nJOIN Customers_Policies AS cp ON ap.Policy_ID = cp.Policy_ID \nJOIN Customers AS c ON cp.Customer_ID = c.Customer_ID \nWHERE ap.policy_type_code = (\n    SELECT policy_type_code \n    FROM Available_Policies \n    JOIN Customers_Policies ON Available_Policies.Policy_ID = Customers_Policies.Policy_ID \n    GROUP BY policy_type_code \n    ORDER BY COUNT(*) DESC \n    LIMIT 1\n);",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a distinct list of policy types associated with a specific customer from the 'Customers', 'Customers_Policies', and 'Available_Policies' tables. The placeholder in the WHERE clause represents the name of the customer whose policies are being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer names from the 'Customers' table who have associated policies in the 'Customers_Policies' table. The results are grouped by customer name and ordered by the number of policies each customer has, with a limit on the number of results returned based on a specified number placeholder.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of customers who have reported a first notification of loss associated with specific services. The placeholders in the WHERE clause represent the names of the services being queried.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  [PLACEHOLDER-TYPE:STRING] OR t3.service_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT ap.Customer_Phone \nFROM Available_Policies AS ap \nJOIN Customers_Policies AS cp ON ap.Policy_ID = cp.Policy_ID \nJOIN Customers AS c ON cp.Customer_ID = c.Customer_ID \nWHERE ap.policy_type_code = \n    (SELECT policy_type_code \n     FROM Available_Policies \n     GROUP BY policy_type_code \n     ORDER BY COUNT(*) DESC \n     LIMIT 1);",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves distinct policy type codes from the 'Available_Policies' table for a specific customer. The customer is identified by their name, which is determined by selecting the most frequently occurring customer name from the 'Customers' table. The placeholders in the query allow for dynamic input of the customer name and the limit for the number of customers to consider.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT ap.Customer_Phone\nFROM Available_Policies ap\nJOIN Customers_Policies cp ON ap.Policy_ID = cp.Policy_ID\nJOIN (\n    SELECT policy_type_code, COUNT(*) as policy_count\n    FROM Available_Policies\n    JOIN Customers_Policies ON Available_Policies.Policy_ID = Customers_Policies.Policy_ID\n    GROUP BY policy_type_code\n    ORDER BY policy_count DESC\n    LIMIT 1\n) popular_policy ON ap.policy_type_code = popular_policy.policy_type_code;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT ap.Customer_Phone \nFROM Available_Policies AS ap \nJOIN Customers_Policies AS cp ON ap.Policy_ID = cp.Policy_ID \nJOIN Customers AS c ON cp.Customer_ID = c.Customer_ID \nWHERE ap.policy_type_code = (\n    SELECT policy_type_code \n    FROM Available_Policies \n    JOIN Customers_Policies ON Available_Policies.Policy_ID = Customers_Policies.Policy_ID \n    GROUP BY policy_type_code \n    ORDER BY COUNT(*) DESC \n    LIMIT 1\n)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer names from the 'Customers' table who have associated policies in the 'Customers_Policies' table. The results are grouped by customer name and ordered by the number of policies each customer has, with a limit on the number of results returned based on a specified number placeholder.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of policies associated with a specific customer from the 'Customers' table. The placeholder in the WHERE clause represents the customer's name.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT ap.Customer_Phone FROM Available_Policies AS ap JOIN Customers_Policies AS cp ON ap.Policy_ID = cp.Policy_ID JOIN Customers AS c ON cp.Customer_ID = c.Customer_ID WHERE ap.policy_type_code = (SELECT ap2.policy_type_code FROM Available_Policies AS ap2 JOIN Customers_Policies AS cp2 ON ap2.Policy_ID = cp2.Policy_ID JOIN Customers AS c2 ON cp2.Customer_ID = c2.Customer_ID GROUP BY ap2.policy_type_code ORDER BY COUNT(*) DESC LIMIT 1)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves distinct policy type codes from the 'Available_Policies' table for a specific customer. The customer is identified by their name, which is determined by selecting the most frequently occurring customer name from the 'Customers' table. The placeholders in the query allow for dynamic input of the customer name and the limit for the number of customers to consider.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of policy types associated with a specific customer from the 'Customers', 'Customers_Policies', and 'Available_Policies' tables. The placeholder in the WHERE clause represents the name of the customer whose policies are being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of customers who have reported a first notification of loss associated with specific services. The placeholders in the WHERE clause represent the names of the services being queried.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  [PLACEHOLDER-TYPE:STRING] OR t3.service_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.898",
        "c_low": "WITH PolicyCounts AS (\n    SELECT ap.policy_type_code, COUNT(cp.Policy_ID) AS policy_count\n    FROM Available_Policies ap\n    JOIN Customers_Policies cp ON ap.Policy_ID = cp.Policy_ID\n    GROUP BY ap.policy_type_code\n),\nMostCommonPolicy AS (\n    SELECT policy_type_code\n    FROM PolicyCounts\n    ORDER BY policy_count DESC\n    LIMIT 1\n)\nSELECT c.Customer_Phone\nFROM Customers c\nJOIN Customers_Policies cp ON c.Customer_ID = cp.Customer_ID\nJOIN Available_Policies ap ON cp.Policy_ID = ap.Policy_ID\nWHERE ap.policy_type_code = (SELECT policy_type_code FROM MostCommonPolicy);",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of policies associated with a specific customer from the 'Customers' table. The placeholder in the WHERE clause represents the customer's name.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT ap.Customer_Phone \nFROM Available_Policies AS ap \nJOIN Customers_Policies AS cp ON ap.Policy_ID = cp.Policy_ID \nJOIN Customers AS c ON cp.Customer_ID = c.Customer_ID \nWHERE ap.policy_type_code = (\n    SELECT policy_type_code \n    FROM Available_Policies \n    GROUP BY policy_type_code \n    ORDER BY COUNT(*) DESC \n    LIMIT 1\n);",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer names from the 'Customers' table who have associated policies in the 'Customers_Policies' table. The results are grouped by customer name and ordered by the number of policies each customer has, with a limit on the number of results returned based on a specified number placeholder.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of policy types associated with a specific customer from the 'Customers', 'Customers_Policies', and 'Available_Policies' tables. The placeholder in the WHERE clause represents the name of the customer whose policies are being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of customers who have reported a first notification of loss associated with specific services. The placeholders in the WHERE clause represent the names of the services being queried.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  [PLACEHOLDER-TYPE:STRING] OR t3.service_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT ap.Customer_Phone FROM Available_Policies ap JOIN Customers_Policies cp ON ap.Policy_ID = cp.Policy_ID JOIN Customers c ON cp.Customer_ID = c.Customer_ID WHERE ap.policy_type_code = (SELECT policy_type_code FROM Available_Policies GROUP BY policy_type_code ORDER BY COUNT(*) DESC LIMIT 1)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves distinct policy type codes from the 'Available_Policies' table for a specific customer. The customer is identified by their name, which is determined by selecting the most frequently occurring customer name from the 'Customers' table. The placeholders in the query allow for dynamic input of the customer name and the limit for the number of customers to consider.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT c.Customer_Phone\nFROM Customers c\nJOIN Customers_Policies cp ON c.Customer_ID = cp.Customer_ID\nJOIN Available_Policies ap ON cp.Policy_ID = ap.Policy_ID\nWHERE ap.policy_type_code = (\n    SELECT policy_type_code\n    FROM Available_Policies\n    GROUP BY policy_type_code\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n);",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT ap.Customer_Phone\nFROM Available_Policies ap\nJOIN Customers_Policies cp ON ap.Policy_ID = cp.Policy_ID\nJOIN Customers c ON cp.Customer_ID = c.Customer_ID\nWHERE ap.policy_type_code = (\n    SELECT policy_type_code\n    FROM Available_Policies\n    GROUP BY policy_type_code\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer names from the 'Customers' table who have associated policies in the 'Customers_Policies' table. The results are grouped by customer name and ordered by the number of policies each customer has, with a limit on the number of results returned based on a specified number placeholder.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of policies associated with a specific customer from the 'Customers' table. The placeholder in the WHERE clause represents the customer's name.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT t1.Customer_Phone FROM Customers AS t1 JOIN Customers_Policies AS t2 ON t1.Customer_ID = t2.Customer_ID JOIN Available_Policies AS t3 ON t2.Policy_ID = t3.Policy_ID WHERE t3.policy_type_code = (SELECT policy_type_code FROM Available_Policies GROUP BY policy_type_code ORDER BY COUNT(*) DESC LIMIT 1)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves distinct policy type codes from the 'Available_Policies' table for a specific customer. The customer is identified by their name, which is determined by selecting the most frequently occurring customer name from the 'Customers' table. The placeholders in the query allow for dynamic input of the customer name and the limit for the number of customers to consider.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of policy types associated with a specific customer from the 'Customers', 'Customers_Policies', and 'Available_Policies' tables. The placeholder in the WHERE clause represents the name of the customer whose policies are being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of customers who have reported a first notification of loss associated with specific services. The placeholders in the WHERE clause represent the names of the services being queried.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  [PLACEHOLDER-TYPE:STRING] OR t3.service_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.899",
        "c_low": "SELECT policy_type_code FROM Available_Policies WHERE Policy_ID IN (SELECT Policy_ID FROM Customers_Policies GROUP BY Policy_ID HAVING COUNT(DISTINCT Customer_ID) > 4);",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of policies associated with a specific customer from the 'Customers' table. The placeholder in the WHERE clause represents the customer's name.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id GROUP BY t3.policy_type_code HAVING COUNT(DISTINCT t1.customer_id) > 4;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a distinct list of policy types associated with a specific customer from the 'Customers', 'Customers_Policies', and 'Available_Policies' tables. The placeholder in the WHERE clause represents the name of the customer whose policies are being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer names from the 'Customers' table who have associated policies in the 'Customers_Policies' table. The results are grouped by customer name and ordered by the number of policies each customer has, with a limit on the number of results returned based on a specified number placeholder.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of customers who have reported a first notification of loss associated with specific services. The placeholders in the WHERE clause represent the names of the services being queried.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  [PLACEHOLDER-TYPE:STRING] OR t3.service_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT policy_type_code FROM Available_Policies WHERE Policy_ID IN (SELECT Policy_ID FROM Customers_Policies GROUP BY Policy_ID HAVING COUNT(DISTINCT Customer_ID) > 4)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves distinct policy type codes from the 'Available_Policies' table for a specific customer. The customer is identified by their name, which is determined by selecting the most frequently occurring customer name from the 'Customers' table. The placeholders in the query allow for dynamic input of the customer name and the limit for the number of customers to consider.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_1": "SELECT ap.policy_type_code\nFROM Available_Policies ap\nJOIN Customers_Policies cp ON ap.Policy_ID = cp.Policy_ID\nGROUP BY ap.policy_type_code\nHAVING COUNT(DISTINCT cp.Customer_ID) > 4;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT ap.policy_type_code FROM Available_Policies AS ap JOIN Customers_Policies AS cp ON ap.Policy_ID = cp.Policy_ID GROUP BY ap.policy_type_code HAVING COUNT(DISTINCT cp.Customer_ID) > 4;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of policies associated with a specific customer from the 'Customers' table. The placeholder in the WHERE clause represents the customer's name.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer names from the 'Customers' table who have associated policies in the 'Customers_Policies' table. The results are grouped by customer name and ordered by the number of policies each customer has, with a limit on the number of results returned based on a specified number placeholder.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT policy_type_code FROM Available_Policies WHERE Policy_ID IN (SELECT Policy_ID FROM Customers_Policies GROUP BY Policy_ID HAVING COUNT(DISTINCT Customer_ID) > 4)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves distinct policy type codes from the 'Available_Policies' table for a specific customer. The customer is identified by their name, which is determined by selecting the most frequently occurring customer name from the 'Customers' table. The placeholders in the query allow for dynamic input of the customer name and the limit for the number of customers to consider.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of policy types associated with a specific customer from the 'Customers', 'Customers_Policies', and 'Available_Policies' tables. The placeholder in the WHERE clause represents the name of the customer whose policies are being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of customers who have reported a first notification of loss associated with specific services. The placeholders in the WHERE clause represent the names of the services being queried.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  [PLACEHOLDER-TYPE:STRING] OR t3.service_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.900",
        "c_low": "SELECT policy_type_code FROM Available_Policies WHERE Policy_ID IN (SELECT Policy_ID FROM Customers_Policies GROUP BY Policy_ID HAVING COUNT(DISTINCT Customer_ID) > 4);",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of policies associated with a specific customer from the 'Customers' table. The placeholder in the WHERE clause represents the customer's name.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT policy_type_code FROM Available_Policies WHERE Policy_ID IN (SELECT Policy_ID FROM Customers_Policies GROUP BY Policy_ID HAVING COUNT(DISTINCT Customer_ID) > 4);",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a distinct list of policy types associated with a specific customer from the 'Customers', 'Customers_Policies', and 'Available_Policies' tables. The placeholder in the WHERE clause represents the name of the customer whose policies are being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer names from the 'Customers' table who have associated policies in the 'Customers_Policies' table. The results are grouped by customer name and ordered by the number of policies each customer has, with a limit on the number of results returned based on a specified number placeholder.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT policy_type_code FROM Available_Policies WHERE Policy_ID IN (SELECT Policy_ID FROM Customers_Policies GROUP BY Policy_ID HAVING COUNT(DISTINCT Customer_ID) > 4)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves distinct policy type codes from the 'Available_Policies' table for a specific customer. The customer is identified by their name, which is determined by selecting the most frequently occurring customer name from the 'Customers' table. The placeholders in the query allow for dynamic input of the customer name and the limit for the number of customers to consider.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_1": "SELECT ap.policy_type_code\nFROM Available_Policies ap\nJOIN Customers_Policies cp ON ap.Policy_ID = cp.Policy_ID\nGROUP BY ap.policy_type_code\nHAVING COUNT(DISTINCT cp.Customer_ID) > 4;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT policy_type_code FROM Available_Policies WHERE Policy_ID IN (SELECT Policy_ID FROM Customers_Policies GROUP BY Policy_ID HAVING COUNT(Customer_ID) > 4);",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of policies associated with a specific customer from the 'Customers' table. The placeholder in the WHERE clause represents the customer's name.\",\n        \"virtual_table\": \"SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer names from the 'Customers' table who have associated policies in the 'Customers_Policies' table. The results are grouped by customer name and ordered by the number of policies each customer has, with a limit on the number of results returned based on a specified number placeholder.\",\n        \"virtual_table\": \"SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT policy_type_code FROM Available_Policies WHERE Policy_ID IN (SELECT Policy_ID FROM Customers_Policies GROUP BY Policy_ID HAVING COUNT(DISTINCT Customer_ID) > 4)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves distinct policy type codes from the 'Available_Policies' table for a specific customer. The customer is identified by their name, which is determined by selecting the most frequently occurring customer name from the 'Customers' table. The placeholders in the query allow for dynamic input of the customer name and the limit for the number of customers to consider.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of policy types associated with a specific customer from the 'Customers', 'Customers_Policies', and 'Available_Policies' tables. The placeholder in the WHERE clause represents the name of the customer whose policies are being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.930",
        "c_low": "SELECT Customer_ID FROM Customers ORDER BY Customer_ID;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Customer_ID FROM Customers ORDER BY Customer_ID ASC",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer IDs and their corresponding names from the 'Customers' table, sorted in ascending order by customer ID. The placeholders represent the customer identifiers and names.\",\n        \"virtual_table\": \"SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC\"\n    }\n}\n",
        "c_high": "SELECT Customer_ID FROM Customers ORDER BY Customer_ID;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT Customer_ID FROM Customers ORDER BY Customer_ID ASC",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer IDs and their corresponding names from the 'Customers' table, sorted in ascending order by customer ID. The placeholders represent the customer identifiers and names.\",\n        \"virtual_table\": \"SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC\"\n    }\n}\n",
        "t_2": "SELECT Customer_ID FROM Customers ORDER BY Customer_ID;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT Customer_ID FROM Customers ORDER BY Customer_ID;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.946",
        "c_low": "SELECT name, Trade_Name FROM medicine WHERE FDA_approved = 'yes';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT name, Trade_Name FROM medicine WHERE FDA_approved = 'yes';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes that interact with a specific medicine, filtered by the medicine's name and the type of interaction. The placeholders in the WHERE clause represent the medicine's name and the interaction type.\",\n        \"virtual_table\": \"SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the occurrences of each interaction type and orders them in descending order, allowing the user to specify a limit on the number of results returned.\",\n        \"virtual_table\": \"SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the types of interactions between a specific medicine and enzyme. It retrieves the interaction type from the 'medicine_enzyme_interaction' table by joining it with the 'medicine' and 'enzyme' tables based on their respective identifiers. The placeholders in the WHERE clause represent the names of the enzyme and the medicine involved in the interaction.\",\n        \"virtual_table\": \"SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT name, Trade_Name FROM medicine WHERE FDA_approved = 'yes';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique identifiers and trade names of medicines that are involved in interactions with enzymes, filtered to include only those medicines that have interactions with a specified minimum count. The placeholder in the HAVING clause represents the minimum number of interactions required.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the unique identifiers and names of medicines from the 'medicine' table that are involved in interactions with enzymes, as indicated in the 'medicine_enzyme_interaction' table. The placeholder in the HAVING clause represents the minimum number of interactions required for the medicines to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a distinct list of enzyme names, their geographical locations, and the products they produce, specifically for those enzymes that interact with medicines in a certain way. The placeholder in the WHERE clause represents the type of interaction being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT name, Trade_Name FROM medicine WHERE FDA_approved = 'yes';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the occurrences of each interaction type and orders them in descending order, allowing the user to specify a limit on the number of results returned.\",\n        \"virtual_table\": \"SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT name, Trade_Name FROM medicine WHERE FDA_approved = 'yes';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique identifiers and trade names of medicines that are involved in interactions with enzymes, filtered to include only those medicines that have interactions with a specified minimum count. The placeholder in the HAVING clause represents the minimum number of interactions required.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the unique identifiers and names of medicines from the 'medicine' table that are involved in interactions with enzymes, as indicated in the 'medicine_enzyme_interaction' table. The placeholder in the HAVING clause represents the minimum number of interactions required for the medicines to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a distinct list of enzyme names, their geographical locations, and the products they produce, specifically for those enzymes that interact with medicines in a certain way. The placeholder in the WHERE clause represents the type of interaction being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT name, Trade_Name FROM medicine WHERE FDA_approved = 'yes';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes that interact with a specific medicine, filtered by the medicine's name and the type of interaction. The placeholders in the WHERE clause represent the medicine's name and the interaction type.\",\n        \"virtual_table\": \"SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the types of interactions between a specific medicine and enzyme. It retrieves the interaction type from the 'medicine_enzyme_interaction' table by joining it with the 'medicine' and 'enzyme' tables based on their respective identifiers. The placeholders in the WHERE clause represent the names of the enzyme and the medicine involved in the interaction.\",\n        \"virtual_table\": \"SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.951",
        "c_low": "SELECT m.id, m.name, m.FDA_approved\nFROM medicine m\nJOIN medicine_enzyme_interaction mei ON m.id = mei.medicine_id\nGROUP BY m.id, m.name, m.FDA_approved\nORDER BY COUNT(mei.enzyme_id) DESC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes from the 'enzyme' table that produce a specific product. The placeholder in the WHERE clause represents the product that should not be associated with the enzymes.\",\n        \"virtual_table\": \"SELECT name FROM enzyme WHERE product != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT m.id, m.name, m.FDA_approved\nFROM medicine AS m\nJOIN medicine_enzyme_interaction AS mei ON m.id = mei.medicine_id\nGROUP BY m.id, m.name, m.FDA_approved\nORDER BY COUNT(mei.enzyme_id) DESC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the occurrences of each interaction type and orders them in descending order, allowing the user to specify a limit on the number of results returned.\",\n        \"virtual_table\": \"SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of enzymes that interact with a specific medicine, filtered by the medicine's name and the type of interaction. The placeholders in the WHERE clause represent the medicine's name and the interaction type.\",\n        \"virtual_table\": \"SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the types of interactions between a specific medicine and enzyme. It retrieves the interaction type from the 'medicine_enzyme_interaction' table by joining it with the 'medicine' and 'enzyme' tables based on their respective identifiers. The placeholders in the WHERE clause represent the names of the enzyme and the medicine involved in the interaction.\",\n        \"virtual_table\": \"SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT T1.id, T1.name, T1.FDA_approved \nFROM medicine AS T1 \nJOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id \nGROUP BY T1.id \nORDER BY COUNT(T2.enzyme_id) DESC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique identifiers and trade names of medicines that are involved in interactions with enzymes, filtered to include only those medicines that have interactions with a specified minimum count. The placeholder in the HAVING clause represents the minimum number of interactions required.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of enzyme names, their geographical locations, and the products they produce, specifically for those enzymes that interact with medicines in a certain way. The placeholder in the WHERE clause represents the type of interaction being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the unique identifiers and names of medicines from the 'medicine' table that are involved in interactions with enzymes, as indicated in the 'medicine_enzyme_interaction' table. The placeholder in the HAVING clause represents the minimum number of interactions required for the medicines to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT m.id, m.name, m.FDA_approved\nFROM medicine m\nJOIN medicine_enzyme_interaction mei ON m.id = mei.medicine_id\nGROUP BY m.id, m.name, m.FDA_approved\nORDER BY COUNT(mei.enzyme_id) DESC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the occurrences of each interaction type and orders them in descending order, allowing the user to specify a limit on the number of results returned.\",\n        \"virtual_table\": \"SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the products produced by enzymes, their chromosome locations, and their association with porphyria disorders from the 'enzyme' table, filtered by a specific geographical location. The placeholder in the WHERE clause represents the location of the enzyme's activity.\",\n        \"virtual_table\": \"SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of enzymes from the 'enzyme' table that produce a specific product. The placeholder in the WHERE clause represents the product that should not be associated with the enzymes.\",\n        \"virtual_table\": \"SELECT name FROM enzyme WHERE product != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT T1.id, T1.name, T1.FDA_approved \nFROM medicine AS T1 \nJOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id \nGROUP BY T1.id \nORDER BY COUNT(T2.enzyme_id) DESC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique identifiers and trade names of medicines that are involved in interactions with enzymes, filtered to include only those medicines that have interactions with a specified minimum count. The placeholder in the HAVING clause represents the minimum number of interactions required.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of enzyme names, their geographical locations, and the products they produce, specifically for those enzymes that interact with medicines in a certain way. The placeholder in the WHERE clause represents the type of interaction being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the unique identifiers and names of medicines from the 'medicine' table that are involved in interactions with enzymes, as indicated in the 'medicine_enzyme_interaction' table. The placeholder in the HAVING clause represents the minimum number of interactions required for the medicines to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT m.id, m.name, m.FDA_approved\nFROM medicine AS m\nJOIN medicine_enzyme_interaction AS mei ON m.id = mei.medicine_id\nGROUP BY m.id, m.name, m.FDA_approved\nORDER BY COUNT(mei.enzyme_id) DESC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes that interact with a specific medicine, filtered by the medicine's name and the type of interaction. The placeholders in the WHERE clause represent the medicine's name and the interaction type.\",\n        \"virtual_table\": \"SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the types of interactions between a specific medicine and enzyme. It retrieves the interaction type from the 'medicine_enzyme_interaction' table by joining it with the 'medicine' and 'enzyme' tables based on their respective identifiers. The placeholders in the WHERE clause represent the names of the enzyme and the medicine involved in the interaction.\",\n        \"virtual_table\": \"SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.952",
        "c_low": "SELECT m.id, m.name, m.FDA_approved\nFROM medicine m\nJOIN medicine_enzyme_interaction mei ON m.id = mei.medicine_id\nGROUP BY m.id, m.name, m.FDA_approved\nORDER BY COUNT(mei.enzyme_id) DESC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes from the 'enzyme' table that produce a specific product. The placeholder in the WHERE clause represents the product that should not be associated with the enzymes.\",\n        \"virtual_table\": \"SELECT name FROM enzyme WHERE product != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT m.id, m.name, m.FDA_approved\nFROM medicine AS m\nJOIN medicine_enzyme_interaction AS mei ON m.id = mei.medicine_id\nGROUP BY m.id, m.name, m.FDA_approved\nORDER BY COUNT(mei.enzyme_id) DESC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the occurrences of each interaction type and orders them in descending order, allowing the user to specify a limit on the number of results returned.\",\n        \"virtual_table\": \"SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of enzymes that interact with a specific medicine, filtered by the medicine's name and the type of interaction. The placeholders in the WHERE clause represent the medicine's name and the interaction type.\",\n        \"virtual_table\": \"SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the types of interactions between a specific medicine and enzyme. It retrieves the interaction type from the 'medicine_enzyme_interaction' table by joining it with the 'medicine' and 'enzyme' tables based on their respective identifiers. The placeholders in the WHERE clause represent the names of the enzyme and the medicine involved in the interaction.\",\n        \"virtual_table\": \"SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT T1.id, T1.name, T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id ORDER BY COUNT(T2.enzyme_id) DESC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique identifiers and trade names of medicines that are involved in interactions with enzymes, filtered to include only those medicines that have interactions with a specified minimum count. The placeholder in the HAVING clause represents the minimum number of interactions required.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the unique identifiers and names of medicines from the 'medicine' table that are involved in interactions with enzymes, as indicated in the 'medicine_enzyme_interaction' table. The placeholder in the HAVING clause represents the minimum number of interactions required for the medicines to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a distinct list of enzyme names, their geographical locations, and the products they produce, specifically for those enzymes that interact with medicines in a certain way. The placeholder in the WHERE clause represents the type of interaction being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT m.id, m.name, m.FDA_approved \nFROM medicine m \nJOIN (\n    SELECT medicine_id, COUNT(*) as interaction_count \n    FROM medicine_enzyme_interaction \n    GROUP BY medicine_id \n) AS interaction_counts ON m.id = interaction_counts.medicine_id \nORDER BY interaction_count DESC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the occurrences of each interaction type and orders them in descending order, allowing the user to specify a limit on the number of results returned.\",\n        \"virtual_table\": \"SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the products produced by enzymes, their chromosome locations, and their association with porphyria disorders from the 'enzyme' table, filtered by a specific geographical location. The placeholder in the WHERE clause represents the location of the enzyme's activity.\",\n        \"virtual_table\": \"SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of enzymes from the 'enzyme' table that produce a specific product. The placeholder in the WHERE clause represents the product that should not be associated with the enzymes.\",\n        \"virtual_table\": \"SELECT name FROM enzyme WHERE product != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT T1.id, T1.name, T1.FDA_approved \nFROM medicine AS T1 \nJOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id \nGROUP BY T1.id \nORDER BY COUNT(T2.enzyme_id) DESC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique identifiers and trade names of medicines that are involved in interactions with enzymes, filtered to include only those medicines that have interactions with a specified minimum count. The placeholder in the HAVING clause represents the minimum number of interactions required.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the unique identifiers and names of medicines from the 'medicine' table that are involved in interactions with enzymes, as indicated in the 'medicine_enzyme_interaction' table. The placeholder in the HAVING clause represents the minimum number of interactions required for the medicines to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a distinct list of enzyme names, their geographical locations, and the products they produce, specifically for those enzymes that interact with medicines in a certain way. The placeholder in the WHERE clause represents the type of interaction being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT m.id, m.name, m.FDA_approved\nFROM medicine AS m\nJOIN medicine_enzyme_interaction AS mei ON m.id = mei.medicine_id\nGROUP BY m.id, m.name, m.FDA_approved\nORDER BY COUNT(mei.enzyme_id) DESC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes that interact with a specific medicine, filtered by the medicine's name and the type of interaction. The placeholders in the WHERE clause represent the medicine's name and the interaction type.\",\n        \"virtual_table\": \"SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the types of interactions between a specific medicine and enzyme. It retrieves the interaction type from the 'medicine_enzyme_interaction' table by joining it with the 'medicine' and 'enzyme' tables based on their respective identifiers. The placeholders in the WHERE clause represent the names of the enzyme and the medicine involved in the interaction.\",\n        \"virtual_table\": \"SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.953",
        "c_low": "SELECT e.id, e.name \nFROM enzyme e \nJOIN medicine_enzyme_interaction mei ON e.id = mei.enzyme_id \nWHERE mei.interaction_type = 'activator' \nGROUP BY e.id, e.name \nORDER BY COUNT(mei.medicine_id) DESC \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes from the 'enzyme' table that produce a specific product. The placeholder in the WHERE clause represents the product that should not be associated with the enzymes.\",\n        \"virtual_table\": \"SELECT name FROM enzyme WHERE product != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the total count of enzymes recorded in the 'enzyme' table. It does not filter or specify any conditions, thus returning the overall number of entries present.\",\n        \"virtual_table\": \"SELECT count(*) FROM enzyme\"\n    }\n}\n",
        "c_mid": "SELECT enzyme.id, enzyme.name \nFROM enzyme \nJOIN medicine_enzyme_interaction ON enzyme.id = medicine_enzyme_interaction.enzyme_id \nWHERE medicine_enzyme_interaction.interaction_type = 'activator' \nGROUP BY enzyme.id, enzyme.name \nORDER BY COUNT(medicine_enzyme_interaction.medicine_id) DESC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes that interact with a specific medicine, filtered by the medicine's name and the type of interaction. The placeholders in the WHERE clause represent the medicine's name and the interaction type.\",\n        \"virtual_table\": \"SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the occurrences of each interaction type and orders them in descending order, allowing the user to specify a limit on the number of results returned.\",\n        \"virtual_table\": \"SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the types of interactions between a specific medicine and enzyme. It retrieves the interaction type from the 'medicine_enzyme_interaction' table by joining it with the 'medicine' and 'enzyme' tables based on their respective identifiers. The placeholders in the WHERE clause represent the names of the enzyme and the medicine involved in the interaction.\",\n        \"virtual_table\": \"SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT T1.id, T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id = T1.id WHERE T2.interaction_type = 'activator' GROUP BY T1.id ORDER BY COUNT(T2.medicine_id) DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a distinct list of enzyme names, their geographical locations, and the products they produce, specifically for those enzymes that interact with medicines in a certain way. The placeholder in the WHERE clause represents the type of interaction being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique identifiers and trade names of medicines that are involved in interactions with enzymes, filtered to include only those medicines that have interactions with a specified minimum count. The placeholder in the HAVING clause represents the minimum number of interactions required.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the unique identifiers and names of medicines from the 'medicine' table that are involved in interactions with enzymes, as indicated in the 'medicine_enzyme_interaction' table. The placeholder in the HAVING clause represents the minimum number of interactions required for the medicines to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT e.id, e.name\nFROM enzyme e\nJOIN medicine_enzyme_interaction mei ON e.id = mei.enzyme_id\nWHERE mei.interaction_type = 'activator'\nGROUP BY e.id, e.name\nORDER BY COUNT(mei.medicine_id) DESC\nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the occurrences of each interaction type and orders them in descending order, allowing the user to specify a limit on the number of results returned.\",\n        \"virtual_table\": \"SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the products produced by enzymes, their chromosome locations, and their association with porphyria disorders from the 'enzyme' table, filtered by a specific geographical location. The placeholder in the WHERE clause represents the location of the enzyme's activity.\",\n        \"virtual_table\": \"SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of enzymes from the 'enzyme' table that produce a specific product. The placeholder in the WHERE clause represents the product that should not be associated with the enzymes.\",\n        \"virtual_table\": \"SELECT name FROM enzyme WHERE product != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT T1.id, T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id = T1.id WHERE T2.interaction_type = 'activator' GROUP BY T1.id ORDER BY COUNT(T2.medicine_id) DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a distinct list of enzyme names, their geographical locations, and the products they produce, specifically for those enzymes that interact with medicines in a certain way. The placeholder in the WHERE clause represents the type of interaction being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique identifiers and trade names of medicines that are involved in interactions with enzymes, filtered to include only those medicines that have interactions with a specified minimum count. The placeholder in the HAVING clause represents the minimum number of interactions required.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the unique identifiers and names of medicines from the 'medicine' table that are involved in interactions with enzymes, as indicated in the 'medicine_enzyme_interaction' table. The placeholder in the HAVING clause represents the minimum number of interactions required for the medicines to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT enzyme.id, enzyme.name \nFROM enzyme \nJOIN medicine_enzyme_interaction ON enzyme.id = medicine_enzyme_interaction.enzyme_id \nWHERE medicine_enzyme_interaction.interaction_type = 'activator' \nGROUP BY enzyme.id, enzyme.name \nORDER BY COUNT(medicine_enzyme_interaction.medicine_id) DESC \nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes that interact with a specific medicine, filtered by the medicine's name and the type of interaction. The placeholders in the WHERE clause represent the medicine's name and the interaction type.\",\n        \"virtual_table\": \"SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the types of interactions between a specific medicine and enzyme. It retrieves the interaction type from the 'medicine_enzyme_interaction' table by joining it with the 'medicine' and 'enzyme' tables based on their respective identifiers. The placeholders in the WHERE clause represent the names of the enzyme and the medicine involved in the interaction.\",\n        \"virtual_table\": \"SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.954",
        "c_low": "SELECT e.id, e.name\nFROM enzyme e\nJOIN medicine_enzyme_interaction mei ON e.id = mei.enzyme_id\nWHERE mei.interaction_type = 'activator'\nGROUP BY e.id, e.name\nORDER BY COUNT(mei.medicine_id) DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes from the 'enzyme' table that produce a specific product. The placeholder in the WHERE clause represents the product that should not be associated with the enzymes.\",\n        \"virtual_table\": \"SELECT name FROM enzyme WHERE product != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT enzyme.id, enzyme.name \nFROM enzyme \nJOIN medicine_enzyme_interaction ON enzyme.id = medicine_enzyme_interaction.enzyme_id \nWHERE medicine_enzyme_interaction.interaction_type = 'activator' \nGROUP BY enzyme.id, enzyme.name \nORDER BY COUNT(medicine_enzyme_interaction.medicine_id) DESC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes that interact with a specific medicine, filtered by the medicine's name and the type of interaction. The placeholders in the WHERE clause represent the medicine's name and the interaction type.\",\n        \"virtual_table\": \"SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the occurrences of each interaction type and orders them in descending order, allowing the user to specify a limit on the number of results returned.\",\n        \"virtual_table\": \"SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the types of interactions between a specific medicine and enzyme. It retrieves the interaction type from the 'medicine_enzyme_interaction' table by joining it with the 'medicine' and 'enzyme' tables based on their respective identifiers. The placeholders in the WHERE clause represent the names of the enzyme and the medicine involved in the interaction.\",\n        \"virtual_table\": \"SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT T1.id, T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id = T1.id GROUP BY T1.id ORDER BY COUNT(T2.medicine_id) DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a distinct list of enzyme names, their geographical locations, and the products they produce, specifically for those enzymes that interact with medicines in a certain way. The placeholder in the WHERE clause represents the type of interaction being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique identifiers and trade names of medicines that are involved in interactions with enzymes, filtered to include only those medicines that have interactions with a specified minimum count. The placeholder in the HAVING clause represents the minimum number of interactions required.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the unique identifiers and names of medicines from the 'medicine' table that are involved in interactions with enzymes, as indicated in the 'medicine_enzyme_interaction' table. The placeholder in the HAVING clause represents the minimum number of interactions required for the medicines to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT e.id, e.name\nFROM enzyme e\nJOIN medicine_enzyme_interaction mei ON e.id = mei.enzyme_id\nWHERE mei.interaction_type = 'activator'\nGROUP BY e.id, e.name\nORDER BY COUNT(mei.medicine_id) DESC\nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the occurrences of each interaction type and orders them in descending order, allowing the user to specify a limit on the number of results returned.\",\n        \"virtual_table\": \"SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the products produced by enzymes, their chromosome locations, and their association with porphyria disorders from the 'enzyme' table, filtered by a specific geographical location. The placeholder in the WHERE clause represents the location of the enzyme's activity.\",\n        \"virtual_table\": \"SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of enzymes from the 'enzyme' table that produce a specific product. The placeholder in the WHERE clause represents the product that should not be associated with the enzymes.\",\n        \"virtual_table\": \"SELECT name FROM enzyme WHERE product != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT T1.id, T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id = T1.id GROUP BY T1.id ORDER BY COUNT(T2.medicine_id) DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a distinct list of enzyme names, their geographical locations, and the products they produce, specifically for those enzymes that interact with medicines in a certain way. The placeholder in the WHERE clause represents the type of interaction being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique identifiers and trade names of medicines that are involved in interactions with enzymes, filtered to include only those medicines that have interactions with a specified minimum count. The placeholder in the HAVING clause represents the minimum number of interactions required.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the unique identifiers and names of medicines from the 'medicine' table that are involved in interactions with enzymes, as indicated in the 'medicine_enzyme_interaction' table. The placeholder in the HAVING clause represents the minimum number of interactions required for the medicines to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT enzyme.id, enzyme.name FROM enzyme JOIN medicine_enzyme_interaction ON enzyme.id = medicine_enzyme_interaction.enzyme_id GROUP BY enzyme.id ORDER BY COUNT(medicine_enzyme_interaction.medicine_id) DESC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes that interact with a specific medicine, filtered by the medicine's name and the type of interaction. The placeholders in the WHERE clause represent the medicine's name and the interaction type.\",\n        \"virtual_table\": \"SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the types of interactions between a specific medicine and enzyme. It retrieves the interaction type from the 'medicine_enzyme_interaction' table by joining it with the 'medicine' and 'enzyme' tables based on their respective identifiers. The placeholders in the WHERE clause represent the names of the enzyme and the medicine involved in the interaction.\",\n        \"virtual_table\": \"SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.958",
        "c_low": "SELECT interaction_type, COUNT(*) as type_count \nFROM medicine_enzyme_interaction \nGROUP BY interaction_type \nORDER BY type_count DESC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes from the 'enzyme' table that produce a specific product. The placeholder in the WHERE clause represents the product that should not be associated with the enzymes.\",\n        \"virtual_table\": \"SELECT name FROM enzyme WHERE product != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the total count of enzymes recorded in the 'enzyme' table. It does not filter or specify any conditions, thus returning the overall number of entries present.\",\n        \"virtual_table\": \"SELECT count(*) FROM enzyme\"\n    }\n}\n",
        "c_mid": "SELECT interaction_type, COUNT(*) as interaction_count FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY interaction_count DESC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the occurrences of each interaction type and orders them in descending order, allowing the user to specify a limit on the number of results returned.\",\n        \"virtual_table\": \"SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of enzymes that interact with a specific medicine, filtered by the medicine's name and the type of interaction. The placeholders in the WHERE clause represent the medicine's name and the interaction type.\",\n        \"virtual_table\": \"SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the types of interactions between a specific medicine and enzyme. It retrieves the interaction type from the 'medicine_enzyme_interaction' table by joining it with the 'medicine' and 'enzyme' tables based on their respective identifiers. The placeholders in the WHERE clause represent the names of the enzyme and the medicine involved in the interaction.\",\n        \"virtual_table\": \"SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT interaction_type, COUNT(*) as interaction_count FROM medicine_enzyme_interaction GROUP BY interaction_type",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a distinct list of enzyme names, their geographical locations, and the products they produce, specifically for those enzymes that interact with medicines in a certain way. The placeholder in the WHERE clause represents the type of interaction being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the unique identifiers and names of medicines from the 'medicine' table that are involved in interactions with enzymes, as indicated in the 'medicine_enzyme_interaction' table. The placeholder in the HAVING clause represents the minimum number of interactions required for the medicines to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique identifiers and trade names of medicines that are involved in interactions with enzymes, filtered to include only those medicines that have interactions with a specified minimum count. The placeholder in the HAVING clause represents the minimum number of interactions required.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT interaction_type, COUNT(*) as interaction_count FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY interaction_count DESC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the occurrences of each interaction type and orders them in descending order, allowing the user to specify a limit on the number of results returned.\",\n        \"virtual_table\": \"SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the products produced by enzymes, their chromosome locations, and their association with porphyria disorders from the 'enzyme' table, filtered by a specific geographical location. The placeholder in the WHERE clause represents the location of the enzyme's activity.\",\n        \"virtual_table\": \"SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of enzymes from the 'enzyme' table that produce a specific product. The placeholder in the WHERE clause represents the product that should not be associated with the enzymes.\",\n        \"virtual_table\": \"SELECT name FROM enzyme WHERE product != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT interaction_type, COUNT(*) as interaction_count FROM medicine_enzyme_interaction GROUP BY interaction_type",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a distinct list of enzyme names, their geographical locations, and the products they produce, specifically for those enzymes that interact with medicines in a certain way. The placeholder in the WHERE clause represents the type of interaction being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the unique identifiers and names of medicines from the 'medicine' table that are involved in interactions with enzymes, as indicated in the 'medicine_enzyme_interaction' table. The placeholder in the HAVING clause represents the minimum number of interactions required for the medicines to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique identifiers and trade names of medicines that are involved in interactions with enzymes, filtered to include only those medicines that have interactions with a specified minimum count. The placeholder in the HAVING clause represents the minimum number of interactions required.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT interaction_type, COUNT(*) as count FROM medicine_enzyme_interaction GROUP BY interaction_type",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes that interact with a specific medicine, filtered by the medicine's name and the type of interaction. The placeholders in the WHERE clause represent the medicine's name and the interaction type.\",\n        \"virtual_table\": \"SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the types of interactions between a specific medicine and enzyme. It retrieves the interaction type from the 'medicine_enzyme_interaction' table by joining it with the 'medicine' and 'enzyme' tables based on their respective identifiers. The placeholders in the WHERE clause represent the names of the enzyme and the medicine involved in the interaction.\",\n        \"virtual_table\": \"SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.966",
        "c_low": "SELECT e.name, e.Location, e.Product \nFROM enzyme e \nJOIN medicine_enzyme_interaction mei ON e.id = mei.enzyme_id \nWHERE mei.interaction_type = 'inhibitor';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes from the 'enzyme' table that produce a specific product. The placeholder in the WHERE clause represents the product that should not be associated with the enzymes.\",\n        \"virtual_table\": \"SELECT name FROM enzyme WHERE product != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT T1.name, T1.Location, T1.Product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id WHERE T2.interaction_type = 'inhibitor'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes that interact with a specific medicine, filtered by the medicine's name and the type of interaction. The placeholders in the WHERE clause represent the medicine's name and the interaction type.\",\n        \"virtual_table\": \"SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the products produced by enzymes, their chromosome locations, and their association with porphyria disorders from the 'enzyme' table, filtered by a specific geographical location. The placeholder in the WHERE clause represents the location of the enzyme's activity.\",\n        \"virtual_table\": \"SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the occurrences of each interaction type and orders them in descending order, allowing the user to specify a limit on the number of results returned.\",\n        \"virtual_table\": \"SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT T1.name, T1.Location, T1.Product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id = T1.id WHERE T2.interaction_type = 'inhibitor'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a distinct list of enzyme names, their geographical locations, and the products they produce, specifically for those enzymes that interact with medicines in a certain way. The placeholder in the WHERE clause represents the type of interaction being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique identifiers and trade names of medicines that are involved in interactions with enzymes, filtered to include only those medicines that have interactions with a specified minimum count. The placeholder in the HAVING clause represents the minimum number of interactions required.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the unique identifiers and names of medicines from the 'medicine' table that are involved in interactions with enzymes, as indicated in the 'medicine_enzyme_interaction' table. The placeholder in the HAVING clause represents the minimum number of interactions required for the medicines to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT e.name, e.Location, e.Product \nFROM enzyme e \nJOIN medicine_enzyme_interaction mei ON e.id = mei.enzyme_id \nWHERE mei.interaction_type = 'inhibitor';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the products produced by enzymes, their chromosome locations, and their association with porphyria disorders from the 'enzyme' table, filtered by a specific geographical location. The placeholder in the WHERE clause represents the location of the enzyme's activity.\",\n        \"virtual_table\": \"SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of enzymes from the 'enzyme' table that produce a specific product. The placeholder in the WHERE clause represents the product that should not be associated with the enzymes.\",\n        \"virtual_table\": \"SELECT name FROM enzyme WHERE product != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the occurrences of each interaction type and orders them in descending order, allowing the user to specify a limit on the number of results returned.\",\n        \"virtual_table\": \"SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT T1.name, T1.Location, T1.Product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id = T1.id WHERE T2.interaction_type = 'inhibitor'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a distinct list of enzyme names, their geographical locations, and the products they produce, specifically for those enzymes that interact with medicines in a certain way. The placeholder in the WHERE clause represents the type of interaction being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique identifiers and trade names of medicines that are involved in interactions with enzymes, filtered to include only those medicines that have interactions with a specified minimum count. The placeholder in the HAVING clause represents the minimum number of interactions required.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the unique identifiers and names of medicines from the 'medicine' table that are involved in interactions with enzymes, as indicated in the 'medicine_enzyme_interaction' table. The placeholder in the HAVING clause represents the minimum number of interactions required for the medicines to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT T1.name, T1.Location, T1.Product \nFROM enzyme AS T1 \nJOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id \nWHERE T2.interaction_type = 'inhibitor';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes that interact with a specific medicine, filtered by the medicine's name and the type of interaction. The placeholders in the WHERE clause represent the medicine's name and the interaction type.\",\n        \"virtual_table\": \"SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the types of interactions between a specific medicine and enzyme. It retrieves the interaction type from the 'medicine_enzyme_interaction' table by joining it with the 'medicine' and 'enzyme' tables based on their respective identifiers. The placeholders in the WHERE clause represent the names of the enzyme and the medicine involved in the interaction.\",\n        \"virtual_table\": \"SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.967",
        "c_low": "SELECT m1.name, m1.Trade_Name \nFROM medicine m1 \nJOIN medicine_enzyme_interaction mei1 ON m1.id = mei1.medicine_id \nJOIN medicine_enzyme_interaction mei2 ON m1.id = mei2.medicine_id \nWHERE mei1.interaction_type = 'inhibitor' \nAND mei2.interaction_type = 'activator';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes from the 'enzyme' table that produce a specific product. The placeholder in the WHERE clause represents the product that should not be associated with the enzymes.\",\n        \"virtual_table\": \"SELECT name FROM enzyme WHERE product != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT m1.name, m1.Trade_Name \nFROM medicine AS m1 \nJOIN medicine_enzyme_interaction AS mei1 ON m1.id = mei1.medicine_id \nJOIN enzyme AS e ON mei1.enzyme_id = e.id \nWHERE mei1.interaction_type = 'inhibitor' \nAND m1.id IN (\n    SELECT mei2.medicine_id \n    FROM medicine_enzyme_interaction AS mei2 \n    WHERE mei2.interaction_type = 'activator' \n    GROUP BY mei2.medicine_id\n)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes that interact with a specific medicine, filtered by the medicine's name and the type of interaction. The placeholders in the WHERE clause represent the medicine's name and the interaction type.\",\n        \"virtual_table\": \"SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the occurrences of each interaction type and orders them in descending order, allowing the user to specify a limit on the number of results returned.\",\n        \"virtual_table\": \"SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the types of interactions between a specific medicine and enzyme. It retrieves the interaction type from the 'medicine_enzyme_interaction' table by joining it with the 'medicine' and 'enzyme' tables based on their respective identifiers. The placeholders in the WHERE clause represent the names of the enzyme and the medicine involved in the interaction.\",\n        \"virtual_table\": \"SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT M1.name, M1.Trade_Name \nFROM medicine AS M1 \nJOIN medicine_enzyme_interaction AS MEI1 ON MEI1.medicine_id = M1.id \nJOIN medicine_enzyme_interaction AS MEI2 ON MEI2.medicine_id = M1.id \nWHERE MEI1.interaction_type = 'inhibitor' AND MEI2.interaction_type = 'activator' \nGROUP BY M1.id;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique identifiers and trade names of medicines that are involved in interactions with enzymes, filtered to include only those medicines that have interactions with a specified minimum count. The placeholder in the HAVING clause represents the minimum number of interactions required.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of enzyme names, their geographical locations, and the products they produce, specifically for those enzymes that interact with medicines in a certain way. The placeholder in the WHERE clause represents the type of interaction being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the unique identifiers and names of medicines from the 'medicine' table that are involved in interactions with enzymes, as indicated in the 'medicine_enzyme_interaction' table. The placeholder in the HAVING clause represents the minimum number of interactions required for the medicines to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT m1.name, m1.Trade_Name \nFROM medicine m1 \nJOIN medicine_enzyme_interaction mei1 ON m1.id = mei1.medicine_id \nJOIN medicine_enzyme_interaction mei2 ON m1.id = mei2.medicine_id \nWHERE mei1.interaction_type = 'inhibitor' AND mei2.interaction_type = 'activitor';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the occurrences of each interaction type and orders them in descending order, allowing the user to specify a limit on the number of results returned.\",\n        \"virtual_table\": \"SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of enzymes from the 'enzyme' table that produce a specific product. The placeholder in the WHERE clause represents the product that should not be associated with the enzymes.\",\n        \"virtual_table\": \"SELECT name FROM enzyme WHERE product != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides information about the products produced by enzymes, their chromosome locations, and their association with porphyria disorders from the 'enzyme' table, filtered by a specific geographical location. The placeholder in the WHERE clause represents the location of the enzyme's activity.\",\n        \"virtual_table\": \"SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT M1.name, M1.Trade_Name \nFROM medicine AS M1 \nJOIN medicine_enzyme_interaction AS MEI1 ON MEI1.medicine_id = M1.id \nJOIN medicine_enzyme_interaction AS MEI2 ON MEI2.medicine_id = M1.id \nWHERE MEI1.interaction_type = 'inhibitor' AND MEI2.interaction_type = 'activator' \nGROUP BY M1.id;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique identifiers and trade names of medicines that are involved in interactions with enzymes, filtered to include only those medicines that have interactions with a specified minimum count. The placeholder in the HAVING clause represents the minimum number of interactions required.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of enzyme names, their geographical locations, and the products they produce, specifically for those enzymes that interact with medicines in a certain way. The placeholder in the WHERE clause represents the type of interaction being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the unique identifiers and names of medicines from the 'medicine' table that are involved in interactions with enzymes, as indicated in the 'medicine_enzyme_interaction' table. The placeholder in the HAVING clause represents the minimum number of interactions required for the medicines to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT M1.name, M1.Trade_Name \nFROM medicine AS M1 \nJOIN medicine_enzyme_interaction AS MEI1 ON M1.id = MEI1.medicine_id \nJOIN enzyme AS E1 ON MEI1.enzyme_id = E1.id \nJOIN medicine_enzyme_interaction AS MEI2 ON M1.id = MEI2.medicine_id \nJOIN enzyme AS E2 ON MEI2.enzyme_id = E2.id \nWHERE MEI1.interaction_type = 'inhibitor' AND MEI2.interaction_type = 'activator';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes that interact with a specific medicine, filtered by the medicine's name and the type of interaction. The placeholders in the WHERE clause represent the medicine's name and the interaction type.\",\n        \"virtual_table\": \"SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the types of interactions between a specific medicine and enzyme. It retrieves the interaction type from the 'medicine_enzyme_interaction' table by joining it with the 'medicine' and 'enzyme' tables based on their respective identifiers. The placeholders in the WHERE clause represent the names of the enzyme and the medicine involved in the interaction.\",\n        \"virtual_table\": \"SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.968",
        "c_low": "SELECT m.name, m.Trade_Name \nFROM medicine m \nJOIN medicine_enzyme_interaction mei ON m.id = mei.medicine_id \nWHERE mei.interaction_type IN ('inhibitor', 'activator')",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes from the 'enzyme' table that produce a specific product. The placeholder in the WHERE clause represents the product that should not be associated with the enzymes.\",\n        \"virtual_table\": \"SELECT name FROM enzyme WHERE product != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT T3.name, T3.Trade_Name FROM medicine AS T3 JOIN medicine_enzyme_interaction AS T2 ON T3.id = T2.medicine_id JOIN enzyme AS T1 ON T2.enzyme_id = T1.id WHERE T2.interaction_type IN ('inhibitor', 'activator')",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes that interact with a specific medicine, filtered by the medicine's name and the type of interaction. The placeholders in the WHERE clause represent the medicine's name and the interaction type.\",\n        \"virtual_table\": \"SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the occurrences of each interaction type and orders them in descending order, allowing the user to specify a limit on the number of results returned.\",\n        \"virtual_table\": \"SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the types of interactions between a specific medicine and enzyme. It retrieves the interaction type from the 'medicine_enzyme_interaction' table by joining it with the 'medicine' and 'enzyme' tables based on their respective identifiers. The placeholders in the WHERE clause represent the names of the enzyme and the medicine involved in the interaction.\",\n        \"virtual_table\": \"SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT M.name, M.Trade_Name \nFROM medicine AS M \nJOIN medicine_enzyme_interaction AS MEI ON MEI.medicine_id = M.id \nWHERE MEI.interaction_type IN ('inhibitor', 'activator')",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique identifiers and trade names of medicines that are involved in interactions with enzymes, filtered to include only those medicines that have interactions with a specified minimum count. The placeholder in the HAVING clause represents the minimum number of interactions required.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of enzyme names, their geographical locations, and the products they produce, specifically for those enzymes that interact with medicines in a certain way. The placeholder in the WHERE clause represents the type of interaction being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the unique identifiers and names of medicines from the 'medicine' table that are involved in interactions with enzymes, as indicated in the 'medicine_enzyme_interaction' table. The placeholder in the HAVING clause represents the minimum number of interactions required for the medicines to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT m.name, m.Trade_Name \nFROM medicine m \nJOIN medicine_enzyme_interaction mei ON m.id = mei.medicine_id \nJOIN enzyme e ON mei.enzyme_id = e.id \nWHERE mei.interaction_type IN ('inhibitor', 'activator');",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the occurrences of each interaction type and orders them in descending order, allowing the user to specify a limit on the number of results returned.\",\n        \"virtual_table\": \"SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of enzymes from the 'enzyme' table that produce a specific product. The placeholder in the WHERE clause represents the product that should not be associated with the enzymes.\",\n        \"virtual_table\": \"SELECT name FROM enzyme WHERE product != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides information about the products produced by enzymes, their chromosome locations, and their association with porphyria disorders from the 'enzyme' table, filtered by a specific geographical location. The placeholder in the WHERE clause represents the location of the enzyme's activity.\",\n        \"virtual_table\": \"SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT M.name, M.Trade_Name \nFROM medicine AS M \nJOIN medicine_enzyme_interaction AS MEI ON MEI.medicine_id = M.id \nWHERE MEI.interaction_type IN ('inhibitor', 'activator')",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique identifiers and trade names of medicines that are involved in interactions with enzymes, filtered to include only those medicines that have interactions with a specified minimum count. The placeholder in the HAVING clause represents the minimum number of interactions required.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of enzyme names, their geographical locations, and the products they produce, specifically for those enzymes that interact with medicines in a certain way. The placeholder in the WHERE clause represents the type of interaction being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the unique identifiers and names of medicines from the 'medicine' table that are involved in interactions with enzymes, as indicated in the 'medicine_enzyme_interaction' table. The placeholder in the HAVING clause represents the minimum number of interactions required for the medicines to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT T3.name, T3.Trade_Name FROM medicine AS T3 JOIN medicine_enzyme_interaction AS T2 ON T3.id = T2.medicine_id JOIN enzyme AS T1 ON T2.enzyme_id = T1.id WHERE T2.interaction_type IN ('inhibitor', 'activator')",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes that interact with a specific medicine, filtered by the medicine's name and the type of interaction. The placeholders in the WHERE clause represent the medicine's name and the interaction type.\",\n        \"virtual_table\": \"SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the types of interactions between a specific medicine and enzyme. It retrieves the interaction type from the 'medicine_enzyme_interaction' table by joining it with the 'medicine' and 'enzyme' tables based on their respective identifiers. The placeholders in the WHERE clause represent the names of the enzyme and the medicine involved in the interaction.\",\n        \"virtual_table\": \"SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.969",
        "c_low": "SELECT m.name, m.Trade_Name \nFROM medicine m \nWHERE m.id NOT IN (\n    SELECT mei.medicine_id \n    FROM medicine_enzyme_interaction mei \n    JOIN enzyme e ON mei.enzyme_id = e.id \n    WHERE e.Product = 'Heme'\n);",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes from the 'enzyme' table that produce a specific product. The placeholder in the WHERE clause represents the product that should not be associated with the enzymes.\",\n        \"virtual_table\": \"SELECT name FROM enzyme WHERE product != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT name, Trade_Name FROM medicine WHERE id NOT IN (SELECT medicine_id FROM medicine_enzyme_interaction WHERE enzyme_id IN (SELECT id FROM enzyme WHERE Product = 'Heme'));",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes that interact with a specific medicine, filtered by the medicine's name and the type of interaction. The placeholders in the WHERE clause represent the medicine's name and the interaction type.\",\n        \"virtual_table\": \"SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the occurrences of each interaction type and orders them in descending order, allowing the user to specify a limit on the number of results returned.\",\n        \"virtual_table\": \"SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides information about the products produced by enzymes, their chromosome locations, and their association with porphyria disorders from the 'enzyme' table, filtered by a specific geographical location. The placeholder in the WHERE clause represents the location of the enzyme's activity.\",\n        \"virtual_table\": \"SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT m.name, m.Trade_Name \nFROM medicine AS m \nWHERE m.id NOT IN (\n    SELECT me.medicine_id \n    FROM medicine_enzyme_interaction AS me \n    JOIN enzyme AS e ON me.enzyme_id = e.id \n    WHERE e.Product = 'Heme'\n);",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique identifiers and trade names of medicines that are involved in interactions with enzymes, filtered to include only those medicines that have interactions with a specified minimum count. The placeholder in the HAVING clause represents the minimum number of interactions required.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of enzyme names, their geographical locations, and the products they produce, specifically for those enzymes that interact with medicines in a certain way. The placeholder in the WHERE clause represents the type of interaction being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the unique identifiers and names of medicines from the 'medicine' table that are involved in interactions with enzymes, as indicated in the 'medicine_enzyme_interaction' table. The placeholder in the HAVING clause represents the minimum number of interactions required for the medicines to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT m.name, m.Trade_Name \nFROM medicine m \nWHERE m.id NOT IN (\n    SELECT mei.medicine_id \n    FROM medicine_enzyme_interaction mei \n    JOIN enzyme e ON mei.enzyme_id = e.id \n    WHERE e.Product = 'Heme'\n);",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes from the 'enzyme' table that produce a specific product. The placeholder in the WHERE clause represents the product that should not be associated with the enzymes.\",\n        \"virtual_table\": \"SELECT name FROM enzyme WHERE product != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the occurrences of each interaction type and orders them in descending order, allowing the user to specify a limit on the number of results returned.\",\n        \"virtual_table\": \"SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides information about the products produced by enzymes, their chromosome locations, and their association with porphyria disorders from the 'enzyme' table, filtered by a specific geographical location. The placeholder in the WHERE clause represents the location of the enzyme's activity.\",\n        \"virtual_table\": \"SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT m.name, m.Trade_Name \nFROM medicine AS m \nWHERE m.id NOT IN (\n    SELECT me.medicine_id \n    FROM medicine_enzyme_interaction AS me \n    JOIN enzyme AS e ON me.enzyme_id = e.id \n    WHERE e.Product = 'Heme'\n);",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique identifiers and trade names of medicines that are involved in interactions with enzymes, filtered to include only those medicines that have interactions with a specified minimum count. The placeholder in the HAVING clause represents the minimum number of interactions required.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of enzyme names, their geographical locations, and the products they produce, specifically for those enzymes that interact with medicines in a certain way. The placeholder in the WHERE clause represents the type of interaction being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the unique identifiers and names of medicines from the 'medicine' table that are involved in interactions with enzymes, as indicated in the 'medicine_enzyme_interaction' table. The placeholder in the HAVING clause represents the minimum number of interactions required for the medicines to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT m.name, m.Trade_Name \nFROM medicine AS m \nWHERE m.id NOT IN (\n    SELECT me.medicine_id \n    FROM medicine_enzyme_interaction AS me \n    JOIN enzyme AS e ON me.enzyme_id = e.id \n    WHERE e.Product = 'Heme'\n)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes that interact with a specific medicine, filtered by the medicine's name and the type of interaction. The placeholders in the WHERE clause represent the medicine's name and the interaction type.\",\n        \"virtual_table\": \"SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the types of interactions between a specific medicine and enzyme. It retrieves the interaction type from the 'medicine_enzyme_interaction' table by joining it with the 'medicine' and 'enzyme' tables based on their respective identifiers. The placeholders in the WHERE clause represent the names of the enzyme and the medicine involved in the interaction.\",\n        \"virtual_table\": \"SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.970",
        "c_low": "SELECT m.name, m.Trade_Name \nFROM medicine m \nWHERE m.id NOT IN (\n    SELECT mei.medicine_id \n    FROM medicine_enzyme_interaction mei \n    JOIN enzyme e ON mei.enzyme_id = e.id \n    WHERE e.Product = 'Heme'\n);",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes from the 'enzyme' table that produce a specific product. The placeholder in the WHERE clause represents the product that should not be associated with the enzymes.\",\n        \"virtual_table\": \"SELECT name FROM enzyme WHERE product != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT m.name, m.Trade_Name \nFROM medicine AS m \nWHERE m.id NOT IN (\n    SELECT mei.medicine_id \n    FROM medicine_enzyme_interaction AS mei \n    JOIN enzyme AS e ON mei.enzyme_id = e.id \n    WHERE e.Product = 'Heme'\n);",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes that interact with a specific medicine, filtered by the medicine's name and the type of interaction. The placeholders in the WHERE clause represent the medicine's name and the interaction type.\",\n        \"virtual_table\": \"SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the occurrences of each interaction type and orders them in descending order, allowing the user to specify a limit on the number of results returned.\",\n        \"virtual_table\": \"SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the types of interactions between a specific medicine and enzyme. It retrieves the interaction type from the 'medicine_enzyme_interaction' table by joining it with the 'medicine' and 'enzyme' tables based on their respective identifiers. The placeholders in the WHERE clause represent the names of the enzyme and the medicine involved in the interaction.\",\n        \"virtual_table\": \"SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT T1.name, T1.Trade_Name \nFROM medicine AS T1 \nWHERE T1.id NOT IN (\n    SELECT T2.medicine_id \n    FROM medicine_enzyme_interaction AS T2 \n    JOIN enzyme AS T3 ON T2.enzyme_id = T3.id \n    WHERE T3.product = 'Heme'\n)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique identifiers and trade names of medicines that are involved in interactions with enzymes, filtered to include only those medicines that have interactions with a specified minimum count. The placeholder in the HAVING clause represents the minimum number of interactions required.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the unique identifiers and names of medicines from the 'medicine' table that are involved in interactions with enzymes, as indicated in the 'medicine_enzyme_interaction' table. The placeholder in the HAVING clause represents the minimum number of interactions required for the medicines to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a distinct list of enzyme names, their geographical locations, and the products they produce, specifically for those enzymes that interact with medicines in a certain way. The placeholder in the WHERE clause represents the type of interaction being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT m.name, m.Trade_Name \nFROM medicine m \nWHERE m.id NOT IN (\n    SELECT mei.medicine_id \n    FROM medicine_enzyme_interaction mei \n    JOIN enzyme e ON mei.enzyme_id = e.id \n    WHERE e.Product = 'Heme'\n);",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the occurrences of each interaction type and orders them in descending order, allowing the user to specify a limit on the number of results returned.\",\n        \"virtual_table\": \"SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of enzymes from the 'enzyme' table that produce a specific product. The placeholder in the WHERE clause represents the product that should not be associated with the enzymes.\",\n        \"virtual_table\": \"SELECT name FROM enzyme WHERE product != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides information about the products produced by enzymes, their chromosome locations, and their association with porphyria disorders from the 'enzyme' table, filtered by a specific geographical location. The placeholder in the WHERE clause represents the location of the enzyme's activity.\",\n        \"virtual_table\": \"SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT T1.name, T1.Trade_Name \nFROM medicine AS T1 \nWHERE T1.id NOT IN (\n    SELECT T2.medicine_id \n    FROM medicine_enzyme_interaction AS T2 \n    JOIN enzyme AS T3 ON T2.enzyme_id = T3.id \n    WHERE T3.product = 'Heme'\n)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique identifiers and trade names of medicines that are involved in interactions with enzymes, filtered to include only those medicines that have interactions with a specified minimum count. The placeholder in the HAVING clause represents the minimum number of interactions required.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the unique identifiers and names of medicines from the 'medicine' table that are involved in interactions with enzymes, as indicated in the 'medicine_enzyme_interaction' table. The placeholder in the HAVING clause represents the minimum number of interactions required for the medicines to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a distinct list of enzyme names, their geographical locations, and the products they produce, specifically for those enzymes that interact with medicines in a certain way. The placeholder in the WHERE clause represents the type of interaction being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT m.name, m.Trade_Name \nFROM medicine AS m \nWHERE m.id NOT IN (\n    SELECT me.medicine_id \n    FROM medicine_enzyme_interaction AS me \n    JOIN enzyme AS e ON me.enzyme_id = e.id \n    WHERE e.Product = 'Heme'\n);",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of enzymes that interact with a specific medicine, filtered by the medicine's name and the type of interaction. The placeholders in the WHERE clause represent the medicine's name and the interaction type.\",\n        \"virtual_table\": \"SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.interaction_type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the types of interactions between a specific medicine and enzyme. It retrieves the interaction type from the 'medicine_enzyme_interaction' table by joining it with the 'medicine' and 'enzyme' tables based on their respective identifiers. The placeholders in the WHERE clause represent the names of the enzyme and the medicine involved in the interaction.\",\n        \"virtual_table\": \"SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.994",
        "c_low": "SELECT b.All_Games, u.Location \nFROM basketball_match b \nJOIN university u ON b.School_ID = u.School_ID \nWHERE u.School = 'Clemson';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the winning percentages of basketball teams in the ACC, sorted in descending order. The placeholder in the LIMIT clause allows the user to specify the number of results to return.\",\n        \"virtual_table\": \"SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT bm.All_Games, u.Location \nFROM basketball_match bm \nJOIN university u ON bm.School_ID = u.School_ID \nWHERE u.School = 'Clemson';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the enrollment numbers and primary athletic conference of universities, sorted by the year they were founded. The placeholder in the LIMIT clause allows for specifying the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT t2.All_Games, t1.Location FROM university AS t1 JOIN basketball_match AS t2 ON t1.School_ID = t2.School_ID WHERE t2.Team_Name = 'Clemson'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the overall game record of a specific basketball team along with the geographical location of the university associated with that team. The placeholder in the WHERE clause represents the name of the basketball team being queried.\",\n        \"virtual_table\": \"SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT bm.All_Games, u.Location \nFROM basketball_match bm \nJOIN university u ON bm.School_ID = u.School_ID \nWHERE u.School = 'Clemson';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the winning percentages of basketball teams in the ACC, sorted in descending order. The placeholder in the LIMIT clause allows the user to specify the number of results to return.\",\n        \"virtual_table\": \"SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the enrollment numbers and primary athletic conference of universities, sorted by the year they were founded. The placeholder in the LIMIT clause allows for specifying the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT t2.All_Games, t1.Location FROM university AS t1 JOIN basketball_match AS t2 ON t1.School_ID = t2.School_ID WHERE t2.Team_Name = 'Clemson'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the overall game record of a specific basketball team along with the geographical location of the university associated with that team. The placeholder in the WHERE clause represents the name of the basketball team being queried.\",\n        \"virtual_table\": \"SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT bm.All_Games, u.Location \nFROM basketball_match bm \nJOIN university u ON bm.School_ID = u.School_ID \nWHERE u.School = 'Clemson';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1005",
        "c_low": "SELECT * FROM university WHERE Founded > 1850 OR Affiliation = 'Public';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of universities sorted by their enrollment numbers in descending order, showing the year each university was founded. The placeholder in the LIMIT clause allows for specifying the maximum number of universities to retrieve.\",\n        \"virtual_table\": \"SELECT founded FROM university ORDER BY enrollment DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT * FROM university WHERE founded > 1850 OR affiliation = 'public';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of universities that have a specific type of affiliation, excluding those with the specified affiliation. The results are ordered by the year the university was founded in descending order, and the number of results returned is limited by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT founded FROM university WHERE affiliation != [PLACEHOLDER-TYPE:STRING] ORDER BY founded DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the enrollment numbers and primary athletic conference of universities, sorted by the year they were founded. The placeholder in the LIMIT clause allows for specifying the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average enrollment of universities that were established before a specific year. The placeholder in the WHERE clause represents the year of establishment.\",\n        \"virtual_table\": \"SELECT avg(enrollment) FROM university WHERE founded  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT * FROM university WHERE Founded > 1850 OR Affiliation = 'Public'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total enrollment of universities grouped by their affiliation type, specifically for those universities established after a certain year. The placeholder in the WHERE clause represents the year of establishment.\",\n        \"virtual_table\": \"SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY affiliation\"\n    }\n}\n",
        "t_1": "SELECT * FROM university WHERE founded > 1850 OR affiliation = 'public'",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total enrollment of universities grouped by their affiliation type, specifically for those universities established after a certain year. The placeholder in the WHERE clause represents the year of establishment.\",\n        \"virtual_table\": \"SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY affiliation\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of universities that have a specific type of affiliation, excluding those with the specified affiliation. The results are ordered by the year the university was founded in descending order, and the number of results returned is limited by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT founded FROM university WHERE affiliation != [PLACEHOLDER-TYPE:STRING] ORDER BY founded DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of universities sorted by their enrollment numbers in descending order, showing the year each university was founded. The placeholder in the LIMIT clause allows for specifying the maximum number of universities to retrieve.\",\n        \"virtual_table\": \"SELECT founded FROM university ORDER BY enrollment DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT * FROM university WHERE Founded > 1850 OR Affiliation = 'Public';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT * FROM university WHERE Founded > 1850 OR Affiliation = 'Public';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1006",
        "c_low": "SELECT School FROM university WHERE Founded < 1850 OR Affiliation = 'Public';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of universities sorted by their enrollment numbers in descending order, showing the year each university was founded. The placeholder in the LIMIT clause allows for specifying the maximum number of universities to retrieve.\",\n        \"virtual_table\": \"SELECT founded FROM university ORDER BY enrollment DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT School FROM university WHERE founded < 1850 OR affiliation = 'public'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of universities that have a specific type of affiliation, excluding those with the specified affiliation. The results are ordered by the year the university was founded in descending order, and the number of results returned is limited by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT founded FROM university WHERE affiliation != [PLACEHOLDER-TYPE:STRING] ORDER BY founded DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the enrollment numbers and primary athletic conference of universities, sorted by the year they were founded. The placeholder in the LIMIT clause allows for specifying the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average enrollment of universities that were established before a specific year. The placeholder in the WHERE clause represents the year of establishment.\",\n        \"virtual_table\": \"SELECT avg(enrollment) FROM university WHERE founded  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT School FROM university WHERE Founded < 1850 OR Affiliation = 'Public';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total enrollment of universities grouped by their affiliation type, specifically for those universities established after a certain year. The placeholder in the WHERE clause represents the year of establishment.\",\n        \"virtual_table\": \"SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY affiliation\"\n    }\n}\n",
        "t_1": "SELECT School FROM university WHERE Founded < 1850 OR Affiliation = 'Public'",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total enrollment of universities grouped by their affiliation type, specifically for those universities established after a certain year. The placeholder in the WHERE clause represents the year of establishment.\",\n        \"virtual_table\": \"SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY affiliation\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of universities that have a specific type of affiliation, excluding those with the specified affiliation. The results are ordered by the year the university was founded in descending order, and the number of results returned is limited by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT founded FROM university WHERE affiliation != [PLACEHOLDER-TYPE:STRING] ORDER BY founded DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the enrollment numbers and primary athletic conference of universities, sorted by the year they were founded. The placeholder in the LIMIT clause allows for specifying the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT School FROM university WHERE Founded < 1850 OR Affiliation = 'Public';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT School FROM university WHERE Founded < 1850 OR Affiliation = 'Public';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1025",
        "c_low": "SELECT chip_model.Model_name, screen_mode.Graphics_mode \nFROM phone \nJOIN chip_model ON phone.chip_model = chip_model.Model_name \nJOIN screen_mode ON phone.screen_mode = screen_mode.Graphics_mode \nWHERE phone.Hardware_Model_name = 'LG-P760';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the chip models from the 'chip_model' table that were launched within a specific range of years. The placeholders in the WHERE clause represent the start and end years of the launch period.\",\n        \"virtual_table\": \"SELECT Model_name FROM chip_model WHERE Launch_year BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the maximum and minimum RAM capacities in MiB for chip models used in phones manufactured by a specific company. The placeholders in the WHERE clause represent the company's name.\",\n        \"virtual_table\": \"SELECT max(T1.RAM_MiB) ,  min(T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of chip models along with their RAM sizes from the 'chip_model' table. The results are ordered by the amount of RAM in ascending order, and the placeholder indicates the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT Model_name ,  RAM_MiB FROM chip_model ORDER BY RAM_MiB ASC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "c_mid": "SELECT T1.Model_name, T3.Graphics_mode FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = 'LG-P760';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the hardware model names of phones that either support a specific type of screen mode or have a RAM capacity greater than a specified amount. The placeholders in the WHERE clause represent the screen mode type and the RAM capacity respectively.\",\n        \"virtual_table\": \"SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T3.Type = [PLACEHOLDER-TYPE:STRING] OR T1.RAM_MiB  >  [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the hardware model names and company names of phones that utilize a specific type of screen mode from the 'screen_mode' table. The placeholder in the WHERE clause represents the type of screen mode being queried.\",\n        \"virtual_table\": \"SELECT T2.Hardware_Model_name ,  T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides information about the WiFi capabilities and the type of screen mode for phones based on a specific hardware model name. The placeholders in the WHERE clause represent the hardware model name of the phone.\",\n        \"virtual_table\": \"SELECT T1.WiFi , T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_high": "SELECT T1.Model_name, T2.Graphics_mode FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T2.Hardware_Model_name = 'LG-P760';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a distinct list of hardware model names and their corresponding company names from the 'phone' table, filtered by the screen modes that use a specific range of kilobytes. The placeholders in the WHERE clause represent the lower and upper limits of kilobytes used by the screen mode.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Hardware_Model_name , T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.used_kb BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of distinct hardware model names of phones that are associated with a specific type of screen mode or a specific company name. The placeholders in the WHERE clause represent the type of screen mode and the company name, allowing users to filter the results based on their criteria.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  [PLACEHOLDER-TYPE:STRING] OR t2.Company_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides information about the character cells, resolution in pixels, and the number of hardware colors supported by the screen modes of phones that match a specific hardware model name. The placeholder in the WHERE clause represents the hardware model name of the phone.\",\n        \"virtual_table\": \"SELECT T1.Char_cells ,  T1.Pixels ,  T1.Hardware_colours FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Hardware_Model_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "t_1": "SELECT chip_model.Model_name, screen_mode.Graphics_mode \nFROM phone \nJOIN chip_model ON phone.chip_model = chip_model.Model_name \nJOIN screen_mode ON phone.screen_mode = screen_mode.Graphics_mode \nWHERE phone.Hardware_Model_name = 'LG-P760';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the chip models from the 'chip_model' table that were launched within a specific range of years. The placeholders in the WHERE clause represent the start and end years of the launch period.\",\n        \"virtual_table\": \"SELECT Model_name FROM chip_model WHERE Launch_year BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of chip models along with their RAM sizes from the 'chip_model' table. The results are ordered by the amount of RAM in ascending order, and the placeholder indicates the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT Model_name ,  RAM_MiB FROM chip_model ORDER BY RAM_MiB ASC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the hardware model names and company names of phones from the 'phone' table that have a specific type of accreditation. The placeholder in the WHERE clause represents the accreditation type being queried.\",\n        \"virtual_table\": \"SELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "t_2": "SELECT T1.Model_name, T2.Graphics_mode FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T2.Hardware_Model_name = 'LG-P760';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the hardware model names and company names of phones that utilize a specific type of screen mode from the 'screen_mode' table. The placeholder in the WHERE clause represents the type of screen mode being queried.\",\n        \"virtual_table\": \"SELECT T2.Hardware_Model_name ,  T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of hardware model names and their corresponding company names from the 'phone' table, filtered by the screen modes that use a specific range of kilobytes. The placeholders in the WHERE clause represent the lower and upper limits of kilobytes used by the screen mode.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Hardware_Model_name , T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.used_kb BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of distinct hardware model names of phones that are associated with a specific type of screen mode or a specific company name. The placeholders in the WHERE clause represent the type of screen mode and the company name, allowing users to filter the results based on their criteria.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  [PLACEHOLDER-TYPE:STRING] OR t2.Company_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT T1.Model_name, T3.Graphics_mode FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = 'LG-P760';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the hardware model names of phones that either support a specific type of screen mode or have a RAM capacity greater than a specified amount. The placeholders in the WHERE clause represent the screen mode type and the RAM capacity respectively.\",\n        \"virtual_table\": \"SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T3.Type = [PLACEHOLDER-TYPE:STRING] OR T1.RAM_MiB  >  [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the WiFi capabilities and the type of screen mode for phones based on a specific hardware model name. The placeholders in the WHERE clause represent the hardware model name of the phone.\",\n        \"virtual_table\": \"SELECT T1.WiFi , T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1050",
        "c_low": "SELECT Model_name FROM chip_model WHERE Model_name NOT IN (SELECT chip_model FROM phone WHERE Accreditation_type = 'full');",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the chip models from the 'chip_model' table that were launched within a specific range of years. The placeholders in the WHERE clause represent the start and end years of the launch period.\",\n        \"virtual_table\": \"SELECT Model_name FROM chip_model WHERE Launch_year BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of chip models from the 'chip_model' table that have specific WiFi capabilities. The placeholder in the WHERE clause represents the WiFi capability being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM chip_model WHERE wifi  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the maximum and minimum RAM capacities in MiB for chip models used in phones manufactured by a specific company. The placeholders in the WHERE clause represent the company's name.\",\n        \"virtual_table\": \"SELECT max(T1.RAM_MiB) ,  min(T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_mid": "SELECT Model_name FROM chip_model WHERE Model_name NOT IN (SELECT chip_model FROM phone WHERE Accreditation_type = 'full');",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the hardware model names and company names of phones from the 'phone' table that have a specific type of accreditation. The placeholder in the WHERE clause represents the accreditation type being queried.\",\n        \"virtual_table\": \"SELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of hardware model names of phones that utilize chip models launched in a specific year. The results are ordered by the amount of RAM in descending order, and the number of results returned can be limited by a placeholder value.\",\n        \"virtual_table\": \"SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = [PLACEHOLDER-TYPE:NUMBER] ORDER BY T1.RAM_MiB DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides information about the WiFi capabilities and the type of screen mode for phones based on a specific hardware model name. The placeholders in the WHERE clause represent the hardware model name of the phone.\",\n        \"virtual_table\": \"SELECT T1.WiFi , T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_high": "SELECT Model_name FROM chip_model WHERE Model_name NOT IN (SELECT chip_model FROM phone WHERE Accreditation_type = 'full');",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the hardware model names and company names of phones that utilize chip models launched in a specific year or have a RAM capacity exceeding a certain amount. The placeholders in the WHERE clause represent the launch year and the RAM size criteria.\",\n        \"virtual_table\": \"SELECT T2.Hardware_Model_name ,  T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = [PLACEHOLDER-TYPE:NUMBER] OR T1.RAM_MiB  >  [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of distinct hardware model names of phones from the 'phone' table that are associated with a specific company and do not use a particular type of screen mode. The placeholders in the WHERE clause represent the company name and the type of screen mode to filter the results accordingly.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE t2.Company_name  =  [PLACEHOLDER-TYPE:STRING] AND T1.Type != [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of distinct hardware model names of phones that are associated with a specific type of screen mode or a specific company name. The placeholders in the WHERE clause represent the type of screen mode and the company name, allowing users to filter the results based on their criteria.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  [PLACEHOLDER-TYPE:STRING] OR t2.Company_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT Model_name FROM chip_model WHERE Model_name NOT IN (SELECT DISTINCT chip_model FROM phone WHERE Accreditation_type = 'full');",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the hardware model names and company names of phones from the 'phone' table that have a specific type of accreditation. The placeholder in the WHERE clause represents the accreditation type being queried.\",\n        \"virtual_table\": \"SELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the chip models from the 'chip_model' table that were launched within a specific range of years. The placeholders in the WHERE clause represent the start and end years of the launch period.\",\n        \"virtual_table\": \"SELECT Model_name FROM chip_model WHERE Launch_year BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of chip models from the 'chip_model' table that have specific WiFi capabilities. The placeholder in the WHERE clause represents the WiFi capability being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM chip_model WHERE wifi  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT Model_name FROM chip_model WHERE Model_name NOT IN (SELECT chip_model FROM phone WHERE Accreditation_type = 'full');",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of hardware model names of phones that utilize chip models launched in a specific year. The results are ordered by the amount of RAM in descending order, and the number of results returned can be limited by a placeholder value.\",\n        \"virtual_table\": \"SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = [PLACEHOLDER-TYPE:NUMBER] ORDER BY T1.RAM_MiB DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the hardware model names and company names of phones that utilize chip models launched in a specific year or have a RAM capacity exceeding a certain amount. The placeholders in the WHERE clause represent the launch year and the RAM size criteria.\",\n        \"virtual_table\": \"SELECT T2.Hardware_Model_name ,  T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = [PLACEHOLDER-TYPE:NUMBER] OR T1.RAM_MiB  >  [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of distinct hardware model names of phones from the 'phone' table that are associated with a specific company and do not use a particular type of screen mode. The placeholders in the WHERE clause represent the company name and the type of screen mode to filter the results accordingly.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE t2.Company_name  =  [PLACEHOLDER-TYPE:STRING] AND T1.Type != [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "t_3+": "SELECT Model_name FROM chip_model WHERE Model_name NOT IN (SELECT chip_model FROM phone WHERE Accreditation_type = 'full');",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the WiFi capabilities and the type of screen mode for phones based on a specific hardware model name. The placeholders in the WHERE clause represent the hardware model name of the phone.\",\n        \"virtual_table\": \"SELECT T1.WiFi , T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the hardware model names of phones that either support a specific type of screen mode or have a RAM capacity greater than a specified amount. The placeholders in the WHERE clause represent the screen mode type and the RAM capacity respectively.\",\n        \"virtual_table\": \"SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T3.Type = [PLACEHOLDER-TYPE:STRING] OR T1.RAM_MiB  >  [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1051",
        "c_low": "SELECT DISTINCT S.Pixels FROM screen_mode AS S JOIN phone AS P ON S.Graphics_mode = P.screen_mode WHERE P.Accreditation_type = 'full' OR P.Accreditation_type = 'Provisional';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the maximum and minimum RAM capacities in MiB for chip models used in phones manufactured by a specific company. The placeholders in the WHERE clause represent the company's name.\",\n        \"virtual_table\": \"SELECT max(T1.RAM_MiB) ,  min(T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_mid": "SELECT T3.Pixels FROM phone AS T1 JOIN screen_mode AS T3 ON T1.screen_mode = T3.Graphics_mode WHERE T1.Accreditation_type = 'full' OR T1.Accreditation_type = 'Provisional';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the WiFi capabilities and the type of screen mode for phones based on a specific hardware model name. The placeholders in the WHERE clause represent the hardware model name of the phone.\",\n        \"virtual_table\": \"SELECT T1.WiFi , T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the hardware model names of phones that either support a specific type of screen mode or have a RAM capacity greater than a specified amount. The placeholders in the WHERE clause represent the screen mode type and the RAM capacity respectively.\",\n        \"virtual_table\": \"SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T3.Type = [PLACEHOLDER-TYPE:STRING] OR T1.RAM_MiB  >  [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the hardware model names and company names of phones that utilize a specific type of screen mode from the 'screen_mode' table. The placeholder in the WHERE clause represents the type of screen mode being queried.\",\n        \"virtual_table\": \"SELECT T2.Hardware_Model_name ,  T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  [PLACEHOLDER-TYPE:STRING];\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT T1.Pixels FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Accreditation_type = 'full' OR T2.Accreditation_type = 'Provisional';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the character cells, resolution in pixels, and the number of hardware colors supported by the screen modes of phones that match a specific hardware model name. The placeholder in the WHERE clause represents the hardware model name of the phone.\",\n        \"virtual_table\": \"SELECT T1.Char_cells ,  T1.Pixels ,  T1.Hardware_colours FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Hardware_Model_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of hardware model names and their corresponding company names from the 'phone' table, filtered by the screen modes that use a specific range of kilobytes. The placeholders in the WHERE clause represent the lower and upper limits of kilobytes used by the screen mode.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Hardware_Model_name , T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.used_kb BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of distinct hardware model names of phones that are associated with a specific type of screen mode or a specific company name. The placeholders in the WHERE clause represent the type of screen mode and the company name, allowing users to filter the results based on their criteria.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  [PLACEHOLDER-TYPE:STRING] OR t2.Company_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT sm.Pixels \nFROM screen_mode sm \nJOIN phone p ON sm.Graphics_mode = p.screen_mode \nWHERE p.Accreditation_type IN ('Full', 'Provisional');",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the hardware model names and company names of phones from the 'phone' table that have a specific type of accreditation. The placeholder in the WHERE clause represents the accreditation type being queried.\",\n        \"virtual_table\": \"SELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of phones manufactured by each company from the 'phone' table. The placeholder in the LIMIT clause allows the user to specify the maximum number of companies to display, sorted by the count of phones in ascending order.\",\n        \"virtual_table\": \"SELECT Company_name ,  count(*) FROM phone GROUP BY Company_name ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT T1.Pixels FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Accreditation_type = 'Full' OR T2.Accreditation_type = 'Provisional';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the character cells, resolution in pixels, and the number of hardware colors supported by the screen modes of phones that match a specific hardware model name. The placeholder in the WHERE clause represents the hardware model name of the phone.\",\n        \"virtual_table\": \"SELECT T1.Char_cells ,  T1.Pixels ,  T1.Hardware_colours FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Hardware_Model_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the hardware model names and company names of phones that utilize a specific type of screen mode from the 'screen_mode' table. The placeholder in the WHERE clause represents the type of screen mode being queried.\",\n        \"virtual_table\": \"SELECT T2.Hardware_Model_name ,  T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a distinct list of hardware model names and their corresponding company names from the 'phone' table, filtered by the screen modes that use a specific range of kilobytes. The placeholders in the WHERE clause represent the lower and upper limits of kilobytes used by the screen mode.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Hardware_Model_name , T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.used_kb BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_3+": "SELECT T3.Pixels FROM phone AS T1 JOIN screen_mode AS T3 ON T1.screen_mode = T3.Graphics_mode WHERE T1.Accreditation_type = 'Full' OR T1.Accreditation_type = 'Provisional';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the WiFi capabilities and the type of screen mode for phones based on a specific hardware model name. The placeholders in the WHERE clause represent the hardware model name of the phone.\",\n        \"virtual_table\": \"SELECT T1.WiFi , T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the hardware model names of phones that either support a specific type of screen mode or have a RAM capacity greater than a specified amount. The placeholders in the WHERE clause represent the screen mode type and the RAM capacity respectively.\",\n        \"virtual_table\": \"SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T3.Type = [PLACEHOLDER-TYPE:STRING] OR T1.RAM_MiB  >  [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1060",
        "c_low": "SELECT Player FROM player WHERE Team IN (SELECT Team_id FROM match_season WHERE College = 'UCLA');",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.College = 'UCLA'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the official native languages of countries represented by players who attended specific colleges. The placeholders in the WHERE clause allow for filtering based on the names of the colleges.\",\n        \"virtual_table\": \"SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  [PLACEHOLDER-TYPE:STRING] OR T2.College  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT Player FROM player WHERE Team IN (SELECT Team FROM match_season WHERE College = 'UCLA')",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of colleges from which players have participated in matches during a specific season. The results are grouped by college, and only those colleges with a number of players equal to or greater than a specified threshold are included. The placeholder in the HAVING clause represents the minimum number of players required from each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER] ORDER BY College DESC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the colleges that have produced a significant number of players participating in matches during a specific season. The placeholder in the HAVING clause represents the minimum count of players that must be associated with each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Player FROM player WHERE Team IN (SELECT Team FROM match_season WHERE College = 'UCLA')",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of colleges from which players have participated in matches during a specific season. The results are grouped by college, and only those colleges with a number of players equal to or greater than a specified threshold are included. The placeholder in the HAVING clause represents the minimum number of players required from each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER] ORDER BY College DESC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the colleges that have produced a significant number of players participating in matches during a specific season. The placeholder in the HAVING clause represents the minimum count of players that must be associated with each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.College = 'UCLA'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the official native languages of countries represented by players who attended specific colleges. The placeholders in the WHERE clause allow for filtering based on the names of the colleges.\",\n        \"virtual_table\": \"SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  [PLACEHOLDER-TYPE:STRING] OR T2.College  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Player FROM player WHERE Team IN (SELECT Team_id FROM match_season WHERE College = 'UCLA');",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1064",
        "c_low": "SELECT Draft_Pick_Number, Draft_Class FROM match_season WHERE Position = 'defender';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the positions of players from the 'match_season' table who are part of a specific team. The placeholder in the WHERE clause represents the name of the team.\",\n        \"virtual_table\": \"SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT Draft_Pick_Number, Draft_Class FROM match_season WHERE Position = 'defender';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT Draft_Pick_Number, Draft_Class FROM match_season WHERE Position = 'defender'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the draft pick number and draft class of players from the 'match_season' table who play in a specific position. The placeholder in the WHERE clause represents the position of the player.\",\n        \"virtual_table\": \"SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and years played of players from the 'player' table who are part of a specific team. The placeholder in the WHERE clause represents the name of the team.\",\n        \"virtual_table\": \"SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT Draft_Pick_Number, Draft_Class FROM match_season WHERE Position = 'defender'",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the draft pick number and draft class of players from the 'match_season' table who play in a specific position. The placeholder in the WHERE clause represents the position of the player.\",\n        \"virtual_table\": \"SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT Draft_Pick_Number, Draft_Class FROM match_season WHERE Position = 'defender';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and years played of players from the 'player' table who are part of a specific team. The placeholder in the WHERE clause represents the name of the team.\",\n        \"virtual_table\": \"SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the positions of players from the 'match_season' table who are part of a specific team. The placeholder in the WHERE clause represents the name of the team.\",\n        \"virtual_table\": \"SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Draft_Pick_Number, Draft_Class FROM match_season WHERE Position = 'defender';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1073",
        "c_low": "SELECT T2.Player, T1.Season, T1.Country \nFROM match_season AS T1 \nJOIN country AS T2 ON T1.Country = T2.Country_id;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the players from the 'match_season' table who represent a specific country. The query joins the 'country' table to filter players based on the country's name, with a placeholder for the country name in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the positions of players from the 'match_season' table who are part of a specific team. The placeholder in the WHERE clause represents the name of the team.\",\n        \"virtual_table\": \"SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT T2.Player, T1.Season, T1.Country \nFROM match_season AS T1 \nJOIN player AS T2 ON T1.Player = T2.Player \nORDER BY T2.Player;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique player positions from the 'match_season' table for players representing countries with a specific capital city. The placeholder in the WHERE clause represents the name of the capital city.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table counts the distinct official native languages of countries represented by players in a specific position during matches. The placeholder in the WHERE clause represents the player's position.\",\n        \"virtual_table\": \"SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the official native languages of countries represented by players who attended specific colleges. The placeholders in the WHERE clause allow for filtering based on the names of the colleges.\",\n        \"virtual_table\": \"SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  [PLACEHOLDER-TYPE:STRING] OR T2.College  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT ms.Player, ms.Season, c.Country_name \nFROM match_season AS ms \nJOIN country AS c ON ms.Country = c.Country_id;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and years played of players from the 'player' table who are part of a specific team. The placeholder in the WHERE clause represents the name of the team.\",\n        \"virtual_table\": \"SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT player.Player, match_season.Season, match_season.Country \nFROM player \nJOIN match_season ON player.Player = match_season.Player;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T2.Player, T1.Season, T1.Country \nFROM match_season AS T1 \nJOIN player AS T2 ON T1.Player = T2.Player \nJOIN country AS T3 ON T1.Country = T3.Country_id;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the players from the 'match_season' table who represent a specific country. The query joins the 'country' table to filter players based on the country's name, with a placeholder for the country name in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and years played of players from the 'player' table who are part of a specific team. The placeholder in the WHERE clause represents the name of the team.\",\n        \"virtual_table\": \"SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique player positions from the 'match_season' table for players representing countries with a specific capital city. The placeholder in the WHERE clause represents the name of the capital city.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT player.Player, match_season.Season, match_season.Country \nFROM player \nJOIN match_season ON player.Player = match_season.Player;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1080",
        "c_low": "SELECT COUNT(DISTINCT c.Official_native_language) \nFROM match_season AS ms \nJOIN country AS c ON ms.Country = c.Country_id \nWHERE ms.Position = 'defender';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the players from the 'match_season' table who represent a specific country. The query joins the 'country' table to filter players based on the country's name, with a placeholder for the country name in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = 'defender'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the distinct official native languages of countries represented by players in a specific position during matches. The placeholder in the WHERE clause represents the player's position.\",\n        \"virtual_table\": \"SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the official native languages of countries represented by players who attended specific colleges. The placeholders in the WHERE clause allow for filtering based on the names of the colleges.\",\n        \"virtual_table\": \"SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  [PLACEHOLDER-TYPE:STRING] OR T2.College  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique player positions from the 'match_season' table for players representing countries with a specific capital city. The placeholder in the WHERE clause represents the name of the capital city.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT COUNT(DISTINCT c.Official_native_language) AS Distinct_Languages\nFROM match_season ms\nJOIN country c ON ms.Country = c.Country_id\nWHERE ms.Position = 'defender';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT COUNT(DISTINCT c.Official_native_language) AS Distinct_Languages\nFROM match_season ms\nJOIN country c ON ms.Country = c.Country_id\nWHERE ms.Position = 'defender';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = 'defender'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the distinct official native languages of countries represented by players in a specific position during matches. The placeholder in the WHERE clause represents the player's position.\",\n        \"virtual_table\": \"SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the official native languages of countries represented by players who attended specific colleges. The placeholders in the WHERE clause allow for filtering based on the names of the colleges.\",\n        \"virtual_table\": \"SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  [PLACEHOLDER-TYPE:STRING] OR T2.College  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique player positions from the 'match_season' table for players representing countries with a specific capital city. The placeholder in the WHERE clause represents the name of the capital city.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(DISTINCT c.Official_native_language) AS Distinct_Languages\nFROM match_season ms\nJOIN country c ON ms.Country = c.Country_id\nWHERE ms.Position = 'defender';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1082",
        "c_low": "SELECT T1.Season, T2.Player, T3.Name \nFROM match_season AS T1 \nJOIN player AS T2 ON T1.Player = T2.Player \nJOIN team AS T3 ON T2.Team = T3.Team_id;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the positions of players from the 'match_season' table who are part of a specific team. The placeholder in the WHERE clause represents the name of the team.\",\n        \"virtual_table\": \"SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the players from the 'match_season' table who represent a specific country. The query joins the 'country' table to filter players based on the country's name, with a placeholder for the country name in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT T1.Season, T2.Player, T3.Name \nFROM match_season AS T1 \nJOIN player AS T2 ON T1.Player = T2.Player \nJOIN team AS T3 ON T2.Team = T3.Team_id;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique player positions from the 'match_season' table for players representing countries with a specific capital city. The placeholder in the WHERE clause represents the name of the capital city.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of distinct colleges represented by players in a specific team from the 'match_season' table. The placeholder in the WHERE clause allows for filtering by the team's name.\",\n        \"virtual_table\": \"SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT MS.Season, MS.Player, T.Name FROM match_season AS MS JOIN team AS T ON MS.Team = T.Team_id;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and years played of players from the 'player' table who are part of a specific team. The placeholder in the WHERE clause represents the name of the team.\",\n        \"virtual_table\": \"SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT match_season.Season, match_season.Player, team.Name \nFROM match_season \nJOIN team ON match_season.Team = team.Team_id;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T1.Season, T2.Player, T3.Name \nFROM match_season AS T1 \nJOIN player AS T2 ON T1.Player = T2.Player \nJOIN team AS T3 ON T2.Team = T3.Team_id;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the positions of players from the 'match_season' table who are part of a specific team. The placeholder in the WHERE clause represents the name of the team.\",\n        \"virtual_table\": \"SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and years played of players from the 'player' table who are part of a specific team. The placeholder in the WHERE clause represents the name of the team.\",\n        \"virtual_table\": \"SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the players from the 'match_season' table who represent a specific country. The query joins the 'country' table to filter players based on the country's name, with a placeholder for the country name in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT match_season.Season, match_season.Player, team.Name \nFROM match_season \nJOIN team ON match_season.Team = team.Team_id;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1083",
        "c_low": "SELECT T2.Player, T1.Season, T2.Team \nFROM match_season AS T1 \nJOIN player AS T2 ON T1.Player = T2.Player \nGROUP BY T2.Player, T1.Season, T2.Team;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the positions of players from the 'match_season' table who are part of a specific team. The placeholder in the WHERE clause represents the name of the team.\",\n        \"virtual_table\": \"SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the players from the 'match_season' table who represent a specific country. The query joins the 'country' table to filter players based on the country's name, with a placeholder for the country name in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT match_season.Player, match_season.Season, match_season.Team \nFROM match_season;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT match_season.Player, match_season.Season, match_season.Team \nFROM match_season;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and years played of players from the 'player' table who are part of a specific team. The placeholder in the WHERE clause represents the name of the team.\",\n        \"virtual_table\": \"SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT match_season.Player, match_season.Season, match_season.Team\nFROM match_season;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T2.Player, T1.Season, T2.Team FROM match_season AS T1 JOIN player AS T2 ON T1.Player = T2.Player_ID;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and years played of players from the 'player' table who are part of a specific team. The placeholder in the WHERE clause represents the name of the team.\",\n        \"virtual_table\": \"SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the positions of players from the 'match_season' table who are part of a specific team. The placeholder in the WHERE clause represents the name of the team.\",\n        \"virtual_table\": \"SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the players from the 'match_season' table who represent a specific country. The query joins the 'country' table to filter players based on the country's name, with a placeholder for the country name in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT match_season.Player, match_season.Season, match_season.Team FROM match_season;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1092",
        "c_low": "SELECT c.Country_name, COUNT(ms.Player) AS Number_of_Players\nFROM country AS c\nLEFT JOIN match_season AS ms ON c.Country_id = ms.Country\nGROUP BY c.Country_name;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the players from the 'match_season' table who represent a specific country. The query joins the 'country' table to filter players based on the country's name, with a placeholder for the country name in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT C.Country_name, COUNT(M.Player) AS Number_of_Players \nFROM country AS C \nJOIN match_season AS M ON C.Country_id = M.Country \nGROUP BY C.Country_name;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the distinct official native languages of countries represented by players in a specific position during matches. The placeholder in the WHERE clause represents the player's position.\",\n        \"virtual_table\": \"SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique player positions from the 'match_season' table for players representing countries with a specific capital city. The placeholder in the WHERE clause represents the name of the capital city.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT c.Country_name, COUNT(p.Player_ID) AS Number_of_Players\nFROM country c\nLEFT JOIN match_season ms ON c.Country_id = ms.Country\nLEFT JOIN player p ON ms.Team = p.Team\nGROUP BY c.Country_name;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT c.Country_name, COUNT(p.Player_ID) AS Number_of_Players\nFROM country c\nLEFT JOIN match_season ms ON c.Country_id = ms.Country\nLEFT JOIN player p ON ms.Player = p.Player\nGROUP BY c.Country_name;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT C.Country_name, COUNT(M.Player) AS Number_of_Players \nFROM country AS C \nJOIN match_season AS M ON C.Country_id = M.Country \nGROUP BY C.Country_name;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the distinct official native languages of countries represented by players in a specific position during matches. The placeholder in the WHERE clause represents the player's position.\",\n        \"virtual_table\": \"SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the players from the 'match_season' table who represent a specific country. The query joins the 'country' table to filter players based on the country's name, with a placeholder for the country name in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique player positions from the 'match_season' table for players representing countries with a specific capital city. The placeholder in the WHERE clause represents the name of the capital city.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT c.Country_name, COUNT(p.Player_ID) AS Number_of_Players\nFROM country c\nLEFT JOIN match_season ms ON c.Country_id = ms.Country\nLEFT JOIN player p ON ms.Team = p.Team\nGROUP BY c.Country_name;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1093",
        "c_low": "SELECT T1.Country_name, COUNT(T2.Player) AS Player_Count \nFROM country AS T1 \nJOIN match_season AS T2 ON T1.Country_id = T2.Country \nGROUP BY T1.Country_name;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the players from the 'match_season' table who represent a specific country. The query joins the 'country' table to filter players based on the country's name, with a placeholder for the country name in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT T1.Country_name, COUNT(T2.Player) AS Player_Count \nFROM country AS T1 \nJOIN match_season AS T2 ON T1.Country_id = T2.Country \nGROUP BY T1.Country_name;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the distinct official native languages of countries represented by players in a specific position during matches. The placeholder in the WHERE clause represents the player's position.\",\n        \"virtual_table\": \"SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the official native languages of countries represented by players who attended specific colleges. The placeholders in the WHERE clause allow for filtering based on the names of the colleges.\",\n        \"virtual_table\": \"SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  [PLACEHOLDER-TYPE:STRING] OR T2.College  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique player positions from the 'match_season' table for players representing countries with a specific capital city. The placeholder in the WHERE clause represents the name of the capital city.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT country.Country_name, COUNT(player.Player_ID) AS Player_Count \nFROM country \nJOIN match_season ON country.Country_id = match_season.Country \nJOIN player ON match_season.Player = player.Player \nGROUP BY country.Country_name;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and years played of players from the 'player' table who are part of a specific team. The placeholder in the WHERE clause represents the name of the team.\",\n        \"virtual_table\": \"SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT Country, COUNT(Player) AS Number_of_Players\nFROM match_season\nGROUP BY Country;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T1.Country_name, COUNT(T2.Player) AS Player_Count FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country GROUP BY T1.Country_name;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the players from the 'match_season' table who represent a specific country. The query joins the 'country' table to filter players based on the country's name, with a placeholder for the country name in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table counts the distinct official native languages of countries represented by players in a specific position during matches. The placeholder in the WHERE clause represents the player's position.\",\n        \"virtual_table\": \"SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the official native languages of countries represented by players who attended specific colleges. The placeholders in the WHERE clause allow for filtering based on the names of the colleges.\",\n        \"virtual_table\": \"SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  [PLACEHOLDER-TYPE:STRING] OR T2.College  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Country, COUNT(Player) AS Number_of_Players\nFROM match_season\nGROUP BY Country;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1094",
        "c_low": "SELECT Player, College FROM player ORDER BY College ASC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Player, College FROM player ORDER BY College ASC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT Player, College FROM player ORDER BY College ASC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of colleges from which players have participated in matches during a specific season. The results are grouped by college, and only those colleges with a number of players equal to or greater than a specified threshold are included. The placeholder in the HAVING clause represents the minimum number of players required from each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER] ORDER BY College DESC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the colleges that have produced a significant number of players participating in matches during a specific season. The placeholder in the HAVING clause represents the minimum count of players that must be associated with each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Player, College FROM player ORDER BY College ASC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of colleges from which players have participated in matches during a specific season. The results are grouped by college, and only those colleges with a number of players equal to or greater than a specified threshold are included. The placeholder in the HAVING clause represents the minimum number of players required from each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER] ORDER BY College DESC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the colleges that have produced a significant number of players participating in matches during a specific season. The placeholder in the HAVING clause represents the minimum count of players that must be associated with each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Player, College FROM player ORDER BY College ASC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT Player, College FROM player ORDER BY College ASC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1098",
        "c_low": "SELECT College, COUNT(*) as College_Count \nFROM match_season \nGROUP BY College \nORDER BY College_Count DESC \nLIMIT 3;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT College, COUNT(*) as College_Count FROM match_season GROUP BY College ORDER BY College_Count DESC LIMIT 3;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of distinct colleges represented by players in a specific team from the 'match_season' table. The placeholder in the WHERE clause allows for filtering by the team's name.\",\n        \"virtual_table\": \"SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the official native languages of countries represented by players who attended specific colleges. The placeholders in the WHERE clause allow for filtering based on the names of the colleges.\",\n        \"virtual_table\": \"SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  [PLACEHOLDER-TYPE:STRING] OR T2.College  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT College, COUNT(*) as Player_Count FROM match_season GROUP BY College ORDER BY Player_Count DESC LIMIT 3",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of colleges from which players have participated in matches during a specific season. The results are grouped by college, and only those colleges with a number of players equal to or greater than a specified threshold are included. The placeholder in the HAVING clause represents the minimum number of players required from each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER] ORDER BY College DESC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the colleges that have produced a significant number of players participating in matches during a specific season. The placeholder in the HAVING clause represents the minimum count of players that must be associated with each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT College, COUNT(*) as Player_Count FROM match_season GROUP BY College ORDER BY Player_Count DESC LIMIT 3",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of colleges from which players have participated in matches during a specific season. The results are grouped by college, and only those colleges with a number of players equal to or greater than a specified threshold are included. The placeholder in the HAVING clause represents the minimum number of players required from each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER] ORDER BY College DESC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the colleges that have produced a significant number of players participating in matches during a specific season. The placeholder in the HAVING clause represents the minimum count of players that must be associated with each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT College, COUNT(*) as College_Count FROM match_season GROUP BY College ORDER BY College_Count DESC LIMIT 3;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of distinct colleges represented by players in a specific team from the 'match_season' table. The placeholder in the WHERE clause allows for filtering by the team's name.\",\n        \"virtual_table\": \"SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the official native languages of countries represented by players who attended specific colleges. The placeholders in the WHERE clause allow for filtering based on the names of the colleges.\",\n        \"virtual_table\": \"SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  [PLACEHOLDER-TYPE:STRING] OR T2.College  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT College, COUNT(*) as College_Count \nFROM match_season \nGROUP BY College \nORDER BY College_Count DESC \nLIMIT 3;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1099",
        "c_low": "SELECT College, COUNT(*) as Player_Count\nFROM match_season\nGROUP BY College\nORDER BY Player_Count DESC\nLIMIT 3;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT College, COUNT(*) as Player_Count FROM match_season GROUP BY College ORDER BY Player_Count DESC LIMIT 3;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the official native languages of countries represented by players who attended specific colleges. The placeholders in the WHERE clause allow for filtering based on the names of the colleges.\",\n        \"virtual_table\": \"SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  [PLACEHOLDER-TYPE:STRING] OR T2.College  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of distinct colleges represented by players in a specific team from the 'match_season' table. The placeholder in the WHERE clause allows for filtering by the team's name.\",\n        \"virtual_table\": \"SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT College, COUNT(*) as Player_Count FROM match_season GROUP BY College ORDER BY Player_Count DESC LIMIT 3;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the colleges that have produced a significant number of players participating in matches during a specific season. The placeholder in the HAVING clause represents the minimum count of players that must be associated with each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of colleges from which players have participated in matches during a specific season. The results are grouped by college, and only those colleges with a number of players equal to or greater than a specified threshold are included. The placeholder in the HAVING clause represents the minimum number of players required from each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER] ORDER BY College DESC\"\n    }\n}\n",
        "t_1": "SELECT College, COUNT(*) as Player_Count FROM match_season GROUP BY College ORDER BY Player_Count DESC LIMIT 3;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the colleges that have produced a significant number of players participating in matches during a specific season. The placeholder in the HAVING clause represents the minimum count of players that must be associated with each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of colleges from which players have participated in matches during a specific season. The results are grouped by college, and only those colleges with a number of players equal to or greater than a specified threshold are included. The placeholder in the HAVING clause represents the minimum number of players required from each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER] ORDER BY College DESC\"\n    }\n}\n",
        "t_2": "SELECT College, COUNT(*) as Player_Count FROM match_season GROUP BY College ORDER BY Player_Count DESC LIMIT 3;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the official native languages of countries represented by players who attended specific colleges. The placeholders in the WHERE clause allow for filtering based on the names of the colleges.\",\n        \"virtual_table\": \"SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  [PLACEHOLDER-TYPE:STRING] OR T2.College  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of distinct colleges represented by players in a specific team from the 'match_season' table. The placeholder in the WHERE clause allows for filtering by the team's name.\",\n        \"virtual_table\": \"SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT College, COUNT(*) as Player_Count\nFROM match_season\nGROUP BY College\nORDER BY Player_Count DESC\nLIMIT 3;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1106",
        "c_low": "SELECT DISTINCT c.Country_name \nFROM country AS c \nJOIN match_season AS ms ON c.Country_id = ms.Country \nWHERE ms.Position IN ('forward', 'defender') \nGROUP BY c.Country_name \nHAVING COUNT(DISTINCT ms.Position) = 2;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the players from the 'match_season' table who represent a specific country. The query joins the 'country' table to filter players based on the country's name, with a placeholder for the country name in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the positions of players from the 'match_season' table who are part of a specific team. The placeholder in the WHERE clause represents the name of the team.\",\n        \"virtual_table\": \"SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT C.Country_name \nFROM country AS C \nJOIN match_season AS MS1 ON C.Country_id = MS1.Country \nJOIN match_season AS MS2 ON C.Country_id = MS2.Country \nWHERE MS1.Position = 'forward' AND MS2.Position = 'defender';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique player positions from the 'match_season' table for players representing countries with a specific capital city. The placeholder in the WHERE clause represents the name of the capital city.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table counts the distinct official native languages of countries represented by players in a specific position during matches. The placeholder in the WHERE clause represents the player's position.\",\n        \"virtual_table\": \"SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the official native languages of countries represented by players who attended specific colleges. The placeholders in the WHERE clause allow for filtering based on the names of the colleges.\",\n        \"virtual_table\": \"SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  [PLACEHOLDER-TYPE:STRING] OR T2.College  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT C.Country_name \nFROM country AS C \nJOIN match_season AS MS ON C.Country_id = MS.Country \nWHERE MS.Position IN ('forward', 'defender') \nGROUP BY C.Country_name \nHAVING COUNT(DISTINCT MS.Position) = 2;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and years played of players from the 'player' table who are part of a specific team. The placeholder in the WHERE clause represents the name of the team.\",\n        \"virtual_table\": \"SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT c.Country_name\nFROM country c\nJOIN match_season ms ON c.Country_id = ms.Country\nWHERE ms.Position IN ('forward', 'defender')\nGROUP BY c.Country_name\nHAVING COUNT(DISTINCT ms.Position) = 2;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT DISTINCT C.Country_name \nFROM country AS C \nJOIN match_season AS MS1 ON C.Country_id = MS1.Country \nJOIN match_season AS MS2 ON C.Country_id = MS2.Country \nWHERE MS1.Position = 'forward' AND MS2.Position = 'defender';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique player positions from the 'match_season' table for players representing countries with a specific capital city. The placeholder in the WHERE clause represents the name of the capital city.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table counts the distinct official native languages of countries represented by players in a specific position during matches. The placeholder in the WHERE clause represents the player's position.\",\n        \"virtual_table\": \"SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the players from the 'match_season' table who represent a specific country. The query joins the 'country' table to filter players based on the country's name, with a placeholder for the country name in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT c.Country_name\nFROM country c\nJOIN match_season ms ON c.Country_id = ms.Country\nWHERE ms.Position IN ('forward', 'defender')\nGROUP BY c.Country_name\nHAVING COUNT(DISTINCT ms.Position) = 2;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1107",
        "c_low": "SELECT DISTINCT c.Country_name \nFROM country AS c \nJOIN match_season AS ms ON c.Country_id = ms.Country \nWHERE ms.Position IN ('Forward', 'Defender');",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the players from the 'match_season' table who represent a specific country. The query joins the 'country' table to filter players based on the country's name, with a placeholder for the country name in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the positions of players from the 'match_season' table who are part of a specific team. The placeholder in the WHERE clause represents the name of the team.\",\n        \"virtual_table\": \"SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position IN ('Forward', 'Defender')",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique player positions from the 'match_season' table for players representing countries with a specific capital city. The placeholder in the WHERE clause represents the name of the capital city.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table counts the distinct official native languages of countries represented by players in a specific position during matches. The placeholder in the WHERE clause represents the player's position.\",\n        \"virtual_table\": \"SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the official native languages of countries represented by players who attended specific colleges. The placeholders in the WHERE clause allow for filtering based on the names of the colleges.\",\n        \"virtual_table\": \"SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  [PLACEHOLDER-TYPE:STRING] OR T2.College  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT c.Country_name \nFROM country AS c \nJOIN match_season AS ms ON c.Country_id = ms.Country \nWHERE ms.Position IN ('Forward', 'Defender');",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and years played of players from the 'player' table who are part of a specific team. The placeholder in the WHERE clause represents the name of the team.\",\n        \"virtual_table\": \"SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT c.Country_name \nFROM country c \nJOIN match_season ms ON c.Country_id = ms.Country \nWHERE ms.Position IN ('Forward', 'Defender');",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT DISTINCT C.Country_name \nFROM country AS C \nJOIN match_season AS MS ON C.Country_id = MS.Country \nWHERE MS.Position IN ('Forward', 'Defender');",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique player positions from the 'match_season' table for players representing countries with a specific capital city. The placeholder in the WHERE clause represents the name of the capital city.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table counts the distinct official native languages of countries represented by players in a specific position during matches. The placeholder in the WHERE clause represents the player's position.\",\n        \"virtual_table\": \"SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the players from the 'match_season' table who represent a specific country. The query joins the 'country' table to filter players based on the country's name, with a placeholder for the country name in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT c.Country_name \nFROM country c \nJOIN match_season ms ON c.Country_id = ms.Country \nWHERE ms.Position IN ('Forward', 'Defender');",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1108",
        "c_low": "SELECT DISTINCT m.College\nFROM match_season m\nJOIN player p ON m.Player = p.Player\nWHERE m.Position IN ('midfielder', 'defender')\nGROUP BY m.College\nHAVING COUNT(DISTINCT m.Position) = 2;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT DISTINCT T1.College \nFROM match_season AS T1 \nWHERE T1.Position = 'midfielder' \nAND T1.College IN (SELECT College FROM match_season WHERE Position = 'defender');",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the official native languages of countries represented by players who attended specific colleges. The placeholders in the WHERE clause allow for filtering based on the names of the colleges.\",\n        \"virtual_table\": \"SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  [PLACEHOLDER-TYPE:STRING] OR T2.College  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of distinct colleges represented by players in a specific team from the 'match_season' table. The placeholder in the WHERE clause allows for filtering by the team's name.\",\n        \"virtual_table\": \"SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT College FROM match_season WHERE Position IN ('midfielder', 'defender') GROUP BY College HAVING COUNT(DISTINCT Player) = 2",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the colleges that have produced a significant number of players participating in matches during a specific season. The placeholder in the HAVING clause represents the minimum count of players that must be associated with each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of colleges from which players have participated in matches during a specific season. The results are grouped by college, and only those colleges with a number of players equal to or greater than a specified threshold are included. The placeholder in the HAVING clause represents the minimum number of players required from each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER] ORDER BY College DESC\"\n    }\n}\n",
        "t_1": "SELECT College FROM match_season WHERE Position IN ('midfielder', 'defender') GROUP BY College HAVING COUNT(DISTINCT Player) = 2",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the colleges that have produced a significant number of players participating in matches during a specific season. The placeholder in the HAVING clause represents the minimum count of players that must be associated with each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of colleges from which players have participated in matches during a specific season. The results are grouped by college, and only those colleges with a number of players equal to or greater than a specified threshold are included. The placeholder in the HAVING clause represents the minimum number of players required from each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER] ORDER BY College DESC\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT T1.College \nFROM match_season AS T1 \nWHERE T1.Position = 'midfielder' \nAND T1.College IN (SELECT College FROM match_season WHERE Position = 'defender');",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the official native languages of countries represented by players who attended specific colleges. The placeholders in the WHERE clause allow for filtering based on the names of the colleges.\",\n        \"virtual_table\": \"SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  [PLACEHOLDER-TYPE:STRING] OR T2.College  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of distinct colleges represented by players in a specific team from the 'match_season' table. The placeholder in the WHERE clause allows for filtering by the team's name.\",\n        \"virtual_table\": \"SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT m.College\nFROM match_season m\nWHERE m.Position IN ('midfielder', 'defender')\nGROUP BY m.College\nHAVING COUNT(DISTINCT m.Position) = 2;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1109",
        "c_low": "SELECT DISTINCT College FROM match_season WHERE Position IN ('Midfielder', 'Defender')",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the positions of players from the 'match_season' table who are part of a specific team. The placeholder in the WHERE clause represents the name of the team.\",\n        \"virtual_table\": \"SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT College FROM match_season WHERE Position = 'Midfielder' OR Position = 'Defender';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the official native languages of countries represented by players who attended specific colleges. The placeholders in the WHERE clause allow for filtering based on the names of the colleges.\",\n        \"virtual_table\": \"SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  [PLACEHOLDER-TYPE:STRING] OR T2.College  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of distinct colleges represented by players in a specific team from the 'match_season' table. The placeholder in the WHERE clause allows for filtering by the team's name.\",\n        \"virtual_table\": \"SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique player positions from the 'match_season' table for players representing countries with a specific capital city. The placeholder in the WHERE clause represents the name of the capital city.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT College FROM match_season WHERE Position IN ('Midfielder', 'Defender') GROUP BY College HAVING count(*) >= 1 ORDER BY College DESC",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of colleges from which players have participated in matches during a specific season. The results are grouped by college, and only those colleges with a number of players equal to or greater than a specified threshold are included. The placeholder in the HAVING clause represents the minimum number of players required from each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER] ORDER BY College DESC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the colleges that have produced a significant number of players participating in matches during a specific season. The placeholder in the HAVING clause represents the minimum count of players that must be associated with each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT College FROM match_season WHERE Position IN ('Midfielder', 'Defender') GROUP BY College HAVING count(*) >= 1 ORDER BY College DESC",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of colleges from which players have participated in matches during a specific season. The results are grouped by college, and only those colleges with a number of players equal to or greater than a specified threshold are included. The placeholder in the HAVING clause represents the minimum number of players required from each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER] ORDER BY College DESC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the colleges that have produced a significant number of players participating in matches during a specific season. The placeholder in the HAVING clause represents the minimum count of players that must be associated with each college.\",\n        \"virtual_table\": \"SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT College FROM match_season WHERE Position = 'Midfielder' OR Position = 'Defender';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the official native languages of countries represented by players who attended specific colleges. The placeholders in the WHERE clause allow for filtering based on the names of the colleges.\",\n        \"virtual_table\": \"SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  [PLACEHOLDER-TYPE:STRING] OR T2.College  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of distinct colleges represented by players in a specific team from the 'match_season' table. The placeholder in the WHERE clause allows for filtering by the team's name.\",\n        \"virtual_table\": \"SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique player positions from the 'match_season' table for players representing countries with a specific capital city. The placeholder in the WHERE clause represents the name of the capital city.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT College \nFROM match_season \nWHERE Position IN ('Midfielder', 'Defender');",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1122",
        "c_low": "SELECT DISTINCT Country FROM mountain WHERE Height > 5000;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the heights of mountains that climbers have ascended, ordered by the points awarded to the climbers. The placeholder in the LIMIT clause allows for specifying the number of results to return.\",\n        \"virtual_table\": \"SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT Country FROM mountain WHERE Height > 5000",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the climbing times of climbers who have ascended mountains located in a specific country. The placeholder in the WHERE clause represents the name of the country.\",\n        \"virtual_table\": \"SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT Country FROM mountain WHERE Height > '5000'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of mountains climbed by climbers from a specific country. The placeholder in the WHERE clause represents the country of origin of the climbers.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of countries that have more than a specified number of mountains in the 'mountain' table. The placeholder in the HAVING clause represents the minimum count of mountains required for a country to be included in the results.\",\n        \"virtual_table\": \"SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the number of climbers from each country who have climbed mountains. The placeholder in the SELECT statement allows for the retrieval of the country names, while the COUNT function aggregates the total number of climbers per country.\",\n        \"virtual_table\": \"SELECT Country ,  COUNT(*) FROM climber GROUP BY Country\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT Country FROM mountain WHERE Height > 5000",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of countries that have more than a specified number of mountains in the 'mountain' table. The placeholder in the HAVING clause represents the minimum count of mountains required for a country to be included in the results.\",\n        \"virtual_table\": \"SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of climbers from each country who have climbed mountains. The placeholder in the SELECT statement allows for the retrieval of the country names, while the COUNT function aggregates the total number of climbers per country.\",\n        \"virtual_table\": \"SELECT Country ,  COUNT(*) FROM climber GROUP BY Country\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT Country FROM mountain WHERE Height > 5000",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of mountains climbed by climbers from a specific country. The placeholder in the WHERE clause represents the country of origin of the climbers.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the climbing times of climbers who have ascended mountains located in a specific country. The placeholder in the WHERE clause represents the name of the country.\",\n        \"virtual_table\": \"SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the heights of mountains that climbers have ascended, ordered by the points awarded to the climbers. The placeholder in the LIMIT clause allows for specifying the number of results to return.\",\n        \"virtual_table\": \"SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT Country FROM mountain WHERE Height > '5000';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1123",
        "c_low": "SELECT DISTINCT Country FROM mountain WHERE Height > 5000;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the heights of mountains that climbers have ascended, ordered by the points awarded to the climbers. The placeholder in the LIMIT clause allows for specifying the number of results to return.\",\n        \"virtual_table\": \"SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT Country FROM mountain WHERE Height > 5000",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the climbing times of climbers who have ascended mountains located in a specific country. The placeholder in the WHERE clause represents the name of the country.\",\n        \"virtual_table\": \"SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT Country FROM mountain WHERE Height > 5000",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of countries that have more than a specified number of mountains in the 'mountain' table. The placeholder in the HAVING clause represents the minimum count of mountains required for a country to be included in the results.\",\n        \"virtual_table\": \"SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the distinct names of mountains climbed by climbers from a specific country. The placeholder in the WHERE clause represents the country of origin of the climbers.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the number of climbers from each country who have climbed mountains. The placeholder in the SELECT statement allows for the retrieval of the country names, while the COUNT function aggregates the total number of climbers per country.\",\n        \"virtual_table\": \"SELECT Country ,  COUNT(*) FROM climber GROUP BY Country\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT Country FROM mountain WHERE Height > 5000",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of countries that have more than a specified number of mountains in the 'mountain' table. The placeholder in the HAVING clause represents the minimum count of mountains required for a country to be included in the results.\",\n        \"virtual_table\": \"SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of climbers from each country who have climbed mountains. The placeholder in the SELECT statement allows for the retrieval of the country names, while the COUNT function aggregates the total number of climbers per country.\",\n        \"virtual_table\": \"SELECT Country ,  COUNT(*) FROM climber GROUP BY Country\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT Country FROM mountain WHERE Height > 5000",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of mountains climbed by climbers from a specific country. The placeholder in the WHERE clause represents the country of origin of the climbers.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the heights of mountains that climbers have ascended, ordered by the points awarded to the climbers. The placeholder in the LIMIT clause allows for specifying the number of results to return.\",\n        \"virtual_table\": \"SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the climbing times of climbers who have ascended mountains located in a specific country. The placeholder in the WHERE clause represents the name of the country.\",\n        \"virtual_table\": \"SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT Country FROM mountain WHERE Height > '5000';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1144",
        "c_low": "SELECT DISTINCT Country FROM mountain WHERE Height > 5600 OR Height < 5200;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the heights of mountains that climbers have ascended, ordered by the points awarded to the climbers. The placeholder in the LIMIT clause allows for specifying the number of results to return.\",\n        \"virtual_table\": \"SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT Country FROM mountain WHERE Height > 5600 OR Height < 5200;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the climbing times of climbers who have ascended mountains located in a specific country. The placeholder in the WHERE clause represents the name of the country.\",\n        \"virtual_table\": \"SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT Country FROM mountain WHERE Height > '5600' OR Height < '5200'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of mountains climbed by climbers from a specific country. The placeholder in the WHERE clause represents the country of origin of the climbers.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of countries that have more than a specified number of mountains in the 'mountain' table. The placeholder in the HAVING clause represents the minimum count of mountains required for a country to be included in the results.\",\n        \"virtual_table\": \"SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the number of climbers from each country who have climbed mountains. The placeholder in the SELECT statement allows for the retrieval of the country names, while the COUNT function aggregates the total number of climbers per country.\",\n        \"virtual_table\": \"SELECT Country ,  COUNT(*) FROM climber GROUP BY Country\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT Country FROM mountain WHERE Height > 5600 OR Height < 5200;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of countries that have more than a specified number of mountains in the 'mountain' table. The placeholder in the HAVING clause represents the minimum count of mountains required for a country to be included in the results.\",\n        \"virtual_table\": \"SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of climbers from each country who have climbed mountains. The placeholder in the SELECT statement allows for the retrieval of the country names, while the COUNT function aggregates the total number of climbers per country.\",\n        \"virtual_table\": \"SELECT Country ,  COUNT(*) FROM climber GROUP BY Country\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT Country FROM mountain WHERE Height > 5600 OR Height < 5200;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of mountains climbed by climbers from a specific country. The placeholder in the WHERE clause represents the country of origin of the climbers.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the heights of mountains that climbers have ascended, ordered by the points awarded to the climbers. The placeholder in the LIMIT clause allows for specifying the number of results to return.\",\n        \"virtual_table\": \"SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the climbing times of climbers who have ascended mountains located in a specific country. The placeholder in the WHERE clause represents the name of the country.\",\n        \"virtual_table\": \"SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT Country FROM mountain WHERE Height > '5600' OR Height < '5200';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1145",
        "c_low": "SELECT DISTINCT Country FROM mountain WHERE Height > 5600 OR Height < 5200 GROUP BY Country HAVING COUNT(CASE WHEN Height > 5600 THEN 1 END) > 0 AND COUNT(CASE WHEN Height < 5200 THEN 1 END) > 0;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the heights of mountains that climbers have ascended, ordered by the points awarded to the climbers. The placeholder in the LIMIT clause allows for specifying the number of results to return.\",\n        \"virtual_table\": \"SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT Country FROM mountain WHERE Height > 5600 OR Height < 5200 GROUP BY Country HAVING COUNT(CASE WHEN Height > 5600 THEN 1 END) > 0 AND COUNT(CASE WHEN Height < 5200 THEN 1 END) > 0;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the climbing times of climbers who have ascended mountains located in a specific country. The placeholder in the WHERE clause represents the name of the country.\",\n        \"virtual_table\": \"SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT Country FROM mountain WHERE Height > 5600 AND Height < 5200",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of mountains climbed by climbers from a specific country. The placeholder in the WHERE clause represents the country of origin of the climbers.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of countries that have more than a specified number of mountains in the 'mountain' table. The placeholder in the HAVING clause represents the minimum count of mountains required for a country to be included in the results.\",\n        \"virtual_table\": \"SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the number of climbers from each country who have climbed mountains. The placeholder in the SELECT statement allows for the retrieval of the country names, while the COUNT function aggregates the total number of climbers per country.\",\n        \"virtual_table\": \"SELECT Country ,  COUNT(*) FROM climber GROUP BY Country\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT m1.Country \nFROM mountain m1, mountain m2 \nWHERE m1.Height > 5600 AND m2.Height < 5200 AND m1.Country = m2.Country;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of countries that have more than a specified number of mountains in the 'mountain' table. The placeholder in the HAVING clause represents the minimum count of mountains required for a country to be included in the results.\",\n        \"virtual_table\": \"SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of climbers from each country who have climbed mountains. The placeholder in the SELECT statement allows for the retrieval of the country names, while the COUNT function aggregates the total number of climbers per country.\",\n        \"virtual_table\": \"SELECT Country ,  COUNT(*) FROM climber GROUP BY Country\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT Country FROM mountain WHERE Height > 5600 AND Height < 5200",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of mountains climbed by climbers from a specific country. The placeholder in the WHERE clause represents the country of origin of the climbers.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the climbing times of climbers who have ascended mountains located in a specific country. The placeholder in the WHERE clause represents the name of the country.\",\n        \"virtual_table\": \"SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the heights of mountains that climbers have ascended, ordered by the points awarded to the climbers. The placeholder in the LIMIT clause allows for specifying the number of results to return.\",\n        \"virtual_table\": \"SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT Country FROM mountain WHERE Height > 5600 OR Height < 5200;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1164",
        "c_low": "SELECT Birth_Place, COUNT(*) as Count\nFROM people\nGROUP BY Birth_Place\nORDER BY Count DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Birth_Place, COUNT(Birth_Place) AS Place_Count FROM people GROUP BY Birth_Place ORDER BY Place_Count DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the birth date and place of individuals associated with bodybuilders, sorted by the total weight lifted in descending order. The placeholder in the LIMIT clause allows for specifying the number of records to return.\",\n        \"virtual_table\": \"SELECT T2.Birth_Date ,  T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*) >= 1 ORDER BY COUNT(*) DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the birth places of individuals from the 'people' table, grouped by their birth place. The placeholder in the HAVING clause represents the minimum count of individuals required to include a birth place in the results.\",\n        \"virtual_table\": \"SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*) >= 1 ORDER BY COUNT(*) DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the birth places of individuals from the 'people' table, grouped by their birth place. The placeholder in the HAVING clause represents the minimum count of individuals required to include a birth place in the results.\",\n        \"virtual_table\": \"SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Birth_Place, COUNT(Birth_Place) AS Place_Count FROM people GROUP BY Birth_Place ORDER BY Place_Count DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the birth date and place of individuals associated with bodybuilders, sorted by the total weight lifted in descending order. The placeholder in the LIMIT clause allows for specifying the number of records to return.\",\n        \"virtual_table\": \"SELECT T2.Birth_Date ,  T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Birth_Place, COUNT(*) as Count\nFROM people\nGROUP BY Birth_Place\nORDER BY Count DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1171",
        "c_low": "SELECT p.Weight \nFROM body_builder bb \nJOIN people p ON bb.People_ID = p.People_ID \nWHERE bb.Snatch > 140 OR p.Height > 200;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the average weight lifted in the snatch event by bodybuilders from the 'body_builder' table. The result provides insights into the performance of bodybuilders in this specific event.\",\n        \"virtual_table\": \"SELECT avg(Snatch) FROM body_builder\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the clean jerk weights lifted by bodybuilders from the 'body_builder' table, sorted in descending order based on the total weight lifted across all events. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT T2.Weight FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Snatch > 140 OR T2.Height > 200;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of individuals from the 'people' table who are bodybuilders and have lifted a total weight exceeding a specified amount. The placeholder in the WHERE clause represents the total weight lifted.\",\n        \"virtual_table\": \"SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the heights of bodybuilders from the 'body_builder' table whose total weight lifted is below a specified threshold. The placeholder in the WHERE clause represents the maximum total weight lifted.\",\n        \"virtual_table\": \"SELECT T2.Height FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the birth date and place of individuals associated with bodybuilders, sorted by the total weight lifted in descending order. The placeholder in the LIMIT clause allows for specifying the number of records to return.\",\n        \"virtual_table\": \"SELECT T2.Birth_Date ,  T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT p.Weight FROM people p JOIN body_builder bb ON p.People_ID = bb.People_ID WHERE bb.Snatch > 140 OR p.Height > 200;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and birthplaces of individuals from the 'people' table who are not associated with any bodybuilder in the 'body_builder' table. The query uses an EXCEPT clause to exclude those who have a corresponding entry in the bodybuilder records.\",\n        \"virtual_table\": \"SELECT Name ,  birth_place FROM people EXCEPT SELECT T1.Name ,  T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id  =  T2.people_id\"\n    }\n}\n",
        "t_1": "SELECT p.Weight \nFROM body_builder bb \nJOIN people p ON bb.People_ID = p.People_ID \nWHERE bb.Snatch > 140 OR p.Height > 200;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the average weight lifted in the snatch event by bodybuilders from the 'body_builder' table. The result provides insights into the performance of bodybuilders in this specific event.\",\n        \"virtual_table\": \"SELECT avg(Snatch) FROM body_builder\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the clean jerk weights lifted by bodybuilders from the 'body_builder' table, sorted in descending order based on the total weight lifted across all events. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.Weight FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Snatch > 140 OR T2.Height > 200;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of individuals from the 'people' table who are bodybuilders and have lifted a total weight exceeding a specified amount. The placeholder in the WHERE clause represents the total weight lifted.\",\n        \"virtual_table\": \"SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the heights of bodybuilders from the 'body_builder' table whose total weight lifted is below a specified threshold. The placeholder in the WHERE clause represents the maximum total weight lifted.\",\n        \"virtual_table\": \"SELECT T2.Height FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the birth date and place of individuals associated with bodybuilders, sorted by the total weight lifted in descending order. The placeholder in the LIMIT clause allows for specifying the number of records to return.\",\n        \"virtual_table\": \"SELECT T2.Birth_Date ,  T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT p.Weight \nFROM body_builder bb \nJOIN people p ON bb.People_ID = p.People_ID \nWHERE bb.Snatch > 140 OR p.Height > 200;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1188",
        "c_low": "SELECT Party, COUNT(*) as Representative_Count \nFROM representative \nGROUP BY Party \nORDER BY Representative_Count DESC \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Party, COUNT(*) as RepresentativeCount FROM representative GROUP BY Party ORDER BY RepresentativeCount DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of representatives from the 'representative' table who have participated in elections where the total number of votes cast exceeds a specified threshold. The placeholder in the WHERE clause represents the minimum number of votes required to filter the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE Votes  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the average number of votes received in elections for representatives belonging to a specific political party. The placeholder in the WHERE clause represents the name of the political party.\",\n        \"virtual_table\": \"SELECT avg(T1.Votes) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE T2.Party  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT Party FROM representative GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of political parties from the 'representative' table that have a minimum number of representatives, as specified by the placeholder. The query groups the representatives by their party affiliation and filters the results based on the count of representatives in each party.\",\n        \"virtual_table\": \"SELECT Party FROM representative GROUP BY Party HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of states from the 'representative' table that have a number of representatives equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of representatives required for a state to be included in the results.\",\n        \"virtual_table\": \"SELECT State FROM representative GROUP BY State HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the political parties that are represented in two different states. The placeholders in the WHERE clauses represent the names of the states being compared.\",\n        \"virtual_table\": \"SELECT Party FROM representative WHERE State  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Party FROM representative WHERE State  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT Party FROM representative GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of political parties from the 'representative' table that have a minimum number of representatives, as specified by the placeholder. The query groups the representatives by their party affiliation and filters the results based on the count of representatives in each party.\",\n        \"virtual_table\": \"SELECT Party FROM representative GROUP BY Party HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of states from the 'representative' table that have a number of representatives equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of representatives required for a state to be included in the results.\",\n        \"virtual_table\": \"SELECT State FROM representative GROUP BY State HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the political parties that are represented in two different states. The placeholders in the WHERE clauses represent the names of the states being compared.\",\n        \"virtual_table\": \"SELECT Party FROM representative WHERE State  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Party FROM representative WHERE State  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT T2.Party, COUNT(T2.Representative_ID) AS Representative_Count FROM representative AS T2 GROUP BY T2.Party ORDER BY Representative_Count DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of representatives from the 'representative' table who have participated in elections where the total number of votes cast exceeds a specified threshold. The placeholder in the WHERE clause represents the minimum number of votes required to filter the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE Votes  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the average number of votes received in elections for representatives belonging to a specific political party. The placeholder in the WHERE clause represents the name of the political party.\",\n        \"virtual_table\": \"SELECT avg(T1.Votes) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE T2.Party  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Party, COUNT(*) as NumberOfRepresentatives\nFROM representative\nGROUP BY Party\nORDER BY NumberOfRepresentatives DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1220",
        "c_low": "SELECT A.apt_number, B.booking_start_date, B.booking_end_date \nFROM Apartment_Bookings AS B \nJOIN Apartments AS A ON B.apt_id = A.apt_id;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the total number of rooms across all apartments in a specific apartment building identified by its abbreviated name. The placeholder in the WHERE clause represents the building's short name.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average number of rooms in apartments that have been booked with a specific booking status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT T2.apt_number, T1.booking_start_date, T1.booking_end_date \nFROM Apartment_Bookings AS T1 \nJOIN Apartments AS T2 ON T1.apt_id = T2.apt_id;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique apartment numbers from the 'Apartments' table that are associated with bookings having a specific status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT A.apt_number, B.booking_start_date, B.booking_end_date \nFROM Apartment_Bookings AS B \nJOIN Apartments AS A ON B.apt_id = A.apt_id;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the first and last names of guests who have made apartment bookings with a specific booking status. The placeholder in the WHERE clause represents the status of the booking.\",\n        \"virtual_table\": \"SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_1": "SELECT a.apt_number, ab.booking_start_date, ab.booking_end_date \nFROM Apartment_Bookings ab \nJOIN Apartments a ON ab.apt_id = a.apt_id;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type.\",\n        \"virtual_table\": \"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\"\n    }\n}\n",
        "t_2": "SELECT T2.apt_number, T1.booking_start_date, T1.booking_end_date \nFROM Apartment_Bookings AS T1 \nJOIN Apartments AS T2 ON T1.apt_id = T2.apt_id;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique apartment numbers from the 'Apartments' table that are associated with bookings having a specific status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Apartments.apt_number, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date\nFROM Apartment_Bookings\nJOIN Apartments ON Apartment_Bookings.apt_id = Apartments.apt_id;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1221",
        "c_low": "SELECT A.apt_number, B.booking_start_date, B.booking_end_date \nFROM Apartment_Bookings AS B \nJOIN Apartments AS A ON B.apt_id = A.apt_id;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the total number of rooms across all apartments in a specific apartment building identified by its abbreviated name. The placeholder in the WHERE clause represents the building's short name.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average number of rooms in apartments that have been booked with a specific booking status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT T2.apt_number, T1.booking_start_date, T1.booking_end_date \nFROM Apartment_Bookings AS T1 \nJOIN Apartments AS T2 ON T1.apt_id = T2.apt_id;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique apartment numbers from the 'Apartments' table that are associated with bookings having a specific status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT A.apt_number, B.booking_start_date, B.booking_end_date \nFROM Apartment_Bookings AS B \nJOIN Apartments AS A ON B.apt_id = A.apt_id;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the first and last names of guests who have made apartment bookings with a specific booking status. The placeholder in the WHERE clause represents the status of the booking.\",\n        \"virtual_table\": \"SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_1": "SELECT a.apt_number, ab.booking_start_date, ab.booking_end_date \nFROM Apartment_Bookings ab \nJOIN Apartments a ON ab.apt_id = a.apt_id;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type.\",\n        \"virtual_table\": \"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\"\n    }\n}\n",
        "t_2": "SELECT A.apt_number, B.booking_start_date, B.booking_end_date \nFROM Apartment_Bookings AS B \nJOIN Apartments AS A ON B.apt_id = A.apt_id;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the first and last names of guests who have made apartment bookings with a specific booking status. The placeholder in the WHERE clause represents the status of the booking.\",\n        \"virtual_table\": \"SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Apartments.apt_number, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date\nFROM Apartment_Bookings\nJOIN Apartments ON Apartment_Bookings.apt_id = Apartments.apt_id;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1222",
        "c_low": "SELECT AB.booking_start_date, AB.booking_end_date \nFROM Apartment_Bookings AS AB \nJOIN Apartments AS A ON AB.apt_id = A.apt_id \nWHERE A.apt_type_code = 'Duplex';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the addresses of apartment buildings that contain apartments with a specified number of bathrooms. The placeholder in the WHERE clause represents the minimum number of bathrooms required for the apartments.\",\n        \"virtual_table\": \"SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average number of rooms in apartments that have been booked with a specific booking status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT AB.booking_start_date, AB.booking_end_date \nFROM Apartment_Bookings AB \nJOIN Apartments A ON AB.apt_id = A.apt_id \nWHERE A.apt_type_code = 'Duplex';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique apartment numbers from the 'Apartments' table that are associated with bookings having a specific status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT AB.booking_start_date, AB.booking_end_date \nFROM Apartment_Bookings AB \nJOIN Apartments A ON AB.apt_id = A.apt_id \nWHERE A.apt_type_code = 'Duplex';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the first and last names of guests who have made apartment bookings with a specific booking status. The placeholder in the WHERE clause represents the status of the booking.\",\n        \"virtual_table\": \"SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_1": "SELECT ab.booking_start_date, ab.booking_end_date \nFROM Apartment_Bookings ab \nJOIN Apartments a ON ab.apt_id = a.apt_id \nWHERE a.apt_type_code = 'Duplex';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type.\",\n        \"virtual_table\": \"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\"\n    }\n}\n",
        "t_2": "SELECT AB.booking_start_date, AB.booking_end_date \nFROM Apartment_Bookings AB \nJOIN Apartments A ON AB.apt_id = A.apt_id \nWHERE A.apt_type_code = 'Duplex';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the first and last names of guests who have made apartment bookings with a specific booking status. The placeholder in the WHERE clause represents the status of the booking.\",\n        \"virtual_table\": \"SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT ab.booking_start_date, ab.booking_end_date\nFROM Apartments a\nJOIN Apartment_Bookings ab ON a.apt_id = ab.apt_id\nWHERE a.apt_type_code = 'Duplex';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1223",
        "c_low": "SELECT booking_start_date, booking_end_date FROM Apartment_Bookings AS AB JOIN Apartments AS A ON AB.apt_id = A.apt_id WHERE A.apt_type_code = 'Duplex';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the average number of rooms in apartments that have been booked with a specific booking status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total number of rooms across all apartments in a specific apartment building identified by its abbreviated name. The placeholder in the WHERE clause represents the building's short name.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT AB.booking_start_date, AB.booking_end_date \nFROM Apartment_Bookings AS AB \nJOIN Apartments AS A ON AB.apt_id = A.apt_id \nWHERE A.apt_type_code = 'Duplex';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique apartment numbers from the 'Apartments' table that are associated with bookings having a specific status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT AB.booking_start_date, AB.booking_end_date \nFROM Apartment_Bookings AB \nJOIN Apartments A ON AB.apt_id = A.apt_id \nWHERE A.apt_type_code = 'Duplex';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the first and last names of guests who have made apartment bookings with a specific booking status. The placeholder in the WHERE clause represents the status of the booking.\",\n        \"virtual_table\": \"SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_1": "SELECT ab.booking_start_date, ab.booking_end_date \nFROM Apartment_Bookings ab \nJOIN Apartments a ON ab.apt_id = a.apt_id \nWHERE a.apt_type_code = 'Duplex';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type.\",\n        \"virtual_table\": \"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\"\n    }\n}\n",
        "t_2": "SELECT AB.booking_start_date, AB.booking_end_date \nFROM Apartment_Bookings AB \nJOIN Apartments A ON AB.apt_id = A.apt_id \nWHERE A.apt_type_code = 'Duplex';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the first and last names of guests who have made apartment bookings with a specific booking status. The placeholder in the WHERE clause represents the status of the booking.\",\n        \"virtual_table\": \"SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT ab.booking_start_date, ab.booking_end_date\nFROM Apartments a\nJOIN Apartment_Bookings ab ON a.apt_id = ab.apt_id\nWHERE a.apt_type_code = 'Duplex';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1224",
        "c_low": "SELECT AB.booking_start_date, AB.booking_end_date \nFROM Apartment_Bookings AS AB \nJOIN Apartments AS A ON AB.apt_id = A.apt_id \nWHERE A.bedroom_count > 2;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the average number of rooms in apartments that have been booked with a specific booking status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the addresses of apartment buildings that contain apartments with a specified number of bathrooms. The placeholder in the WHERE clause represents the minimum number of bathrooms required for the apartments.\",\n        \"virtual_table\": \"SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT AB.booking_start_date, AB.booking_end_date \nFROM Apartment_Bookings AB \nJOIN Apartments A ON AB.apt_id = A.apt_id \nWHERE A.bedroom_count > 2;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique apartment numbers from the 'Apartments' table that are associated with bookings having a specific status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT booking_start_date, booking_end_date \nFROM Apartment_Bookings AS AB \nJOIN Apartments AS A ON AB.apt_id = A.apt_id \nWHERE A.bedroom_count > 2;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of guests who have made apartment bookings with a specific booking status. The placeholder in the WHERE clause represents the status of the booking.\",\n        \"virtual_table\": \"SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_1": "SELECT ab.booking_start_date, ab.booking_end_date \nFROM Apartments a \nJOIN Apartment_Bookings ab ON a.apt_id = ab.apt_id \nWHERE a.bedroom_count > 2;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_2": "SELECT A.booking_start_date, A.booking_end_date \nFROM Apartment_Bookings AS A \nJOIN Apartments AS B ON A.apt_id = B.apt_id \nWHERE B.bedroom_count > 2;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of guests who have made apartment bookings with a specific booking status. The placeholder in the WHERE clause represents the status of the booking.\",\n        \"virtual_table\": \"SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date\nFROM Apartments\nJOIN Apartment_Bookings ON Apartments.apt_id = Apartment_Bookings.apt_id\nWHERE Apartments.bedroom_count > 2;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1225",
        "c_low": "SELECT booking_start_date, booking_end_date FROM Apartment_Bookings AS AB JOIN Apartments AS A ON AB.apt_id = A.apt_id WHERE A.bedroom_count > 2;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the average number of rooms in apartments that have been booked with a specific booking status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total number of rooms across all apartments in a specific apartment building identified by its abbreviated name. The placeholder in the WHERE clause represents the building's short name.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT AB.booking_start_date, AB.booking_end_date \nFROM Apartment_Bookings AS AB \nJOIN Apartments AS A ON AB.apt_id = A.apt_id \nWHERE A.bedroom_count > 2;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique apartment numbers from the 'Apartments' table that are associated with bookings having a specific status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT booking_start_date, booking_end_date FROM Apartment_Bookings AS AB JOIN Apartments AS A ON AB.apt_id = A.apt_id WHERE A.bedroom_count > 2;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the first and last names of guests who have made apartment bookings with a specific booking status. The placeholder in the WHERE clause represents the status of the booking.\",\n        \"virtual_table\": \"SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_1": "SELECT ab.booking_start_date, ab.booking_end_date \nFROM Apartment_Bookings ab \nJOIN Apartments a ON ab.apt_id = a.apt_id \nWHERE a.bedroom_count > 2;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type.\",\n        \"virtual_table\": \"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\"\n    }\n}\n",
        "t_2": "SELECT booking_start_date, booking_end_date FROM Apartment_Bookings AS AB JOIN Apartments AS A ON AB.apt_id = A.apt_id WHERE A.bedroom_count > 2;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the first and last names of guests who have made apartment bookings with a specific booking status. The placeholder in the WHERE clause represents the status of the booking.\",\n        \"virtual_table\": \"SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average number of rooms in apartments that have been booked with a specific booking status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date \nFROM Apartments \nJOIN Apartment_Bookings ON Apartments.apt_id = Apartment_Bookings.apt_id \nWHERE Apartments.bedroom_count > 2;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1229",
        "c_low": "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = 'Confirmed'",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the average number of rooms in apartments that have been booked with a specific booking status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total number of rooms across all apartments in a specific apartment building identified by its abbreviated name. The placeholder in the WHERE clause represents the building's short name.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = 'Confirmed'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique apartment numbers from the 'Apartments' table that are associated with bookings having a specific status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = 'Confirmed'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the first and last names of guests who have made apartment bookings with a specific booking status. The placeholder in the WHERE clause represents the status of the booking.\",\n        \"virtual_table\": \"SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT a.apt_number \nFROM Apartments a \nJOIN Apartment_Bookings ab ON a.apt_id = ab.apt_id \nWHERE ab.booking_status_code = 'Confirmed';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type.\",\n        \"virtual_table\": \"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = 'Confirmed'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique apartment numbers from the 'Apartments' table that are associated with bookings having a specific status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT a.apt_number \nFROM Apartments a \nJOIN Apartment_Bookings ab ON a.apt_id = ab.apt_id \nWHERE ab.booking_status_code = 'Confirmed';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1232",
        "c_low": "SELECT G.guest_first_name, B.booking_start_date, B.booking_end_date \nFROM Apartment_Bookings AS B \nJOIN Guests AS G ON B.guest_id = G.guest_id;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total number of rooms across all apartments in a specific apartment building identified by its abbreviated name. The placeholder in the WHERE clause represents the building's short name.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average number of rooms in apartments that have been booked with a specific booking status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT Guests.guest_first_name, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date \nFROM Apartment_Bookings \nJOIN Guests ON Apartment_Bookings.guest_id = Guests.guest_id;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique apartment numbers from the 'Apartments' table that are associated with bookings having a specific status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT T2.guest_first_name, T1.booking_start_date, T1.booking_end_date \nFROM Apartment_Bookings AS T1 \nJOIN Guests AS T2 ON T1.guest_id = T2.guest_id;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of guests who have made apartment bookings with a specific booking status. The placeholder in the WHERE clause represents the status of the booking.\",\n        \"virtual_table\": \"SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_1": "SELECT Guests.guest_first_name, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date \nFROM Apartment_Bookings \nJOIN Guests ON Apartment_Bookings.guest_id = Guests.guest_id;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_2": "SELECT T2.guest_first_name, T1.booking_start_date, T1.booking_end_date \nFROM Apartment_Bookings AS T1 \nJOIN Guests AS T2 ON T1.guest_id = T2.guest_id;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of guests who have made apartment bookings with a specific booking status. The placeholder in the WHERE clause represents the status of the booking.\",\n        \"virtual_table\": \"SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total number of rooms across all apartments in a specific apartment building identified by its abbreviated name. The placeholder in the WHERE clause represents the building's short name.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Guests.guest_first_name, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date\nFROM Apartment_Bookings\nJOIN Guests ON Apartment_Bookings.guest_id = Guests.guest_id;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1233",
        "c_low": "SELECT G.guest_first_name, AB.booking_start_date, AB.booking_end_date \nFROM Apartment_Bookings AS AB \nJOIN Guests AS G ON AB.guest_id = G.guest_id;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the total number of rooms across all apartments in a specific apartment building identified by its abbreviated name. The placeholder in the WHERE clause represents the building's short name.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average number of rooms in apartments that have been booked with a specific booking status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT Guests.guest_first_name, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date \nFROM Apartment_Bookings \nJOIN Guests ON Apartment_Bookings.guest_id = Guests.guest_id;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique apartment numbers from the 'Apartments' table that are associated with bookings having a specific status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT T2.guest_first_name, T1.booking_start_date, T1.booking_end_date \nFROM Apartment_Bookings AS T1 \nJOIN Guests AS T2 ON T1.guest_id = T2.guest_id;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of guests who have made apartment bookings with a specific booking status. The placeholder in the WHERE clause represents the status of the booking.\",\n        \"virtual_table\": \"SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_1": "SELECT Guests.guest_first_name, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date \nFROM Apartment_Bookings \nJOIN Guests ON Apartment_Bookings.guest_id = Guests.guest_id;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_2": "SELECT T2.guest_first_name, T1.booking_start_date, T1.booking_end_date \nFROM Apartment_Bookings AS T1 \nJOIN Guests AS T2 ON T1.guest_id = T2.guest_id;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of guests who have made apartment bookings with a specific booking status. The placeholder in the WHERE clause represents the status of the booking.\",\n        \"virtual_table\": \"SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Guests.guest_first_name, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date\nFROM Apartment_Bookings\nJOIN Guests ON Apartment_Bookings.guest_id = Guests.guest_id;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1234",
        "c_low": "SELECT AB.booking_start_date, AB.booking_end_date \nFROM Apartment_Bookings AS AB \nJOIN Guests AS G ON AB.guest_id = G.guest_id \nWHERE G.gender_code = 'Female';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the average number of rooms in apartments that have been booked with a specific booking status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT AB.booking_start_date, AB.booking_end_date \nFROM Apartment_Bookings AS AB \nJOIN Guests AS G ON AB.guest_id = G.guest_id \nWHERE G.gender_code = 'Female';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique apartment numbers from the 'Apartments' table that are associated with bookings having a specific status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT T1.booking_start_date, T1.booking_end_date \nFROM Apartment_Bookings AS T1 \nJOIN Guests AS T2 ON T1.guest_id = T2.guest_id \nWHERE T2.gender_code = 'Female'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of guests who have made apartment bookings with a specific booking status. The placeholder in the WHERE clause represents the status of the booking.\",\n        \"virtual_table\": \"SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of guests categorized by their gender from the 'Guests' table. The placeholder in the SELECT clause represents the gender code, while the COUNT function aggregates the total number of guests for each gender, ordered by the count in descending order.\",\n        \"virtual_table\": \"SELECT gender_code ,  COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date \nFROM Apartment_Bookings \nJOIN Guests ON Apartment_Bookings.guest_id = Guests.guest_id \nWHERE Guests.gender_code = 'Female';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of guests categorized by their gender from the 'Guests' table. The placeholder in the SELECT clause represents the gender code, while the COUNT function aggregates the total number of guests for each gender, ordered by the count in descending order.\",\n        \"virtual_table\": \"SELECT gender_code ,  COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_2": "SELECT T1.booking_start_date, T1.booking_end_date \nFROM Apartment_Bookings AS T1 \nJOIN Guests AS T2 ON T1.guest_id = T2.guest_id \nWHERE T2.gender_code = 'Female';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of guests who have made apartment bookings with a specific booking status. The placeholder in the WHERE clause represents the status of the booking.\",\n        \"virtual_table\": \"SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date \nFROM Apartment_Bookings \nJOIN Guests ON Apartment_Bookings.guest_id = Guests.guest_id \nWHERE Guests.gender_code = 'Female';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1235",
        "c_low": "SELECT AB.booking_start_date, AB.booking_end_date \nFROM Apartment_Bookings AS AB \nJOIN Guests AS G ON AB.guest_id = G.guest_id \nWHERE G.gender_code = 'Female';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the average number of rooms in apartments that have been booked with a specific booking status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT T1.booking_start_date, T1.booking_end_date \nFROM Apartment_Bookings AS T1 \nJOIN Guests AS T2 ON T1.guest_id = T2.guest_id \nWHERE T2.gender_code = 'Female';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique apartment numbers from the 'Apartments' table that are associated with bookings having a specific status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT T1.booking_start_date, T1.booking_end_date \nFROM Apartment_Bookings AS T1 \nJOIN Guests AS T2 ON T1.guest_id = T2.guest_id \nWHERE T2.gender_code = 'Female'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of guests who have made apartment bookings with a specific booking status. The placeholder in the WHERE clause represents the status of the booking.\",\n        \"virtual_table\": \"SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_1": "SELECT ab.booking_start_date, ab.booking_end_date \nFROM Apartment_Bookings ab \nJOIN Guests g ON ab.guest_id = g.guest_id \nWHERE g.gender_code = 'Female';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of guests categorized by their gender from the 'Guests' table. The placeholder in the SELECT clause represents the gender code, while the COUNT function aggregates the total number of guests for each gender, ordered by the count in descending order.\",\n        \"virtual_table\": \"SELECT gender_code ,  COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC\"\n    }\n}\n",
        "t_2": "SELECT T1.booking_start_date, T1.booking_end_date \nFROM Apartment_Bookings AS T1 \nJOIN Guests AS T2 ON T1.guest_id = T2.guest_id \nWHERE T2.gender_code = 'Female';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of guests who have made apartment bookings with a specific booking status. The placeholder in the WHERE clause represents the status of the booking.\",\n        \"virtual_table\": \"SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date\nFROM Apartment_Bookings\nJOIN Guests ON Apartment_Bookings.guest_id = Guests.guest_id\nWHERE Guests.gender_code = 'Female';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1238",
        "c_low": "SELECT DISTINCT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 4;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total number of rooms in apartments that have a specific facility associated with them. The placeholder in the WHERE clause represents the facility code that is being queried.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the addresses of apartment buildings that contain apartments with a specified number of bathrooms. The placeholder in the WHERE clause represents the minimum number of bathrooms required for the apartments.\",\n        \"virtual_table\": \"SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT AF.facility_code \nFROM Apartments AS A \nJOIN Apartment_Facilities AS AF ON A.apt_id = AF.apt_id \nWHERE A.bedroom_count > 4;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique apartment numbers from the 'Apartments' table that are associated with bookings having a specific status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT af.facility_code \nFROM Apartments a \nJOIN Apartment_Facilities af ON a.apt_id = af.apt_id \nWHERE a.bedroom_count > 4;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type.\",\n        \"virtual_table\": \"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT af.facility_code \nFROM Apartments a \nJOIN Apartment_Facilities af ON a.apt_id = af.apt_id \nWHERE a.bedroom_count > 4;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type.\",\n        \"virtual_table\": \"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 4;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total number of rooms in apartments that have a specific facility associated with them. The placeholder in the WHERE clause represents the facility code that is being queried.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the addresses of apartment buildings that contain apartments with a specified number of bathrooms. The placeholder in the WHERE clause represents the minimum number of bathrooms required for the apartments.\",\n        \"virtual_table\": \"SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT af.facility_code\nFROM Apartments a\nJOIN Apartment_Facilities af ON a.apt_id = af.apt_id\nWHERE a.bedroom_count > 4;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1239",
        "c_low": "SELECT DISTINCT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 4;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the total number of rooms in apartments that have a specific facility associated with them. The placeholder in the WHERE clause represents the facility code that is being queried.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the addresses of apartment buildings that contain apartments with a specified number of bathrooms. The placeholder in the WHERE clause represents the minimum number of bathrooms required for the apartments.\",\n        \"virtual_table\": \"SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT T3.facility_code \nFROM Apartment_Facilities AS T3 \nJOIN Apartments AS T2 ON T3.apt_id = T2.apt_id \nWHERE T2.bedroom_count > 4;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique apartment numbers from the 'Apartments' table that are associated with bookings having a specific status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT AF.facility_code \nFROM Apartments A \nJOIN Apartment_Facilities AF ON A.apt_id = AF.apt_id \nWHERE A.bedroom_count > 4;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type.\",\n        \"virtual_table\": \"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the type code and apartment number of apartments located in buildings managed by a specific building manager. The placeholder in the WHERE clause represents the name of the building manager.\",\n        \"virtual_table\": \"SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT af.facility_code \nFROM Apartments a \nJOIN Apartment_Facilities af ON a.apt_id = af.apt_id \nWHERE a.bedroom_count > 4;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type.\",\n        \"virtual_table\": \"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT T1.facility_code \nFROM Apartment_Facilities AS T1 \nJOIN Apartments AS T2 ON T1.apt_id = T2.apt_id \nWHERE T2.bedroom_count > 4;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the total number of rooms in apartments that have a specific facility associated with them. The placeholder in the WHERE clause represents the facility code that is being queried.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT af.facility_code \nFROM Apartments a \nJOIN Apartment_Facilities af ON a.apt_id = af.apt_id \nWHERE a.bedroom_count > 4;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1256",
        "c_low": "SELECT apt_type_code, AVG(room_count) AS average_rooms \nFROM Apartments \nGROUP BY apt_type_code \nORDER BY average_rooms DESC \nLIMIT 3;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the average number of rooms in apartments that have been booked with a specific booking status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total number of rooms across all apartments in a specific apartment building identified by its abbreviated name. The placeholder in the WHERE clause represents the building's short name.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT apt_type_code, AVG(room_count) AS average_rooms\nFROM Apartments\nGROUP BY apt_type_code\nORDER BY average_rooms DESC\nLIMIT 3;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique apartment numbers from the 'Apartments' table that are associated with bookings having a specific status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT apt_type_code, AVG(room_count) AS average_rooms \nFROM Apartments \nGROUP BY apt_type_code \nORDER BY average_rooms DESC \nLIMIT 3;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type.\",\n        \"virtual_table\": \"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT apt_type_code, AVG(room_count) AS average_rooms \nFROM Apartments \nGROUP BY apt_type_code \nORDER BY average_rooms DESC \nLIMIT 3;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type.\",\n        \"virtual_table\": \"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_2": "SELECT apt_type_code, AVG(room_count) AS average_rooms \nFROM Apartments \nGROUP BY apt_type_code \nORDER BY average_rooms DESC \nLIMIT 3;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the average number of rooms in apartments that have been booked with a specific booking status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total number of rooms across all apartments in a specific apartment building identified by its abbreviated name. The placeholder in the WHERE clause represents the building's short name.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT apt_type_code, AVG(room_count) AS average_rooms\nFROM Apartments\nGROUP BY apt_type_code\nORDER BY average_rooms DESC\nLIMIT 3;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1257",
        "c_low": "SELECT apt_type_code, AVG(room_count) AS average_room_count \nFROM Apartments \nGROUP BY apt_type_code \nORDER BY average_room_count DESC \nLIMIT 3;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total number of rooms across all apartments in a specific apartment building identified by its abbreviated name. The placeholder in the WHERE clause represents the building's short name.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the average number of rooms in apartments that have been booked with a specific booking status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total number of rooms in apartments that have a specific facility associated with them. The placeholder in the WHERE clause represents the facility code that is being queried.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT apt_type_code, AVG(room_count) AS average_room_count\nFROM Apartments\nGROUP BY apt_type_code\nORDER BY average_room_count DESC\nLIMIT 3;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT apt_type_code, AVG(room_count) AS average_room_count \nFROM Apartments \nGROUP BY apt_type_code \nORDER BY average_room_count DESC \nLIMIT 3;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type.\",\n        \"virtual_table\": \"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the apartment numbers from the 'Apartments' table that are available based on a specific availability status. The query uses an INTERSECT operation to find common apartment numbers that meet the availability criteria specified by the placeholders.\",\n        \"virtual_table\": \"SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT apt_type_code, AVG(room_count) AS average_room_count \nFROM Apartments \nGROUP BY apt_type_code \nORDER BY average_room_count DESC \nLIMIT 3;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type.\",\n        \"virtual_table\": \"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_2": "SELECT apt_type_code, AVG(room_count) AS average_room_count \nFROM Apartments \nGROUP BY apt_type_code \nORDER BY average_room_count DESC \nLIMIT 3;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total number of rooms across all apartments in a specific apartment building identified by its abbreviated name. The placeholder in the WHERE clause represents the building's short name.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the average number of rooms in apartments that have been booked with a specific booking status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total number of rooms in apartments that have a specific facility associated with them. The placeholder in the WHERE clause represents the facility code that is being queried.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT apt_type_code, AVG(room_count) AS average_room_count\nFROM Apartments\nGROUP BY apt_type_code\nORDER BY average_room_count DESC\nLIMIT 3;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1258",
        "c_low": "SELECT apt_type_code, MAX(room_count) AS max_rooms, bathroom_count, bedroom_count \nFROM Apartments \nGROUP BY apt_type_code \nORDER BY max_rooms DESC \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total number of rooms across all apartments in a specific apartment building identified by its abbreviated name. The placeholder in the WHERE clause represents the building's short name.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the addresses of apartment buildings that contain apartments with a specified number of bathrooms. The placeholder in the WHERE clause represents the minimum number of bathrooms required for the apartments.\",\n        \"virtual_table\": \"SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total number of rooms in apartments that have a specific facility associated with them. The placeholder in the WHERE clause represents the facility code that is being queried.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT apt_type_code, MAX(room_count) AS max_rooms, bathroom_count, bedroom_count \nFROM Apartments \nGROUP BY apt_type_code \nORDER BY max_rooms DESC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique apartment numbers from the 'Apartments' table that are associated with bookings having a specific status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT apt_type_code, MAX(total_rooms) AS max_rooms, bathrooms, bedrooms \nFROM (\n    SELECT a.apt_type_code, \n           SUM(a.room_count) AS total_rooms, \n           AVG(a.bathroom_count) AS bathrooms, \n           AVG(a.bedroom_count) AS bedrooms \n    FROM Apartments a \n    GROUP BY a.apt_type_code\n) AS apartment_summary;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type.\",\n        \"virtual_table\": \"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_1": "SELECT apt_type_code, SUM(bathroom_count) AS total_bathrooms, SUM(bedroom_count) AS total_bedrooms, SUM(room_count) AS total_rooms\nFROM Apartments\nGROUP BY apt_type_code\nORDER BY total_rooms DESC\nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type.\",\n        \"virtual_table\": \"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_2": "SELECT apt_type_code, MAX(room_count) AS max_rooms, bathroom_count, bedroom_count \nFROM Apartments \nGROUP BY apt_type_code \nORDER BY max_rooms DESC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total number of rooms across all apartments in a specific apartment building identified by its abbreviated name. The placeholder in the WHERE clause represents the building's short name.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the addresses of apartment buildings that contain apartments with a specified number of bathrooms. The placeholder in the WHERE clause represents the minimum number of bathrooms required for the apartments.\",\n        \"virtual_table\": \"SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total number of rooms in apartments that have a specific facility associated with them. The placeholder in the WHERE clause represents the facility code that is being queried.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT apt_type_code, MAX(room_count) AS max_rooms, bathroom_count, bedroom_count\nFROM Apartments\nGROUP BY apt_type_code, bathroom_count, bedroom_count\nORDER BY max_rooms DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1259",
        "c_low": "SELECT apt_type_code, bathroom_count, bedroom_count FROM Apartments ORDER BY room_count DESC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total number of rooms across all apartments in a specific apartment building identified by its abbreviated name. The placeholder in the WHERE clause represents the building's short name.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the total number of rooms in apartments that have a specific facility associated with them. The placeholder in the WHERE clause represents the facility code that is being queried.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the addresses of apartment buildings that contain apartments with a specified number of bathrooms. The placeholder in the WHERE clause represents the minimum number of bathrooms required for the apartments.\",\n        \"virtual_table\": \"SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT apt_type_code, bathroom_count, bedroom_count FROM Apartments ORDER BY room_count DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique apartment numbers from the 'Apartments' table that are associated with bookings having a specific status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT apt_type_code, bathroom_count, bedroom_count \nFROM Apartments \nORDER BY room_count DESC \nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type.\",\n        \"virtual_table\": \"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the type code and apartment number of apartments located in buildings managed by a specific building manager. The placeholder in the WHERE clause represents the name of the building manager.\",\n        \"virtual_table\": \"SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT apt_type_code, SUM(bathroom_count) AS total_bathrooms, SUM(bedroom_count) AS total_bedrooms \nFROM Apartments \nGROUP BY apt_type_code \nORDER BY (SUM(room_count)) DESC \nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type.\",\n        \"virtual_table\": \"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_2": "SELECT apt_type_code, bathroom_count, bedroom_count FROM Apartments ORDER BY room_count DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total number of rooms across all apartments in a specific apartment building identified by its abbreviated name. The placeholder in the WHERE clause represents the building's short name.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the total number of rooms in apartments that have a specific facility associated with them. The placeholder in the WHERE clause represents the facility code that is being queried.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the addresses of apartment buildings that contain apartments with a specified number of bathrooms. The placeholder in the WHERE clause represents the minimum number of bathrooms required for the apartments.\",\n        \"virtual_table\": \"SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT apt_type_code, bathroom_count, bedroom_count \nFROM Apartments \nORDER BY room_count DESC \nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1260",
        "c_low": "SELECT apt_type_code, COUNT(*) as type_count FROM Apartments GROUP BY apt_type_code ORDER BY type_count DESC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the average number of rooms in apartments that have been booked with a specific booking status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total number of rooms across all apartments in a specific apartment building identified by its abbreviated name. The placeholder in the WHERE clause represents the building's short name.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT apt_type_code, COUNT(*) as count FROM Apartments GROUP BY apt_type_code ORDER BY count DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique apartment numbers from the 'Apartments' table that are associated with bookings having a specific status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT apt_type_code, COUNT(*) as apartment_count FROM Apartments GROUP BY apt_type_code ORDER BY apartment_count DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type.\",\n        \"virtual_table\": \"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the type code and apartment number of apartments located in buildings managed by a specific building manager. The placeholder in the WHERE clause represents the name of the building manager.\",\n        \"virtual_table\": \"SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_1": "SELECT apt_type_code, COUNT(*) as apartment_count \nFROM Apartments \nGROUP BY apt_type_code \nORDER BY apartment_count DESC \nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type.\",\n        \"virtual_table\": \"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_2": "SELECT apt_type_code, COUNT(*) as type_count FROM Apartments GROUP BY apt_type_code ORDER BY type_count DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the type code and apartment number of apartments located in buildings managed by a specific building manager. The placeholder in the WHERE clause represents the name of the building manager.\",\n        \"virtual_table\": \"SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT apt_type_code, COUNT(*) as type_count\nFROM Apartments\nGROUP BY apt_type_code\nORDER BY type_count DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1261",
        "c_low": "SELECT apt_type_code, COUNT(*) as type_count \nFROM Apartments \nGROUP BY apt_type_code \nORDER BY type_count DESC \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the total number of rooms across all apartments in a specific apartment building identified by its abbreviated name. The placeholder in the WHERE clause represents the building's short name.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total number of rooms in apartments that have a specific facility associated with them. The placeholder in the WHERE clause represents the facility code that is being queried.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT apt_type_code, COUNT(*) as count FROM Apartments GROUP BY apt_type_code ORDER BY count DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique apartment numbers from the 'Apartments' table that are associated with bookings having a specific status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT apt_type_code, COUNT(*) as type_count FROM Apartments GROUP BY apt_type_code ORDER BY type_count DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type.\",\n        \"virtual_table\": \"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the type code and apartment number of apartments located in buildings managed by a specific building manager. The placeholder in the WHERE clause represents the name of the building manager.\",\n        \"virtual_table\": \"SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_1": "SELECT apt_type_code, COUNT(*) AS type_count FROM Apartments GROUP BY apt_type_code ORDER BY type_count DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type.\",\n        \"virtual_table\": \"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_2": "SELECT apt_type_code, COUNT(*) as type_count \nFROM Apartments \nGROUP BY apt_type_code \nORDER BY type_count DESC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the type code and apartment number of apartments located in buildings managed by a specific building manager. The placeholder in the WHERE clause represents the name of the building manager.\",\n        \"virtual_table\": \"SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT apt_type_code, COUNT(*) as count\nFROM Apartments\nGROUP BY apt_type_code\nORDER BY count DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1262",
        "c_low": "SELECT apt_type_code, COUNT(*) as type_count \nFROM Apartments \nWHERE bathroom_count > 1 \nGROUP BY apt_type_code \nORDER BY type_count DESC \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the addresses of apartment buildings that contain apartments with a specified number of bathrooms. The placeholder in the WHERE clause represents the minimum number of bathrooms required for the apartments.\",\n        \"virtual_table\": \"SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total number of rooms across all apartments in a specific apartment building identified by its abbreviated name. The placeholder in the WHERE clause represents the building's short name.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT apt_type_code, COUNT(*) as type_count \nFROM Apartments \nWHERE bathroom_count > 1 \nGROUP BY apt_type_code \nORDER BY type_count DESC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique apartment numbers from the 'Apartments' table that are associated with bookings having a specific status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT apt_type_code, COUNT(*) AS apartment_count \nFROM Apartments \nWHERE bathroom_count > 1 \nGROUP BY apt_type_code \nORDER BY apartment_count DESC \nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type.\",\n        \"virtual_table\": \"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the type code and apartment number of apartments located in buildings managed by a specific building manager. The placeholder in the WHERE clause represents the name of the building manager.\",\n        \"virtual_table\": \"SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT apt_type_code, COUNT(*) AS apartment_count \nFROM Apartments \nWHERE bathroom_count > 1 \nGROUP BY apt_type_code \nORDER BY apartment_count DESC \nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type.\",\n        \"virtual_table\": \"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_2": "SELECT apt_type_code, COUNT(*) as type_count \nFROM Apartments \nWHERE bathroom_count > 1 \nGROUP BY apt_type_code \nORDER BY type_count DESC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the addresses of apartment buildings that contain apartments with a specified number of bathrooms. The placeholder in the WHERE clause represents the minimum number of bathrooms required for the apartments.\",\n        \"virtual_table\": \"SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total number of rooms across all apartments in a specific apartment building identified by its abbreviated name. The placeholder in the WHERE clause represents the building's short name.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT apt_type_code, COUNT(*) as count\nFROM Apartments\nWHERE bathroom_count > 1\nGROUP BY apt_type_code\nORDER BY count DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1263",
        "c_low": "SELECT apt_type_code, COUNT(*) as count\nFROM Apartments\nWHERE bathroom_count > 1\nGROUP BY apt_type_code\nORDER BY count DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the addresses of apartment buildings that contain apartments with a specified number of bathrooms. The placeholder in the WHERE clause represents the minimum number of bathrooms required for the apartments.\",\n        \"virtual_table\": \"SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total number of rooms across all apartments in a specific apartment building identified by its abbreviated name. The placeholder in the WHERE clause represents the building's short name.\",\n        \"virtual_table\": \"SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT apt_type_code, COUNT(*) AS count\nFROM Apartments\nWHERE bathroom_count > 1\nGROUP BY apt_type_code\nORDER BY count DESC\nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique apartment numbers from the 'Apartments' table that are associated with bookings having a specific status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT apt_type_code, COUNT(*) AS apartment_count \nFROM Apartments \nWHERE bathroom_count > 1 \nGROUP BY apt_type_code \nORDER BY apartment_count DESC \nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type.\",\n        \"virtual_table\": \"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the type code and apartment number of apartments located in buildings managed by a specific building manager. The placeholder in the WHERE clause represents the name of the building manager.\",\n        \"virtual_table\": \"SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT apt_type_code, COUNT(*) AS apartment_count \nFROM Apartments \nWHERE bathroom_count > 1 \nGROUP BY apt_type_code \nORDER BY apartment_count DESC \nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type.\",\n        \"virtual_table\": \"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_2": "SELECT apt_type_code, COUNT(*) as count\nFROM Apartments\nWHERE bathroom_count > 1\nGROUP BY apt_type_code\nORDER BY count DESC\nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the addresses of apartment buildings that contain apartments with a specified number of bathrooms. The placeholder in the WHERE clause represents the minimum number of bathrooms required for the apartments.\",\n        \"virtual_table\": \"SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the type code and apartment number of apartments located in buildings managed by a specific building manager. The placeholder in the WHERE clause represents the name of the building manager.\",\n        \"virtual_table\": \"SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT apt_type_code, COUNT(*) AS count\nFROM Apartments\nWHERE bathroom_count > 1\nGROUP BY apt_type_code\nORDER BY count DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1272",
        "c_low": "SELECT apt_number FROM Apartments AS A JOIN View_Unit_Status AS V ON A.apt_id = V.apt_id WHERE V.available_yn IN ('Yes', 'No')",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the addresses of apartment buildings that contain apartments with a specified number of bathrooms. The placeholder in the WHERE clause represents the minimum number of bathrooms required for the apartments.\",\n        \"virtual_table\": \"SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average number of rooms in apartments that have been booked with a specific booking status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT apt_number FROM Apartments AS A JOIN View_Unit_Status AS V ON A.apt_id = V.apt_id WHERE V.available_yn IN ('0', '1')",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique apartment numbers from the 'Apartments' table that are associated with bookings having a specific status. The placeholder in the WHERE clause represents the booking status code.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id = T2.apt_id WHERE T2.available_yn = '0' INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id = T2.apt_id WHERE T2.available_yn = '1'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the apartment numbers from the 'Apartments' table that are available based on a specific availability status. The query uses an INTERSECT operation to find common apartment numbers that meet the availability criteria specified by the placeholders.\",\n        \"virtual_table\": \"SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    }\n}\n",
        "t_1": "SELECT apt_number FROM Apartments a\nJOIN View_Unit_Status vus ON a.apt_id = vus.apt_id\nWHERE vus.available_yn IN ('0', '1')",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the count of apartment bookings grouped by their status codes from the 'Apartment_Bookings' table. The placeholder in the SELECT clause represents the booking status code, while the COUNT function aggregates the number of bookings for each status.\",\n        \"virtual_table\": \"SELECT \\tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the count of apartments grouped by their type codes from the 'Apartments' table. The placeholder in the SELECT clause represents the type code of the apartments, and the count indicates how many apartments fall under each type.\",\n        \"virtual_table\": \"SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC\"\n    }\n}\n",
        "t_2": "SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id = T2.apt_id WHERE T2.available_yn = '0' INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id = T2.apt_id WHERE T2.available_yn = '1'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the booking status codes for apartments based on their apartment number. The placeholder in the WHERE clause represents the specific apartment number being queried.\",\n        \"virtual_table\": \"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the apartment numbers of apartments that have been booked with a specific status, intersecting two sets of bookings with the same status code. The placeholders in the WHERE clause represent the booking status codes.\",\n        \"virtual_table\": \"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the apartment numbers from the 'Apartments' table that are available based on a specific availability status. The query uses an INTERSECT operation to find common apartment numbers that meet the availability criteria specified by the placeholders.\",\n        \"virtual_table\": \"SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT apt_number FROM Apartments a\nJOIN View_Unit_Status vus ON a.apt_id = vus.apt_id\nWHERE vus.available_yn IN ('0', '1')",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1275",
        "c_low": "SELECT g.Date \nFROM game AS g \nJOIN stadium AS s ON g.stadium_id = s.id \nWHERE s.name = ? \nORDER BY g.Date DESC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the seasons in which games were played that involved a specific player who sustained an injury. The placeholder in the WHERE clause represents the player's name.\",\n        \"virtual_table\": \"SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id WHERE T2.player  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT g.Date \nFROM game g \nJOIN stadium s ON g.stadium_id = s.id \nWHERE g.Home_team = s.name \nORDER BY g.Date DESC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT g.Date \nFROM game AS g \nJOIN stadium AS s ON g.stadium_id = s.id \nWHERE s.name = ? \nORDER BY g.Date DESC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of the seasons and stadium names where specific injuries occurred during games. The placeholders in the WHERE clause represent the types of injuries being queried.\",\n        \"virtual_table\": \"SELECT T1.season ,  T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.injury  =  [PLACEHOLDER-TYPE:STRING] OR T3.injury  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT g.Date\nFROM game g\nJOIN stadium s ON g.stadium_id = s.id\nWHERE s.name = ?\nORDER BY g.Date DESC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT g.Date \nFROM game AS g \nJOIN stadium AS s ON g.stadium_id = s.id \nWHERE s.name = ? \nORDER BY g.Date DESC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the seasons in which games were played that involved a specific player who sustained an injury. The placeholder in the WHERE clause represents the player's name.\",\n        \"virtual_table\": \"SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id WHERE T2.player  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT g.Date \nFROM game AS g \nJOIN stadium AS s ON g.stadium_id = s.id \nWHERE s.name = ? \nORDER BY g.Date DESC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of the seasons and stadium names where specific injuries occurred during games. The placeholders in the WHERE clause represent the types of injuries being queried.\",\n        \"virtual_table\": \"SELECT T1.season ,  T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.injury  =  [PLACEHOLDER-TYPE:STRING] OR T3.injury  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1277",
        "c_low": "SELECT stadium.name, MAX(stadium.Home_Games) AS Max_Home_Games, MIN(stadium.Home_Games) AS Min_Home_Games, AVG(stadium.Home_Games) AS Avg_Home_Games\nFROM stadium\nGROUP BY stadium.name;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT stadium.name, MAX(stadium.Home_Games) AS Max_Home_Games, MIN(stadium.Home_Games) AS Min_Home_Games, AVG(stadium.Home_Games) AS Avg_Home_Games\nFROM stadium\nGROUP BY stadium.name;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT MAX(Home_Games) AS Max_Home_Games, MIN(Home_Games) AS Min_Home_Games, AVG(Home_Games) AS Avg_Home_Games FROM stadium;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of stadiums along with their unique identifiers, specifically focusing on those that have hosted games resulting in injuries. The results are grouped by stadium ID and ordered by the number of injury incidents, allowing users to see which stadiums have the highest occurrences of injuries during games. The placeholder in the LIMIT clause represents the maximum number of stadiums to be returned in the query.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a summary of the seasons and stadium names where specific injuries occurred during games. The placeholders in the WHERE clause represent the types of injuries being queried.\",\n        \"virtual_table\": \"SELECT T1.season ,  T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.injury  =  [PLACEHOLDER-TYPE:STRING] OR T3.injury  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT stadium.name, MAX(stadium.Home_Games) AS Max_Home_Games, MIN(stadium.Home_Games) AS Min_Home_Games, AVG(stadium.Home_Games) AS Avg_Home_Games\nFROM stadium\nGROUP BY stadium.name;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT stadium.name, MAX(stadium.Home_Games) AS Max_Home_Games, MIN(stadium.Home_Games) AS Min_Home_Games, AVG(stadium.Home_Games) AS Avg_Home_Games\nFROM stadium\nGROUP BY stadium.name;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT MAX(Home_Games) AS Max_Home_Games, MIN(Home_Games) AS Min_Home_Games, AVG(Home_Games) AS Avg_Home_Games FROM stadium;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of stadiums along with their unique identifiers, specifically focusing on those that have hosted games resulting in injuries. The results are grouped by stadium ID and ordered by the number of injury incidents, allowing users to see which stadiums have the highest occurrences of injuries during games. The placeholder in the LIMIT clause represents the maximum number of stadiums to be returned in the query.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a summary of the seasons and stadium names where specific injuries occurred during games. The placeholders in the WHERE clause represent the types of injuries being queried.\",\n        \"virtual_table\": \"SELECT T1.season ,  T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.injury  =  [PLACEHOLDER-TYPE:STRING] OR T3.injury  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1278",
        "c_low": "SELECT AVG(CAST(Average_Attendance AS INTEGER)) AS Average_Attendance\nFROM stadium\nWHERE CAST(Capacity_Percentage AS REAL) > 100;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT AVG(CAST(Average_Attendance AS INTEGER)) AS Average_Attendance\nFROM stadium\nWHERE CAST(Capacity_Percentage AS REAL) > 100;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT AVG(CAST(Average_Attendance AS INTEGER)) AS average_attendance FROM stadium WHERE CAST(Capacity_Percentage AS INTEGER) > 100;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of stadiums along with their unique identifiers, specifically focusing on those that have hosted games resulting in injuries. The results are grouped by stadium ID and ordered by the number of injury incidents, allowing users to see which stadiums have the highest occurrences of injuries during games. The placeholder in the LIMIT clause represents the maximum number of stadiums to be returned in the query.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT AVG(CAST(Average_Attendance AS INTEGER)) AS Average_Attendance\nFROM stadium\nWHERE CAST(Capacity_Percentage AS REAL) > 100;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT AVG(CAST(Average_Attendance AS INTEGER)) AS Average_Attendance\nFROM stadium\nWHERE CAST(Capacity_Percentage AS REAL) > 100;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT AVG(CAST(Average_Attendance AS INTEGER)) AS average_attendance FROM stadium WHERE CAST(Capacity_Percentage AS INTEGER) > 100;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of stadiums along with their unique identifiers, specifically focusing on those that have hosted games resulting in injuries. The results are grouped by stadium ID and ordered by the number of injury incidents, allowing users to see which stadiums have the highest occurrences of injuries during games. The placeholder in the LIMIT clause represents the maximum number of stadiums to be returned in the query.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1289",
        "c_low": "SELECT s.name, s.Average_Attendance, s.Total_Attendance \nFROM stadium s \nLEFT JOIN game g ON s.id = g.stadium_id \nLEFT JOIN injury_accident ia ON g.id = ia.game_id \nWHERE ia.id IS NULL;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT s.name, s.Average_Attendance, s.Total_Attendance \nFROM stadium s \nLEFT JOIN game g ON s.id = g.stadium_id \nLEFT JOIN injury_accident ia ON g.id = ia.game_id \nWHERE ia.id IS NULL;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT name, Average_Attendance, Total_Attendance FROM stadium WHERE id NOT IN (SELECT stadium_id FROM game JOIN injury_accident ON game.id = injury_accident.game_id)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of stadiums along with their unique identifiers, specifically focusing on those that have hosted games resulting in injuries. The results are grouped by stadium ID and ordered by the number of injury incidents, allowing users to see which stadiums have the highest occurrences of injuries during games. The placeholder in the LIMIT clause represents the maximum number of stadiums to be returned in the query.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a summary of the seasons and stadium names where specific injuries occurred during games. The placeholders in the WHERE clause represent the types of injuries being queried.\",\n        \"virtual_table\": \"SELECT T1.season ,  T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.injury  =  [PLACEHOLDER-TYPE:STRING] OR T3.injury  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the names of stadiums where a specific player has sustained injuries during games. The query uses an intersection to find stadiums associated with two instances of injury records for the same player, ensuring that both records are considered. The placeholders represent the player's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT s.name, s.Average_Attendance, s.Total_Attendance \nFROM stadium s \nLEFT JOIN game g ON s.id = g.stadium_id \nLEFT JOIN injury_accident ia ON g.id = ia.game_id \nWHERE ia.id IS NULL;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT s.name, s.Average_Attendance, s.Total_Attendance \nFROM stadium s \nLEFT JOIN game g ON s.id = g.stadium_id \nLEFT JOIN injury_accident ia ON g.id = ia.game_id \nWHERE ia.id IS NULL;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT name, Average_Attendance, Total_Attendance FROM stadium WHERE id NOT IN (SELECT stadium_id FROM game JOIN injury_accident ON game.id = injury_accident.game_id)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of stadiums along with their unique identifiers, specifically focusing on those that have hosted games resulting in injuries. The results are grouped by stadium ID and ordered by the number of injury incidents, allowing users to see which stadiums have the highest occurrences of injuries during games. The placeholder in the LIMIT clause represents the maximum number of stadiums to be returned in the query.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a summary of the seasons and stadium names where specific injuries occurred during games. The placeholders in the WHERE clause represent the types of injuries being queried.\",\n        \"virtual_table\": \"SELECT T1.season ,  T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.injury  =  [PLACEHOLDER-TYPE:STRING] OR T3.injury  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the names of stadiums where a specific player has sustained injuries during games. The query uses an intersection to find stadiums associated with two instances of injury records for the same player, ensuring that both records are considered. The placeholders represent the player's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1291",
        "c_low": "SELECT stadium.name, COUNT(game.id) AS total_games\nFROM stadium\nLEFT JOIN game ON stadium.id = game.stadium_id\nGROUP BY stadium.id;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT stadium.name, COUNT(game.id) AS total_games\nFROM stadium\nLEFT JOIN game ON stadium.id = game.stadium_id\nGROUP BY stadium.id;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT stadium.id, stadium.name, COUNT(game.id) AS total_games FROM stadium LEFT JOIN game ON stadium.id = game.stadium_id GROUP BY stadium.id, stadium.name;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of stadiums along with their unique identifiers, specifically focusing on those that have hosted games resulting in injuries. The results are grouped by stadium ID and ordered by the number of injury incidents, allowing users to see which stadiums have the highest occurrences of injuries during games. The placeholder in the LIMIT clause represents the maximum number of stadiums to be returned in the query.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies the names of stadiums where a specific player has sustained injuries during games. The query uses an intersection to find stadiums associated with two instances of injury records for the same player, ensuring that both records are considered. The placeholders represent the player's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT stadium.name, COUNT(game.id) AS total_games\nFROM stadium\nLEFT JOIN game ON stadium.id = game.stadium_id\nGROUP BY stadium.id;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT stadium.name, COUNT(game.id) AS total_games\nFROM stadium\nLEFT JOIN game ON stadium.id = game.stadium_id\nGROUP BY stadium.id;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT stadium.id, stadium.name, COUNT(game.id) AS total_games FROM stadium LEFT JOIN game ON stadium.id = game.stadium_id GROUP BY stadium.id, stadium.name;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of stadiums along with their unique identifiers, specifically focusing on those that have hosted games resulting in injuries. The results are grouped by stadium ID and ordered by the number of injury incidents, allowing users to see which stadiums have the highest occurrences of injuries during games. The placeholder in the LIMIT clause represents the maximum number of stadiums to be returned in the query.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies the names of stadiums where a specific player has sustained injuries during games. The query uses an intersection to find stadiums associated with two instances of injury records for the same player, ensuring that both records are considered. The placeholders represent the player's name.\",\n        \"virtual_table\": \"SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1294",
        "c_low": "SELECT COUNT(*) AS league_count FROM League WHERE name = 'England';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT COUNT(*) AS league_count FROM League WHERE name = 'England';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT COUNT(*) AS league_count FROM League WHERE name = 'England';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT COUNT(*) AS league_count FROM League WHERE name = 'England';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT COUNT(*) AS league_count FROM League WHERE name = 'England';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT COUNT(*) AS league_count FROM League WHERE name = 'England';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1296",
        "c_low": "SELECT MAX(height) AS max_height, MIN(height) AS min_height FROM Player;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT MAX(height) AS max_height, MIN(height) AS min_height FROM Player;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT MAX(height) AS max_height, MIN(height) AS min_height FROM Player;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT MAX(height) AS max_height, MIN(height) AS min_height FROM Player;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT MAX(height) AS max_height, MIN(height) AS min_height FROM Player;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT MAX(height) AS max_height, MIN(height) AS min_height FROM Player;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1297",
        "c_low": "SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE overall_rating > (SELECT AVG(overall_rating) FROM Player_Attributes));",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE overall_rating > (SELECT AVG(overall_rating) FROM Player_Attributes));",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE overall_rating > (SELECT AVG(overall_rating) FROM Player_Attributes));",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE overall_rating > (SELECT AVG(overall_rating) FROM Player_Attributes));",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT player_name \nFROM Player \nWHERE player_api_id IN (\n    SELECT player_api_id \n    FROM Player_Attributes \n    WHERE overall_rating > (\n        SELECT AVG(overall_rating) \n        FROM Player_Attributes\n    )\n)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE overall_rating > (SELECT AVG(overall_rating) FROM Player_Attributes));",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1298",
        "c_low": "SELECT player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY dribbling DESC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY dribbling DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY dribbling DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY dribbling DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY dribbling DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY dribbling DESC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1299",
        "c_low": "SELECT Player.player_name \nFROM Player \nJOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id \nWHERE Player_Attributes.crossing > 90 AND Player_Attributes.preferred_foot = 'right';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Player.player_name \nFROM Player \nJOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id \nWHERE Player_Attributes.crossing > 90 AND Player_Attributes.preferred_foot = 'right';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT Player.player_name \nFROM Player \nJOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id \nWHERE Player_Attributes.crossing > 90 AND Player_Attributes.preferred_foot = 'right';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT Player.player_name \nFROM Player \nJOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id \nWHERE Player_Attributes.crossing > 90 AND Player_Attributes.preferred_foot = 'right';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE crossing > 90 AND preferred_foot = 'right';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT player_name \nFROM Player \nJOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id \nWHERE crossing > 90 AND preferred_foot = 'right';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1300",
        "c_low": "SELECT p.player_name \nFROM Player p \nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id \nWHERE pa.preferred_foot = 'left' \nAND pa.overall_rating BETWEEN '85' AND '90';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Player.player_name \nFROM Player \nJOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id \nWHERE Player_Attributes.preferred_foot = 'left' \nAND Player_Attributes.overall_rating BETWEEN '85' AND '90';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT p.player_name \nFROM Player p \nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id \nWHERE pa.preferred_foot = 'left' \nAND pa.overall_rating BETWEEN '85' AND '90';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT p.player_name \nFROM Player p \nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id \nWHERE pa.preferred_foot = 'left' \nAND pa.overall_rating BETWEEN '85' AND '90';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT p.player_name \nFROM Player p \nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id \nWHERE pa.preferred_foot = 'left' \nAND pa.overall_rating BETWEEN '85' AND '90';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT p.player_name \nFROM Player p \nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id \nWHERE pa.preferred_foot = 'left' \nAND pa.overall_rating BETWEEN '85' AND '90';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1303",
        "c_low": "SELECT player_api_id FROM Player WHERE height >= 180 AND player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE overall_rating > 85)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT player_api_id FROM Player WHERE height >= 180 AND player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE overall_rating > 85)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT player_api_id FROM Player WHERE height >= 180 AND player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE overall_rating > 85)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT player_api_id FROM Player WHERE height >= 180 AND player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE overall_rating > 85)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT player_api_id FROM Player WHERE height >= 180 AND player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE overall_rating > 85)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT player_api_id FROM Player WHERE height >= 180 AND player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE overall_rating > 85)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1304",
        "c_low": "SELECT Player.id FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.height BETWEEN 180 AND 190 AND Player_Attributes.preferred_foot = 'left';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Player.id FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.height BETWEEN 180 AND 190 AND Player_Attributes.preferred_foot = 'left';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT Player.id FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.height BETWEEN 180 AND 190 AND Player_Attributes.preferred_foot = 'left';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT Player.id FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.height BETWEEN 180 AND 190 AND Player_Attributes.preferred_foot = 'left';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT Player.id FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.height BETWEEN 180 AND 190 AND Player_Attributes.preferred_foot = 'left';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT Player.id FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.height BETWEEN 180 AND 190 AND Player_Attributes.preferred_foot = 'left';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1305",
        "c_low": "SELECT player_name, overall_rating \nFROM Player \nJOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id \nORDER BY overall_rating DESC \nLIMIT 3;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT player_name, overall_rating \nFROM Player \nJOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id \nORDER BY overall_rating DESC \nLIMIT 3;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT player_name, overall_rating \nFROM Player \nJOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id \nORDER BY overall_rating DESC \nLIMIT 3;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT player_name, overall_rating \nFROM Player \nJOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id \nORDER BY overall_rating DESC \nLIMIT 3;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT player_name, overall_rating \nFROM Player \nJOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id \nORDER BY overall_rating DESC \nLIMIT 3;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT player_name, overall_rating \nFROM Player \nJOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id \nORDER BY overall_rating DESC \nLIMIT 3;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1306",
        "c_low": "SELECT player_name, birthday\nFROM Player\nJOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id\nORDER BY potential DESC\nLIMIT 5;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT player_name, birthday FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY potential DESC LIMIT 5;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT player_name, birthday \nFROM Player \nJOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id \nORDER BY potential DESC \nLIMIT 5;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT player_name, birthday \nFROM Player \nJOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id \nORDER BY potential DESC \nLIMIT 5;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT player_name, birthday\nFROM Player\nJOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id\nORDER BY potential DESC\nLIMIT 5;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT player_name, birthday FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY potential DESC LIMIT 5;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1310",
        "c_low": "SELECT m.Name, p.Date, p.Host, p.Location, p.Attendance \nFROM member m \nJOIN member_attendance ma ON m.Member_ID = ma.Member_ID \nJOIN performance p ON ma.Performance_ID = p.Performance_ID \nWHERE p.Location IN ('TD Garden', 'Bell Centre')",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the average attendance of performance events from the 'performance' table. The result provides insights into the general turnout for performances held.\",\n        \"virtual_table\": \"SELECT avg(Attendance) FROM performance\"\n    }\n}\n",
        "c_mid": "SELECT T1.Member_ID, T2.Name, T3.Date, T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID WHERE T3.Location IN ('TD Garden', 'Bell Centre')",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the dates of performances attended by members of the organization who hold a specific role. The placeholders in the WHERE clause represent the role of the member being queried.\",\n        \"virtual_table\": \"SELECT T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID WHERE T2.Role  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the locations of performances from the 'performance' table that have hosted a minimum number of events. The placeholder in the HAVING clause represents the minimum count of performances required at each location.\",\n        \"virtual_table\": \"SELECT LOCATION FROM performance GROUP BY LOCATION HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT member_attendance.Member_ID, member_attendance.Performance_ID, member_attendance.Num_of_Pieces \nFROM member_attendance \nJOIN performance ON member_attendance.Performance_ID = performance.Performance_ID \nWHERE performance.Location IN ('TD Garden', 'Bell Centre')",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies locations of performances from the 'performance' table where the attendance is greater than a specified number and also less than another specified number. The placeholders in the WHERE clauses represent the attendance thresholds.\",\n        \"virtual_table\": \"SELECT LOCATION FROM performance WHERE Attendance  >  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT LOCATION FROM performance WHERE Attendance  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT * FROM performance WHERE Location IN ('TD Garden', 'Bell Centre')",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the average attendance of performance events from the 'performance' table. The result provides insights into the general turnout for performances held.\",\n        \"virtual_table\": \"SELECT avg(Attendance) FROM performance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies locations of performances from the 'performance' table where the attendance is greater than a specified number and also less than another specified number. The placeholders in the WHERE clauses represent the attendance thresholds.\",\n        \"virtual_table\": \"SELECT LOCATION FROM performance WHERE Attendance  >  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT LOCATION FROM performance WHERE Attendance  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the locations of performances from the 'performance' table that have hosted a minimum number of events. The placeholder in the HAVING clause represents the minimum count of performances required at each location.\",\n        \"virtual_table\": \"SELECT LOCATION FROM performance GROUP BY LOCATION HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT m.Name, p.Date, p.Location, p.Attendance\nFROM member m\nJOIN member_attendance ma ON m.Member_ID = ma.Member_ID\nJOIN performance p ON ma.Performance_ID = p.Performance_ID\nWHERE p.Location IN ('TD Garden', 'Bell Centre');",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT T3.Date, T3.Host, T3.Location, T3.Attendance \nFROM member_attendance AS T1 \nJOIN member AS T2 ON T1.Member_ID = T2.Member_ID \nJOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID \nWHERE T3.Location IN ('TD Garden', 'Bell Centre')",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the dates of performances attended by members of the organization who hold a specific role. The placeholders in the WHERE clause represent the role of the member being queried.\",\n        \"virtual_table\": \"SELECT T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID WHERE T2.Role  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1355",
        "c_low": "SELECT dept_name FROM department WHERE dept_name IN (SELECT dept_name FROM instructor WHERE name LIKE 'Soisalon');",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names of instructors who are advisors to students from a specific department. The placeholder in the WHERE clause represents the department's name, and the results are ordered by the total credits earned by the students.\",\n        \"virtual_table\": \"SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T3.tot_cred\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the identifiers of instructors who are acting as advisors for students enrolled in a specific department. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of students who are enrolled in courses offered by a specific academic department. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT department.dept_name \nFROM instructor \nJOIN department ON instructor.dept_name = department.dept_name \nWHERE instructor.name LIKE 'Soisalon';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholders in the WHERE clause represent the department's name.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholder in the WHERE clause represents the department's name.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names of instructors along with the course IDs of the courses they teach, specifically filtered by the department they belong to. The placeholder in the WHERE clause represents the department's name.\",\n        \"virtual_table\": \"SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT dept_name FROM instructor WHERE name LIKE 'Soisalon'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the buildings and room numbers where courses from a specific department are held, along with the semester and year of those courses. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.title\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the titles of courses that are offered by two specific academic departments. The placeholders in the WHERE clauses represent the names of the departments being compared.\",\n        \"virtual_table\": \"SELECT title FROM course WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT title FROM course WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names of academic departments and their corresponding buildings from the 'department' table, specifically for those departments whose budget exceeds the average budget of all departments. The placeholder in the WHERE clause represents the budget threshold for comparison.\",\n        \"virtual_table\": \"SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)\"\n    }\n}\n",
        "t_1": "SELECT dept_name FROM department WHERE dept_name IN (SELECT dept_name FROM instructor WHERE name LIKE 'Soisalon');",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the titles of courses that are offered by two specific academic departments. The placeholders in the WHERE clauses represent the names of the departments being compared.\",\n        \"virtual_table\": \"SELECT title FROM course WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT title FROM course WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of academic departments and their corresponding buildings from the 'department' table, specifically for those departments whose budget exceeds the average budget of all departments. The placeholder in the WHERE clause represents the budget threshold for comparison.\",\n        \"virtual_table\": \"SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of instructors from the 'instructor' table who earn a salary greater than the minimum salary of instructors in a specified department. The placeholder in the subquery represents the department's name.\",\n        \"virtual_table\": \"SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "t_2": "SELECT dept_name FROM department WHERE dept_name IN (SELECT dept_name FROM instructor WHERE name LIKE 'Soisalon');",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names of instructors along with the course IDs of the courses they teach, specifically filtered by the department they belong to. The placeholder in the WHERE clause represents the department's name.\",\n        \"virtual_table\": \"SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the identifiers of instructors who are acting as advisors for students enrolled in a specific department. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides information about the buildings and room numbers where courses from a specific department are held, along with the semester and year of those courses. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.title\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT department.dept_name \nFROM instructor \nJOIN department ON instructor.dept_name = department.dept_name \nWHERE instructor.name LIKE 'Soisalon';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholders in the WHERE clause represent the department's name.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholder in the WHERE clause represents the department's name.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names of instructors who are advisors to students from a specific department. The placeholder in the WHERE clause represents the department's name, and the results are ordered by the total credits earned by the students.\",\n        \"virtual_table\": \"SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T3.tot_cred\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1364",
        "c_low": "SELECT title FROM course WHERE dept_name = 'Statistics' AND course_id NOT IN (SELECT course_id FROM course WHERE dept_name = 'Psychology')",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of students who are enrolled in courses offered by a specific academic department. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the course IDs of courses that do not have any prerequisites. It is derived from the 'course' table by excluding those course IDs that appear in the 'prereq' table, indicating that they are not dependent on any other courses for enrollment.\",\n        \"virtual_table\": \"SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of academic departments from the 'course' table, grouped by department name. The results are ordered by the number of courses offered by each department in descending order, with a limit on the number of departments returned, specified by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT title FROM course WHERE dept_name = 'Statistics' AND course_id NOT IN (SELECT course_id FROM course WHERE dept_name = 'Psychology');",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of students who have taken courses in either of the specified academic years. The placeholders in the WHERE clause represent the years of interest.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] OR YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course titles along with the names of instructors who are teaching those courses in a specific academic year. The placeholders in the WHERE clause represent the academic year for which the data is being queried.\",\n        \"virtual_table\": \"SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] ORDER BY T1.title\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the titles of courses offered in a specific building during a particular semester and year. The placeholders in the WHERE clause represent the building name, semester, and year for filtering the results.\",\n        \"virtual_table\": \"SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  [PLACEHOLDER-TYPE:STRING] AND semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT title FROM course WHERE dept_name = 'Statistics' EXCEPT SELECT title FROM course WHERE dept_name = 'Psychology'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the titles of courses that are offered by two specific academic departments. The placeholders in the WHERE clauses represent the names of the departments being compared.\",\n        \"virtual_table\": \"SELECT title FROM course WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT title FROM course WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the buildings and room numbers where courses from a specific department are held, along with the semester and year of those courses. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.title\"\n    }\n}\n",
        "t_1": "SELECT title FROM course WHERE dept_name = 'Statistics' EXCEPT SELECT title FROM course WHERE dept_name = 'Psychology'",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the titles of courses that are offered by two specific academic departments. The placeholders in the WHERE clauses represent the names of the departments being compared.\",\n        \"virtual_table\": \"SELECT title FROM course WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT title FROM course WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of students grouped by their respective academic departments. The placeholder in the SELECT statement represents the department's name, allowing for an aggregation of student counts per department.\",\n        \"virtual_table\": \"SELECT count(*) ,  dept_name FROM student GROUP BY dept_name\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of academic departments from the 'course' table, grouped by department name. The results are ordered by the number of courses offered by each department in descending order, with a limit on the number of departments returned, specified by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT title FROM course WHERE dept_name = 'Statistics' AND dept_name != 'Psychology'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of students who have taken courses in either of the specified academic years. The placeholders in the WHERE clause represent the years of interest.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] OR YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the course IDs of courses that do not have any prerequisites. It is derived from the 'course' table by excluding those course IDs that appear in the 'prereq' table, indicating that they are not dependent on any other courses for enrollment.\",\n        \"virtual_table\": \"SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the titles of courses offered in a specific building during a particular semester and year. The placeholders in the WHERE clause represent the building name, semester, and year for filtering the results.\",\n        \"virtual_table\": \"SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  [PLACEHOLDER-TYPE:STRING] AND semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT title FROM course WHERE dept_name = 'Statistics' AND dept_name != 'Psychology';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course titles along with the names of instructors who are teaching those courses in a specific academic year. The placeholders in the WHERE clause represent the academic year for which the data is being queried.\",\n        \"virtual_table\": \"SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] ORDER BY T1.title\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of students who are enrolled in courses offered by a specific academic department. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of instructors who teach a specific course identified by its title. The placeholders in the WHERE clause represent the course title that the user can specify.\",\n        \"virtual_table\": \"SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1365",
        "c_low": "SELECT title FROM course WHERE dept_name = 'Statistics' AND course_id NOT IN (SELECT course_id FROM course WHERE dept_name = 'Psychology')",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of students who are enrolled in courses offered by a specific academic department. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of academic departments from the 'course' table, grouped by department name. The results are ordered by the number of courses offered by each department in descending order, with a limit on the number of departments returned, specified by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the course IDs of courses that do not have any prerequisites. It is derived from the 'course' table by excluding those course IDs that appear in the 'prereq' table, indicating that they are not dependent on any other courses for enrollment.\",\n        \"virtual_table\": \"SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq\"\n    }\n}\n",
        "c_mid": "SELECT title FROM course WHERE dept_name = 'Statistics' AND dept_name != 'Psychology';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of students who have taken courses in either of the specified academic years. The placeholders in the WHERE clause represent the years of interest.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] OR YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of students grouped by their respective academic departments. The placeholder in the SELECT statement represents the department's name, allowing for an aggregation of student counts per department.\",\n        \"virtual_table\": \"SELECT count(*) ,  dept_name FROM student GROUP BY dept_name\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the titles of courses offered in a specific building during a particular semester and year. The placeholders in the WHERE clause represent the building name, semester, and year for filtering the results.\",\n        \"virtual_table\": \"SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  [PLACEHOLDER-TYPE:STRING] AND semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT title FROM course WHERE dept_name = 'Statistics' EXCEPT SELECT title FROM course WHERE dept_name = 'Psychology';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the titles of courses that are offered by two specific academic departments. The placeholders in the WHERE clauses represent the names of the departments being compared.\",\n        \"virtual_table\": \"SELECT title FROM course WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT title FROM course WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the buildings and room numbers where courses from a specific department are held, along with the semester and year of those courses. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.title\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles of courses that are prerequisites for a specific course identified by its title. The placeholder in the WHERE clause represents the title of the course for which the prerequisites are being queried.\",\n        \"virtual_table\": \"SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "t_1": "SELECT title FROM course WHERE dept_name = 'Statistics' EXCEPT SELECT title FROM course WHERE dept_name = 'Psychology';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the titles of courses that are offered by two specific academic departments. The placeholders in the WHERE clauses represent the names of the departments being compared.\",\n        \"virtual_table\": \"SELECT title FROM course WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT title FROM course WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of students grouped by their respective academic departments. The placeholder in the SELECT statement represents the department's name, allowing for an aggregation of student counts per department.\",\n        \"virtual_table\": \"SELECT count(*) ,  dept_name FROM student GROUP BY dept_name\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of academic departments from the 'course' table, grouped by department name. The results are ordered by the number of courses offered by each department in descending order, with a limit on the number of departments returned, specified by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT title FROM course WHERE dept_name = 'Statistics' AND dept_name != 'Psychology';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of students who have taken courses in either of the specified academic years. The placeholders in the WHERE clause represent the years of interest.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] OR YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the buildings and room numbers where courses from a specific department are held, along with the semester and year of those courses. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.title\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the titles of courses offered in a specific building during a particular semester and year. The placeholders in the WHERE clause represent the building name, semester, and year for filtering the results.\",\n        \"virtual_table\": \"SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  [PLACEHOLDER-TYPE:STRING] AND semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT title FROM course WHERE dept_name = 'Statistics' AND dept_name != 'Psychology';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of students who are enrolled in courses offered by a specific academic department. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course titles along with the names of instructors who are teaching those courses in a specific academic year. The placeholders in the WHERE clause represent the academic year for which the data is being queried.\",\n        \"virtual_table\": \"SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] ORDER BY T1.title\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names of instructors who are advisors to students from a specific department. The placeholder in the WHERE clause represents the department's name, and the results are ordered by the total credits earned by the students.\",\n        \"virtual_table\": \"SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T3.tot_cred\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1375",
        "c_low": "SELECT title, credits FROM course ORDER BY title, credits;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of instructors who teach a specific course identified by its title. The placeholders in the WHERE clause represent the course title that the user can specify.\",\n        \"virtual_table\": \"SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of instructors who are advisors to students from a specific department. The placeholder in the WHERE clause represents the department's name, and the results are ordered by the total credits earned by the students.\",\n        \"virtual_table\": \"SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T3.tot_cred\"\n    }\n}\n",
        "c_mid": "SELECT title, credits FROM course ORDER BY title, credits",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course titles along with the names of instructors who are teaching those courses in a specific academic year. The placeholders in the WHERE clause represent the academic year for which the data is being queried.\",\n        \"virtual_table\": \"SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] ORDER BY T1.title\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the titles of courses offered in a specific building during a particular semester and year. The placeholders in the WHERE clause represent the building name, semester, and year for filtering the results.\",\n        \"virtual_table\": \"SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  [PLACEHOLDER-TYPE:STRING] AND semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the distinct names of students who have taken courses in either of the specified academic years. The placeholders in the WHERE clause represent the years of interest.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] OR YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT title, credits FROM course ORDER BY title, credits;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the titles of courses that are offered by two specific academic departments. The placeholders in the WHERE clauses represent the names of the departments being compared.\",\n        \"virtual_table\": \"SELECT title FROM course WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT title FROM course WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course titles and their corresponding credit values from the 'course' table, specifically for courses that have more than a specified number of prerequisites. The placeholder in the HAVING clause represents the minimum count of prerequisites required for the courses listed.\",\n        \"virtual_table\": \"SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles of courses that are prerequisites for a specific course identified by its title. The placeholder in the WHERE clause represents the title of the course for which the prerequisites are being queried.\",\n        \"virtual_table\": \"SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "t_1": "SELECT title, credits FROM course ORDER BY title, credits;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the titles of courses that are offered by two specific academic departments. The placeholders in the WHERE clauses represent the names of the departments being compared.\",\n        \"virtual_table\": \"SELECT title FROM course WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT title FROM course WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the titles of courses from the 'course' table that have been offered more than a specified number of times. The placeholder in the HAVING clause represents the minimum count of offerings required to include a course title in the results.\",\n        \"virtual_table\": \"SELECT title FROM course GROUP BY title HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT title, credits FROM course ORDER BY title, credits;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the titles of courses offered in a specific building during a particular semester and year. The placeholders in the WHERE clause represent the building name, semester, and year for filtering the results.\",\n        \"virtual_table\": \"SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  [PLACEHOLDER-TYPE:STRING] AND semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the distinct names of students who have taken courses in either of the specified academic years. The placeholders in the WHERE clause represent the years of interest.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] OR YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of course titles and their corresponding credit values from the 'course' table, specifically for courses that have more than a specified number of prerequisites. The placeholder in the HAVING clause represents the minimum count of prerequisites required for the courses listed.\",\n        \"virtual_table\": \"SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT title, credits FROM course ORDER BY title, credits",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course titles along with the names of instructors who are teaching those courses in a specific academic year. The placeholders in the WHERE clause represent the academic year for which the data is being queried.\",\n        \"virtual_table\": \"SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] ORDER BY T1.title\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the titles and credits of courses that are held in the classroom with the maximum capacity. It joins the 'classroom', 'section', and 'course' tables to filter the results based on the classroom's capacity.\",\n        \"virtual_table\": \"SELECT T3.title ,  T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of instructors who teach a specific course identified by its title. The placeholders in the WHERE clause represent the course title that the user can specify.\",\n        \"virtual_table\": \"SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1400",
        "c_low": "SELECT MIN(salary) \nFROM instructor \nWHERE dept_name IN (\n    SELECT dept_name \n    FROM instructor \n    GROUP BY dept_name \n    HAVING AVG(salary) > (SELECT AVG(salary) FROM instructor)\n);",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of instructors from the 'instructor' table, ordered by their annual salary in descending order. The placeholder in the LIMIT clause represents the maximum number of instructors to be displayed.\",\n        \"virtual_table\": \"SELECT name FROM instructor ORDER BY salary DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of instructors who are advisors to students from a specific department. The placeholder in the WHERE clause represents the department's name, and the results are ordered by the total credits earned by the students.\",\n        \"virtual_table\": \"SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T3.tot_cred\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the identifiers of instructors who are acting as advisors for students enrolled in a specific department. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT MIN(salary) FROM instructor WHERE dept_name IN (SELECT dept_name FROM instructor GROUP BY dept_name HAVING AVG(salary) > (SELECT AVG(salary) FROM instructor))",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of instructors from the 'instructor' table who earn a salary greater than the minimum salary of instructors in a specified department. The placeholder in the subquery represents the department's name.\",\n        \"virtual_table\": \"SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of instructors from the 'instructor' table who earn a salary greater than the maximum salary of instructors in a specified department. The placeholder in the subquery represents the department's name.\",\n        \"virtual_table\": \"SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholders in the WHERE clause represent the department's name.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT MIN(salary) FROM instructor WHERE dept_name IN (SELECT dept_name FROM instructor GROUP BY dept_name HAVING AVG(salary) > (SELECT AVG(salary) FROM instructor))",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors from the 'instructor' table who earn less than the average salary of instructors in a specified department. The placeholder in the subquery represents the department's name.\",\n        \"virtual_table\": \"SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of academic departments along with their budgets from the 'department' table, specifically filtering for those departments whose budgets exceed the average budget of all departments. The placeholder in the WHERE clause represents the average budget value.\",\n        \"virtual_table\": \"SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names of academic departments and their corresponding buildings from the 'department' table, specifically for those departments whose budget exceeds the average budget of all departments. The placeholder in the WHERE clause represents the budget threshold for comparison.\",\n        \"virtual_table\": \"SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)\"\n    }\n}\n",
        "t_1": "SELECT MIN(salary) FROM instructor WHERE dept_name IN (SELECT dept_name FROM instructor GROUP BY dept_name HAVING AVG(salary) > (SELECT AVG(salary) FROM instructor))",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors from the 'instructor' table who earn less than the average salary of instructors in a specified department. The placeholder in the subquery represents the department's name.\",\n        \"virtual_table\": \"SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of instructors from the 'instructor' table who earn a salary greater than the minimum salary of instructors in a specified department. The placeholder in the subquery represents the department's name.\",\n        \"virtual_table\": \"SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of instructors from the 'instructor' table who earn a salary greater than the maximum salary of instructors in a specified department. The placeholder in the subquery represents the department's name.\",\n        \"virtual_table\": \"SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "t_2": "SELECT MIN(salary) \nFROM instructor \nWHERE dept_name IN (\n    SELECT dept_name \n    FROM instructor \n    GROUP BY dept_name \n    HAVING AVG(salary) > (SELECT AVG(salary) FROM instructor)\n);",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names of instructors along with the course IDs of the courses they teach, specifically filtered by the department they belong to. The placeholder in the WHERE clause represents the department's name.\",\n        \"virtual_table\": \"SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the identifiers of instructors who are acting as advisors for students enrolled in a specific department. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT MIN(salary) FROM instructor WHERE dept_name IN (SELECT dept_name FROM instructor GROUP BY dept_name HAVING AVG(salary) > (SELECT AVG(salary) FROM instructor));",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholders in the WHERE clause represent the department's name.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholder in the WHERE clause represents the department's name.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names of instructors who are advisors to students from a specific department. The placeholder in the WHERE clause represents the department's name, and the results are ordered by the total credits earned by the students.\",\n        \"virtual_table\": \"SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T3.tot_cred\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1401",
        "c_low": "SELECT MIN(salary) FROM instructor WHERE dept_name IN (SELECT dept_name FROM instructor GROUP BY dept_name HAVING AVG(salary) > (SELECT AVG(salary) FROM instructor));",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total budget allocated to specific academic departments from the 'department' table. The placeholders in the WHERE clause represent the names of the departments for which the budget is being summed.\",\n        \"virtual_table\": \"SELECT sum(budget) FROM department WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING] OR dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of academic departments along with their respective building locations, sorted by the allocated budget in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of departments to retrieve.\",\n        \"virtual_table\": \"SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT MIN(salary) FROM instructor WHERE dept_name IN (SELECT dept_name FROM instructor GROUP BY dept_name HAVING AVG(salary) > (SELECT AVG(salary) FROM instructor))",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of instructors from the 'instructor' table who earn a salary greater than the minimum salary of instructors in a specified department. The placeholder in the subquery represents the department's name.\",\n        \"virtual_table\": \"SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of instructors from the 'instructor' table who earn a salary greater than the maximum salary of instructors in a specified department. The placeholder in the subquery represents the department's name.\",\n        \"virtual_table\": \"SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholders in the WHERE clause represent the department's name.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT MIN(salary) FROM instructor WHERE dept_name IN (SELECT dept_name FROM department WHERE budget > (SELECT avg(budget) FROM department)) AND salary > (SELECT avg(salary) FROM instructor)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors from the 'instructor' table who earn less than the average salary of instructors in a specified department. The placeholder in the subquery represents the department's name.\",\n        \"virtual_table\": \"SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of academic departments along with their budgets from the 'department' table, specifically filtering for those departments whose budgets exceed the average budget of all departments. The placeholder in the WHERE clause represents the average budget value.\",\n        \"virtual_table\": \"SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names of academic departments and their corresponding buildings from the 'department' table, specifically for those departments whose budget exceeds the average budget of all departments. The placeholder in the WHERE clause represents the budget threshold for comparison.\",\n        \"virtual_table\": \"SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)\"\n    }\n}\n",
        "t_1": "SELECT MIN(salary) FROM instructor WHERE dept_name IN (SELECT dept_name FROM department WHERE budget > (SELECT AVG(budget) FROM department)) AND salary > (SELECT AVG(salary) FROM instructor)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors from the 'instructor' table who earn less than the average salary of instructors in a specified department. The placeholder in the subquery represents the department's name.\",\n        \"virtual_table\": \"SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of academic departments along with their budgets from the 'department' table, specifically filtering for those departments whose budgets exceed the average budget of all departments. The placeholder in the WHERE clause represents the average budget value.\",\n        \"virtual_table\": \"SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of instructors from the 'instructor' table who earn a salary greater than the minimum salary of instructors in a specified department. The placeholder in the subquery represents the department's name.\",\n        \"virtual_table\": \"SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "t_2": "SELECT MIN(salary) \nFROM instructor \nWHERE dept_name IN (\n    SELECT dept_name \n    FROM instructor \n    GROUP BY dept_name \n    HAVING AVG(salary) > (SELECT AVG(salary) FROM instructor)\n);",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT MIN(salary) FROM instructor WHERE dept_name IN (SELECT dept_name FROM instructor GROUP BY dept_name HAVING AVG(salary) > (SELECT AVG(salary) FROM instructor));",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholders in the WHERE clause represent the department's name.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholder in the WHERE clause represents the department's name.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1422",
        "c_low": "SELECT prereq.prereq_id FROM course JOIN prereq ON course.course_id = prereq.course_id WHERE course.title = 'International Finance'",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the course IDs of courses that do not have any prerequisites. It is derived from the 'course' table by excluding those course IDs that appear in the 'prereq' table, indicating that they are not dependent on any other courses for enrollment.\",\n        \"virtual_table\": \"SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of instructors who teach a specific course identified by its title. The placeholders in the WHERE clause represent the course title that the user can specify.\",\n        \"virtual_table\": \"SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names of instructors who are advisors to students from a specific department. The placeholder in the WHERE clause represents the department's name, and the results are ordered by the total credits earned by the students.\",\n        \"virtual_table\": \"SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T3.tot_cred\"\n    }\n}\n",
        "c_mid": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.prereq_id WHERE T2.course_id = (SELECT course_id FROM course WHERE title = 'International Finance')",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the titles of courses offered in a specific building during a particular semester and year. The placeholders in the WHERE clause represent the building name, semester, and year for filtering the results.\",\n        \"virtual_table\": \"SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  [PLACEHOLDER-TYPE:STRING] AND semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course titles along with the names of instructors who are teaching those courses in a specific academic year. The placeholders in the WHERE clause represent the academic year for which the data is being queried.\",\n        \"virtual_table\": \"SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] ORDER BY T1.title\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the distinct names of students who have taken courses in either of the specified academic years. The placeholders in the WHERE clause represent the years of interest.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] OR YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.title = 'International Finance')",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles of courses that are prerequisites for a specific course identified by its title. The placeholder in the WHERE clause represents the title of the course for which the prerequisites are being queried.\",\n        \"virtual_table\": \"SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of students who are enrolled in courses that have prerequisites, specifically for a course with a given title. The placeholder in the subquery represents the title of the course for which we want to find the students enrolled in its prerequisite courses.\",\n        \"virtual_table\": \"SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles of courses from the 'course' table that have a specific number of prerequisites. The placeholder in the HAVING clause represents the required count of prerequisite courses for each course.\",\n        \"virtual_table\": \"SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT title FROM course WHERE course_id IN (SELECT prereq_id FROM prereq WHERE course_id = (SELECT course_id FROM course WHERE title = 'International Finance'))",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the titles of courses that are offered by two specific academic departments. The placeholders in the WHERE clauses represent the names of the departments being compared.\",\n        \"virtual_table\": \"SELECT title FROM course WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT title FROM course WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the titles of courses from the 'course' table that have been offered more than a specified number of times. The placeholder in the HAVING clause represents the minimum count of offerings required to include a course title in the results.\",\n        \"virtual_table\": \"SELECT title FROM course GROUP BY title HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the course IDs from the 'section' table that are offered in two different semesters of the same academic year. The placeholders in the WHERE clauses represent the specific semesters and the academic year.\",\n        \"virtual_table\": \"SELECT course_id FROM SECTION WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT course_id FROM SECTION WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.title = 'International Finance')",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles of courses that are prerequisites for a specific course identified by its title. The placeholder in the WHERE clause represents the title of the course for which the prerequisites are being queried.\",\n        \"virtual_table\": \"SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the titles of courses from the 'course' table that have a specific number of prerequisites. The placeholder in the HAVING clause represents the required count of prerequisite courses for each course.\",\n        \"virtual_table\": \"SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of course titles and their corresponding credit values from the 'course' table, specifically for courses that have more than a specified number of prerequisites. The placeholder in the HAVING clause represents the minimum count of prerequisites required for the courses listed.\",\n        \"virtual_table\": \"SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id = T4.course_id WHERE T3.title = 'International Finance'",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of students who are enrolled in courses that have prerequisites, specifically for a course with a given title. The placeholder in the subquery represents the title of the course for which we want to find the students enrolled in its prerequisite courses.\",\n        \"virtual_table\": \"SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of instructors who teach a specific course identified by its title. The placeholders in the WHERE clause represent the course title that the user can specify.\",\n        \"virtual_table\": \"SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of course titles along with the names of instructors who are teaching those courses in a specific academic year. The placeholders in the WHERE clause represent the academic year for which the data is being queried.\",\n        \"virtual_table\": \"SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] ORDER BY T1.title\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1424",
        "c_low": "SELECT title FROM course WHERE course_id IN (SELECT course_id FROM prereq WHERE prereq_id = (SELECT course_id FROM course WHERE title = 'Differential Geometry'))",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the course IDs of courses that do not have any prerequisites. It is derived from the 'course' table by excluding those course IDs that appear in the 'prereq' table, indicating that they are not dependent on any other courses for enrollment.\",\n        \"virtual_table\": \"SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of instructors who teach a specific course identified by its title. The placeholders in the WHERE clause represent the course title that the user can specify.\",\n        \"virtual_table\": \"SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of students who are enrolled in courses offered by a specific academic department. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id WHERE T2.prereq_id = (SELECT course_id FROM course WHERE title = 'Differential Geometry')",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the titles of courses offered in a specific building during a particular semester and year. The placeholders in the WHERE clause represent the building name, semester, and year for filtering the results.\",\n        \"virtual_table\": \"SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  [PLACEHOLDER-TYPE:STRING] AND semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the distinct names of students who have taken courses in either of the specified academic years. The placeholders in the WHERE clause represent the years of interest.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] OR YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of course titles along with the names of instructors who are teaching those courses in a specific academic year. The placeholders in the WHERE clause represent the academic year for which the data is being queried.\",\n        \"virtual_table\": \"SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] ORDER BY T1.title\"\n    }\n}\n",
        "c_high": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.title = 'Differential Geometry')",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles of courses that are prerequisites for a specific course identified by its title. The placeholder in the WHERE clause represents the title of the course for which the prerequisites are being queried.\",\n        \"virtual_table\": \"SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of students who are enrolled in courses that have prerequisites, specifically for a course with a given title. The placeholder in the subquery represents the title of the course for which we want to find the students enrolled in its prerequisite courses.\",\n        \"virtual_table\": \"SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles of courses from the 'course' table that have a specific number of prerequisites. The placeholder in the HAVING clause represents the required count of prerequisite courses for each course.\",\n        \"virtual_table\": \"SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT title FROM course WHERE course_id IN (SELECT course_id FROM prereq WHERE prereq_id = (SELECT course_id FROM course WHERE title = 'Differential Geometry'));",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the titles of courses that are offered by two specific academic departments. The placeholders in the WHERE clauses represent the names of the departments being compared.\",\n        \"virtual_table\": \"SELECT title FROM course WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT title FROM course WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the titles of courses from the 'course' table that have been offered more than a specified number of times. The placeholder in the HAVING clause represents the minimum count of offerings required to include a course title in the results.\",\n        \"virtual_table\": \"SELECT title FROM course GROUP BY title HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the course IDs from the 'section' table that are offered in two different semesters of the same academic year. The placeholders in the WHERE clauses represent the specific semesters and the academic year.\",\n        \"virtual_table\": \"SELECT course_id FROM SECTION WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT course_id FROM SECTION WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.title = 'Differential Geometry')",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles of courses that are prerequisites for a specific course identified by its title. The placeholder in the WHERE clause represents the title of the course for which the prerequisites are being queried.\",\n        \"virtual_table\": \"SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the titles of courses from the 'course' table that have a specific number of prerequisites. The placeholder in the HAVING clause represents the required count of prerequisite courses for each course.\",\n        \"virtual_table\": \"SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of course titles and their corresponding credit values from the 'course' table, specifically for courses that have more than a specified number of prerequisites. The placeholder in the HAVING clause represents the minimum count of prerequisites required for the courses listed.\",\n        \"virtual_table\": \"SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT title FROM course WHERE course_id IN (SELECT course_id FROM prereq WHERE prereq_id = (SELECT course_id FROM course WHERE title = 'Differential Geometry'))",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of students who are enrolled in courses that have prerequisites, specifically for a course with a given title. The placeholder in the subquery represents the title of the course for which we want to find the students enrolled in its prerequisite courses.\",\n        \"virtual_table\": \"SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of instructors who teach a specific course identified by its title. The placeholders in the WHERE clause represent the course title that the user can specify.\",\n        \"virtual_table\": \"SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of course titles along with the names of instructors who are teaching those courses in a specific academic year. The placeholders in the WHERE clause represent the academic year for which the data is being queried.\",\n        \"virtual_table\": \"SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] ORDER BY T1.title\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1425",
        "c_low": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id WHERE T2.prereq_id = (SELECT course_id FROM course WHERE title = 'Differential Geometry')",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of instructors who teach a specific course identified by its title. The placeholders in the WHERE clause represent the course title that the user can specify.\",\n        \"virtual_table\": \"SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the course IDs of courses that do not have any prerequisites. It is derived from the 'course' table by excluding those course IDs that appear in the 'prereq' table, indicating that they are not dependent on any other courses for enrollment.\",\n        \"virtual_table\": \"SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of students who are enrolled in courses offered by a specific academic department. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id WHERE T2.prereq_id = (SELECT course_id FROM course WHERE title = 'Differential Geometry')",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the titles of courses offered in a specific building during a particular semester and year. The placeholders in the WHERE clause represent the building name, semester, and year for filtering the results.\",\n        \"virtual_table\": \"SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  [PLACEHOLDER-TYPE:STRING] AND semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course titles along with the names of instructors who are teaching those courses in a specific academic year. The placeholders in the WHERE clause represent the academic year for which the data is being queried.\",\n        \"virtual_table\": \"SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] ORDER BY T1.title\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the distinct names of students who have taken courses in either of the specified academic years. The placeholders in the WHERE clause represent the years of interest.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] OR YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id = T2.course_id WHERE T2.title = 'Differential Geometry')",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles of courses that are prerequisites for a specific course identified by its title. The placeholder in the WHERE clause represents the title of the course for which the prerequisites are being queried.\",\n        \"virtual_table\": \"SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of students who are enrolled in courses that have prerequisites, specifically for a course with a given title. The placeholder in the subquery represents the title of the course for which we want to find the students enrolled in its prerequisite courses.\",\n        \"virtual_table\": \"SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles of courses from the 'course' table that have a specific number of prerequisites. The placeholder in the HAVING clause represents the required count of prerequisite courses for each course.\",\n        \"virtual_table\": \"SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT c.title \nFROM course c \nJOIN prereq p ON c.course_id = p.course_id \nWHERE p.prereq_id = (SELECT course_id FROM course WHERE title = 'Differential Geometry');",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the titles of courses that are offered by two specific academic departments. The placeholders in the WHERE clauses represent the names of the departments being compared.\",\n        \"virtual_table\": \"SELECT title FROM course WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT title FROM course WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the titles of courses from the 'course' table that have been offered more than a specified number of times. The placeholder in the HAVING clause represents the minimum count of offerings required to include a course title in the results.\",\n        \"virtual_table\": \"SELECT title FROM course GROUP BY title HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the course IDs from the 'section' table that are offered in two different semesters of the same academic year. The placeholders in the WHERE clauses represent the specific semesters and the academic year.\",\n        \"virtual_table\": \"SELECT course_id FROM SECTION WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT course_id FROM SECTION WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id WHERE T2.prereq_id IN (SELECT course_id FROM course WHERE title = 'Differential Geometry')",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles of courses that are prerequisites for a specific course identified by its title. The placeholder in the WHERE clause represents the title of the course for which the prerequisites are being queried.\",\n        \"virtual_table\": \"SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the titles of courses from the 'course' table that have a specific number of prerequisites. The placeholder in the HAVING clause represents the required count of prerequisite courses for each course.\",\n        \"virtual_table\": \"SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the titles of courses offered in a specific building during a particular semester and year. The placeholders in the WHERE clause represent the building name, semester, and year for filtering the results.\",\n        \"virtual_table\": \"SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  [PLACEHOLDER-TYPE:STRING] AND semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT T3.title FROM course AS T3 JOIN prereq AS T4 ON T3.course_id = T4.course_id WHERE T4.prereq_id = (SELECT course_id FROM course WHERE title = 'Differential Geometry')",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of students who are enrolled in courses that have prerequisites, specifically for a course with a given title. The placeholder in the subquery represents the title of the course for which we want to find the students enrolled in its prerequisite courses.\",\n        \"virtual_table\": \"SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of instructors who teach a specific course identified by its title. The placeholders in the WHERE clause represent the course title that the user can specify.\",\n        \"virtual_table\": \"SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of course titles along with the names of instructors who are teaching those courses in a specific academic year. The placeholders in the WHERE clause represent the academic year for which the data is being queried.\",\n        \"virtual_table\": \"SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] ORDER BY T1.title\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1426",
        "c_low": "SELECT DISTINCT T3.name FROM takes AS T2 JOIN student AS T3 ON T2.ID = T3.ID WHERE T2.semester = 'Fall' AND T2.year = '2003'",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of students who are enrolled in courses offered by a specific academic department. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.ID = T2.ID WHERE T2.semester = 'Fall' AND T2.year = '2003'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of students who have taken courses in either of the specified academic years. The placeholders in the WHERE clause represent the years of interest.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] OR YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course titles along with the names of instructors who are teaching those courses in a specific academic year. The placeholders in the WHERE clause represent the academic year for which the data is being queried.\",\n        \"virtual_table\": \"SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] ORDER BY T1.title\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of distinct instructors who are teaching courses during a specific semester and year. The placeholders in the WHERE clause represent the semester and year for which the count is being calculated.\",\n        \"virtual_table\": \"SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT student.name \nFROM student \nJOIN takes ON student.ID = takes.ID \nJOIN section ON takes.course_id = section.course_id AND takes.sec_id = section.sec_id \nWHERE section.semester = 'Fall' AND section.year = '2003';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies the unique identifiers of instructors who are teaching courses in a specific semester and year, excluding those who are teaching in another specified semester and year. The placeholders in the query represent the semester and year values for filtering the results.\",\n        \"virtual_table\": \"SELECT id FROM teaches WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT id FROM teaches WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT student.name \nFROM student \nJOIN takes ON student.ID = takes.ID \nWHERE takes.semester = 'Fall' AND takes.year = '2003';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies the unique identifiers of instructors who are teaching courses in a specific semester and year, excluding those who are teaching in another specified semester and year. The placeholders in the query represent the semester and year values for filtering the results.\",\n        \"virtual_table\": \"SELECT id FROM teaches WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT id FROM teaches WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of distinct instructors who are teaching courses during a specific semester and year. The placeholders in the WHERE clause represent the semester and year for which the count is being calculated.\",\n        \"virtual_table\": \"SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.ID = T2.ID WHERE T2.semester = 'Fall' AND T2.year = '2003'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of students who have taken courses in either of the specified academic years. The placeholders in the WHERE clause represent the years of interest.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] OR YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the titles of courses offered in a specific building during a particular semester and year. The placeholders in the WHERE clause represent the building name, semester, and year for filtering the results.\",\n        \"virtual_table\": \"SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  [PLACEHOLDER-TYPE:STRING] AND semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT T3.name FROM takes AS T1 JOIN student AS T3 ON T1.ID = T3.ID WHERE T1.semester = 'Fall' AND T1.year = '2003'",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of students who are enrolled in courses offered by a specific academic department. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course titles along with the names of instructors who are teaching those courses in a specific academic year. The placeholders in the WHERE clause represent the academic year for which the data is being queried.\",\n        \"virtual_table\": \"SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] ORDER BY T1.title\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1427",
        "c_low": "SELECT T3.name FROM takes AS T2 JOIN student AS T3 ON T2.ID = T3.ID WHERE T2.semester = 'Fall' AND T2.year = '2003'",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of students who are enrolled in courses offered by a specific academic department. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of instructors who are advisors to students from a specific department. The placeholder in the WHERE clause represents the department's name, and the results are ordered by the total credits earned by the students.\",\n        \"virtual_table\": \"SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T3.tot_cred\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of instructors who teach a specific course identified by its title. The placeholders in the WHERE clause represent the course title that the user can specify.\",\n        \"virtual_table\": \"SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.ID = T2.ID WHERE T2.semester = 'Fall' AND T2.year = '2003'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of students who have taken courses in either of the specified academic years. The placeholders in the WHERE clause represent the years of interest.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] OR YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course titles along with the names of instructors who are teaching those courses in a specific academic year. The placeholders in the WHERE clause represent the academic year for which the data is being queried.\",\n        \"virtual_table\": \"SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] ORDER BY T1.title\"\n    }\n}\n",
        "c_high": "SELECT student.name FROM student JOIN takes ON student.ID = takes.ID WHERE takes.semester = 'Fall' AND takes.year = '2003';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies the unique identifiers of instructors who are teaching courses in a specific semester and year, excluding those who are teaching in another specified semester and year. The placeholders in the query represent the semester and year values for filtering the results.\",\n        \"virtual_table\": \"SELECT id FROM teaches WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT id FROM teaches WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT student.name \nFROM student \nJOIN takes ON student.ID = takes.ID \nJOIN section ON takes.course_id = section.course_id AND takes.sec_id = section.sec_id \nWHERE section.semester = 'Fall' AND section.year = '2003';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies the unique identifiers of instructors who are teaching courses in a specific semester and year, excluding those who are teaching in another specified semester and year. The placeholders in the query represent the semester and year values for filtering the results.\",\n        \"virtual_table\": \"SELECT id FROM teaches WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT id FROM teaches WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.ID = T2.ID WHERE T2.semester = 'Fall' AND T2.year = '2003'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of students who have taken courses in either of the specified academic years. The placeholders in the WHERE clause represent the years of interest.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] OR YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT T3.name FROM takes AS T2 JOIN student AS T3 ON T2.ID = T3.ID WHERE T2.semester = 'Fall' AND T2.year = '2003'",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of students who are enrolled in courses offered by a specific academic department. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course titles along with the names of instructors who are teaching those courses in a specific academic year. The placeholders in the WHERE clause represent the academic year for which the data is being queried.\",\n        \"virtual_table\": \"SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] ORDER BY T1.title\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names of instructors who are advisors to students from a specific department. The placeholder in the WHERE clause represents the department's name, and the results are ordered by the total credits earned by the students.\",\n        \"virtual_table\": \"SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T3.tot_cred\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1435",
        "c_low": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_ID = T2.ID JOIN student AS T3 ON T1.s_ID = T3.ID WHERE T3.dept_name = 'math' ORDER BY T3.tot_cred",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names of instructors who are advisors to students from a specific department. The placeholder in the WHERE clause represents the department's name, and the results are ordered by the total credits earned by the students.\",\n        \"virtual_table\": \"SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T3.tot_cred\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the identifiers of instructors who are acting as advisors for students enrolled in a specific department. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of instructors who teach a specific course identified by its title. The placeholders in the WHERE clause represent the course title that the user can specify.\",\n        \"virtual_table\": \"SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT T2.name \nFROM advisor AS T1 \nJOIN instructor AS T2 ON T1.i_ID = T2.ID \nJOIN student AS T3 ON T1.s_ID = T3.ID \nWHERE T3.dept_name = 'math' \nORDER BY T3.tot_cred;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholders in the WHERE clause represent the department's name.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholder in the WHERE clause represents the department's name.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names of instructors along with the course IDs of the courses they teach, specifically filtered by the department they belong to. The placeholder in the WHERE clause represents the department's name.\",\n        \"virtual_table\": \"SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT I.name \nFROM instructor AS I \nJOIN advisor AS A ON I.ID = A.i_ID \nJOIN student AS S ON A.s_ID = S.ID \nWHERE S.dept_name = 'math' \nORDER BY S.tot_cred;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of instructors who are advising more than a specified number of students. The placeholder in the HAVING clause represents the minimum number of students an instructor must advise to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT i.name \nFROM instructor i \nJOIN advisor a ON i.ID = a.i_ID \nJOIN student s ON a.s_ID = s.ID \nWHERE s.dept_name = 'math' \nORDER BY s.tot_cred;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of instructors from the 'instructor' table, ordered by their annual salary in descending order. The placeholder in the LIMIT clause represents the maximum number of instructors to be displayed.\",\n        \"virtual_table\": \"SELECT name FROM instructor ORDER BY salary DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of distinct instructors who are teaching courses during a specific semester and year. The placeholders in the WHERE clause represent the semester and year for which the count is being calculated.\",\n        \"virtual_table\": \"SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of distinct instructors who are teaching courses. The placeholder in the COUNT function allows for filtering based on specific criteria if needed.\",\n        \"virtual_table\": \"SELECT COUNT (DISTINCT id) FROM teaches\"\n    }\n}\n",
        "t_2": "SELECT instructor.name \nFROM instructor \nJOIN advisor ON instructor.ID = advisor.i_ID \nJOIN student ON advisor.s_ID = student.ID \nWHERE student.dept_name = 'math' \nORDER BY student.tot_cred;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the identifiers of instructors who are acting as advisors for students enrolled in a specific department. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of instructors who are advising more than a specified number of students. The placeholder in the HAVING clause represents the minimum number of students an instructor must advise to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names of instructors along with the course IDs of the courses they teach, specifically filtered by the department they belong to. The placeholder in the WHERE clause represents the department's name.\",\n        \"virtual_table\": \"SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_ID = T2.ID JOIN student AS T3 ON T1.s_ID = T3.ID WHERE T3.dept_name = 'math' ORDER BY T3.tot_cred",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names of instructors who are advisors to students from a specific department. The placeholder in the WHERE clause represents the department's name, and the results are ordered by the total credits earned by the students.\",\n        \"virtual_table\": \"SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T3.tot_cred\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholders in the WHERE clause represent the department's name.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholder in the WHERE clause represents the department's name.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1436",
        "c_low": "SELECT title FROM course WHERE course_id IN (SELECT prereq_id FROM prereq WHERE course_id = (SELECT course_id FROM course WHERE title = 'Mobile Computing'))",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the course IDs of courses that do not have any prerequisites. It is derived from the 'course' table by excluding those course IDs that appear in the 'prereq' table, indicating that they are not dependent on any other courses for enrollment.\",\n        \"virtual_table\": \"SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of instructors who teach a specific course identified by its title. The placeholders in the WHERE clause represent the course title that the user can specify.\",\n        \"virtual_table\": \"SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.prereq_id WHERE T2.course_id = (SELECT course_id FROM course WHERE title = 'Mobile Computing')",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the titles of courses offered in a specific building during a particular semester and year. The placeholders in the WHERE clause represent the building name, semester, and year for filtering the results.\",\n        \"virtual_table\": \"SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  [PLACEHOLDER-TYPE:STRING] AND semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course titles along with the names of instructors who are teaching those courses in a specific academic year. The placeholders in the WHERE clause represent the academic year for which the data is being queried.\",\n        \"virtual_table\": \"SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] ORDER BY T1.title\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the distinct names of students who have taken courses in either of the specified academic years. The placeholders in the WHERE clause represent the years of interest.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] OR YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.title = 'Mobile Computing')",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles of courses that are prerequisites for a specific course identified by its title. The placeholder in the WHERE clause represents the title of the course for which the prerequisites are being queried.\",\n        \"virtual_table\": \"SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of students who are enrolled in courses that have prerequisites, specifically for a course with a given title. The placeholder in the subquery represents the title of the course for which we want to find the students enrolled in its prerequisite courses.\",\n        \"virtual_table\": \"SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles of courses from the 'course' table that have a specific number of prerequisites. The placeholder in the HAVING clause represents the required count of prerequisite courses for each course.\",\n        \"virtual_table\": \"SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT title FROM course WHERE course_id IN (SELECT prereq_id FROM prereq WHERE course_id = (SELECT course_id FROM course WHERE title = 'Mobile Computing'))",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the titles of courses that are offered by two specific academic departments. The placeholders in the WHERE clauses represent the names of the departments being compared.\",\n        \"virtual_table\": \"SELECT title FROM course WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT title FROM course WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies the course IDs from the 'section' table that are offered in two different semesters of the same academic year. The placeholders in the WHERE clauses represent the specific semesters and the academic year.\",\n        \"virtual_table\": \"SELECT course_id FROM SECTION WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT course_id FROM SECTION WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles of courses from the 'course' table that have been offered more than a specified number of times. The placeholder in the HAVING clause represents the minimum count of offerings required to include a course title in the results.\",\n        \"virtual_table\": \"SELECT title FROM course GROUP BY title HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.title = 'Mobile Computing')",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles of courses that are prerequisites for a specific course identified by its title. The placeholder in the WHERE clause represents the title of the course for which the prerequisites are being queried.\",\n        \"virtual_table\": \"SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the titles of courses from the 'course' table that have a specific number of prerequisites. The placeholder in the HAVING clause represents the required count of prerequisite courses for each course.\",\n        \"virtual_table\": \"SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of course titles and their corresponding credit values from the 'course' table, specifically for courses that have more than a specified number of prerequisites. The placeholder in the HAVING clause represents the minimum count of prerequisites required for the courses listed.\",\n        \"virtual_table\": \"SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT T3.title FROM course AS T3 JOIN prereq AS T4 ON T3.course_id = T4.prereq_id WHERE T4.course_id = (SELECT course_id FROM course WHERE title = 'Mobile Computing')",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of students who are enrolled in courses that have prerequisites, specifically for a course with a given title. The placeholder in the subquery represents the title of the course for which we want to find the students enrolled in its prerequisite courses.\",\n        \"virtual_table\": \"SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course titles along with the names of instructors who are teaching those courses in a specific academic year. The placeholders in the WHERE clause represent the academic year for which the data is being queried.\",\n        \"virtual_table\": \"SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] ORDER BY T1.title\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of instructors who teach a specific course identified by its title. The placeholders in the WHERE clause represent the course title that the user can specify.\",\n        \"virtual_table\": \"SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1437",
        "c_low": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.prereq_id WHERE T2.course_id = (SELECT course_id FROM course WHERE title = 'Mobile Computing')",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the course IDs of courses that do not have any prerequisites. It is derived from the 'course' table by excluding those course IDs that appear in the 'prereq' table, indicating that they are not dependent on any other courses for enrollment.\",\n        \"virtual_table\": \"SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of instructors who teach a specific course identified by its title. The placeholders in the WHERE clause represent the course title that the user can specify.\",\n        \"virtual_table\": \"SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.prereq_id WHERE T2.course_id = (SELECT course_id FROM course WHERE title = 'Mobile Computing')",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the titles of courses offered in a specific building during a particular semester and year. The placeholders in the WHERE clause represent the building name, semester, and year for filtering the results.\",\n        \"virtual_table\": \"SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  [PLACEHOLDER-TYPE:STRING] AND semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course titles along with the names of instructors who are teaching those courses in a specific academic year. The placeholders in the WHERE clause represent the academic year for which the data is being queried.\",\n        \"virtual_table\": \"SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] ORDER BY T1.title\"\n    }\n}\n",
        "c_high": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.title = 'Mobile Computing')",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles of courses that are prerequisites for a specific course identified by its title. The placeholder in the WHERE clause represents the title of the course for which the prerequisites are being queried.\",\n        \"virtual_table\": \"SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of students who are enrolled in courses that have prerequisites, specifically for a course with a given title. The placeholder in the subquery represents the title of the course for which we want to find the students enrolled in its prerequisite courses.\",\n        \"virtual_table\": \"SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles of courses from the 'course' table that have a specific number of prerequisites. The placeholder in the HAVING clause represents the required count of prerequisite courses for each course.\",\n        \"virtual_table\": \"SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT title FROM course WHERE course_id IN (SELECT prereq_id FROM prereq WHERE course_id = (SELECT course_id FROM course WHERE title = 'Mobile Computing'))",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the titles of courses that are offered by two specific academic departments. The placeholders in the WHERE clauses represent the names of the departments being compared.\",\n        \"virtual_table\": \"SELECT title FROM course WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT title FROM course WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the titles of courses from the 'course' table that have been offered more than a specified number of times. The placeholder in the HAVING clause represents the minimum count of offerings required to include a course title in the results.\",\n        \"virtual_table\": \"SELECT title FROM course GROUP BY title HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.title = 'Mobile Computing')",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles of courses that are prerequisites for a specific course identified by its title. The placeholder in the WHERE clause represents the title of the course for which the prerequisites are being queried.\",\n        \"virtual_table\": \"SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the titles of courses from the 'course' table that have a specific number of prerequisites. The placeholder in the HAVING clause represents the required count of prerequisite courses for each course.\",\n        \"virtual_table\": \"SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of course titles and their corresponding credit values from the 'course' table, specifically for courses that have more than a specified number of prerequisites. The placeholder in the HAVING clause represents the minimum count of prerequisites required for the courses listed.\",\n        \"virtual_table\": \"SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id = T4.course_id WHERE T3.title = 'Mobile Computing'",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of students who are enrolled in courses that have prerequisites, specifically for a course with a given title. The placeholder in the subquery represents the title of the course for which we want to find the students enrolled in its prerequisite courses.\",\n        \"virtual_table\": \"SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course titles along with the names of instructors who are teaching those courses in a specific academic year. The placeholders in the WHERE clause represent the academic year for which the data is being queried.\",\n        \"virtual_table\": \"SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] ORDER BY T1.title\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of instructors who teach a specific course identified by its title. The placeholders in the WHERE clause represent the course title that the user can specify.\",\n        \"virtual_table\": \"SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1438",
        "c_low": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_ID = T2.ID JOIN student AS T3 ON T1.s_ID = T3.ID WHERE T3.tot_cred = (SELECT MAX(tot_cred) FROM student)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names of instructors who are advisors to students from a specific department. The placeholder in the WHERE clause represents the department's name, and the results are ordered by the total credits earned by the students.\",\n        \"virtual_table\": \"SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T3.tot_cred\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the identifiers of instructors who are acting as advisors for students enrolled in a specific department. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of distinct student identifiers from the 'advisor' table, which indicates the number of unique students being advised.\",\n        \"virtual_table\": \"SELECT count(DISTINCT s_id) FROM advisor\"\n    }\n}\n",
        "c_mid": "SELECT T2.name \nFROM advisor AS T1 \nJOIN instructor AS T2 ON T1.i_ID = T2.ID \nJOIN student AS T3 ON T1.s_ID = T3.ID \nWHERE T3.ID = (SELECT ID FROM student ORDER BY tot_cred DESC LIMIT 1)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholders in the WHERE clause represent the department's name.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholder in the WHERE clause represents the department's name.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT instructor.name \nFROM instructor \nJOIN advisor ON instructor.ID = advisor.i_ID \nJOIN student ON advisor.s_ID = student.ID \nWHERE student.tot_cred = (SELECT MAX(tot_cred) FROM student)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of students who have more than a specified number of advisors. The query joins the 'student' table with the 'advisor' table on the student ID, groups the results by student ID, and filters the groups to include only those with a count of advisors greater than a placeholder value.\",\n        \"virtual_table\": \"SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of instructors who are advising more than a specified number of students. The placeholder in the HAVING clause represents the minimum number of students an instructor must advise to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT i.name \nFROM instructor i \nJOIN advisor a ON i.ID = a.i_ID \nJOIN student s ON a.s_ID = s.ID \nWHERE s.tot_cred = (SELECT MAX(tot_cred) FROM student)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of distinct student identifiers from the 'advisor' table, which indicates the number of unique students being advised.\",\n        \"virtual_table\": \"SELECT count(DISTINCT s_id) FROM advisor\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of instructors from the 'instructor' table, ordered by their annual salary in descending order. The placeholder in the LIMIT clause represents the maximum number of instructors to be displayed.\",\n        \"virtual_table\": \"SELECT name FROM instructor ORDER BY salary DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT i.name \nFROM instructor AS i \nJOIN advisor AS a ON i.ID = a.i_ID \nJOIN student AS s ON a.s_ID = s.ID \nWHERE s.tot_cred = (SELECT MAX(tot_cred) FROM student)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the identifiers of instructors who are acting as advisors for students enrolled in a specific department. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of students who have more than a specified number of advisors. The query joins the 'student' table with the 'advisor' table on the student ID, groups the results by student ID, and filters the groups to include only those with a count of advisors greater than a placeholder value.\",\n        \"virtual_table\": \"SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of instructors who are advising more than a specified number of students. The placeholder in the HAVING clause represents the minimum number of students an instructor must advise to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_ID = T2.ID JOIN student AS T3 ON T1.s_ID = T3.ID WHERE T3.ID = (SELECT ID FROM student ORDER BY tot_cred DESC LIMIT 1)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names of instructors who are advisors to students from a specific department. The placeholder in the WHERE clause represents the department's name, and the results are ordered by the total credits earned by the students.\",\n        \"virtual_table\": \"SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T3.tot_cred\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholders in the WHERE clause represent the department's name.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholder in the WHERE clause represents the department's name.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1439",
        "c_low": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_ID = T2.ID JOIN student AS T3 ON T1.s_ID = T3.ID ORDER BY T3.tot_cred DESC LIMIT 1",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names of instructors who are advisors to students from a specific department. The placeholder in the WHERE clause represents the department's name, and the results are ordered by the total credits earned by the students.\",\n        \"virtual_table\": \"SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T3.tot_cred\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the identifiers of instructors who are acting as advisors for students enrolled in a specific department. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of distinct student identifiers from the 'advisor' table, which indicates the number of unique students being advised.\",\n        \"virtual_table\": \"SELECT count(DISTINCT s_id) FROM advisor\"\n    }\n}\n",
        "c_mid": "SELECT T2.name\nFROM advisor AS T1\nJOIN instructor AS T2 ON T1.i_ID = T2.ID\nJOIN student AS T3 ON T1.s_ID = T3.ID\nWHERE T3.tot_cred = (SELECT MAX(tot_cred) FROM student);",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholders in the WHERE clause represent the department's name.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of distinct instructors who are teaching courses during a specific semester and year. The placeholders in the WHERE clause represent the semester and year for which the count is being calculated.\",\n        \"virtual_table\": \"SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholder in the WHERE clause represents the department's name.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT instructor.name \nFROM instructor \nJOIN advisor ON instructor.ID = advisor.i_ID \nJOIN student ON advisor.s_ID = student.ID \nWHERE student.tot_cred = (SELECT MAX(tot_cred) FROM student)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of instructors who are advising more than a specified number of students. The placeholder in the HAVING clause represents the minimum number of students an instructor must advise to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of students who have more than a specified number of advisors. The query joins the 'student' table with the 'advisor' table on the student ID, groups the results by student ID, and filters the groups to include only those with a count of advisors greater than a placeholder value.\",\n        \"virtual_table\": \"SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT instructor.name \nFROM instructor \nJOIN advisor ON instructor.ID = advisor.i_ID \nJOIN student ON advisor.s_ID = student.ID \nORDER BY student.tot_cred DESC \nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of distinct instructors who are teaching courses during a specific semester and year. The placeholders in the WHERE clause represent the semester and year for which the count is being calculated.\",\n        \"virtual_table\": \"SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of distinct student identifiers from the 'advisor' table, which indicates the number of unique students being advised.\",\n        \"virtual_table\": \"SELECT count(DISTINCT s_id) FROM advisor\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of distinct instructors who are teaching courses. The placeholder in the COUNT function allows for filtering based on specific criteria if needed.\",\n        \"virtual_table\": \"SELECT COUNT (DISTINCT id) FROM teaches\"\n    }\n}\n",
        "t_2": "SELECT instructor.name \nFROM instructor \nJOIN advisor ON instructor.ID = advisor.i_ID \nJOIN student ON advisor.s_ID = student.ID \nWHERE student.tot_cred = (SELECT MAX(tot_cred) FROM student)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of instructors who are advising more than a specified number of students. The placeholder in the HAVING clause represents the minimum number of students an instructor must advise to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the identifiers of instructors who are acting as advisors for students enrolled in a specific department. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of students who have more than a specified number of advisors. The query joins the 'student' table with the 'advisor' table on the student ID, groups the results by student ID, and filters the groups to include only those with a count of advisors greater than a placeholder value.\",\n        \"virtual_table\": \"SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_ID = T2.ID JOIN student AS T3 ON T1.s_ID = T3.ID WHERE T3.tot_cred = (SELECT MAX(tot_cred) FROM student)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names of instructors who are advisors to students from a specific department. The placeholder in the WHERE clause represents the department's name, and the results are ordered by the total credits earned by the students.\",\n        \"virtual_table\": \"SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T3.tot_cred\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholders in the WHERE clause represent the department's name.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholder in the WHERE clause represents the department's name.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1448",
        "c_low": "SELECT COUNT(ID) AS instructor_count, AVG(salary) AS average_salary \nFROM instructor \nWHERE dept_name = (SELECT dept_name \n                   FROM department \n                   ORDER BY budget DESC \n                   LIMIT 1);",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of instructors from the 'instructor' table, ordered by their annual salary in descending order. The placeholder in the LIMIT clause represents the maximum number of instructors to be displayed.\",\n        \"virtual_table\": \"SELECT name FROM instructor ORDER BY salary DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of instructors who are advisors to students from a specific department. The placeholder in the WHERE clause represents the department's name, and the results are ordered by the total credits earned by the students.\",\n        \"virtual_table\": \"SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T3.tot_cred\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total budget allocated to specific academic departments from the 'department' table. The placeholders in the WHERE clause represent the names of the departments for which the budget is being summed.\",\n        \"virtual_table\": \"SELECT sum(budget) FROM department WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING] OR dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT COUNT(ID) AS number_of_instructors, AVG(salary) AS average_salary \nFROM instructor \nWHERE dept_name = (SELECT dept_name FROM department ORDER BY budget DESC LIMIT 1);",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of instructors from the 'instructor' table who earn a salary greater than the maximum salary of instructors in a specified department. The placeholder in the subquery represents the department's name.\",\n        \"virtual_table\": \"SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholders in the WHERE clause represent the department's name.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of instructors from the 'instructor' table who earn a salary greater than the minimum salary of instructors in a specified department. The placeholder in the subquery represents the department's name.\",\n        \"virtual_table\": \"SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "c_high": "SELECT COUNT(ID) AS number_of_instructors, AVG(salary) AS average_salary \nFROM instructor \nWHERE dept_name = (SELECT dept_name FROM department ORDER BY budget DESC LIMIT 1);",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors from the 'instructor' table who earn less than the average salary of instructors in a specified department. The placeholder in the subquery represents the department's name.\",\n        \"virtual_table\": \"SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of academic departments along with their budgets from the 'department' table, specifically filtering for those departments whose budgets exceed the average budget of all departments. The placeholder in the WHERE clause represents the average budget value.\",\n        \"virtual_table\": \"SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names of academic departments and their corresponding buildings from the 'department' table, specifically for those departments whose budget exceeds the average budget of all departments. The placeholder in the WHERE clause represents the budget threshold for comparison.\",\n        \"virtual_table\": \"SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)\"\n    }\n}\n",
        "t_1": "SELECT COUNT(ID) AS number_of_instructors, AVG(salary) AS average_salary \nFROM instructor \nWHERE dept_name = (SELECT dept_name FROM department ORDER BY budget DESC LIMIT 1);",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors from the 'instructor' table who earn less than the average salary of instructors in a specified department. The placeholder in the subquery represents the department's name.\",\n        \"virtual_table\": \"SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of instructors from the 'instructor' table who earn a salary greater than the maximum salary of instructors in a specified department. The placeholder in the subquery represents the department's name.\",\n        \"virtual_table\": \"SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of instructors from the 'instructor' table who earn a salary greater than the minimum salary of instructors in a specified department. The placeholder in the subquery represents the department's name.\",\n        \"virtual_table\": \"SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "t_2": "SELECT COUNT(ID) AS instructor_count, AVG(salary) AS average_salary \nFROM instructor \nWHERE dept_name = (SELECT dept_name FROM department ORDER BY budget DESC LIMIT 1);",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the identifiers of instructors who are acting as advisors for students enrolled in a specific department. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of instructors along with the course IDs of the courses they teach, specifically filtered by the department they belong to. The placeholder in the WHERE clause represents the department's name.\",\n        \"virtual_table\": \"SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(ID) AS instructor_count, AVG(salary) AS average_salary \nFROM instructor \nWHERE dept_name = (SELECT dept_name FROM department ORDER BY budget DESC LIMIT 1);",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholders in the WHERE clause represent the department's name.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholder in the WHERE clause represents the department's name.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names of instructors who are advisors to students from a specific department. The placeholder in the WHERE clause represents the department's name, and the results are ordered by the total credits earned by the students.\",\n        \"virtual_table\": \"SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T3.tot_cred\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1449",
        "c_low": "SELECT COUNT(ID) AS instructor_count, AVG(salary) AS average_salary\nFROM instructor\nWHERE dept_name = (\n    SELECT dept_name\n    FROM department\n    ORDER BY budget DESC\n    LIMIT 1\n);",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of instructors from the 'instructor' table, ordered by their annual salary in descending order. The placeholder in the LIMIT clause represents the maximum number of instructors to be displayed.\",\n        \"virtual_table\": \"SELECT name FROM instructor ORDER BY salary DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of instructors who are advisors to students from a specific department. The placeholder in the WHERE clause represents the department's name, and the results are ordered by the total credits earned by the students.\",\n        \"virtual_table\": \"SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T3.tot_cred\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the identifiers of instructors who are acting as advisors for students enrolled in a specific department. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT COUNT(*) AS instructor_count, AVG(salary) AS average_salary \nFROM instructor \nWHERE dept_name = (SELECT dept_name \n                   FROM department \n                   ORDER BY budget DESC \n                   LIMIT 1);",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of instructors from the 'instructor' table who earn a salary greater than the maximum salary of instructors in a specified department. The placeholder in the subquery represents the department's name.\",\n        \"virtual_table\": \"SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholders in the WHERE clause represent the department's name.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholder in the WHERE clause represents the department's name.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT COUNT(*) AS instructor_count, AVG(salary) AS average_salary \nFROM instructor \nWHERE dept_name = (SELECT dept_name \n                   FROM department \n                   ORDER BY budget DESC \n                   LIMIT 1);",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors from the 'instructor' table who earn less than the average salary of instructors in a specified department. The placeholder in the subquery represents the department's name.\",\n        \"virtual_table\": \"SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of academic departments along with their budgets from the 'department' table, specifically filtering for those departments whose budgets exceed the average budget of all departments. The placeholder in the WHERE clause represents the average budget value.\",\n        \"virtual_table\": \"SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names of academic departments and their corresponding buildings from the 'department' table, specifically for those departments whose budget exceeds the average budget of all departments. The placeholder in the WHERE clause represents the budget threshold for comparison.\",\n        \"virtual_table\": \"SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)\"\n    }\n}\n",
        "t_1": "SELECT COUNT(*) AS instructor_count, AVG(salary) AS average_salary\nFROM instructor\nWHERE dept_name = (SELECT dept_name FROM department ORDER BY budget DESC LIMIT 1);",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors from the 'instructor' table who earn less than the average salary of instructors in a specified department. The placeholder in the subquery represents the department's name.\",\n        \"virtual_table\": \"SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of instructors from the 'instructor' table who earn a salary greater than the maximum salary of instructors in a specified department. The placeholder in the subquery represents the department's name.\",\n        \"virtual_table\": \"SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of instructors from the 'instructor' table who earn a salary greater than the minimum salary of instructors in a specified department. The placeholder in the subquery represents the department's name.\",\n        \"virtual_table\": \"SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "t_2": "SELECT COUNT(i.ID) AS instructor_count, AVG(i.salary) AS average_salary\nFROM instructor AS i\nJOIN department AS d ON i.dept_name = d.dept_name\nWHERE d.budget = (SELECT MAX(budget) FROM department);",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the identifiers of instructors who are acting as advisors for students enrolled in a specific department. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of instructors along with the course IDs of the courses they teach, specifically filtered by the department they belong to. The placeholder in the WHERE clause represents the department's name.\",\n        \"virtual_table\": \"SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(*) AS instructor_count, AVG(salary) AS average_salary \nFROM instructor \nWHERE dept_name = (SELECT dept_name \n                   FROM department \n                   ORDER BY budget DESC \n                   LIMIT 1);",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholders in the WHERE clause represent the department's name.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholder in the WHERE clause represents the department's name.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names of instructors who are advisors to students from a specific department. The placeholder in the WHERE clause represents the department's name, and the results are ordered by the total credits earned by the students.\",\n        \"virtual_table\": \"SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T3.tot_cred\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1452",
        "c_low": "SELECT name FROM student WHERE ID NOT IN (SELECT T3.ID FROM course AS T1 JOIN takes AS T2 ON T1.course_id = T2.course_id JOIN student AS T3 ON T2.ID = T3.ID WHERE T1.dept_name = 'Biology')",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of students who are enrolled in courses offered by a specific academic department. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT name FROM student WHERE ID NOT IN (SELECT DISTINCT T1.ID FROM student AS T1 JOIN takes AS T2 ON T1.ID = T2.ID JOIN course AS C ON T2.course_id = C.course_id WHERE C.dept_name = 'Biology')",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of students who have taken courses in either of the specified academic years. The placeholders in the WHERE clause represent the years of interest.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] OR YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT name FROM student WHERE dept_name != 'Biology' AND ID NOT IN (SELECT ID FROM takes WHERE course_id IN (SELECT course_id FROM course WHERE dept_name = 'Biology'));",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT name FROM student WHERE dept_name != 'Biology' AND ID NOT IN (SELECT ID FROM takes WHERE course_id IN (SELECT course_id FROM course WHERE dept_name = 'Biology'));",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT name FROM student WHERE ID NOT IN (SELECT DISTINCT T1.ID FROM student AS T1 JOIN takes AS T2 ON T1.ID = T2.ID JOIN course AS C ON T2.course_id = C.course_id WHERE C.dept_name = 'Biology')",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of students who have taken courses in either of the specified academic years. The placeholders in the WHERE clause represent the years of interest.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] OR YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT name FROM student WHERE ID NOT IN (SELECT T3.ID FROM course AS T1 JOIN takes AS T2 ON T1.course_id = T2.course_id JOIN student AS T3 ON T2.ID = T3.ID WHERE T1.dept_name = 'Biology')",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of students who are enrolled in courses offered by a specific academic department. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1453",
        "c_low": "SELECT name FROM student WHERE ID NOT IN (SELECT T2.ID FROM course AS T1 JOIN takes AS T2 ON T1.course_id = T2.course_id WHERE T1.title LIKE '%Biology%')",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the course IDs of courses that do not have any prerequisites. It is derived from the 'course' table by excluding those course IDs that appear in the 'prereq' table, indicating that they are not dependent on any other courses for enrollment.\",\n        \"virtual_table\": \"SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of students who are enrolled in courses offered by a specific academic department. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT name FROM student WHERE ID NOT IN (SELECT ID FROM takes WHERE course_id IN (SELECT course_id FROM course WHERE title LIKE '%Biology%'));",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of students who have taken courses in either of the specified academic years. The placeholders in the WHERE clause represent the years of interest.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] OR YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT name FROM student WHERE ID NOT IN (SELECT ID FROM takes WHERE course_id IN (SELECT course_id FROM course WHERE title LIKE '%Biology%'));",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT name FROM student WHERE ID NOT IN (SELECT ID FROM takes WHERE course_id IN (SELECT course_id FROM course WHERE title LIKE '%Biology%'));",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT name FROM student WHERE ID NOT IN (SELECT ID FROM takes WHERE course_id IN (SELECT course_id FROM course WHERE title LIKE '%Biology%'));",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of students who have taken courses in either of the specified academic years. The placeholders in the WHERE clause represent the years of interest.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] OR YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the course IDs of courses that do not have any prerequisites. It is derived from the 'course' table by excluding those course IDs that appear in the 'prereq' table, indicating that they are not dependent on any other courses for enrollment.\",\n        \"virtual_table\": \"SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq\"\n    }\n}\n",
        "t_3+": "SELECT name FROM student WHERE ID NOT IN (SELECT ID FROM takes WHERE course_id IN (SELECT course_id FROM course WHERE title LIKE '%Biology%'));",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of students who are enrolled in courses offered by a specific academic department. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1454",
        "c_low": "SELECT d.dept_name, COUNT(DISTINCT s.ID) AS total_students, COUNT(DISTINCT i.ID) AS total_instructors\nFROM department d\nLEFT JOIN student s ON d.dept_name = s.dept_name\nLEFT JOIN instructor i ON d.dept_name = i.dept_name\nGROUP BY d.dept_name;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of distinct instructors who are teaching courses. The placeholder in the COUNT function allows for filtering based on specific criteria if needed.\",\n        \"virtual_table\": \"SELECT COUNT (DISTINCT id) FROM teaches\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of instructors who are advisors to students from a specific department. The placeholder in the WHERE clause represents the department's name, and the results are ordered by the total credits earned by the students.\",\n        \"virtual_table\": \"SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T3.tot_cred\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of academic departments from the 'student' table, grouped by department name. The results are ordered by the number of students in each department in descending order, and the number of departments returned is limited by a specified placeholder value.\",\n        \"virtual_table\": \"SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT dept_name, COUNT(DISTINCT s.ID) AS total_students, COUNT(DISTINCT i.ID) AS total_instructors\nFROM department d\nLEFT JOIN student s ON d.dept_name = s.dept_name\nLEFT JOIN instructor i ON d.dept_name = i.dept_name\nGROUP BY d.dept_name;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of students grouped by their respective academic departments. The placeholder in the SELECT statement represents the department's name, allowing for an aggregation of student counts per department.\",\n        \"virtual_table\": \"SELECT count(*) ,  dept_name FROM student GROUP BY dept_name\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of distinct instructors who are teaching courses during a specific semester and year. The placeholders in the WHERE clause represent the semester and year for which the count is being calculated.\",\n        \"virtual_table\": \"SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholders in the WHERE clause represent the department's name.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT d.dept_name, COUNT(DISTINCT s.ID) AS total_students, COUNT(DISTINCT i.ID) AS total_instructors\nFROM department d\nLEFT JOIN student s ON d.dept_name = s.dept_name\nLEFT JOIN instructor i ON d.dept_name = i.dept_name\nGROUP BY d.dept_name;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT s.dept_name, COUNT(s.ID) AS total_students, COUNT(DISTINCT t.ID) AS total_instructors\nFROM student s\nLEFT JOIN teaches t ON s.dept_name = (SELECT dept_name FROM instructor WHERE instructor.ID = t.ID)\nGROUP BY s.dept_name;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of students grouped by their respective academic departments. The placeholder in the SELECT statement represents the department's name, allowing for an aggregation of student counts per department.\",\n        \"virtual_table\": \"SELECT count(*) ,  dept_name FROM student GROUP BY dept_name\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of distinct instructors who are teaching courses during a specific semester and year. The placeholders in the WHERE clause represent the semester and year for which the count is being calculated.\",\n        \"virtual_table\": \"SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of distinct instructors who are teaching courses. The placeholder in the COUNT function allows for filtering based on specific criteria if needed.\",\n        \"virtual_table\": \"SELECT COUNT (DISTINCT id) FROM teaches\"\n    }\n}\n",
        "t_2": "SELECT d.dept_name, COUNT(DISTINCT s.ID) AS total_students, COUNT(DISTINCT i.ID) AS total_instructors\nFROM department d\nLEFT JOIN student s ON d.dept_name = s.dept_name\nLEFT JOIN instructor i ON d.dept_name = i.dept_name\nGROUP BY d.dept_name;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names of instructors along with the course IDs of the courses they teach, specifically filtered by the department they belong to. The placeholder in the WHERE clause represents the department's name.\",\n        \"virtual_table\": \"SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the identifiers of instructors who are acting as advisors for students enrolled in a specific department. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT d.dept_name, COUNT(DISTINCT s.ID) AS total_students, COUNT(DISTINCT i.ID) AS total_instructors\nFROM department d\nLEFT JOIN student s ON d.dept_name = s.dept_name\nLEFT JOIN instructor i ON d.dept_name = i.dept_name\nGROUP BY d.dept_name;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names of instructors who are advisors to students from a specific department. The placeholder in the WHERE clause represents the department's name, and the results are ordered by the total credits earned by the students.\",\n        \"virtual_table\": \"SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T3.tot_cred\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholders in the WHERE clause represent the department's name.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholder in the WHERE clause represents the department's name.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1455",
        "c_low": "SELECT dept_name, COUNT(DISTINCT student.ID) AS student_count, COUNT(DISTINCT instructor.ID) AS instructor_count\nFROM department\nLEFT JOIN student ON department.dept_name = student.dept_name\nLEFT JOIN instructor ON department.dept_name = instructor.dept_name\nGROUP BY department.dept_name;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names of instructors who are advisors to students from a specific department. The placeholder in the WHERE clause represents the department's name, and the results are ordered by the total credits earned by the students.\",\n        \"virtual_table\": \"SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T3.tot_cred\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of students who are enrolled in courses offered by a specific academic department. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the identifiers of instructors who are acting as advisors for students enrolled in a specific department. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT dept_name, COUNT(DISTINCT student.ID) AS student_count, COUNT(DISTINCT instructor.ID) AS instructor_count\nFROM department\nLEFT JOIN student ON department.dept_name = student.dept_name\nLEFT JOIN instructor ON department.dept_name = instructor.dept_name\nGROUP BY dept_name;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholders in the WHERE clause represent the department's name.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of instructors along with the course IDs of the courses they teach, specifically filtered by the department they belong to. The placeholder in the WHERE clause represents the department's name.\",\n        \"virtual_table\": \"SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of distinct instructors who are teaching courses during a specific semester and year. The placeholders in the WHERE clause represent the semester and year for which the count is being calculated.\",\n        \"virtual_table\": \"SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT d.dept_name, COUNT(DISTINCT s.ID) AS student_count, COUNT(DISTINCT i.ID) AS instructor_count\nFROM department d\nLEFT JOIN student s ON d.dept_name = s.dept_name\nLEFT JOIN instructor i ON d.dept_name = i.dept_name\nGROUP BY d.dept_name;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the titles of courses that are offered by two specific academic departments. The placeholders in the WHERE clauses represent the names of the departments being compared.\",\n        \"virtual_table\": \"SELECT title FROM course WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT title FROM course WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the buildings and room numbers where courses from a specific department are held, along with the semester and year of those courses. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.title\"\n    }\n}\n",
        "t_1": "SELECT d.dept_name, COUNT(DISTINCT i.ID) AS instructor_count, COUNT(s.ID) AS student_count\nFROM department d\nLEFT JOIN instructor i ON d.dept_name = i.dept_name\nLEFT JOIN student s ON d.dept_name = s.dept_name\nGROUP BY d.dept_name;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of distinct instructors who are teaching courses during a specific semester and year. The placeholders in the WHERE clause represent the semester and year for which the count is being calculated.\",\n        \"virtual_table\": \"SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of students grouped by their respective academic departments. The placeholder in the SELECT statement represents the department's name, allowing for an aggregation of student counts per department.\",\n        \"virtual_table\": \"SELECT count(*) ,  dept_name FROM student GROUP BY dept_name\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of academic departments from the 'student' table, grouped by department name. The results are ordered by the number of students in each department in descending order, and the number of departments returned is limited by a specified placeholder value.\",\n        \"virtual_table\": \"SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT dept_name, COUNT(DISTINCT student.ID) AS student_count, COUNT(DISTINCT instructor.ID) AS instructor_count\nFROM department\nLEFT JOIN student ON department.dept_name = student.dept_name\nLEFT JOIN instructor ON department.dept_name = instructor.dept_name\nGROUP BY department.dept_name;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names of instructors along with the course IDs of the courses they teach, specifically filtered by the department they belong to. The placeholder in the WHERE clause represents the department's name.\",\n        \"virtual_table\": \"SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the identifiers of instructors who are acting as advisors for students enrolled in a specific department. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides information about the buildings and room numbers where courses from a specific department are held, along with the semester and year of those courses. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.title\"\n    }\n}\n",
        "t_3+": "SELECT dept_name, COUNT(DISTINCT student.ID) AS student_count, COUNT(DISTINCT instructor.ID) AS instructor_count\nFROM department\nLEFT JOIN student ON department.dept_name = student.dept_name\nLEFT JOIN instructor ON department.dept_name = instructor.dept_name\nGROUP BY department.dept_name;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names of instructors who are advisors to students from a specific department. The placeholder in the WHERE clause represents the department's name, and the results are ordered by the total credits earned by the students.\",\n        \"virtual_table\": \"SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T3.tot_cred\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholders in the WHERE clause represent the department's name.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholder in the WHERE clause represents the department's name.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1458",
        "c_low": "SELECT name, salary FROM instructor WHERE salary < (SELECT AVG(salary) FROM instructor WHERE dept_name = 'Physics')",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of instructors from the 'instructor' table, ordered by their annual salary in descending order. The placeholder in the LIMIT clause represents the maximum number of instructors to be displayed.\",\n        \"virtual_table\": \"SELECT name FROM instructor ORDER BY salary DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of instructors who are advisors to students from a specific department. The placeholder in the WHERE clause represents the department's name, and the results are ordered by the total credits earned by the students.\",\n        \"virtual_table\": \"SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T3.tot_cred\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the identifiers of instructors who are acting as advisors for students enrolled in a specific department. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT name, salary FROM instructor WHERE salary < (SELECT AVG(salary) FROM instructor WHERE dept_name = 'Physics')",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of instructors from the 'instructor' table who earn a salary greater than the minimum salary of instructors in a specified department. The placeholder in the subquery represents the department's name.\",\n        \"virtual_table\": \"SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholders in the WHERE clause represent the department's name.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholder in the WHERE clause represents the department's name.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT name, salary FROM instructor WHERE salary < (SELECT avg(salary) FROM instructor WHERE dept_name = 'Physics')",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors from the 'instructor' table who earn less than the average salary of instructors in a specified department. The placeholder in the subquery represents the department's name.\",\n        \"virtual_table\": \"SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of academic departments along with their budgets from the 'department' table, specifically filtering for those departments whose budgets exceed the average budget of all departments. The placeholder in the WHERE clause represents the average budget value.\",\n        \"virtual_table\": \"SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the unique identifiers of instructors who are teaching courses in a specific semester and year, excluding those who are teaching in another specified semester and year. The placeholders in the query represent the semester and year values for filtering the results.\",\n        \"virtual_table\": \"SELECT id FROM teaches WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT id FROM teaches WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT name, salary FROM instructor WHERE salary < (SELECT avg(salary) FROM instructor WHERE dept_name = 'Physics')",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors from the 'instructor' table who earn less than the average salary of instructors in a specified department. The placeholder in the subquery represents the department's name.\",\n        \"virtual_table\": \"SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of instructors from the 'instructor' table who earn a salary greater than the minimum salary of instructors in a specified department. The placeholder in the subquery represents the department's name.\",\n        \"virtual_table\": \"SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of instructors from the 'instructor' table, ordered by their annual salary in descending order. The placeholder in the LIMIT clause represents the maximum number of instructors to be displayed.\",\n        \"virtual_table\": \"SELECT name FROM instructor ORDER BY salary DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT name, salary FROM instructor WHERE salary < (SELECT AVG(salary) FROM instructor WHERE dept_name = 'Physics')",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names of instructors along with the course IDs of the courses they teach, specifically filtered by the department they belong to. The placeholder in the WHERE clause represents the department's name.\",\n        \"virtual_table\": \"SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the identifiers of instructors who are acting as advisors for students enrolled in a specific department. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of instructors from the 'instructor' table who are not currently teaching any courses. The subquery identifies the IDs of instructors who are teaching, and the main query filters out those IDs to return only the names of instructors who are available for teaching.\",\n        \"virtual_table\": \"SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)\"\n    }\n}\n",
        "t_3+": "SELECT name, salary FROM instructor WHERE dept_name = 'Physics' AND salary < (SELECT AVG(salary) FROM instructor WHERE dept_name = 'Physics')",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholders in the WHERE clause represent the department's name.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholder in the WHERE clause represents the department's name.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names of instructors who are advisors to students from a specific department. The placeholder in the WHERE clause represents the department's name, and the results are ordered by the total credits earned by the students.\",\n        \"virtual_table\": \"SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T3.tot_cred\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1461",
        "c_low": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id = T2.course_id JOIN student AS T3 ON T2.ID = T3.ID WHERE T1.title LIKE '%Statistics%';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of students who are enrolled in courses offered by a specific academic department. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT student.name FROM student JOIN takes ON student.ID = takes.ID JOIN course ON takes.course_id = course.course_id WHERE course.title = 'Statistics';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of students who have taken courses in either of the specified academic years. The placeholders in the WHERE clause represent the years of interest.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] OR YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT student.name \nFROM student \nJOIN takes ON student.ID = takes.ID \nJOIN course ON takes.course_id = course.course_id \nWHERE course.title LIKE '%Statistics%';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT student.name \nFROM student \nJOIN takes ON student.ID = takes.ID \nJOIN course ON takes.course_id = course.course_id \nWHERE course.title LIKE '%Statistics%';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT DISTINCT student.name FROM student JOIN takes ON student.ID = takes.ID JOIN course ON takes.course_id = course.course_id WHERE course.title = 'Statistics';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of students who have taken courses in either of the specified academic years. The placeholders in the WHERE clause represent the years of interest.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] OR YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id = T2.course_id JOIN student AS T3 ON T2.ID = T3.ID WHERE T1.title LIKE '%Statistics%';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of students who are enrolled in courses offered by a specific academic department. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1464",
        "c_low": "SELECT name FROM instructor WHERE dept_name = 'computer science'",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names of instructors who are advisors to students from a specific department. The placeholder in the WHERE clause represents the department's name, and the results are ordered by the total credits earned by the students.\",\n        \"virtual_table\": \"SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T3.tot_cred\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the identifiers of instructors who are acting as advisors for students enrolled in a specific department. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of instructors who teach a specific course identified by its title. The placeholders in the WHERE clause represent the course title that the user can specify.\",\n        \"virtual_table\": \"SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT name FROM instructor WHERE dept_name = 'computer science'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names of instructors along with the course IDs of the courses they teach, specifically filtered by the department they belong to. The placeholder in the WHERE clause represents the department's name.\",\n        \"virtual_table\": \"SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholders in the WHERE clause represent the department's name.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholder in the WHERE clause represents the department's name.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT name FROM instructor WHERE dept_name = 'computer science'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies the unique identifiers of instructors who are teaching courses in a specific semester and year, excluding those who are teaching in another specified semester and year. The placeholders in the query represent the semester and year values for filtering the results.\",\n        \"virtual_table\": \"SELECT id FROM teaches WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT id FROM teaches WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of instructors from the 'instructor' table who are not teaching any courses during a specific semester. The placeholder in the subquery represents the semester in which we want to check if the instructors are teaching.\",\n        \"virtual_table\": \"SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "t_1": "SELECT name FROM instructor WHERE dept_name = 'computer science'",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of instructors from the 'instructor' table who earn a salary greater than the minimum salary of instructors in a specified department. The placeholder in the subquery represents the department's name.\",\n        \"virtual_table\": \"SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies the unique identifiers of instructors who are teaching courses in a specific semester and year, excluding those who are teaching in another specified semester and year. The placeholders in the query represent the semester and year values for filtering the results.\",\n        \"virtual_table\": \"SELECT id FROM teaches WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT id FROM teaches WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of instructors from the 'instructor' table, ordered by their annual salary in descending order. The placeholder in the LIMIT clause represents the maximum number of instructors to be displayed.\",\n        \"virtual_table\": \"SELECT name FROM instructor ORDER BY salary DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT name FROM instructor WHERE dept_name = 'computer science'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names of instructors along with the course IDs of the courses they teach, specifically filtered by the department they belong to. The placeholder in the WHERE clause represents the department's name.\",\n        \"virtual_table\": \"SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the identifiers of instructors who are acting as advisors for students enrolled in a specific department. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of instructors from the 'instructor' table who are not currently teaching any courses. The subquery identifies the IDs of instructors who are teaching, and the main query filters out those IDs to return only the names of instructors who are available for teaching.\",\n        \"virtual_table\": \"SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)\"\n    }\n}\n",
        "t_3+": "SELECT name FROM instructor WHERE dept_name = 'computer science'",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names of instructors who are advisors to students from a specific department. The placeholder in the WHERE clause represents the department's name, and the results are ordered by the total credits earned by the students.\",\n        \"virtual_table\": \"SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T3.tot_cred\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholders in the WHERE clause represent the department's name.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholder in the WHERE clause represents the department's name.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1476",
        "c_low": "SELECT DISTINCT T1.title FROM course AS T1 JOIN section AS T2 ON T1.course_id = T2.course_id WHERE (T2.semester = 'Fall' AND T2.year = '2009') OR (T2.semester = 'Spring' AND T2.year = '2010');",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of students who are enrolled in courses offered by a specific academic department. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT T1.title FROM course AS T1 JOIN section AS T2 ON T1.course_id = T2.course_id WHERE (T2.semester = 'Fall' AND T2.year = '2009') OR (T2.semester = 'Spring' AND T2.year = '2010')",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of students who have taken courses in either of the specified academic years. The placeholders in the WHERE clause represent the years of interest.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] OR YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course titles along with the names of instructors who are teaching those courses in a specific academic year. The placeholders in the WHERE clause represent the academic year for which the data is being queried.\",\n        \"virtual_table\": \"SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] ORDER BY T1.title\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the titles of courses offered in a specific building during a particular semester and year. The placeholders in the WHERE clause represent the building name, semester, and year for filtering the results.\",\n        \"virtual_table\": \"SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  [PLACEHOLDER-TYPE:STRING] AND semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT course_id FROM section WHERE (semester = 'Fall' AND year = '2009') OR (semester = 'Spring' AND year = '2010');",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies the course IDs from the 'section' table that are offered in two different semesters of the same academic year. The placeholders in the WHERE clauses represent the specific semesters and the academic year.\",\n        \"virtual_table\": \"SELECT course_id FROM SECTION WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT course_id FROM SECTION WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies the unique identifiers of instructors who are teaching courses in a specific semester and year, excluding those who are teaching in another specified semester and year. The placeholders in the query represent the semester and year values for filtering the results.\",\n        \"virtual_table\": \"SELECT id FROM teaches WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT id FROM teaches WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the titles of courses that are offered by two specific academic departments. The placeholders in the WHERE clauses represent the names of the departments being compared.\",\n        \"virtual_table\": \"SELECT title FROM course WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT title FROM course WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT course_id FROM section WHERE semester = 'Fall' AND year = '2009' UNION SELECT course_id FROM section WHERE semester = 'Spring' AND year = '2010';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies the course IDs from the 'section' table that are offered in two different semesters of the same academic year. The placeholders in the WHERE clauses represent the specific semesters and the academic year.\",\n        \"virtual_table\": \"SELECT course_id FROM SECTION WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT course_id FROM SECTION WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies the unique identifiers of instructors who are teaching courses in a specific semester and year, excluding those who are teaching in another specified semester and year. The placeholders in the query represent the semester and year values for filtering the results.\",\n        \"virtual_table\": \"SELECT id FROM teaches WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT id FROM teaches WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the titles of courses that are offered by two specific academic departments. The placeholders in the WHERE clauses represent the names of the departments being compared.\",\n        \"virtual_table\": \"SELECT title FROM course WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT title FROM course WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT T1.title FROM course AS T1 JOIN section AS T2 ON T1.course_id = T2.course_id WHERE T2.semester IN ('Fall', 'Spring') AND T2.year IN (2009, 2010)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of students who have taken courses in either of the specified academic years. The placeholders in the WHERE clause represent the years of interest.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] OR YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the titles of courses offered in a specific building during a particular semester and year. The placeholders in the WHERE clause represent the building name, semester, and year for filtering the results.\",\n        \"virtual_table\": \"SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  [PLACEHOLDER-TYPE:STRING] AND semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides information about the buildings and room numbers where courses from a specific department are held, along with the semester and year of those courses. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.title\"\n    }\n}\n",
        "t_3+": "SELECT T1.title, T2.semester, T2.year \nFROM course AS T1 \nJOIN teaches AS T2 ON T1.course_id = T2.course_id \nWHERE (T2.semester = 'Fall' AND T2.year = '2009') OR (T2.semester = 'Spring' AND T2.year = '2010') \nORDER BY T1.title;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course titles along with the names of instructors who are teaching those courses in a specific academic year. The placeholders in the WHERE clause represent the academic year for which the data is being queried.\",\n        \"virtual_table\": \"SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] ORDER BY T1.title\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of students who are enrolled in courses offered by a specific academic department. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1478",
        "c_low": "SELECT DISTINCT T1.title FROM course AS T1 JOIN section AS T2 ON T1.course_id = T2.course_id WHERE (T2.semester = 'Fall' AND T2.year = '2009') OR (T2.semester = 'Spring' AND T2.year = '2010')",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of students who are enrolled in courses offered by a specific academic department. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT T1.title FROM course AS T1 JOIN section AS T2 ON T1.course_id = T2.course_id WHERE (T2.semester = 'Fall' AND T2.year = '2009') OR (T2.semester = 'Spring' AND T2.year = '2010')",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of students who have taken courses in either of the specified academic years. The placeholders in the WHERE clause represent the years of interest.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] OR YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course titles along with the names of instructors who are teaching those courses in a specific academic year. The placeholders in the WHERE clause represent the academic year for which the data is being queried.\",\n        \"virtual_table\": \"SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] ORDER BY T1.title\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the titles of courses offered in a specific building during a particular semester and year. The placeholders in the WHERE clause represent the building name, semester, and year for filtering the results.\",\n        \"virtual_table\": \"SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  [PLACEHOLDER-TYPE:STRING] AND semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT course_id FROM section WHERE semester = 'Fall' AND year = '2009' INTERSECT SELECT course_id FROM section WHERE semester = 'Spring' AND year = '2010';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies the course IDs from the 'section' table that are offered in two different semesters of the same academic year. The placeholders in the WHERE clauses represent the specific semesters and the academic year.\",\n        \"virtual_table\": \"SELECT course_id FROM SECTION WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT course_id FROM SECTION WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies the unique identifiers of instructors who are teaching courses in a specific semester and year, excluding those who are teaching in another specified semester and year. The placeholders in the query represent the semester and year values for filtering the results.\",\n        \"virtual_table\": \"SELECT id FROM teaches WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT id FROM teaches WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the titles of courses that are offered by two specific academic departments. The placeholders in the WHERE clauses represent the names of the departments being compared.\",\n        \"virtual_table\": \"SELECT title FROM course WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT title FROM course WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT course_id FROM section WHERE semester = 'Fall' AND year = '2009' INTERSECT SELECT course_id FROM section WHERE semester = 'Spring' AND year = '2010';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies the course IDs from the 'section' table that are offered in two different semesters of the same academic year. The placeholders in the WHERE clauses represent the specific semesters and the academic year.\",\n        \"virtual_table\": \"SELECT course_id FROM SECTION WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT course_id FROM SECTION WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies the unique identifiers of instructors who are teaching courses in a specific semester and year, excluding those who are teaching in another specified semester and year. The placeholders in the query represent the semester and year values for filtering the results.\",\n        \"virtual_table\": \"SELECT id FROM teaches WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT id FROM teaches WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the titles of courses that are offered by two specific academic departments. The placeholders in the WHERE clauses represent the names of the departments being compared.\",\n        \"virtual_table\": \"SELECT title FROM course WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT title FROM course WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT T1.title FROM course AS T1 JOIN section AS T2 ON T1.course_id = T2.course_id WHERE T2.semester IN ('Fall', 'Spring') AND T2.year IN (2009, 2010)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of students who have taken courses in either of the specified academic years. The placeholders in the WHERE clause represent the years of interest.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] OR YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the titles of courses offered in a specific building during a particular semester and year. The placeholders in the WHERE clause represent the building name, semester, and year for filtering the results.\",\n        \"virtual_table\": \"SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  [PLACEHOLDER-TYPE:STRING] AND semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides information about the buildings and room numbers where courses from a specific department are held, along with the semester and year of those courses. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T1.title\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT T1.title FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id WHERE (T2.semester = 'Fall' AND T2.year = '2009') OR (T2.semester = 'Spring' AND T2.year = '2010')",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course titles along with the names of instructors who are teaching those courses in a specific academic year. The placeholders in the WHERE clause represent the academic year for which the data is being queried.\",\n        \"virtual_table\": \"SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] ORDER BY T1.title\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of students who are enrolled in courses offered by a specific academic department. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1480",
        "c_low": "SELECT DISTINCT section.course_id \nFROM section \nWHERE (section.semester = 'Fall' AND section.year = '2009') \nAND section.course_id NOT IN \n(SELECT course_id \n FROM section \n WHERE semester = 'Spring' AND year = '2010');",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the course IDs of courses that do not have any prerequisites. It is derived from the 'course' table by excluding those course IDs that appear in the 'prereq' table, indicating that they are not dependent on any other courses for enrollment.\",\n        \"virtual_table\": \"SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the identifiers of instructors from the 'instructor' table who are not currently teaching any courses. The use of the EXCEPT clause ensures that only those instructors who do not have any associated records in the 'teaches' table are included in the result.\",\n        \"virtual_table\": \"SELECT id FROM instructor EXCEPT SELECT id FROM teaches\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT T1.title \nFROM course AS T1 \nJOIN teaches AS T2 ON T1.course_id = T2.course_id \nJOIN section AS T3 ON T2.sec_id = T3.sec_id AND T2.semester = T3.semester AND T2.year = T3.year \nWHERE (T3.semester = 'Fall' AND T3.year = '2009') \nAND T1.course_id NOT IN (\n    SELECT T1.course_id \n    FROM section AS T1 \n    WHERE T1.semester = 'Spring' AND T1.year = '2010'\n) \nORDER BY T1.title;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of students who have taken courses in either of the specified academic years. The placeholders in the WHERE clause represent the years of interest.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] OR YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course titles along with the names of instructors who are teaching those courses in a specific academic year. The placeholders in the WHERE clause represent the academic year for which the data is being queried.\",\n        \"virtual_table\": \"SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] ORDER BY T1.title\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the titles of courses offered in a specific building during a particular semester and year. The placeholders in the WHERE clause represent the building name, semester, and year for filtering the results.\",\n        \"virtual_table\": \"SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  [PLACEHOLDER-TYPE:STRING] AND semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT course_id FROM section WHERE semester = 'Fall' AND year = '2009' EXCEPT SELECT course_id FROM section WHERE semester = 'Spring' AND year = '2010';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies the unique identifiers of instructors who are teaching courses in a specific semester and year, excluding those who are teaching in another specified semester and year. The placeholders in the query represent the semester and year values for filtering the results.\",\n        \"virtual_table\": \"SELECT id FROM teaches WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT id FROM teaches WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of instructors from the 'instructor' table who are not teaching any courses during a specific semester. The placeholder in the subquery represents the semester in which we want to check if the instructors are teaching.\",\n        \"virtual_table\": \"SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the course IDs from the 'section' table that are offered in two different semesters of the same academic year. The placeholders in the WHERE clauses represent the specific semesters and the academic year.\",\n        \"virtual_table\": \"SELECT course_id FROM SECTION WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT course_id FROM SECTION WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT course_id FROM section WHERE semester = 'Fall' AND year = '2009' EXCEPT SELECT course_id FROM section WHERE semester = 'Spring' AND year = '2010';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies the unique identifiers of instructors who are teaching courses in a specific semester and year, excluding those who are teaching in another specified semester and year. The placeholders in the query represent the semester and year values for filtering the results.\",\n        \"virtual_table\": \"SELECT id FROM teaches WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT id FROM teaches WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies the course IDs from the 'section' table that are offered in two different semesters of the same academic year. The placeholders in the WHERE clauses represent the specific semesters and the academic year.\",\n        \"virtual_table\": \"SELECT course_id FROM SECTION WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT course_id FROM SECTION WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the course IDs from the 'SECTION' table that are offered in a specific semester and year, excluding those that are also offered in another specified semester and year. The placeholders in the query represent the semester and year values for filtering the results.\",\n        \"virtual_table\": \"SELECT course_id FROM SECTION WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT course_id FROM SECTION WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT course_id FROM section WHERE semester = 'Fall' AND year = '2009' EXCEPT SELECT DISTINCT course_id FROM section WHERE semester = 'Spring' AND year = '2010';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of students who have taken courses in either of the specified academic years. The placeholders in the WHERE clause represent the years of interest.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] OR YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of instructors from the 'instructor' table who are not teaching any courses during a specific semester. The placeholder in the subquery represents the semester in which we want to check if the instructors are teaching.\",\n        \"virtual_table\": \"SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the course IDs of courses that do not have any prerequisites. It is derived from the 'course' table by excluding those course IDs that appear in the 'prereq' table, indicating that they are not dependent on any other courses for enrollment.\",\n        \"virtual_table\": \"SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq\"\n    }\n}\n",
        "t_3+": "SELECT T1.title FROM course AS T1 \nJOIN teaches AS T2 ON T1.course_id = T2.course_id \nWHERE T2.semester = 'Fall' AND T2.year = '2009' \nAND T1.course_id NOT IN (\n    SELECT T2.course_id FROM teaches AS T2 \n    WHERE T2.semester = 'Spring' AND T2.year = '2010'\n) \nORDER BY T1.title;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course titles along with the names of instructors who are teaching those courses in a specific academic year. The placeholders in the WHERE clause represent the academic year for which the data is being queried.\",\n        \"virtual_table\": \"SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER] ORDER BY T1.title\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1489",
        "c_low": "SELECT name FROM instructor WHERE salary > (SELECT MAX(salary) FROM instructor WHERE dept_name = 'Biology')",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names of instructors who are advisors to students from a specific department. The placeholder in the WHERE clause represents the department's name, and the results are ordered by the total credits earned by the students.\",\n        \"virtual_table\": \"SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T3.tot_cred\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of instructors from the 'instructor' table, ordered by their annual salary in descending order. The placeholder in the LIMIT clause represents the maximum number of instructors to be displayed.\",\n        \"virtual_table\": \"SELECT name FROM instructor ORDER BY salary DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the identifiers of instructors who are acting as advisors for students enrolled in a specific department. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT name FROM instructor WHERE salary > (SELECT max(salary) FROM instructor WHERE dept_name = 'Biology')",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of instructors from the 'instructor' table who earn a salary greater than the maximum salary of instructors in a specified department. The placeholder in the subquery represents the department's name.\",\n        \"virtual_table\": \"SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of instructors from the 'instructor' table who earn a salary greater than the minimum salary of instructors in a specified department. The placeholder in the subquery represents the department's name.\",\n        \"virtual_table\": \"SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholders in the WHERE clause represent the department's name.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT name FROM instructor WHERE salary > (SELECT MAX(salary) FROM instructor WHERE dept_name = 'Biology')",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors from the 'instructor' table who earn less than the average salary of instructors in a specified department. The placeholder in the subquery represents the department's name.\",\n        \"virtual_table\": \"SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies the unique identifiers of instructors who are teaching courses in a specific semester and year, excluding those who are teaching in another specified semester and year. The placeholders in the query represent the semester and year values for filtering the results.\",\n        \"virtual_table\": \"SELECT id FROM teaches WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT id FROM teaches WHERE semester  =  [PLACEHOLDER-TYPE:STRING] AND YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of instructors who are advising more than a specified number of students. The placeholder in the HAVING clause represents the minimum number of students an instructor must advise to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT name FROM instructor WHERE salary > (SELECT max(salary) FROM instructor WHERE dept_name = 'Biology')",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of instructors from the 'instructor' table who earn a salary greater than the maximum salary of instructors in a specified department. The placeholder in the subquery represents the department's name.\",\n        \"virtual_table\": \"SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of instructors from the 'instructor' table who earn a salary greater than the minimum salary of instructors in a specified department. The placeholder in the subquery represents the department's name.\",\n        \"virtual_table\": \"SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors from the 'instructor' table who earn less than the average salary of instructors in a specified department. The placeholder in the subquery represents the department's name.\",\n        \"virtual_table\": \"SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT T1.name \nFROM instructor AS T1 \nWHERE T1.salary > (\n    SELECT MAX(T2.salary) \n    FROM instructor AS T2 \n    JOIN department AS D ON T2.dept_name = D.dept_name \n    WHERE D.dept_name = 'Biology'\n)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the identifiers of instructors who are acting as advisors for students enrolled in a specific department. The placeholder in the WHERE clause represents the name of the department.\",\n        \"virtual_table\": \"SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of instructors along with the course IDs of the courses they teach, specifically filtered by the department they belong to. The placeholder in the WHERE clause represents the department's name.\",\n        \"virtual_table\": \"SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of instructors who are advising more than a specified number of students. The placeholder in the HAVING clause represents the minimum number of students an instructor must advise to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT T1.name \nFROM instructor AS T1 \nWHERE T1.salary > (\n    SELECT MAX(T2.salary) \n    FROM instructor AS T2 \n    WHERE T2.dept_name = 'Biology'\n);",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholders in the WHERE clause represent the department's name.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of instructors who are advisors to students from a specific department. The placeholder in the WHERE clause represents the department's name, and the results are ordered by the total credits earned by the students.\",\n        \"virtual_table\": \"SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING] ORDER BY T3.tot_cred\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholder in the WHERE clause represents the department's name.\",\n        \"virtual_table\": \"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1499",
        "c_low": "SELECT Party FROM people GROUP BY Party ORDER BY COUNT(People_ID) DESC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of political party affiliations from the 'people' table, ordered by the age of individuals in ascending order. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT Party FROM people ORDER BY Age ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT Party, COUNT(*) as PartyCount FROM people GROUP BY Party ORDER BY PartyCount DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of individuals who were on the affirmative side of debates that had a specific number of audience members. The placeholders in the query allow for filtering based on the audience size.\",\n        \"virtual_table\": \"SELECT T3.Name FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID WHERE T2.Num_of_Audience  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT Party, COUNT(*) as PartyCount \nFROM people \nGROUP BY Party \nORDER BY PartyCount DESC \nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT Party FROM people GROUP BY Party ORDER BY COUNT(People_ID) DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of political party affiliations from the 'people' table, ordered by the age of individuals in ascending order. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT Party FROM people ORDER BY Age ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Party, COUNT(*) as PartyCount \nFROM people \nGROUP BY Party \nORDER BY PartyCount DESC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT Party, COUNT(*) as PartyCount FROM people GROUP BY Party ORDER BY PartyCount DESC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of individuals who were on the affirmative side of debates that had a specific number of audience members. The placeholders in the query allow for filtering based on the audience size.\",\n        \"virtual_table\": \"SELECT T3.Name FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID WHERE T2.Num_of_Audience  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1511",
        "c_low": "SELECT Policy_Type_Code, COUNT(*) as Frequency\nFROM Policies\nGROUP BY Policy_Type_Code\nORDER BY Frequency DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the types of insurance policies from the 'Policies' table that are associated with a specific customer. The placeholder in the WHERE clause represents the detailed information about the customer.\",\n        \"virtual_table\": \"SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT Policy_Type_Code, COUNT(*) as Frequency FROM Policies GROUP BY Policy_Type_Code ORDER BY Frequency DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a distinct list of customer details from the 'Customers' table for those customers who hold a specific type of insurance policy. The placeholder in the WHERE clause represents the policy type code that is being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer details from the 'Customers' table, specifically for those customers who have insurance policies. The data is aggregated by customer details, sorted in descending order based on the number of policies they hold, and limited to a specified number of results. The placeholder in the LIMIT clause represents the maximum number of customer details to return.\",\n        \"virtual_table\": \"SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT Policy_Type_Code FROM Policies GROUP BY Policy_Type_Code HAVING COUNT(*) > 0 ORDER BY COUNT(*) DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique insurance policy types from the 'Policies' table that have been issued more than a specified number of times. The placeholder in the HAVING clause represents the minimum count of policies required to be included in the results.\",\n        \"virtual_table\": \"SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of distinct customer details from the 'Customers' table for those customers who have specific types of insurance policies. The placeholders in the WHERE clause represent the policy type codes that the user can specify.\",\n        \"virtual_table\": \"SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  [PLACEHOLDER-TYPE:STRING] OR t1.policy_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT Policy_Type_Code FROM Policies GROUP BY Policy_Type_Code HAVING count(*) > 0",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique insurance policy types from the 'Policies' table that have been issued more than a specified number of times. The placeholder in the HAVING clause represents the minimum count of policies required to be included in the results.\",\n        \"virtual_table\": \"SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Policy_Type_Code FROM Policies GROUP BY Policy_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the types of insurance policies from the 'Policies' table that are associated with a specific customer. The placeholder in the WHERE clause represents the detailed information about the customer.\",\n        \"virtual_table\": \"SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of customer details from the 'Customers' table for those customers who hold a specific type of insurance policy. The placeholder in the WHERE clause represents the policy type code that is being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of distinct customer details from the 'Customers' table for those customers who have specific types of insurance policies. The placeholders in the WHERE clause represent the policy type codes that the user can specify.\",\n        \"virtual_table\": \"SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  [PLACEHOLDER-TYPE:STRING] OR t1.policy_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Policy_Type_Code, COUNT(*) as Frequency\nFROM Policies\nGROUP BY Policy_Type_Code\nORDER BY Frequency DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1513",
        "c_low": "SELECT Policy_Type_Code FROM Policies GROUP BY Policy_Type_Code HAVING COUNT(Customer_ID) > 2;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the types of insurance policies from the 'Policies' table that are associated with a specific customer. The placeholder in the WHERE clause represents the detailed information about the customer.\",\n        \"virtual_table\": \"SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer details from the 'Customers' table, excluding those customers who have associated insurance policies. The query uses an EXCEPT clause to filter out customers that are linked to any policies, ensuring that only customers without policies are displayed.\",\n        \"virtual_table\": \"SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id\"\n    }\n}\n",
        "c_mid": "SELECT Policy_Type_Code FROM Policies GROUP BY Policy_Type_Code HAVING COUNT(DISTINCT Customer_ID) > 2;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a distinct list of customer details from the 'Customers' table for those customers who hold a specific type of insurance policy. The placeholder in the WHERE clause represents the policy type code that is being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer details from the 'Customers' table, specifically for those customers who have insurance policies. The data is aggregated by customer details, sorted in descending order based on the number of policies they hold, and limited to a specified number of results. The placeholder in the LIMIT clause represents the maximum number of customer details to return.\",\n        \"virtual_table\": \"SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT policy_type_code FROM Policies GROUP BY policy_type_code HAVING count(*) > 2",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique insurance policy types from the 'Policies' table that have been issued more than a specified number of times. The placeholder in the HAVING clause represents the minimum count of policies required to be included in the results.\",\n        \"virtual_table\": \"SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of distinct customer details from the 'Customers' table for those customers who have specific types of insurance policies. The placeholders in the WHERE clause represent the policy type codes that the user can specify.\",\n        \"virtual_table\": \"SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  [PLACEHOLDER-TYPE:STRING] OR t1.policy_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT Policy_Type_Code FROM Policies GROUP BY Policy_Type_Code HAVING count(*) > 2",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique insurance policy types from the 'Policies' table that have been issued more than a specified number of times. The placeholder in the HAVING clause represents the minimum count of policies required to be included in the results.\",\n        \"virtual_table\": \"SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT policy_type_code FROM Policies GROUP BY policy_type_code HAVING COUNT(DISTINCT Customer_ID) > 2;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of distinct customer details from the 'Customers' table for those customers who have specific types of insurance policies. The placeholders in the WHERE clause represent the policy type codes that the user can specify.\",\n        \"virtual_table\": \"SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  [PLACEHOLDER-TYPE:STRING] OR t1.policy_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the types of insurance policies from the 'Policies' table that are associated with a specific customer. The placeholder in the WHERE clause represents the detailed information about the customer.\",\n        \"virtual_table\": \"SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a distinct list of customer details from the 'Customers' table for those customers who hold a specific type of insurance policy. The placeholder in the WHERE clause represents the policy type code that is being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Policy_Type_Code\nFROM Policies\nWHERE Customer_ID IN (\n    SELECT Customer_ID\n    FROM Policies\n    GROUP BY Customer_ID\n    HAVING COUNT(DISTINCT Customer_ID) > 2\n)\nGROUP BY Policy_Type_Code;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1515",
        "c_low": "SELECT SUM(Amount_Paid) AS Total_Amount_Paid, AVG(Amount_Paid) AS Average_Amount_Paid FROM Claim_Headers;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT SUM(Amount_Paid) AS Total_Amount_Paid, AVG(Amount_Paid) AS Average_Amount_Paid FROM Claim_Headers;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves the detailed information of the customer associated with the claim that has the highest amount claimed. It joins the 'Claim_Headers' table with the 'Policies' table to link claims to policies, and then joins with the 'Customers' table to get the customer details. The placeholder in the WHERE clause represents the maximum amount claimed across all claims.\",\n        \"virtual_table\": \"SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)\"\n    }\n}\n",
        "c_high": "SELECT SUM(Amount_Paid) AS Total_Amount_Paid, AVG(Amount_Paid) AS Average_Amount_Paid\nFROM Claim_Headers;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT SUM(Amount_Paid) AS Total_Amount_Paid, AVG(Amount_Paid) AS Average_Amount_Paid FROM Claim_Headers;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT SUM(Amount_Paid) AS Total_Amount_Paid, AVG(Amount_Paid) AS Average_Amount_Paid FROM Claim_Headers;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT SUM(Amount_Paid) AS Total_Amount_Paid, AVG(Amount_Paid) AS Average_Amount_Paid FROM Claim_Headers;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves the detailed information of the customer associated with the claim that has the highest amount claimed. It joins the 'Claim_Headers' table with the 'Policies' table to link claims to policies, and then joins with the 'Customers' table to get the customer details. The placeholder in the WHERE clause represents the maximum amount claimed across all claims.\",\n        \"virtual_table\": \"SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1516",
        "c_low": "SELECT SUM(Amount_Paid) AS Total_Amount_Paid, AVG(Amount_Paid) AS Average_Amount_Paid FROM Claim_Headers;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT SUM(Amount_Paid) AS Total_Amount_Paid, AVG(Amount_Paid) AS Average_Amount_Paid FROM Claim_Headers;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves the detailed information of the customer associated with the claim that has the highest amount claimed. It joins the 'Claim_Headers' table with the 'Policies' table to link claims to policies, and then joins with the 'Customers' table to get the customer details. The placeholder in the WHERE clause represents the maximum amount claimed across all claims.\",\n        \"virtual_table\": \"SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)\"\n    }\n}\n",
        "c_high": "SELECT SUM(Amount_Paid) AS Total_Amount_Paid, AVG(Amount_Paid) AS Average_Amount_Paid FROM Claim_Headers;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT SUM(Amount_Paid) AS Total_Amount_Paid, AVG(Amount_Paid) AS Average_Amount_Paid FROM Claim_Headers;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT SUM(Amount_Paid) AS Total_Amount_Paid, AVG(Amount_Paid) AS Average_Amount_Paid FROM Claim_Headers;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT SUM(Amount_Paid) AS Total_Amount_Paid, AVG(Amount_Paid) AS Average_Amount_Paid FROM Claim_Headers;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves the detailed information of the customer associated with the claim that has the highest amount claimed. It joins the 'Claim_Headers' table with the 'Policies' table to link claims to policies, and then joins with the 'Customers' table to get the customer details. The placeholder in the WHERE clause represents the maximum amount claimed across all claims.\",\n        \"virtual_table\": \"SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1517",
        "c_low": "SELECT SUM(ch.Amount_Claimed) AS Total_Claimed\nFROM Claim_Headers ch\nJOIN Claims_Documents cd ON cd.Claim_ID = ch.Claim_Header_ID\nWHERE cd.Created_Date = (SELECT MAX(Created_Date) FROM Claims_Documents);",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT SUM(t1.amount_claimed) AS total_amount_claimed FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id = t2.claim_id WHERE t2.created_date = (SELECT max(created_date) FROM claims_documents)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves the detailed information of the customer associated with the claim that has the highest amount claimed. It joins the 'Claim_Headers' table with the 'Policies' table to link claims to policies, and then joins with the 'Customers' table to get the customer details. The placeholder in the WHERE clause represents the maximum amount claimed across all claims.\",\n        \"virtual_table\": \"SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)\"\n    }\n}\n",
        "c_high": "SELECT SUM(ch.Amount_Claimed) AS Total_Claimed\nFROM Claim_Headers ch\nJOIN Claims_Documents cd ON ch.Claim_Header_ID = cd.Claim_ID\nWHERE cd.Created_Date = (SELECT MAX(Created_Date) FROM Claims_Documents);",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT SUM(ch.Amount_Claimed) AS Total_Claimed\nFROM Claim_Headers ch\nJOIN Claims_Documents cd ON cd.Claim_ID = ch.Claim_Header_ID\nWHERE cd.Created_Date = (SELECT MAX(Created_Date) FROM Claims_Documents);",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT SUM(ch.Amount_Claimed) AS Total_Amount_Claimed\nFROM Claim_Headers ch\nJOIN Claims_Documents cd ON cd.Claim_ID = ch.Claim_Header_ID\nWHERE cd.Created_Date = (SELECT MAX(Created_Date) FROM Claims_Documents);",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT SUM(t1.amount_claimed) AS total_amount_claimed FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id = t2.claim_id WHERE t2.created_date = (SELECT MAX(created_date) FROM claims_documents)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves the detailed information of the customer associated with the claim that has the highest amount claimed. It joins the 'Claim_Headers' table with the 'Policies' table to link claims to policies, and then joins with the 'Customers' table to get the customer details. The placeholder in the WHERE clause represents the maximum amount claimed across all claims.\",\n        \"virtual_table\": \"SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1518",
        "c_low": "SELECT SUM(ch.Amount_Claimed) AS Total_Claimed\nFROM Claim_Headers ch\nJOIN Claims_Documents cd ON ch.Claim_Header_ID = cd.Claim_ID\nWHERE cd.Created_Date = (SELECT MAX(Created_Date) FROM Claims_Documents);",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT SUM(t1.Amount_Claimed) AS Total_Claimed_Amount FROM Claim_Headers AS t1 JOIN Claims_Documents AS t2 ON t1.Claim_Header_ID = t2.Claim_ID ORDER BY t2.Created_Date DESC LIMIT 1",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves the detailed information of the customer associated with the claim that has the highest amount claimed. It joins the 'Claim_Headers' table with the 'Policies' table to link claims to policies, and then joins with the 'Customers' table to get the customer details. The placeholder in the WHERE clause represents the maximum amount claimed across all claims.\",\n        \"virtual_table\": \"SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)\"\n    }\n}\n",
        "c_high": "SELECT SUM(Claim_Headers.Amount_Claimed) AS Total_Claimed\nFROM Claim_Headers\nJOIN Claims_Documents ON Claims_Documents.Claim_ID = Claim_Headers.Claim_Header_ID\nWHERE Claims_Documents.Created_Date = (\n    SELECT MAX(Created_Date)\n    FROM Claims_Documents\n);",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT SUM(Claim_Headers.Amount_Claimed) AS Total_Claimed\nFROM Claim_Headers\nJOIN Claims_Documents ON Claims_Documents.Claim_ID = Claim_Headers.Claim_Header_ID\nWHERE Claims_Documents.Created_Date = (\n    SELECT MAX(Created_Date)\n    FROM Claims_Documents\n);",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT SUM(ch.Amount_Claimed) AS Total_Claimed\nFROM Claim_Headers ch\nJOIN Claims_Documents cd ON cd.Claim_ID = ch.Claim_Header_ID\nWHERE cd.Created_Date = (SELECT MAX(Created_Date) FROM Claims_Documents);",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT SUM(t1.Amount_Claimed) AS Total_Claimed_Amount FROM Claim_Headers AS t1 JOIN Claims_Documents AS t2 ON t1.Claim_Header_ID = t2.Claim_ID ORDER BY t2.Created_Date DESC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves the detailed information of the customer associated with the claim that has the highest amount claimed. It joins the 'Claim_Headers' table with the 'Policies' table to link claims to policies, and then joins with the 'Customers' table to get the customer details. The placeholder in the WHERE clause represents the maximum amount claimed across all claims.\",\n        \"virtual_table\": \"SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1519",
        "c_low": "SELECT c.Customer_Details\nFROM Customers c\nJOIN Claim_Headers ch ON c.Customer_ID = (SELECT p.Customer_ID FROM Policies p WHERE p.Policy_ID = ch.Policy_ID)\nORDER BY ch.Amount_Claimed DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT t3.Customer_Details FROM Claim_Headers AS t1 JOIN Policies AS t2 ON t1.Policy_ID = t2.Policy_ID JOIN Customers AS t3 ON t2.Customer_ID = t3.Customer_ID WHERE t1.Amount_Claimed = (SELECT max(Amount_Claimed) FROM Claim_Headers)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves the detailed information of the customer associated with the claim that has the highest amount claimed. It joins the 'Claim_Headers' table with the 'Policies' table to link claims to policies, and then joins with the 'Customers' table to get the customer details. The placeholder in the WHERE clause represents the maximum amount claimed across all claims.\",\n        \"virtual_table\": \"SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer details from the 'Customers' table, specifically for those customers who have insurance policies. The data is aggregated by customer details, sorted in descending order based on the number of policies they hold, and limited to a specified number of results. The placeholder in the LIMIT clause represents the maximum number of customer details to return.\",\n        \"virtual_table\": \"SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT c.Customer_Details\nFROM Customers c\nJOIN Claim_Headers ch ON c.Customer_ID = (SELECT p.Customer_ID FROM Policies p WHERE p.Policy_ID = ch.Policy_ID)\nORDER BY ch.Amount_Claimed DESC\nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT c.Customer_Details \nFROM Customers c \nJOIN Claim_Headers ch ON c.Customer_ID = (SELECT p.Customer_ID \n                                          FROM Policies p \n                                          JOIN Claim_Headers ch2 ON p.Policy_ID = ch2.Policy_ID \n                                          ORDER BY ch2.Amount_Claimed DESC \n                                          LIMIT 1)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT c.Customer_Details \nFROM Claim_Headers ch \nJOIN Policies p ON ch.Policy_ID = p.Policy_ID \nJOIN Customers c ON p.Customer_ID = c.Customer_ID \nORDER BY ch.Amount_Claimed DESC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer details from the 'Customers' table, specifically for those customers who have insurance policies. The data is aggregated by customer details, sorted in descending order based on the number of policies they hold, and limited to a specified number of results. The placeholder in the LIMIT clause represents the maximum number of customer details to return.\",\n        \"virtual_table\": \"SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT t3.Customer_Details FROM Claim_Headers AS t1 JOIN Policies AS t2 ON t1.Policy_ID = t2.Policy_ID JOIN Customers AS t3 ON t2.Customer_ID = t3.Customer_ID WHERE t1.Amount_Claimed = (SELECT max(Amount_Claimed) FROM Claim_Headers)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves the detailed information of the customer associated with the claim that has the highest amount claimed. It joins the 'Claim_Headers' table with the 'Policies' table to link claims to policies, and then joins with the 'Customers' table to get the customer details. The placeholder in the WHERE clause represents the maximum amount claimed across all claims.\",\n        \"virtual_table\": \"SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1521",
        "c_low": "SELECT c.Customer_Details \nFROM Customers c \nJOIN Policies p ON c.Customer_ID = p.Customer_ID \nJOIN Claim_Headers ch ON p.Policy_ID = ch.Policy_ID \nWHERE ch.Amount_Paid = (SELECT MIN(Amount_Paid) FROM Claim_Headers)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT t3.Customer_Details FROM Claim_Headers AS t1 JOIN Policies AS t2 ON t1.Policy_ID = t2.Policy_ID JOIN Customers AS t3 ON t2.Customer_ID = t3.Customer_ID WHERE t1.Amount_Claimed = (SELECT min(Amount_Claimed) FROM Claim_Headers)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves the detailed information of the customer associated with the claim that has the highest amount claimed. It joins the 'Claim_Headers' table with the 'Policies' table to link claims to policies, and then joins with the 'Customers' table to get the customer details. The placeholder in the WHERE clause represents the maximum amount claimed across all claims.\",\n        \"virtual_table\": \"SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)\"\n    }\n}\n",
        "c_high": "SELECT c.Customer_Details \nFROM Customers c \nJOIN Policies p ON c.Customer_ID = p.Customer_ID \nJOIN Claim_Headers ch ON p.Policy_ID = ch.Policy_ID \nWHERE ch.Amount_Paid = (SELECT MIN(Amount_Paid) FROM Claim_Headers)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT c.Customer_Details \nFROM Customers c \nJOIN Policies p ON c.Customer_ID = p.Customer_ID \nJOIN Claim_Headers ch ON p.Policy_ID = ch.Policy_ID \nWHERE ch.Amount_Paid = (SELECT MIN(Amount_Paid) FROM Claim_Headers)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT c.Customer_Details \nFROM Customers c \nJOIN Policies p ON c.Customer_ID = p.Customer_ID \nJOIN Claim_Headers ch ON p.Policy_ID = ch.Policy_ID \nORDER BY ch.Amount_Paid ASC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT t3.Customer_Details FROM Claim_Headers AS t1 JOIN Policies AS t2 ON t1.Policy_ID = t2.Policy_ID JOIN Customers AS t3 ON t2.Customer_ID = t3.Customer_ID WHERE t1.Amount_Claimed = (SELECT min(Amount_Claimed) FROM Claim_Headers)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves the detailed information of the customer associated with the claim that has the highest amount claimed. It joins the 'Claim_Headers' table with the 'Policies' table to link claims to policies, and then joins with the 'Customers' table to get the customer details. The placeholder in the WHERE clause represents the maximum amount claimed across all claims.\",\n        \"virtual_table\": \"SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1522",
        "c_low": "SELECT c.Customer_Details \nFROM Customers c \nJOIN Policies p ON c.Customer_ID = p.Customer_ID \nJOIN Claim_Headers ch ON p.Policy_ID = ch.Policy_ID \nORDER BY ch.Amount_Claimed ASC \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer details from the 'Customers' table, excluding those customers who have associated insurance policies. The query uses an EXCEPT clause to filter out customers that are linked to any policies, ensuring that only customers without policies are displayed.\",\n        \"virtual_table\": \"SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id\"\n    }\n}\n",
        "c_mid": "SELECT t3.Customer_Details FROM Claim_Headers AS t1 JOIN Policies AS t2 ON t1.Policy_ID = t2.Policy_ID JOIN Customers AS t3 ON t2.Customer_ID = t3.Customer_ID WHERE t1.Amount_Claimed = (SELECT MIN(Amount_Claimed) FROM Claim_Headers)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves the detailed information of the customer associated with the claim that has the highest amount claimed. It joins the 'Claim_Headers' table with the 'Policies' table to link claims to policies, and then joins with the 'Customers' table to get the customer details. The placeholder in the WHERE clause represents the maximum amount claimed across all claims.\",\n        \"virtual_table\": \"SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer details from the 'Customers' table, specifically for those customers who have insurance policies. The data is aggregated by customer details, sorted in descending order based on the number of policies they hold, and limited to a specified number of results. The placeholder in the LIMIT clause represents the maximum number of customer details to return.\",\n        \"virtual_table\": \"SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT Customers.Customer_Details \nFROM Customers \nJOIN Policies ON Customers.Customer_ID = Policies.Customer_ID \nJOIN Claim_Headers ON Policies.Policy_ID = Claim_Headers.Policy_ID \nORDER BY Claim_Headers.Amount_Claimed ASC \nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT Customers.Customer_Details \nFROM Customers \nJOIN Policies ON Customers.Customer_ID = Policies.Customer_ID \nJOIN Claim_Headers ON Policies.Policy_ID = Claim_Headers.Policy_ID \nORDER BY Claim_Headers.Amount_Claimed ASC \nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT c.Customer_Details \nFROM Customers c \nJOIN Policies p ON c.Customer_ID = p.Customer_ID \nJOIN Claim_Headers ch ON p.Policy_ID = ch.Policy_ID \nGROUP BY c.Customer_ID \nORDER BY MIN(ch.Amount_Claimed) ASC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer details from the 'Customers' table, specifically for those customers who have insurance policies. The data is aggregated by customer details, sorted in descending order based on the number of policies they hold, and limited to a specified number of results. The placeholder in the LIMIT clause represents the maximum number of customer details to return.\",\n        \"virtual_table\": \"SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer details from the 'Customers' table, excluding those customers who have associated insurance policies. The query uses an EXCEPT clause to filter out customers that are linked to any policies, ensuring that only customers without policies are displayed.\",\n        \"virtual_table\": \"SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id\"\n    }\n}\n",
        "t_3+": "SELECT t3.Customer_Details FROM Claim_Headers AS t1 JOIN Policies AS t2 ON t1.Policy_ID = t2.Policy_ID JOIN Customers AS t3 ON t2.Customer_ID = t3.Customer_ID WHERE t1.Amount_Claimed = (SELECT min(Amount_Claimed) FROM Claim_Headers)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves the detailed information of the customer associated with the claim that has the highest amount claimed. It joins the 'Claim_Headers' table with the 'Policies' table to link claims to policies, and then joins with the 'Customers' table to get the customer details. The placeholder in the WHERE clause represents the maximum amount claimed across all claims.\",\n        \"virtual_table\": \"SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1527",
        "c_low": "SELECT claim_stage_id, COUNT(*) as claim_count FROM claims_processing GROUP BY claim_stage_id ORDER BY claim_count DESC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the description of the current status of claims from the 'claims_processing_stages' table based on a specific status name. The placeholder in the WHERE clause represents the name of the claim status being queried.\",\n        \"virtual_table\": \"SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the types of insurance policies from the 'Policies' table that are associated with a specific customer. The placeholder in the WHERE clause represents the detailed information about the customer.\",\n        \"virtual_table\": \"SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT cps.Claim_Status_Name, COUNT(*) as Claim_Count\nFROM Claims_Processing cp\nJOIN Claims_Processing_Stages cps ON cp.Claim_Stage_ID = cps.Claim_Stage_ID\nGROUP BY cps.Claim_Status_Name\nORDER BY Claim_Count DESC\nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves the detailed information of the customer associated with the claim that has the highest amount claimed. It joins the 'Claim_Headers' table with the 'Policies' table to link claims to policies, and then joins with the 'Customers' table to get the customer details. The placeholder in the WHERE clause represents the maximum amount claimed across all claims.\",\n        \"virtual_table\": \"SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)\"\n    }\n}\n",
        "c_high": "SELECT cps.Claim_Status_Name, COUNT(*) AS Claim_Count\nFROM Claims_Processing cp\nJOIN Claims_Processing_Stages cps ON cp.Claim_Stage_ID = cps.Claim_Stage_ID\nGROUP BY cps.Claim_Status_Name\nORDER BY Claim_Count DESC\nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT claim_status_name, COUNT(*) as claim_count \nFROM Claims_Processing \nJOIN Claims_Processing_Stages ON Claims_Processing.Claim_Stage_ID = Claims_Processing_Stages.Claim_Stage_ID \nGROUP BY claim_status_name \nORDER BY claim_count DESC \nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the description of the current status of claims from the 'claims_processing_stages' table based on a specific status name. The placeholder in the WHERE clause represents the name of the claim status being queried.\",\n        \"virtual_table\": \"SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT cps.Claim_Status_Name, COUNT(*) as claim_count\nFROM Claims_Processing cp\nJOIN Claims_Processing_Stages cps ON cp.Claim_Stage_ID = cps.Claim_Stage_ID\nGROUP BY cps.Claim_Status_Name\nORDER BY claim_count DESC\nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the types of insurance policies from the 'Policies' table that are associated with a specific customer. The placeholder in the WHERE clause represents the detailed information about the customer.\",\n        \"virtual_table\": \"SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT cps.Claim_Status_Name, COUNT(*) as Claim_Count\nFROM Claims_Processing cp\nJOIN Claims_Processing_Stages cps ON cp.Claim_Stage_ID = cps.Claim_Stage_ID\nGROUP BY cps.Claim_Status_Name\nORDER BY Claim_Count DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves the detailed information of the customer associated with the claim that has the highest amount claimed. It joins the 'Claim_Headers' table with the 'Policies' table to link claims to policies, and then joins with the 'Customers' table to get the customer details. The placeholder in the WHERE clause represents the maximum amount claimed across all claims.\",\n        \"virtual_table\": \"SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1528",
        "c_low": "SELECT cps.claim_status_name, COUNT(cp.Claim_ID) AS claim_count\nFROM Claims_Processing cp\nJOIN Claims_Processing_Stages cps ON cp.Claim_Stage_ID = cps.Claim_Stage_ID\nGROUP BY cps.claim_status_name\nORDER BY claim_count DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the description of the current status of claims from the 'claims_processing_stages' table based on a specific status name. The placeholder in the WHERE clause represents the name of the claim status being queried.\",\n        \"virtual_table\": \"SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT cps.Claim_Status_Name, COUNT(cp.Claim_ID) AS Claim_Count\nFROM Claims_Processing AS cp\nJOIN Claims_Processing_Stages AS cps ON cp.Claim_Stage_ID = cps.Claim_Stage_ID\nGROUP BY cps.Claim_Status_Name\nORDER BY Claim_Count DESC\nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves the detailed information of the customer associated with the claim that has the highest amount claimed. It joins the 'Claim_Headers' table with the 'Policies' table to link claims to policies, and then joins with the 'Customers' table to get the customer details. The placeholder in the WHERE clause represents the maximum amount claimed across all claims.\",\n        \"virtual_table\": \"SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)\"\n    }\n}\n",
        "c_high": "SELECT cps.Claim_Status_Name, COUNT(cp.Claim_ID) AS Claim_Count\nFROM Claims_Processing cp\nJOIN Claims_Processing_Stages cps ON cp.Claim_Stage_ID = cps.Claim_Stage_ID\nGROUP BY cps.Claim_Status_Name\nORDER BY Claim_Count DESC\nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT cps.claim_status_name, COUNT(cp.Claim_ID) AS claim_count\nFROM Claims_Processing cp\nJOIN Claims_Processing_Stages cps ON cp.Claim_Stage_ID = cps.Claim_Stage_ID\nGROUP BY cps.claim_status_name\nORDER BY claim_count DESC\nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the description of the current status of claims from the 'claims_processing_stages' table based on a specific status name. The placeholder in the WHERE clause represents the name of the claim status being queried.\",\n        \"virtual_table\": \"SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT cps.Claim_Status_Name, COUNT(cp.Claim_ID) AS Claim_Count\nFROM Claims_Processing cp\nJOIN Claims_Processing_Stages cps ON cp.Claim_Stage_ID = cps.Claim_Stage_ID\nGROUP BY cps.Claim_Status_Name\nORDER BY Claim_Count DESC\nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT cps.Claim_Status_Name, COUNT(cp.Claim_ID) AS Claim_Count \nFROM Claims_Processing cps \nJOIN Claims_Processing_Stages cpsg ON cps.Claim_Stage_ID = cpsg.Claim_Stage_ID \nJOIN Claim_Headers ch ON cps.Claim_ID = ch.Claim_Header_ID \nGROUP BY cps.Claim_Stage_ID \nORDER BY Claim_Count DESC \nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves the detailed information of the customer associated with the claim that has the highest amount claimed. It joins the 'Claim_Headers' table with the 'Policies' table to link claims to policies, and then joins with the 'Customers' table to get the customer details. The placeholder in the WHERE clause represents the maximum amount claimed across all claims.\",\n        \"virtual_table\": \"SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1531",
        "c_low": "SELECT c.Customer_Details \nFROM Customers c \nJOIN Policies p ON c.Customer_ID = p.Customer_ID \nWHERE p.Policy_Type_Code = 'deputy';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the types of insurance policies from the 'Policies' table that are associated with a specific customer. The placeholder in the WHERE clause represents the detailed information about the customer.\",\n        \"virtual_table\": \"SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer details from the 'Customers' table, excluding those customers who have associated insurance policies. The query uses an EXCEPT clause to filter out customers that are linked to any policies, ensuring that only customers without policies are displayed.\",\n        \"virtual_table\": \"SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT t2.Customer_Details FROM Policies AS t1 JOIN Customers AS t2 ON t1.Customer_ID = t2.Customer_ID WHERE t1.Policy_Type_Code = 'deputy'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer details from the 'Customers' table, specifically for those customers who have insurance policies. The data is aggregated by customer details, sorted in descending order based on the number of policies they hold, and limited to a specified number of results. The placeholder in the LIMIT clause represents the maximum number of customer details to return.\",\n        \"virtual_table\": \"SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of customer details from the 'Customers' table for those customers who hold a specific type of insurance policy. The placeholder in the WHERE clause represents the policy type code that is being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT t2.Customer_Details FROM Policies AS t1 JOIN Customers AS t2 ON t1.Customer_ID = t2.Customer_ID WHERE t1.Policy_Type_Code = 'deputy'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of distinct customer details from the 'Customers' table for those customers who have specific types of insurance policies. The placeholders in the WHERE clause represent the policy type codes that the user can specify.\",\n        \"virtual_table\": \"SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  [PLACEHOLDER-TYPE:STRING] OR t1.policy_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique insurance policy types from the 'Policies' table that have been issued more than a specified number of times. The placeholder in the HAVING clause represents the minimum count of policies required to be included in the results.\",\n        \"virtual_table\": \"SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT c.Customer_Details \nFROM Customers c \nJOIN Policies p ON c.Customer_ID = p.Customer_ID \nWHERE p.Policy_Type_Code IN (\n    SELECT policy_type_code \n    FROM Policies \n    GROUP BY policy_type_code \n    HAVING count(*) > 0\n)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique insurance policy types from the 'Policies' table that have been issued more than a specified number of times. The placeholder in the HAVING clause represents the minimum count of policies required to be included in the results.\",\n        \"virtual_table\": \"SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT t2.Customer_Details FROM Policies AS t1 JOIN Customers AS t2 ON t1.Customer_ID = t2.Customer_ID WHERE t1.Policy_Type_Code = 'deputy'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of distinct customer details from the 'Customers' table for those customers who have specific types of insurance policies. The placeholders in the WHERE clause represent the policy type codes that the user can specify.\",\n        \"virtual_table\": \"SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  [PLACEHOLDER-TYPE:STRING] OR t1.policy_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer details from the 'Customers' table, specifically for those customers who have insurance policies. The data is aggregated by customer details, sorted in descending order based on the number of policies they hold, and limited to a specified number of results. The placeholder in the LIMIT clause represents the maximum number of customer details to return.\",\n        \"virtual_table\": \"SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a distinct list of customer details from the 'Customers' table for those customers who hold a specific type of insurance policy. The placeholder in the WHERE clause represents the policy type code that is being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Customers.Customer_Details \nFROM Customers \nJOIN Policies ON Customers.Customer_ID = Policies.Customer_ID \nWHERE Policies.Policy_Type_Code = 'deputy';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1533",
        "c_low": "SELECT customer_details FROM customers AS c JOIN policies AS p ON c.customer_id = p.customer_id WHERE p.policy_type_code IN ('deputy', 'uniformed')",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the types of insurance policies from the 'Policies' table that are associated with a specific customer. The placeholder in the WHERE clause represents the detailed information about the customer.\",\n        \"virtual_table\": \"SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer details from the 'Customers' table, excluding those customers who have associated insurance policies. The query uses an EXCEPT clause to filter out customers that are linked to any policies, ensuring that only customers without policies are displayed.\",\n        \"virtual_table\": \"SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT t2.Customer_Details \nFROM Policies AS t1 \nJOIN Customers AS t2 ON t1.Customer_ID = t2.Customer_ID \nWHERE t1.Policy_Type_Code IN ('deputy', 'uniformed')",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a distinct list of customer details from the 'Customers' table for those customers who hold a specific type of insurance policy. The placeholder in the WHERE clause represents the policy type code that is being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer details from the 'Customers' table, specifically for those customers who have insurance policies. The data is aggregated by customer details, sorted in descending order based on the number of policies they hold, and limited to a specified number of results. The placeholder in the LIMIT clause represents the maximum number of customer details to return.\",\n        \"virtual_table\": \"SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT t2.Customer_Details FROM Policies AS t1 JOIN Customers AS t2 ON t1.Customer_ID = t2.Customer_ID WHERE t1.Policy_Type_Code = 'deputy' OR t1.Policy_Type_Code = 'uniformed'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of distinct customer details from the 'Customers' table for those customers who have specific types of insurance policies. The placeholders in the WHERE clause represent the policy type codes that the user can specify.\",\n        \"virtual_table\": \"SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  [PLACEHOLDER-TYPE:STRING] OR t1.policy_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique insurance policy types from the 'Policies' table that have been issued more than a specified number of times. The placeholder in the HAVING clause represents the minimum count of policies required to be included in the results.\",\n        \"virtual_table\": \"SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT c.Customer_Details \nFROM Customers c \nJOIN Policies p ON c.Customer_ID = p.Customer_ID \nWHERE p.Policy_Type_Code IN ('deputy', 'uniformed');",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique insurance policy types from the 'Policies' table that have been issued more than a specified number of times. The placeholder in the HAVING clause represents the minimum count of policies required to be included in the results.\",\n        \"virtual_table\": \"SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT t2.Customer_Details FROM Policies AS t1 JOIN Customers AS t2 ON t1.Customer_ID = t2.Customer_ID WHERE t1.Policy_Type_Code = 'deputy' OR t1.Policy_Type_Code = 'uniformed'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of distinct customer details from the 'Customers' table for those customers who have specific types of insurance policies. The placeholders in the WHERE clause represent the policy type codes that the user can specify.\",\n        \"virtual_table\": \"SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  [PLACEHOLDER-TYPE:STRING] OR t1.policy_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of customer details from the 'Customers' table for those customers who hold a specific type of insurance policy. The placeholder in the WHERE clause represents the policy type code that is being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of customer details from the 'Customers' table, specifically for those customers who have insurance policies. The data is aggregated by customer details, sorted in descending order based on the number of policies they hold, and limited to a specified number of results. The placeholder in the LIMIT clause represents the maximum number of customer details to return.\",\n        \"virtual_table\": \"SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT c.Customer_Details \nFROM Customers c \nJOIN Policies p ON c.Customer_ID = p.Customer_ID \nWHERE p.Policy_Type_Code IN ('deputy', 'uniformed');",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1535",
        "c_low": "SELECT Customers.Customer_Details AS Customer_Name, Staff.Staff_Details AS Staff_Name \nFROM Customers, Staff;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Customers.Customer_Details AS Customer_Name, Staff.Staff_Details AS Staff_Name\nFROM Customers, Staff;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT Customers.Customer_Details AS Customer_Name, Staff.Staff_Details AS Staff_Name \nFROM Customers, Staff;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT Customers.Customer_Details AS Customer_Name, Staff.Staff_Details AS Staff_Name \nFROM Customers, Staff;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT Customers.Customer_Details AS Customer_Name, Staff.Staff_Details AS Staff_Name \nFROM Customers, Staff;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT Customers.Customer_Details AS Customer_Name, Staff.Staff_Details AS Staff_Name \nFROM Customers, Staff;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1536",
        "c_low": "SELECT Customers.Customer_Details AS Customer_Name, Staff.Staff_Details AS Staff_Name \nFROM Customers, Staff;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Customers.Customer_Details AS Customer_Name, Staff.Staff_Details AS Staff_Name \nFROM Customers, Staff;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT Customers.Customer_Details AS Customer_Name, Staff.Staff_Details AS Staff_Name\nFROM Customers, Staff;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT Customers.Customer_Details AS Customer_Name, Staff.Staff_Details AS Staff_Name \nFROM Customers, Staff;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT Customers.Customer_Details AS Customer_Name, Staff.Staff_Details AS Staff_Name \nFROM Customers, Staff;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT Customers.Customer_Details AS Customer_Name, Staff.Staff_Details AS Staff_Name\nFROM Customers, Staff;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1545",
        "c_low": "SELECT c.Customer_ID, c.Customer_Details, p.Policy_ID, p.Start_Date FROM Customers AS c JOIN Policies AS p ON c.Customer_ID = p.Customer_ID ORDER BY p.Start_Date DESC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the types of insurance policies from the 'Policies' table that are associated with a specific customer. The placeholder in the WHERE clause represents the detailed information about the customer.\",\n        \"virtual_table\": \"SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer details from the 'Customers' table, excluding those customers who have associated insurance policies. The query uses an EXCEPT clause to filter out customers that are linked to any policies, ensuring that only customers without policies are displayed.\",\n        \"virtual_table\": \"SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id\"\n    }\n}\n",
        "c_mid": "SELECT t2.Customer_Details FROM Policies AS t1 JOIN Customers AS t2 ON t1.Customer_ID = t2.Customer_ID ORDER BY t1.Start_Date DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer details from the 'Customers' table, specifically for those customers who have insurance policies. The data is aggregated by customer details, sorted in descending order based on the number of policies they hold, and limited to a specified number of results. The placeholder in the LIMIT clause represents the maximum number of customer details to return.\",\n        \"virtual_table\": \"SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of customer details from the 'Customers' table for those customers who hold a specific type of insurance policy. The placeholder in the WHERE clause represents the policy type code that is being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table retrieves the detailed information of the customer associated with the claim that has the highest amount claimed. It joins the 'Claim_Headers' table with the 'Policies' table to link claims to policies, and then joins with the 'Customers' table to get the customer details. The placeholder in the WHERE clause represents the maximum amount claimed across all claims.\",\n        \"virtual_table\": \"SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)\"\n    }\n}\n",
        "c_high": "SELECT t2.Customer_Details FROM Policies AS t1 JOIN Customers AS t2 ON t1.Customer_ID = t2.Customer_ID WHERE t1.Start_Date = (SELECT MAX(Start_Date) FROM Policies)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of distinct customer details from the 'Customers' table for those customers who have specific types of insurance policies. The placeholders in the WHERE clause represent the policy type codes that the user can specify.\",\n        \"virtual_table\": \"SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  [PLACEHOLDER-TYPE:STRING] OR t1.policy_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT Customers.Customer_ID, Customers.Customer_Details \nFROM Customers \nJOIN Policies ON Customers.Customer_ID = Policies.Customer_ID \nWHERE Policies.Start_Date = (SELECT MAX(Start_Date) FROM Policies);",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.start_date = (SELECT MAX(start_date) FROM policies)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the types of insurance policies from the 'Policies' table that are associated with a specific customer. The placeholder in the WHERE clause represents the detailed information about the customer.\",\n        \"virtual_table\": \"SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer details from the 'Customers' table, specifically for those customers who have insurance policies. The data is aggregated by customer details, sorted in descending order based on the number of policies they hold, and limited to a specified number of results. The placeholder in the LIMIT clause represents the maximum number of customer details to return.\",\n        \"virtual_table\": \"SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of distinct customer details from the 'Customers' table for those customers who have specific types of insurance policies. The placeholders in the WHERE clause represent the policy type codes that the user can specify.\",\n        \"virtual_table\": \"SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  [PLACEHOLDER-TYPE:STRING] OR t1.policy_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT t3.Customer_Details FROM Policies AS t1 JOIN Customers AS t3 ON t1.Customer_ID = t3.Customer_ID WHERE t1.Start_Date = (SELECT max(Start_Date) FROM Policies)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves the detailed information of the customer associated with the claim that has the highest amount claimed. It joins the 'Claim_Headers' table with the 'Policies' table to link claims to policies, and then joins with the 'Customers' table to get the customer details. The placeholder in the WHERE clause represents the maximum amount claimed across all claims.\",\n        \"virtual_table\": \"SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1546",
        "c_low": "SELECT c.Customer_ID, c.Customer_Details, p.Start_Date \nFROM Customers AS c \nJOIN Policies AS p ON c.Customer_ID = p.Customer_ID \nORDER BY p.Start_Date DESC \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the types of insurance policies from the 'Policies' table that are associated with a specific customer. The placeholder in the WHERE clause represents the detailed information about the customer.\",\n        \"virtual_table\": \"SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT t2.Customer_Details FROM Policies AS t1 JOIN Customers AS t2 ON t1.Customer_ID = t2.Customer_ID ORDER BY t1.Start_Date DESC LIMIT 1",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer details from the 'Customers' table, specifically for those customers who have insurance policies. The data is aggregated by customer details, sorted in descending order based on the number of policies they hold, and limited to a specified number of results. The placeholder in the LIMIT clause represents the maximum number of customer details to return.\",\n        \"virtual_table\": \"SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of customer details from the 'Customers' table for those customers who hold a specific type of insurance policy. The placeholder in the WHERE clause represents the policy type code that is being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table retrieves the detailed information of the customer associated with the claim that has the highest amount claimed. It joins the 'Claim_Headers' table with the 'Policies' table to link claims to policies, and then joins with the 'Customers' table to get the customer details. The placeholder in the WHERE clause represents the maximum amount claimed across all claims.\",\n        \"virtual_table\": \"SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)\"\n    }\n}\n",
        "c_high": "SELECT t2.Customer_Details FROM Policies AS t1 JOIN Customers AS t2 ON t1.Customer_ID = t2.Customer_ID ORDER BY t1.Start_Date DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of distinct customer details from the 'Customers' table for those customers who have specific types of insurance policies. The placeholders in the WHERE clause represent the policy type codes that the user can specify.\",\n        \"virtual_table\": \"SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  [PLACEHOLDER-TYPE:STRING] OR t1.policy_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT Customers.Customer_ID, Customers.Customer_Details, Policies.Start_Date\nFROM Customers\nJOIN Policies ON Customers.Customer_ID = Policies.Customer_ID\nORDER BY Policies.Start_Date DESC\nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT t2.Customer_Details FROM Policies AS t1 JOIN Customers AS t2 ON t1.Customer_ID = t2.Customer_ID ORDER BY t1.Start_Date DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer details from the 'Customers' table, specifically for those customers who have insurance policies. The data is aggregated by customer details, sorted in descending order based on the number of policies they hold, and limited to a specified number of results. The placeholder in the LIMIT clause represents the maximum number of customer details to return.\",\n        \"virtual_table\": \"SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of distinct customer details from the 'Customers' table for those customers who have specific types of insurance policies. The placeholders in the WHERE clause represent the policy type codes that the user can specify.\",\n        \"virtual_table\": \"SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  [PLACEHOLDER-TYPE:STRING] OR t1.policy_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a distinct list of customer details from the 'Customers' table for those customers who hold a specific type of insurance policy. The placeholder in the WHERE clause represents the policy type code that is being queried.\",\n        \"virtual_table\": \"SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT t2.Customer_Details FROM Policies AS t1 JOIN Customers AS t2 ON t1.Customer_ID = t2.Customer_ID WHERE t1.Start_Date = (SELECT max(Start_Date) FROM Policies)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves the detailed information of the customer associated with the claim that has the highest amount claimed. It joins the 'Claim_Headers' table with the 'Policies' table to link claims to policies, and then joins with the 'Customers' table to get the customer details. The placeholder in the WHERE clause represents the maximum amount claimed across all claims.\",\n        \"virtual_table\": \"SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1549",
        "c_low": "SELECT COUNT(*) AS number_of_customers FROM Accounts;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT COUNT(DISTINCT customer_id) AS number_of_customers FROM Accounts;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of accounts associated with each customer from the 'Accounts' table. The placeholder in the SELECT statement represents the customer identifier, which is grouped to show the number of accounts per customer.\",\n        \"virtual_table\": \"SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of customers grouped by their gender from the 'Customers' table. The placeholder in the SELECT clause represents the gender of the customers.\",\n        \"virtual_table\": \"SELECT gender ,  count(*) FROM Customers GROUP BY gender\"\n    }\n}\n",
        "c_high": "SELECT COUNT(DISTINCT customer_id) AS number_of_customers FROM Accounts;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer IDs along with their first and last names from the 'Customers' table, specifically for those customers who have accounts. The results are grouped by customer ID and ordered by the number of accounts each customer has, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides details about customer accounts from the 'Accounts' table, including the account ID, the date the account was opened, the account name, and any additional account details. The results are filtered based on the first name of the customer from the 'Customers' table, represented by a placeholder for string values.\",\n        \"virtual_table\": \"SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of customer first names along with their unique identifiers from the 'Accounts' and 'Customers' tables. It filters the results to include only those customers who have a minimum number of associated accounts, as specified by the placeholder in the HAVING clause.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT COUNT(DISTINCT customer_id) AS number_of_customers FROM Accounts;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of accounts associated with each customer from the 'Accounts' table. The placeholder in the SELECT statement represents the customer identifier, which is grouped to show the number of accounts per customer.\",\n        \"virtual_table\": \"SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of customers grouped by their gender from the 'Customers' table. The placeholder in the SELECT clause represents the gender of the customers.\",\n        \"virtual_table\": \"SELECT gender ,  count(*) FROM Customers GROUP BY gender\"\n    }\n}\n",
        "t_2": "SELECT COUNT(DISTINCT customer_id) AS number_of_customers FROM Accounts;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer IDs along with their first and last names from the 'Customers' table, specifically for those customers who have accounts. The results are grouped by customer ID and ordered by the number of accounts each customer has, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides details about customer accounts from the 'Accounts' table, including the account ID, the date the account was opened, the account name, and any additional account details. The results are filtered based on the first name of the customer from the 'Customers' table, represented by a placeholder for string values.\",\n        \"virtual_table\": \"SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of customer first names along with their unique identifiers from the 'Accounts' and 'Customers' tables. It filters the results to include only those customers who have a minimum number of associated accounts, as specified by the placeholder in the HAVING clause.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(*) AS number_of_customers FROM Accounts;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1553",
        "c_low": "SELECT Accounts.account_id, Accounts.account_name, Accounts.other_account_details \nFROM Accounts \nJOIN Customers ON Accounts.customer_id = Customers.customer_id \nWHERE Customers.customer_first_name = 'Meaghan';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT A.account_id, A.account_name, A.other_account_details \nFROM Accounts AS A \nJOIN Customers AS C ON A.customer_id = C.customer_id \nWHERE C.customer_first_name = 'Meaghan';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of customers associated with a specific account name from the 'Accounts' and 'Customers' tables. The placeholder in the WHERE clause represents the account name being queried.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of customers' first and last names along with their phone numbers from the 'Customers' table, specifically for those who have an associated account in the 'Accounts' table. The placeholders in the JOIN clause represent the relationship between customers and their accounts.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of accounts associated with each customer from the 'Accounts' table. The placeholder in the SELECT statement represents the customer identifier, which is grouped to show the number of accounts per customer.\",\n        \"virtual_table\": \"SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id\"\n    }\n}\n",
        "c_high": "SELECT T1.account_id, T1.account_name, T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Meaghan'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides details about customer accounts from the 'Accounts' table, including the account ID, the date the account was opened, the account name, and any additional account details. The results are filtered based on the first name of the customer from the 'Customers' table, represented by a placeholder for string values.\",\n        \"virtual_table\": \"SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the account names and additional details of accounts associated with customers from the 'Accounts' table, filtered by the first and last names of the customers. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of customer IDs along with their first and last names from the 'Customers' table, specifically for those customers who have accounts. The results are grouped by customer ID and ordered by the number of accounts each customer has, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT a.account_id, a.account_name, a.other_account_details \nFROM Accounts a \nJOIN Customers c ON a.customer_id = c.customer_id \nWHERE c.customer_first_name = 'Meaghan';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of accounts associated with each customer from the 'Accounts' table. The placeholder in the SELECT statement represents the customer identifier, which is grouped to show the number of accounts per customer.\",\n        \"virtual_table\": \"SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id\"\n    }\n}\n",
        "t_2": "SELECT T1.account_id, T1.account_name, T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Meaghan'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides details about customer accounts from the 'Accounts' table, including the account ID, the date the account was opened, the account name, and any additional account details. The results are filtered based on the first name of the customer from the 'Customers' table, represented by a placeholder for string values.\",\n        \"virtual_table\": \"SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the account names and additional details of accounts associated with customers from the 'Accounts' table, filtered by the first and last names of the customers. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of customer IDs along with their first and last names from the 'Customers' table, specifically for those customers who have accounts. The results are grouped by customer ID and ordered by the number of accounts each customer has, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Accounts.account_id, Accounts.account_name, Accounts.other_account_details \nFROM Accounts \nJOIN Customers ON Accounts.customer_id = Customers.customer_id \nWHERE Customers.customer_first_name = 'Meaghan';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1556",
        "c_low": "SELECT Accounts.account_name, Accounts.other_account_details \nFROM Customers \nJOIN Accounts ON Customers.customer_id = Accounts.customer_id \nWHERE Customers.customer_first_name = 'Meaghan' AND Customers.customer_last_name = 'Keeling';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT A.*, C.* FROM Accounts AS A JOIN Customers AS C ON A.customer_id = C.customer_id WHERE C.customer_first_name = 'Meaghan' AND C.customer_last_name = 'Keeling';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the first and last names of customers associated with a specific account name from the 'Accounts' and 'Customers' tables. The placeholder in the WHERE clause represents the account name being queried.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of customers' first and last names along with their phone numbers from the 'Customers' table, specifically for those who have an associated account in the 'Accounts' table. The placeholders in the JOIN clause represent the relationship between customers and their accounts.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\"\n    }\n}\n",
        "c_high": "SELECT T1.account_name, T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Meaghan' AND T2.customer_last_name = 'Keeling'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the account names and additional details of accounts associated with customers from the 'Accounts' table, filtered by the first and last names of the customers. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides details about customer accounts from the 'Accounts' table, including the account ID, the date the account was opened, the account name, and any additional account details. The results are filtered based on the first name of the customer from the 'Customers' table, represented by a placeholder for string values.\",\n        \"virtual_table\": \"SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of customer first names along with their unique identifiers from the 'Accounts' and 'Customers' tables. It filters the results to include only those customers who have a minimum number of associated accounts, as specified by the placeholder in the HAVING clause.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Accounts.account_name, Accounts.other_account_details \nFROM Customers \nJOIN Accounts ON Customers.customer_id = Accounts.customer_id \nWHERE Customers.customer_first_name = 'Meaghan' AND Customers.customer_last_name = 'Keeling';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T1.account_name, T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Meaghan' AND T2.customer_last_name = 'Keeling'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the account names and additional details of accounts associated with customers from the 'Accounts' table, filtered by the first and last names of the customers. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides details about customer accounts from the 'Accounts' table, including the account ID, the date the account was opened, the account name, and any additional account details. The results are filtered based on the first name of the customer from the 'Customers' table, represented by a placeholder for string values.\",\n        \"virtual_table\": \"SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the first and last names of customers associated with a specific account name from the 'Accounts' and 'Customers' tables. The placeholder in the WHERE clause represents the account name being queried.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Accounts.account_name, Accounts.other_account_details \nFROM Customers \nJOIN Accounts ON Customers.customer_id = Accounts.customer_id \nWHERE Customers.customer_first_name = 'Meaghan' AND Customers.customer_last_name = 'Keeling';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1558",
        "c_low": "SELECT customer_first_name || ' ' || customer_last_name AS full_name\nFROM Customers\nJOIN Accounts ON Customers.customer_id = Accounts.customer_id\nWHERE Accounts.account_name = '900';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT T2.customer_first_name, T2.customer_last_name \nFROM Accounts AS T1 \nJOIN Customers AS T2 ON T1.customer_id = T2.customer_id \nWHERE T1.account_name = '900'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a distinct list of customers' first and last names along with their phone numbers from the 'Customers' table, specifically for those who have an associated account in the 'Accounts' table. The placeholders in the JOIN clause represent the relationship between customers and their accounts.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the first and last names of customers associated with a specific account name from the 'Accounts' and 'Customers' tables. The placeholder in the WHERE clause represents the account name being queried.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT customer_first_name || ' ' || customer_last_name AS full_name \nFROM Customers AS C \nJOIN Accounts AS A ON C.customer_id = A.customer_id \nWHERE A.account_name = '900';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer IDs along with their first and last names from the 'Customers' table, specifically for those customers who have accounts. The results are grouped by customer ID and ordered by the number of accounts each customer has, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the account names and additional details of accounts associated with customers from the 'Accounts' table, filtered by the first and last names of the customers. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of customer first names along with their unique identifiers from the 'Accounts' and 'Customers' tables. It filters the results to include only those customers who have a minimum number of associated accounts, as specified by the placeholder in the HAVING clause.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT customer_first_name || ' ' || customer_last_name AS full_name\nFROM Customers\nJOIN Accounts ON Customers.customer_id = Accounts.customer_id\nWHERE Accounts.account_name = '900';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T2.customer_first_name, T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.account_name = '900'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer IDs along with their first and last names from the 'Customers' table, specifically for those customers who have accounts. The results are grouped by customer ID and ordered by the number of accounts each customer has, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a distinct list of customers' first and last names along with their phone numbers from the 'Customers' table, specifically for those who have an associated account in the 'Accounts' table. The placeholders in the JOIN clause represent the relationship between customers and their accounts.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the first and last names of customers associated with a specific account name from the 'Accounts' and 'Customers' tables. The placeholder in the WHERE clause represents the account name being queried.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT customer_first_name || ' ' || customer_last_name AS full_name\nFROM Customers\nJOIN Accounts ON Customers.customer_id = Accounts.customer_id\nWHERE Accounts.account_name = '900';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1568",
        "c_low": "SELECT c.customer_id, c.customer_first_name || ' ' || c.customer_last_name AS full_name\nFROM Customers c\nJOIN Accounts a ON c.customer_id = a.customer_id\nGROUP BY c.customer_id\nORDER BY COUNT(a.account_id) DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT T1.customer_id, T2.customer_first_name || ' ' || T2.customer_last_name AS full_name \nFROM (SELECT count(*) AS account_count, customer_id \n      FROM Accounts \n      GROUP BY customer_id) AS T1 \nJOIN Customers AS T2 ON T1.customer_id = T2.customer_id \nORDER BY T1.account_count DESC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of accounts associated with each customer from the 'Accounts' table. The placeholder in the SELECT statement represents the customer identifier, which is grouped to show the number of accounts per customer.\",\n        \"virtual_table\": \"SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the first and last names of customers associated with a specific account name from the 'Accounts' and 'Customers' tables. The placeholder in the WHERE clause represents the account name being queried.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT T1.customer_id, T2.customer_first_name || ' ' || T2.customer_last_name AS full_name \nFROM Accounts AS T1 \nJOIN Customers AS T2 ON T1.customer_id = T2.customer_id \nGROUP BY T1.customer_id \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer IDs along with their first and last names from the 'Customers' table, specifically for those customers who have accounts. The results are grouped by customer ID and ordered by the number of accounts each customer has, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer first names along with their unique identifiers from the 'Accounts' and 'Customers' tables. It filters the results to include only those customers who have a minimum number of associated accounts, as specified by the placeholder in the HAVING clause.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the account names and additional details of accounts associated with customers from the 'Accounts' table, filtered by the first and last names of the customers. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT c.customer_id, c.customer_first_name || ' ' || c.customer_last_name AS full_name \nFROM Customers c \nJOIN (SELECT count(*) AS account_count, customer_id \n      FROM Accounts \n      GROUP BY customer_id) AS account_counts \nON c.customer_id = account_counts.customer_id \nORDER BY account_counts.account_count DESC \nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of accounts associated with each customer from the 'Accounts' table. The placeholder in the SELECT statement represents the customer identifier, which is grouped to show the number of accounts per customer.\",\n        \"virtual_table\": \"SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id\"\n    }\n}\n",
        "t_2": "SELECT T1.customer_id, T2.customer_first_name || ' ' || T2.customer_last_name AS full_name \nFROM Accounts AS T1 \nJOIN Customers AS T2 ON T1.customer_id = T2.customer_id \nGROUP BY T1.customer_id \nORDER BY count(*) DESC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer IDs along with their first and last names from the 'Customers' table, specifically for those customers who have accounts. The results are grouped by customer ID and ordered by the number of accounts each customer has, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer first names along with their unique identifiers from the 'Accounts' and 'Customers' tables. It filters the results to include only those customers who have a minimum number of associated accounts, as specified by the placeholder in the HAVING clause.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the first and last names of customers associated with a specific account name from the 'Accounts' and 'Customers' tables. The placeholder in the WHERE clause represents the account name being queried.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT c.customer_id, c.customer_first_name || ' ' || c.customer_last_name AS full_name\nFROM Customers c\nJOIN Accounts a ON c.customer_id = a.customer_id\nGROUP BY c.customer_id\nORDER BY COUNT(a.account_id) DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1569",
        "c_low": "SELECT Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, COUNT(Accounts.account_id) AS number_of_accounts\nFROM Customers\nLEFT JOIN Accounts ON Customers.customer_id = Accounts.customer_id\nGROUP BY Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT C.customer_id, C.customer_first_name, C.customer_last_name, COUNT(A.account_id) AS number_of_accounts \nFROM Customers AS C \nLEFT JOIN Accounts AS A ON C.customer_id = A.customer_id \nGROUP BY C.customer_id, C.customer_first_name, C.customer_last_name;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a distinct list of customers' first and last names along with their phone numbers from the 'Customers' table, specifically for those who have an associated account in the 'Accounts' table. The placeholders in the JOIN clause represent the relationship between customers and their accounts.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of accounts associated with each customer from the 'Accounts' table. The placeholder in the SELECT statement represents the customer identifier, which is grouped to show the number of accounts per customer.\",\n        \"virtual_table\": \"SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the first and last names of customers associated with a specific account name from the 'Accounts' and 'Customers' tables. The placeholder in the WHERE clause represents the account name being queried.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT C.customer_id, C.customer_first_name, C.customer_last_name, COUNT(A.account_id) AS number_of_accounts \nFROM Customers AS C \nLEFT JOIN Accounts AS A ON C.customer_id = A.customer_id \nGROUP BY C.customer_id, C.customer_first_name, C.customer_last_name;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer IDs along with their first and last names from the 'Customers' table, specifically for those customers who have accounts. The results are grouped by customer ID and ordered by the number of accounts each customer has, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides details about customer accounts from the 'Accounts' table, including the account ID, the date the account was opened, the account name, and any additional account details. The results are filtered based on the first name of the customer from the 'Customers' table, represented by a placeholder for string values.\",\n        \"virtual_table\": \"SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the account names and additional details of accounts associated with customers from the 'Accounts' table, filtered by the first and last names of the customers. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT c.customer_id, c.customer_first_name, c.customer_last_name, COUNT(a.account_id) AS number_of_accounts\nFROM Customers c\nLEFT JOIN Accounts a ON c.customer_id = a.customer_id\nGROUP BY c.customer_id;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of accounts associated with each customer from the 'Accounts' table. The placeholder in the SELECT statement represents the customer identifier, which is grouped to show the number of accounts per customer.\",\n        \"virtual_table\": \"SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id\"\n    }\n}\n",
        "t_2": "SELECT C.customer_id, C.customer_first_name, C.customer_last_name, COUNT(A.account_id) AS number_of_accounts \nFROM Customers AS C \nLEFT JOIN Accounts AS A ON C.customer_id = A.customer_id \nGROUP BY C.customer_id, C.customer_first_name, C.customer_last_name;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer IDs along with their first and last names from the 'Customers' table, specifically for those customers who have accounts. The results are grouped by customer ID and ordered by the number of accounts each customer has, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides details about customer accounts from the 'Accounts' table, including the account ID, the date the account was opened, the account name, and any additional account details. The results are filtered based on the first name of the customer from the 'Customers' table, represented by a placeholder for string values.\",\n        \"virtual_table\": \"SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the account names and additional details of accounts associated with customers from the 'Accounts' table, filtered by the first and last names of the customers. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, COUNT(Accounts.account_id) AS number_of_accounts\nFROM Customers\nLEFT JOIN Accounts ON Customers.customer_id = Accounts.customer_id\nGROUP BY Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1570",
        "c_low": "SELECT Customers.customer_id, Customers.customer_first_name || ' ' || Customers.customer_last_name AS full_name, COUNT(Accounts.account_id) AS account_count\nFROM Customers\nLEFT JOIN Accounts ON Customers.customer_id = Accounts.customer_id\nGROUP BY Customers.customer_id, full_name;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT C.customer_id, C.customer_first_name || ' ' || C.customer_last_name AS full_name, COUNT(A.account_id) AS account_count \nFROM Customers AS C \nLEFT JOIN Accounts AS A ON C.customer_id = A.customer_id \nGROUP BY C.customer_id, C.customer_first_name, C.customer_last_name;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of accounts associated with each customer from the 'Accounts' table. The placeholder in the SELECT statement represents the customer identifier, which is grouped to show the number of accounts per customer.\",\n        \"virtual_table\": \"SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the first and last names of customers associated with a specific account name from the 'Accounts' and 'Customers' tables. The placeholder in the WHERE clause represents the account name being queried.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a distinct list of customers' first and last names along with their phone numbers from the 'Customers' table, specifically for those who have an associated account in the 'Accounts' table. The placeholders in the JOIN clause represent the relationship between customers and their accounts.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\"\n    }\n}\n",
        "c_high": "SELECT C.customer_id, C.customer_first_name || ' ' || C.customer_last_name AS full_name, COUNT(A.account_id) AS account_count \nFROM Customers AS C \nLEFT JOIN Accounts AS A ON C.customer_id = A.customer_id \nGROUP BY C.customer_id, C.customer_first_name, C.customer_last_name;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer IDs along with their first and last names from the 'Customers' table, specifically for those customers who have accounts. The results are grouped by customer ID and ordered by the number of accounts each customer has, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the account names and additional details of accounts associated with customers from the 'Accounts' table, filtered by the first and last names of the customers. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of customer first names along with their unique identifiers from the 'Accounts' and 'Customers' tables. It filters the results to include only those customers who have a minimum number of associated accounts, as specified by the placeholder in the HAVING clause.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT c.customer_first_name || ' ' || c.customer_last_name AS full_name, c.customer_id, COUNT(a.account_id) AS account_count\nFROM Customers c\nLEFT JOIN Accounts a ON c.customer_id = a.customer_id\nGROUP BY c.customer_id;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of accounts associated with each customer from the 'Accounts' table. The placeholder in the SELECT statement represents the customer identifier, which is grouped to show the number of accounts per customer.\",\n        \"virtual_table\": \"SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id\"\n    }\n}\n",
        "t_2": "SELECT C.customer_id, C.customer_first_name || ' ' || C.customer_last_name AS full_name, COUNT(A.account_id) AS account_count \nFROM Customers AS C \nLEFT JOIN Accounts AS A ON C.customer_id = A.customer_id \nGROUP BY C.customer_id, C.customer_first_name, C.customer_last_name;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer IDs along with their first and last names from the 'Customers' table, specifically for those customers who have accounts. The results are grouped by customer ID and ordered by the number of accounts each customer has, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the account names and additional details of accounts associated with customers from the 'Accounts' table, filtered by the first and last names of the customers. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of customer first names along with their unique identifiers from the 'Accounts' and 'Customers' tables. It filters the results to include only those customers who have a minimum number of associated accounts, as specified by the placeholder in the HAVING clause.\",\n        \"virtual_table\": \"SELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Customers.customer_id, Customers.customer_first_name || ' ' || Customers.customer_last_name AS full_name, COUNT(Accounts.account_id) AS account_count\nFROM Customers\nLEFT JOIN Accounts ON Customers.customer_id = Accounts.customer_id\nGROUP BY Customers.customer_id, full_name;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1579",
        "c_low": "SELECT account_id, COUNT(*) AS transaction_count FROM Financial_Transactions GROUP BY account_id",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of account identifiers from the 'Financial_Transactions' table, grouped by account ID. The results are ordered by the number of transactions associated with each account, allowing users to see which accounts have the most activity. The placeholder in the LIMIT clause represents the maximum number of accounts to return.\",\n        \"virtual_table\": \"SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of financial transactions associated with a specific account name from the 'Financial_Transactions' and 'Accounts' tables. The placeholder in the WHERE clause represents the name of the account being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT account_id, COUNT(*) AS transaction_count FROM Financial_Transactions GROUP BY account_id",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of accounts associated with each customer from the 'Accounts' table. The placeholder in the SELECT statement represents the customer identifier, which is grouped to show the number of accounts per customer.\",\n        \"virtual_table\": \"SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total number of financial transactions associated with each invoice from the 'Financial_Transactions' table. The placeholder in the SELECT clause represents the invoice number, while the count function aggregates the number of transactions per invoice.\",\n        \"virtual_table\": \"SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total number of invoices associated with each order from the 'Invoices' table. The placeholder in the SELECT clause represents the unique identifier for each order, while the count function aggregates the number of invoices per order.\",\n        \"virtual_table\": \"SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id\"\n    }\n}\n",
        "c_high": "SELECT account_id, COUNT(transaction_id) AS transaction_count FROM Financial_Transactions GROUP BY account_id;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of account IDs and their corresponding account names from the 'Accounts' table, filtered to include only those accounts that have a minimum number of associated financial transactions. The placeholder in the HAVING clause represents the minimum count of transactions required for an account to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer IDs along with their first and last names from the 'Customers' table, specifically for those customers who have accounts. The results are grouped by customer ID and ordered by the number of accounts each customer has, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT account_id, COUNT(transaction_id) AS transaction_count FROM Financial_Transactions GROUP BY account_id",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of account identifiers from the 'Financial_Transactions' table, grouped by account ID. The results are ordered by the number of transactions associated with each account, allowing users to see which accounts have the most activity. The placeholder in the LIMIT clause represents the maximum number of accounts to return.\",\n        \"virtual_table\": \"SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of accounts associated with each customer from the 'Accounts' table. The placeholder in the SELECT statement represents the customer identifier, which is grouped to show the number of accounts per customer.\",\n        \"virtual_table\": \"SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total number of financial transactions associated with each invoice from the 'Financial_Transactions' table. The placeholder in the SELECT clause represents the invoice number, while the count function aggregates the number of transactions per invoice.\",\n        \"virtual_table\": \"SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number\"\n    }\n}\n",
        "t_2": "SELECT account_id, COUNT(transaction_id) AS transaction_count FROM Financial_Transactions GROUP BY account_id;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of account IDs and their corresponding account names from the 'Accounts' table, filtered to include only those accounts that have a minimum number of associated financial transactions. The placeholder in the HAVING clause represents the minimum count of transactions required for an account to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of financial transactions associated with a specific account name from the 'Financial_Transactions' and 'Accounts' tables. The placeholder in the WHERE clause represents the name of the account being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of customer IDs along with their first and last names from the 'Customers' table, specifically for those customers who have accounts. The results are grouped by customer ID and ordered by the number of accounts each customer has, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT account_id, COUNT(transaction_id) AS transaction_count\nFROM Financial_Transactions\nGROUP BY account_id;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1580",
        "c_low": "SELECT account_id, COUNT(*) AS transaction_count FROM Financial_Transactions GROUP BY account_id",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of financial transactions associated with a specific account name from the 'Financial_Transactions' and 'Accounts' tables. The placeholder in the WHERE clause represents the name of the account being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of account identifiers from the 'Financial_Transactions' table, grouped by account ID. The results are ordered by the number of transactions associated with each account, allowing users to see which accounts have the most activity. The placeholder in the LIMIT clause represents the maximum number of accounts to return.\",\n        \"virtual_table\": \"SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT account_id, COUNT(*) AS transaction_count FROM Financial_Transactions GROUP BY account_id;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total number of financial transactions associated with each invoice from the 'Financial_Transactions' table. The placeholder in the SELECT clause represents the invoice number, while the count function aggregates the number of transactions per invoice.\",\n        \"virtual_table\": \"SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of accounts associated with each customer from the 'Accounts' table. The placeholder in the SELECT statement represents the customer identifier, which is grouped to show the number of accounts per customer.\",\n        \"virtual_table\": \"SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of financial transactions from the 'Financial_Transactions' table where the transaction amount exceeds the average transaction amount. The subquery calculates the average transaction amount, and the placeholder in the WHERE clause allows for dynamic filtering based on this average.\",\n        \"virtual_table\": \"SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)\"\n    }\n}\n",
        "c_high": "SELECT account_id, COUNT(transaction_id) AS transaction_count FROM Financial_Transactions GROUP BY account_id;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of account IDs and their corresponding account names from the 'Accounts' table, filtered to include only those accounts that have a minimum number of associated financial transactions. The placeholder in the HAVING clause represents the minimum count of transactions required for an account to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer IDs along with their first and last names from the 'Customers' table, specifically for those customers who have accounts. The results are grouped by customer ID and ordered by the number of accounts each customer has, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT account_id, COUNT(transaction_id) AS transaction_count FROM Financial_Transactions GROUP BY account_id",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of account identifiers from the 'Financial_Transactions' table, grouped by account ID. The results are ordered by the number of transactions associated with each account, allowing users to see which accounts have the most activity. The placeholder in the LIMIT clause represents the maximum number of accounts to return.\",\n        \"virtual_table\": \"SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total number of financial transactions associated with each invoice from the 'Financial_Transactions' table. The placeholder in the SELECT clause represents the invoice number, while the count function aggregates the number of transactions per invoice.\",\n        \"virtual_table\": \"SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of accounts associated with each customer from the 'Accounts' table. The placeholder in the SELECT statement represents the customer identifier, which is grouped to show the number of accounts per customer.\",\n        \"virtual_table\": \"SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id\"\n    }\n}\n",
        "t_2": "SELECT account_id, COUNT(transaction_id) AS transaction_count FROM Financial_Transactions GROUP BY account_id;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of financial transactions associated with a specific account name from the 'Financial_Transactions' and 'Accounts' tables. The placeholder in the WHERE clause represents the name of the account being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of account IDs and their corresponding account names from the 'Accounts' table, filtered to include only those accounts that have a minimum number of associated financial transactions. The placeholder in the HAVING clause represents the minimum count of transactions required for an account to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of customer IDs along with their first and last names from the 'Customers' table, specifically for those customers who have accounts. The results are grouped by customer ID and ordered by the number of accounts each customer has, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT account_id, COUNT(transaction_id) AS transaction_count\nFROM Financial_Transactions\nGROUP BY account_id;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1589",
        "c_low": "SELECT A.account_name, A.account_id, COUNT(T.transaction_id) AS number_of_transactions\nFROM Accounts AS A\nLEFT JOIN Financial_Transactions AS T ON A.account_id = T.account_id\nGROUP BY A.account_id, A.account_name\nORDER BY number_of_transactions DESC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of account identifiers from the 'Financial_Transactions' table, grouped by account ID. The results are ordered by the number of transactions associated with each account, allowing users to see which accounts have the most activity. The placeholder in the LIMIT clause represents the maximum number of accounts to return.\",\n        \"virtual_table\": \"SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of financial transactions associated with a specific account name from the 'Financial_Transactions' and 'Accounts' tables. The placeholder in the WHERE clause represents the name of the account being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT a.account_name, a.account_id, COUNT(ft.transaction_id) AS number_of_transactions\nFROM Accounts a\nLEFT JOIN Financial_Transactions ft ON a.account_id = ft.account_id\nGROUP BY a.account_id, a.account_name;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of accounts associated with each customer from the 'Accounts' table. The placeholder in the SELECT statement represents the customer identifier, which is grouped to show the number of accounts per customer.\",\n        \"virtual_table\": \"SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total number of financial transactions associated with each invoice from the 'Financial_Transactions' table. The placeholder in the SELECT clause represents the invoice number, while the count function aggregates the number of transactions per invoice.\",\n        \"virtual_table\": \"SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number\"\n    }\n}\n",
        "c_high": "SELECT A.account_id, A.account_name, COUNT(FT.transaction_id) AS number_of_transactions\nFROM Accounts AS A\nLEFT JOIN Financial_Transactions AS FT ON A.account_id = FT.account_id\nGROUP BY A.account_id, A.account_name;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of account IDs and their corresponding account names from the 'Accounts' table, filtered to include only those accounts that have a minimum number of associated financial transactions. The placeholder in the HAVING clause represents the minimum count of transactions required for an account to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer IDs along with their first and last names from the 'Customers' table, specifically for those customers who have accounts. The results are grouped by customer ID and ordered by the number of accounts each customer has, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides details about customer accounts from the 'Accounts' table, including the account ID, the date the account was opened, the account name, and any additional account details. The results are filtered based on the first name of the customer from the 'Customers' table, represented by a placeholder for string values.\",\n        \"virtual_table\": \"SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT a.account_id, a.account_name, COUNT(ft.transaction_id) AS number_of_transactions\nFROM Accounts a\nLEFT JOIN Financial_Transactions ft ON a.account_id = ft.account_id\nGROUP BY a.account_id, a.account_name;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of account identifiers from the 'Financial_Transactions' table, grouped by account ID. The results are ordered by the number of transactions associated with each account, allowing users to see which accounts have the most activity. The placeholder in the LIMIT clause represents the maximum number of accounts to return.\",\n        \"virtual_table\": \"SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of accounts associated with each customer from the 'Accounts' table. The placeholder in the SELECT statement represents the customer identifier, which is grouped to show the number of accounts per customer.\",\n        \"virtual_table\": \"SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total number of financial transactions associated with each invoice from the 'Financial_Transactions' table. The placeholder in the SELECT clause represents the invoice number, while the count function aggregates the number of transactions per invoice.\",\n        \"virtual_table\": \"SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number\"\n    }\n}\n",
        "t_2": "SELECT A.account_id, A.account_name, COUNT(FT.transaction_id) AS number_of_transactions\nFROM Accounts AS A\nLEFT JOIN Financial_Transactions AS FT ON A.account_id = FT.account_id\nGROUP BY A.account_id, A.account_name;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of account IDs and their corresponding account names from the 'Accounts' table, filtered to include only those accounts that have a minimum number of associated financial transactions. The placeholder in the HAVING clause represents the minimum count of transactions required for an account to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of financial transactions associated with a specific account name from the 'Financial_Transactions' and 'Accounts' tables. The placeholder in the WHERE clause represents the name of the account being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of customer IDs along with their first and last names from the 'Customers' table, specifically for those customers who have accounts. The results are grouped by customer ID and ordered by the number of accounts each customer has, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT a.account_name, a.account_id, COUNT(ft.transaction_id) AS number_of_transactions\nFROM Accounts a\nLEFT JOIN Financial_Transactions ft ON a.account_id = ft.account_id\nGROUP BY a.account_id, a.account_name;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1590",
        "c_low": "SELECT A.account_id, A.account_name, COUNT(T.transaction_id) AS transaction_count\nFROM Accounts AS A\nLEFT JOIN Financial_Transactions AS T ON A.account_id = T.account_id\nGROUP BY A.account_id, A.account_name;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of account identifiers from the 'Financial_Transactions' table, grouped by account ID. The results are ordered by the number of transactions associated with each account, allowing users to see which accounts have the most activity. The placeholder in the LIMIT clause represents the maximum number of accounts to return.\",\n        \"virtual_table\": \"SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of financial transactions associated with a specific account name from the 'Financial_Transactions' and 'Accounts' tables. The placeholder in the WHERE clause represents the name of the account being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT a.account_id, a.account_name, COUNT(ft.transaction_id) AS transaction_count\nFROM Accounts a\nLEFT JOIN Financial_Transactions ft ON a.account_id = ft.account_id\nGROUP BY a.account_id, a.account_name;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of accounts associated with each customer from the 'Accounts' table. The placeholder in the SELECT statement represents the customer identifier, which is grouped to show the number of accounts per customer.\",\n        \"virtual_table\": \"SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id\"\n    }\n}\n",
        "c_high": "SELECT A.account_id, A.account_name, COUNT(FT.transaction_id) AS transaction_count \nFROM Accounts AS A \nLEFT JOIN Financial_Transactions AS FT ON A.account_id = FT.account_id \nGROUP BY A.account_id, A.account_name;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of account IDs and their corresponding account names from the 'Accounts' table, filtered to include only those accounts that have a minimum number of associated financial transactions. The placeholder in the HAVING clause represents the minimum count of transactions required for an account to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer IDs along with their first and last names from the 'Customers' table, specifically for those customers who have accounts. The results are grouped by customer ID and ordered by the number of accounts each customer has, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the account names and additional details of accounts associated with customers from the 'Accounts' table, filtered by the first and last names of the customers. The placeholders in the WHERE clause represent the customer's first and last names.\",\n        \"virtual_table\": \"SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  [PLACEHOLDER-TYPE:STRING] AND T2.customer_last_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT a.account_id, a.account_name, COUNT(ft.transaction_id) AS transaction_count\nFROM Accounts a\nLEFT JOIN Financial_Transactions ft ON a.account_id = ft.account_id\nGROUP BY a.account_id, a.account_name;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of account identifiers from the 'Financial_Transactions' table, grouped by account ID. The results are ordered by the number of transactions associated with each account, allowing users to see which accounts have the most activity. The placeholder in the LIMIT clause represents the maximum number of accounts to return.\",\n        \"virtual_table\": \"SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of accounts associated with each customer from the 'Accounts' table. The placeholder in the SELECT statement represents the customer identifier, which is grouped to show the number of accounts per customer.\",\n        \"virtual_table\": \"SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id\"\n    }\n}\n",
        "t_2": "SELECT A.account_id, A.account_name, COUNT(FT.transaction_id) AS transaction_count \nFROM Accounts AS A \nLEFT JOIN Financial_Transactions AS FT ON A.account_id = FT.account_id \nGROUP BY A.account_id, A.account_name;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of account IDs and their corresponding account names from the 'Accounts' table, filtered to include only those accounts that have a minimum number of associated financial transactions. The placeholder in the HAVING clause represents the minimum count of transactions required for an account to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer IDs along with their first and last names from the 'Customers' table, specifically for those customers who have accounts. The results are grouped by customer ID and ordered by the number of accounts each customer has, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of financial transactions associated with a specific account name from the 'Financial_Transactions' and 'Accounts' tables. The placeholder in the WHERE clause represents the name of the account being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Accounts.account_id, Accounts.account_name, COUNT(Financial_Transactions.transaction_id) AS transaction_count\nFROM Accounts\nLEFT JOIN Financial_Transactions ON Accounts.account_id = Financial_Transactions.account_id\nGROUP BY Accounts.account_id, Accounts.account_name;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1599",
        "c_low": "SELECT I.invoice_number, COUNT(FT.transaction_id) AS number_of_transactions\nFROM Invoices AS I\nLEFT JOIN Financial_Transactions AS FT ON I.invoice_number = FT.invoice_number\nGROUP BY I.invoice_number;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of account identifiers from the 'Financial_Transactions' table, grouped by account ID. The results are ordered by the number of transactions associated with each account, allowing users to see which accounts have the most activity. The placeholder in the LIMIT clause represents the maximum number of accounts to return.\",\n        \"virtual_table\": \"SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a view of invoice dates and order details by joining the 'Invoices' and 'Orders' tables. The placeholders represent the specific order ID and invoice date that can be filtered or modified as needed.\",\n        \"virtual_table\": \"SELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of financial transactions associated with a specific account name from the 'Financial_Transactions' and 'Accounts' tables. The placeholder in the WHERE clause represents the name of the account being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT invoice_number, COUNT(*) AS number_of_transactions FROM Financial_Transactions GROUP BY invoice_number;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total number of financial transactions associated with each invoice from the 'Financial_Transactions' table. The placeholder in the SELECT clause represents the invoice number, while the count function aggregates the number of transactions per invoice.\",\n        \"virtual_table\": \"SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total number of invoices associated with each order from the 'Invoices' table. The placeholder in the SELECT clause represents the unique identifier for each order, while the count function aggregates the number of invoices per order.\",\n        \"virtual_table\": \"SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id\"\n    }\n}\n",
        "c_high": "SELECT T2.invoice_number, COUNT(T1.transaction_id) AS number_of_transactions \nFROM Financial_Transactions AS T1 \nJOIN Invoices AS T2 ON T1.invoice_number = T2.invoice_number \nGROUP BY T2.invoice_number \nORDER BY number_of_transactions DESC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of invoice numbers and their corresponding issue dates from the 'Invoices' table, filtered by the number of financial transactions associated with each invoice. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT invoice_number, COUNT(*) AS number_of_transactions FROM Financial_Transactions GROUP BY invoice_number",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total number of financial transactions associated with each invoice from the 'Financial_Transactions' table. The placeholder in the SELECT clause represents the invoice number, while the count function aggregates the number of transactions per invoice.\",\n        \"virtual_table\": \"SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total number of invoices associated with each order from the 'Invoices' table. The placeholder in the SELECT clause represents the unique identifier for each order, while the count function aggregates the number of invoices per order.\",\n        \"virtual_table\": \"SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of account identifiers from the 'Financial_Transactions' table, grouped by account ID. The results are ordered by the number of transactions associated with each account, allowing users to see which accounts have the most activity. The placeholder in the LIMIT clause represents the maximum number of accounts to return.\",\n        \"virtual_table\": \"SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.invoice_number, COUNT(T1.transaction_id) AS number_of_transactions \nFROM Financial_Transactions AS T1 \nJOIN Invoices AS T2 ON T1.invoice_number = T2.invoice_number \nGROUP BY T2.invoice_number;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of invoice numbers and their corresponding issue dates from the 'Invoices' table, filtered by the number of financial transactions associated with each invoice. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a view of invoice dates and order details by joining the 'Invoices' and 'Orders' tables. The placeholders represent the specific order ID and invoice date that can be filtered or modified as needed.\",\n        \"virtual_table\": \"SELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of financial transactions associated with a specific account name from the 'Financial_Transactions' and 'Accounts' tables. The placeholder in the WHERE clause represents the name of the account being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT i.invoice_number, COUNT(ft.transaction_id) AS number_of_transactions\nFROM Invoices i\nLEFT JOIN Financial_Transactions ft ON i.invoice_number = ft.invoice_number\nGROUP BY i.invoice_number;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1602",
        "c_low": "SELECT T1.invoice_number, T1.invoice_date \nFROM Invoices AS T1 \nJOIN (SELECT invoice_number \n      FROM Financial_Transactions \n      GROUP BY invoice_number \n      ORDER BY COUNT(*) DESC \n      LIMIT 1) AS T2 \nON T1.invoice_number = T2.invoice_number;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a view of invoice dates and order details by joining the 'Invoices' and 'Orders' tables. The placeholders represent the specific order ID and invoice date that can be filtered or modified as needed.\",\n        \"virtual_table\": \"SELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of account identifiers from the 'Financial_Transactions' table, grouped by account ID. The results are ordered by the number of transactions associated with each account, allowing users to see which accounts have the most activity. The placeholder in the LIMIT clause represents the maximum number of accounts to return.\",\n        \"virtual_table\": \"SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT invoice_number, invoice_date \nFROM Invoices \nWHERE order_id IN (\n    SELECT order_id \n    FROM Invoices \n    JOIN Financial_Transactions ON Invoices.invoice_number = Financial_Transactions.invoice_number \n    GROUP BY Invoices.invoice_number \n    ORDER BY COUNT(Financial_Transactions.transaction_id) DESC \n    LIMIT 1\n)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total number of financial transactions associated with each invoice from the 'Financial_Transactions' table. The placeholder in the SELECT clause represents the invoice number, while the count function aggregates the number of transactions per invoice.\",\n        \"virtual_table\": \"SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total number of invoices associated with each order from the 'Invoices' table. The placeholder in the SELECT clause represents the unique identifier for each order, while the count function aggregates the number of invoices per order.\",\n        \"virtual_table\": \"SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of financial transactions from the 'Financial_Transactions' table where the transaction amount exceeds the average transaction amount. The subquery calculates the average transaction amount, and the placeholder in the WHERE clause allows for dynamic filtering based on this average.\",\n        \"virtual_table\": \"SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)\"\n    }\n}\n",
        "c_high": "SELECT T2.invoice_number, T2.invoice_date FROM Financial_Transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number = T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of invoice numbers and their corresponding issue dates from the 'Invoices' table, filtered by the number of financial transactions associated with each invoice. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT invoice_number, invoice_date \nFROM Invoices \nWHERE order_id IN (\n    SELECT order_id \n    FROM Invoices \n    JOIN Financial_Transactions ON Invoices.invoice_number = Financial_Transactions.invoice_number \n    GROUP BY Invoices.invoice_number \n    ORDER BY COUNT(Financial_Transactions.transaction_id) DESC \n    LIMIT 1\n)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total number of financial transactions associated with each invoice from the 'Financial_Transactions' table. The placeholder in the SELECT clause represents the invoice number, while the count function aggregates the number of transactions per invoice.\",\n        \"virtual_table\": \"SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total number of invoices associated with each order from the 'Invoices' table. The placeholder in the SELECT clause represents the unique identifier for each order, while the count function aggregates the number of invoices per order.\",\n        \"virtual_table\": \"SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of financial transactions from the 'Financial_Transactions' table where the transaction amount exceeds the average transaction amount. The subquery calculates the average transaction amount, and the placeholder in the WHERE clause allows for dynamic filtering based on this average.\",\n        \"virtual_table\": \"SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)\"\n    }\n}\n",
        "t_2": "SELECT T2.invoice_number, T2.invoice_date \nFROM Financial_Transactions AS T1 \nJOIN Invoices AS T2 ON T1.invoice_number = T2.invoice_number \nGROUP BY T1.invoice_number \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of invoice numbers and their corresponding issue dates from the 'Invoices' table, filtered by the number of financial transactions associated with each invoice. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a view of invoice dates and order details by joining the 'Invoices' and 'Orders' tables. The placeholders represent the specific order ID and invoice date that can be filtered or modified as needed.\",\n        \"virtual_table\": \"SELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id\"\n    }\n}\n",
        "t_3+": "SELECT invoice_number, invoice_date \nFROM Invoices \nWHERE order_id = (\n    SELECT order_id \n    FROM Financial_Transactions \n    GROUP BY order_id \n    ORDER BY COUNT(transaction_id) DESC \n    LIMIT 1\n);",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1607",
        "c_low": "SELECT T2.order_id, COUNT(T1.invoice_number) AS number_of_invoices \nFROM Invoices AS T1 \nJOIN Orders AS T2 ON T1.order_id = T2.order_id \nGROUP BY T2.order_id;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a view of invoice dates and order details by joining the 'Invoices' and 'Orders' tables. The placeholders represent the specific order ID and invoice date that can be filtered or modified as needed.\",\n        \"virtual_table\": \"SELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id\"\n    }\n}\n",
        "c_mid": "SELECT order_id, COUNT(*) AS number_of_invoices FROM Invoices GROUP BY order_id",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total number of invoices associated with each order from the 'Invoices' table. The placeholder in the SELECT clause represents the unique identifier for each order, while the count function aggregates the number of invoices per order.\",\n        \"virtual_table\": \"SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total number of items in each order from the 'Order_Items' table. The placeholder in the SELECT clause represents the unique identifier for each order, while the count function aggregates the total number of items associated with each order.\",\n        \"virtual_table\": \"SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total number of financial transactions associated with each invoice from the 'Financial_Transactions' table. The placeholder in the SELECT clause represents the invoice number, while the count function aggregates the number of transactions per invoice.\",\n        \"virtual_table\": \"SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number\"\n    }\n}\n",
        "c_high": "SELECT T2.order_id, COUNT(T1.invoice_number) AS number_of_invoices \nFROM Invoices AS T1 \nJOIN Orders AS T2 ON T1.order_id = T2.order_id \nGROUP BY T2.order_id",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of order IDs and their corresponding details from the 'Orders' table for invoices that have more than a specified number of associated orders. The placeholder in the HAVING clause represents the minimum count of orders required to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of invoice numbers and their corresponding issue dates from the 'Invoices' table, filtered by the number of financial transactions associated with each invoice. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the unique count of orders for each product from the 'Order_Items' table. The placeholder in the SELECT clause represents the product identifier, while the count function aggregates the number of distinct orders associated with each product.\",\n        \"virtual_table\": \"SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id\"\n    }\n}\n",
        "t_1": "SELECT order_id, COUNT(*) AS number_of_invoices FROM Invoices GROUP BY order_id",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total number of invoices associated with each order from the 'Invoices' table. The placeholder in the SELECT clause represents the unique identifier for each order, while the count function aggregates the number of invoices per order.\",\n        \"virtual_table\": \"SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total number of items in each order from the 'Order_Items' table. The placeholder in the SELECT clause represents the unique identifier for each order, while the count function aggregates the total number of items associated with each order.\",\n        \"virtual_table\": \"SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the unique count of orders for each product from the 'Order_Items' table. The placeholder in the SELECT clause represents the product identifier, while the count function aggregates the number of distinct orders associated with each product.\",\n        \"virtual_table\": \"SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id\"\n    }\n}\n",
        "t_2": "SELECT O.order_id, COUNT(I.invoice_number) AS number_of_invoices \nFROM Orders AS O \nLEFT JOIN Invoices AS I ON O.order_id = I.order_id \nGROUP BY O.order_id;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of order IDs and their corresponding details from the 'Orders' table for invoices that have more than a specified number of associated orders. The placeholder in the HAVING clause represents the minimum count of orders required to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a view of invoice dates and order details by joining the 'Invoices' and 'Orders' tables. The placeholders represent the specific order ID and invoice date that can be filtered or modified as needed.\",\n        \"virtual_table\": \"SELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of invoice numbers and their corresponding issue dates from the 'Invoices' table, filtered by the number of financial transactions associated with each invoice. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Orders.order_id, COUNT(Invoices.invoice_number) AS number_of_invoices\nFROM Orders\nLEFT JOIN Invoices ON Orders.order_id = Invoices.order_id\nGROUP BY Orders.order_id;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1610",
        "c_low": "SELECT order_id, order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id HAVING COUNT(T1.invoice_number) >= 2;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a view of invoice dates and order details by joining the 'Invoices' and 'Orders' tables. The placeholders represent the specific order ID and invoice date that can be filtered or modified as needed.\",\n        \"virtual_table\": \"SELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id\"\n    }\n}\n",
        "c_mid": "SELECT o.order_id, o.order_details \nFROM Orders o \nJOIN (SELECT order_id, count(*) as invoice_count \n      FROM Invoices \n      GROUP BY order_id \n      HAVING invoice_count >= 2) i \nON o.order_id = i.order_id;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total number of invoices associated with each order from the 'Invoices' table. The placeholder in the SELECT clause represents the unique identifier for each order, while the count function aggregates the number of invoices per order.\",\n        \"virtual_table\": \"SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id\"\n    }\n}\n",
        "c_high": "SELECT T2.order_id, T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id GROUP BY T2.order_id HAVING count(*) > 1",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of order IDs and their corresponding details from the 'Orders' table for invoices that have more than a specified number of associated orders. The placeholder in the HAVING clause represents the minimum count of orders required to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of invoice numbers and their corresponding issue dates from the 'Invoices' table, filtered by the number of financial transactions associated with each invoice. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT o.order_id, o.order_details \nFROM Orders o \nJOIN (SELECT order_id, count(*) as invoice_count \n      FROM Invoices \n      GROUP BY order_id \n      HAVING invoice_count >= 2) i \nON o.order_id = i.order_id;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total number of invoices associated with each order from the 'Invoices' table. The placeholder in the SELECT clause represents the unique identifier for each order, while the count function aggregates the number of invoices per order.\",\n        \"virtual_table\": \"SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id\"\n    }\n}\n",
        "t_2": "SELECT T2.order_id, T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id GROUP BY T2.order_id HAVING count(*) > 1",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of order IDs and their corresponding details from the 'Orders' table for invoices that have more than a specified number of associated orders. The placeholder in the HAVING clause represents the minimum count of orders required to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a view of invoice dates and order details by joining the 'Invoices' and 'Orders' tables. The placeholders represent the specific order ID and invoice date that can be filtered or modified as needed.\",\n        \"virtual_table\": \"SELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of invoice numbers and their corresponding issue dates from the 'Invoices' table, filtered by the number of financial transactions associated with each invoice. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT o.order_id, o.order_details \nFROM Orders o \nJOIN Invoices i ON o.order_id = i.order_id \nGROUP BY o.order_id \nHAVING COUNT(i.invoice_number) >= 2;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1617",
        "c_low": "SELECT Orders.order_id, COUNT(Order_Items.order_item_id) AS number_of_items\nFROM Orders\nLEFT JOIN Order_Items ON Orders.order_id = Order_Items.order_id\nGROUP BY Orders.order_id;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT order_id, COUNT(*) AS number_of_items FROM Order_Items GROUP BY order_id",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total number of items in each order from the 'Order_Items' table. The placeholder in the SELECT clause represents the unique identifier for each order, while the count function aggregates the total number of items associated with each order.\",\n        \"virtual_table\": \"SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total number of invoices associated with each order from the 'Invoices' table. The placeholder in the SELECT clause represents the unique identifier for each order, while the count function aggregates the number of invoices per order.\",\n        \"virtual_table\": \"SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total quantity of products ordered for each order from the 'Order_Items' table. The placeholder in the SELECT statement represents the unique identifier for each order, while the sum function calculates the total quantity of products associated with that order.\",\n        \"virtual_table\": \"SELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id\"\n    }\n}\n",
        "c_high": "SELECT order_id, COUNT(order_item_id) AS number_of_items FROM Order_Items GROUP BY order_id",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the unique count of orders for each product from the 'Order_Items' table. The placeholder in the SELECT clause represents the product identifier, while the count function aggregates the number of distinct orders associated with each product.\",\n        \"virtual_table\": \"SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of order IDs and their corresponding details from the 'Orders' table for invoices that have more than a specified number of associated orders. The placeholder in the HAVING clause represents the minimum count of orders required to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of customer last names, customer IDs, and phone numbers from the 'Customers' table, associated with their orders in the 'Orders' table. The results are grouped by customer ID and ordered by the number of orders in descending order, with a limit on the number of results specified by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT order_id, count(*) AS number_of_items FROM Order_Items GROUP BY order_id",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total number of items in each order from the 'Order_Items' table. The placeholder in the SELECT clause represents the unique identifier for each order, while the count function aggregates the total number of items associated with each order.\",\n        \"virtual_table\": \"SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the unique count of orders for each product from the 'Order_Items' table. The placeholder in the SELECT clause represents the product identifier, while the count function aggregates the number of distinct orders associated with each product.\",\n        \"virtual_table\": \"SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total number of invoices associated with each order from the 'Invoices' table. The placeholder in the SELECT clause represents the unique identifier for each order, while the count function aggregates the number of invoices per order.\",\n        \"virtual_table\": \"SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id\"\n    }\n}\n",
        "t_2": "SELECT order_id, COUNT(order_item_id) AS number_of_items\nFROM Order_Items\nGROUP BY order_id;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of order IDs and their corresponding details from the 'Orders' table for invoices that have more than a specified number of associated orders. The placeholder in the HAVING clause represents the minimum count of orders required to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer last names, customer IDs, and phone numbers from the 'Customers' table, associated with their orders in the 'Orders' table. The results are grouped by customer ID and ordered by the number of orders in descending order, with a limit on the number of results specified by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Orders.order_id, COUNT(Order_Items.order_item_id) AS number_of_items\nFROM Orders\nLEFT JOIN Order_Items ON Orders.order_id = Order_Items.order_id\nGROUP BY Orders.order_id;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1621",
        "c_low": "SELECT Products.product_name, COUNT(DISTINCT Orders.customer_id) AS customer_count\nFROM Products\nJOIN Order_Items ON Products.product_id = Order_Items.product_id\nJOIN Orders ON Order_Items.order_id = Orders.order_id\nGROUP BY Products.product_name;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Products.product_name, COUNT(DISTINCT Orders.customer_id) AS customer_count\nFROM Products\nJOIN Order_Items ON Products.product_id = Order_Items.product_id\nJOIN Orders ON Order_Items.order_id = Orders.order_id\nGROUP BY Products.product_name;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT p.product_name, oi.order_count\nFROM Products p\nJOIN (\n    SELECT product_id, COUNT(DISTINCT order_id) AS order_count\n    FROM Order_Items\n    GROUP BY product_id\n) oi ON p.product_id = oi.product_id;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the unique count of orders for each product from the 'Order_Items' table. The placeholder in the SELECT clause represents the product identifier, while the count function aggregates the number of distinct orders associated with each product.\",\n        \"virtual_table\": \"SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id\"\n    }\n}\n",
        "t_1": "SELECT p.product_name, oi.order_count\nFROM Products p\nJOIN (\n    SELECT product_id, COUNT(DISTINCT order_id) AS order_count\n    FROM Order_Items\n    GROUP BY product_id\n) oi ON p.product_id = oi.product_id;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the unique count of orders for each product from the 'Order_Items' table. The placeholder in the SELECT clause represents the product identifier, while the count function aggregates the number of distinct orders associated with each product.\",\n        \"virtual_table\": \"SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id\"\n    }\n}\n",
        "t_2": "SELECT Products.product_name, COUNT(DISTINCT Orders.customer_id) AS customer_count\nFROM Products\nJOIN Order_Items ON Products.product_id = Order_Items.product_id\nJOIN Orders ON Order_Items.order_id = Orders.order_id\nGROUP BY Products.product_name;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT Products.product_name, COUNT(DISTINCT Orders.customer_id) AS customer_count\nFROM Products\nJOIN Order_Items ON Products.product_id = Order_Items.product_id\nJOIN Orders ON Order_Items.order_id = Orders.order_id\nGROUP BY Products.product_name;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1622",
        "c_low": "SELECT p.product_name, COUNT(DISTINCT o.customer_id) AS customer_count\nFROM Products p\nJOIN Order_Items oi ON p.product_id = oi.product_id\nJOIN Orders o ON oi.order_id = o.order_id\nGROUP BY p.product_name;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT p.product_name, COUNT(DISTINCT o.customer_id) AS customer_count\nFROM Products p\nJOIN Order_Items oi ON p.product_id = oi.product_id\nJOIN Orders o ON oi.order_id = o.order_id\nGROUP BY p.product_name;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT P.product_name, COUNT(DISTINCT O.customer_id) AS customer_count \nFROM Products AS P \nJOIN Order_Items AS OI ON P.product_id = OI.product_id \nJOIN Orders AS O ON OI.order_id = O.order_id \nGROUP BY P.product_name;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the unique count of orders for each product from the 'Order_Items' table. The placeholder in the SELECT clause represents the product identifier, while the count function aggregates the number of distinct orders associated with each product.\",\n        \"virtual_table\": \"SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer last names, customer IDs, and phone numbers from the 'Customers' table, associated with their orders in the 'Orders' table. The results are grouped by customer ID and ordered by the number of orders in descending order, with a limit on the number of results specified by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT p.product_name, COUNT(DISTINCT oi.order_id) AS customer_count \nFROM Products p \nJOIN Order_Items oi ON p.product_id = oi.product_id \nGROUP BY p.product_name;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the unique count of orders for each product from the 'Order_Items' table. The placeholder in the SELECT clause represents the product identifier, while the count function aggregates the number of distinct orders associated with each product.\",\n        \"virtual_table\": \"SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id\"\n    }\n}\n",
        "t_2": "SELECT P.product_name, COUNT(DISTINCT O.customer_id) AS customer_count \nFROM Products AS P \nJOIN Order_Items AS OI ON P.product_id = OI.product_id \nJOIN Orders AS O ON OI.order_id = O.order_id \nGROUP BY P.product_name;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer last names, customer IDs, and phone numbers from the 'Customers' table, associated with their orders in the 'Orders' table. The results are grouped by customer ID and ordered by the number of orders in descending order, with a limit on the number of results specified by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT p.product_name, COUNT(DISTINCT o.customer_id) AS customer_count\nFROM Products p\nJOIN Order_Items oi ON p.product_id = oi.product_id\nJOIN Orders o ON oi.order_id = o.order_id\nGROUP BY p.product_name;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1623",
        "c_low": "SELECT Orders.order_id, COUNT(Order_Items.product_id) AS number_of_products\nFROM Orders\nJOIN Order_Items ON Orders.order_id = Order_Items.order_id\nGROUP BY Orders.order_id;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT order_id, COUNT(*) AS number_of_products FROM Order_Items GROUP BY order_id",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total number of items in each order from the 'Order_Items' table. The placeholder in the SELECT clause represents the unique identifier for each order, while the count function aggregates the total number of items associated with each order.\",\n        \"virtual_table\": \"SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total quantity of products ordered for each order from the 'Order_Items' table. The placeholder in the SELECT statement represents the unique identifier for each order, while the sum function calculates the total quantity of products associated with that order.\",\n        \"virtual_table\": \"SELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total number of invoices associated with each order from the 'Invoices' table. The placeholder in the SELECT clause represents the unique identifier for each order, while the count function aggregates the number of invoices per order.\",\n        \"virtual_table\": \"SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id\"\n    }\n}\n",
        "c_high": "SELECT order_id, COUNT(product_id) AS number_of_products \nFROM Order_Items \nGROUP BY order_id;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the unique count of orders for each product from the 'Order_Items' table. The placeholder in the SELECT clause represents the product identifier, while the count function aggregates the number of distinct orders associated with each product.\",\n        \"virtual_table\": \"SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer last names, customer IDs, and phone numbers from the 'Customers' table, associated with their orders in the 'Orders' table. The results are grouped by customer ID and ordered by the number of orders in descending order, with a limit on the number of results specified by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of order IDs and their corresponding details from the 'Orders' table for invoices that have more than a specified number of associated orders. The placeholder in the HAVING clause represents the minimum count of orders required to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT order_id, COUNT(*) AS number_of_products FROM Order_Items GROUP BY order_id",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the unique count of orders for each product from the 'Order_Items' table. The placeholder in the SELECT clause represents the product identifier, while the count function aggregates the number of distinct orders associated with each product.\",\n        \"virtual_table\": \"SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total number of items in each order from the 'Order_Items' table. The placeholder in the SELECT clause represents the unique identifier for each order, while the count function aggregates the total number of items associated with each order.\",\n        \"virtual_table\": \"SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total quantity of products ordered for each order from the 'Order_Items' table. The placeholder in the SELECT statement represents the unique identifier for each order, while the sum function calculates the total quantity of products associated with that order.\",\n        \"virtual_table\": \"SELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id\"\n    }\n}\n",
        "t_2": "SELECT order_id, COUNT(product_id) AS number_of_products \nFROM Order_Items \nGROUP BY order_id;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of customer last names, customer IDs, and phone numbers from the 'Customers' table, associated with their orders in the 'Orders' table. The results are grouped by customer ID and ordered by the number of orders in descending order, with a limit on the number of results specified by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of order IDs and their corresponding details from the 'Orders' table for invoices that have more than a specified number of associated orders. The placeholder in the HAVING clause represents the minimum count of orders required to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Orders.order_id, COUNT(Order_Items.product_id) AS number_of_products\nFROM Orders\nJOIN Order_Items ON Orders.order_id = Order_Items.order_id\nGROUP BY Orders.order_id;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1636",
        "c_low": "SELECT COUNT(*) FROM people WHERE Age > '30' AND Is_Male = 'no';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of male and female participants in weddings that took place after a specific year. The placeholders in the WHERE clause represent the year of interest.\",\n        \"virtual_table\": \"SELECT T2.name ,  T3.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id WHERE T1.year  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT COUNT(*) FROM people WHERE Is_Male = 'no' AND Age > '30';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of female participants in weddings that took place in a specific year, filtered by their gender and country of residence. The placeholders in the WHERE clause represent the year of the wedding, the gender indication, and the country name.\",\n        \"virtual_table\": \"SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id  =  T2.people_id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.is_male  =  [PLACEHOLDER-TYPE:STRING] AND T2.country  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of churches where weddings took place, specifically filtering for weddings involving male or female participants who are older than a specified age. The placeholders in the WHERE clause represent the age criteria for both male and female participants.\",\n        \"virtual_table\": \"SELECT T4.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id JOIN church AS T4 ON T4.church_id  =  T1.church_id WHERE T2.age  >  [PLACEHOLDER-TYPE:NUMBER] OR T3.age  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT COUNT(*) FROM people WHERE Is_Male = 'no' AND Age > 30;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and countries of individuals from the 'people' table who are younger than the average age of all individuals in the same table. The placeholder in the WHERE clause represents the average age calculated from the 'people' table.\",\n        \"virtual_table\": \"SELECT name ,  country FROM people WHERE age  <  (SELECT avg(age) FROM people)\"\n    }\n}\n",
        "t_1": "SELECT COUNT(*) FROM people WHERE Is_Male = 'no' AND Age > 30;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and countries of individuals from the 'people' table who are younger than the average age of all individuals in the same table. The placeholder in the WHERE clause represents the average age calculated from the 'people' table.\",\n        \"virtual_table\": \"SELECT name ,  country FROM people WHERE age  <  (SELECT avg(age) FROM people)\"\n    }\n}\n",
        "t_2": "SELECT COUNT(*) FROM people WHERE Is_Male = 'no' AND Age > '30';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of female participants in weddings that took place in a specific year, filtered by their gender and country of residence. The placeholders in the WHERE clause represent the year of the wedding, the gender indication, and the country name.\",\n        \"virtual_table\": \"SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id  =  T2.people_id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.is_male  =  [PLACEHOLDER-TYPE:STRING] AND T2.country  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of male and female participants in weddings that took place after a specific year. The placeholders in the WHERE clause represent the year of interest.\",\n        \"virtual_table\": \"SELECT T2.name ,  T3.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id WHERE T1.year  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(*) FROM people WHERE Age > '30' AND Is_Male = 'no';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of churches where weddings took place, specifically filtering for weddings involving male or female participants who are older than a specified age. The placeholders in the WHERE clause represent the age criteria for both male and female participants.\",\n        \"virtual_table\": \"SELECT T4.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id JOIN church AS T4 ON T4.church_id  =  T1.church_id WHERE T2.age  >  [PLACEHOLDER-TYPE:NUMBER] OR T3.age  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1637",
        "c_low": "SELECT DISTINCT Country FROM people WHERE Age > 30 OR Age < 25;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT DISTINCT Country FROM people WHERE Age > 30 OR Age < 25;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT DISTINCT Country FROM people WHERE Age > 30 OR Age < 25;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and countries of individuals from the 'people' table who are younger than the average age of all individuals in the same table. The placeholder in the WHERE clause represents the average age calculated from the 'people' table.\",\n        \"virtual_table\": \"SELECT name ,  country FROM people WHERE age  <  (SELECT avg(age) FROM people)\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT Country FROM people WHERE Age > 30 OR Age < 25;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and countries of individuals from the 'people' table who are younger than the average age of all individuals in the same table. The placeholder in the WHERE clause represents the average age calculated from the 'people' table.\",\n        \"virtual_table\": \"SELECT name ,  country FROM people WHERE age  <  (SELECT avg(age) FROM people)\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT Country FROM people WHERE Age > 30 OR Age < 25;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT DISTINCT Country FROM people WHERE Age > 30 OR Age < 25;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1641",
        "c_low": "SELECT Name, Age FROM people WHERE Is_Male = 'yes' AND People_ID NOT IN (SELECT Male_ID FROM wedding UNION SELECT Female_ID FROM wedding);",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of male and female participants in weddings that took place after a specific year. The placeholders in the WHERE clause represent the year of interest.\",\n        \"virtual_table\": \"SELECT T2.name ,  T3.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id WHERE T1.year  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the total number of weddings that took place in a specific year, as recorded in the 'wedding' table. The placeholder in the WHERE clause represents the year of interest.\",\n        \"virtual_table\": \"SELECT count(*) FROM wedding WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT Name, Age FROM people WHERE Is_Male = 'yes' AND People_ID NOT IN (SELECT Male_ID FROM wedding UNION SELECT Female_ID FROM wedding);",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of churches where weddings took place, specifically filtering for weddings involving male or female participants who are older than a specified age. The placeholders in the WHERE clause represent the age criteria for both male and female participants.\",\n        \"virtual_table\": \"SELECT T4.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id JOIN church AS T4 ON T4.church_id  =  T1.church_id WHERE T2.age  >  [PLACEHOLDER-TYPE:NUMBER] OR T3.age  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of female participants in weddings that took place in a specific year, filtered by their gender and country of residence. The placeholders in the WHERE clause represent the year of the wedding, the gender indication, and the country name.\",\n        \"virtual_table\": \"SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id  =  T2.people_id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.is_male  =  [PLACEHOLDER-TYPE:STRING] AND T2.country  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT Name, Age FROM people WHERE Is_Male = 'yes' AND People_ID NOT IN (SELECT Male_ID FROM wedding UNION SELECT Female_ID FROM wedding)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and countries of individuals from the 'people' table who are younger than the average age of all individuals in the same table. The placeholder in the WHERE clause represents the average age calculated from the 'people' table.\",\n        \"virtual_table\": \"SELECT name ,  country FROM people WHERE age  <  (SELECT avg(age) FROM people)\"\n    }\n}\n",
        "t_1": "SELECT Name, Age FROM people WHERE Is_Male = 'yes' AND People_ID NOT IN (SELECT Male_ID FROM wedding UNION SELECT Female_ID FROM wedding)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and countries of individuals from the 'people' table who are younger than the average age of all individuals in the same table. The placeholder in the WHERE clause represents the average age calculated from the 'people' table.\",\n        \"virtual_table\": \"SELECT name ,  country FROM people WHERE age  <  (SELECT avg(age) FROM people)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the total number of weddings that took place in a specific year, as recorded in the 'wedding' table. The placeholder in the WHERE clause represents the year of interest.\",\n        \"virtual_table\": \"SELECT count(*) FROM wedding WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Name, Age FROM people WHERE Is_Male = 'yes' AND People_ID NOT IN (SELECT Male_ID FROM wedding UNION SELECT Female_ID FROM wedding);",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of male and female participants in weddings that took place after a specific year. The placeholders in the WHERE clause represent the year of interest.\",\n        \"virtual_table\": \"SELECT T2.name ,  T3.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id WHERE T1.year  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of female participants in weddings that took place in a specific year, filtered by their gender and country of residence. The placeholders in the WHERE clause represent the year of the wedding, the gender indication, and the country name.\",\n        \"virtual_table\": \"SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id  =  T2.people_id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.is_male  =  [PLACEHOLDER-TYPE:STRING] AND T2.country  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Name, Age FROM people WHERE Is_Male = 'yes' AND People_ID NOT IN (SELECT Male_ID FROM wedding UNION SELECT Female_ID FROM wedding);",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of churches where weddings took place, specifically filtering for weddings involving male or female participants who are older than a specified age. The placeholders in the WHERE clause represent the age criteria for both male and female participants.\",\n        \"virtual_table\": \"SELECT T4.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id JOIN church AS T4 ON T4.church_id  =  T1.church_id WHERE T2.age  >  [PLACEHOLDER-TYPE:NUMBER] OR T3.age  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1642",
        "c_low": "SELECT Name FROM church WHERE Church_ID NOT IN (SELECT Church_ID FROM wedding WHERE Year = '2015')",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of male and female participants in weddings that took place after a specific year. The placeholders in the WHERE clause represent the year of interest.\",\n        \"virtual_table\": \"SELECT T2.name ,  T3.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id WHERE T1.year  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the total number of weddings that took place in a specific year, as recorded in the 'wedding' table. The placeholder in the WHERE clause represents the year of interest.\",\n        \"virtual_table\": \"SELECT count(*) FROM wedding WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT Name FROM church WHERE Church_ID NOT IN (SELECT Church_ID FROM wedding WHERE Year = '2015')",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of distinct churches that hosted weddings in a specific year. The placeholder in the WHERE clause represents the year of interest.\",\n        \"virtual_table\": \"SELECT COUNT (DISTINCT church_id) FROM wedding WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of churches where weddings took place, specifically filtering for weddings involving male or female participants who are older than a specified age. The placeholders in the WHERE clause represent the age criteria for both male and female participants.\",\n        \"virtual_table\": \"SELECT T4.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id JOIN church AS T4 ON T4.church_id  =  T1.church_id WHERE T2.age  >  [PLACEHOLDER-TYPE:NUMBER] OR T3.age  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides information about churches, specifically the organizer and name of each church, filtered by the date range of when the churches were established. The placeholders in the WHERE clause represent the start and end dates for filtering the churches based on their open dates.\",\n        \"virtual_table\": \"SELECT organized_by ,  name FROM church WHERE open_date BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT Name FROM church WHERE Church_ID NOT IN (SELECT Church_ID FROM wedding WHERE Year = '2015');",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of churches from the 'church' table that have hosted a specified number of weddings. The placeholder in the HAVING clause represents the minimum count of weddings that a church must have hosted to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id GROUP BY T1.church_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the open dates of churches from the 'church' table that have been established on the same date, filtering for those dates that have a count of occurrences greater than or equal to a specified number. The placeholder in the HAVING clause represents the minimum count of churches that must share the same open date.\",\n        \"virtual_table\": \"SELECT open_date FROM church GROUP BY open_date HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Name FROM church WHERE Church_ID NOT IN (SELECT Church_ID FROM wedding WHERE Year = '2015')",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of distinct churches that hosted weddings in a specific year. The placeholder in the WHERE clause represents the year of interest.\",\n        \"virtual_table\": \"SELECT COUNT (DISTINCT church_id) FROM wedding WHERE YEAR  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about churches, specifically the organizer and name of each church, filtered by the date range of when the churches were established. The placeholders in the WHERE clause represent the start and end dates for filtering the churches based on their open dates.\",\n        \"virtual_table\": \"SELECT organized_by ,  name FROM church WHERE open_date BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the number of churches established on each open date from the 'church' table. The query groups the results by the open date, allowing users to see how many churches were opened on each specific date.\",\n        \"virtual_table\": \"SELECT open_date ,  count(*) FROM church GROUP BY open_date\"\n    }\n}\n",
        "t_2": "SELECT Name FROM church WHERE Church_ID NOT IN (SELECT Church_ID FROM wedding WHERE Year = '2015')",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of male and female participants in weddings that took place after a specific year. The placeholders in the WHERE clause represent the year of interest.\",\n        \"virtual_table\": \"SELECT T2.name ,  T3.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id WHERE T1.year  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of churches from the 'church' table that have hosted a specified number of weddings. The placeholder in the HAVING clause represents the minimum count of weddings that a church must have hosted to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id GROUP BY T1.church_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of female participants in weddings that took place in a specific year, filtered by their gender and country of residence. The placeholders in the WHERE clause represent the year of the wedding, the gender indication, and the country name.\",\n        \"virtual_table\": \"SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id  =  T2.people_id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.is_male  =  [PLACEHOLDER-TYPE:STRING] AND T2.country  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Name FROM church WHERE Church_ID NOT IN (SELECT Church_ID FROM wedding WHERE Year = '2015');",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of churches where weddings took place, specifically filtering for weddings involving male or female participants who are older than a specified age. The placeholders in the WHERE clause represent the age criteria for both male and female participants.\",\n        \"virtual_table\": \"SELECT T4.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id JOIN church AS T4 ON T4.church_id  =  T1.church_id WHERE T2.age  >  [PLACEHOLDER-TYPE:NUMBER] OR T3.age  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1667",
        "c_low": "SELECT artist.Name, COUNT(exhibition.Exhibition_ID) AS Number_of_Exhibitions\nFROM artist\nLEFT JOIN exhibition ON artist.Artist_ID = exhibition.Artist_ID\nGROUP BY artist.Name;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of artists from the 'artist' table who are older than a specified age and joined the exhibition after a certain year. The placeholders in the WHERE clause represent the age and year criteria.\",\n        \"virtual_table\": \"SELECT count(*) FROM artist WHERE age  >  [PLACEHOLDER-TYPE:NUMBER] AND year_join  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of exhibitions that took place in or after a specific year. The placeholder in the WHERE clause represents the year from which the count should start.\",\n        \"virtual_table\": \"SELECT count(*) FROM exhibition WHERE YEAR  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT a.Name, COUNT(e.Exhibition_ID) AS Number_of_Exhibitions\nFROM artist a\nLEFT JOIN exhibition e ON a.Artist_ID = e.Artist_ID\nGROUP BY a.Artist_ID",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of artists from the 'artist' table who have not participated in any exhibitions. The placeholder in the subquery represents the artist identifiers that are linked to the exhibitions.\",\n        \"virtual_table\": \"SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)\"\n    }\n}\n",
        "c_high": "SELECT T2.Name, COUNT(T1.Exhibition_ID) AS Number_of_Exhibitions \nFROM exhibition AS T1 \nJOIN artist AS T2 ON T1.Artist_ID = T2.Artist_ID \nGROUP BY T2.Artist_ID \nORDER BY Number_of_Exhibitions DESC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and countries of artists who have participated in exhibitions, sorted by the number of exhibitions they have been part of. The placeholder in the LIMIT clause allows for specifying the maximum number of artists to return based on their exhibition count.\",\n        \"virtual_table\": \"SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the themes of exhibitions along with the names of the artists who participated in those exhibitions, specifically focusing on exhibitions where the ticket price exceeds the average ticket price across all exhibitions. The placeholders in the query allow for dynamic filtering based on ticket prices.\",\n        \"virtual_table\": \"SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of artists who did not participate in a specific exhibition year. The placeholder in the WHERE clause represents the year of the exhibition being queried.\",\n        \"virtual_table\": \"SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT artist.Name, COUNT(exhibition.Exhibition_ID) AS Number_of_Exhibitions\nFROM artist\nLEFT JOIN exhibition ON artist.Artist_ID = exhibition.Artist_ID\nGROUP BY artist.Name;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of artists from the 'artist' table who are older than a specified age and joined the exhibition after a certain year. The placeholders in the WHERE clause represent the age and year criteria.\",\n        \"virtual_table\": \"SELECT count(*) FROM artist WHERE age  >  [PLACEHOLDER-TYPE:NUMBER] AND year_join  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of exhibitions that took place in or after a specific year. The placeholder in the WHERE clause represents the year from which the count should start.\",\n        \"virtual_table\": \"SELECT count(*) FROM exhibition WHERE YEAR  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.Name, COUNT(T1.Exhibition_ID) AS Number_of_Exhibitions \nFROM exhibition AS T1 \nJOIN artist AS T2 ON T1.Artist_ID = T2.Artist_ID \nGROUP BY T2.Artist_ID \nORDER BY Number_of_Exhibitions DESC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and countries of artists who have participated in exhibitions, sorted by the number of exhibitions they have been part of. The placeholder in the LIMIT clause allows for specifying the maximum number of artists to return based on their exhibition count.\",\n        \"virtual_table\": \"SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the themes of exhibitions along with the names of the artists who participated in those exhibitions, specifically focusing on exhibitions where the ticket price exceeds the average ticket price across all exhibitions. The placeholders in the query allow for dynamic filtering based on ticket prices.\",\n        \"virtual_table\": \"SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of artists from the 'artist' table who have not participated in any exhibitions. The placeholder in the subquery represents the artist identifiers that are linked to the exhibitions.\",\n        \"virtual_table\": \"SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)\"\n    }\n}\n",
        "t_3+": "SELECT artist.Name, COUNT(exhibition.Exhibition_ID) AS Number_of_Exhibitions\nFROM artist\nLEFT JOIN exhibition ON artist.Artist_ID = exhibition.Artist_ID\nGROUP BY artist.Artist_ID;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1668",
        "c_low": "SELECT artist.Name, COUNT(exhibition.Exhibition_ID) AS Exhibition_Count \nFROM artist \nLEFT JOIN exhibition ON artist.Artist_ID = exhibition.Artist_ID \nGROUP BY artist.Artist_ID;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of artists from the 'artist' table who are older than a specified age and joined the exhibition after a certain year. The placeholders in the WHERE clause represent the age and year criteria.\",\n        \"virtual_table\": \"SELECT count(*) FROM artist WHERE age  >  [PLACEHOLDER-TYPE:NUMBER] AND year_join  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of exhibitions that took place in or after a specific year. The placeholder in the WHERE clause represents the year from which the count should start.\",\n        \"virtual_table\": \"SELECT count(*) FROM exhibition WHERE YEAR  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT artist.Name, COUNT(exhibition.Exhibition_ID) AS Exhibition_Count\nFROM artist\nLEFT JOIN exhibition ON artist.Artist_ID = exhibition.Artist_ID\nGROUP BY artist.Artist_ID;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of artists from the 'artist' table who have not participated in any exhibitions. The placeholder in the subquery represents the artist identifiers that are linked to the exhibitions.\",\n        \"virtual_table\": \"SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of exhibitions from the 'exhibition_record' table that had an attendance greater than a specified number or where the ticket price from the 'exhibition' table is less than a specified amount. The placeholders in the WHERE clause represent the attendance threshold and the ticket price limit.\",\n        \"virtual_table\": \"SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  [PLACEHOLDER-TYPE:NUMBER] OR T2.ticket_price  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT T2.Name, COUNT(*) AS Exhibition_Count FROM exhibition AS T1 JOIN artist AS T2 ON T1.Artist_ID = T2.Artist_ID GROUP BY T2.Artist_ID ORDER BY Exhibition_Count DESC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and countries of artists who have participated in exhibitions, sorted by the number of exhibitions they have been part of. The placeholder in the LIMIT clause allows for specifying the maximum number of artists to return based on their exhibition count.\",\n        \"virtual_table\": \"SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the themes of exhibitions along with the names of the artists who participated in those exhibitions, specifically focusing on exhibitions where the ticket price exceeds the average ticket price across all exhibitions. The placeholders in the query allow for dynamic filtering based on ticket prices.\",\n        \"virtual_table\": \"SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of artists who did not participate in a specific exhibition year. The placeholder in the WHERE clause represents the year of the exhibition being queried.\",\n        \"virtual_table\": \"SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT artist.Name, COUNT(exhibition.Exhibition_ID) AS Exhibition_Count \nFROM artist \nLEFT JOIN exhibition ON artist.Artist_ID = exhibition.Artist_ID \nGROUP BY artist.Artist_ID;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of artists from the 'artist' table who are older than a specified age and joined the exhibition after a certain year. The placeholders in the WHERE clause represent the age and year criteria.\",\n        \"virtual_table\": \"SELECT count(*) FROM artist WHERE age  >  [PLACEHOLDER-TYPE:NUMBER] AND year_join  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of exhibitions that took place in or after a specific year. The placeholder in the WHERE clause represents the year from which the count should start.\",\n        \"virtual_table\": \"SELECT count(*) FROM exhibition WHERE YEAR  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.Name, COUNT(T1.Exhibition_ID) AS Exhibition_Count \nFROM exhibition AS T1 \nJOIN artist AS T2 ON T1.Artist_ID = T2.Artist_ID \nGROUP BY T2.Artist_ID \nORDER BY Exhibition_Count DESC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and countries of artists who have participated in exhibitions, sorted by the number of exhibitions they have been part of. The placeholder in the LIMIT clause allows for specifying the maximum number of artists to return based on their exhibition count.\",\n        \"virtual_table\": \"SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the themes of exhibitions along with the names of the artists who participated in those exhibitions, specifically focusing on exhibitions where the ticket price exceeds the average ticket price across all exhibitions. The placeholders in the query allow for dynamic filtering based on ticket prices.\",\n        \"virtual_table\": \"SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of artists who did not participate in a specific exhibition year. The placeholder in the WHERE clause represents the year of the exhibition being queried.\",\n        \"virtual_table\": \"SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT artist.Name, COUNT(exhibition.Exhibition_ID) AS Exhibition_Count\nFROM artist\nLEFT JOIN exhibition ON artist.Artist_ID = exhibition.Artist_ID\nGROUP BY artist.Artist_ID;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1683",
        "c_low": "SELECT DISTINCT e.Theme \nFROM exhibition e \nJOIN exhibition_record er ON e.Exhibition_ID = er.Exhibition_ID \nWHERE er.Attendance < 100 OR er.Attendance > 500;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of exhibitions that took place in or after a specific year. The placeholder in the WHERE clause represents the year from which the count should start.\",\n        \"virtual_table\": \"SELECT count(*) FROM exhibition WHERE YEAR  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT e.Theme FROM exhibition e JOIN exhibition_record er ON e.Exhibition_ID = er.Exhibition_ID WHERE er.Attendance < 100 OR er.Attendance > 500;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of exhibitions from the 'exhibition_record' table that had an attendance greater than a specified number or where the ticket price from the 'exhibition' table is less than a specified amount. The placeholders in the WHERE clause represent the attendance threshold and the ticket price limit.\",\n        \"virtual_table\": \"SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  [PLACEHOLDER-TYPE:NUMBER] OR T2.ticket_price  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average, minimum, and maximum ticket prices from the 'exhibition' table for exhibitions that took place before a specified year. The placeholder in the WHERE clause represents the year to filter the exhibitions.\",\n        \"virtual_table\": \"SELECT avg(ticket_price) ,  min(ticket_price) ,  max(ticket_price) FROM exhibition WHERE YEAR  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance < 100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance > 500",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies the themes of exhibitions that had attendance numbers both below and above specified thresholds. The placeholders in the WHERE clause represent the attendance limits for filtering the exhibitions.\",\n        \"virtual_table\": \"SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the themes of exhibitions along with the names of the artists who participated in those exhibitions, specifically focusing on exhibitions where the ticket price exceeds the average ticket price across all exhibitions. The placeholders in the query allow for dynamic filtering based on ticket prices.\",\n        \"virtual_table\": \"SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides information about the themes of exhibitions, the dates they occurred, and the attendance figures. It combines data from the 'exhibition_record' and 'exhibition' tables, filtered by a specific year of the exhibition.\",\n        \"virtual_table\": \"SELECT T2.theme ,  T1.date ,  T1.attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT e.Theme FROM exhibition e JOIN exhibition_record er ON e.Exhibition_ID = er.Exhibition_ID WHERE er.Attendance < 100 OR er.Attendance > 500;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of exhibitions that took place in or after a specific year. The placeholder in the WHERE clause represents the year from which the count should start.\",\n        \"virtual_table\": \"SELECT count(*) FROM exhibition WHERE YEAR  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average, minimum, and maximum ticket prices from the 'exhibition' table for exhibitions that took place before a specified year. The placeholder in the WHERE clause represents the year to filter the exhibitions.\",\n        \"virtual_table\": \"SELECT avg(ticket_price) ,  min(ticket_price) ,  max(ticket_price) FROM exhibition WHERE YEAR  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance < 100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance > 500",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies the themes of exhibitions that had attendance numbers both below and above specified thresholds. The placeholders in the WHERE clause represent the attendance limits for filtering the exhibitions.\",\n        \"virtual_table\": \"SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the themes of exhibitions along with the names of the artists who participated in those exhibitions, specifically focusing on exhibitions where the ticket price exceeds the average ticket price across all exhibitions. The placeholders in the query allow for dynamic filtering based on ticket prices.\",\n        \"virtual_table\": \"SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of exhibitions from the 'exhibition_record' table that had an attendance greater than a specified number or where the ticket price from the 'exhibition' table is less than a specified amount. The placeholders in the WHERE clause represent the attendance threshold and the ticket price limit.\",\n        \"virtual_table\": \"SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  [PLACEHOLDER-TYPE:NUMBER] OR T2.ticket_price  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT e.Theme\nFROM exhibition e\nJOIN exhibition_record er ON e.Exhibition_ID = er.Exhibition_ID\nWHERE er.Attendance < 100 OR er.Attendance > 500;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1694",
        "c_low": "SELECT MAX(rank) AS highest_rank FROM review;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT MAX(rank) FROM review",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the titles of items from the 'item' table that have received a rating higher than the average rating across all reviews. The query uses a subquery to calculate the average rating from the 'review' table, and filters the results based on this average.\",\n        \"virtual_table\": \"SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  >  (SELECT avg(rating) FROM review)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of users from the 'useracct' table who have written reviews, ordered by the number of reviews they have submitted. The placeholder in the LIMIT clause allows for specifying the maximum number of users to display.\",\n        \"virtual_table\": \"SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the titles of items from the 'item' table that have received a specific rating in the 'review' table. The placeholder in the WHERE clause represents the rating value.\",\n        \"virtual_table\": \"SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT MAX(rank) AS highest_rank FROM review;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves the titles of items from the 'item' table that meet two criteria: first, they must have reviews with a rank greater than a specified value; second, the average rating of the reviews for these items must also exceed a specified threshold. The placeholders in the query represent the numeric values for the rank and average rating thresholds.\",\n        \"virtual_table\": \"SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rank  >  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id HAVING avg(T2.rating)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of item titles and their unique identifiers from the 'item' table, ordered by the average rank of their reviews in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of items to retrieve.\",\n        \"virtual_table\": \"SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rank) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of item titles and their unique identifiers from the 'item' table, ordered by the average rating of reviews in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of items to retrieve.\",\n        \"virtual_table\": \"SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT MAX(rank) AS highest_rank FROM review;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT MAX(rank) AS highest_rank FROM review;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves the titles of items from the 'item' table that meet two criteria: first, they must have reviews with a rank greater than a specified value; second, the average rating of the reviews for these items must also exceed a specified threshold. The placeholders in the query represent the numeric values for the rank and average rating thresholds.\",\n        \"virtual_table\": \"SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rank  >  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id HAVING avg(T2.rating)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of item titles and their unique identifiers from the 'item' table, ordered by the average rank of their reviews in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of items to retrieve.\",\n        \"virtual_table\": \"SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rank) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the titles of items from the 'item' table that have received a rating higher than the average rating across all reviews. The query uses a subquery to calculate the average rating from the 'review' table, and filters the results based on this average.\",\n        \"virtual_table\": \"SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  >  (SELECT avg(rating) FROM review)\"\n    }\n}\n",
        "t_3+": "SELECT MAX(rank) AS highest_rank FROM review;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1702",
        "c_low": "SELECT DISTINCT item.title\nFROM item\nJOIN review ON item.i_id = review.i_id\nWHERE review.rating > 8 OR review.rating < 5;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating > 8 OR T2.rating < 5",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the titles of items from the 'item' table that have received a rating lower than a specified value. The placeholder in the WHERE clause represents the rating threshold.\",\n        \"virtual_table\": \"SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the titles of items from the 'item' table that have received a specific rating in the 'review' table. The placeholder in the WHERE clause represents the rating value.\",\n        \"virtual_table\": \"SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the titles of items from the 'item' table that have received a rating higher than the average rating across all reviews. The query uses a subquery to calculate the average rating from the 'review' table, and filters the results based on this average.\",\n        \"virtual_table\": \"SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  >  (SELECT avg(rating) FROM review)\"\n    }\n}\n",
        "c_high": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating > 8 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating < 5",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table retrieves the titles of items from the 'item' table that meet two criteria: first, they must have reviews with a rank greater than a specified value; second, the average rating of the reviews for these items must also exceed a specified threshold. The placeholders in the query represent the numeric values for the rank and average rating thresholds.\",\n        \"virtual_table\": \"SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rank  >  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id HAVING avg(T2.rating)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of item titles and their unique identifiers from the 'item' table, ordered by the average rating of reviews in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of items to retrieve.\",\n        \"virtual_table\": \"SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of item titles and their unique identifiers from the 'item' table, ordered by the average rank of their reviews in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of items to retrieve.\",\n        \"virtual_table\": \"SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rank) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT item.title\nFROM item\nJOIN review ON item.i_id = review.i_id\nWHERE review.rating > 8 OR review.rating < 5\nGROUP BY item.i_id\nHAVING COUNT(DISTINCT CASE WHEN review.rating > 8 THEN 1 END) > 0\n   AND COUNT(DISTINCT CASE WHEN review.rating < 5 THEN 1 END) > 0;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating > 8 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating < 5",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the titles of items from the 'item' table that have received a rating lower than a specified value. The placeholder in the WHERE clause represents the rating threshold.\",\n        \"virtual_table\": \"SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table retrieves the titles of items from the 'item' table that meet two criteria: first, they must have reviews with a rank greater than a specified value; second, the average rating of the reviews for these items must also exceed a specified threshold. The placeholders in the query represent the numeric values for the rank and average rating thresholds.\",\n        \"virtual_table\": \"SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rank  >  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id HAVING avg(T2.rating)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the titles of items from the 'item' table that have received a specific rating in the 'review' table. The placeholder in the WHERE clause represents the rating value.\",\n        \"virtual_table\": \"SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT item.title\nFROM item\nJOIN review ON item.i_id = review.i_id\nWHERE review.rating > 8 OR review.rating < 5\nGROUP BY item.i_id\nHAVING COUNT(DISTINCT CASE WHEN review.rating > 8 THEN 1 END) > 0\n   AND COUNT(DISTINCT CASE WHEN review.rating < 5 THEN 1 END) > 0;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1710",
        "c_low": "SELECT useracct.name, COUNT(review.a_id) AS review_count\nFROM useracct\nLEFT JOIN review ON useracct.u_id = review.u_id\nGROUP BY useracct.u_id;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT T1.name, COUNT(T2.a_id) AS review_count FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T1.u_id ORDER BY review_count DESC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of users from the 'useracct' table who have written reviews, ordered by the number of reviews they have submitted. The placeholder in the LIMIT clause allows for specifying the maximum number of users to display.\",\n        \"virtual_table\": \"SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT T1.name, COUNT(T2.a_id) AS review_count FROM useracct AS T1 LEFT JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T1.u_id",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names of users along with the average rating they have given for items. The data is sourced from the 'useracct' table, which contains user information, and the 'review' table, which holds the ratings given by users. The average rating is calculated by grouping the results based on the user identifier, ensuring that each user's average rating is displayed alongside their name.\",\n        \"virtual_table\": \"SELECT T1.name ,  avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id\"\n    }\n}\n",
        "t_1": "SELECT useracct.name, COUNT(review.a_id) AS review_count\nFROM useracct\nLEFT JOIN review ON useracct.u_id = review.u_id\nGROUP BY useracct.u_id;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T1.name, COUNT(T2.a_id) AS review_count FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T1.u_id",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of users from the 'useracct' table who have written reviews, ordered by the number of reviews they have submitted. The placeholder in the LIMIT clause allows for specifying the maximum number of users to display.\",\n        \"virtual_table\": \"SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of users along with the average rating they have given for items. The data is sourced from the 'useracct' table, which contains user information, and the 'review' table, which holds the ratings given by users. The average rating is calculated by grouping the results based on the user identifier, ensuring that each user's average rating is displayed alongside their name.\",\n        \"virtual_table\": \"SELECT T1.name ,  avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id\"\n    }\n}\n",
        "t_3+": "SELECT useracct.name, COUNT(review.a_id) AS review_count\nFROM useracct\nLEFT JOIN review ON useracct.u_id = review.u_id\nGROUP BY useracct.u_id;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1711",
        "c_low": "SELECT u.name\nFROM useracct u\nJOIN review r ON u.u_id = r.u_id\nWHERE r.rating = (SELECT MAX(rating) FROM review);",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id WHERE T2.rating = (SELECT MAX(rating) FROM review)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of users from the 'useracct' table who have written reviews, ordered by the number of reviews they have submitted. The placeholder in the LIMIT clause allows for specifying the maximum number of users to display.\",\n        \"virtual_table\": \"SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the titles of items from the 'item' table that have received a rating higher than the average rating across all reviews. The query uses a subquery to calculate the average rating from the 'review' table, and filters the results based on this average.\",\n        \"virtual_table\": \"SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  >  (SELECT avg(rating) FROM review)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of users from the 'useracct' table who have trusted other users, ordered by the average trust level they have given. The placeholder in the LIMIT clause represents the maximum number of users to display.\",\n        \"virtual_table\": \"SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.source_u_id GROUP BY T2.source_u_id ORDER BY avg(trust) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id ORDER BY T2.rating DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names of users along with the average rating they have given for items. The data is sourced from the 'useracct' table, which contains user information, and the 'review' table, which holds the ratings given by users. The average rating is calculated by grouping the results based on the user identifier, ensuring that each user's average rating is displayed alongside their name.\",\n        \"virtual_table\": \"SELECT T1.name ,  avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table retrieves the titles of items from the 'item' table that meet two criteria: first, they must have reviews with a rank greater than a specified value; second, the average rating of the reviews for these items must also exceed a specified threshold. The placeholders in the query represent the numeric values for the rank and average rating thresholds.\",\n        \"virtual_table\": \"SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rank  >  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id HAVING avg(T2.rating)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT u.name\nFROM useracct u\nJOIN review r ON u.u_id = r.u_id\nWHERE r.rating = (SELECT MAX(rating) FROM review);",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id ORDER BY T2.rating DESC LIMIT 1",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names of users along with the average rating they have given for items. The data is sourced from the 'useracct' table, which contains user information, and the 'review' table, which holds the ratings given by users. The average rating is calculated by grouping the results based on the user identifier, ensuring that each user's average rating is displayed alongside their name.\",\n        \"virtual_table\": \"SELECT T1.name ,  avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of users from the 'useracct' table who have written reviews, ordered by the number of reviews they have submitted. The placeholder in the LIMIT clause allows for specifying the maximum number of users to display.\",\n        \"virtual_table\": \"SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the titles of items from the 'item' table that have received a rating higher than the average rating across all reviews. The query uses a subquery to calculate the average rating from the 'review' table, and filters the results based on this average.\",\n        \"virtual_table\": \"SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  >  (SELECT avg(rating) FROM review)\"\n    }\n}\n",
        "t_3+": "SELECT u.name\nFROM useracct u\nJOIN review r ON u.u_id = r.u_id\nWHERE r.rating = (SELECT MAX(rating) FROM review);",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1726",
        "c_low": "SELECT Occupation, COUNT(*) as Count FROM player GROUP BY Occupation ORDER BY Count DESC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of players who are coached by coaches with a specific rank. The placeholders in the WHERE clause represent the rank of the coach.\",\n        \"virtual_table\": \"SELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T2.Rank  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT Occupation, COUNT(*) AS Number_of_Players FROM player GROUP BY Occupation ORDER BY Number_of_Players DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of players in each occupation from the 'player' table. The query groups the results by the 'Occupation' column, allowing users to see how many players belong to each specific occupation.\",\n        \"virtual_table\": \"SELECT Occupation ,  COUNT(*) FROM player GROUP BY Occupation\"\n    }\n}\n",
        "c_high": "SELECT Occupation, COUNT(*) as Count\nFROM player\nGROUP BY Occupation\nORDER BY Count DESC\nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT Occupation, COUNT(*) AS Player_Count FROM player GROUP BY Occupation ORDER BY Player_Count DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of players in each occupation from the 'player' table. The query groups the results by the 'Occupation' column, allowing users to see how many players belong to each specific occupation.\",\n        \"virtual_table\": \"SELECT Occupation ,  COUNT(*) FROM player GROUP BY Occupation\"\n    }\n}\n",
        "t_2": "SELECT Occupation, COUNT(*) as Count\nFROM player\nGROUP BY Occupation\nORDER BY Count DESC\nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT Occupation, COUNT(*) as Count FROM player GROUP BY Occupation ORDER BY Count DESC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of players who are coached by coaches with a specific rank. The placeholders in the WHERE clause represent the rank of the coach.\",\n        \"virtual_table\": \"SELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T2.Rank  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1734",
        "c_low": "SELECT c.Club_ID, c.Club_name, COUNT(co.Coach_ID) AS Number_of_Coaches\nFROM club AS c\nLEFT JOIN coach AS co ON c.Club_ID = co.Club_ID\nGROUP BY c.Club_ID, c.Club_name;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of players who are coached by coaches with a specific rank. The placeholders in the WHERE clause represent the rank of the coach.\",\n        \"virtual_table\": \"SELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T2.Rank  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT club.Club_ID, club.Club_name, COUNT(coach.Coach_ID) AS Number_of_Coaches\nFROM club\nLEFT JOIN coach ON club.Club_ID = coach.Club_ID\nGROUP BY club.Club_ID, club.Club_name;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and genders of players who have been coached by a coach starting from a specific year. The placeholder in the WHERE clause represents the starting year of the coaching relationship.\",\n        \"virtual_table\": \"SELECT T3.Player_name ,  T3.gender FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T1.Starting_year  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT club.Club_ID, club.Club_name, COUNT(coach.Coach_ID) AS Number_of_Coaches\nFROM club\nLEFT JOIN coach ON club.Club_ID = coach.Club_ID\nGROUP BY club.Club_ID, club.Club_name;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT club.Club_ID, club.Club_name, COUNT(coach.Coach_ID) AS Number_of_Coaches\nFROM club\nLEFT JOIN coach ON club.Club_ID = coach.Club_ID\nGROUP BY club.Club_ID, club.Club_name;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT club.Club_ID, club.Club_name, COUNT(coach.Coach_ID) AS Number_of_Coaches\nFROM club\nLEFT JOIN coach ON club.Club_ID = coach.Club_ID\nGROUP BY club.Club_ID, club.Club_name;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT club.Club_ID, club.Club_name, COUNT(coach.Coach_ID) AS Number_of_Coaches \nFROM club \nLEFT JOIN coach ON club.Club_ID = coach.Club_ID \nGROUP BY club.Club_ID, club.Club_name;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of players who are coached by coaches with a specific rank. The placeholders in the WHERE clause represent the rank of the coach.\",\n        \"virtual_table\": \"SELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T2.Rank  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names and genders of players who have been coached by a coach starting from a specific year. The placeholder in the WHERE clause represents the starting year of the coaching relationship.\",\n        \"virtual_table\": \"SELECT T3.Player_name ,  T3.gender FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T1.Starting_year  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1735",
        "c_low": "SELECT SUM(mr.Gold) AS Total_Gold\nFROM match_result AS mr\nJOIN club AS c ON mr.Club_ID = c.Club_ID\nWHERE c.Club_ID = (\n    SELECT c2.Club_ID\n    FROM coach AS co\n    JOIN club AS c2 ON co.Club_ID = c2.Club_ID\n    GROUP BY c2.Club_ID\n    ORDER BY COUNT(co.Coach_ID) DESC\n    LIMIT 1\n);",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of players who are coached by coaches with a specific rank. The placeholders in the WHERE clause represent the rank of the coach.\",\n        \"virtual_table\": \"SELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T2.Rank  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT SUM(mr.Gold) AS Total_Gold\nFROM match_result AS mr\nJOIN club AS c ON mr.Club_ID = c.Club_ID\nWHERE c.Club_ID IN (\n    SELECT pc.Club_ID\n    FROM player_coach AS pc\n    GROUP BY pc.Club_ID\n    ORDER BY COUNT(pc.Coach_ID) DESC\n    LIMIT 1\n);",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and genders of players who have been coached by a coach starting from a specific year. The placeholder in the WHERE clause represents the starting year of the coaching relationship.\",\n        \"virtual_table\": \"SELECT T3.Player_name ,  T3.gender FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T1.Starting_year  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT SUM(mr.Gold) AS Total_Gold\nFROM match_result mr\nJOIN club c ON mr.Club_ID = c.Club_ID\nWHERE c.Club_ID = (\n    SELECT pc.Club_ID\n    FROM player_coach pc\n    GROUP BY pc.Club_ID\n    ORDER BY COUNT(pc.Coach_ID) DESC\n    LIMIT 1\n);",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT SUM(mr.Gold) AS Total_Gold_Medals\nFROM match_result AS mr\nJOIN club AS c ON mr.Club_ID = c.Club_ID\nWHERE c.Club_ID = (\n    SELECT pc.Club_ID\n    FROM player_coach AS pc\n    GROUP BY pc.Club_ID\n    ORDER BY COUNT(pc.Coach_ID) DESC\n    LIMIT 1\n);",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT SUM(mr.Gold) AS Total_Gold_Medals\nFROM match_result AS mr\nJOIN club AS c ON mr.Club_ID = c.Club_ID\nWHERE c.Club_ID = (\n    SELECT pc.Club_ID\n    FROM player_coach AS pc\n    GROUP BY pc.Club_ID\n    ORDER BY COUNT(pc.Coach_ID) DESC\n    LIMIT 1\n);",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT SUM(Gold) AS Total_Gold_Medals\nFROM match_result\nWHERE Club_ID = (\n    SELECT Club_ID\n    FROM coach\n    GROUP BY Club_ID\n    ORDER BY COUNT(Coach_ID) DESC\n    LIMIT 1\n);",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and genders of players who have been coached by a coach starting from a specific year. The placeholder in the WHERE clause represents the starting year of the coaching relationship.\",\n        \"virtual_table\": \"SELECT T3.Player_name ,  T3.gender FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T1.Starting_year  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of players who are coached by coaches with a specific rank. The placeholders in the WHERE clause represent the rank of the coach.\",\n        \"virtual_table\": \"SELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T2.Rank  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1749",
        "c_low": "SELECT p.Name \nFROM people p \nJOIN gymnast g ON p.People_ID = g.Gymnast_ID \nWHERE p.Hometown != 'Santo Domingo';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T2.Hometown != 'Santo Domingo'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of gymnasts from the 'people' table who do not belong to a specific hometown. The placeholder in the WHERE clause represents the hometown that is being excluded.\",\n        \"virtual_table\": \"SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Hometown != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T2.Hometown != 'Santo Domingo'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of hometowns of gymnasts, derived from the 'gymnast' and 'people' tables. It groups the results by hometown and orders them by the number of gymnasts from each hometown in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of hometowns to return.\",\n        \"virtual_table\": \"SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique hometowns of gymnasts from the 'people' table who have achieved a total score above a specified threshold. The placeholder in the WHERE clause represents the minimum total points required to filter the gymnasts.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of gymnasts grouped by their hometowns. It combines data from the 'gymnast' and 'people' tables, linking them through the unique identifiers for each gymnast and person. The result will show how many gymnasts come from each hometown.\",\n        \"virtual_table\": \"SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown\"\n    }\n}\n",
        "t_1": "SELECT p.Name \nFROM people p \nJOIN gymnast g ON p.People_ID = g.Gymnast_ID \nWHERE p.Hometown != 'Santo Domingo';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T2.Hometown != 'Santo Domingo'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of gymnasts from the 'people' table who do not belong to a specific hometown. The placeholder in the WHERE clause represents the hometown that is being excluded.\",\n        \"virtual_table\": \"SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Hometown != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of hometowns of gymnasts, derived from the 'gymnast' and 'people' tables. It groups the results by hometown and orders them by the number of gymnasts from each hometown in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of hometowns to return.\",\n        \"virtual_table\": \"SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique hometowns of gymnasts from the 'people' table who have achieved a total score above a specified threshold. The placeholder in the WHERE clause represents the minimum total points required to filter the gymnasts.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT p.Name \nFROM people p \nJOIN gymnast g ON p.People_ID = g.Gymnast_ID \nWHERE p.Hometown != 'Santo Domingo';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1754",
        "c_low": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T2.Age = (SELECT MIN(Age) FROM people)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the average age of gymnasts by joining the 'gymnast' table with the 'people' table based on their unique identifiers. The result provides insights into the age demographics of the gymnasts.\",\n        \"virtual_table\": \"SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID\"\n    }\n}\n",
        "c_mid": "SELECT Total_Points FROM gymnast WHERE Gymnast_ID = (SELECT People_ID FROM people ORDER BY Age ASC LIMIT 1)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of gymnasts from the 'people' table who do not belong to a specific hometown. The placeholder in the WHERE clause represents the hometown that is being excluded.\",\n        \"virtual_table\": \"SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Hometown != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T2.Age = (SELECT MIN(Age) FROM people)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique hometowns of gymnasts from the 'people' table who have achieved a total score above a specified threshold. The placeholder in the WHERE clause represents the minimum total points required to filter the gymnasts.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of gymnasts grouped by their hometowns. It combines data from the 'gymnast' and 'people' tables, linking them through the unique identifiers for each gymnast and person. The result will show how many gymnasts come from each hometown.\",\n        \"virtual_table\": \"SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of hometowns of gymnasts, derived from the 'gymnast' and 'people' tables. It groups the results by hometown and orders them by the number of gymnasts from each hometown in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of hometowns to return.\",\n        \"virtual_table\": \"SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Total_Points FROM gymnast WHERE Gymnast_ID = (SELECT People_ID FROM people ORDER BY Age ASC LIMIT 1);",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT SUM(T1.Total_Points) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T2.Age = (SELECT MIN(Age) FROM people)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the average age of gymnasts by joining the 'gymnast' table with the 'people' table based on their unique identifiers. The result provides insights into the age demographics of the gymnasts.\",\n        \"virtual_table\": \"SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique hometowns of gymnasts from the 'people' table who have achieved a total score above a specified threshold. The placeholder in the WHERE clause represents the minimum total points required to filter the gymnasts.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of gymnasts grouped by their hometowns. It combines data from the 'gymnast' and 'people' tables, linking them through the unique identifiers for each gymnast and person. The result will show how many gymnasts come from each hometown.\",\n        \"virtual_table\": \"SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown\"\n    }\n}\n",
        "t_3+": "SELECT Total_Points FROM gymnast WHERE Gymnast_ID = (SELECT People_ID FROM people ORDER BY Age ASC LIMIT 1);",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1755",
        "c_low": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T2.Age = (SELECT MIN(Age) FROM people)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the average age of gymnasts by joining the 'gymnast' table with the 'people' table based on their unique identifiers. The result provides insights into the age demographics of the gymnasts.\",\n        \"virtual_table\": \"SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the ages of individuals from the 'people' table, sorted in descending order by their height. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT Age FROM people ORDER BY Height DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T2.Age = (SELECT MIN(Age) FROM people)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of gymnasts from the 'people' table who do not belong to a specific hometown. The placeholder in the WHERE clause represents the hometown that is being excluded.\",\n        \"virtual_table\": \"SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Hometown != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T2.Age = (SELECT MIN(Age) FROM people)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique hometowns of gymnasts from the 'people' table who have achieved a total score above a specified threshold. The placeholder in the WHERE clause represents the minimum total points required to filter the gymnasts.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of gymnasts grouped by their hometowns. It combines data from the 'gymnast' and 'people' tables, linking them through the unique identifiers for each gymnast and person. The result will show how many gymnasts come from each hometown.\",\n        \"virtual_table\": \"SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of hometowns of gymnasts, derived from the 'gymnast' and 'people' tables. It groups the results by hometown and orders them by the number of gymnasts from each hometown in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of hometowns to return.\",\n        \"virtual_table\": \"SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Total_Points FROM gymnast WHERE Gymnast_ID = (SELECT People_ID FROM people ORDER BY Age ASC LIMIT 1)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the ages of individuals from the 'people' table, sorted in descending order by their height. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT Age FROM people ORDER BY Height DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T2.Age = (SELECT MIN(Age) FROM people)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the average age of gymnasts by joining the 'gymnast' table with the 'people' table based on their unique identifiers. The result provides insights into the age demographics of the gymnasts.\",\n        \"virtual_table\": \"SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique hometowns of gymnasts from the 'people' table who have achieved a total score above a specified threshold. The placeholder in the WHERE clause represents the minimum total points required to filter the gymnasts.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of gymnasts grouped by their hometowns. It combines data from the 'gymnast' and 'people' tables, linking them through the unique identifiers for each gymnast and person. The result will show how many gymnasts come from each hometown.\",\n        \"virtual_table\": \"SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown\"\n    }\n}\n",
        "t_3+": "SELECT Total_Points FROM gymnast WHERE Gymnast_ID = (SELECT People_ID FROM people ORDER BY Age ASC LIMIT 1);",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1762",
        "c_low": "SELECT T2.Hometown, COUNT(*) as Hometown_Count\nFROM gymnast AS T1\nJOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID\nGROUP BY T2.Hometown\nORDER BY Hometown_Count DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the average age of gymnasts by joining the 'gymnast' table with the 'people' table based on their unique identifiers. The result provides insights into the age demographics of the gymnasts.\",\n        \"virtual_table\": \"SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID\"\n    }\n}\n",
        "c_mid": "SELECT Hometown, COUNT(*) as Count FROM people JOIN gymnast ON people.People_ID = gymnast.Gymnast_ID GROUP BY Hometown ORDER BY Count DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of gymnasts from the 'people' table who do not belong to a specific hometown. The placeholder in the WHERE clause represents the hometown that is being excluded.\",\n        \"virtual_table\": \"SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Hometown != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT T2.Hometown, COUNT(*) AS Count FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown ORDER BY Count DESC LIMIT 1",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of hometowns of gymnasts, derived from the 'gymnast' and 'people' tables. It groups the results by hometown and orders them by the number of gymnasts from each hometown in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of hometowns to return.\",\n        \"virtual_table\": \"SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique hometowns of gymnasts from the 'people' table who have achieved a total score above a specified threshold. The placeholder in the WHERE clause represents the minimum total points required to filter the gymnasts.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of gymnasts grouped by their hometowns. It combines data from the 'gymnast' and 'people' tables, linking them through the unique identifiers for each gymnast and person. The result will show how many gymnasts come from each hometown.\",\n        \"virtual_table\": \"SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown\"\n    }\n}\n",
        "t_1": "SELECT Hometown, COUNT(*) as Count FROM people WHERE People_ID IN (SELECT Gymnast_ID FROM gymnast) GROUP BY Hometown ORDER BY Count DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T2.Hometown, COUNT(*) AS Count FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown ORDER BY Count DESC LIMIT 1",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of hometowns of gymnasts, derived from the 'gymnast' and 'people' tables. It groups the results by hometown and orders them by the number of gymnasts from each hometown in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of hometowns to return.\",\n        \"virtual_table\": \"SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique hometowns of gymnasts from the 'people' table who have achieved a total score above a specified threshold. The placeholder in the WHERE clause represents the minimum total points required to filter the gymnasts.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of gymnasts grouped by their hometowns. It combines data from the 'gymnast' and 'people' tables, linking them through the unique identifiers for each gymnast and person. The result will show how many gymnasts come from each hometown.\",\n        \"virtual_table\": \"SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown\"\n    }\n}\n",
        "t_3+": "SELECT Hometown, COUNT(*) as Count FROM people WHERE People_ID IN (SELECT Gymnast_ID FROM gymnast) GROUP BY Hometown ORDER BY Count DESC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1764",
        "c_low": "SELECT T1.Hometown\nFROM people AS T1\nJOIN gymnast AS T2 ON T1.People_ID = T2.Gymnast_ID\nGROUP BY T1.Hometown\nHAVING COUNT(T1.People_ID) >= 2;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the average age of gymnasts by joining the 'gymnast' table with the 'people' table based on their unique identifiers. The result provides insights into the age demographics of the gymnasts.\",\n        \"virtual_table\": \"SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID\"\n    }\n}\n",
        "c_mid": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown HAVING COUNT(T2.Gymnast_ID) >= 2;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of gymnasts from the 'people' table who do not belong to a specific hometown. The placeholder in the WHERE clause represents the hometown that is being excluded.\",\n        \"virtual_table\": \"SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Hometown != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*) >= 2",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of hometowns of gymnasts, derived from the 'gymnast' and 'people' tables. It groups the results by hometown and orders them by the number of gymnasts from each hometown in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of hometowns to return.\",\n        \"virtual_table\": \"SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique hometowns of gymnasts from the 'people' table who have achieved a total score above a specified threshold. The placeholder in the WHERE clause represents the minimum total points required to filter the gymnasts.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of gymnasts grouped by their hometowns. It combines data from the 'gymnast' and 'people' tables, linking them through the unique identifiers for each gymnast and person. The result will show how many gymnasts come from each hometown.\",\n        \"virtual_table\": \"SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown\"\n    }\n}\n",
        "t_1": "SELECT Hometown\nFROM people\nWHERE People_ID IN (SELECT Gymnast_ID FROM gymnast)\nGROUP BY Hometown\nHAVING COUNT(Gymnast_ID) >= 2;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*) >= 2",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of hometowns of gymnasts, derived from the 'gymnast' and 'people' tables. It groups the results by hometown and orders them by the number of gymnasts from each hometown in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of hometowns to return.\",\n        \"virtual_table\": \"SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique hometowns of gymnasts from the 'people' table who have achieved a total score above a specified threshold. The placeholder in the WHERE clause represents the minimum total points required to filter the gymnasts.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of gymnasts grouped by their hometowns. It combines data from the 'gymnast' and 'people' tables, linking them through the unique identifiers for each gymnast and person. The result will show how many gymnasts come from each hometown.\",\n        \"virtual_table\": \"SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown\"\n    }\n}\n",
        "t_3+": "SELECT Hometown\nFROM people\nWHERE People_ID IN (SELECT Gymnast_ID FROM gymnast)\nGROUP BY Hometown\nHAVING COUNT(Gymnast_ID) >= 2;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1765",
        "c_low": "SELECT Hometown FROM people WHERE People_ID IN (SELECT Gymnast_ID FROM gymnast GROUP BY Gymnast_ID HAVING COUNT(Gymnast_ID) >= 2)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the average age of gymnasts by joining the 'gymnast' table with the 'people' table based on their unique identifiers. The result provides insights into the age demographics of the gymnasts.\",\n        \"virtual_table\": \"SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID\"\n    }\n}\n",
        "c_mid": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown HAVING COUNT(T1.Gymnast_ID) >= 2;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of gymnasts from the 'people' table who do not belong to a specific hometown. The placeholder in the WHERE clause represents the hometown that is being excluded.\",\n        \"virtual_table\": \"SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Hometown != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*) >= 2",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of hometowns of gymnasts, derived from the 'gymnast' and 'people' tables. It groups the results by hometown and orders them by the number of gymnasts from each hometown in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of hometowns to return.\",\n        \"virtual_table\": \"SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique hometowns of gymnasts from the 'people' table who have achieved a total score above a specified threshold. The placeholder in the WHERE clause represents the minimum total points required to filter the gymnasts.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of gymnasts grouped by their hometowns. It combines data from the 'gymnast' and 'people' tables, linking them through the unique identifiers for each gymnast and person. The result will show how many gymnasts come from each hometown.\",\n        \"virtual_table\": \"SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown\"\n    }\n}\n",
        "t_1": "SELECT hometown\nFROM people\nWHERE People_ID IN (SELECT Gymnast_ID FROM gymnast)\nGROUP BY hometown\nHAVING COUNT(Gymnast_ID) >= 2;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*) >= 2",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of hometowns of gymnasts, derived from the 'gymnast' and 'people' tables. It groups the results by hometown and orders them by the number of gymnasts from each hometown in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of hometowns to return.\",\n        \"virtual_table\": \"SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique hometowns of gymnasts from the 'people' table who have achieved a total score above a specified threshold. The placeholder in the WHERE clause represents the minimum total points required to filter the gymnasts.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of gymnasts grouped by their hometowns. It combines data from the 'gymnast' and 'people' tables, linking them through the unique identifiers for each gymnast and person. The result will show how many gymnasts come from each hometown.\",\n        \"virtual_table\": \"SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown\"\n    }\n}\n",
        "t_3+": "SELECT hometown\nFROM people\nWHERE People_ID IN (SELECT Gymnast_ID FROM gymnast)\nGROUP BY hometown\nHAVING COUNT(Gymnast_ID) >= 2;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1768",
        "c_low": "SELECT DISTINCT hometown FROM people WHERE People_ID NOT IN (SELECT Gymnast_ID FROM gymnast);",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT DISTINCT Hometown FROM people WHERE People_ID NOT IN (SELECT Gymnast_ID FROM gymnast)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of gymnasts from the 'people' table who do not belong to a specific hometown. The placeholder in the WHERE clause represents the hometown that is being excluded.\",\n        \"virtual_table\": \"SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Hometown != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT Hometown FROM people WHERE Hometown NOT IN (SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of hometowns of gymnasts, derived from the 'gymnast' and 'people' tables. It groups the results by hometown and orders them by the number of gymnasts from each hometown in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of hometowns to return.\",\n        \"virtual_table\": \"SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique hometowns of gymnasts from the 'people' table who have achieved a total score above a specified threshold. The placeholder in the WHERE clause represents the minimum total points required to filter the gymnasts.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of gymnasts grouped by their hometowns. It combines data from the 'gymnast' and 'people' tables, linking them through the unique identifiers for each gymnast and person. The result will show how many gymnasts come from each hometown.\",\n        \"virtual_table\": \"SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT hometown FROM people WHERE People_ID NOT IN (SELECT Gymnast_ID FROM gymnast);",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT DISTINCT Hometown FROM people WHERE People_ID NOT IN (SELECT Gymnast_ID FROM gymnast)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of gymnasts from the 'people' table who do not belong to a specific hometown. The placeholder in the WHERE clause represents the hometown that is being excluded.\",\n        \"virtual_table\": \"SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Hometown != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of hometowns of gymnasts, derived from the 'gymnast' and 'people' tables. It groups the results by hometown and orders them by the number of gymnasts from each hometown in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of hometowns to return.\",\n        \"virtual_table\": \"SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique hometowns of gymnasts from the 'people' table who have achieved a total score above a specified threshold. The placeholder in the WHERE clause represents the minimum total points required to filter the gymnasts.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT hometown FROM people WHERE People_ID NOT IN (SELECT Gymnast_ID FROM gymnast);",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1769",
        "c_low": "SELECT DISTINCT Hometown FROM people WHERE People_ID NOT IN (SELECT Gymnast_ID FROM gymnast)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the average age of gymnasts by joining the 'gymnast' table with the 'people' table based on their unique identifiers. The result provides insights into the age demographics of the gymnasts.\",\n        \"virtual_table\": \"SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT Hometown FROM people WHERE People_ID NOT IN (SELECT Gymnast_ID FROM gymnast)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of gymnasts from the 'people' table who do not belong to a specific hometown. The placeholder in the WHERE clause represents the hometown that is being excluded.\",\n        \"virtual_table\": \"SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Hometown != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT T2.Hometown FROM people AS T2 LEFT JOIN gymnast AS T1 ON T1.Gymnast_ID = T2.People_ID WHERE T1.Gymnast_ID IS NULL",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of hometowns of gymnasts, derived from the 'gymnast' and 'people' tables. It groups the results by hometown and orders them by the number of gymnasts from each hometown in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of hometowns to return.\",\n        \"virtual_table\": \"SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique hometowns of gymnasts from the 'people' table who have achieved a total score above a specified threshold. The placeholder in the WHERE clause represents the minimum total points required to filter the gymnasts.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of gymnasts grouped by their hometowns. It combines data from the 'gymnast' and 'people' tables, linking them through the unique identifiers for each gymnast and person. The result will show how many gymnasts come from each hometown.\",\n        \"virtual_table\": \"SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT hometown FROM people WHERE People_ID NOT IN (SELECT Gymnast_ID FROM gymnast);",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT DISTINCT T2.Hometown FROM people AS T2 WHERE T2.Hometown NOT IN (SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of gymnasts from the 'people' table who do not belong to a specific hometown. The placeholder in the WHERE clause represents the hometown that is being excluded.\",\n        \"virtual_table\": \"SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Hometown != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of hometowns of gymnasts, derived from the 'gymnast' and 'people' tables. It groups the results by hometown and orders them by the number of gymnasts from each hometown in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of hometowns to return.\",\n        \"virtual_table\": \"SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique hometowns of gymnasts from the 'people' table who have achieved a total score above a specified threshold. The placeholder in the WHERE clause represents the minimum total points required to filter the gymnasts.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT hometown FROM people WHERE People_ID NOT IN (SELECT Gymnast_ID FROM gymnast);",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1770",
        "c_low": "SELECT DISTINCT p.Hometown \nFROM people p \nWHERE p.Age > 23 OR p.Age < 20;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT DISTINCT p.Hometown\nFROM people p\nWHERE p.Age > 23 OR p.Age < 20;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T2.Age > 23 OR T2.Age < 20",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of hometowns of gymnasts, derived from the 'gymnast' and 'people' tables. It groups the results by hometown and orders them by the number of gymnasts from each hometown in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of hometowns to return.\",\n        \"virtual_table\": \"SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of gymnasts grouped by their hometowns. It combines data from the 'gymnast' and 'people' tables, linking them through the unique identifiers for each gymnast and person. The result will show how many gymnasts come from each hometown.\",\n        \"virtual_table\": \"SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique hometowns of gymnasts from the 'people' table who have achieved a total score above a specified threshold. The placeholder in the WHERE clause represents the minimum total points required to filter the gymnasts.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT p.Hometown \nFROM people p \nWHERE p.Age > 23 OR p.Age < 20;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T2.Age > 23 OR T2.Age < 20",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of hometowns of gymnasts, derived from the 'gymnast' and 'people' tables. It groups the results by hometown and orders them by the number of gymnasts from each hometown in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of hometowns to return.\",\n        \"virtual_table\": \"SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of gymnasts grouped by their hometowns. It combines data from the 'gymnast' and 'people' tables, linking them through the unique identifiers for each gymnast and person. The result will show how many gymnasts come from each hometown.\",\n        \"virtual_table\": \"SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique hometowns of gymnasts from the 'people' table who have achieved a total score above a specified threshold. The placeholder in the WHERE clause represents the minimum total points required to filter the gymnasts.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT p.Hometown \nFROM people p \nWHERE p.Age > 23 OR p.Age < 20;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1771",
        "c_low": "SELECT DISTINCT p1.Hometown \nFROM people p1 \nJOIN people p2 ON p1.Hometown = p2.Hometown \nWHERE p1.Age > 23 AND p2.Age < 20;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT DISTINCT p1.Hometown \nFROM people p1 \nWHERE p1.Age > 23 \nINTERSECT \nSELECT DISTINCT p2.Hometown \nFROM people p2 \nWHERE p2.Age < 20;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT Hometown FROM (SELECT T2.Hometown, COUNT(*) AS Count FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T2.Age > 23 GROUP BY T2.Hometown) AS OlderHometowns INTERSECT SELECT Hometown FROM (SELECT T2.Hometown, COUNT(*) AS Count FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T2.Age < 20 GROUP BY T2.Hometown) AS YoungerHometowns;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of gymnasts grouped by their hometowns. It combines data from the 'gymnast' and 'people' tables, linking them through the unique identifiers for each gymnast and person. The result will show how many gymnasts come from each hometown.\",\n        \"virtual_table\": \"SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT p1.Hometown \nFROM people p1 \nWHERE p1.Age > 23 \nINTERSECT \nSELECT DISTINCT p2.Hometown \nFROM people p2 \nWHERE p2.Age < 20;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT Hometown FROM (SELECT T2.Hometown, COUNT(*) AS Count FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T2.Age > 23 GROUP BY T2.Hometown) AS OlderHometowns INTERSECT SELECT Hometown FROM (SELECT T2.Hometown, COUNT(*) AS Count FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T2.Age < 20 GROUP BY T2.Hometown) AS YoungerHometowns;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of gymnasts grouped by their hometowns. It combines data from the 'gymnast' and 'people' tables, linking them through the unique identifiers for each gymnast and person. The result will show how many gymnasts come from each hometown.\",\n        \"virtual_table\": \"SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT p1.Hometown \nFROM people p1 \nJOIN people p2 ON p1.Hometown = p2.Hometown \nWHERE p1.Age > 23 AND p2.Age < 20;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1790",
        "c_low": "SELECT T1.name, T2.balance AS checking_balance, T3.balance AS savings_balance \nFROM accounts AS T1 \nJOIN checking AS T2 ON T1.custid = T2.custid \nJOIN savings AS T3 ON T1.custid = T3.custid \nWHERE T1.name = 'Brown'",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names of customers from the 'ACCOUNTS' table who have both checking and savings accounts. The results are ordered by the total balance of their checking and savings accounts, with a limit on the number of results returned, specified by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the total balance from the savings accounts of customers in the 'SAVINGS' table, excluding those with a specific name from the 'ACCOUNTS' table. The placeholder in the WHERE clause represents the customer's name that should be excluded from the results.\",\n        \"virtual_table\": \"SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of customers who have a higher balance in their checking account compared to their savings account. The query joins the 'ACCOUNTS', 'CHECKING', and 'SAVINGS' tables based on the customer ID, and applies a condition to filter those customers accordingly.\",\n        \"virtual_table\": \"SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance\"\n    }\n}\n",
        "c_mid": "SELECT T2.balance AS checking_balance, T3.balance AS savings_balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T1.name = 'Brown'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of customer balances from both checking and savings accounts. It retrieves the customer's full name along with their respective balances from the 'CHECKING' and 'SAVINGS' tables, linking them through the 'ACCOUNTS' table. The results are ordered by the total balance across both account types in descending order.\",\n        \"virtual_table\": \"SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the balances of checking accounts along with the names of customers from the 'ACCOUNTS' table. It joins the 'CHECKING' and 'SAVINGS' tables to ensure that only customers with both account types are included. The results are ordered by the savings account balance, and a limit is applied to control the number of records returned.\",\n        \"virtual_table\": \"SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of savings accounts that have a balance greater than the average balance of all savings accounts. The query uses a subquery to calculate the average balance, and the placeholder in the WHERE clause allows for dynamic adjustment of the balance condition.\",\n        \"virtual_table\": \"SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)\"\n    }\n}\n",
        "c_high": "SELECT T1.name, T2.balance AS checking_balance, T3.balance AS savings_balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T1.name = 'Brown'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the current balance of checking accounts for customers whose names are associated with savings accounts that have a balance greater than the average balance of all savings accounts. The placeholders in the query allow for dynamic filtering based on customer names and balance conditions.\",\n        \"virtual_table\": \"SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of customers who have a checking account balance greater than the average checking account balance and a savings account balance less than the average savings account balance. The placeholders in the query represent the necessary conditions for filtering the balances.\",\n        \"virtual_table\": \"SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names of customers along with the total balance of their checking and savings accounts, specifically for those customers whose savings account balance is less than their checking account balance. The placeholders in the query represent the necessary values for the balances and customer identifiers.\",\n        \"virtual_table\": \"SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance\"\n    }\n}\n",
        "t_1": "SELECT a.name, s.balance AS savings_balance, c.balance AS checking_balance \nFROM ACCOUNTS a \nJOIN SAVINGS s ON a.custid = s.custid \nJOIN CHECKING c ON a.custid = c.custid \nWHERE a.name = 'Brown';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of savings accounts that have a balance greater than the average balance of all savings accounts. The query uses a subquery to calculate the average balance, and the placeholder in the WHERE clause allows for dynamic adjustment of the balance condition.\",\n        \"virtual_table\": \"SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)\"\n    }\n}\n",
        "t_2": "SELECT T1.name, T2.balance AS checking_balance, T3.balance AS savings_balance \nFROM accounts AS T1 \nJOIN checking AS T2 ON T1.custid = T2.custid \nJOIN savings AS T3 ON T1.custid = T3.custid \nWHERE T1.name = 'Brown'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total balance from the savings accounts of customers in the 'SAVINGS' table, excluding those with a specific name from the 'ACCOUNTS' table. The placeholder in the WHERE clause represents the customer's name that should be excluded from the results.\",\n        \"virtual_table\": \"SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of customers from the 'ACCOUNTS' table who have a checking account balance that is below the average balance of all checking accounts. The placeholders in the query represent the necessary values for filtering the results based on the average balance.\",\n        \"virtual_table\": \"SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the current balance of checking accounts for customers from the 'ACCOUNTS' table whose names match a specific pattern. The placeholder in the WHERE clause allows for filtering based on the customer's name.\",\n        \"virtual_table\": \"SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT T1.name, T2.balance AS checking_balance, T3.balance AS savings_balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T1.name = 'Brown'",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the current balance of checking accounts for customers whose names are associated with savings accounts that have a balance greater than the average balance of all savings accounts. The placeholders in the query allow for dynamic filtering based on customer names and balance conditions.\",\n        \"virtual_table\": \"SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of customers who have a checking account balance greater than the average checking account balance and a savings account balance less than the average savings account balance. The placeholders in the query represent the necessary conditions for filtering the balances.\",\n        \"virtual_table\": \"SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names of customers along with the total balance of their checking and savings accounts, specifically for those customers whose savings account balance is less than their checking account balance. The placeholders in the query represent the necessary values for the balances and customer identifiers.\",\n        \"virtual_table\": \"SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1791",
        "c_low": "SELECT T1.name, T2.balance AS checking_balance, T3.balance AS savings_balance \nFROM accounts AS T1 \nJOIN checking AS T2 ON T1.custid = T2.custid \nJOIN savings AS T3 ON T1.custid = T3.custid \nWHERE T1.name LIKE '%Brown%';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names of customers from the 'ACCOUNTS' table who have both checking and savings accounts. The results are ordered by the total balance of their checking and savings accounts, with a limit on the number of results returned, specified by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of customers who have a higher balance in their checking account compared to their savings account. The query joins the 'ACCOUNTS', 'CHECKING', and 'SAVINGS' tables based on the customer ID, and applies a condition to filter those customers accordingly.\",\n        \"virtual_table\": \"SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total balance from the savings accounts of customers in the 'SAVINGS' table, excluding those with a specific name from the 'ACCOUNTS' table. The placeholder in the WHERE clause represents the customer's name that should be excluded from the results.\",\n        \"virtual_table\": \"SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT T2.balance AS checking_balance, T3.balance AS savings_balance, T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T1.name LIKE '%Brown%'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of customer balances from both checking and savings accounts. It retrieves the customer's full name along with their respective balances from the 'CHECKING' and 'SAVINGS' tables, linking them through the 'ACCOUNTS' table. The results are ordered by the total balance across both account types in descending order.\",\n        \"virtual_table\": \"SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the balances of checking accounts along with the names of customers from the 'ACCOUNTS' table. It joins the 'CHECKING' and 'SAVINGS' tables to ensure that only customers with both account types are included. The results are ordered by the savings account balance, and a limit is applied to control the number of records returned.\",\n        \"virtual_table\": \"SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of customers from the 'ACCOUNTS' table who have a checking account balance that is below the average balance of all checking accounts. The placeholders in the query represent the necessary values for filtering the results based on the average balance.\",\n        \"virtual_table\": \"SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)\"\n    }\n}\n",
        "c_high": "SELECT T1.name, T2.balance AS checking_balance, T3.balance AS savings_balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T1.name LIKE '%Brown%'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of customers who have a checking account balance greater than the average checking account balance and a savings account balance less than the average savings account balance. The placeholders in the query represent the necessary conditions for filtering the balances.\",\n        \"virtual_table\": \"SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the current balance of checking accounts for customers whose names are associated with savings accounts that have a balance greater than the average balance of all savings accounts. The placeholders in the query allow for dynamic filtering based on customer names and balance conditions.\",\n        \"virtual_table\": \"SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names of customers along with the total balance of their checking and savings accounts, specifically for those customers whose savings account balance is less than their checking account balance. The placeholders in the query represent the necessary values for the balances and customer identifiers.\",\n        \"virtual_table\": \"SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance\"\n    }\n}\n",
        "t_1": "SELECT a.name, s.balance AS savings_balance, c.balance AS checking_balance \nFROM ACCOUNTS a \nJOIN SAVINGS s ON a.custid = s.custid \nJOIN CHECKING c ON a.custid = c.custid \nWHERE a.name LIKE '%Brown%';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of savings accounts that have a balance greater than the average balance of all savings accounts. The query uses a subquery to calculate the average balance, and the placeholder in the WHERE clause allows for dynamic adjustment of the balance condition.\",\n        \"virtual_table\": \"SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)\"\n    }\n}\n",
        "t_2": "SELECT T1.name, T2.balance AS savings_balance, T3.balance AS checking_balance \nFROM accounts AS T1 \nJOIN savings AS T2 ON T1.custid = T2.custid \nJOIN checking AS T3 ON T1.custid = T3.custid \nWHERE T1.name = 'Brown'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of customers from the 'ACCOUNTS' table who have a checking account balance that is below the average balance of all checking accounts. The placeholders in the query represent the necessary values for filtering the results based on the average balance.\",\n        \"virtual_table\": \"SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the total balance from the savings accounts of customers in the 'SAVINGS' table, excluding those with a specific name from the 'ACCOUNTS' table. The placeholder in the WHERE clause represents the customer's name that should be excluded from the results.\",\n        \"virtual_table\": \"SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of customer IDs and names from the 'ACCOUNTS' table for customers who have a checking account balance that is less than the maximum balance found in the 'CHECKING' table. The placeholders in the query allow for dynamic filtering based on the balance criteria.\",\n        \"virtual_table\": \"SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)\"\n    }\n}\n",
        "t_3+": "SELECT T1.name, T2.balance AS checking_balance, T3.balance AS savings_balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T1.name LIKE '%Brown%'",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of customers who have a checking account balance greater than the average checking account balance and a savings account balance less than the average savings account balance. The placeholders in the query represent the necessary conditions for filtering the balances.\",\n        \"virtual_table\": \"SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the current balance of checking accounts for customers whose names are associated with savings accounts that have a balance greater than the average balance of all savings accounts. The placeholders in the query allow for dynamic filtering based on customer names and balance conditions.\",\n        \"virtual_table\": \"SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names of customers along with the total balance of their checking and savings accounts, specifically for those customers whose savings account balance is less than their checking account balance. The placeholders in the query represent the necessary values for the balances and customer identifiers.\",\n        \"virtual_table\": \"SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1810",
        "c_low": "SELECT T3.balance FROM checking AS T2 JOIN savings AS T3 ON T2.custid = T3.custid ORDER BY T2.balance DESC LIMIT 1",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of customers who have a higher balance in their checking account compared to their savings account. The query joins the 'ACCOUNTS', 'CHECKING', and 'SAVINGS' tables based on the customer ID, and applies a condition to filter those customers accordingly.\",\n        \"virtual_table\": \"SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of customers from the 'ACCOUNTS' table who have both checking and savings accounts. The results are ordered by the total balance of their checking and savings accounts, with a limit on the number of results returned, specified by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total balance from the savings accounts of customers in the 'SAVINGS' table, excluding those with a specific name from the 'ACCOUNTS' table. The placeholder in the WHERE clause represents the customer's name that should be excluded from the results.\",\n        \"virtual_table\": \"SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T2.balance DESC LIMIT 1",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of customer balances from both checking and savings accounts. It retrieves the customer's full name along with their respective balances from the 'CHECKING' and 'SAVINGS' tables, linking them through the 'ACCOUNTS' table. The results are ordered by the total balance across both account types in descending order.\",\n        \"virtual_table\": \"SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of savings accounts that have a balance greater than the average balance of all savings accounts. The query uses a subquery to calculate the average balance, and the placeholder in the WHERE clause allows for dynamic adjustment of the balance condition.\",\n        \"virtual_table\": \"SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the balances of checking accounts along with the names of customers from the 'ACCOUNTS' table. It joins the 'CHECKING' and 'SAVINGS' tables to ensure that only customers with both account types are included. The results are ordered by the savings account balance, and a limit is applied to control the number of records returned.\",\n        \"virtual_table\": \"SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT S.balance FROM SAVINGS S JOIN CHECKING C ON S.custid = C.custid WHERE C.balance = (SELECT MAX(balance) FROM CHECKING)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the current balance of checking accounts for customers whose names are associated with savings accounts that have a balance greater than the average balance of all savings accounts. The placeholders in the query allow for dynamic filtering based on customer names and balance conditions.\",\n        \"virtual_table\": \"SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of customers who have a checking account balance greater than the average checking account balance and a savings account balance less than the average savings account balance. The placeholders in the query represent the necessary conditions for filtering the balances.\",\n        \"virtual_table\": \"SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names of customers along with the total balance from both their checking and savings accounts. The placeholder in the WHERE clause indicates that only customers with a savings account balance above the average balance will be included.\",\n        \"virtual_table\": \"SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)\"\n    }\n}\n",
        "t_1": "SELECT s.balance \nFROM SAVINGS s \nJOIN CHECKING c ON s.custid = c.custid \nWHERE c.balance = (SELECT MAX(balance) FROM CHECKING)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of savings accounts that have a balance greater than the average balance of all savings accounts. The query uses a subquery to calculate the average balance, and the placeholder in the WHERE clause allows for dynamic adjustment of the balance condition.\",\n        \"virtual_table\": \"SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)\"\n    }\n}\n",
        "t_2": "SELECT T2.balance FROM savings AS T2 JOIN checking AS T1 ON T2.custid = T1.custid WHERE T1.balance = (SELECT max(balance) FROM checking)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total balance from the savings accounts of customers in the 'SAVINGS' table, excluding those with a specific name from the 'ACCOUNTS' table. The placeholder in the WHERE clause represents the customer's name that should be excluded from the results.\",\n        \"virtual_table\": \"SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of customers from the 'ACCOUNTS' table who have a checking account balance that is below the average balance of all checking accounts. The placeholders in the query represent the necessary values for filtering the results based on the average balance.\",\n        \"virtual_table\": \"SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of customer IDs and names from the 'ACCOUNTS' table for customers who have a checking account balance that is less than the maximum balance found in the 'CHECKING' table. The placeholders in the query allow for dynamic filtering based on the balance criteria.\",\n        \"virtual_table\": \"SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)\"\n    }\n}\n",
        "t_3+": "SELECT S.balance FROM SAVINGS S JOIN CHECKING C ON S.custid = C.custid WHERE C.balance = (SELECT MAX(balance) FROM CHECKING)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the current balance of checking accounts for customers whose names are associated with savings accounts that have a balance greater than the average balance of all savings accounts. The placeholders in the query allow for dynamic filtering based on customer names and balance conditions.\",\n        \"virtual_table\": \"SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of customers who have a higher balance in their checking account compared to their savings account. The query joins the 'ACCOUNTS', 'CHECKING', and 'SAVINGS' tables based on the customer ID, and applies a condition to filter those customers accordingly.\",\n        \"virtual_table\": \"SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of customers who have a checking account balance greater than the average checking account balance and a savings account balance less than the average savings account balance. The placeholders in the query represent the necessary conditions for filtering the balances.\",\n        \"virtual_table\": \"SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1811",
        "c_low": "SELECT T3.balance FROM CHECKING AS T2 JOIN SAVINGS AS T3 ON T2.custid = T3.custid WHERE T2.balance = (SELECT MAX(balance) FROM CHECKING)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of customers who have a higher balance in their checking account compared to their savings account. The query joins the 'ACCOUNTS', 'CHECKING', and 'SAVINGS' tables based on the customer ID, and applies a condition to filter those customers accordingly.\",\n        \"virtual_table\": \"SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of customers from the 'ACCOUNTS' table who have both checking and savings accounts. The results are ordered by the total balance of their checking and savings accounts, with a limit on the number of results returned, specified by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total balance from the savings accounts of customers in the 'SAVINGS' table, excluding those with a specific name from the 'ACCOUNTS' table. The placeholder in the WHERE clause represents the customer's name that should be excluded from the results.\",\n        \"virtual_table\": \"SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T2.balance DESC LIMIT 1",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of customer balances from both checking and savings accounts. It retrieves the customer's full name along with their respective balances from the 'CHECKING' and 'SAVINGS' tables, linking them through the 'ACCOUNTS' table. The results are ordered by the total balance across both account types in descending order.\",\n        \"virtual_table\": \"SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of customers along with their checking account balances from the 'ACCOUNTS' and 'CHECKING' tables, while also ensuring that the customers have a corresponding entry in the 'SAVINGS' table. The results are ordered by the savings account balance, and the number of results returned can be limited using a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the balances of checking accounts along with the names of customers from the 'ACCOUNTS' table. It joins the 'CHECKING' and 'SAVINGS' tables to ensure that only customers with both account types are included. The results are ordered by the savings account balance, and a limit is applied to control the number of records returned.\",\n        \"virtual_table\": \"SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT balance FROM savings WHERE custid = (SELECT custid FROM checking ORDER BY balance DESC LIMIT 1)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the current balance of checking accounts for customers whose names are associated with savings accounts that have a balance greater than the average balance of all savings accounts. The placeholders in the query allow for dynamic filtering based on customer names and balance conditions.\",\n        \"virtual_table\": \"SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of customers who have a checking account balance greater than the average checking account balance and a savings account balance less than the average savings account balance. The placeholders in the query represent the necessary conditions for filtering the balances.\",\n        \"virtual_table\": \"SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names of customers along with the total balance of their checking and savings accounts, specifically for those customers whose savings account balance is less than their checking account balance. The placeholders in the query represent the necessary values for the balances and customer identifiers.\",\n        \"virtual_table\": \"SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance\"\n    }\n}\n",
        "t_1": "SELECT s.balance FROM SAVINGS s JOIN CHECKING c ON s.custid = c.custid WHERE c.balance = (SELECT MAX(balance) FROM CHECKING)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of savings accounts that have a balance greater than the average balance of all savings accounts. The query uses a subquery to calculate the average balance, and the placeholder in the WHERE clause allows for dynamic adjustment of the balance condition.\",\n        \"virtual_table\": \"SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)\"\n    }\n}\n",
        "t_2": "SELECT T2.balance FROM savings AS T2 JOIN checking AS T1 ON T2.custid = T1.custid WHERE T1.balance = (SELECT max(balance) FROM checking)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of customers from the 'ACCOUNTS' table who have a checking account balance that is below the average balance of all checking accounts. The placeholders in the query represent the necessary values for filtering the results based on the average balance.\",\n        \"virtual_table\": \"SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of customer IDs and names from the 'ACCOUNTS' table for customers who have a checking account balance that is less than the maximum balance found in the 'CHECKING' table. The placeholders in the query allow for dynamic filtering based on the balance criteria.\",\n        \"virtual_table\": \"SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total balance from the savings accounts of customers in the 'SAVINGS' table, excluding those with a specific name from the 'ACCOUNTS' table. The placeholder in the WHERE clause represents the customer's name that should be excluded from the results.\",\n        \"virtual_table\": \"SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT balance FROM savings WHERE custid = (SELECT custid FROM checking ORDER BY balance DESC LIMIT 1)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the current balance of checking accounts for customers whose names are associated with savings accounts that have a balance greater than the average balance of all savings accounts. The placeholders in the query allow for dynamic filtering based on customer names and balance conditions.\",\n        \"virtual_table\": \"SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of customers who have a checking account balance greater than the average checking account balance and a savings account balance less than the average savings account balance. The placeholders in the query represent the necessary conditions for filtering the balances.\",\n        \"virtual_table\": \"SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of customers who have a higher balance in their checking account compared to their savings account. The query joins the 'ACCOUNTS', 'CHECKING', and 'SAVINGS' tables based on the customer ID, and applies a condition to filter those customers accordingly.\",\n        \"virtual_table\": \"SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1812",
        "c_low": "SELECT T1.name, (T2.balance + T3.balance) AS total_balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY total_balance ASC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names of customers from the 'ACCOUNTS' table who have both checking and savings accounts. The results are ordered by the total balance of their checking and savings accounts, with a limit on the number of results returned, specified by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the total balance from the savings accounts of customers in the 'SAVINGS' table, excluding those with a specific name from the 'ACCOUNTS' table. The placeholder in the WHERE clause represents the customer's name that should be excluded from the results.\",\n        \"virtual_table\": \"SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of customers who have a higher balance in their checking account compared to their savings account. The query joins the 'ACCOUNTS', 'CHECKING', and 'SAVINGS' tables based on the customer ID, and applies a condition to filter those customers accordingly.\",\n        \"virtual_table\": \"SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance\"\n    }\n}\n",
        "c_mid": "SELECT T1.name, T2.balance + T3.balance AS total_balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY total_balance ASC",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of customer balances from both checking and savings accounts. It retrieves the customer's full name along with their respective balances from the 'CHECKING' and 'SAVINGS' tables, linking them through the 'ACCOUNTS' table. The results are ordered by the total balance across both account types in descending order.\",\n        \"virtual_table\": \"SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of customers along with their checking account balances from the 'ACCOUNTS' and 'CHECKING' tables, while also ensuring that the customers have a corresponding entry in the 'SAVINGS' table. The results are ordered by the savings account balance, and the number of results returned can be limited using a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the balances of checking accounts along with the names of customers from the 'ACCOUNTS' table. It joins the 'CHECKING' and 'SAVINGS' tables to ensure that only customers with both account types are included. The results are ordered by the savings account balance, and a limit is applied to control the number of records returned.\",\n        \"virtual_table\": \"SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT T1.name, (T2.balance + T3.balance) AS total_balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY total_balance ASC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the current balance of checking accounts for customers whose names are associated with savings accounts that have a balance greater than the average balance of all savings accounts. The placeholders in the query allow for dynamic filtering based on customer names and balance conditions.\",\n        \"virtual_table\": \"SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of customers along with the total balance of their checking and savings accounts, specifically for those customers whose savings account balance is less than their checking account balance. The placeholders in the query represent the necessary values for the balances and customer identifiers.\",\n        \"virtual_table\": \"SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of customers who have a checking account balance greater than the average checking account balance and a savings account balance less than the average savings account balance. The placeholders in the query represent the necessary conditions for filtering the balances.\",\n        \"virtual_table\": \"SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)\"\n    }\n}\n",
        "t_1": "SELECT a.custid, a.name, COALESCE(s.balance, 0) + COALESCE(c.balance, 0) AS total_balance \nFROM ACCOUNTS a \nLEFT JOIN SAVINGS s ON a.custid = s.custid \nLEFT JOIN CHECKING c ON a.custid = c.custid \nORDER BY total_balance ASC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of savings accounts that have a balance greater than the average balance of all savings accounts. The query uses a subquery to calculate the average balance, and the placeholder in the WHERE clause allows for dynamic adjustment of the balance condition.\",\n        \"virtual_table\": \"SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)\"\n    }\n}\n",
        "t_2": "SELECT T1.custid, T1.name, (IFNULL(T2.balance, 0) + IFNULL(T3.balance, 0)) AS total_balance \nFROM accounts AS T1 \nLEFT JOIN savings AS T2 ON T1.custid = T2.custid \nLEFT JOIN checking AS T3 ON T1.custid = T3.custid \nORDER BY total_balance ASC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total balance from the savings accounts of customers in the 'SAVINGS' table, excluding those with a specific name from the 'ACCOUNTS' table. The placeholder in the WHERE clause represents the customer's name that should be excluded from the results.\",\n        \"virtual_table\": \"SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of customers from the 'ACCOUNTS' table who have a checking account balance that is below the average balance of all checking accounts. The placeholders in the query represent the necessary values for filtering the results based on the average balance.\",\n        \"virtual_table\": \"SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the current balance of checking accounts for customers from the 'ACCOUNTS' table whose names match a specific pattern. The placeholder in the WHERE clause allows for filtering based on the customer's name.\",\n        \"virtual_table\": \"SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT T1.name, T2.balance, T3.balance, (T2.balance + T3.balance) AS total_balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY total_balance ASC",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of customer balances from both checking and savings accounts. It retrieves the customer's full name along with their respective balances from the 'CHECKING' and 'SAVINGS' tables, linking them through the 'ACCOUNTS' table. The results are ordered by the total balance across both account types in descending order.\",\n        \"virtual_table\": \"SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of customers from the 'ACCOUNTS' table who have both checking and savings accounts. The results are ordered by the total balance of their checking and savings accounts, with a limit on the number of results returned, specified by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the current balance of checking accounts for customers whose names are associated with savings accounts that have a balance greater than the average balance of all savings accounts. The placeholders in the query allow for dynamic filtering based on customer names and balance conditions.\",\n        \"virtual_table\": \"SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1813",
        "c_low": "SELECT T1.name, (T2.balance + T3.balance) AS total_balance \nFROM accounts AS T1 \nJOIN checking AS T2 ON T1.custid = T2.custid \nJOIN savings AS T3 ON T1.custid = T3.custid \nORDER BY total_balance;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names of customers from the 'ACCOUNTS' table who have both checking and savings accounts. The results are ordered by the total balance of their checking and savings accounts, with a limit on the number of results returned, specified by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of customers who have a higher balance in their checking account compared to their savings account. The query joins the 'ACCOUNTS', 'CHECKING', and 'SAVINGS' tables based on the customer ID, and applies a condition to filter those customers accordingly.\",\n        \"virtual_table\": \"SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total balance from the savings accounts of customers in the 'SAVINGS' table, excluding those with a specific name from the 'ACCOUNTS' table. The placeholder in the WHERE clause represents the customer's name that should be excluded from the results.\",\n        \"virtual_table\": \"SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT T1.name, T2.balance + T3.balance AS total_balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY total_balance DESC",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of customer balances from both checking and savings accounts. It retrieves the customer's full name along with their respective balances from the 'CHECKING' and 'SAVINGS' tables, linking them through the 'ACCOUNTS' table. The results are ordered by the total balance across both account types in descending order.\",\n        \"virtual_table\": \"SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of customers along with their checking account balances from the 'ACCOUNTS' and 'CHECKING' tables, while also ensuring that the customers have a corresponding entry in the 'SAVINGS' table. The results are ordered by the savings account balance, and the number of results returned can be limited using a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the balances of checking accounts along with the names of customers from the 'ACCOUNTS' table. It joins the 'CHECKING' and 'SAVINGS' tables to ensure that only customers with both account types are included. The results are ordered by the savings account balance, and a limit is applied to control the number of records returned.\",\n        \"virtual_table\": \"SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT T1.name, (T2.balance + T3.balance) AS total_balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY total_balance;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the current balance of checking accounts for customers whose names are associated with savings accounts that have a balance greater than the average balance of all savings accounts. The placeholders in the query allow for dynamic filtering based on customer names and balance conditions.\",\n        \"virtual_table\": \"SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of customers along with the total balance of their checking and savings accounts, specifically for those customers whose savings account balance is less than their checking account balance. The placeholders in the query represent the necessary values for the balances and customer identifiers.\",\n        \"virtual_table\": \"SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of customers who have a checking account balance greater than the average checking account balance and a savings account balance less than the average savings account balance. The placeholders in the query represent the necessary conditions for filtering the balances.\",\n        \"virtual_table\": \"SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)\"\n    }\n}\n",
        "t_1": "SELECT a.custid, a.name, (COALESCE(s.balance, 0) + COALESCE(c.balance, 0)) AS total_balance \nFROM ACCOUNTS a \nLEFT JOIN SAVINGS s ON a.custid = s.custid \nLEFT JOIN CHECKING c ON a.custid = c.custid \nORDER BY total_balance;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of savings accounts that have a balance greater than the average balance of all savings accounts. The query uses a subquery to calculate the average balance, and the placeholder in the WHERE clause allows for dynamic adjustment of the balance condition.\",\n        \"virtual_table\": \"SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)\"\n    }\n}\n",
        "t_2": "SELECT T1.name, (IFNULL(T2.balance, 0) + IFNULL(T3.balance, 0)) AS total_balance FROM accounts AS T1 LEFT JOIN savings AS T2 ON T1.custid = T2.custid LEFT JOIN checking AS T3 ON T1.custid = T3.custid ORDER BY total_balance;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of customers from the 'ACCOUNTS' table who have a checking account balance that is below the average balance of all checking accounts. The placeholders in the query represent the necessary values for filtering the results based on the average balance.\",\n        \"virtual_table\": \"SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the total balance from the savings accounts of customers in the 'SAVINGS' table, excluding those with a specific name from the 'ACCOUNTS' table. The placeholder in the WHERE clause represents the customer's name that should be excluded from the results.\",\n        \"virtual_table\": \"SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of customer IDs and names from the 'ACCOUNTS' table for customers who have a checking account balance that is less than the maximum balance found in the 'CHECKING' table. The placeholders in the query allow for dynamic filtering based on the balance criteria.\",\n        \"virtual_table\": \"SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)\"\n    }\n}\n",
        "t_3+": "SELECT T1.name, T2.balance + T3.balance AS total_balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY total_balance",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the current balance of checking accounts for customers whose names are associated with savings accounts that have a balance greater than the average balance of all savings accounts. The placeholders in the query allow for dynamic filtering based on customer names and balance conditions.\",\n        \"virtual_table\": \"SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of customers from the 'ACCOUNTS' table who have both checking and savings accounts. The results are ordered by the total balance of their checking and savings accounts, with a limit on the number of results returned, specified by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names of customers along with the total balance of their checking and savings accounts, specifically for those customers whose savings account balance is less than their checking account balance. The placeholders in the query represent the necessary values for the balances and customer identifiers.\",\n        \"virtual_table\": \"SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1831",
        "c_low": "SELECT name, Operating_system FROM Web_client_accelerator WHERE id NOT IN (SELECT accelerator_id FROM Web_client_accelerator WHERE Connection = 'Broadband');",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT name, Operating_system FROM Web_client_accelerator WHERE Connection != 'Broadband';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of web client accelerators that are compatible with browsers having a market share greater than a specified percentage. The placeholders in the WHERE clause represent the market share threshold.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.market_share  >  [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of browsers that are compatible with a specific web client accelerator, filtered by the name of the accelerator and the year they became compatible. The placeholders in the WHERE clause represent the accelerator's name and the year of compatibility.\",\n        \"virtual_table\": \"SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.compatible_since_year  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the years when specific browsers became compatible with a particular web client accelerator. The placeholders in the WHERE clause represent the names of the web client accelerator and the browser.\",\n        \"virtual_table\": \"SELECT T1.compatible_since_year FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT name, Operating_system FROM Web_client_accelerator EXCEPT SELECT T1.name, T1.Operating_system FROM Web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T3.name = 'Broadband'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and operating systems of web client accelerators from the 'Web_client_accelerator' table that are not compatible with a specific browser. The placeholder in the WHERE clause represents the name of the browser being checked for compatibility.\",\n        \"virtual_table\": \"SELECT name ,  operating_system FROM web_client_accelerator EXCEPT SELECT T1.name ,  T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of web client accelerators along with their unique identifiers. It filters the results to include only those accelerators that are compatible with a certain number of browsers, as specified by the placeholder. The placeholder in the HAVING clause represents the minimum count of compatible browsers required for the accelerators to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of browser identifiers and names that are compatible with web client accelerators. The results are grouped by browser ID and ordered by the number of accelerators each browser is compatible with, limited to a specified number of results. The placeholder in the LIMIT clause represents the maximum number of browsers to return.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT name, Operating_system FROM Web_client_accelerator WHERE id NOT IN (SELECT accelerator_id FROM Web_client_accelerator WHERE Connection = 'Broadband');",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT name, Operating_system FROM Web_client_accelerator WHERE id NOT IN (SELECT accelerator_id FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id WHERE T2.name = 'Broadband')",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of web client accelerators along with their unique identifiers. It filters the results to include only those accelerators that are compatible with a certain number of browsers, as specified by the placeholder. The placeholder in the HAVING clause represents the minimum count of compatible browsers required for the accelerators to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of browser identifiers and names that are compatible with web client accelerators. The results are grouped by browser ID and ordered by the number of accelerators each browser is compatible with, limited to a specified number of results. The placeholder in the LIMIT clause represents the maximum number of browsers to return.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT name, Operating_system FROM Web_client_accelerator EXCEPT SELECT T1.name, T1.Operating_system FROM Web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T3.name = 'Broadband'",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and operating systems of web client accelerators from the 'Web_client_accelerator' table that are not compatible with a specific browser. The placeholder in the WHERE clause represents the name of the browser being checked for compatibility.\",\n        \"virtual_table\": \"SELECT name ,  operating_system FROM web_client_accelerator EXCEPT SELECT T1.name ,  T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the distinct names of web client accelerators that are compatible with browsers having a market share greater than a specified percentage. The placeholders in the WHERE clause represent the market share threshold.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.market_share  >  [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of browsers that are compatible with a specific web client accelerator, filtered by the name of the accelerator and the year they became compatible. The placeholders in the WHERE clause represent the accelerator's name and the year of compatibility.\",\n        \"virtual_table\": \"SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.compatible_since_year  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1843",
        "c_low": "SELECT b.name AS browser_name, wca.name AS accelerator_name, acb.compatible_since_year \nFROM accelerator_compatible_browser acb \nJOIN browser b ON acb.browser_id = b.id \nJOIN Web_client_accelerator wca ON acb.accelerator_id = wca.id \nORDER BY acb.compatible_since_year DESC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT T1.name AS browser_name, T3.name AS accelerator_name, T2.compatible_since_year \nFROM browser AS T1 \nJOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id \nJOIN web_client_accelerator AS T3 ON T2.accelerator_id = T3.id \nORDER BY T2.compatible_since_year DESC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of browsers that are compatible with a specific web client accelerator, filtered by the name of the accelerator and the year they became compatible. The placeholders in the WHERE clause represent the accelerator's name and the year of compatibility.\",\n        \"virtual_table\": \"SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.compatible_since_year  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the years when specific browsers became compatible with a particular web client accelerator. The placeholders in the WHERE clause represent the names of the web client accelerator and the browser.\",\n        \"virtual_table\": \"SELECT T1.compatible_since_year FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the distinct names of web client accelerators that are compatible with browsers having a market share greater than a specified percentage. The placeholders in the WHERE clause represent the market share threshold.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.market_share  >  [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "c_high": "SELECT T1.name AS accelerator_name, T2.name AS browser_name, T2.compatible_since_year \nFROM accelerator_compatible_browser AS T2 \nJOIN Web_client_accelerator AS T1 ON T2.accelerator_id = T1.id \nJOIN browser AS T3 ON T2.browser_id = T3.id \nORDER BY T2.compatible_since_year DESC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of browser identifiers and names that are compatible with web client accelerators. The results are grouped by browser ID and ordered by the number of accelerators each browser is compatible with, limited to a specified number of results. The placeholder in the LIMIT clause represents the maximum number of browsers to return.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of browsers that are compatible with a specific web client accelerator. The query uses an INTERSECT operation to find common browsers that are compatible with two instances of the same web client accelerator, identified by their names. The placeholders in the WHERE clause represent the names of the web client accelerators being compared.\",\n        \"virtual_table\": \"SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names and operating systems of web client accelerators from the 'Web_client_accelerator' table that are not compatible with a specific browser. The placeholder in the WHERE clause represents the name of the browser being checked for compatibility.\",\n        \"virtual_table\": \"SELECT name ,  operating_system FROM web_client_accelerator EXCEPT SELECT T1.name ,  T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT b.name AS browser_name, wca.name AS accelerator_name, acb.compatible_since_year \nFROM accelerator_compatible_browser acb \nJOIN browser b ON acb.browser_id = b.id \nJOIN Web_client_accelerator wca ON acb.accelerator_id = wca.id \nORDER BY acb.compatible_since_year DESC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT b.name AS browser_name, w.name AS accelerator_name, ac.compatible_since_year \nFROM browser AS b \nJOIN accelerator_compatible_browser AS ac ON b.id = ac.browser_id \nJOIN Web_client_accelerator AS w ON ac.accelerator_id = w.id \nORDER BY ac.compatible_since_year DESC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of browser identifiers and names that are compatible with web client accelerators. The results are grouped by browser ID and ordered by the number of accelerators each browser is compatible with, limited to a specified number of results. The placeholder in the LIMIT clause represents the maximum number of browsers to return.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of web client accelerators along with their unique identifiers. It filters the results to include only those accelerators that are compatible with a certain number of browsers, as specified by the placeholder. The placeholder in the HAVING clause represents the minimum count of compatible browsers required for the accelerators to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.id ,  T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT T1.name AS browser_name, T3.name AS accelerator_name, T2.compatible_since_year \nFROM browser AS T1 \nJOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id \nJOIN web_client_accelerator AS T3 ON T2.accelerator_id = T3.id \nORDER BY T2.compatible_since_year DESC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of browsers that are compatible with a specific web client accelerator, filtered by the name of the accelerator and the year they became compatible. The placeholders in the WHERE clause represent the accelerator's name and the year of compatibility.\",\n        \"virtual_table\": \"SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.compatible_since_year  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the years when specific browsers became compatible with a particular web client accelerator. The placeholders in the WHERE clause represent the names of the web client accelerator and the browser.\",\n        \"virtual_table\": \"SELECT T1.compatible_since_year FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] AND T2.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the distinct names of web client accelerators that are compatible with browsers having a market share greater than a specified percentage. The placeholders in the WHERE clause represent the market share threshold.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.market_share  >  [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1855",
        "c_low": "SELECT e.Elimination_Move \nFROM Elimination e \nJOIN wrestler w ON e.Wrestler_ID = w.Wrestler_ID \nWHERE e.Team = (SELECT Team FROM Elimination WHERE Wrestler_ID = (SELECT Wrestler_ID FROM wrestler WHERE Name = 'Orton'))",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of locations where wrestlers have defended their titles, grouped by location. The placeholder in the HAVING clause represents the minimum number of wrestlers that must have defended their titles at each location.\",\n        \"virtual_table\": \"SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of distinct teams involved in elimination events from the 'Elimination' table. The query uses the COUNT function to aggregate the number of unique teams.\",\n        \"virtual_table\": \"SELECT COUNT (DISTINCT team) FROM elimination\"\n    }\n}\n",
        "c_mid": "SELECT Elimination_Move FROM Elimination WHERE Team = 'Orton'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the elimination moves used during matches involving a specific team. The placeholder in the WHERE clause represents the team's identifier.\",\n        \"virtual_table\": \"SELECT Elimination_Move FROM Elimination WHERE Team  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the times of eliminations from the 'elimination' table for wrestlers who have held their title for more than a specified number of days. The placeholder in the WHERE clause represents the minimum number of days the title must have been held.\",\n        \"virtual_table\": \"SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of wrestlers from the 'wrestler' table who have held their title for fewer days than a specified number. The placeholder in the WHERE clause represents the maximum number of days the title can be held.\",\n        \"virtual_table\": \"SELECT Name FROM wrestler WHERE Days_held  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT e.Elimination_Move FROM Elimination e JOIN wrestler w ON e.Wrestler_ID = w.Wrestler_ID WHERE w.Team = (SELECT Team FROM wrestler WHERE Name = 'Orton')",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique title reigns from the 'wrestler' table, excluding those that took place in a specific location. The placeholder in the WHERE clause represents the location to be filtered out.\",\n        \"virtual_table\": \"SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT Elimination_Move FROM Elimination WHERE Team = 'Orton'",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the elimination moves used during matches involving a specific team. The placeholder in the WHERE clause represents the team's identifier.\",\n        \"virtual_table\": \"SELECT Elimination_Move FROM Elimination WHERE Team  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of locations where wrestlers have defended their titles, grouped by location. The placeholder in the HAVING clause represents the minimum number of wrestlers that must have defended their titles at each location.\",\n        \"virtual_table\": \"SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique title reigns from the 'wrestler' table, excluding those that took place in a specific location. The placeholder in the WHERE clause represents the location to be filtered out.\",\n        \"virtual_table\": \"SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT T1.Elimination_Move FROM Elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T1.Team = (SELECT Team FROM wrestler WHERE Name = 'Orton')",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the times of eliminations from the 'elimination' table for wrestlers who have held their title for more than a specified number of days. The placeholder in the WHERE clause represents the minimum number of days the title must have been held.\",\n        \"virtual_table\": \"SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT e.Elimination_Move\nFROM Elimination e\nJOIN wrestler w ON e.Wrestler_ID = w.Wrestler_ID\nWHERE e.Team = (SELECT Team FROM wrestler WHERE Name = 'Orton')",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1860",
        "c_low": "SELECT e.Time FROM Elimination e JOIN wrestler w ON e.Wrestler_ID = w.Wrestler_ID WHERE w.Days_held = (SELECT MAX(Days_held) FROM wrestler)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of locations where wrestlers have defended their titles, grouped by location. The placeholder in the HAVING clause represents the minimum number of wrestlers that must have defended their titles at each location.\",\n        \"virtual_table\": \"SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T2.Days_held = (SELECT MAX(Days_held) FROM wrestler)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the times of eliminations from the 'elimination' table for wrestlers who have held their title for more than a specified number of days. The placeholder in the WHERE clause represents the minimum number of days the title must have been held.\",\n        \"virtual_table\": \"SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of wrestlers from the 'wrestler' table who have held their title for fewer days than a specified number. The placeholder in the WHERE clause represents the maximum number of days the title can be held.\",\n        \"virtual_table\": \"SELECT Name FROM wrestler WHERE Days_held  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides information about the elimination moves used during matches involving a specific team. The placeholder in the WHERE clause represents the team's identifier.\",\n        \"virtual_table\": \"SELECT Elimination_Move FROM Elimination WHERE Team  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT e.Time FROM Elimination e JOIN wrestler w ON e.Wrestler_ID = w.Wrestler_ID WHERE w.Days_held = (SELECT MAX(Days_held) FROM wrestler)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique title reigns from the 'wrestler' table, excluding those that took place in a specific location. The placeholder in the WHERE clause represents the location to be filtered out.\",\n        \"virtual_table\": \"SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT e.Time FROM Elimination e JOIN wrestler w ON e.Wrestler_ID = w.Wrestler_ID WHERE w.Days_held = (SELECT MAX(Days_held) FROM wrestler)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of wrestlers from the 'wrestler' table who have held their title for fewer days than a specified number. The placeholder in the WHERE clause represents the maximum number of days the title can be held.\",\n        \"virtual_table\": \"SELECT Name FROM wrestler WHERE Days_held  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of locations where wrestlers have defended their titles, grouped by location. The placeholder in the HAVING clause represents the minimum number of wrestlers that must have defended their titles at each location.\",\n        \"virtual_table\": \"SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides information about the elimination moves used during matches involving a specific team. The placeholder in the WHERE clause represents the team's identifier.\",\n        \"virtual_table\": \"SELECT Elimination_Move FROM Elimination WHERE Team  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT T1.Time FROM Elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T2.Days_held = (SELECT MAX(Days_held) FROM wrestler)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the times of eliminations from the 'elimination' table for wrestlers who have held their title for more than a specified number of days. The placeholder in the WHERE clause represents the minimum number of days the title must have been held.\",\n        \"virtual_table\": \"SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT e.Time\nFROM Elimination e\nJOIN wrestler w ON e.Wrestler_ID = w.Wrestler_ID\nWHERE w.Days_held = (SELECT MAX(Days_held) FROM wrestler);",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1861",
        "c_low": "SELECT e.Time FROM Elimination e JOIN wrestler w ON e.Wrestler_ID = w.Wrestler_ID WHERE w.Days_held = (SELECT MAX(Days_held) FROM wrestler)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of locations where wrestlers have defended their titles, grouped by location. The placeholder in the HAVING clause represents the minimum number of wrestlers that must have defended their titles at each location.\",\n        \"virtual_table\": \"SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of distinct teams involved in elimination events from the 'Elimination' table. The query uses the COUNT function to aggregate the number of unique teams.\",\n        \"virtual_table\": \"SELECT COUNT (DISTINCT team) FROM elimination\"\n    }\n}\n",
        "c_mid": "SELECT Time FROM elimination WHERE Wrestler_ID = (SELECT Wrestler_ID FROM wrestler ORDER BY Days_held DESC LIMIT 1)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the times of eliminations from the 'elimination' table for wrestlers who have held their title for more than a specified number of days. The placeholder in the WHERE clause represents the minimum number of days the title must have been held.\",\n        \"virtual_table\": \"SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of wrestlers from the 'wrestler' table who have held their title for fewer days than a specified number. The placeholder in the WHERE clause represents the maximum number of days the title can be held.\",\n        \"virtual_table\": \"SELECT Name FROM wrestler WHERE Days_held  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides information about the elimination moves used during matches involving a specific team. The placeholder in the WHERE clause represents the team's identifier.\",\n        \"virtual_table\": \"SELECT Elimination_Move FROM Elimination WHERE Team  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT e.Time FROM Elimination e JOIN wrestler w ON e.Wrestler_ID = w.Wrestler_ID WHERE w.Days_held = (SELECT MAX(Days_held) FROM wrestler)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique title reigns from the 'wrestler' table, excluding those that took place in a specific location. The placeholder in the WHERE clause represents the location to be filtered out.\",\n        \"virtual_table\": \"SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT e.Time FROM Elimination e JOIN wrestler w ON e.Wrestler_ID = w.Wrestler_ID WHERE w.Days_held = (SELECT MAX(Days_held) FROM wrestler)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of wrestlers from the 'wrestler' table who have held their title for fewer days than a specified number. The placeholder in the WHERE clause represents the maximum number of days the title can be held.\",\n        \"virtual_table\": \"SELECT Name FROM wrestler WHERE Days_held  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of locations where wrestlers have defended their titles, grouped by location. The placeholder in the HAVING clause represents the minimum number of wrestlers that must have defended their titles at each location.\",\n        \"virtual_table\": \"SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides information about the elimination moves used during matches involving a specific team. The placeholder in the WHERE clause represents the team's identifier.\",\n        \"virtual_table\": \"SELECT Elimination_Move FROM Elimination WHERE Team  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT T1.Time FROM Elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T2.Days_held = (SELECT MAX(Days_held) FROM wrestler)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the times of eliminations from the 'elimination' table for wrestlers who have held their title for more than a specified number of days. The placeholder in the WHERE clause represents the minimum number of days the title must have been held.\",\n        \"virtual_table\": \"SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT e.Time \nFROM Elimination e \nJOIN wrestler w ON e.Wrestler_ID = w.Wrestler_ID \nWHERE w.Days_held = (SELECT MAX(Days_held) FROM wrestler);",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1866",
        "c_low": "SELECT Team FROM Elimination GROUP BY Team HAVING COUNT(*) > 3;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of distinct teams involved in elimination events from the 'Elimination' table. The query uses the COUNT function to aggregate the number of unique teams.\",\n        \"virtual_table\": \"SELECT COUNT (DISTINCT team) FROM elimination\"\n    }\n}\n",
        "c_mid": "SELECT Team, COUNT(*) as Elimination_Count FROM Elimination GROUP BY Team HAVING COUNT(*) > 3;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the elimination moves used during matches involving a specific team. The placeholder in the WHERE clause represents the team's identifier.\",\n        \"virtual_table\": \"SELECT Elimination_Move FROM Elimination WHERE Team  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the times of eliminations from the 'elimination' table for wrestlers who have held their title for more than a specified number of days. The placeholder in the WHERE clause represents the minimum number of days the title must have been held.\",\n        \"virtual_table\": \"SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT Team, COUNT(*) AS Elimination_Count\nFROM Elimination\nGROUP BY Team\nHAVING COUNT(*) > 3;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT Team, COUNT(*) as Elimination_Count \nFROM Elimination \nGROUP BY Team \nHAVING COUNT(*) > 3;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of distinct teams involved in elimination events from the 'Elimination' table. The query uses the COUNT function to aggregate the number of unique teams.\",\n        \"virtual_table\": \"SELECT COUNT (DISTINCT team) FROM elimination\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the elimination moves used during matches involving a specific team. The placeholder in the WHERE clause represents the team's identifier.\",\n        \"virtual_table\": \"SELECT Elimination_Move FROM Elimination WHERE Team  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT Team, COUNT(*) as Elimination_Count FROM Elimination GROUP BY Team HAVING COUNT(*) > 3;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the times of eliminations from the 'elimination' table for wrestlers who have held their title for more than a specified number of days. The placeholder in the WHERE clause represents the minimum number of days the title must have been held.\",\n        \"virtual_table\": \"SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Team, COUNT(*) AS Elimination_Count\nFROM Elimination\nGROUP BY Team\nHAVING COUNT(*) > 3;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1867",
        "c_low": "SELECT Team FROM Elimination GROUP BY Team HAVING COUNT(*) > 3;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of distinct teams involved in elimination events from the 'Elimination' table. The query uses the COUNT function to aggregate the number of unique teams.\",\n        \"virtual_table\": \"SELECT COUNT (DISTINCT team) FROM elimination\"\n    }\n}\n",
        "c_mid": "SELECT Team, COUNT(*) as Elimination_Count FROM Elimination GROUP BY Team HAVING COUNT(*) > 3;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the elimination moves used during matches involving a specific team. The placeholder in the WHERE clause represents the team's identifier.\",\n        \"virtual_table\": \"SELECT Elimination_Move FROM Elimination WHERE Team  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the times of eliminations from the 'elimination' table for wrestlers who have held their title for more than a specified number of days. The placeholder in the WHERE clause represents the minimum number of days the title must have been held.\",\n        \"virtual_table\": \"SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT Team, COUNT(*) AS Elimination_Count\nFROM Elimination\nGROUP BY Team\nHAVING COUNT(*) > 3;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT Team, COUNT(*) as Elimination_Count \nFROM Elimination \nGROUP BY Team \nHAVING COUNT(*) > 3;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of distinct teams involved in elimination events from the 'Elimination' table. The query uses the COUNT function to aggregate the number of unique teams.\",\n        \"virtual_table\": \"SELECT COUNT (DISTINCT team) FROM elimination\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the elimination moves used during matches involving a specific team. The placeholder in the WHERE clause represents the team's identifier.\",\n        \"virtual_table\": \"SELECT Elimination_Move FROM Elimination WHERE Team  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT Team, COUNT(*) as Elimination_Count FROM Elimination GROUP BY Team HAVING COUNT(*) > 3;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the times of eliminations from the 'elimination' table for wrestlers who have held their title for more than a specified number of days. The placeholder in the WHERE clause represents the minimum number of days the title must have been held.\",\n        \"virtual_table\": \"SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Team, COUNT(*) AS Elimination_Count\nFROM Elimination\nGROUP BY Team\nHAVING COUNT(*) > 3;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1872",
        "c_low": "SELECT Reign, COUNT(*) as Reign_Count FROM wrestler GROUP BY Reign ORDER BY Reign_Count DESC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of locations where wrestlers have defended their titles, grouped by location. The placeholder in the HAVING clause represents the minimum number of wrestlers that must have defended their titles at each location.\",\n        \"virtual_table\": \"SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT Reign, COUNT(Reign) AS Reign_Count FROM wrestler GROUP BY Reign ORDER BY Reign_Count DESC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of wrestlers from the 'wrestler' table who have held their title for fewer days than a specified number. The placeholder in the WHERE clause represents the maximum number of days the title can be held.\",\n        \"virtual_table\": \"SELECT Name FROM wrestler WHERE Days_held  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the times of eliminations from the 'elimination' table for wrestlers who have held their title for more than a specified number of days. The placeholder in the WHERE clause represents the minimum number of days the title must have been held.\",\n        \"virtual_table\": \"SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT Reign, COUNT(*) as Reign_Count FROM wrestler GROUP BY Reign ORDER BY Reign_Count DESC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique title reigns from the 'wrestler' table, excluding those that took place in a specific location. The placeholder in the WHERE clause represents the location to be filtered out.\",\n        \"virtual_table\": \"SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT Reign, COUNT(*) as Reign_Count FROM wrestler GROUP BY Reign ORDER BY Reign_Count DESC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique title reigns from the 'wrestler' table, excluding those that took place in a specific location. The placeholder in the WHERE clause represents the location to be filtered out.\",\n        \"virtual_table\": \"SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of wrestlers from the 'wrestler' table who have held their title for fewer days than a specified number. The placeholder in the WHERE clause represents the maximum number of days the title can be held.\",\n        \"virtual_table\": \"SELECT Name FROM wrestler WHERE Days_held  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of locations where wrestlers have defended their titles, grouped by location. The placeholder in the HAVING clause represents the minimum number of wrestlers that must have defended their titles at each location.\",\n        \"virtual_table\": \"SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Reign, COUNT(Reign) AS Reign_Count FROM wrestler GROUP BY Reign ORDER BY Reign_Count DESC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the times of eliminations from the 'elimination' table for wrestlers who have held their title for more than a specified number of days. The placeholder in the WHERE clause represents the minimum number of days the title must have been held.\",\n        \"virtual_table\": \"SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Reign, COUNT(*) as Reign_Count \nFROM wrestler \nGROUP BY Reign \nORDER BY Reign_Count DESC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1873",
        "c_low": "SELECT Reign, COUNT(*) as Reign_Count FROM wrestler GROUP BY Reign ORDER BY Reign_Count DESC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of locations where wrestlers have defended their titles, grouped by location. The placeholder in the HAVING clause represents the minimum number of wrestlers that must have defended their titles at each location.\",\n        \"virtual_table\": \"SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT Reign, COUNT(Reign) AS Reign_Count FROM wrestler GROUP BY Reign ORDER BY Reign_Count DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of wrestlers from the 'wrestler' table who have held their title for fewer days than a specified number. The placeholder in the WHERE clause represents the maximum number of days the title can be held.\",\n        \"virtual_table\": \"SELECT Name FROM wrestler WHERE Days_held  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the times of eliminations from the 'elimination' table for wrestlers who have held their title for more than a specified number of days. The placeholder in the WHERE clause represents the minimum number of days the title must have been held.\",\n        \"virtual_table\": \"SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT Reign, COUNT(*) as Reign_Count FROM wrestler GROUP BY Reign ORDER BY Reign_Count DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique title reigns from the 'wrestler' table, excluding those that took place in a specific location. The placeholder in the WHERE clause represents the location to be filtered out.\",\n        \"virtual_table\": \"SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT Reign, COUNT(*) as Reign_Count FROM wrestler GROUP BY Reign ORDER BY Reign_Count DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of wrestlers from the 'wrestler' table who have held their title for fewer days than a specified number. The placeholder in the WHERE clause represents the maximum number of days the title can be held.\",\n        \"virtual_table\": \"SELECT Name FROM wrestler WHERE Days_held  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique title reigns from the 'wrestler' table, excluding those that took place in a specific location. The placeholder in the WHERE clause represents the location to be filtered out.\",\n        \"virtual_table\": \"SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of locations where wrestlers have defended their titles, grouped by location. The placeholder in the HAVING clause represents the minimum number of wrestlers that must have defended their titles at each location.\",\n        \"virtual_table\": \"SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Reign, COUNT(*) as Reign_Count FROM wrestler GROUP BY Reign ORDER BY Reign_Count DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the times of eliminations from the 'elimination' table for wrestlers who have held their title for more than a specified number of days. The placeholder in the WHERE clause represents the minimum number of days the title must have been held.\",\n        \"virtual_table\": \"SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Reign, COUNT(*) as Reign_Count\nFROM wrestler\nGROUP BY Reign\nORDER BY Reign_Count DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1878",
        "c_low": "SELECT DISTINCT e1.Team \nFROM Elimination e1 \nJOIN Elimination e2 ON e1.Team = e2.Team \nWHERE e1.Eliminated_By = (SELECT Wrestler_ID FROM wrestler WHERE Name = 'Orton') \nAND e2.Eliminated_By = (SELECT Wrestler_ID FROM wrestler WHERE Name = 'Benjamin');",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of distinct teams involved in elimination events from the 'Elimination' table. The query uses the COUNT function to aggregate the number of unique teams.\",\n        \"virtual_table\": \"SELECT COUNT (DISTINCT team) FROM elimination\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of locations where wrestlers have defended their titles, grouped by location. The placeholder in the HAVING clause represents the minimum number of wrestlers that must have defended their titles at each location.\",\n        \"virtual_table\": \"SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT E1.Team \nFROM Elimination AS E1 \nJOIN Elimination AS E2 ON E1.Team = E2.Team \nWHERE E1.Eliminated_By = (SELECT Wrestler_ID FROM wrestler WHERE Name = 'Orton') \nAND E2.Eliminated_By = (SELECT Wrestler_ID FROM wrestler WHERE Name = 'Benjamin');",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the elimination moves used during matches involving a specific team. The placeholder in the WHERE clause represents the team's identifier.\",\n        \"virtual_table\": \"SELECT Elimination_Move FROM Elimination WHERE Team  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the times of eliminations from the 'elimination' table for wrestlers who have held their title for more than a specified number of days. The placeholder in the WHERE clause represents the minimum number of days the title must have been held.\",\n        \"virtual_table\": \"SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of wrestlers from the 'wrestler' table who have held their title for fewer days than a specified number. The placeholder in the WHERE clause represents the maximum number of days the title can be held.\",\n        \"virtual_table\": \"SELECT Name FROM wrestler WHERE Days_held  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT Team FROM Elimination WHERE Eliminated_By = (SELECT Wrestler_ID FROM wrestler WHERE Name = 'Orton') OR Eliminated_By = (SELECT Wrestler_ID FROM wrestler WHERE Name = 'Benjamin') GROUP BY Team HAVING COUNT(DISTINCT Eliminated_By) = 2;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique title reigns from the 'wrestler' table, excluding those that took place in a specific location. The placeholder in the WHERE clause represents the location to be filtered out.\",\n        \"virtual_table\": \"SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT e1.Team \nFROM Elimination e1 \nJOIN Elimination e2 ON e1.Team = e2.Team \nWHERE e1.Eliminated_By = (SELECT Wrestler_ID FROM wrestler WHERE Name = 'Orton') \nAND e2.Eliminated_By = (SELECT Wrestler_ID FROM wrestler WHERE Name = 'Benjamin');",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the elimination moves used during matches involving a specific team. The placeholder in the WHERE clause represents the team's identifier.\",\n        \"virtual_table\": \"SELECT Elimination_Move FROM Elimination WHERE Team  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of distinct teams involved in elimination events from the 'Elimination' table. The query uses the COUNT function to aggregate the number of unique teams.\",\n        \"virtual_table\": \"SELECT COUNT (DISTINCT team) FROM elimination\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of locations where wrestlers have defended their titles, grouped by location. The placeholder in the HAVING clause represents the minimum number of wrestlers that must have defended their titles at each location.\",\n        \"virtual_table\": \"SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT E1.Team FROM Elimination AS E1 JOIN Elimination AS E2 ON E1.Team = E2.Team WHERE E1.Eliminated_By = (SELECT Wrestler_ID FROM wrestler WHERE Name = 'Orton') AND E2.Eliminated_By = (SELECT Wrestler_ID FROM wrestler WHERE Name = 'Benjamin');",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the times of eliminations from the 'elimination' table for wrestlers who have held their title for more than a specified number of days. The placeholder in the WHERE clause represents the minimum number of days the title must have been held.\",\n        \"virtual_table\": \"SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT e1.Team\nFROM Elimination e1\nJOIN Elimination e2 ON e1.Team = e2.Team\nWHERE e1.Eliminated_By = (SELECT Wrestler_ID FROM wrestler WHERE Name = 'Orton')\nAND e2.Eliminated_By = (SELECT Wrestler_ID FROM wrestler WHERE Name = 'Benjamin');",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1879",
        "c_low": "SELECT DISTINCT e1.Team\nFROM Elimination e1\nJOIN Elimination e2 ON e1.Team = e2.Team\nWHERE e1.Eliminated_By = (SELECT Wrestler_ID FROM wrestler WHERE Name = 'Orton')\nAND e2.Eliminated_By = (SELECT Wrestler_ID FROM wrestler WHERE Name = 'Benjamin');",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of distinct teams involved in elimination events from the 'Elimination' table. The query uses the COUNT function to aggregate the number of unique teams.\",\n        \"virtual_table\": \"SELECT COUNT (DISTINCT team) FROM elimination\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of locations where wrestlers have defended their titles, grouped by location. The placeholder in the HAVING clause represents the minimum number of wrestlers that must have defended their titles at each location.\",\n        \"virtual_table\": \"SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT E1.Team \nFROM Elimination AS E1 \nJOIN Elimination AS E2 ON E1.Team = E2.Team \nWHERE E1.Eliminated_By = (SELECT Wrestler_ID FROM wrestler WHERE Name = 'Orton') \nAND E2.Eliminated_By = (SELECT Wrestler_ID FROM wrestler WHERE Name = 'Benjamin');",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the times of eliminations from the 'elimination' table for wrestlers who have held their title for more than a specified number of days. The placeholder in the WHERE clause represents the minimum number of days the title must have been held.\",\n        \"virtual_table\": \"SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the elimination moves used during matches involving a specific team. The placeholder in the WHERE clause represents the team's identifier.\",\n        \"virtual_table\": \"SELECT Elimination_Move FROM Elimination WHERE Team  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of wrestlers from the 'wrestler' table who have held their title for fewer days than a specified number. The placeholder in the WHERE clause represents the maximum number of days the title can be held.\",\n        \"virtual_table\": \"SELECT Name FROM wrestler WHERE Days_held  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT e1.Team \nFROM Elimination e1 \nJOIN Elimination e2 ON e1.Team = e2.Team \nWHERE e1.Eliminated_By = (SELECT Wrestler_ID FROM wrestler WHERE Name = 'Orton') \nAND e2.Eliminated_By = (SELECT Wrestler_ID FROM wrestler WHERE Name = 'Benjamin');",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique title reigns from the 'wrestler' table, excluding those that took place in a specific location. The placeholder in the WHERE clause represents the location to be filtered out.\",\n        \"virtual_table\": \"SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT e1.Team \nFROM Elimination e1 \nJOIN Elimination e2 ON e1.Team = e2.Team \nWHERE e1.Eliminated_By = (SELECT Wrestler_ID FROM wrestler WHERE Name = 'Orton') \nAND e2.Eliminated_By = (SELECT Wrestler_ID FROM wrestler WHERE Name = 'Benjamin');",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the elimination moves used during matches involving a specific team. The placeholder in the WHERE clause represents the team's identifier.\",\n        \"virtual_table\": \"SELECT Elimination_Move FROM Elimination WHERE Team  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of distinct teams involved in elimination events from the 'Elimination' table. The query uses the COUNT function to aggregate the number of unique teams.\",\n        \"virtual_table\": \"SELECT COUNT (DISTINCT team) FROM elimination\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of locations where wrestlers have defended their titles, grouped by location. The placeholder in the HAVING clause represents the minimum number of wrestlers that must have defended their titles at each location.\",\n        \"virtual_table\": \"SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT E1.Team \nFROM Elimination AS E1 \nJOIN Elimination AS E2 ON E1.Team = E2.Team \nWHERE E1.Eliminated_By = (SELECT Wrestler_ID FROM wrestler WHERE Name = 'Orton') \nAND E2.Eliminated_By = (SELECT Wrestler_ID FROM wrestler WHERE Name = 'Benjamin');",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the times of eliminations from the 'elimination' table for wrestlers who have held their title for more than a specified number of days. The placeholder in the WHERE clause represents the minimum number of days the title must have been held.\",\n        \"virtual_table\": \"SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT e1.Team\nFROM Elimination e1\nJOIN Elimination e2 ON e1.Team = e2.Team\nWHERE e1.Eliminated_By = (SELECT Wrestler_ID FROM wrestler WHERE Name = 'Orton')\nAND e2.Eliminated_By = (SELECT Wrestler_ID FROM wrestler WHERE Name = 'Benjamin');",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1882",
        "c_low": "SELECT Time FROM Elimination e JOIN wrestler w ON e.Wrestler_ID = w.Wrestler_ID WHERE w.Name IN ('Punk', 'Orton')",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of locations where wrestlers have defended their titles, grouped by location. The placeholder in the HAVING clause represents the minimum number of wrestlers that must have defended their titles at each location.\",\n        \"virtual_table\": \"SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of distinct teams involved in elimination events from the 'Elimination' table. The query uses the COUNT function to aggregate the number of unique teams.\",\n        \"virtual_table\": \"SELECT COUNT (DISTINCT team) FROM elimination\"\n    }\n}\n",
        "c_mid": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T2.Name IN ('Punk', 'Orton')",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the times of eliminations from the 'elimination' table for wrestlers who have held their title for more than a specified number of days. The placeholder in the WHERE clause represents the minimum number of days the title must have been held.\",\n        \"virtual_table\": \"SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the elimination moves used during matches involving a specific team. The placeholder in the WHERE clause represents the team's identifier.\",\n        \"virtual_table\": \"SELECT Elimination_Move FROM Elimination WHERE Team  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of wrestlers from the 'wrestler' table who have held their title for fewer days than a specified number. The placeholder in the WHERE clause represents the maximum number of days the title can be held.\",\n        \"virtual_table\": \"SELECT Name FROM wrestler WHERE Days_held  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT Time FROM Elimination JOIN wrestler ON Elimination.Wrestler_ID = wrestler.Wrestler_ID WHERE wrestler.Name IN ('Punk', 'Orton')",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique title reigns from the 'wrestler' table, excluding those that took place in a specific location. The placeholder in the WHERE clause represents the location to be filtered out.\",\n        \"virtual_table\": \"SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT Time FROM Elimination WHERE Eliminated_By IN (SELECT Wrestler_ID FROM wrestler WHERE Name IN ('Punk', 'Orton'))",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the elimination moves used during matches involving a specific team. The placeholder in the WHERE clause represents the team's identifier.\",\n        \"virtual_table\": \"SELECT Elimination_Move FROM Elimination WHERE Team  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of wrestlers from the 'wrestler' table who have held their title for fewer days than a specified number. The placeholder in the WHERE clause represents the maximum number of days the title can be held.\",\n        \"virtual_table\": \"SELECT Name FROM wrestler WHERE Days_held  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of locations where wrestlers have defended their titles, grouped by location. The placeholder in the HAVING clause represents the minimum number of wrestlers that must have defended their titles at each location.\",\n        \"virtual_table\": \"SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T1.Time FROM Elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T2.Name IN ('Punk', 'Orton')",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the times of eliminations from the 'elimination' table for wrestlers who have held their title for more than a specified number of days. The placeholder in the WHERE clause represents the minimum number of days the title must have been held.\",\n        \"virtual_table\": \"SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Time FROM Elimination WHERE Eliminated_By IN (SELECT Wrestler_ID FROM wrestler WHERE Name IN ('Punk', 'Orton'));",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1883",
        "c_low": "SELECT Time FROM Elimination WHERE Eliminated_By IN (SELECT Wrestler_ID FROM wrestler WHERE Name IN ('Punk', 'Orton'));",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of distinct teams involved in elimination events from the 'Elimination' table. The query uses the COUNT function to aggregate the number of unique teams.\",\n        \"virtual_table\": \"SELECT COUNT (DISTINCT team) FROM elimination\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of locations where wrestlers have defended their titles, grouped by location. The placeholder in the HAVING clause represents the minimum number of wrestlers that must have defended their titles at each location.\",\n        \"virtual_table\": \"SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT Time FROM Elimination WHERE Eliminated_By IN (SELECT Wrestler_ID FROM wrestler WHERE Name IN ('Punk', 'Orton'))",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the times of eliminations from the 'elimination' table for wrestlers who have held their title for more than a specified number of days. The placeholder in the WHERE clause represents the minimum number of days the title must have been held.\",\n        \"virtual_table\": \"SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the elimination moves used during matches involving a specific team. The placeholder in the WHERE clause represents the team's identifier.\",\n        \"virtual_table\": \"SELECT Elimination_Move FROM Elimination WHERE Team  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of wrestlers from the 'wrestler' table who have held their title for fewer days than a specified number. The placeholder in the WHERE clause represents the maximum number of days the title can be held.\",\n        \"virtual_table\": \"SELECT Name FROM wrestler WHERE Days_held  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT Time FROM Elimination WHERE Eliminated_By IN (SELECT Wrestler_ID FROM wrestler WHERE Name IN ('Punk', 'Orton'));",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique title reigns from the 'wrestler' table, excluding those that took place in a specific location. The placeholder in the WHERE clause represents the location to be filtered out.\",\n        \"virtual_table\": \"SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT Time FROM Elimination WHERE Eliminated_By IN (SELECT Wrestler_ID FROM wrestler WHERE Name IN ('Punk', 'Orton'))",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the elimination moves used during matches involving a specific team. The placeholder in the WHERE clause represents the team's identifier.\",\n        \"virtual_table\": \"SELECT Elimination_Move FROM Elimination WHERE Team  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of wrestlers from the 'wrestler' table who have held their title for fewer days than a specified number. The placeholder in the WHERE clause represents the maximum number of days the title can be held.\",\n        \"virtual_table\": \"SELECT Name FROM wrestler WHERE Days_held  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of distinct teams involved in elimination events from the 'Elimination' table. The query uses the COUNT function to aggregate the number of unique teams.\",\n        \"virtual_table\": \"SELECT COUNT (DISTINCT team) FROM elimination\"\n    }\n}\n",
        "t_2": "SELECT T1.Time FROM Elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T1.Eliminated_By IN (SELECT Wrestler_ID FROM wrestler WHERE Name IN ('Punk', 'Orton'))",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the times of eliminations from the 'elimination' table for wrestlers who have held their title for more than a specified number of days. The placeholder in the WHERE clause represents the minimum number of days the title must have been held.\",\n        \"virtual_table\": \"SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Time FROM Elimination WHERE Eliminated_By IN (SELECT Wrestler_ID FROM wrestler WHERE Name IN ('Punk', 'Orton'));",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1896",
        "c_low": "SELECT School.School_name \nFROM School \nJOIN endowment ON School.School_id = endowment.School_id \nWHERE endowment.amount <= 10;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT School_name FROM School WHERE School_id IN (SELECT School_id FROM endowment WHERE amount <= 10)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of schools from the 'School' table that do not have any associated endowment records. The query uses a subquery to filter out schools that have received donations, ensuring that only schools without endowments are included in the results.\",\n        \"virtual_table\": \"SELECT school_name FROM school WHERE school_id NOT IN (SELECT school_id FROM endowment)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of donors from the 'endowment' table who have donated an amount greater than or equal to a specified value. The placeholder in the WHERE clause represents the minimum donation amount.\",\n        \"virtual_table\": \"SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of distinct donator names from the 'endowment' table for a specific school. The placeholder in the WHERE clause represents the name of the school being queried.\",\n        \"virtual_table\": \"SELECT count(DISTINCT T1.donator_name) FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT T2.School_name FROM endowment AS T1 JOIN School AS T2 ON T1.School_id = T2.School_id WHERE T1.amount <= 10",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of schools that have received donations exceeding a specified amount. The results are grouped by school, and only those schools with more than a specified number of donations are included. The placeholders in the query represent the minimum donation amount and the minimum count of donations required for a school to be listed.\",\n        \"virtual_table\": \"SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.amount  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.school_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total donations received from each donor for the endowments associated with schools. The placeholder in the SELECT statement represents the donor's name, and the sum of the donation amounts is calculated and ordered in descending order to show the highest contributors first.\",\n        \"virtual_table\": \"SELECT donator_name ,  sum(amount) FROM endowment GROUP BY donator_name ORDER BY sum(amount) DESC\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the names of donors who have contributed to two different schools, specified by their names. The placeholders in the WHERE clause represent the names of the schools being queried.\",\n        \"virtual_table\": \"SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT School_name FROM School WHERE School_id IN (SELECT School_id FROM endowment WHERE amount <= 10)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total donations received from each donor for the endowments associated with schools. The placeholder in the SELECT statement represents the donor's name, and the sum of the donation amounts is calculated and ordered in descending order to show the highest contributors first.\",\n        \"virtual_table\": \"SELECT donator_name ,  sum(amount) FROM endowment GROUP BY donator_name ORDER BY sum(amount) DESC\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of donors from the 'endowment' table who have donated an amount greater than or equal to a specified value. The placeholder in the WHERE clause represents the minimum donation amount.\",\n        \"virtual_table\": \"SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of donations made to schools, displaying the amount donated and the name of the donor. The results are ordered by the donation amount in descending order, with a limit set by a placeholder for the number of records to return.\",\n        \"virtual_table\": \"SELECT amount ,  donator_name FROM endowment ORDER BY amount DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT School_name FROM School WHERE School_id IN (SELECT School_id FROM endowment WHERE amount <= 10)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of schools that have received donations exceeding a specified amount. The results are grouped by school, and only those schools with more than a specified number of donations are included. The placeholders in the query represent the minimum donation amount and the minimum count of donations required for a school to be listed.\",\n        \"virtual_table\": \"SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.amount  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.school_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of schools from the 'School' table that do not have any associated endowment records. The query uses a subquery to filter out schools that have received donations, ensuring that only schools without endowments are included in the results.\",\n        \"virtual_table\": \"SELECT school_name FROM school WHERE school_id NOT IN (SELECT school_id FROM endowment)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of distinct donator names from the 'endowment' table for a specific school. The placeholder in the WHERE clause represents the name of the school being queried.\",\n        \"virtual_table\": \"SELECT count(DISTINCT T1.donator_name) FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT School.School_name \nFROM School \nJOIN endowment ON School.School_id = endowment.School_id \nWHERE endowment.amount <= '10';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1906",
        "c_low": "SELECT School.School_name \nFROM School \nLEFT JOIN budget ON School.School_id = budget.School_id \nLEFT JOIN endowment ON School.School_id = endowment.School_id \nWHERE (budget.Budgeted > 100 OR endowment.amount > 10);",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT School_name FROM School WHERE School_id IN (SELECT School_id FROM budget WHERE Budgeted > 100) OR School_id IN (SELECT School_id FROM endowment WHERE amount > 10)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of schools from the 'budget' table that have a budgeted amount greater than a specified value and for fiscal years up to a certain year. The placeholders in the WHERE clause represent the budgeted amount and the fiscal year limit.\",\n        \"virtual_table\": \"SELECT count(*) FROM budget WHERE budgeted  >  [PLACEHOLDER-TYPE:NUMBER] AND YEAR  <=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of donors from the 'endowment' table who have donated an amount greater than or equal to a specified value. The placeholder in the WHERE clause represents the minimum donation amount.\",\n        \"virtual_table\": \"SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of schools from the 'budget' table where the budgeted amount is less than the invested amount. The query uses a condition to filter records based on the comparison of the 'budgeted' and 'invested' columns.\",\n        \"virtual_table\": \"SELECT count(*) FROM budget WHERE budgeted  <  invested\"\n    }\n}\n",
        "c_high": "SELECT School_name FROM School WHERE School_id IN (SELECT School_id FROM budget WHERE Budgeted > 100) OR School_id IN (SELECT School_id FROM endowment WHERE amount > 10)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of schools that have received donations exceeding a specified amount. The results are grouped by school, and only those schools with more than a specified number of donations are included. The placeholders in the query represent the minimum donation amount and the minimum count of donations required for a school to be listed.\",\n        \"virtual_table\": \"SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.amount  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.school_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total donations received from each donor for the endowments associated with schools. The placeholder in the SELECT statement represents the donor's name, and the sum of the donation amounts is calculated and ordered in descending order to show the highest contributors first.\",\n        \"virtual_table\": \"SELECT donator_name ,  sum(amount) FROM endowment GROUP BY donator_name ORDER BY sum(amount) DESC\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a view of school names along with their budgeted and invested amounts from the 'budget' table, filtered by fiscal years that are greater than or equal to a specified year. The placeholders in the WHERE clause represent the fiscal year to filter the results.\",\n        \"virtual_table\": \"SELECT T2.school_name ,  T1.budgeted ,  T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.year  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT School_name FROM School WHERE School_id IN (SELECT School_id FROM budget WHERE Budgeted > 100) OR School_id IN (SELECT School_id FROM endowment WHERE amount > 10)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of schools from the 'budget' table that have a budgeted amount greater than a specified value and for fiscal years up to a certain year. The placeholders in the WHERE clause represent the budgeted amount and the fiscal year limit.\",\n        \"virtual_table\": \"SELECT count(*) FROM budget WHERE budgeted  >  [PLACEHOLDER-TYPE:NUMBER] AND YEAR  <=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total donations received from each donor for the endowments associated with schools. The placeholder in the SELECT statement represents the donor's name, and the sum of the donation amounts is calculated and ordered in descending order to show the highest contributors first.\",\n        \"virtual_table\": \"SELECT donator_name ,  sum(amount) FROM endowment GROUP BY donator_name ORDER BY sum(amount) DESC\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of donors from the 'endowment' table who have donated an amount greater than or equal to a specified value. The placeholder in the WHERE clause represents the minimum donation amount.\",\n        \"virtual_table\": \"SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT School_name FROM School WHERE School_id IN (SELECT School_id FROM budget WHERE Budgeted > 100) OR School_id IN (SELECT School_id FROM endowment WHERE amount > 10);",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of schools that have received donations exceeding a specified amount. The results are grouped by school, and only those schools with more than a specified number of donations are included. The placeholders in the query represent the minimum donation amount and the minimum count of donations required for a school to be listed.\",\n        \"virtual_table\": \"SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.amount  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.school_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a view of school names along with their budgeted and invested amounts from the 'budget' table, filtered by fiscal years that are greater than or equal to a specified year. The placeholders in the WHERE clause represent the fiscal year to filter the results.\",\n        \"virtual_table\": \"SELECT T2.school_name ,  T1.budgeted ,  T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.year  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of school names, their mascots, and football class designations from the 'School' table, filtered by budget conditions. The placeholders in the WHERE clause represent the budgeted amount and the fiscal year, allowing users to specify their criteria for filtering the results.\",\n        \"virtual_table\": \"SELECT T1.School_name ,  T1.Mascot ,  T1.IHSAA_Football_Class FROM school AS T1 JOIN budget AS T2 ON T1.school_id  =  T2.school_id WHERE Budgeted  >  [PLACEHOLDER-TYPE:NUMBER] OR YEAR  <  [PLACEHOLDER-TYPE:NUMBER] ORDER BY T2.total_budget_percent_invested ,  T2.total_budget_percent_budgeted\"\n    }\n}\n",
        "t_3+": "SELECT School.School_name \nFROM School \nLEFT JOIN budget ON School.School_id = budget.School_id \nLEFT JOIN endowment ON School.School_id = endowment.School_id \nWHERE (budget.Budgeted > 100 OR endowment.amount > 10);",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1908",
        "c_low": "SELECT COUNT(DISTINCT e.School_id) AS number_of_schools\nFROM endowment e\nWHERE e.amount < 8.5\nGROUP BY e.School_id\nHAVING COUNT(e.donator_name) > 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT COUNT(DISTINCT School_id) FROM endowment WHERE amount < 8.5 GROUP BY School_id HAVING COUNT(donator_name) > 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of distinct donator names from the 'endowment' table for a specific school. The placeholder in the WHERE clause represents the name of the school being queried.\",\n        \"virtual_table\": \"SELECT count(DISTINCT T1.donator_name) FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of donations made to schools, displaying the amount donated and the name of the donor. The results are ordered by the donation amount in descending order, with a limit set by a placeholder for the number of records to return.\",\n        \"virtual_table\": \"SELECT amount ,  donator_name FROM endowment ORDER BY amount DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of schools from the 'budget' table where the budgeted amount is less than the invested amount. The query uses a condition to filter records based on the comparison of the 'budgeted' and 'invested' columns.\",\n        \"virtual_table\": \"SELECT count(*) FROM budget WHERE budgeted  <  invested\"\n    }\n}\n",
        "c_high": "SELECT COUNT(DISTINCT T2.School_id) FROM endowment AS T1 JOIN School AS T2 ON T1.School_id = T2.School_id WHERE T1.amount < 8.5 GROUP BY T2.School_id HAVING COUNT(T1.donator_name) > 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of schools that have received donations exceeding a specified amount. The results are grouped by school, and only those schools with more than a specified number of donations are included. The placeholders in the query represent the minimum donation amount and the minimum count of donations required for a school to be listed.\",\n        \"virtual_table\": \"SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.amount  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.school_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies the names of donors who have contributed to two different schools, specified by their names. The placeholders in the WHERE clause represent the names of the schools being queried.\",\n        \"virtual_table\": \"SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total donations received from each donor for the endowments associated with schools. The placeholder in the SELECT statement represents the donor's name, and the sum of the donation amounts is calculated and ordered in descending order to show the highest contributors first.\",\n        \"virtual_table\": \"SELECT donator_name ,  sum(amount) FROM endowment GROUP BY donator_name ORDER BY sum(amount) DESC\"\n    }\n}\n",
        "t_1": "SELECT COUNT(DISTINCT e.School_id) \nFROM endowment e \nWHERE e.amount < 8.5 \nGROUP BY e.School_id \nHAVING COUNT(e.donator_name) > 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of donations made to schools, displaying the amount donated and the name of the donor. The results are ordered by the donation amount in descending order, with a limit set by a placeholder for the number of records to return.\",\n        \"virtual_table\": \"SELECT amount ,  donator_name FROM endowment ORDER BY amount DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total donations received from each donor for the endowments associated with schools. The placeholder in the SELECT statement represents the donor's name, and the sum of the donation amounts is calculated and ordered in descending order to show the highest contributors first.\",\n        \"virtual_table\": \"SELECT donator_name ,  sum(amount) FROM endowment GROUP BY donator_name ORDER BY sum(amount) DESC\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of schools from the 'budget' table where the budgeted amount is less than the invested amount. The query uses a condition to filter records based on the comparison of the 'budgeted' and 'invested' columns.\",\n        \"virtual_table\": \"SELECT count(*) FROM budget WHERE budgeted  <  invested\"\n    }\n}\n",
        "t_2": "SELECT COUNT(DISTINCT T2.School_id) FROM endowment AS T1 JOIN School AS T2 ON T1.School_id = T2.School_id WHERE T1.amount < 8.5 GROUP BY T1.School_id HAVING COUNT(DISTINCT T1.donator_name) > 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of schools that have received donations exceeding a specified amount. The results are grouped by school, and only those schools with more than a specified number of donations are included. The placeholders in the query represent the minimum donation amount and the minimum count of donations required for a school to be listed.\",\n        \"virtual_table\": \"SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.amount  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.school_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies the names of donors who have contributed to two different schools, specified by their names. The placeholders in the WHERE clause represent the names of the schools being queried.\",\n        \"virtual_table\": \"SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of distinct donator names from the 'endowment' table for a specific school. The placeholder in the WHERE clause represents the name of the school being queried.\",\n        \"virtual_table\": \"SELECT count(DISTINCT T1.donator_name) FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(DISTINCT e.School_id) AS number_of_schools\nFROM endowment e\nWHERE e.amount < 8.5\nGROUP BY e.School_id\nHAVING COUNT(e.donator_name) > 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1922",
        "c_low": "SELECT b.Name, COUNT(i.Institution_id) AS number_of_institutions\nFROM building b\nLEFT JOIN Institution i ON b.building_id = i.building_id\nGROUP BY b.building_id, b.Name;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about institutions that were founded after a specific year and have a minimum number of enrolled students. The placeholders in the WHERE clause represent the year of founding and the enrollment count, allowing users to filter the results based on their criteria.\",\n        \"virtual_table\": \"SELECT TYPE FROM institution WHERE founded  >  [PLACEHOLDER-TYPE:NUMBER] AND enrollment  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT b.Name, COUNT(i.Institution_id) AS institution_count \nFROM building AS b \nLEFT JOIN Institution AS i ON b.building_id = i.building_id \nGROUP BY b.building_id, b.Name;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of institutions that are associated with proteins, specifically filtering for those institutions located in buildings that have a certain number of floors or more. The placeholder in the WHERE clause represents the minimum number of floors required for the buildings.\",\n        \"virtual_table\": \"SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id JOIN building AS T3 ON T3.building_id  =  T1.building_id WHERE T3.floors  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of buildings from the 'building' table that meet specific height and floor criteria. The placeholders in the WHERE clause represent the minimum height in feet and the minimum number of floors required for the buildings.\",\n        \"virtual_table\": \"SELECT name FROM building WHERE height_feet  >=  [PLACEHOLDER-TYPE:NUMBER] AND floors  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of institutions that were founded after a specific year or belong to a certain type. It combines data from the 'Institution' and 'protein' tables based on their relationship through the institution identifier. The placeholders in the WHERE clause allow for filtering based on the founding year and institution type.\",\n        \"virtual_table\": \"SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  [PLACEHOLDER-TYPE:NUMBER] OR T1.type  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT b.Name, COUNT(i.Institution_id) AS institution_count \nFROM building AS b \nLEFT JOIN Institution AS i ON b.building_id = i.building_id \nGROUP BY b.building_id;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and heights of buildings from the 'building' table that are associated with institutions founded after a specific year. The query groups the results by building ID and filters to include only those buildings linked to institutions with a count of at least a specified number of entries.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.building_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of buildings from the 'building' table that are not associated with any institution founded in a specific year. The placeholder in the query represents the year of establishment for filtering the institutions.\",\n        \"virtual_table\": \"SELECT name FROM building EXCEPT SELECT T1.name FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT b.Name, COUNT(i.Institution_id) AS institution_count\nFROM building b\nLEFT JOIN Institution i ON b.building_id = i.building_id\nGROUP BY b.building_id, b.Name;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about institutions that were founded after a specific year and have a minimum number of enrolled students. The placeholders in the WHERE clause represent the year of founding and the enrollment count, allowing users to filter the results based on their criteria.\",\n        \"virtual_table\": \"SELECT TYPE FROM institution WHERE founded  >  [PLACEHOLDER-TYPE:NUMBER] AND enrollment  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of buildings from the 'building' table that meet specific height and floor criteria. The placeholders in the WHERE clause represent the minimum height in feet and the minimum number of floors required for the buildings.\",\n        \"virtual_table\": \"SELECT name FROM building WHERE height_feet  >=  [PLACEHOLDER-TYPE:NUMBER] AND floors  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT B.Name, COUNT(I.Institution_id) AS institution_count \nFROM building AS B \nLEFT JOIN Institution AS I ON B.building_id = I.building_id \nGROUP BY B.building_id;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and heights of buildings from the 'building' table that are associated with institutions founded after a specific year. The query groups the results by building ID and filters to include only those buildings linked to institutions with a count of at least a specified number of entries.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.building_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of buildings from the 'building' table that are not associated with any institution founded in a specific year. The placeholder in the query represents the year of establishment for filtering the institutions.\",\n        \"virtual_table\": \"SELECT name FROM building EXCEPT SELECT T1.name FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of institutions that were founded after a specific year or belong to a certain type. It combines data from the 'Institution' and 'protein' tables based on their relationship through the institution identifier. The placeholders in the WHERE clause allow for filtering based on the founding year and institution type.\",\n        \"virtual_table\": \"SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  [PLACEHOLDER-TYPE:NUMBER] OR T1.type  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT b.Name, COUNT(i.Institution_id) AS institution_count \nFROM building AS b \nLEFT JOIN Institution AS i ON b.building_id = i.building_id \nGROUP BY b.building_id;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of institutions that are associated with proteins, specifically filtering for those institutions located in buildings that have a certain number of floors or more. The placeholder in the WHERE clause represents the minimum number of floors required for the buildings.\",\n        \"virtual_table\": \"SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id JOIN building AS T3 ON T3.building_id  =  T1.building_id WHERE T3.floors  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1925",
        "c_low": "SELECT Institution.Institution, COUNT(protein.common_name) AS protein_count \nFROM Institution \nLEFT JOIN protein ON Institution.Institution_id = protein.Institution_id \nGROUP BY Institution.Institution;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about institutions that were founded after a specific year and have a minimum number of enrolled students. The placeholders in the WHERE clause represent the year of founding and the enrollment count, allowing users to filter the results based on their criteria.\",\n        \"virtual_table\": \"SELECT TYPE FROM institution WHERE founded  >  [PLACEHOLDER-TYPE:NUMBER] AND enrollment  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT I.Institution, COUNT(P.common_name) AS protein_count \nFROM Institution AS I \nLEFT JOIN protein AS P ON I.Institution_id = P.Institution_id \nGROUP BY I.Institution;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of institutions that are associated with proteins, specifically filtering for those institutions located in buildings that have a certain number of floors or more. The placeholder in the WHERE clause represents the minimum number of floors required for the buildings.\",\n        \"virtual_table\": \"SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id JOIN building AS T3 ON T3.building_id  =  T1.building_id WHERE T3.floors  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of institutions that were founded after a specific year or belong to a certain type. It combines data from the 'Institution' and 'protein' tables based on their relationship through the institution identifier. The placeholders in the WHERE clause allow for filtering based on the founding year and institution type.\",\n        \"virtual_table\": \"SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  [PLACEHOLDER-TYPE:NUMBER] OR T1.type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of institutions from the 'Institution' table that do not have any associated protein records. The placeholder in the query allows for filtering based on the institution's unique identifier.\",\n        \"virtual_table\": \"SELECT count(*) FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM protein)\"\n    }\n}\n",
        "c_high": "SELECT Institution, COUNT(protein.common_name) AS protein_count \nFROM Institution \nLEFT JOIN protein ON Institution.Institution_id = protein.Institution_id \nGROUP BY Institution.Institution_id;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and heights of buildings from the 'building' table that are associated with institutions founded after a specific year. The query groups the results by building ID and filters to include only those buildings linked to institutions with a count of at least a specified number of entries.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.building_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Institution.Institution, COUNT(protein.common_name) AS protein_count \nFROM Institution \nLEFT JOIN protein ON Institution.Institution_id = protein.Institution_id \nGROUP BY Institution.Institution;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about institutions that were founded after a specific year and have a minimum number of enrolled students. The placeholders in the WHERE clause represent the year of founding and the enrollment count, allowing users to filter the results based on their criteria.\",\n        \"virtual_table\": \"SELECT TYPE FROM institution WHERE founded  >  [PLACEHOLDER-TYPE:NUMBER] AND enrollment  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Institution.Institution, COUNT(protein.common_name) AS protein_count \nFROM Institution \nLEFT JOIN protein ON Institution.Institution_id = protein.Institution_id \nGROUP BY Institution.Institution;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of institutions that were founded after a specific year or belong to a certain type. It combines data from the 'Institution' and 'protein' tables based on their relationship through the institution identifier. The placeholders in the WHERE clause allow for filtering based on the founding year and institution type.\",\n        \"virtual_table\": \"SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  [PLACEHOLDER-TYPE:NUMBER] OR T1.type  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of institutions from the 'Institution' table that do not have any associated protein records. The placeholder in the query allows for filtering based on the institution's unique identifier.\",\n        \"virtual_table\": \"SELECT count(*) FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM protein)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names and heights of buildings from the 'building' table that are associated with institutions founded after a specific year. The query groups the results by building ID and filters to include only those buildings linked to institutions with a count of at least a specified number of entries.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.building_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Institution.Institution, COUNT(protein.common_name) AS protein_count \nFROM Institution \nLEFT JOIN protein ON Institution.Institution_id = protein.Institution_id \nGROUP BY Institution.Institution;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of institutions that are associated with proteins, specifically filtering for those institutions located in buildings that have a certain number of floors or more. The placeholder in the WHERE clause represents the minimum number of floors required for the buildings.\",\n        \"virtual_table\": \"SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id JOIN building AS T3 ON T3.building_id  =  T1.building_id WHERE T3.floors  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1930",
        "c_low": "SELECT Location FROM cinema WHERE Capacity <= 800 GROUP BY Location",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the locations of cinemas that have a seating capacity greater than a specified number and are showing more than a certain number of films. The placeholders in the query allow users to specify the minimum capacity and the minimum count of films being shown.\",\n        \"virtual_table\": \"SELECT LOCATION FROM cinema WHERE capacity  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY LOCATION HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT Location FROM cinema GROUP BY Location HAVING COUNT(*) = (SELECT COUNT(*) FROM cinema WHERE Capacity > 800)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the locations of cinemas that have a seating capacity greater than a specified number and have at least a certain number of cinemas in that location. The placeholders in the query allow users to specify the minimum capacity and the minimum count of cinemas required.\",\n        \"virtual_table\": \"SELECT LOCATION FROM cinema WHERE capacity  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY LOCATION HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT location FROM cinema WHERE capacity <= 800",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average, minimum, and maximum seating capacity of cinemas that were opened in a specific year or later. The placeholder in the WHERE clause represents the year from which to consider the cinemas.\",\n        \"virtual_table\": \"SELECT avg(capacity) ,  min(capacity) ,  max(capacity) FROM cinema WHERE openning_year  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the titles and directors of films from the 'film' table that are not currently scheduled for showing in any cinema. The placeholder in the subquery represents the film identifiers that are linked to the schedule.\",\n        \"virtual_table\": \"SELECT title ,  directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total number of showtimes per day for films at each cinema. It combines data from the 'schedule' table, which contains information about film showings, with the 'cinema' table, which provides details about each cinema. The placeholder in the SELECT statement represents the name of the cinema, while the aggregation function calculates the total showtimes for each cinema based on the cinema's unique identifier.\",\n        \"virtual_table\": \"SELECT T2.name ,  sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id  =  T2.cinema_id GROUP BY T1.cinema_id\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT Location FROM cinema WHERE Capacity <= 800;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the locations of cinemas that have a seating capacity greater than a specified number and are showing more than a certain number of films. The placeholders in the query allow users to specify the minimum capacity and the minimum count of films being shown.\",\n        \"virtual_table\": \"SELECT LOCATION FROM cinema WHERE capacity  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY LOCATION HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the locations of cinemas that have a seating capacity greater than a specified number and have at least a certain number of cinemas in that location. The placeholders in the query allow users to specify the minimum capacity and the minimum count of cinemas required.\",\n        \"virtual_table\": \"SELECT LOCATION FROM cinema WHERE capacity  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY LOCATION HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the average, minimum, and maximum seating capacity of cinemas that were opened in a specific year or later. The placeholder in the WHERE clause represents the year from which to consider the cinemas.\",\n        \"virtual_table\": \"SELECT avg(capacity) ,  min(capacity) ,  max(capacity) FROM cinema WHERE openning_year  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT location FROM cinema WHERE capacity <= 800",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the titles and directors of films from the 'film' table that are not currently scheduled for showing in any cinema. The placeholder in the subquery represents the film identifiers that are linked to the schedule.\",\n        \"virtual_table\": \"SELECT title ,  directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total number of showtimes per day for films at each cinema. It combines data from the 'schedule' table, which contains information about film showings, with the 'cinema' table, which provides details about each cinema. The placeholder in the SELECT statement represents the name of the cinema, while the aggregation function calculates the total showtimes for each cinema based on the cinema's unique identifier.\",\n        \"virtual_table\": \"SELECT T2.name ,  sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id  =  T2.cinema_id GROUP BY T1.cinema_id\"\n    }\n}\n",
        "t_3+": "SELECT Location FROM cinema WHERE Capacity <= 800;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1955",
        "c_low": "SELECT f.Directed_by, SUM(s.Show_times_per_day) AS Total_Show_Times\nFROM film f\nJOIN schedule s ON f.Film_ID = s.Film_ID\nGROUP BY f.Directed_by\nORDER BY Total_Show_Times DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the locations of cinemas that have a seating capacity greater than a specified number and are showing more than a certain number of films. The placeholders in the query allow users to specify the minimum capacity and the minimum count of films being shown.\",\n        \"virtual_table\": \"SELECT LOCATION FROM cinema WHERE capacity  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY LOCATION HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT f.Directed_by, SUM(s.Show_times_per_day) AS Total_Show_Times\nFROM film f\nJOIN schedule s ON f.Film_ID = s.Film_ID\nGROUP BY f.Directed_by\nORDER BY Total_Show_Times DESC\nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the locations of cinemas that have a seating capacity greater than a specified number and have at least a certain number of cinemas in that location. The placeholders in the query allow users to specify the minimum capacity and the minimum count of cinemas required.\",\n        \"virtual_table\": \"SELECT LOCATION FROM cinema WHERE capacity  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY LOCATION HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT directed_by, SUM(show_times_per_day) AS total_show_times \nFROM schedule AS S \nJOIN film AS F ON S.Film_ID = F.Film_ID \nGROUP BY directed_by \nORDER BY total_show_times DESC \nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total number of showtimes per day for films at each cinema. It combines data from the 'schedule' table, which contains information about film showings, with the 'cinema' table, which provides details about each cinema. The placeholder in the SELECT statement represents the name of the cinema, while the aggregation function calculates the total showtimes for each cinema based on the cinema's unique identifier.\",\n        \"virtual_table\": \"SELECT T2.name ,  sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id  =  T2.cinema_id GROUP BY T1.cinema_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the titles and directors of films from the 'film' table that are not currently scheduled for showing in any cinema. The placeholder in the subquery represents the film identifiers that are linked to the schedule.\",\n        \"virtual_table\": \"SELECT title ,  directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the average, minimum, and maximum seating capacity of cinemas that were opened in a specific year or later. The placeholder in the WHERE clause represents the year from which to consider the cinemas.\",\n        \"virtual_table\": \"SELECT avg(capacity) ,  min(capacity) ,  max(capacity) FROM cinema WHERE openning_year  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Directed_by, SUM(Show_times_per_day) AS Total_Show_Times \nFROM schedule \nJOIN film ON schedule.Film_ID = film.Film_ID \nGROUP BY Directed_by \nORDER BY Total_Show_Times DESC \nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the locations of cinemas that have a seating capacity greater than a specified number and are showing more than a certain number of films. The placeholders in the query allow users to specify the minimum capacity and the minimum count of films being shown.\",\n        \"virtual_table\": \"SELECT LOCATION FROM cinema WHERE capacity  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY LOCATION HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average, minimum, and maximum seating capacity of cinemas that were opened in a specific year or later. The placeholder in the WHERE clause represents the year from which to consider the cinemas.\",\n        \"virtual_table\": \"SELECT avg(capacity) ,  min(capacity) ,  max(capacity) FROM cinema WHERE openning_year  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the locations of cinemas that have a seating capacity greater than a specified number and have at least a certain number of cinemas in that location. The placeholders in the query allow users to specify the minimum capacity and the minimum count of cinemas required.\",\n        \"virtual_table\": \"SELECT LOCATION FROM cinema WHERE capacity  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY LOCATION HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT directed_by, SUM(show_times_per_day) AS total_show_times \nFROM schedule AS S \nJOIN film AS F ON S.Film_ID = F.Film_ID \nGROUP BY directed_by \nORDER BY total_show_times DESC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total number of showtimes per day for films at each cinema. It combines data from the 'schedule' table, which contains information about film showings, with the 'cinema' table, which provides details about each cinema. The placeholder in the SELECT statement represents the name of the cinema, while the aggregation function calculates the total showtimes for each cinema based on the cinema's unique identifier.\",\n        \"virtual_table\": \"SELECT T2.name ,  sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id  =  T2.cinema_id GROUP BY T1.cinema_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the titles and directors of films from the 'film' table that are not currently scheduled for showing in any cinema. The placeholder in the subquery represents the film identifiers that are linked to the schedule.\",\n        \"virtual_table\": \"SELECT title ,  directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)\"\n    }\n}\n",
        "t_3+": "SELECT Directed_by, SUM(Show_times_per_day) AS Total_Show_Times\nFROM film\nJOIN schedule ON film.Film_ID = schedule.Film_ID\nGROUP BY Directed_by\nORDER BY Total_Show_Times DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1960",
        "c_low": "SELECT good_or_bad_customer FROM Customers WHERE coupon_id IN (SELECT coupon_id FROM Discount_Coupons WHERE coupon_amount = '500');",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT good_or_bad_customer FROM Customers WHERE coupon_id IN (SELECT coupon_id FROM Discount_Coupons WHERE coupon_amount = '500');",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT good_or_bad_customer FROM Customers WHERE coupon_id IN (SELECT coupon_id FROM Discount_Coupons WHERE coupon_amount = '500');",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT good_or_bad_customer FROM Customers WHERE coupon_id IN (SELECT coupon_id FROM Discount_Coupons WHERE coupon_amount = '500');",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT good_or_bad_customer FROM Customers WHERE coupon_id IN (SELECT coupon_id FROM Discount_Coupons WHERE coupon_amount = '500');",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT good_or_bad_customer FROM Customers WHERE coupon_id IN (SELECT coupon_id FROM Discount_Coupons WHERE coupon_amount = '500');",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1961",
        "c_low": "SELECT Customers.customer_id, Customers.first_name, COUNT(Bookings.booking_id) AS booking_count\nFROM Customers\nLEFT JOIN Bookings ON Customers.customer_id = Bookings.customer_id\nGROUP BY Customers.customer_id, Customers.first_name;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Customers.customer_id, Customers.first_name, COUNT(Bookings.booking_id) AS booking_count\nFROM Customers\nLEFT JOIN Bookings ON Customers.customer_id = Bookings.customer_id\nGROUP BY Customers.customer_id, Customers.first_name;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT Customers.customer_id, Customers.first_name, COUNT(Bookings.booking_id) AS booking_count\nFROM Customers\nLEFT JOIN Bookings ON Customers.customer_id = Bookings.customer_id\nGROUP BY Customers.customer_id, Customers.first_name;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT Customers.customer_id, Customers.first_name, COUNT(Bookings.booking_id) AS booking_count\nFROM Customers\nLEFT JOIN Bookings ON Customers.customer_id = Bookings.customer_id\nGROUP BY Customers.customer_id, Customers.first_name;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT Customers.customer_id, Customers.first_name, COUNT(Bookings.booking_id) AS booking_count\nFROM Customers\nLEFT JOIN Bookings ON Customers.customer_id = Bookings.customer_id\nGROUP BY Customers.customer_id, Customers.first_name;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT Customers.customer_id, Customers.first_name, COUNT(Bookings.booking_id) AS booking_count\nFROM Customers\nLEFT JOIN Bookings ON Customers.customer_id = Bookings.customer_id\nGROUP BY Customers.customer_id, Customers.first_name;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1962",
        "c_low": "SELECT customer_id, MAX(amount_paid) AS max_amount_paid\nFROM Payments\nGROUP BY customer_id;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT customer_id, MAX(amount_paid) AS max_amount_paid\nFROM Payments\nGROUP BY customer_id;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT customer_id, MAX(amount_paid) AS max_amount_paid\nFROM Payments\nGROUP BY customer_id;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT customer_id, MAX(amount_paid) AS max_amount_paid\nFROM Payments\nGROUP BY customer_id;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT customer_id, MAX(amount_paid) AS max_amount_paid\nFROM Payments\nGROUP BY customer_id;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT customer_id, MAX(amount_paid) AS max_amount_paid\nFROM Payments\nGROUP BY customer_id;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1963",
        "c_low": "SELECT booking_id, amount_of_refund FROM Payments WHERE booking_id IN (SELECT booking_id FROM Payments GROUP BY booking_id ORDER BY COUNT(payment_id) DESC LIMIT 1)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the descriptions of products that have been booked, specifically filtering for those bookings where the total amount for the booked products matches a specified value. The placeholder in the WHERE clause represents the booked amount.\",\n        \"virtual_table\": \"SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.booked_amount  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT b.booking_id, SUM(p.amount_paid) AS total_refund\nFROM Payments p\nJOIN Bookings b ON p.booking_id = b.booking_id\nGROUP BY b.booking_id\nORDER BY COUNT(p.payment_id) DESC\nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT b.booking_id, SUM(p.amount_paid) AS total_refund\nFROM Payments p\nJOIN Bookings b ON p.booking_id = b.booking_id\nGROUP BY b.booking_id\nORDER BY COUNT(p.payment_id) DESC\nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT b.booking_id, SUM(p.amount_paid) AS total_refund\nFROM Payments p\nJOIN Bookings b ON p.booking_id = b.booking_id\nGROUP BY b.booking_id\nORDER BY COUNT(p.payment_id) DESC\nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT booking_id, amount_of_refund FROM Payments WHERE booking_id IN (SELECT booking_id FROM Payments GROUP BY booking_id ORDER BY COUNT(payment_id) DESC LIMIT 1)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the descriptions of products that have been booked, specifically filtering for those bookings where the total amount for the booked products matches a specified value. The placeholder in the WHERE clause represents the booked amount.\",\n        \"virtual_table\": \"SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.booked_amount  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT b.booking_id, SUM(p.amount_paid) AS total_refund\nFROM Payments p\nJOIN Bookings b ON p.booking_id = b.booking_id\nGROUP BY b.booking_id\nORDER BY COUNT(p.payment_id) DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1964",
        "c_low": "SELECT product_id FROM Products_Booked WHERE booked_count = 3;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the descriptions of products that have been booked, specifically filtering for those bookings where the total amount for the booked products matches a specified value. The placeholder in the WHERE clause represents the booked amount.\",\n        \"virtual_table\": \"SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.booked_amount  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of products available for hire from the 'Products_for_Hire' table, based on their availability status recorded in the 'View_Product_Availability' table. The placeholder in the WHERE clause represents the availability indicator (yes/no).\",\n        \"virtual_table\": \"SELECT T2.product_name FROM view_product_availability AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.available_yn  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT product_id FROM Products_Booked WHERE booked_count = 3;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the start and end dates of bookings for a specific product from the 'Products_for_Hire' table. The placeholder in the WHERE clause represents the name of the product being queried.\",\n        \"virtual_table\": \"SELECT T3.booking_start_date ,   T3.booking_end_date FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id  =  T2.product_id JOIN bookings AS T3 ON T2.booking_id  =  T3.booking_id WHERE T1.product_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT product_id FROM Products_Booked WHERE booked_count = 3;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT product_id FROM Products_Booked WHERE booked_count = 3;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT product_id FROM Products_Booked WHERE booked_count = 3;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the descriptions of products that have been booked, specifically filtering for those bookings where the total amount for the booked products matches a specified value. The placeholder in the WHERE clause represents the booked amount.\",\n        \"virtual_table\": \"SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.booked_amount  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of products available for hire from the 'Products_for_Hire' table, based on their availability status recorded in the 'View_Product_Availability' table. The placeholder in the WHERE clause represents the availability indicator (yes/no).\",\n        \"virtual_table\": \"SELECT T2.product_name FROM view_product_availability AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.available_yn  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT product_id FROM Products_Booked WHERE booked_count = 3;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the start and end dates of bookings for a specific product from the 'Products_for_Hire' table. The placeholder in the WHERE clause represents the name of the product being queried.\",\n        \"virtual_table\": \"SELECT T3.booking_start_date ,   T3.booking_end_date FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id  =  T2.product_id JOIN bookings AS T3 ON T2.booking_id  =  T3.booking_id WHERE T1.product_name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1969",
        "c_low": "SELECT first_name, last_name, gender_mf FROM Customers WHERE good_or_bad_customer = 1 ORDER BY last_name;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT first_name, last_name, gender_mf FROM Customers WHERE good_or_bad_customer = 1 ORDER BY last_name;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT first_name, last_name, gender_mf FROM Customers WHERE good_or_bad_customer = 1 ORDER BY last_name;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT first_name, last_name, gender_mf FROM Customers WHERE good_or_bad_customer = 1 ORDER BY last_name;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT first_name, last_name, gender_mf FROM Customers WHERE good_or_bad_customer = 1 ORDER BY last_name;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT first_name, last_name, gender_mf FROM Customers WHERE good_or_bad_customer = 1 ORDER BY last_name;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1974",
        "c_low": "SELECT COUNT(DISTINCT product_id) AS never_booked_products\nFROM Products_for_Hire\nWHERE product_id NOT IN (\n    SELECT product_id\n    FROM Products_Booked\n    WHERE booked_amount > 200\n);",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the descriptions of products that have been booked, specifically filtering for those bookings where the total amount for the booked products matches a specified value. The placeholder in the WHERE clause represents the booked amount.\",\n        \"virtual_table\": \"SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.booked_amount  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT COUNT(DISTINCT pfh.product_id) AS never_booked_products\nFROM Products_for_Hire pfh\nLEFT JOIN Products_Booked pb ON pfh.product_id = pb.product_id\nWHERE pb.booking_id IS NULL OR pb.booked_amount <= 200;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT COUNT(DISTINCT pfh.product_id) AS never_booked_products\nFROM Products_for_Hire pfh\nLEFT JOIN Products_Booked pb ON pfh.product_id = pb.product_id\nWHERE pb.booking_id IS NULL OR pb.booked_amount <= 200;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT COUNT(DISTINCT pfh.product_id) AS never_booked_products\nFROM Products_for_Hire pfh\nLEFT JOIN Products_Booked pb ON pfh.product_id = pb.product_id\nWHERE pb.booking_id IS NULL OR pb.booked_amount <= 200;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT COUNT(DISTINCT product_id) AS never_booked_products\nFROM Products_for_Hire\nWHERE product_id NOT IN (\n    SELECT product_id\n    FROM Products_Booked\n    WHERE booked_amount > 200\n);",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the descriptions of products that have been booked, specifically filtering for those bookings where the total amount for the booked products matches a specified value. The placeholder in the WHERE clause represents the booked amount.\",\n        \"virtual_table\": \"SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.booked_amount  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(DISTINCT pfh.product_id) AS never_booked_products\nFROM Products_for_Hire pfh\nLEFT JOIN Products_Booked pb ON pfh.product_id = pb.product_id\nWHERE pb.booking_id IS NULL OR pb.booked_amount <= 200;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1975",
        "c_low": "SELECT DISTINCT dc.coupon_amount \nFROM Discount_Coupons dc \nJOIN Customers c ON dc.coupon_id = c.coupon_id \nWHERE c.good_or_bad_customer IN (0, 1);",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT DISTINCT dc.coupon_amount \nFROM Discount_Coupons dc \nJOIN Customers c ON dc.coupon_id = c.coupon_id \nWHERE c.good_or_bad_customer IN (0, 1);",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT DISTINCT dc.coupon_amount \nFROM Discount_Coupons dc \nJOIN Customers c ON dc.coupon_id = c.coupon_id \nWHERE c.good_or_bad_customer IN (0, 1);",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT DISTINCT dc.coupon_amount \nFROM Discount_Coupons dc \nJOIN Customers c ON dc.coupon_id = c.coupon_id \nWHERE c.good_or_bad_customer IN (0, 1);",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT DISTINCT dc.coupon_amount \nFROM Discount_Coupons dc \nJOIN Customers c ON dc.coupon_id = c.coupon_id \nWHERE c.good_or_bad_customer IN (0, 1);",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT DISTINCT dc.coupon_amount \nFROM Discount_Coupons dc \nJOIN Customers c ON dc.coupon_id = c.coupon_id \nWHERE c.good_or_bad_customer IN (0, 1);",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1985",
        "c_low": "SELECT Carrier, COUNT(*) as Frequency FROM phone GROUP BY Carrier ORDER BY Frequency DESC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of mobile carriers from the 'phone' table, ordered by the retail price of the phones in descending order. The placeholder in the LIMIT clause indicates the maximum number of carriers to be returned.\",\n        \"virtual_table\": \"SELECT Carrier FROM phone ORDER BY Price DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT Carrier, COUNT(*) as Frequency FROM phone GROUP BY Carrier ORDER BY Frequency DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct mobile carriers from the 'phone' table for phone models that have more memory than a specified amount in gigabytes. The placeholder in the WHERE clause represents the minimum memory requirement.\",\n        \"virtual_table\": \"SELECT DISTINCT Carrier FROM phone WHERE Memory_in_G  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of phone models from the 'phone' table that are associated with specific mobile carriers. The placeholders in the WHERE clause represent the names of the carriers being queried.\",\n        \"virtual_table\": \"SELECT Name FROM phone WHERE Carrier  =  [PLACEHOLDER-TYPE:STRING] OR Carrier  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of phone models available in markets that have a specified number of shops. The placeholders in the WHERE clause represent the minimum number of shops required for the market.\",\n        \"virtual_table\": \"SELECT T3.Name FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID WHERE T2.Num_of_shops  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT Carrier, COUNT(*) as Carrier_Count FROM phone GROUP BY Carrier ORDER BY Carrier_Count DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies the mobile carriers that offer phone models with memory capacities both below and above specified thresholds. The placeholders represent the memory limits in gigabytes.\",\n        \"virtual_table\": \"SELECT Carrier FROM phone WHERE Memory_in_G  <  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of phone models that have a total stock greater than a specified number across all markets. The placeholder in the HAVING clause represents the minimum stock quantity required for the phone models to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name HAVING sum(T1.Num_of_stock)  >=  [PLACEHOLDER-TYPE:NUMBER] ORDER BY sum(T1.Num_of_stock) DESC\"\n    }\n}\n",
        "t_1": "SELECT Carrier, COUNT(*) as Frequency FROM phone GROUP BY Carrier ORDER BY Frequency DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of mobile carriers from the 'phone' table, ordered by the retail price of the phones in descending order. The placeholder in the LIMIT clause indicates the maximum number of carriers to be returned.\",\n        \"virtual_table\": \"SELECT Carrier FROM phone ORDER BY Price DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the distinct mobile carriers from the 'phone' table for phone models that have more memory than a specified amount in gigabytes. The placeholder in the WHERE clause represents the minimum memory requirement.\",\n        \"virtual_table\": \"SELECT DISTINCT Carrier FROM phone WHERE Memory_in_G  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of phone models from the 'phone' table that are associated with specific mobile carriers. The placeholders in the WHERE clause represent the names of the carriers being queried.\",\n        \"virtual_table\": \"SELECT Name FROM phone WHERE Carrier  =  [PLACEHOLDER-TYPE:STRING] OR Carrier  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT Carrier, COUNT(*) as Frequency FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID GROUP BY Carrier ORDER BY Frequency DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of phone models that have a total stock greater than a specified number across all markets. The placeholder in the HAVING clause represents the minimum stock quantity required for the phone models to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name HAVING sum(T1.Num_of_stock)  >=  [PLACEHOLDER-TYPE:NUMBER] ORDER BY sum(T1.Num_of_stock) DESC\"\n    }\n}\n",
        "t_3+": "SELECT Carrier, COUNT(*) as Frequency FROM phone GROUP BY Carrier ORDER BY Frequency DESC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of phone models available in markets that have a specified number of shops. The placeholders in the WHERE clause represent the minimum number of shops required for the market.\",\n        \"virtual_table\": \"SELECT T3.Name FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID WHERE T2.Num_of_shops  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1993",
        "c_low": "SELECT COUNT(DISTINCT T2.Company_ID) FROM station_company AS T1 JOIN company AS T2 ON T1.Company_ID = T2.Company_ID;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the geographical locations of gas stations that are associated with companies having a market value exceeding a specified amount. The placeholders in the WHERE clause represent the market value threshold.\",\n        \"virtual_table\": \"SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of gas stations that were opened within a specific range of years. The placeholders in the WHERE clause represent the start and end years for filtering the gas stations based on their opening year.\",\n        \"virtual_table\": \"SELECT count(*) FROM gas_station WHERE open_year BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of gas station managers from the 'gas_station' table who are associated with a specific company. The placeholder in the WHERE clause represents the name of the company.\",\n        \"virtual_table\": \"SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT COUNT(DISTINCT Company_ID) FROM company;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of gas stations associated with each company from the 'company' table. The placeholder in the SELECT statement represents the company name, and the count reflects the number of gas stations linked to that company.\",\n        \"virtual_table\": \"SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of companies based on their headquarters locations from the 'company' table. The query groups the results by the headquarters, allowing users to see how many companies are located in each specific area.\",\n        \"virtual_table\": \"SELECT headquarters ,  count(*) FROM company GROUP BY headquarters\"\n    }\n}\n",
        "c_high": "SELECT COUNT(DISTINCT Company_ID) AS Number_of_Gas_Companies FROM company WHERE Company_ID IN (SELECT Company_ID FROM station_company)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and primary industries of companies from the 'company' table that do not have any associated gas stations in the 'station_company' table. The subquery in the WHERE clause filters out companies that are linked to any gas stations.\",\n        \"virtual_table\": \"SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the headquarters locations of companies from the 'company' table that operate in a specific industry. The results are grouped by headquarters, and only those with a count of companies greater than or equal to a specified number are included. The placeholders in the WHERE clause represent the industry type and the minimum count of companies.\",\n        \"virtual_table\": \"SELECT headquarters FROM company WHERE main_industry  =  [PLACEHOLDER-TYPE:STRING] GROUP BY headquarters HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT COUNT(DISTINCT Company_ID) FROM station_company;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of gas stations that were opened within a specific range of years. The placeholders in the WHERE clause represent the start and end years for filtering the gas stations based on their opening year.\",\n        \"virtual_table\": \"SELECT count(*) FROM gas_station WHERE open_year BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of companies based on their headquarters locations from the 'company' table. The query groups the results by the headquarters, allowing users to see how many companies are located in each specific area.\",\n        \"virtual_table\": \"SELECT headquarters ,  count(*) FROM company GROUP BY headquarters\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the headquarters locations of companies from the 'company' table that operate in a specific industry. The results are grouped by headquarters, and only those with a count of companies greater than or equal to a specified number are included. The placeholders in the WHERE clause represent the industry type and the minimum count of companies.\",\n        \"virtual_table\": \"SELECT headquarters FROM company WHERE main_industry  =  [PLACEHOLDER-TYPE:STRING] GROUP BY headquarters HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT COUNT(DISTINCT T2.Company_ID) FROM station_company AS T1 JOIN company AS T2 ON T1.Company_ID = T2.Company_ID;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of gas stations associated with each company from the 'company' table. The placeholder in the SELECT statement represents the company name, and the count reflects the number of gas stations linked to that company.\",\n        \"virtual_table\": \"SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and primary industries of companies from the 'company' table that do not have any associated gas stations in the 'station_company' table. The subquery in the WHERE clause filters out companies that are linked to any gas stations.\",\n        \"virtual_table\": \"SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(DISTINCT T2.Company_ID) AS Number_of_Gas_Companies FROM station_company AS T1 JOIN company AS T2 ON T1.Company_ID = T2.Company_ID;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the geographical locations of gas stations that are associated with companies having a market value exceeding a specified amount. The placeholders in the WHERE clause represent the market value threshold.\",\n        \"virtual_table\": \"SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of gas station managers from the 'gas_station' table who are associated with a specific company. The placeholder in the WHERE clause represents the name of the company.\",\n        \"virtual_table\": \"SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.1998",
        "c_low": "SELECT Company, Main_Industry FROM company WHERE Headquarters != 'United States';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Company, Main_Industry FROM company WHERE Headquarters != 'United States'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and primary industries of companies from the 'company' table that do not have their headquarters in a specified location. The placeholder in the WHERE clause represents the headquarters' location.\",\n        \"virtual_table\": \"SELECT company ,  main_industry FROM company WHERE headquarters != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of companies based on their headquarters locations from the 'company' table. The query groups the results by the headquarters, allowing users to see how many companies are located in each specific area.\",\n        \"virtual_table\": \"SELECT headquarters ,  count(*) FROM company GROUP BY headquarters\"\n    }\n}\n",
        "c_high": "SELECT Company, Main_Industry FROM company WHERE Headquarters != 'United States'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of companies in each primary industry from the 'company' table. It groups the results by the 'main_industry' column and orders them by the total market value in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of industries to display.\",\n        \"virtual_table\": \"SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and primary industries of companies from the 'company' table that do not have any associated gas stations in the 'station_company' table. The subquery in the WHERE clause filters out companies that are linked to any gas stations.\",\n        \"virtual_table\": \"SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the headquarters locations of companies from the 'company' table that operate in a specific industry. The results are grouped by headquarters, and only those with a count of companies greater than or equal to a specified number are included. The placeholders in the WHERE clause represent the industry type and the minimum count of companies.\",\n        \"virtual_table\": \"SELECT headquarters FROM company WHERE main_industry  =  [PLACEHOLDER-TYPE:STRING] GROUP BY headquarters HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Company, Main_Industry FROM company WHERE Headquarters != 'United States'",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and primary industries of companies from the 'company' table that do not have their headquarters in a specified location. The placeholder in the WHERE clause represents the headquarters' location.\",\n        \"virtual_table\": \"SELECT company ,  main_industry FROM company WHERE headquarters != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of companies based on their headquarters locations from the 'company' table. The query groups the results by the headquarters, allowing users to see how many companies are located in each specific area.\",\n        \"virtual_table\": \"SELECT headquarters ,  count(*) FROM company GROUP BY headquarters\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the number of companies in each primary industry from the 'company' table. It groups the results by the 'main_industry' column and orders them by the total market value in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of industries to display.\",\n        \"virtual_table\": \"SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Company, Main_Industry FROM company WHERE Headquarters NOT LIKE '%United States%';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and primary industries of companies from the 'company' table that do not have any associated gas stations in the 'station_company' table. The subquery in the WHERE clause filters out companies that are linked to any gas stations.\",\n        \"virtual_table\": \"SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)\"\n    }\n}\n",
        "t_3+": "SELECT Company, Main_Industry FROM company WHERE Headquarters != 'United States';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2010",
        "c_low": "SELECT Main_Industry, COUNT(Company_ID) AS Total_Companies\nFROM company\nWHERE Market_Value = (\n    SELECT MAX(Market_Value)\n    FROM company\n)\nGROUP BY Main_Industry;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the geographical locations of gas stations that are associated with companies having a market value exceeding a specified amount. The placeholders in the WHERE clause represent the market value threshold.\",\n        \"virtual_table\": \"SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT main_industry, COUNT(*) AS total_companies \nFROM company \nWHERE Company_ID IN (\n    SELECT Company_ID \n    FROM company \n    WHERE Market_Value = (\n        SELECT MAX(Market_Value) \n        FROM company\n    )\n) \nGROUP BY main_industry;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of companies based on their headquarters locations from the 'company' table. The query groups the results by the headquarters, allowing users to see how many companies are located in each specific area.\",\n        \"virtual_table\": \"SELECT headquarters ,  count(*) FROM company GROUP BY headquarters\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names and primary industries of companies from the 'company' table that do not have their headquarters in a specified location. The placeholder in the WHERE clause represents the headquarters' location.\",\n        \"virtual_table\": \"SELECT company ,  main_industry FROM company WHERE headquarters != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT main_industry, COUNT(*) AS total_companies \nFROM company \nGROUP BY main_industry \nORDER BY SUM(market_value) DESC \nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of companies in each primary industry from the 'company' table. It groups the results by the 'main_industry' column and orders them by the total market value in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of industries to display.\",\n        \"virtual_table\": \"SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the rank, name, and market value of companies from the 'company' table that operate in a specific industry. The placeholder in the WHERE clause represents the industry type, and the results are ordered by total sales and profits in billions.\",\n        \"virtual_table\": \"SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  [PLACEHOLDER-TYPE:STRING] ORDER BY sales_billion ,  profits_billion\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the headquarters locations of companies from the 'company' table that operate in a specific industry. The results are grouped by headquarters, and only those with a count of companies greater than or equal to a specified number are included. The placeholders in the WHERE clause represent the industry type and the minimum count of companies.\",\n        \"virtual_table\": \"SELECT headquarters FROM company WHERE main_industry  =  [PLACEHOLDER-TYPE:STRING] GROUP BY headquarters HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT main_industry, COUNT(*) AS total_companies \nFROM company \nWHERE main_industry IN (\n    SELECT main_industry \n    FROM company \n    GROUP BY main_industry \n    ORDER BY SUM(market_value) DESC \n    LIMIT 1\n) \nGROUP BY main_industry;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of companies in each primary industry from the 'company' table. It groups the results by the 'main_industry' column and orders them by the total market value in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of industries to display.\",\n        \"virtual_table\": \"SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the rank, name, and market value of companies from the 'company' table that operate in a specific industry. The placeholder in the WHERE clause represents the industry type, and the results are ordered by total sales and profits in billions.\",\n        \"virtual_table\": \"SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  [PLACEHOLDER-TYPE:STRING] ORDER BY sales_billion ,  profits_billion\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the number of companies based on their headquarters locations from the 'company' table. The query groups the results by the headquarters, allowing users to see how many companies are located in each specific area.\",\n        \"virtual_table\": \"SELECT headquarters ,  count(*) FROM company GROUP BY headquarters\"\n    }\n}\n",
        "t_2": "SELECT Main_Industry, COUNT(Company_ID) AS Total_Companies\nFROM company\nWHERE Market_Value = (\n    SELECT MAX(Market_Value)\n    FROM company\n)\nGROUP BY Main_Industry;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT Main_Industry, COUNT(Company_ID) AS Total_Companies \nFROM company \nWHERE Market_Value = (SELECT MAX(Market_Value) FROM company) \nGROUP BY Main_Industry;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the geographical locations of gas stations that are associated with companies having a market value exceeding a specified amount. The placeholders in the WHERE clause represent the market value threshold.\",\n        \"virtual_table\": \"SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2019",
        "c_low": "SELECT DISTINCT c.Headquarters \nFROM company AS c \nWHERE c.Main_Industry IN ('Banking', 'Oil and Gas') \nAND c.Company_ID IN (\n    SELECT sc.Company_ID \n    FROM station_company AS sc \n    JOIN gas_station AS gs ON sc.Station_ID = gs.Station_ID\n)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the geographical locations of gas stations that are associated with companies having a market value exceeding a specified amount. The placeholders in the WHERE clause represent the market value threshold.\",\n        \"virtual_table\": \"SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of gas station managers from the 'gas_station' table who are associated with a specific company. The placeholder in the WHERE clause represents the name of the company.\",\n        \"virtual_table\": \"SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT headquarters FROM company WHERE main_industry IN ('Banking', 'Oil and Gas') GROUP BY headquarters HAVING COUNT(DISTINCT main_industry) = 2;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of companies based on their headquarters locations from the 'company' table. The query groups the results by the headquarters, allowing users to see how many companies are located in each specific area.\",\n        \"virtual_table\": \"SELECT headquarters ,  count(*) FROM company GROUP BY headquarters\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names and primary industries of companies from the 'company' table that do not have their headquarters in a specified location. The placeholder in the WHERE clause represents the headquarters' location.\",\n        \"virtual_table\": \"SELECT company ,  main_industry FROM company WHERE headquarters != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of gas stations associated with each company from the 'company' table. The placeholder in the SELECT statement represents the company name, and the count reflects the number of gas stations linked to that company.\",\n        \"virtual_table\": \"SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id\"\n    }\n}\n",
        "c_high": "SELECT Headquarters FROM company WHERE Main_Industry IN ('Banking', 'Oil and Gas') GROUP BY Headquarters HAVING COUNT(DISTINCT Main_Industry) = 2;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the headquarters locations of companies from the 'company' table that operate in a specific industry. The results are grouped by headquarters, and only those with a count of companies greater than or equal to a specified number are included. The placeholders in the WHERE clause represent the industry type and the minimum count of companies.\",\n        \"virtual_table\": \"SELECT headquarters FROM company WHERE main_industry  =  [PLACEHOLDER-TYPE:STRING] GROUP BY headquarters HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and primary industries of companies from the 'company' table that do not have any associated gas stations in the 'station_company' table. The subquery in the WHERE clause filters out companies that are linked to any gas stations.\",\n        \"virtual_table\": \"SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the number of companies in each primary industry from the 'company' table. It groups the results by the 'main_industry' column and orders them by the total market value in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of industries to display.\",\n        \"virtual_table\": \"SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT headquarters FROM company WHERE main_industry IN ('Banking', 'Oil and Gas') GROUP BY headquarters HAVING count(DISTINCT main_industry) = 2",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the headquarters locations of companies from the 'company' table that operate in a specific industry. The results are grouped by headquarters, and only those with a count of companies greater than or equal to a specified number are included. The placeholders in the WHERE clause represent the industry type and the minimum count of companies.\",\n        \"virtual_table\": \"SELECT headquarters FROM company WHERE main_industry  =  [PLACEHOLDER-TYPE:STRING] GROUP BY headquarters HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of companies based on their headquarters locations from the 'company' table. The query groups the results by the headquarters, allowing users to see how many companies are located in each specific area.\",\n        \"virtual_table\": \"SELECT headquarters ,  count(*) FROM company GROUP BY headquarters\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names and primary industries of companies from the 'company' table that do not have their headquarters in a specified location. The placeholder in the WHERE clause represents the headquarters' location.\",\n        \"virtual_table\": \"SELECT company ,  main_industry FROM company WHERE headquarters != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT c.Headquarters \nFROM company c \nWHERE c.Main_Industry IN ('Banking', 'Oil and Gas') \nAND c.Company_ID IN (\n    SELECT sc.Company_ID \n    FROM station_company sc \n    GROUP BY sc.Company_ID \n    HAVING COUNT(DISTINCT c.Main_Industry) = 2\n)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and primary industries of companies from the 'company' table that do not have any associated gas stations in the 'station_company' table. The subquery in the WHERE clause filters out companies that are linked to any gas stations.\",\n        \"virtual_table\": \"SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of gas stations associated with each company from the 'company' table. The placeholder in the SELECT statement represents the company name, and the count reflects the number of gas stations linked to that company.\",\n        \"virtual_table\": \"SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT c.Headquarters \nFROM company AS c \nWHERE c.Main_Industry IN ('Banking', 'Oil and Gas') \nAND c.Company_ID IN (\n    SELECT sc.Company_ID \n    FROM station_company AS sc \n    JOIN gas_station AS gs ON sc.Station_ID = gs.Station_ID\n)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the geographical locations of gas stations that are associated with companies having a market value exceeding a specified amount. The placeholders in the WHERE clause represent the market value threshold.\",\n        \"virtual_table\": \"SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of gas station managers from the 'gas_station' table who are associated with a specific company. The placeholder in the WHERE clause represents the name of the company.\",\n        \"virtual_table\": \"SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2020",
        "c_low": "SELECT DISTINCT g.Headquarters \nFROM company c \nJOIN station_company sc ON c.Company_ID = sc.Company_ID \nJOIN gas_station g ON sc.Station_ID = g.Station_ID \nWHERE c.Main_Industry IN ('banking', 'oil and gas') \nGROUP BY g.Headquarters \nHAVING COUNT(DISTINCT c.Main_Industry) = 2;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the geographical locations of gas stations that are associated with companies having a market value exceeding a specified amount. The placeholders in the WHERE clause represent the market value threshold.\",\n        \"virtual_table\": \"SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of gas station managers from the 'gas_station' table who are associated with a specific company. The placeholder in the WHERE clause represents the name of the company.\",\n        \"virtual_table\": \"SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT c.Headquarters \nFROM company c \nWHERE c.Main_Industry IN ('banking', 'oil and gas') \nGROUP BY c.Headquarters \nHAVING COUNT(DISTINCT c.Main_Industry) = 2;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of companies based on their headquarters locations from the 'company' table. The query groups the results by the headquarters, allowing users to see how many companies are located in each specific area.\",\n        \"virtual_table\": \"SELECT headquarters ,  count(*) FROM company GROUP BY headquarters\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names and primary industries of companies from the 'company' table that do not have their headquarters in a specified location. The placeholder in the WHERE clause represents the headquarters' location.\",\n        \"virtual_table\": \"SELECT company ,  main_industry FROM company WHERE headquarters != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of gas stations associated with each company from the 'company' table. The placeholder in the SELECT statement represents the company name, and the count reflects the number of gas stations linked to that company.\",\n        \"virtual_table\": \"SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id\"\n    }\n}\n",
        "c_high": "SELECT headquarters FROM company WHERE main_industry IN ('banking', 'oil and gas') GROUP BY headquarters HAVING COUNT(DISTINCT main_industry) = 2",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the headquarters locations of companies from the 'company' table that operate in a specific industry. The results are grouped by headquarters, and only those with a count of companies greater than or equal to a specified number are included. The placeholders in the WHERE clause represent the industry type and the minimum count of companies.\",\n        \"virtual_table\": \"SELECT headquarters FROM company WHERE main_industry  =  [PLACEHOLDER-TYPE:STRING] GROUP BY headquarters HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and primary industries of companies from the 'company' table that do not have any associated gas stations in the 'station_company' table. The subquery in the WHERE clause filters out companies that are linked to any gas stations.\",\n        \"virtual_table\": \"SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)\"\n    }\n}\n",
        "t_1": "SELECT headquarters FROM company WHERE main_industry IN ('banking', 'oil and gas') GROUP BY headquarters HAVING COUNT(DISTINCT main_industry) = 2",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of companies based on their headquarters locations from the 'company' table. The query groups the results by the headquarters, allowing users to see how many companies are located in each specific area.\",\n        \"virtual_table\": \"SELECT headquarters ,  count(*) FROM company GROUP BY headquarters\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the headquarters locations of companies from the 'company' table that operate in a specific industry. The results are grouped by headquarters, and only those with a count of companies greater than or equal to a specified number are included. The placeholders in the WHERE clause represent the industry type and the minimum count of companies.\",\n        \"virtual_table\": \"SELECT headquarters FROM company WHERE main_industry  =  [PLACEHOLDER-TYPE:STRING] GROUP BY headquarters HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names and primary industries of companies from the 'company' table that do not have their headquarters in a specified location. The placeholder in the WHERE clause represents the headquarters' location.\",\n        \"virtual_table\": \"SELECT company ,  main_industry FROM company WHERE headquarters != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT c.Headquarters \nFROM company c \nWHERE c.Main_Industry IN ('banking', 'oil and gas') \nAND c.Company_ID IN (\n    SELECT sc.Company_ID \n    FROM station_company sc \n    GROUP BY sc.Company_ID \n    HAVING COUNT(DISTINCT sc.Station_ID) > 0\n)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and primary industries of companies from the 'company' table that do not have any associated gas stations in the 'station_company' table. The subquery in the WHERE clause filters out companies that are linked to any gas stations.\",\n        \"virtual_table\": \"SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of gas stations associated with each company from the 'company' table. The placeholder in the SELECT statement represents the company name, and the count reflects the number of gas stations linked to that company.\",\n        \"virtual_table\": \"SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT g.Headquarters \nFROM company c \nJOIN station_company sc ON c.Company_ID = sc.Company_ID \nJOIN gas_station g ON sc.Station_ID = g.Station_ID \nWHERE c.Main_Industry IN ('banking', 'oil and gas') \nGROUP BY g.Headquarters \nHAVING COUNT(DISTINCT c.Main_Industry) = 2;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the geographical locations of gas stations that are associated with companies having a market value exceeding a specified amount. The placeholders in the WHERE clause represent the market value threshold.\",\n        \"virtual_table\": \"SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of gas station managers from the 'gas_station' table who are associated with a specific company. The placeholder in the WHERE clause represents the name of the company.\",\n        \"virtual_table\": \"SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2021",
        "c_low": "SELECT DISTINCT gas_station.Location, gas_station.Manager_Name, gas_station.Vice_Manager_Name, gas_station.Representative_Name \nFROM gas_station \nLEFT JOIN station_company ON gas_station.Station_ID = station_company.Station_ID \nLEFT JOIN company ON station_company.Company_ID = company.Company_ID \nWHERE company.Main_Industry != 'banking' OR company.Main_Industry IS NULL;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT headquarters FROM company WHERE Main_Industry != 'banking'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and primary industries of companies from the 'company' table that do not have their headquarters in a specified location. The placeholder in the WHERE clause represents the headquarters' location.\",\n        \"virtual_table\": \"SELECT company ,  main_industry FROM company WHERE headquarters != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of companies based on their headquarters locations from the 'company' table. The query groups the results by the headquarters, allowing users to see how many companies are located in each specific area.\",\n        \"virtual_table\": \"SELECT headquarters ,  count(*) FROM company GROUP BY headquarters\"\n    }\n}\n",
        "c_high": "SELECT headquarters FROM company WHERE main_industry != 'banking' AND company_id NOT IN (SELECT company_id FROM station_company)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the headquarters locations of companies from the 'company' table that operate in a specific industry. The results are grouped by headquarters, and only those with a count of companies greater than or equal to a specified number are included. The placeholders in the WHERE clause represent the industry type and the minimum count of companies.\",\n        \"virtual_table\": \"SELECT headquarters FROM company WHERE main_industry  =  [PLACEHOLDER-TYPE:STRING] GROUP BY headquarters HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and primary industries of companies from the 'company' table that do not have any associated gas stations in the 'station_company' table. The subquery in the WHERE clause filters out companies that are linked to any gas stations.\",\n        \"virtual_table\": \"SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)\"\n    }\n}\n",
        "t_1": "SELECT headquarters FROM company WHERE main_industry != 'banking'",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and primary industries of companies from the 'company' table that do not have their headquarters in a specified location. The placeholder in the WHERE clause represents the headquarters' location.\",\n        \"virtual_table\": \"SELECT company ,  main_industry FROM company WHERE headquarters != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the headquarters locations of companies from the 'company' table that operate in a specific industry. The results are grouped by headquarters, and only those with a count of companies greater than or equal to a specified number are included. The placeholders in the WHERE clause represent the industry type and the minimum count of companies.\",\n        \"virtual_table\": \"SELECT headquarters FROM company WHERE main_industry  =  [PLACEHOLDER-TYPE:STRING] GROUP BY headquarters HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the number of companies based on their headquarters locations from the 'company' table. The query groups the results by the headquarters, allowing users to see how many companies are located in each specific area.\",\n        \"virtual_table\": \"SELECT headquarters ,  count(*) FROM company GROUP BY headquarters\"\n    }\n}\n",
        "t_2": "SELECT Headquarters FROM company WHERE Company_ID NOT IN (SELECT Company_ID FROM station_company) AND Main_Industry != 'banking';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and primary industries of companies from the 'company' table that do not have any associated gas stations in the 'station_company' table. The subquery in the WHERE clause filters out companies that are linked to any gas stations.\",\n        \"virtual_table\": \"SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT gas_station.Location \nFROM gas_station \nLEFT JOIN station_company ON gas_station.Station_ID = station_company.Station_ID \nLEFT JOIN company ON station_company.Company_ID = company.Company_ID \nWHERE company.Main_Industry != 'banking' OR company.Main_Industry IS NULL;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2022",
        "c_low": "SELECT DISTINCT gas_station.Location \nFROM gas_station \nLEFT JOIN station_company ON gas_station.Station_ID = station_company.Station_ID \nLEFT JOIN company ON station_company.Company_ID = company.Company_ID \nWHERE company.Main_Industry != 'Banking' OR company.Company_ID IS NULL;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT headquarters FROM company WHERE Main_Industry != 'Banking'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and primary industries of companies from the 'company' table that do not have their headquarters in a specified location. The placeholder in the WHERE clause represents the headquarters' location.\",\n        \"virtual_table\": \"SELECT company ,  main_industry FROM company WHERE headquarters != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of companies based on their headquarters locations from the 'company' table. The query groups the results by the headquarters, allowing users to see how many companies are located in each specific area.\",\n        \"virtual_table\": \"SELECT headquarters ,  count(*) FROM company GROUP BY headquarters\"\n    }\n}\n",
        "c_high": "SELECT headquarters FROM company WHERE main_industry = 'banking' AND company_id NOT IN (SELECT company_id FROM station_company)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the headquarters locations of companies from the 'company' table that operate in a specific industry. The results are grouped by headquarters, and only those with a count of companies greater than or equal to a specified number are included. The placeholders in the WHERE clause represent the industry type and the minimum count of companies.\",\n        \"virtual_table\": \"SELECT headquarters FROM company WHERE main_industry  =  [PLACEHOLDER-TYPE:STRING] GROUP BY headquarters HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and primary industries of companies from the 'company' table that do not have any associated gas stations in the 'station_company' table. The subquery in the WHERE clause filters out companies that are linked to any gas stations.\",\n        \"virtual_table\": \"SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT headquarters FROM company WHERE main_industry != 'banking'",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and primary industries of companies from the 'company' table that do not have their headquarters in a specified location. The placeholder in the WHERE clause represents the headquarters' location.\",\n        \"virtual_table\": \"SELECT company ,  main_industry FROM company WHERE headquarters != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the headquarters locations of companies from the 'company' table that operate in a specific industry. The results are grouped by headquarters, and only those with a count of companies greater than or equal to a specified number are included. The placeholders in the WHERE clause represent the industry type and the minimum count of companies.\",\n        \"virtual_table\": \"SELECT headquarters FROM company WHERE main_industry  =  [PLACEHOLDER-TYPE:STRING] GROUP BY headquarters HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the number of companies based on their headquarters locations from the 'company' table. The query groups the results by the headquarters, allowing users to see how many companies are located in each specific area.\",\n        \"virtual_table\": \"SELECT headquarters ,  count(*) FROM company GROUP BY headquarters\"\n    }\n}\n",
        "t_2": "SELECT Headquarters FROM company WHERE Company_ID NOT IN (SELECT Company_ID FROM station_company) AND Main_Industry = 'Banking'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and primary industries of companies from the 'company' table that do not have any associated gas stations in the 'station_company' table. The subquery in the WHERE clause filters out companies that are linked to any gas stations.\",\n        \"virtual_table\": \"SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT gas_station.Location FROM gas_station LEFT JOIN station_company ON gas_station.Station_ID = station_company.Station_ID LEFT JOIN company ON station_company.Company_ID = company.Company_ID WHERE company.Main_Industry != 'Banking' OR company.Company_ID IS NULL;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2024",
        "c_low": "SELECT T2.Company_ID, T2.Company, COUNT(T1.Station_ID) AS Number_of_Gas_Stations \nFROM station_company AS T1 \nJOIN company AS T2 ON T1.Company_ID = T2.Company_ID \nGROUP BY T2.Company_ID, T2.Company;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of gas station managers from the 'gas_station' table who are associated with a specific company. The placeholder in the WHERE clause represents the name of the company.\",\n        \"virtual_table\": \"SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the geographical locations of gas stations that are associated with companies having a market value exceeding a specified amount. The placeholders in the WHERE clause represent the market value threshold.\",\n        \"virtual_table\": \"SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of gas stations that were opened within a specific range of years. The placeholders in the WHERE clause represent the start and end years for filtering the gas stations based on their opening year.\",\n        \"virtual_table\": \"SELECT count(*) FROM gas_station WHERE open_year BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT T2.Company, COUNT(*) AS Number_of_Gas_Stations \nFROM station_company AS T1 \nJOIN company AS T2 ON T1.Company_ID = T2.Company_ID \nGROUP BY T1.Company_ID",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of gas stations associated with each company from the 'company' table. The placeholder in the SELECT statement represents the company name, and the count reflects the number of gas stations linked to that company.\",\n        \"virtual_table\": \"SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of companies based on their headquarters locations from the 'company' table. The query groups the results by the headquarters, allowing users to see how many companies are located in each specific area.\",\n        \"virtual_table\": \"SELECT headquarters ,  count(*) FROM company GROUP BY headquarters\"\n    }\n}\n",
        "c_high": "SELECT c.Company_ID, c.Company, COUNT(sc.Station_ID) AS Number_of_Gas_Stations\nFROM company c\nLEFT JOIN station_company sc ON c.Company_ID = sc.Company_ID\nGROUP BY c.Company_ID, c.Company;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and primary industries of companies from the 'company' table that do not have any associated gas stations in the 'station_company' table. The subquery in the WHERE clause filters out companies that are linked to any gas stations.\",\n        \"virtual_table\": \"SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the headquarters locations of companies from the 'company' table that operate in a specific industry. The results are grouped by headquarters, and only those with a count of companies greater than or equal to a specified number are included. The placeholders in the WHERE clause represent the industry type and the minimum count of companies.\",\n        \"virtual_table\": \"SELECT headquarters FROM company WHERE main_industry  =  [PLACEHOLDER-TYPE:STRING] GROUP BY headquarters HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the rank, name, and market value of companies from the 'company' table that operate in a specific industry. The placeholder in the WHERE clause represents the industry type, and the results are ordered by total sales and profits in billions.\",\n        \"virtual_table\": \"SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  [PLACEHOLDER-TYPE:STRING] ORDER BY sales_billion ,  profits_billion\"\n    }\n}\n",
        "t_1": "SELECT c.Company_ID, c.Company, COUNT(sc.Station_ID) AS Number_of_Gas_Stations\nFROM company c\nLEFT JOIN station_company sc ON c.Company_ID = sc.Company_ID\nGROUP BY c.Company_ID, c.Company;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of gas stations that were opened within a specific range of years. The placeholders in the WHERE clause represent the start and end years for filtering the gas stations based on their opening year.\",\n        \"virtual_table\": \"SELECT count(*) FROM gas_station WHERE open_year BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of companies based on their headquarters locations from the 'company' table. The query groups the results by the headquarters, allowing users to see how many companies are located in each specific area.\",\n        \"virtual_table\": \"SELECT headquarters ,  count(*) FROM company GROUP BY headquarters\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the headquarters locations of companies from the 'company' table that operate in a specific industry. The results are grouped by headquarters, and only those with a count of companies greater than or equal to a specified number are included. The placeholders in the WHERE clause represent the industry type and the minimum count of companies.\",\n        \"virtual_table\": \"SELECT headquarters FROM company WHERE main_industry  =  [PLACEHOLDER-TYPE:STRING] GROUP BY headquarters HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.Company, COUNT(*) AS Number_of_Gas_Stations \nFROM station_company AS T1 \nJOIN company AS T2 ON T1.Company_ID = T2.Company_ID \nGROUP BY T1.Company_ID",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of gas stations associated with each company from the 'company' table. The placeholder in the SELECT statement represents the company name, and the count reflects the number of gas stations linked to that company.\",\n        \"virtual_table\": \"SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and primary industries of companies from the 'company' table that do not have any associated gas stations in the 'station_company' table. The subquery in the WHERE clause filters out companies that are linked to any gas stations.\",\n        \"virtual_table\": \"SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)\"\n    }\n}\n",
        "t_3+": "SELECT T2.Company_ID, T2.Company, COUNT(T1.Station_ID) AS Number_of_Gas_Stations\nFROM company AS T2\nLEFT JOIN station_company AS T1 ON T2.Company_ID = T1.Company_ID\nGROUP BY T2.Company_ID, T2.Company;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of gas station managers from the 'gas_station' table who are associated with a specific company. The placeholder in the WHERE clause represents the name of the company.\",\n        \"virtual_table\": \"SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the geographical locations of gas stations that are associated with companies having a market value exceeding a specified amount. The placeholders in the WHERE clause represent the market value threshold.\",\n        \"virtual_table\": \"SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2031",
        "c_low": "SELECT manager_name, COUNT(*) as station_count \nFROM gas_station \nWHERE open_year > 2000 \nGROUP BY manager_name \nORDER BY station_count DESC \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of gas stations that were opened within a specific range of years. The placeholders in the WHERE clause represent the start and end years for filtering the gas stations based on their opening year.\",\n        \"virtual_table\": \"SELECT count(*) FROM gas_station WHERE open_year BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of gas station managers from the 'gas_station' table who are associated with a specific company. The placeholder in the WHERE clause represents the name of the company.\",\n        \"virtual_table\": \"SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the geographical locations of gas stations that are associated with companies having a market value exceeding a specified amount. The placeholders in the WHERE clause represent the market value threshold.\",\n        \"virtual_table\": \"SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT Manager_Name, COUNT(*) AS NumberOfStations \nFROM gas_station \nWHERE Open_Year > 2000 \nGROUP BY Manager_Name \nORDER BY NumberOfStations DESC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of gas stations associated with each company from the 'company' table. The placeholder in the SELECT statement represents the company name, and the count reflects the number of gas stations linked to that company.\",\n        \"virtual_table\": \"SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id\"\n    }\n}\n",
        "c_high": "SELECT Manager_Name, COUNT(Station_ID) AS NumberOfStations\nFROM gas_station\nWHERE Open_Year > 2000\nGROUP BY Manager_Name\nORDER BY NumberOfStations DESC\nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and primary industries of companies from the 'company' table that do not have any associated gas stations in the 'station_company' table. The subquery in the WHERE clause filters out companies that are linked to any gas stations.\",\n        \"virtual_table\": \"SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)\"\n    }\n}\n",
        "t_1": "SELECT Manager_Name, COUNT(*) as Station_Count \nFROM gas_station \nWHERE Open_Year > 2000 \nGROUP BY Manager_Name \nORDER BY Station_Count DESC \nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of gas stations that were opened within a specific range of years. The placeholders in the WHERE clause represent the start and end years for filtering the gas stations based on their opening year.\",\n        \"virtual_table\": \"SELECT count(*) FROM gas_station WHERE open_year BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Manager_Name, COUNT(*) AS NumberOfStations\nFROM gas_station\nWHERE Open_Year > 2000\nGROUP BY Manager_Name\nORDER BY NumberOfStations DESC\nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of gas stations associated with each company from the 'company' table. The placeholder in the SELECT statement represents the company name, and the count reflects the number of gas stations linked to that company.\",\n        \"virtual_table\": \"SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and primary industries of companies from the 'company' table that do not have any associated gas stations in the 'station_company' table. The subquery in the WHERE clause filters out companies that are linked to any gas stations.\",\n        \"virtual_table\": \"SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)\"\n    }\n}\n",
        "t_3+": "SELECT Manager_Name, COUNT(*) AS Number_of_Stations\nFROM gas_station\nWHERE Open_Year > 2000\nGROUP BY Manager_Name\nORDER BY Number_of_Stations DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of gas station managers from the 'gas_station' table who are associated with a specific company. The placeholder in the WHERE clause represents the name of the company.\",\n        \"virtual_table\": \"SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the geographical locations of gas stations that are associated with companies having a market value exceeding a specified amount. The placeholders in the WHERE clause represent the market value threshold.\",\n        \"virtual_table\": \"SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2032",
        "c_low": "SELECT manager_name FROM gas_station WHERE Station_ID IN (SELECT Station_ID FROM gas_station WHERE Open_Year > 2000) GROUP BY manager_name ORDER BY COUNT(*) DESC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of gas station managers from the 'gas_station' table who are associated with a specific company. The placeholder in the WHERE clause represents the name of the company.\",\n        \"virtual_table\": \"SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of gas stations that were opened within a specific range of years. The placeholders in the WHERE clause represent the start and end years for filtering the gas stations based on their opening year.\",\n        \"virtual_table\": \"SELECT count(*) FROM gas_station WHERE open_year BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the geographical locations of gas stations that are associated with companies having a market value exceeding a specified amount. The placeholders in the WHERE clause represent the market value threshold.\",\n        \"virtual_table\": \"SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT g.Manager_Name, COUNT(g.Station_ID) AS Station_Count\nFROM gas_station AS g\nWHERE g.Open_Year > 2000\nGROUP BY g.Manager_Name\nORDER BY Station_Count DESC\nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of gas stations associated with each company from the 'company' table. The placeholder in the SELECT statement represents the company name, and the count reflects the number of gas stations linked to that company.\",\n        \"virtual_table\": \"SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id\"\n    }\n}\n",
        "c_high": "SELECT Manager_Name, COUNT(Station_ID) AS Station_Count\nFROM gas_station\nWHERE Open_Year > 2000\nGROUP BY Manager_Name\nORDER BY Station_Count DESC\nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and primary industries of companies from the 'company' table that do not have any associated gas stations in the 'station_company' table. The subquery in the WHERE clause filters out companies that are linked to any gas stations.\",\n        \"virtual_table\": \"SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)\"\n    }\n}\n",
        "t_1": "SELECT Manager_Name FROM gas_station WHERE Open_Year > 2000 GROUP BY Manager_Name ORDER BY COUNT(*) DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of gas stations that were opened within a specific range of years. The placeholders in the WHERE clause represent the start and end years for filtering the gas stations based on their opening year.\",\n        \"virtual_table\": \"SELECT count(*) FROM gas_station WHERE open_year BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Manager_Name, COUNT(*) AS Station_Count \nFROM gas_station \nWHERE Open_Year > 2000 \nGROUP BY Manager_Name \nORDER BY Station_Count DESC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of gas stations associated with each company from the 'company' table. The placeholder in the SELECT statement represents the company name, and the count reflects the number of gas stations linked to that company.\",\n        \"virtual_table\": \"SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and primary industries of companies from the 'company' table that do not have any associated gas stations in the 'station_company' table. The subquery in the WHERE clause filters out companies that are linked to any gas stations.\",\n        \"virtual_table\": \"SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)\"\n    }\n}\n",
        "t_3+": "SELECT Manager_Name, COUNT(*) as Station_Count \nFROM gas_station \nWHERE Open_Year > 2000 \nGROUP BY Manager_Name \nORDER BY Station_Count DESC \nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of gas station managers from the 'gas_station' table who are associated with a specific company. The placeholder in the WHERE clause represents the name of the company.\",\n        \"virtual_table\": \"SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the geographical locations of gas stations that are associated with companies having a market value exceeding a specified amount. The placeholders in the WHERE clause represent the market value threshold.\",\n        \"virtual_table\": \"SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2036",
        "c_low": "SELECT Rank, Company, Market_Value FROM company WHERE Main_Industry = 'Banking' ORDER BY Sales_billion DESC, Profits_billion DESC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the geographical locations of gas stations that are associated with companies having a market value exceeding a specified amount. The placeholders in the WHERE clause represent the market value threshold.\",\n        \"virtual_table\": \"SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT Rank, Company, Market_Value FROM company WHERE Main_Industry = 'Banking' ORDER BY Sales_billion DESC, Profits_billion DESC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of companies based on their headquarters locations from the 'company' table. The query groups the results by the headquarters, allowing users to see how many companies are located in each specific area.\",\n        \"virtual_table\": \"SELECT headquarters ,  count(*) FROM company GROUP BY headquarters\"\n    }\n}\n",
        "c_high": "SELECT Rank, Company, Market_Value FROM company WHERE Main_Industry = 'banking' ORDER BY Sales_billion, Profits_billion",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the rank, name, and market value of companies from the 'company' table that operate in a specific industry. The placeholder in the WHERE clause represents the industry type, and the results are ordered by total sales and profits in billions.\",\n        \"virtual_table\": \"SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  [PLACEHOLDER-TYPE:STRING] ORDER BY sales_billion ,  profits_billion\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of companies in each primary industry from the 'company' table. It groups the results by the 'main_industry' column and orders them by the total market value in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of industries to display.\",\n        \"virtual_table\": \"SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the headquarters locations of companies from the 'company' table that operate in a specific industry. The results are grouped by headquarters, and only those with a count of companies greater than or equal to a specified number are included. The placeholders in the WHERE clause represent the industry type and the minimum count of companies.\",\n        \"virtual_table\": \"SELECT headquarters FROM company WHERE main_industry  =  [PLACEHOLDER-TYPE:STRING] GROUP BY headquarters HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Rank, Company, Market_Value FROM company WHERE Main_Industry = 'banking' ORDER BY Sales_billion, Profits_billion",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the rank, name, and market value of companies from the 'company' table that operate in a specific industry. The placeholder in the WHERE clause represents the industry type, and the results are ordered by total sales and profits in billions.\",\n        \"virtual_table\": \"SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  [PLACEHOLDER-TYPE:STRING] ORDER BY sales_billion ,  profits_billion\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of companies in each primary industry from the 'company' table. It groups the results by the 'main_industry' column and orders them by the total market value in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of industries to display.\",\n        \"virtual_table\": \"SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the number of companies based on their headquarters locations from the 'company' table. The query groups the results by the headquarters, allowing users to see how many companies are located in each specific area.\",\n        \"virtual_table\": \"SELECT headquarters ,  count(*) FROM company GROUP BY headquarters\"\n    }\n}\n",
        "t_2": "SELECT c.Rank, c.Company, c.Market_Value \nFROM company c \nWHERE c.Main_Industry = 'Banking' \nORDER BY c.Sales_billion DESC, c.Profits_billion DESC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT Rank, Company, Market_Value FROM company WHERE Main_Industry = 'Banking' ORDER BY Sales_billion DESC, Profits_billion DESC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the geographical locations of gas stations that are associated with companies having a market value exceeding a specified amount. The placeholders in the WHERE clause represent the market value threshold.\",\n        \"virtual_table\": \"SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2038",
        "c_low": "SELECT T3.Location, T3.Representative_Name \nFROM station_company AS T1 \nJOIN company AS T2 ON T1.Company_ID = T2.Company_ID \nJOIN gas_station AS T3 ON T1.Station_ID = T3.Station_ID \nWHERE T2.Company_ID IN (\n    SELECT Company_ID \n    FROM company \n    ORDER BY Assets_billion DESC \n    LIMIT 3\n)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the geographical locations of gas stations that are associated with companies having a market value exceeding a specified amount. The placeholders in the WHERE clause represent the market value threshold.\",\n        \"virtual_table\": \"SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of gas station managers from the 'gas_station' table who are associated with a specific company. The placeholder in the WHERE clause represents the name of the company.\",\n        \"virtual_table\": \"SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of gas stations that were opened within a specific range of years. The placeholders in the WHERE clause represent the start and end years for filtering the gas stations based on their opening year.\",\n        \"virtual_table\": \"SELECT count(*) FROM gas_station WHERE open_year BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT gs.Location, gs.Representative_Name \nFROM gas_station AS gs \nJOIN station_company AS sc ON gs.Station_ID = sc.Station_ID \nJOIN company AS c ON sc.Company_ID = c.Company_ID \nWHERE c.Company_ID IN (\n    SELECT Company_ID \n    FROM company \n    ORDER BY Assets_billion DESC \n    LIMIT 3\n)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of gas stations associated with each company from the 'company' table. The placeholder in the SELECT statement represents the company name, and the count reflects the number of gas stations linked to that company.\",\n        \"virtual_table\": \"SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of companies based on their headquarters locations from the 'company' table. The query groups the results by the headquarters, allowing users to see how many companies are located in each specific area.\",\n        \"virtual_table\": \"SELECT headquarters ,  count(*) FROM company GROUP BY headquarters\"\n    }\n}\n",
        "c_high": "SELECT gas_station.Location, gas_station.Representative_Name \nFROM gas_station \nJOIN station_company ON gas_station.Station_ID = station_company.Station_ID \nJOIN company ON station_company.Company_ID = company.Company_ID \nWHERE company.Company_ID IN (\n    SELECT Company_ID \n    FROM company \n    ORDER BY Assets_billion DESC \n    LIMIT 3\n)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and primary industries of companies from the 'company' table that do not have any associated gas stations in the 'station_company' table. The subquery in the WHERE clause filters out companies that are linked to any gas stations.\",\n        \"virtual_table\": \"SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the headquarters locations of companies from the 'company' table that operate in a specific industry. The results are grouped by headquarters, and only those with a count of companies greater than or equal to a specified number are included. The placeholders in the WHERE clause represent the industry type and the minimum count of companies.\",\n        \"virtual_table\": \"SELECT headquarters FROM company WHERE main_industry  =  [PLACEHOLDER-TYPE:STRING] GROUP BY headquarters HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT gs.Location, gs.Representative_Name \nFROM gas_station gs \nJOIN station_company sc ON gs.Station_ID = sc.Station_ID \nJOIN company c ON sc.Company_ID = c.Company_ID \nORDER BY c.Assets_billion DESC \nLIMIT 3;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of gas stations that were opened within a specific range of years. The placeholders in the WHERE clause represent the start and end years for filtering the gas stations based on their opening year.\",\n        \"virtual_table\": \"SELECT count(*) FROM gas_station WHERE open_year BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of companies based on their headquarters locations from the 'company' table. The query groups the results by the headquarters, allowing users to see how many companies are located in each specific area.\",\n        \"virtual_table\": \"SELECT headquarters ,  count(*) FROM company GROUP BY headquarters\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the headquarters locations of companies from the 'company' table that operate in a specific industry. The results are grouped by headquarters, and only those with a count of companies greater than or equal to a specified number are included. The placeholders in the WHERE clause represent the industry type and the minimum count of companies.\",\n        \"virtual_table\": \"SELECT headquarters FROM company WHERE main_industry  =  [PLACEHOLDER-TYPE:STRING] GROUP BY headquarters HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT gs.Location, gs.Representative_Name \nFROM gas_station AS gs \nJOIN station_company AS sc ON gs.Station_ID = sc.Station_ID \nJOIN company AS c ON sc.Company_ID = c.Company_ID \nWHERE c.Company_ID IN (\n    SELECT Company_ID \n    FROM company \n    ORDER BY Assets_billion DESC \n    LIMIT 3\n)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of gas stations associated with each company from the 'company' table. The placeholder in the SELECT statement represents the company name, and the count reflects the number of gas stations linked to that company.\",\n        \"virtual_table\": \"SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and primary industries of companies from the 'company' table that do not have any associated gas stations in the 'station_company' table. The subquery in the WHERE clause filters out companies that are linked to any gas stations.\",\n        \"virtual_table\": \"SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)\"\n    }\n}\n",
        "t_3+": "SELECT gs.Location, gs.Representative_Name \nFROM gas_station AS gs \nJOIN station_company AS sc ON gs.Station_ID = sc.Station_ID \nJOIN company AS c ON sc.Company_ID = c.Company_ID \nWHERE c.Company_ID IN (\n    SELECT Company_ID \n    FROM company \n    ORDER BY Assets_billion DESC \n    LIMIT 3\n);",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the geographical locations of gas stations that are associated with companies having a market value exceeding a specified amount. The placeholders in the WHERE clause represent the market value threshold.\",\n        \"virtual_table\": \"SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of gas station managers from the 'gas_station' table who are associated with a specific company. The placeholder in the WHERE clause represents the name of the company.\",\n        \"virtual_table\": \"SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2049",
        "c_low": "SELECT minister FROM party WHERE Party_name != 'Progress Party'",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of ministers from the 'party' table, ordered by the date they left office in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of ministers to retrieve.\",\n        \"virtual_table\": \"SELECT minister FROM party ORDER BY left_office DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of members from the 'Member' table who do not belong to a specific political party. The placeholder in the WHERE clause represents the name of the political party to be excluded.\",\n        \"virtual_table\": \"SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id WHERE T2.Party_name != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of members from the 'member' table who are not in charge of any party events. The query uses an EXCEPT clause to exclude members who are associated with any events, ensuring that only those members without event responsibilities are displayed.\",\n        \"virtual_table\": \"SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT p.Minister FROM party p WHERE p.Party_name != 'Progress Party'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of political parties from the 'party' table that do not have any associated members. The placeholder in the subquery represents the party IDs of members, ensuring that only parties without members are selected.\",\n        \"virtual_table\": \"SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of political parties from the 'party' table, based on the number of members associated with each party. The placeholder in the LIMIT clause represents the maximum number of party names to be returned.\",\n        \"virtual_table\": \"SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT p.Minister \nFROM party p \nWHERE p.Party_name != 'Progress Party';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of ministers from the 'party' table who took office either after or before a specific date. The placeholders in the WHERE clause represent the dates for filtering the ministers' office tenure.\",\n        \"virtual_table\": \"SELECT minister FROM party WHERE took_office  >  [PLACEHOLDER-TYPE:NUMBER] OR took_office  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT minister FROM party WHERE Party_name != 'Progress Party'",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of ministers from the 'party' table, ordered by the date they left office in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of ministers to retrieve.\",\n        \"virtual_table\": \"SELECT minister FROM party ORDER BY left_office DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of ministers from the 'party' table who took office either after or before a specific date. The placeholders in the WHERE clause represent the dates for filtering the ministers' office tenure.\",\n        \"virtual_table\": \"SELECT minister FROM party WHERE took_office  >  [PLACEHOLDER-TYPE:NUMBER] OR took_office  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of distinct political party names from the 'party' table. The result will indicate how many unique political parties are present in the database.\",\n        \"virtual_table\": \"SELECT count(DISTINCT party_name) FROM party\"\n    }\n}\n",
        "t_2": "SELECT member.Member_Name \nFROM member \nJOIN party ON member.Party_ID = party.Party_ID \nWHERE party.Party_name != 'Progress Party';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of members from the 'Member' table who do not belong to a specific political party. The placeholder in the WHERE clause represents the name of the political party to be excluded.\",\n        \"virtual_table\": \"SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id WHERE T2.Party_name != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of political parties from the 'party' table that do not have any associated members. The placeholder in the subquery represents the party IDs of members, ensuring that only parties without members are selected.\",\n        \"virtual_table\": \"SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of members from the 'member' table who are not in charge of any party events. The query uses an EXCEPT clause to exclude members who are associated with any events, ensuring that only those members without event responsibilities are displayed.\",\n        \"virtual_table\": \"SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT m.Member_Name, p.Minister \nFROM member m \nJOIN party p ON m.Party_ID = p.Party_ID \nWHERE p.Party_name != 'Progress Party';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2050",
        "c_low": "SELECT T1.Member_Name \nFROM member AS T1 \nJOIN party AS T2 ON T1.Party_ID = T2.Party_ID \nWHERE T2.Party_name != 'Progress Party';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of ministers from the 'party' table, ordered by the date they left office in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of ministers to retrieve.\",\n        \"virtual_table\": \"SELECT minister FROM party ORDER BY left_office DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of members from the 'Member' table who do not belong to a specific political party. The placeholder in the WHERE clause represents the name of the political party to be excluded.\",\n        \"virtual_table\": \"SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id WHERE T2.Party_name != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of members from the 'member' table who are not in charge of any party events. The query uses an EXCEPT clause to exclude members who are associated with any events, ensuring that only those members without event responsibilities are displayed.\",\n        \"virtual_table\": \"SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT minister FROM party WHERE party_name != 'Progress Party' AND Party_ID NOT IN (SELECT Party_ID FROM member)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of political parties from the 'party' table that do not have any associated members. The placeholder in the subquery represents the party IDs of members, ensuring that only parties without members are selected.\",\n        \"virtual_table\": \"SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of political parties from the 'party' table, based on the number of members associated with each party. The placeholder in the LIMIT clause represents the maximum number of party names to be returned.\",\n        \"virtual_table\": \"SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT p.Minister \nFROM party p \nWHERE p.Party_name != 'Progress Party';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of ministers from the 'party' table who took office either after or before a specific date. The placeholders in the WHERE clause represent the dates for filtering the ministers' office tenure.\",\n        \"virtual_table\": \"SELECT minister FROM party WHERE took_office  >  [PLACEHOLDER-TYPE:NUMBER] OR took_office  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT minister FROM party WHERE Party_name != 'Progress Party'",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of ministers from the 'party' table who took office either after or before a specific date. The placeholders in the WHERE clause represent the dates for filtering the ministers' office tenure.\",\n        \"virtual_table\": \"SELECT minister FROM party WHERE took_office  >  [PLACEHOLDER-TYPE:NUMBER] OR took_office  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of ministers from the 'party' table, ordered by the date they left office in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of ministers to retrieve.\",\n        \"virtual_table\": \"SELECT minister FROM party ORDER BY left_office DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of distinct political party names from the 'party' table. The result will indicate how many unique political parties are present in the database.\",\n        \"virtual_table\": \"SELECT count(DISTINCT party_name) FROM party\"\n    }\n}\n",
        "t_2": "SELECT member.Member_Name FROM member JOIN party ON member.Party_ID = party.Party_ID WHERE party.Party_name != 'Progress Party'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of members from the 'Member' table who do not belong to a specific political party. The placeholder in the WHERE clause represents the name of the political party to be excluded.\",\n        \"virtual_table\": \"SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id WHERE T2.Party_name != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of political parties from the 'party' table that do not have any associated members. The placeholder in the subquery represents the party IDs of members, ensuring that only parties without members are selected.\",\n        \"virtual_table\": \"SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of members from the 'member' table who are not in charge of any party events. The query uses an EXCEPT clause to exclude members who are associated with any events, ensuring that only those members without event responsibilities are displayed.\",\n        \"virtual_table\": \"SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT m.Member_Name \nFROM member m \nJOIN party p ON m.Party_ID = p.Party_ID \nWHERE p.Party_name != 'Progress Party';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2057",
        "c_low": "SELECT p.Party_name, COUNT(m.Member_ID) AS Number_of_Members\nFROM party p\nLEFT JOIN member m ON p.Party_ID = m.Party_ID\nGROUP BY p.Party_name;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of distinct political party names from the 'party' table. The result will indicate how many unique political parties are present in the database.\",\n        \"virtual_table\": \"SELECT count(DISTINCT party_name) FROM party\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of members from the 'Member' table who do not belong to a specific political party. The placeholder in the WHERE clause represents the name of the political party to be excluded.\",\n        \"virtual_table\": \"SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id WHERE T2.Party_name != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT p.Party_name, COUNT(m.Member_ID) AS Number_of_Members\nFROM party p\nLEFT JOIN member m ON p.Party_ID = m.Party_ID\nGROUP BY p.Party_ID;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of political parties from the 'party' table, based on the number of members associated with each party. The placeholder in the LIMIT clause represents the maximum number of party names to be returned.\",\n        \"virtual_table\": \"SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of members who are in charge of organizing party events, sorted by the number of events they are responsible for. The placeholder in the LIMIT clause allows the user to specify the maximum number of member names to retrieve.\",\n        \"virtual_table\": \"SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of political parties from the 'party' table that do not have any associated members. The placeholder in the subquery represents the party IDs of members, ensuring that only parties without members are selected.\",\n        \"virtual_table\": \"SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)\"\n    }\n}\n",
        "c_high": "SELECT party.Party_name, COUNT(member.Member_ID) AS number_of_members \nFROM party \nLEFT JOIN member ON party.Party_ID = member.Party_ID \nGROUP BY party.Party_name;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of political parties that have organized a number of events equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of events that a party must have organized.\",\n        \"virtual_table\": \"SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of members who belong to two different political parties. The query uses the INTERSECT operator to find members that are common to both parties identified by their unique party IDs. The placeholders represent the IDs of the parties being compared.\",\n        \"virtual_table\": \"SELECT member_name FROM member WHERE party_id  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT member_name FROM member WHERE party_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT p.Party_name, COUNT(m.Member_ID) AS Number_of_Members\nFROM party p\nLEFT JOIN member m ON p.Party_ID = m.Party_ID\nGROUP BY p.Party_name;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of distinct political party names from the 'party' table. The result will indicate how many unique political parties are present in the database.\",\n        \"virtual_table\": \"SELECT count(DISTINCT party_name) FROM party\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of members who belong to two different political parties. The query uses the INTERSECT operator to find members that are common to both parties identified by their unique party IDs. The placeholders represent the IDs of the parties being compared.\",\n        \"virtual_table\": \"SELECT member_name FROM member WHERE party_id  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT member_name FROM member WHERE party_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT party.Party_name, COUNT(member.Member_ID) AS number_of_members \nFROM party \nLEFT JOIN member ON party.Party_ID = member.Party_ID \nGROUP BY party.Party_ID;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of political parties from the 'party' table, based on the number of members associated with each party. The placeholder in the LIMIT clause represents the maximum number of party names to be returned.\",\n        \"virtual_table\": \"SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of members who are in charge of organizing party events, sorted by the number of events they are responsible for. The placeholder in the LIMIT clause allows the user to specify the maximum number of member names to retrieve.\",\n        \"virtual_table\": \"SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of political parties from the 'party' table that do not have any associated members. The placeholder in the subquery represents the party IDs of members, ensuring that only parties without members are selected.\",\n        \"virtual_table\": \"SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)\"\n    }\n}\n",
        "t_3+": "SELECT party.Party_name, COUNT(member.Member_ID) AS Number_of_Members\nFROM party\nLEFT JOIN member ON party.Party_ID = member.Party_ID\nGROUP BY party.Party_name;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2058",
        "c_low": "SELECT party.Party_name, COUNT(member.Member_ID) AS member_count \nFROM party \nLEFT JOIN member ON party.Party_ID = member.Party_ID \nGROUP BY party.Party_name;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of distinct political party names from the 'party' table. The result will indicate how many unique political parties are present in the database.\",\n        \"virtual_table\": \"SELECT count(DISTINCT party_name) FROM party\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of members from the 'Member' table who do not belong to a specific political party. The placeholder in the WHERE clause represents the name of the political party to be excluded.\",\n        \"virtual_table\": \"SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id WHERE T2.Party_name != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT party.Party_name, COUNT(member.Member_ID) AS member_count \nFROM party \nLEFT JOIN member ON party.Party_ID = member.Party_ID \nGROUP BY party.Party_ID \nORDER BY member_count DESC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of political parties from the 'party' table, based on the number of members associated with each party. The placeholder in the LIMIT clause represents the maximum number of party names to be returned.\",\n        \"virtual_table\": \"SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of members who are in charge of organizing party events, sorted by the number of events they are responsible for. The placeholder in the LIMIT clause allows the user to specify the maximum number of member names to retrieve.\",\n        \"virtual_table\": \"SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of political parties from the 'party' table that do not have any associated members. The placeholder in the subquery represents the party IDs of members, ensuring that only parties without members are selected.\",\n        \"virtual_table\": \"SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)\"\n    }\n}\n",
        "c_high": "SELECT Party_name, COUNT(Member_ID) AS Member_Count \nFROM party \nJOIN member ON party.Party_ID = member.Party_ID \nGROUP BY party.Party_ID;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of members who belong to two different political parties. The query uses the INTERSECT operator to find members that are common to both parties identified by their unique party IDs. The placeholders represent the IDs of the parties being compared.\",\n        \"virtual_table\": \"SELECT member_name FROM member WHERE party_id  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT member_name FROM member WHERE party_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of political parties that have organized a number of events equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of events that a party must have organized.\",\n        \"virtual_table\": \"SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT party.Party_name, COUNT(member.Member_ID) AS member_count \nFROM party \nLEFT JOIN member ON party.Party_ID = member.Party_ID \nGROUP BY party.Party_name;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of distinct political party names from the 'party' table. The result will indicate how many unique political parties are present in the database.\",\n        \"virtual_table\": \"SELECT count(DISTINCT party_name) FROM party\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of members who belong to two different political parties. The query uses the INTERSECT operator to find members that are common to both parties identified by their unique party IDs. The placeholders represent the IDs of the parties being compared.\",\n        \"virtual_table\": \"SELECT member_name FROM member WHERE party_id  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT member_name FROM member WHERE party_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.Party_name, COUNT(T1.Member_ID) AS Member_Count \nFROM member AS T1 \nJOIN party AS T2 ON T1.Party_ID = T2.Party_ID \nGROUP BY T2.Party_name;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of political parties from the 'party' table, based on the number of members associated with each party. The placeholder in the LIMIT clause represents the maximum number of party names to be returned.\",\n        \"virtual_table\": \"SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of members who are in charge of organizing party events, sorted by the number of events they are responsible for. The placeholder in the LIMIT clause allows the user to specify the maximum number of member names to retrieve.\",\n        \"virtual_table\": \"SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of political parties that have organized a number of events equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of events that a party must have organized.\",\n        \"virtual_table\": \"SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT party.Party_name, COUNT(member.Member_ID) AS Member_Count\nFROM party\nLEFT JOIN member ON party.Party_ID = member.Party_ID\nGROUP BY party.Party_name;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2071",
        "c_low": "SELECT p.Party_name, COUNT(pe.Event_ID) AS Number_of_Events\nFROM party p\nLEFT JOIN party_events pe ON p.Party_ID = pe.Party_ID\nGROUP BY p.Party_name;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of distinct political party names from the 'party' table. The result will indicate how many unique political parties are present in the database.\",\n        \"virtual_table\": \"SELECT count(DISTINCT party_name) FROM party\"\n    }\n}\n",
        "c_mid": "SELECT party.Party_name, COUNT(party_events.Event_ID) AS Number_of_Events\nFROM party\nLEFT JOIN party_events ON party.Party_ID = party_events.Party_ID\nGROUP BY party.Party_name;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of members who are in charge of organizing party events, sorted by the number of events they are responsible for. The placeholder in the LIMIT clause allows the user to specify the maximum number of member names to retrieve.\",\n        \"virtual_table\": \"SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of political parties from the 'party' table, based on the number of members associated with each party. The placeholder in the LIMIT clause represents the maximum number of party names to be returned.\",\n        \"virtual_table\": \"SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT T2.Party_name, COUNT(T1.Event_ID) AS Number_of_Events \nFROM party_events AS T1 \nJOIN party AS T2 ON T1.Party_ID = T2.Party_ID \nGROUP BY T2.Party_name;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of events organized by political parties from the 'party_events' table that have occurred more than a specified number of times. The placeholder in the HAVING clause represents the minimum count of occurrences for the events.\",\n        \"virtual_table\": \"SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of political parties that have organized a number of events equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of events that a party must have organized.\",\n        \"virtual_table\": \"SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT p.Party_name, COUNT(pe.Event_ID) AS Number_of_Events\nFROM party p\nLEFT JOIN party_events pe ON p.Party_ID = pe.Party_ID\nGROUP BY p.Party_name;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of distinct political party names from the 'party' table. The result will indicate how many unique political parties are present in the database.\",\n        \"virtual_table\": \"SELECT count(DISTINCT party_name) FROM party\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of events organized by political parties from the 'party_events' table that have occurred more than a specified number of times. The placeholder in the HAVING clause represents the minimum count of occurrences for the events.\",\n        \"virtual_table\": \"SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.Party_name, COUNT(T1.Event_ID) AS Number_of_Events \nFROM party_events AS T1 \nJOIN party AS T2 ON T1.Party_ID = T2.Party_ID \nGROUP BY T2.Party_name;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of members who are in charge of organizing party events, sorted by the number of events they are responsible for. The placeholder in the LIMIT clause allows the user to specify the maximum number of member names to retrieve.\",\n        \"virtual_table\": \"SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of political parties from the 'party' table, based on the number of members associated with each party. The placeholder in the LIMIT clause represents the maximum number of party names to be returned.\",\n        \"virtual_table\": \"SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of political parties that have organized a number of events equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of events that a party must have organized.\",\n        \"virtual_table\": \"SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT party.Party_name, COUNT(party_events.Event_ID) AS Number_of_Events\nFROM party\nLEFT JOIN party_events ON party.Party_ID = party_events.Party_ID\nGROUP BY party.Party_name;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2072",
        "c_low": "SELECT party.Party_name, COUNT(party_events.Event_ID) AS Event_Count\nFROM party\nLEFT JOIN party_events ON party.Party_ID = party_events.Party_ID\nGROUP BY party.Party_name;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of distinct political party names from the 'party' table. The result will indicate how many unique political parties are present in the database.\",\n        \"virtual_table\": \"SELECT count(DISTINCT party_name) FROM party\"\n    }\n}\n",
        "c_mid": "SELECT party.Party_name, COUNT(party_events.Event_ID) AS event_count \nFROM party \nLEFT JOIN party_events ON party.Party_ID = party_events.Party_ID \nGROUP BY party.Party_ID;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of members who are in charge of organizing party events, sorted by the number of events they are responsible for. The placeholder in the LIMIT clause allows the user to specify the maximum number of member names to retrieve.\",\n        \"virtual_table\": \"SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of political parties from the 'party' table, based on the number of members associated with each party. The placeholder in the LIMIT clause represents the maximum number of party names to be returned.\",\n        \"virtual_table\": \"SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT T2.Party_name, COUNT(T1.Event_ID) AS Event_Count \nFROM party_events AS T1 \nJOIN party AS T2 ON T1.Party_ID = T2.Party_ID \nGROUP BY T2.Party_name;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of events organized by political parties from the 'party_events' table that have occurred more than a specified number of times. The placeholder in the HAVING clause represents the minimum count of occurrences for the events.\",\n        \"virtual_table\": \"SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of political parties that have organized a number of events equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of events that a party must have organized.\",\n        \"virtual_table\": \"SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT party.Party_name, COUNT(party_events.Event_ID) AS event_count\nFROM party\nLEFT JOIN party_events ON party.Party_ID = party_events.Party_ID\nGROUP BY party.Party_name;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of events organized by political parties from the 'party_events' table that have occurred more than a specified number of times. The placeholder in the HAVING clause represents the minimum count of occurrences for the events.\",\n        \"virtual_table\": \"SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of distinct political party names from the 'party' table. The result will indicate how many unique political parties are present in the database.\",\n        \"virtual_table\": \"SELECT count(DISTINCT party_name) FROM party\"\n    }\n}\n",
        "t_2": "SELECT T2.Party_name, COUNT(T1.Event_ID) AS Event_Count \nFROM party_events AS T1 \nJOIN party AS T2 ON T1.Party_ID = T2.Party_ID \nGROUP BY T2.Party_name;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of political parties that have organized a number of events equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of events that a party must have organized.\",\n        \"virtual_table\": \"SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of members who are in charge of organizing party events, sorted by the number of events they are responsible for. The placeholder in the LIMIT clause allows the user to specify the maximum number of member names to retrieve.\",\n        \"virtual_table\": \"SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of political parties from the 'party' table, based on the number of members associated with each party. The placeholder in the LIMIT clause represents the maximum number of party names to be returned.\",\n        \"virtual_table\": \"SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT party.Party_name, COUNT(party_events.Event_ID) AS Event_Count\nFROM party\nLEFT JOIN party_events ON party.Party_ID = party_events.Party_ID\nGROUP BY party.Party_name;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2081",
        "c_low": "SELECT COUNT(*) AS Annual_Meeting_Count\nFROM party_events pe\nJOIN party p ON pe.Party_ID = p.Party_ID\nJOIN region r ON p.Region_ID = r.Region_ID\nWHERE pe.Event_Name = 'Annual Meeting' AND r.Region_name = 'United Kingdom';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT COUNT(*) AS Annual_Meeting_Count\nFROM party_events pe\nJOIN party p ON pe.Party_ID = p.Party_ID\nJOIN region r ON p.Region_ID = r.Region_ID\nWHERE pe.Event_Name = 'Annual Meeting' AND r.Region_name = 'United Kingdom';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT COUNT(*) AS Annual_Meeting_Count\nFROM party_events pe\nJOIN party p ON pe.Party_ID = p.Party_ID\nJOIN region r ON p.Region_ID = r.Region_ID\nWHERE pe.Event_Name = 'Annual Meeting' AND r.Region_name = 'United Kingdom';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT COUNT(*) AS Annual_Meeting_Count\nFROM party_events pe\nJOIN party p ON pe.Party_ID = p.Party_ID\nJOIN region r ON p.Region_ID = r.Region_ID\nWHERE pe.Event_Name = 'Annual Meeting' AND r.Region_name = 'United Kingdom';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT COUNT(*) AS Annual_Meeting_Count\nFROM party_events pe\nJOIN party p ON pe.Party_ID = p.Party_ID\nJOIN region r ON p.Region_ID = r.Region_ID\nWHERE pe.Event_Name = 'Annual Meeting' AND r.Region_name = 'United Kingdom';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT COUNT(*) AS Annual_Meeting_Count\nFROM party_events pe\nJOIN party p ON pe.Party_ID = p.Party_ID\nJOIN region r ON p.Region_ID = r.Region_ID\nWHERE pe.Event_Name = 'Annual Meeting' AND r.Region_name = 'United Kingdom';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2082",
        "c_low": "SELECT COUNT(*) AS Annual_Meeting_Count\nFROM party_events pe\nJOIN party p ON pe.Party_ID = p.Party_ID\nJOIN region r ON p.Region_ID = r.Region_ID\nWHERE pe.Event_Name = 'Annual Meeting' AND r.Region_name = 'United Kingdom';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT COUNT(*) AS Annual_Meeting_Count\nFROM party_events pe\nJOIN party p ON pe.Party_ID = p.Party_ID\nJOIN region r ON p.Region_ID = r.Region_ID\nWHERE pe.Event_Name = 'Annual Meeting' AND r.Region_name = 'United Kingdom';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT COUNT(*) AS Annual_Meeting_Count\nFROM party_events pe\nJOIN party p ON pe.Party_ID = p.Party_ID\nJOIN region r ON p.Region_ID = r.Region_ID\nWHERE pe.Event_Name = 'Annual Meeting' AND r.Region_name = 'United Kingdom';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT COUNT(*) AS Annual_Meeting_Count\nFROM party_events pe\nJOIN party p ON pe.Party_ID = p.Party_ID\nJOIN region r ON p.Region_ID = r.Region_ID\nWHERE pe.Event_Name = 'Annual Meeting' AND r.Region_name = 'United Kingdom';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT COUNT(*) AS Annual_Meeting_Count\nFROM party_events pe\nJOIN party p ON pe.Party_ID = p.Party_ID\nJOIN region r ON p.Region_ID = r.Region_ID\nWHERE pe.Event_Name = 'Annual Meeting' AND r.Region_name = 'United Kingdom';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT COUNT(*) AS Annual_Meeting_Count\nFROM party_events pe\nJOIN party p ON pe.Party_ID = p.Party_ID\nJOIN region r ON p.Region_ID = r.Region_ID\nWHERE pe.Event_Name = 'Annual Meeting' AND r.Region_name = 'United Kingdom';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2088",
        "c_low": "SELECT Join_Year FROM pilot WHERE Rank = (SELECT MAX(Rank) FROM pilot);",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Join_Year FROM pilot WHERE Rank = (SELECT MAX(Rank) FROM pilot)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the fleet series of aircraft flown by pilots who are younger than a specified age. The placeholders in the WHERE clause represent the age limit for filtering the pilots.\",\n        \"virtual_table\": \"SELECT T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID WHERE T3.Age  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of pilots from the 'pilot' table who are associated with specific teams. The placeholders in the WHERE clause represent the names of the teams being queried.\",\n        \"virtual_table\": \"SELECT Pilot_name FROM pilot WHERE Team  =  [PLACEHOLDER-TYPE:STRING] OR Team  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT Join_Year FROM pilot WHERE Rank = (SELECT MAX(Rank) FROM pilot)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of pilots grouped by their nationality from the 'pilot' table. The placeholder in the COUNT function allows for dynamic counting of pilots based on their nationality.\",\n        \"virtual_table\": \"SELECT Nationality ,  COUNT(*) FROM pilot GROUP BY Nationality\"\n    }\n}\n",
        "t_1": "SELECT Join_Year FROM pilot WHERE Rank = (SELECT MAX(Rank) FROM pilot)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of pilots grouped by their nationality from the 'pilot' table. The placeholder in the COUNT function allows for dynamic counting of pilots based on their nationality.\",\n        \"virtual_table\": \"SELECT Nationality ,  COUNT(*) FROM pilot GROUP BY Nationality\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of pilots from the 'pilot' table who are associated with specific teams. The placeholders in the WHERE clause represent the names of the teams being queried.\",\n        \"virtual_table\": \"SELECT Pilot_name FROM pilot WHERE Team  =  [PLACEHOLDER-TYPE:STRING] OR Team  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT Join_Year FROM pilot WHERE Rank = (SELECT MAX(Rank) FROM pilot);",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT Join_Year FROM pilot WHERE Rank = (SELECT MAX(Rank) FROM pilot)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the fleet series of aircraft flown by pilots who are younger than a specified age. The placeholders in the WHERE clause represent the age limit for filtering the pilots.\",\n        \"virtual_table\": \"SELECT T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID WHERE T3.Age  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2090",
        "c_low": "SELECT Nationality, COUNT(*) as Count FROM pilot GROUP BY Nationality ORDER BY Count DESC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Nationality, COUNT(*) as Count FROM pilot GROUP BY Nationality ORDER BY Count DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the fleet series of aircraft flown by pilots who are younger than a specified age. The placeholders in the WHERE clause represent the age limit for filtering the pilots.\",\n        \"virtual_table\": \"SELECT T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID WHERE T3.Age  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of pilots from the 'pilot' table who are associated with specific teams. The placeholders in the WHERE clause represent the names of the teams being queried.\",\n        \"virtual_table\": \"SELECT Pilot_name FROM pilot WHERE Team  =  [PLACEHOLDER-TYPE:STRING] OR Team  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT Nationality, COUNT(*) AS Pilot_Count FROM pilot GROUP BY Nationality ORDER BY Pilot_Count DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of pilots grouped by their nationality from the 'pilot' table. The placeholder in the COUNT function allows for dynamic counting of pilots based on their nationality.\",\n        \"virtual_table\": \"SELECT Nationality ,  COUNT(*) FROM pilot GROUP BY Nationality\"\n    }\n}\n",
        "t_1": "SELECT Nationality, COUNT(*) as Pilot_Count FROM pilot GROUP BY Nationality ORDER BY Pilot_Count DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of pilots grouped by their nationality from the 'pilot' table. The placeholder in the COUNT function allows for dynamic counting of pilots based on their nationality.\",\n        \"virtual_table\": \"SELECT Nationality ,  COUNT(*) FROM pilot GROUP BY Nationality\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of pilots from the 'pilot' table who are associated with specific teams. The placeholders in the WHERE clause represent the names of the teams being queried.\",\n        \"virtual_table\": \"SELECT Pilot_name FROM pilot WHERE Team  =  [PLACEHOLDER-TYPE:STRING] OR Team  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT Nationality, COUNT(*) as Count\nFROM pilot\nGROUP BY Nationality\nORDER BY Count DESC\nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT Nationality, COUNT(*) as Count FROM pilot GROUP BY Nationality ORDER BY Count DESC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the fleet series of aircraft flown by pilots who are younger than a specified age. The placeholders in the WHERE clause represent the age limit for filtering the pilots.\",\n        \"virtual_table\": \"SELECT T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID WHERE T3.Age  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2095",
        "c_low": "SELECT pilot.Pilot_name, COUNT(pilot_record.Record_ID) AS Record_Count\nFROM pilot\nLEFT JOIN pilot_record ON pilot.Pilot_ID = pilot_record.Pilot_ID\nGROUP BY pilot.Pilot_ID;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Pilot_name, COUNT(Record_ID) AS Number_of_Records FROM pilot LEFT JOIN pilot_record ON pilot.Pilot_ID = pilot_record.Pilot_ID GROUP BY Pilot_name;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of pilots from the 'pilot' table who are associated with specific teams. The placeholders in the WHERE clause represent the names of the teams being queried.\",\n        \"virtual_table\": \"SELECT Pilot_name FROM pilot WHERE Team  =  [PLACEHOLDER-TYPE:STRING] OR Team  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the fleet series of aircraft flown by pilots who are younger than a specified age. The placeholders in the WHERE clause represent the age limit for filtering the pilots.\",\n        \"virtual_table\": \"SELECT T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID WHERE T3.Age  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT Pilot_name, COUNT(*) AS Record_Count \nFROM pilot \nJOIN pilot_record ON pilot.Pilot_ID = pilot_record.Pilot_ID \nGROUP BY pilot.Pilot_ID;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of pilots grouped by their nationality from the 'pilot' table. The placeholder in the COUNT function allows for dynamic counting of pilots based on their nationality.\",\n        \"virtual_table\": \"SELECT Nationality ,  COUNT(*) FROM pilot GROUP BY Nationality\"\n    }\n}\n",
        "t_1": "SELECT Pilot_name, COUNT(Record_ID) AS Number_of_Records \nFROM pilot \nJOIN pilot_record ON pilot.Pilot_ID = pilot_record.Pilot_ID \nGROUP BY Pilot_name",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of pilots grouped by their nationality from the 'pilot' table. The placeholder in the COUNT function allows for dynamic counting of pilots based on their nationality.\",\n        \"virtual_table\": \"SELECT Nationality ,  COUNT(*) FROM pilot GROUP BY Nationality\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of pilots from the 'pilot' table who are associated with specific teams. The placeholders in the WHERE clause represent the names of the teams being queried.\",\n        \"virtual_table\": \"SELECT Pilot_name FROM pilot WHERE Team  =  [PLACEHOLDER-TYPE:STRING] OR Team  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT pilot.Pilot_name, COUNT(pilot_record.Record_ID) AS Record_Count\nFROM pilot\nLEFT JOIN pilot_record ON pilot.Pilot_ID = pilot_record.Pilot_ID\nGROUP BY pilot.Pilot_ID;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT T3.Pilot_name, COUNT(T1.Record_ID) AS Record_Count FROM pilot_record AS T1 JOIN pilot AS T3 ON T1.Pilot_ID = T3.Pilot_ID GROUP BY T3.Pilot_name",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the fleet series of aircraft flown by pilots who are younger than a specified age. The placeholders in the WHERE clause represent the age limit for filtering the pilots.\",\n        \"virtual_table\": \"SELECT T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID WHERE T3.Age  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2096",
        "c_low": "SELECT p.Pilot_name\nFROM pilot p\nJOIN pilot_record pr ON p.Pilot_ID = pr.Pilot_ID\nGROUP BY p.Pilot_ID\nHAVING COUNT(pr.Record_ID) > 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Pilot_name FROM pilot WHERE Pilot_ID IN (SELECT Pilot_ID FROM pilot_record GROUP BY Pilot_ID HAVING COUNT(Record_ID) > 1)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of pilots from the 'pilot' table who are associated with specific teams. The placeholders in the WHERE clause represent the names of the teams being queried.\",\n        \"virtual_table\": \"SELECT Pilot_name FROM pilot WHERE Team  =  [PLACEHOLDER-TYPE:STRING] OR Team  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the fleet series of aircraft flown by pilots who are younger than a specified age. The placeholders in the WHERE clause represent the age limit for filtering the pilots.\",\n        \"virtual_table\": \"SELECT T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID WHERE T3.Age  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT Pilot_name FROM pilot WHERE Pilot_ID IN (SELECT Pilot_ID FROM pilot_record GROUP BY Pilot_ID HAVING COUNT(*) > 1)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of pilots grouped by their nationality from the 'pilot' table. The placeholder in the COUNT function allows for dynamic counting of pilots based on their nationality.\",\n        \"virtual_table\": \"SELECT Nationality ,  COUNT(*) FROM pilot GROUP BY Nationality\"\n    }\n}\n",
        "t_1": "SELECT Pilot_name FROM pilot WHERE Pilot_ID IN (SELECT Pilot_ID FROM pilot_record GROUP BY Pilot_ID HAVING COUNT(*) > 1)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of pilots from the 'pilot' table who are associated with specific teams. The placeholders in the WHERE clause represent the names of the teams being queried.\",\n        \"virtual_table\": \"SELECT Pilot_name FROM pilot WHERE Team  =  [PLACEHOLDER-TYPE:STRING] OR Team  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of pilots grouped by their nationality from the 'pilot' table. The placeholder in the COUNT function allows for dynamic counting of pilots based on their nationality.\",\n        \"virtual_table\": \"SELECT Nationality ,  COUNT(*) FROM pilot GROUP BY Nationality\"\n    }\n}\n",
        "t_2": "SELECT p.Pilot_name\nFROM pilot p\nJOIN pilot_record pr ON p.Pilot_ID = pr.Pilot_ID\nGROUP BY p.Pilot_ID\nHAVING COUNT(pr.Record_ID) > 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT Pilot_name FROM pilot WHERE Pilot_ID IN (SELECT Pilot_ID FROM pilot_record GROUP BY Pilot_ID HAVING COUNT(Record_ID) > 1);",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the fleet series of aircraft flown by pilots who are younger than a specified age. The placeholders in the WHERE clause represent the age limit for filtering the pilots.\",\n        \"virtual_table\": \"SELECT T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID WHERE T3.Age  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2114",
        "c_low": "SELECT document_id FROM Documents WHERE document_status_code = (SELECT document_status_code FROM Ref_Document_Status WHERE document_status_description = 'done') AND document_type_code = (SELECT document_type_code FROM Ref_Document_Types WHERE document_type_description = 'paper');",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names of employees who have been involved in the circulation of a specific document. The placeholder in the WHERE clause represents the unique identifier of the document being referenced.\",\n        \"virtual_table\": \"SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the total count of draft copies associated with a specific document identified by its unique document ID. The placeholder in the query represents the document ID for which the count is being requested.\",\n        \"virtual_table\": \"SELECT count(*) FROM Draft_Copies WHERE document_id = [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "c_mid": "SELECT document_id FROM Documents WHERE document_status_code = (SELECT document_status_code FROM Ref_Document_Status WHERE document_status_description = 'done') AND document_type_code = (SELECT document_type_code FROM Ref_Document_Types WHERE document_type_description = 'paper');",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT document_id FROM Documents WHERE document_status_code = (SELECT document_status_code FROM Ref_Document_Status WHERE document_status_description = 'done') AND document_type_code = (SELECT document_type_code FROM Ref_Document_Types WHERE document_type_description = 'paper');",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the circulation history of documents by counting the distinct number of employees involved in the circulation for each document. The placeholder in the SELECT clause represents the unique identifier of the document, while the count reflects the number of unique employees associated with that document.\",\n        \"virtual_table\": \"SELECT document_id ,  count(DISTINCT employee_id) FROM Circulation_History GROUP BY document_id;\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of copies made for each document from the 'Draft_Copies' table. The result is grouped by the document identifier and ordered by the count of copies in descending order, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_1": "SELECT document_id FROM Documents WHERE document_status_code = (SELECT document_status_code FROM Ref_Document_Status WHERE document_status_code = 'done') AND document_type_code = (SELECT document_type_code FROM Ref_Document_Types WHERE document_type_code = 'paper');",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the circulation history of documents by counting the distinct number of employees involved in the circulation for each document. The placeholder in the SELECT clause represents the unique identifier of the document, while the count reflects the number of unique employees associated with that document.\",\n        \"virtual_table\": \"SELECT document_id ,  count(DISTINCT employee_id) FROM Circulation_History GROUP BY document_id;\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the total count of draft copies associated with a specific document identified by its unique document ID. The placeholder in the query represents the document ID for which the count is being requested.\",\n        \"virtual_table\": \"SELECT count(*) FROM Draft_Copies WHERE document_id = [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the number of copies made for each document from the 'Draft_Copies' table. The result is grouped by the document identifier and ordered by the count of copies in descending order, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_2": "SELECT document_id FROM Documents WHERE document_status_code = (SELECT document_status_code FROM Ref_Document_Status WHERE document_status_description = 'done') AND document_type_code = (SELECT document_type_code FROM Ref_Document_Types WHERE document_type_description = 'paper');",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names of employees who have been involved in the circulation of a specific document. The placeholder in the WHERE clause represents the unique identifier of the document being referenced.\",\n        \"virtual_table\": \"SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_3+": "SELECT document_id FROM Documents WHERE document_status_code = (SELECT document_status_code FROM Ref_Document_Status WHERE document_status_description = 'done') AND document_type_code = (SELECT document_type_code FROM Ref_Document_Types WHERE document_type_description = 'paper');",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2121",
        "c_low": "SELECT document_id FROM Documents \nJOIN Ref_Document_Status ON Documents.document_status_code = Ref_Document_Status.document_status_code \nJOIN Ref_Document_Types ON Documents.document_type_code = Ref_Document_Types.document_type_code \nJOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code \nWHERE Ref_Document_Status.document_status_description = 'done' \nAND Ref_Document_Types.document_type_description = 'Paper' \nAND Ref_Shipping_Agents.shipping_agent_name != 'USPS';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of employees from the 'Employees' table who have not been involved in the circulation of any document. The query uses an EXCEPT clause to exclude those employees whose IDs appear in the 'Circulation_History' table, indicating their participation in document circulation.\",\n        \"virtual_table\": \"SELECT employee_name FROM Employees EXCEPT SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of employees who have been involved in the circulation of a specific document. The placeholder in the WHERE clause represents the unique identifier of the document being referenced.\",\n        \"virtual_table\": \"SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the mailing dates of documents from the 'Documents_Mailed' table based on a specific document identifier. The placeholder in the WHERE clause represents the unique identifier of the document.\",\n        \"virtual_table\": \"SELECT mailing_date FROM Documents_Mailed WHERE document_id = [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "c_mid": "SELECT d.document_id \nFROM Documents d \nJOIN Ref_Document_Status ds ON d.document_status_code = ds.document_status_code \nJOIN Ref_Document_Types dt ON d.document_type_code = dt.document_type_code \nJOIN Ref_Shipping_Agents sa ON d.shipping_agent_code = sa.shipping_agent_code \nWHERE ds.document_status_description = 'done' \nAND dt.document_type_description = 'Paper' \nAND sa.shipping_agent_name != 'USPS';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT Documents.document_id \nFROM Documents \nJOIN Ref_Document_Status ON Documents.document_status_code = Ref_Document_Status.document_status_code \nJOIN Ref_Document_Types ON Documents.document_type_code = Ref_Document_Types.document_type_code \nJOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code \nWHERE Ref_Document_Status.document_status_description = 'done' \nAND Ref_Document_Types.document_type_description = 'Paper' \nAND Ref_Shipping_Agents.shipping_agent_name != 'USPS';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of the number of documents handled by each shipping agent from the 'Ref_Shipping_Agents' table. It counts the documents associated with each shipping agent and orders the results in descending order based on the count. The placeholder in the LIMIT clause allows the user to specify the maximum number of shipping agents to display.\",\n        \"virtual_table\": \"SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_1": "SELECT d.document_id \nFROM Documents d \nJOIN Ref_Document_Status ds ON d.document_status_code = ds.document_status_code \nJOIN Ref_Document_Types dt ON d.document_type_code = dt.document_type_code \nJOIN Ref_Shipping_Agents sa ON d.shipping_agent_code = sa.shipping_agent_code \nWHERE ds.document_status_description = 'done' \nAND dt.document_type_description = 'Paper' \nAND sa.shipping_agent_name != 'USPS';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the mailing dates of documents from the 'Documents_Mailed' table based on a specific document identifier. The placeholder in the WHERE clause represents the unique identifier of the document.\",\n        \"virtual_table\": \"SELECT mailing_date FROM Documents_Mailed WHERE document_id = [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_2": "SELECT Documents.document_id \nFROM Documents \nJOIN Ref_Document_Status ON Documents.document_status_code = Ref_Document_Status.document_status_code \nJOIN Ref_Document_Types ON Documents.document_type_code = Ref_Document_Types.document_type_code \nJOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code \nWHERE Ref_Document_Status.document_status_description = 'done' \nAND Ref_Document_Types.document_type_description = 'Paper' \nAND Ref_Shipping_Agents.shipping_agent_name != 'USPS';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of the number of documents handled by each shipping agent from the 'Ref_Shipping_Agents' table. It counts the documents associated with each shipping agent and orders the results in descending order based on the count. The placeholder in the LIMIT clause allows the user to specify the maximum number of shipping agents to display.\",\n        \"virtual_table\": \"SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of employees from the 'Employees' table who have not been involved in the circulation of any document. The query uses an EXCEPT clause to exclude those employees whose IDs appear in the 'Circulation_History' table, indicating their participation in document circulation.\",\n        \"virtual_table\": \"SELECT employee_name FROM Employees EXCEPT SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names of employees who have been involved in the circulation of a specific document. The placeholder in the WHERE clause represents the unique identifier of the document being referenced.\",\n        \"virtual_table\": \"SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_3+": "SELECT d.document_id \nFROM Documents d \nJOIN Ref_Document_Status ds ON d.document_status_code = ds.document_status_code \nJOIN Ref_Document_Types dt ON d.document_type_code = dt.document_type_code \nJOIN Ref_Shipping_Agents sa ON d.shipping_agent_code = sa.shipping_agent_code \nWHERE ds.document_status_description = 'done' \nAND dt.document_type_description = 'Paper' \nAND sa.shipping_agent_name != 'USPS';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2122",
        "c_low": "SELECT Documents.document_id \nFROM Documents \nJOIN Ref_Document_Status ON Documents.document_status_code = Ref_Document_Status.document_status_code \nJOIN Ref_Document_Types ON Documents.document_type_code = Ref_Document_Types.document_type_code \nJOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code \nWHERE Ref_Document_Status.document_status_description = 'done' \nAND Ref_Document_Types.document_type_description = 'Paper' \nAND Ref_Shipping_Agents.shipping_agent_name = 'USPS';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of documents associated with a specific shipping agent from the 'Ref_Shipping_Agents' table. The placeholder in the WHERE clause represents the name of the shipping agent being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the mailing dates of documents from the 'Documents_Mailed' table based on a specific document identifier. The placeholder in the WHERE clause represents the unique identifier of the document.\",\n        \"virtual_table\": \"SELECT mailing_date FROM Documents_Mailed WHERE document_id = [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names of employees who have been involved in the circulation of a specific document. The placeholder in the WHERE clause represents the unique identifier of the document being referenced.\",\n        \"virtual_table\": \"SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "c_mid": "SELECT d.document_id \nFROM Documents d \nJOIN Ref_Document_Status ds ON d.document_status_code = ds.document_status_code \nJOIN Ref_Document_Types dt ON d.document_type_code = dt.document_type_code \nJOIN Ref_Shipping_Agents sa ON d.shipping_agent_code = sa.shipping_agent_code \nWHERE ds.document_status_description = 'done' \nAND dt.document_type_description = 'Paper' \nAND sa.shipping_agent_name = 'USPS';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT Documents.document_id \nFROM Documents \nJOIN Ref_Document_Status ON Documents.document_status_code = Ref_Document_Status.document_status_code \nJOIN Ref_Document_Types ON Documents.document_type_code = Ref_Document_Types.document_type_code \nJOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code \nWHERE Ref_Document_Status.document_status_description = 'done' \nAND Ref_Document_Types.document_type_description = 'Paper' \nAND Ref_Shipping_Agents.shipping_agent_name = 'USPS';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of the number of documents handled by each shipping agent from the 'Ref_Shipping_Agents' table. It counts the documents associated with each shipping agent and orders the results in descending order based on the count. The placeholder in the LIMIT clause allows the user to specify the maximum number of shipping agents to display.\",\n        \"virtual_table\": \"SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the circulation history of documents by counting the distinct number of employees involved in the circulation for each document. The placeholder in the SELECT clause represents the unique identifier of the document, while the count reflects the number of unique employees associated with that document.\",\n        \"virtual_table\": \"SELECT document_id ,  count(DISTINCT employee_id) FROM Circulation_History GROUP BY document_id;\"\n    }\n}\n",
        "t_1": "SELECT d.document_id \nFROM Documents d \nJOIN Ref_Document_Status ds ON d.document_status_code = ds.document_status_code \nJOIN Ref_Document_Types dt ON d.document_type_code = dt.document_type_code \nJOIN Ref_Shipping_Agents sa ON d.shipping_agent_code = sa.shipping_agent_code \nWHERE ds.document_status_description = 'done' \nAND dt.document_type_description = 'Paper' \nAND sa.shipping_agent_name = 'USPS';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the mailing dates of documents from the 'Documents_Mailed' table based on a specific document identifier. The placeholder in the WHERE clause represents the unique identifier of the document.\",\n        \"virtual_table\": \"SELECT mailing_date FROM Documents_Mailed WHERE document_id = [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the circulation history of documents by counting the distinct number of employees involved in the circulation for each document. The placeholder in the SELECT clause represents the unique identifier of the document, while the count reflects the number of unique employees associated with that document.\",\n        \"virtual_table\": \"SELECT document_id ,  count(DISTINCT employee_id) FROM Circulation_History GROUP BY document_id;\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the total count of draft copies associated with a specific document identified by its unique document ID. The placeholder in the query represents the document ID for which the count is being requested.\",\n        \"virtual_table\": \"SELECT count(*) FROM Draft_Copies WHERE document_id = [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_2": "SELECT Documents.document_id \nFROM Documents \nJOIN Ref_Document_Status ON Documents.document_status_code = Ref_Document_Status.document_status_code \nJOIN Ref_Document_Types ON Documents.document_type_code = Ref_Document_Types.document_type_code \nJOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code \nWHERE Ref_Document_Status.document_status_description = 'done' \nAND Ref_Document_Types.document_type_description = 'Paper' \nAND Ref_Shipping_Agents.shipping_agent_name = 'USPS';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of the number of documents handled by each shipping agent from the 'Ref_Shipping_Agents' table. It counts the documents associated with each shipping agent and orders the results in descending order based on the count. The placeholder in the LIMIT clause allows the user to specify the maximum number of shipping agents to display.\",\n        \"virtual_table\": \"SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of documents associated with a specific shipping agent from the 'Ref_Shipping_Agents' table. The placeholder in the WHERE clause represents the name of the shipping agent being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = [PLACEHOLDER-TYPE:STRING];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names of employees who have been involved in the circulation of a specific document. The placeholder in the WHERE clause represents the unique identifier of the document being referenced.\",\n        \"virtual_table\": \"SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_3+": "SELECT d.document_id \nFROM Documents d \nJOIN Ref_Document_Status ds ON d.document_status_code = ds.document_status_code \nJOIN Ref_Document_Types dt ON d.document_type_code = dt.document_type_code \nJOIN Ref_Shipping_Agents sa ON d.shipping_agent_code = sa.shipping_agent_code \nWHERE ds.document_status_description = 'done' \nAND dt.document_type_description = 'Paper' \nAND sa.shipping_agent_name = 'USPS';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2129",
        "c_low": "SELECT Employees.employee_name, COUNT(DISTINCT Circulation_History.draft_number) AS draft_count, COUNT(DISTINCT Circulation_History.copy_number) AS copy_count \nFROM Employees \nJOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id \nGROUP BY Employees.employee_id \nORDER BY (draft_count + copy_count) DESC \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names of employees who have been involved in the circulation of a specific document. The placeholder in the WHERE clause represents the unique identifier of the document being referenced.\",\n        \"virtual_table\": \"SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of employees from the 'Employees' table who have not been involved in the circulation of any document. The query uses an EXCEPT clause to exclude those employees whose IDs appear in the 'Circulation_History' table, indicating their participation in document circulation.\",\n        \"virtual_table\": \"SELECT employee_name FROM Employees EXCEPT SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the total count of draft copies associated with a specific document identified by its unique document ID. The placeholder in the query represents the document ID for which the count is being requested.\",\n        \"virtual_table\": \"SELECT count(*) FROM Draft_Copies WHERE document_id = [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "c_mid": "SELECT e.employee_name, COUNT(ch.document_id) AS total_circulations\nFROM Employees e\nJOIN Circulation_History ch ON e.employee_id = ch.employee_id\nGROUP BY e.employee_id\nORDER BY total_circulations DESC\nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT e.employee_name, COUNT(DISTINCT ch.draft_number) AS draft_count, COUNT(DISTINCT ch.copy_number) AS copy_count\nFROM Circulation_History ch\nJOIN Employees e ON ch.employee_id = e.employee_id\nGROUP BY e.employee_id\nORDER BY (draft_count + copy_count) DESC\nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the circulation history of documents by counting the distinct number of employees involved in the circulation for each document. The placeholder in the SELECT clause represents the unique identifier of the document, while the count reflects the number of unique employees associated with that document.\",\n        \"virtual_table\": \"SELECT document_id ,  count(DISTINCT employee_id) FROM Circulation_History GROUP BY document_id;\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of draft copies associated with each document from the 'Draft_Copies' table. The placeholder in the HAVING clause represents the minimum count of draft copies that a document must have to be included in the results.\",\n        \"virtual_table\": \"SELECT document_id , count(*) FROM Draft_Copies GROUP BY document_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the number of copies made for each document from the 'Draft_Copies' table. The result is grouped by the document identifier and ordered by the count of copies in descending order, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_1": "SELECT e.employee_name, COUNT(DISTINCT ch.draft_number) AS draft_count, COUNT(DISTINCT ch.copy_number) AS copy_count\nFROM Circulation_History ch\nJOIN Employees e ON ch.employee_id = e.employee_id\nGROUP BY e.employee_id\nORDER BY (draft_count + copy_count) DESC\nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the circulation history of documents by counting the distinct number of employees involved in the circulation for each document. The placeholder in the SELECT clause represents the unique identifier of the document, while the count reflects the number of unique employees associated with that document.\",\n        \"virtual_table\": \"SELECT document_id ,  count(DISTINCT employee_id) FROM Circulation_History GROUP BY document_id;\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of draft copies associated with each document from the 'Draft_Copies' table. The placeholder in the HAVING clause represents the minimum count of draft copies that a document must have to be included in the results.\",\n        \"virtual_table\": \"SELECT document_id , count(*) FROM Draft_Copies GROUP BY document_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the number of copies made for each document from the 'Draft_Copies' table. The result is grouped by the document identifier and ordered by the count of copies in descending order, with a limit on the number of results returned based on a specified number.\",\n        \"virtual_table\": \"SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER];\"\n    }\n}\n",
        "t_2": "SELECT Employees.employee_name, COUNT(DISTINCT Circulation_History.draft_number) AS draft_count, COUNT(DISTINCT Circulation_History.copy_number) AS copy_count\nFROM Employees\nJOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id\nGROUP BY Employees.employee_name\nORDER BY (draft_count + copy_count) DESC\nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names of employees who have been involved in the circulation of a specific document. The placeholder in the WHERE clause represents the unique identifier of the document being referenced.\",\n        \"virtual_table\": \"SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = [PLACEHOLDER-TYPE:NUMBER];\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of employees from the 'Employees' table who have not been involved in the circulation of any document. The query uses an EXCEPT clause to exclude those employees whose IDs appear in the 'Circulation_History' table, indicating their participation in document circulation.\",\n        \"virtual_table\": \"SELECT employee_name FROM Employees EXCEPT SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id\"\n    }\n}\n",
        "t_3+": "SELECT e.employee_name, COUNT(ch.document_id) AS total_circulation\nFROM Employees e\nJOIN Circulation_History ch ON e.employee_id = ch.employee_id\nGROUP BY e.employee_id\nORDER BY total_circulation DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2132",
        "c_low": "SELECT dependent.Dependent_name \nFROM dependent \nJOIN employee ON dependent.Essn = employee.Ssn \nWHERE dependent.Relationship = 'spouse';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of dependents from the 'dependent' table filtered by their gender. The placeholder in the WHERE clause represents the gender of the dependents being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM dependent WHERE sex  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT dependent.Dependent_name \nFROM dependent \nJOIN employee ON dependent.Essn = employee.Ssn \nWHERE dependent.Relationship = 'spouse';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT dependent.Dependent_name \nFROM dependent \nJOIN employee ON dependent.Essn = employee.Ssn \nWHERE dependent.Relationship = 'spouse';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT Dependent_name FROM dependent WHERE Relationship = 'spouse';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of dependents from the 'dependent' table filtered by their gender. The placeholder in the WHERE clause represents the gender of the dependents being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM dependent WHERE sex  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT dependent.Dependent_name \nFROM dependent \nWHERE dependent.Relationship = 'spouse';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT dependent.Dependent_name \nFROM dependent \nJOIN employee ON dependent.Essn = employee.Ssn \nWHERE dependent.Relationship = 'spouse';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2140",
        "c_low": "SELECT P.Participant_ID, P.Participant_Type_Code, COUNT(E.Event_ID) AS Event_Count\nFROM Participants AS P\nJOIN Participants_in_Events AS PE ON P.Participant_ID = PE.Participant_ID\nJOIN Events AS E ON PE.Event_ID = E.Event_ID\nGROUP BY P.Participant_ID, P.Participant_Type_Code;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of participants based on specific details from the 'Participants' table who are involved in events. The placeholder in the WHERE clause allows for filtering participants by their details.\",\n        \"virtual_table\": \"SELECT count(*) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE T1.participant_details LIKE [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the service IDs and event details from the 'Events' table. The placeholder in the SELECT statement allows for the retrieval of specific service IDs and their corresponding event details.\",\n        \"virtual_table\": \"SELECT service_id ,  event_details FROM EVENTS\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the details of events from the 'Events' table that are associated with a specific type of service. The placeholder in the WHERE clause represents the service type code.\",\n        \"virtual_table\": \"SELECT T1.event_details FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID  =  T2.Service_ID WHERE T2.Service_Type_Code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT Participants.Participant_ID, Participants.Participant_Type_Code, COUNT(Participants_in_Events.Event_ID) AS Event_Count\nFROM Participants\nLEFT JOIN Participants_in_Events ON Participants.Participant_ID = Participants_in_Events.Participant_ID\nGROUP BY Participants.Participant_ID, Participants.Participant_Type_Code;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT P.Participant_ID, P.Participant_Type_Code, COUNT(E.Event_ID) AS Event_Count\nFROM Participants AS P\nJOIN Participants_in_Events AS PE ON P.Participant_ID = PE.Participant_ID\nJOIN Events AS E ON PE.Event_ID = E.Event_ID\nGROUP BY P.Participant_ID, P.Participant_Type_Code;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of event IDs and their corresponding details from the 'Events' table, specifically for events that have a number of participants exceeding a specified threshold. The placeholder in the HAVING clause represents the minimum count of participants required for the event to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of service IDs along with their corresponding service type codes from the 'Services' table. The data is aggregated based on the number of participants involved in each event, allowing for an ordered view of services with the least participation. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT T3.service_id ,  T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID   =  T3.Event_ID JOIN services AS T4 ON T3.service_id  =  T4.service_id GROUP BY T3.service_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT p.Participant_ID, p.Participant_Type_Code, COUNT(pe.Event_ID) AS Event_Count\nFROM Participants p\nJOIN Participants_in_Events pe ON p.Participant_ID = pe.Participant_ID\nGROUP BY p.Participant_ID, p.Participant_Type_Code;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the service IDs and event details from the 'Events' table. The placeholder in the SELECT statement allows for the retrieval of specific service IDs and their corresponding event details.\",\n        \"virtual_table\": \"SELECT service_id ,  event_details FROM EVENTS\"\n    }\n}\n",
        "t_2": "SELECT P.Participant_ID, P.Participant_Type_Code, COUNT(E.Event_ID) AS Event_Count\nFROM Participants AS P\nJOIN Participants_in_Events AS PE ON P.Participant_ID = PE.Participant_ID\nJOIN Events AS E ON PE.Event_ID = E.Event_ID\nGROUP BY P.Participant_ID, P.Participant_Type_Code;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of participants based on specific details from the 'Participants' table who are involved in events. The placeholder in the WHERE clause allows for filtering participants by their details.\",\n        \"virtual_table\": \"SELECT count(*) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE T1.participant_details LIKE [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of event IDs and their corresponding details from the 'Events' table, specifically for events that have a number of participants exceeding a specified threshold. The placeholder in the HAVING clause represents the minimum count of participants required for the event to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the details of events from the 'Events' table that are associated with a specific type of service. The placeholder in the WHERE clause represents the service type code.\",\n        \"virtual_table\": \"SELECT T1.event_details FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID  =  T2.Service_ID WHERE T2.Service_Type_Code  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT P.Participant_ID, P.Participant_Type_Code, COUNT(E.Event_ID) AS Number_of_Events\nFROM Participants AS P\nJOIN Participants_in_Events AS PE ON P.Participant_ID = PE.Participant_ID\nJOIN Events AS E ON PE.Event_ID = E.Event_ID\nGROUP BY P.Participant_ID, P.Participant_Type_Code;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of service IDs along with their corresponding service type codes from the 'Services' table. The data is aggregated based on the number of participants involved in each event, allowing for an ordered view of services with the least participation. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT T3.service_id ,  T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID   =  T3.Event_ID JOIN services AS T4 ON T3.service_id  =  T4.service_id GROUP BY T3.service_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2146",
        "c_low": "SELECT Participant_Type_Code, COUNT(*) as Count FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY Participant_Type_Code ORDER BY Count DESC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of participants based on specific details from the 'Participants' table who are involved in events. The placeholder in the WHERE clause allows for filtering participants by their details.\",\n        \"virtual_table\": \"SELECT count(*) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE T1.participant_details LIKE [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT Participant_Type_Code, COUNT(*) as Count\nFROM Participants\nGROUP BY Participant_Type_Code\nORDER BY Count DESC\nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT Participant_Type_Code, COUNT(*) as count FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY Participant_Type_Code ORDER BY count DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of service IDs along with their corresponding service type codes from the 'Services' table. The data is aggregated based on the number of participants involved in each event, allowing for an ordered view of services with the least participation. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT T3.service_id ,  T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID   =  T3.Event_ID JOIN services AS T4 ON T3.service_id  =  T4.service_id GROUP BY T3.service_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Participant_Type_Code, COUNT(*) as Count\nFROM Participants\nGROUP BY Participant_Type_Code\nORDER BY Count DESC\nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT Participant_Type_Code, COUNT(*) as Count FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY Participant_Type_Code ORDER BY Count DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of participants based on specific details from the 'Participants' table who are involved in events. The placeholder in the WHERE clause allows for filtering participants by their details.\",\n        \"virtual_table\": \"SELECT count(*) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE T1.participant_details LIKE [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Participant_Type_Code, COUNT(*) as count FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY Participant_Type_Code ORDER BY count DESC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of service IDs along with their corresponding service type codes from the 'Services' table. The data is aggregated based on the number of participants involved in each event, allowing for an ordered view of services with the least participation. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT T3.service_id ,  T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID   =  T3.Event_ID JOIN services AS T4 ON T3.service_id  =  T4.service_id GROUP BY T3.service_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2149",
        "c_low": "SELECT Events.Event_ID \nFROM Events \nLEFT JOIN Participants_in_Events ON Events.Event_ID = Participants_in_Events.Event_ID \nLEFT JOIN Participants ON Participants_in_Events.Participant_ID = Participants.Participant_ID \nWHERE Participants.Participant_Details != 'Kenyatta Kuhn' OR Participants.Participant_ID IS NULL;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Events.Event_ID \nFROM Events \nLEFT JOIN Participants_in_Events ON Events.Event_ID = Participants_in_Events.Event_ID \nLEFT JOIN Participants ON Participants_in_Events.Participant_ID = Participants.Participant_ID \nWHERE Participants.Participant_Details != 'Kenyatta Kuhn' OR Participants.Participant_ID IS NULL;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT E.Event_ID \nFROM Events AS E \nLEFT JOIN Participants_in_Events AS P_E ON E.Event_ID = P_E.Event_ID \nLEFT JOIN Participants AS P ON P_E.Participant_ID = P.Participant_ID \nWHERE P.Participant_Details != 'Kenyatta Kuhn' OR P.Participant_Details IS NULL \nGROUP BY E.Event_ID \nHAVING COUNT(P.Participant_ID) = 0;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of event IDs and their corresponding details from the 'Events' table, specifically for events that have a number of participants exceeding a specified threshold. The placeholder in the HAVING clause represents the minimum count of participants required for the event to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Events.Event_ID \nFROM Events \nLEFT JOIN Participants_in_Events ON Events.Event_ID = Participants_in_Events.Event_ID \nLEFT JOIN Participants ON Participants_in_Events.Participant_ID = Participants.Participant_ID \nWHERE Participants.Participant_Details != 'Kenyatta Kuhn' OR Participants.Participant_ID IS NULL;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT E.Event_ID \nFROM Events AS E \nLEFT JOIN Participants_in_Events AS P_E ON E.Event_ID = P_E.Event_ID \nLEFT JOIN Participants AS P ON P_E.Participant_ID = P.Participant_ID \nWHERE P.Participant_Details != 'Kenyatta Kuhn' OR P.Participant_Details IS NULL \nGROUP BY E.Event_ID \nHAVING COUNT(P.Participant_ID) = 0;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of event IDs and their corresponding details from the 'Events' table, specifically for events that have a number of participants exceeding a specified threshold. The placeholder in the HAVING clause represents the minimum count of participants required for the event to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Events.Event_ID\nFROM Events\nLEFT JOIN Participants_in_Events ON Events.Event_ID = Participants_in_Events.Event_ID\nLEFT JOIN Participants ON Participants_in_Events.Participant_ID = Participants.Participant_ID\nWHERE Participants.Participant_Details != 'Kenyatta Kuhn' OR Participants.Participant_ID IS NULL;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2150",
        "c_low": "SELECT DISTINCT T2.Service_Type_Code \nFROM Services AS T2 \nJOIN Events AS T1 ON T1.Service_ID = T2.Service_ID \nWHERE T1.Event_Details IN ('successful', 'failure') \nGROUP BY T2.Service_Type_Code \nHAVING COUNT(DISTINCT T1.Event_Details) = 2;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the details of events from the 'Events' table that are associated with a specific type of service. The placeholder in the WHERE clause represents the service type code.\",\n        \"virtual_table\": \"SELECT T1.event_details FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID  =  T2.Service_ID WHERE T2.Service_Type_Code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the service IDs and event details from the 'Events' table. The placeholder in the SELECT statement allows for the retrieval of specific service IDs and their corresponding event details.\",\n        \"virtual_table\": \"SELECT service_id ,  event_details FROM EVENTS\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT s.Service_Type_Code\nFROM Services s\nJOIN Events e ON s.Service_ID = e.Service_ID\nWHERE e.Event_Details IN ('successful', 'failure')\nGROUP BY s.Service_Type_Code\nHAVING COUNT(DISTINCT e.Event_Details) = 2;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT DISTINCT S.Service_Type_Code \nFROM Services AS S \nJOIN Events AS E ON S.Service_ID = E.Service_ID \nWHERE E.Event_Details IN ('successful', 'failure') \nGROUP BY S.Service_Type_Code \nHAVING COUNT(DISTINCT E.Event_Details) = 2;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of service IDs along with their corresponding service type codes from the 'Services' table. The data is aggregated based on the number of participants involved in each event, allowing for an ordered view of services with the least participation. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT T3.service_id ,  T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID   =  T3.Event_ID JOIN services AS T4 ON T3.service_id  =  T4.service_id GROUP BY T3.service_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of event IDs and their corresponding details from the 'Events' table, specifically for events that have a number of participants exceeding a specified threshold. The placeholder in the HAVING clause represents the minimum count of participants required for the event to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Service_Type_Code \nFROM Services \nWHERE Service_ID IN (\n    SELECT Service_ID \n    FROM Events \n    WHERE Event_Details IN ('successful', 'failure') \n    GROUP BY Service_ID \n    HAVING COUNT(DISTINCT Event_Details) = 2\n)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the service IDs and event details from the 'Events' table. The placeholder in the SELECT statement allows for the retrieval of specific service IDs and their corresponding event details.\",\n        \"virtual_table\": \"SELECT service_id ,  event_details FROM EVENTS\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT T2.Service_Type_Code \nFROM Services AS T2 \nJOIN Events AS T1 ON T1.Service_ID = T2.Service_ID \nWHERE T1.Event_Details IN ('successful', 'failure') \nGROUP BY T2.Service_Type_Code \nHAVING COUNT(DISTINCT T1.Event_Details) = 2;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the details of events from the 'Events' table that are associated with a specific type of service. The placeholder in the WHERE clause represents the service type code.\",\n        \"virtual_table\": \"SELECT T1.event_details FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID  =  T2.Service_ID WHERE T2.Service_Type_Code  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of event IDs and their corresponding details from the 'Events' table, specifically for events that have a number of participants exceeding a specified threshold. The placeholder in the HAVING clause represents the minimum count of participants required for the event to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT T4.Service_Type_Code FROM Events AS T3 JOIN Services AS T4 ON T3.Service_ID = T4.Service_ID WHERE T3.Event_Details IN ('successful', 'failure') GROUP BY T4.Service_Type_Code HAVING COUNT(DISTINCT T3.Event_Details) = 2;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of service IDs along with their corresponding service type codes from the 'Services' table. The data is aggregated based on the number of participants involved in each event, allowing for an ordered view of services with the least participation. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT T3.service_id ,  T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID   =  T3.Event_ID JOIN services AS T4 ON T3.service_id  =  T4.service_id GROUP BY T3.service_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2152",
        "c_low": "SELECT DISTINCT Participant_ID FROM Participants_in_Events;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of participants based on specific details from the 'Participants' table who are involved in events. The placeholder in the WHERE clause allows for filtering participants by their details.\",\n        \"virtual_table\": \"SELECT count(*) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE T1.participant_details LIKE [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the service IDs and event details from the 'Events' table. The placeholder in the SELECT statement allows for the retrieval of specific service IDs and their corresponding event details.\",\n        \"virtual_table\": \"SELECT service_id ,  event_details FROM EVENTS\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT Participant_ID FROM Participants_in_Events;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT DISTINCT Participant_ID FROM Participants_in_Events;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of event IDs and their corresponding details from the 'Events' table, specifically for events that have a number of participants exceeding a specified threshold. The placeholder in the HAVING clause represents the minimum count of participants required for the event to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of service IDs along with their corresponding service type codes from the 'Services' table. The data is aggregated based on the number of participants involved in each event, allowing for an ordered view of services with the least participation. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT T3.service_id ,  T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID   =  T3.Event_ID JOIN services AS T4 ON T3.service_id  =  T4.service_id GROUP BY T3.service_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT Participant_ID FROM Participants_in_Events;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the service IDs and event details from the 'Events' table. The placeholder in the SELECT statement allows for the retrieval of specific service IDs and their corresponding event details.\",\n        \"virtual_table\": \"SELECT service_id ,  event_details FROM EVENTS\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT Participant_ID FROM Participants_in_Events;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of event IDs and their corresponding details from the 'Events' table, specifically for events that have a number of participants exceeding a specified threshold. The placeholder in the HAVING clause represents the minimum count of participants required for the event to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of participants based on specific details from the 'Participants' table who are involved in events. The placeholder in the WHERE clause allows for filtering participants by their details.\",\n        \"virtual_table\": \"SELECT count(*) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE T1.participant_details LIKE [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT Participant_ID FROM Participants_in_Events;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of service IDs along with their corresponding service type codes from the 'Services' table. The data is aggregated based on the number of participants involved in each event, allowing for an ordered view of services with the least participation. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT T3.service_id ,  T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID   =  T3.Event_ID JOIN services AS T4 ON T3.service_id  =  T4.service_id GROUP BY T3.service_id ORDER BY count(*) ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2167",
        "c_low": "SELECT drivers.driverId, drivers.surname\nFROM lapTimes\nJOIN drivers ON lapTimes.driverId = drivers.driverId\nORDER BY lapTimes.time DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT T1.driverId, T1.surname FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.time = (SELECT MAX(time) FROM lapTimes)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique first and last names of drivers from the 'drivers' table who have completed a lap in less than a specified time. The placeholder in the WHERE clause represents the maximum lap time in milliseconds that a driver must achieve to be included in the results.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique driver IDs and their nationalities from the 'drivers' table, filtered by lap times recorded in the 'lapTimes' table. The condition specifies that only drivers with lap times exceeding a certain duration, represented by a placeholder for numeric values, will be included.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of drivers along with their surnames from the 'drivers' table, who have participated in races. The results are grouped by driver ID and ordered by the number of races they have participated in, allowing users to see the most active drivers. The placeholder in the LIMIT clause represents the maximum number of drivers to be displayed.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT T1.driverId, T1.surname FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId ORDER BY T2.time DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the forename and surname of drivers from the 'drivers' table who have achieved a specific finishing position in their lap times. The placeholders in the WHERE clause represent the desired position and the minimum count of laps completed by the driver.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the surnames and unique identifiers of drivers who have made a specific number of pit stops and have also achieved a greater number of race results. The placeholders in the HAVING clauses represent the counts of pit stops and race results respectively.\",\n        \"virtual_table\": \"SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a summary of drivers from the 'drivers' table, including their unique identifier and first name, along with a count of the number of races they have participated in. The results are filtered to include only those drivers who have participated in a specified minimum number of races, represented by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT drivers.driverId, drivers.surname\nFROM lapTimes\nJOIN drivers ON lapTimes.driverId = drivers.driverId\nORDER BY lapTimes.time DESC\nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T1.driverId, T1.surname FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.time = (SELECT MAX(T3.time) FROM lapTimes AS T3)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique first and last names of drivers from the 'drivers' table who have completed a lap in less than a specified time. The placeholder in the WHERE clause represents the maximum lap time in milliseconds that a driver must achieve to be included in the results.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the forename and surname of drivers from the 'drivers' table who have achieved a specific finishing position in their lap times. The placeholders in the WHERE clause represent the desired position and the minimum count of laps completed by the driver.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique driver IDs and their nationalities from the 'drivers' table, filtered by lap times recorded in the 'lapTimes' table. The condition specifies that only drivers with lap times exceeding a certain duration, represented by a placeholder for numeric values, will be included.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT driverId, surname FROM drivers AS D JOIN lapTimes AS L ON D.driverId = L.driverId WHERE L.time = (SELECT MAX(time) FROM lapTimes)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the surnames and unique identifiers of drivers who have made a specific number of pit stops and have also achieved a greater number of race results. The placeholders in the HAVING clauses represent the counts of pit stops and race results respectively.\",\n        \"virtual_table\": \"SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of drivers along with their surnames from the 'drivers' table, who have participated in races. The results are grouped by driver ID and ordered by the number of races they have participated in, allowing users to see the most active drivers. The placeholder in the LIMIT clause represents the maximum number of drivers to be displayed.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a summary of drivers from the 'drivers' table, including their unique identifier and first name, along with a count of the number of races they have participated in. The results are filtered to include only those drivers who have participated in a specified minimum number of races, represented by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2168",
        "c_low": "SELECT driverId, surname FROM results JOIN drivers ON results.driverId = drivers.driverId ORDER BY time DESC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT T1.driverId, T1.surname FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.milliseconds = (SELECT MAX(milliseconds) FROM lapTimes)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique first and last names of drivers from the 'drivers' table who have completed a lap in less than a specified time. The placeholder in the WHERE clause represents the maximum lap time in milliseconds that a driver must achieve to be included in the results.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique driver IDs and their nationalities from the 'drivers' table, filtered by lap times recorded in the 'lapTimes' table. The condition specifies that only drivers with lap times exceeding a certain duration, represented by a placeholder for numeric values, will be included.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of drivers along with their surnames from the 'drivers' table, who have participated in races. The results are grouped by driver ID and ordered by the number of races they have participated in, allowing users to see the most active drivers. The placeholder in the LIMIT clause represents the maximum number of drivers to be displayed.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT T1.driverId, T1.surname FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId ORDER BY T2.time DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the forename and surname of drivers from the 'drivers' table who have achieved a specific finishing position in their lap times. The placeholders in the WHERE clause represent the desired position and the minimum count of laps completed by the driver.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the surnames and unique identifiers of drivers who have made a specific number of pit stops and have also achieved a greater number of race results. The placeholders in the HAVING clauses represent the counts of pit stops and race results respectively.\",\n        \"virtual_table\": \"SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of drivers who have participated in more than a specified number of pit stops or race results. It includes the drivers' first names, last names, and unique identifiers. The placeholders in the HAVING clause represent the minimum count of pit stops or race results required for inclusion in the results.\",\n        \"virtual_table\": \"SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER] UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT driverId, surname FROM results JOIN drivers ON results.driverId = drivers.driverId ORDER BY time DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T1.driverId, T1.surname FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.milliseconds = (SELECT MAX(milliseconds) FROM lapTimes)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique first and last names of drivers from the 'drivers' table who have completed a lap in less than a specified time. The placeholder in the WHERE clause represents the maximum lap time in milliseconds that a driver must achieve to be included in the results.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the forename and surname of drivers from the 'drivers' table who have achieved a specific finishing position in their lap times. The placeholders in the WHERE clause represent the desired position and the minimum count of laps completed by the driver.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique driver IDs and their nationalities from the 'drivers' table, filtered by lap times recorded in the 'lapTimes' table. The condition specifies that only drivers with lap times exceeding a certain duration, represented by a placeholder for numeric values, will be included.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT driverId, surname FROM results JOIN lapTimes ON results.raceId = lapTimes.raceId AND results.driverId = lapTimes.driverId ORDER BY lapTimes.time DESC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the surnames and unique identifiers of drivers who have made a specific number of pit stops and have also achieved a greater number of race results. The placeholders in the HAVING clauses represent the counts of pit stops and race results respectively.\",\n        \"virtual_table\": \"SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of drivers along with their surnames from the 'drivers' table, who have participated in races. The results are grouped by driver ID and ordered by the number of races they have participated in, allowing users to see the most active drivers. The placeholder in the LIMIT clause represents the maximum number of drivers to be displayed.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of drivers who have participated in more than a specified number of pit stops or race results. It includes the drivers' first names, last names, and unique identifiers. The placeholders in the HAVING clause represent the minimum count of pit stops or race results required for inclusion in the results.\",\n        \"virtual_table\": \"SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER] UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2173",
        "c_low": "SELECT COUNT(DISTINCT d.driverId) AS drivers_not_participated\nFROM drivers d\nWHERE d.driverId NOT IN (\n    SELECT r.driverId\n    FROM results r\n    JOIN races ra ON r.raceId = ra.raceId\n    WHERE ra.year = 2009\n);",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT COUNT(*) AS drivers_not_participated FROM drivers WHERE driverId NOT IN (SELECT DISTINCT T1.driverId FROM results AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2009)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of drivers along with their surnames from the 'drivers' table, who have participated in races. The results are grouped by driver ID and ordered by the number of races they have participated in, allowing users to see the most active drivers. The placeholder in the LIMIT clause represents the maximum number of drivers to be displayed.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique race names from the 'races' table that were held at circuits located in a specific country and after a certain year. The placeholders in the WHERE clause represent the country name and the year threshold.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = [PLACEHOLDER-TYPE:STRING] AND T1.year > [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique driver IDs and their nationalities from the 'drivers' table, filtered by lap times recorded in the 'lapTimes' table. The condition specifies that only drivers with lap times exceeding a certain duration, represented by a placeholder for numeric values, will be included.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT COUNT(*) FROM drivers AS T1 WHERE T1.driverId NOT IN (SELECT T2.driverId FROM results AS T2 JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2009)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of drivers from the 'drivers' table, including their unique identifier and first name, along with a count of the number of races they have participated in. The results are filtered to include only those drivers who have participated in a specified minimum number of races, represented by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of driver IDs and surnames from the 'drivers' table who have participated in races held after a specified year. The results are filtered based on the race year and grouped by driver ID to count the number of races each driver has participated in. The output is ordered by the count of races in descending order, and a limit is applied to restrict the number of results returned.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of race results for each driver from the 'drivers' table, filtered to show only those drivers who have participated in a number of races less than or equal to a specified limit. The placeholder in the HAVING clause represents the maximum number of races a driver can have participated in.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT COUNT(DISTINCT d.driverId) AS non_participating_drivers\nFROM drivers d\nWHERE d.driverId NOT IN (\n    SELECT r.driverId\n    FROM results r\n    JOIN races ra ON r.raceId = ra.raceId\n    WHERE ra.year = 2009\n);",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT COUNT(*) AS drivers_not_participated FROM drivers WHERE driverId NOT IN (SELECT DISTINCT driverId FROM results WHERE raceId IN (SELECT raceId FROM races WHERE year = 2009));",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique race names from the 'races' table that were held at circuits located in a specific country and after a certain year. The placeholders in the WHERE clause represent the country name and the year threshold.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = [PLACEHOLDER-TYPE:STRING] AND T1.year > [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the forename and surname of drivers from the 'drivers' table who have achieved a specific finishing position in their lap times. The placeholders in the WHERE clause represent the desired position and the minimum count of laps completed by the driver.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique driver IDs and their nationalities from the 'drivers' table, filtered by lap times recorded in the 'lapTimes' table. The condition specifies that only drivers with lap times exceeding a certain duration, represented by a placeholder for numeric values, will be included.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(*) FROM drivers AS T1 WHERE T1.driverId NOT IN (SELECT T2.driverId FROM results AS T2 JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2009)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of drivers from the 'drivers' table, including their unique identifier and first name, along with a count of the number of races they have participated in. The results are filtered to include only those drivers who have participated in a specified minimum number of races, represented by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of driver IDs and surnames from the 'drivers' table who have participated in races held after a specified year. The results are filtered based on the race year and grouped by driver ID to count the number of races each driver has participated in. The output is ordered by the count of races in descending order, and a limit is applied to restrict the number of results returned.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of race results for each driver from the 'drivers' table, filtered to show only those drivers who have participated in a number of races less than or equal to a specified limit. The placeholder in the HAVING clause represents the maximum number of races a driver can have participated in.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2174",
        "c_low": "SELECT COUNT(DISTINCT driverId) AS drivers_not_raced_in_2009\nFROM drivers\nWHERE driverId NOT IN (\n    SELECT DISTINCT driverId\n    FROM results\n    JOIN races ON results.raceId = races.raceId\n    WHERE races.year = 2009\n);",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT COUNT(DISTINCT driverId) AS drivers_not_raced_in_2009 FROM drivers WHERE driverId NOT IN (SELECT DISTINCT driverId FROM results JOIN races ON results.raceId = races.raceId WHERE races.year = 2009);",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of drivers along with their surnames from the 'drivers' table, who have participated in races. The results are grouped by driver ID and ordered by the number of races they have participated in, allowing users to see the most active drivers. The placeholder in the LIMIT clause represents the maximum number of drivers to be displayed.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique driver IDs and their nationalities from the 'drivers' table, filtered by lap times recorded in the 'lapTimes' table. The condition specifies that only drivers with lap times exceeding a certain duration, represented by a placeholder for numeric values, will be included.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique race names from the 'races' table that were held at circuits located in a specific country and after a certain year. The placeholders in the WHERE clause represent the country name and the year threshold.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = [PLACEHOLDER-TYPE:STRING] AND T1.year > [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT COUNT(*) FROM drivers AS T1 WHERE T1.driverId NOT IN (SELECT T2.driverId FROM results AS T2 JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2009)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of drivers from the 'drivers' table, including their unique identifier and first name, along with a count of the number of races they have participated in. The results are filtered to include only those drivers who have participated in a specified minimum number of races, represented by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of driver IDs and surnames from the 'drivers' table who have participated in races held after a specified year. The results are filtered based on the race year and grouped by driver ID to count the number of races each driver has participated in. The output is ordered by the count of races in descending order, and a limit is applied to restrict the number of results returned.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of race results for each driver from the 'drivers' table, filtered to show only those drivers who have participated in a number of races less than or equal to a specified limit. The placeholder in the HAVING clause represents the maximum number of races a driver can have participated in.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT COUNT(DISTINCT d.driverId) AS drivers_not_raced_in_2009\nFROM drivers d\nLEFT JOIN results r ON d.driverId = r.driverId AND r.year = 2009\nWHERE r.driverId IS NULL;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT COUNT(DISTINCT driverId) AS drivers_not_raced_in_2009 FROM drivers WHERE driverId NOT IN (SELECT DISTINCT driverId FROM results WHERE raceId IN (SELECT raceId FROM races WHERE year = 2009));",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique driver IDs and their nationalities from the 'drivers' table, filtered by lap times recorded in the 'lapTimes' table. The condition specifies that only drivers with lap times exceeding a certain duration, represented by a placeholder for numeric values, will be included.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the forename and surname of drivers from the 'drivers' table who have achieved a specific finishing position in their lap times. The placeholders in the WHERE clause represent the desired position and the minimum count of laps completed by the driver.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique race names from the 'races' table that were held at circuits located in a specific country and after a certain year. The placeholders in the WHERE clause represent the country name and the year threshold.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = [PLACEHOLDER-TYPE:STRING] AND T1.year > [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(*) FROM drivers AS T1 WHERE T1.driverId NOT IN (SELECT T2.driverId FROM results AS T2 JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2009)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of drivers from the 'drivers' table, including their unique identifier and first name, along with a count of the number of races they have participated in. The results are filtered to include only those drivers who have participated in a specified minimum number of races, represented by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of driver IDs and surnames from the 'drivers' table who have participated in races held after a specified year. The results are filtered based on the race year and grouped by driver ID to count the number of races each driver has participated in. The output is ordered by the count of races in descending order, and a limit is applied to restrict the number of results returned.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of race results for each driver from the 'drivers' table, filtered to show only those drivers who have participated in a number of races less than or equal to a specified limit. The placeholder in the HAVING clause represents the maximum number of races a driver can have participated in.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2176",
        "c_low": "SELECT races.name, races.year \nFROM races \nJOIN results ON races.raceId = results.raceId \nJOIN drivers ON results.driverId = drivers.driverId \nWHERE drivers.surname = 'Lewis';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT DISTINCT T3.name, T1.year \nFROM races AS T1 \nJOIN results AS T2 ON T1.raceId = T2.raceId \nJOIN drivers AS T3 ON T2.driverId = T3.driverId \nWHERE T3.surname = 'Lewis'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of drivers along with their surnames from the 'drivers' table, who have participated in races. The results are grouped by driver ID and ordered by the number of races they have participated in, allowing users to see the most active drivers. The placeholder in the LIMIT clause represents the maximum number of drivers to be displayed.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique first and last names of drivers from the 'drivers' table who have completed a lap in less than a specified time. The placeholder in the WHERE clause represents the maximum lap time in milliseconds that a driver must achieve to be included in the results.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique race names from the 'races' table that were held at circuits located in a specific country and after a certain year. The placeholders in the WHERE clause represent the country name and the year threshold.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = [PLACEHOLDER-TYPE:STRING] AND T1.year > [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT races.name, races.year FROM races JOIN results ON races.raceId = results.raceId JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.surname = 'Lewis';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of drivers from the 'drivers' table, including their unique identifier and first name, along with a count of the number of races they have participated in. The results are filtered to include only those drivers who have participated in a specified minimum number of races, represented by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of driver IDs and surnames from the 'drivers' table who have participated in races held after a specified year. The results are filtered based on the race year and grouped by driver ID to count the number of races each driver has participated in. The output is ordered by the count of races in descending order, and a limit is applied to restrict the number of results returned.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the forename and surname of drivers from the 'drivers' table who have achieved a specific finishing position in their lap times. The placeholders in the WHERE clause represent the desired position and the minimum count of laps completed by the driver.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT races.name, races.year \nFROM races \nJOIN results ON races.raceId = results.raceId \nJOIN drivers ON results.driverId = drivers.driverId \nWHERE drivers.surname = 'Lewis';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT DISTINCT races.name, races.year \nFROM races \nJOIN results ON races.raceId = results.raceId \nJOIN drivers ON results.driverId = drivers.driverId \nWHERE drivers.surname = 'Lewis';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique first and last names of drivers from the 'drivers' table who have completed a lap in less than a specified time. The placeholder in the WHERE clause represents the maximum lap time in milliseconds that a driver must achieve to be included in the results.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the forename and surname of drivers from the 'drivers' table who have achieved a specific finishing position in their lap times. The placeholders in the WHERE clause represent the desired position and the minimum count of laps completed by the driver.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique race names from the 'races' table that were held at circuits located in a specific country and after a certain year. The placeholders in the WHERE clause represent the country name and the year threshold.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = [PLACEHOLDER-TYPE:STRING] AND T1.year > [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT races.name, races.year FROM races JOIN results ON races.raceId = results.raceId JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.surname = 'Lewis';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of drivers from the 'drivers' table, including their unique identifier and first name, along with a count of the number of races they have participated in. The results are filtered to include only those drivers who have participated in a specified minimum number of races, represented by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of driver IDs and surnames from the 'drivers' table who have participated in races held after a specified year. The results are filtered based on the race year and grouped by driver ID to count the number of races each driver has participated in. The output is ordered by the count of races in descending order, and a limit is applied to restrict the number of results returned.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of drivers along with their surnames from the 'drivers' table, who have participated in races. The results are grouped by driver ID and ordered by the number of races they have participated in, allowing users to see the most active drivers. The placeholder in the LIMIT clause represents the maximum number of drivers to be displayed.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2179",
        "c_low": "SELECT d.driverId, d.forename\nFROM drivers d\nJOIN results r1 ON d.driverId = r1.driverId\nJOIN races ra1 ON r1.raceId = ra1.raceId\nJOIN results r2 ON d.driverId = r2.driverId\nJOIN races ra2 ON r2.raceId = ra2.raceId\nWHERE ra1.name = 'Australian Grand Prix' AND ra2.name = 'Chinese Grand Prix'",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT DISTINCT d.driverId, d.forename \nFROM drivers AS d \nJOIN results AS r ON d.driverId = r.driverId \nJOIN races AS ra ON r.raceId = ra.raceId \nWHERE ra.name IN ('Australian Grand Prix', 'Chinese Grand Prix') \nGROUP BY d.driverId \nHAVING COUNT(DISTINCT ra.name) = 2;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of drivers along with their surnames from the 'drivers' table, who have participated in races. The results are grouped by driver ID and ordered by the number of races they have participated in, allowing users to see the most active drivers. The placeholder in the LIMIT clause represents the maximum number of drivers to be displayed.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique driver IDs and their nationalities from the 'drivers' table, filtered by lap times recorded in the 'lapTimes' table. The condition specifies that only drivers with lap times exceeding a certain duration, represented by a placeholder for numeric values, will be included.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique race names from the 'races' table that were held at circuits located in a specific country and after a certain year. The placeholders in the WHERE clause represent the country name and the year threshold.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = [PLACEHOLDER-TYPE:STRING] AND T1.year > [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT d.driverId, d.forename \nFROM drivers AS d \nJOIN results AS r ON d.driverId = r.driverId \nJOIN races AS ra ON r.raceId = ra.raceId \nWHERE ra.name IN ('Australian Grand Prix', 'Chinese Grand Prix') \nGROUP BY d.driverId \nHAVING COUNT(DISTINCT ra.name) = 2;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of driver IDs and surnames from the 'drivers' table who have participated in races held after a specified year. The results are filtered based on the race year and grouped by driver ID to count the number of races each driver has participated in. The output is ordered by the count of races in descending order, and a limit is applied to restrict the number of results returned.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a summary of drivers from the 'drivers' table, including their unique identifier and first name, along with a count of the number of races they have participated in. The results are filtered to include only those drivers who have participated in a specified minimum number of races, represented by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the forename and surname of drivers from the 'drivers' table who have achieved a specific finishing position in their lap times. The placeholders in the WHERE clause represent the desired position and the minimum count of laps completed by the driver.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT d.driverId, d.forename\nFROM drivers d\nJOIN results r1 ON d.driverId = r1.driverId\nJOIN races ra ON r1.raceId = ra.raceId\nWHERE ra.name = 'Australian Grand Prix'\nAND d.driverId IN (\n    SELECT r2.driverId\n    FROM results r2\n    JOIN races rb ON r2.raceId = rb.raceId\n    WHERE rb.name = 'Chinese Grand Prix'\n)\nGROUP BY d.driverId, d.forename;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT d.driverId, d.forename \nFROM drivers AS d \nJOIN results AS r1 ON d.driverId = r1.driverId \nJOIN races AS ra ON r1.raceId = ra.raceId \nWHERE ra.name = 'Australian Grand Prix' \nAND d.driverId IN (\n    SELECT d2.driverId \n    FROM drivers AS d2 \n    JOIN results AS r2 ON d2.driverId = r2.driverId \n    JOIN races AS rb ON r2.raceId = rb.raceId \n    WHERE rb.name = 'Chinese Grand Prix'\n) \nGROUP BY d.driverId;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the forename and surname of drivers from the 'drivers' table who have achieved a specific finishing position in their lap times. The placeholders in the WHERE clause represent the desired position and the minimum count of laps completed by the driver.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique driver IDs and their nationalities from the 'drivers' table, filtered by lap times recorded in the 'lapTimes' table. The condition specifies that only drivers with lap times exceeding a certain duration, represented by a placeholder for numeric values, will be included.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique race names from the 'races' table that were held at circuits located in a specific country and after a certain year. The placeholders in the WHERE clause represent the country name and the year threshold.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = [PLACEHOLDER-TYPE:STRING] AND T1.year > [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT d.driverId, d.forename \nFROM drivers AS d \nJOIN results AS r1 ON d.driverId = r1.driverId \nJOIN races AS ra1 ON r1.raceId = ra1.raceId \nWHERE ra1.name = 'Australian Grand Prix' \nAND d.driverId IN (\n    SELECT d2.driverId \n    FROM drivers AS d2 \n    JOIN results AS r2 ON d2.driverId = r2.driverId \n    JOIN races AS ra2 ON r2.raceId = ra2.raceId \n    WHERE ra2.name = 'Chinese Grand Prix'\n) \nGROUP BY d.driverId;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of driver IDs and surnames from the 'drivers' table who have participated in races held after a specified year. The results are filtered based on the race year and grouped by driver ID to count the number of races each driver has participated in. The output is ordered by the count of races in descending order, and a limit is applied to restrict the number of results returned.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a summary of drivers from the 'drivers' table, including their unique identifier and first name, along with a count of the number of races they have participated in. The results are filtered to include only those drivers who have participated in a specified minimum number of races, represented by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of drivers along with their surnames from the 'drivers' table, who have participated in races. The results are grouped by driver ID and ordered by the number of races they have participated in, allowing users to see the most active drivers. The placeholder in the LIMIT clause represents the maximum number of drivers to be displayed.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2180",
        "c_low": "SELECT drivers.driverId, drivers.forename \nFROM results \nJOIN races ON results.raceId = races.raceId \nJOIN drivers ON results.driverId = drivers.driverId \nWHERE races.name IN ('Australian Grand Prix', 'Chinese Grand Prix') \nGROUP BY drivers.driverId;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT DISTINCT D.driverId, D.forename \nFROM drivers AS D \nJOIN results AS R ON D.driverId = R.driverId \nJOIN races AS RA ON R.raceId = RA.raceId \nWHERE RA.name IN ('Australian Grand Prix', 'Chinese Grand Prix') \nGROUP BY D.driverId;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of drivers along with their surnames from the 'drivers' table, who have participated in races. The results are grouped by driver ID and ordered by the number of races they have participated in, allowing users to see the most active drivers. The placeholder in the LIMIT clause represents the maximum number of drivers to be displayed.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique first and last names of drivers from the 'drivers' table who have completed a lap in less than a specified time. The placeholder in the WHERE clause represents the maximum lap time in milliseconds that a driver must achieve to be included in the results.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique driver IDs and their nationalities from the 'drivers' table, filtered by lap times recorded in the 'lapTimes' table. The condition specifies that only drivers with lap times exceeding a certain duration, represented by a placeholder for numeric values, will be included.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT T1.driverId, T1.forename FROM drivers AS T1 JOIN results AS T2 ON T1.driverId = T2.driverId JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.name IN ('Australian Grand Prix', 'Chinese Grand Prix') GROUP BY T1.driverId HAVING COUNT(DISTINCT T3.raceId) = 2",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of drivers from the 'drivers' table, including their unique identifier and first name, along with a count of the number of races they have participated in. The results are filtered to include only those drivers who have participated in a specified minimum number of races, represented by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the forename and surname of drivers from the 'drivers' table who have achieved a specific finishing position in their lap times. The placeholders in the WHERE clause represent the desired position and the minimum count of laps completed by the driver.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of driver IDs and surnames from the 'drivers' table who have participated in races held after a specified year. The results are filtered based on the race year and grouped by driver ID to count the number of races each driver has participated in. The output is ordered by the count of races in descending order, and a limit is applied to restrict the number of results returned.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT drivers.driverId, drivers.forename \nFROM drivers \nJOIN results ON drivers.driverId = results.driverId \nJOIN races ON results.raceId = races.raceId \nWHERE races.name IN ('Australian Grand Prix', 'Chinese Grand Prix') \nGROUP BY drivers.driverId, drivers.forename;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT DISTINCT d.driverId, d.forename \nFROM drivers AS d \nJOIN results AS r ON d.driverId = r.driverId \nJOIN races AS ra ON r.raceId = ra.raceId \nWHERE ra.name = 'Australian Grand Prix' OR ra.name = 'Chinese Grand Prix';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the forename and surname of drivers from the 'drivers' table who have achieved a specific finishing position in their lap times. The placeholders in the WHERE clause represent the desired position and the minimum count of laps completed by the driver.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique first and last names of drivers from the 'drivers' table who have completed a lap in less than a specified time. The placeholder in the WHERE clause represents the maximum lap time in milliseconds that a driver must achieve to be included in the results.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique driver IDs and their nationalities from the 'drivers' table, filtered by lap times recorded in the 'lapTimes' table. The condition specifies that only drivers with lap times exceeding a certain duration, represented by a placeholder for numeric values, will be included.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT T1.driverId, T1.forename \nFROM drivers AS T1 \nJOIN results AS T2 ON T1.driverId = T2.driverId \nJOIN races AS T3 ON T2.raceId = T3.raceId \nWHERE T3.name IN ('Australian Grand Prix', 'Chinese Grand Prix') \nGROUP BY T1.driverId;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of drivers from the 'drivers' table, including their unique identifier and first name, along with a count of the number of races they have participated in. The results are filtered to include only those drivers who have participated in a specified minimum number of races, represented by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of drivers along with their surnames from the 'drivers' table, who have participated in races. The results are grouped by driver ID and ordered by the number of races they have participated in, allowing users to see the most active drivers. The placeholder in the LIMIT clause represents the maximum number of drivers to be displayed.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of driver IDs and surnames from the 'drivers' table who have participated in races held after a specified year. The results are filtered based on the race year and grouped by driver ID to count the number of races each driver has participated in. The output is ordered by the count of races in descending order, and a limit is applied to restrict the number of results returned.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2181",
        "c_low": "SELECT d.forename, d.surname \nFROM drivers d \nJOIN results r ON d.driverId = r.driverId \nJOIN races ra ON r.raceId = ra.raceId \nWHERE ra.name = 'Australian Grand Prix' \nAND d.driverId NOT IN (\n    SELECT r2.driverId \n    FROM results r2 \n    JOIN races rb ON r2.raceId = rb.raceId \n    WHERE rb.name = 'Chinese Grand Prix'\n);",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT DISTINCT d.forename, d.surname \nFROM drivers AS d \nJOIN results AS r ON d.driverId = r.driverId \nJOIN races AS ra ON r.raceId = ra.raceId \nWHERE ra.name = 'Australian Grand Prix' \nAND d.driverId NOT IN (\n    SELECT r2.driverId \n    FROM results AS r2 \n    JOIN races AS ra2 ON r2.raceId = ra2.raceId \n    WHERE ra2.name = 'Chinese Grand Prix'\n);",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of drivers along with their surnames from the 'drivers' table, who have participated in races. The results are grouped by driver ID and ordered by the number of races they have participated in, allowing users to see the most active drivers. The placeholder in the LIMIT clause represents the maximum number of drivers to be displayed.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique race names from the 'races' table that were held at circuits located in a specific country and after a certain year. The placeholders in the WHERE clause represent the country name and the year threshold.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = [PLACEHOLDER-TYPE:STRING] AND T1.year > [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique first and last names of drivers from the 'drivers' table who have completed a lap in less than a specified time. The placeholder in the WHERE clause represents the maximum lap time in milliseconds that a driver must achieve to be included in the results.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT d.forename, d.surname \nFROM drivers d \nJOIN results r ON d.driverId = r.driverId \nJOIN races ra ON r.raceId = ra.raceId \nWHERE ra.name = 'Australian Grand Prix' \nAND d.driverId NOT IN (\n    SELECT r2.driverId \n    FROM results r2 \n    JOIN races rb ON r2.raceId = rb.raceId \n    WHERE rb.name = 'Chinese Grand Prix'\n) \nGROUP BY d.driverId;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the forename and surname of drivers from the 'drivers' table who have achieved a specific finishing position in their lap times. The placeholders in the WHERE clause represent the desired position and the minimum count of laps completed by the driver.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the surnames and unique identifiers of drivers who have made a specific number of pit stops and have also achieved a greater number of race results. The placeholders in the HAVING clauses represent the counts of pit stops and race results respectively.\",\n        \"virtual_table\": \"SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a summary of drivers from the 'drivers' table, including their unique identifier and first name, along with a count of the number of races they have participated in. The results are filtered to include only those drivers who have participated in a specified minimum number of races, represented by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT d.forename, d.surname \nFROM drivers d \nJOIN results r ON d.driverId = r.driverId \nJOIN races ra ON r.raceId = ra.raceId \nWHERE ra.name = 'Australian Grand Prix' \nAND d.driverId NOT IN (\n    SELECT r2.driverId \n    FROM results r2 \n    JOIN races rb ON r2.raceId = rb.raceId \n    WHERE rb.name = 'Chinese Grand Prix'\n);",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT DISTINCT d.forename, d.surname \nFROM drivers AS d \nJOIN results AS r ON d.driverId = r.driverId \nJOIN races AS ra ON r.raceId = ra.raceId \nWHERE ra.name = 'Australian Grand Prix' \nAND d.driverId NOT IN (\n    SELECT r2.driverId \n    FROM results AS r2 \n    JOIN races AS ra2 ON r2.raceId = ra2.raceId \n    WHERE ra2.name = 'Chinese Grand Prix'\n);",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the forename and surname of drivers from the 'drivers' table who have achieved a specific finishing position in their lap times. The placeholders in the WHERE clause represent the desired position and the minimum count of laps completed by the driver.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique race names from the 'races' table that were held at circuits located in a specific country and after a certain year. The placeholders in the WHERE clause represent the country name and the year threshold.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = [PLACEHOLDER-TYPE:STRING] AND T1.year > [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique first and last names of drivers from the 'drivers' table who have completed a lap in less than a specified time. The placeholder in the WHERE clause represents the maximum lap time in milliseconds that a driver must achieve to be included in the results.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT d.forename, d.surname \nFROM drivers AS d \nJOIN results AS r ON d.driverId = r.driverId \nJOIN races AS ra ON r.raceId = ra.raceId \nWHERE ra.name = 'Australian Grand Prix' \nAND d.driverId NOT IN (\n    SELECT d2.driverId \n    FROM drivers AS d2 \n    JOIN results AS r2 ON d2.driverId = r2.driverId \n    JOIN races AS ra2 ON r2.raceId = ra2.raceId \n    WHERE ra2.name = 'Chinese Grand Prix'\n) \nGROUP BY d.driverId;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the surnames and unique identifiers of drivers who have made a specific number of pit stops and have also achieved a greater number of race results. The placeholders in the HAVING clauses represent the counts of pit stops and race results respectively.\",\n        \"virtual_table\": \"SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of drivers along with their surnames from the 'drivers' table, who have participated in races. The results are grouped by driver ID and ordered by the number of races they have participated in, allowing users to see the most active drivers. The placeholder in the LIMIT clause represents the maximum number of drivers to be displayed.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a summary of drivers from the 'drivers' table, including their unique identifier and first name, along with a count of the number of races they have participated in. The results are filtered to include only those drivers who have participated in a specified minimum number of races, represented by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2182",
        "c_low": "SELECT d.forename, d.surname \nFROM drivers d \nJOIN results r1 ON d.driverId = r1.driverId \nJOIN races ra ON r1.raceId = ra.raceId \nWHERE ra.name = 'Australian Grand Prix' \nAND d.driverId NOT IN (\n    SELECT d2.driverId \n    FROM drivers d2 \n    JOIN results r2 ON d2.driverId = r2.driverId \n    JOIN races rb ON r2.raceId = rb.raceId \n    WHERE rb.name = 'Chinese Grand Prix'\n);",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT DISTINCT d.forename, d.surname \nFROM drivers AS d \nJOIN results AS r ON d.driverId = r.driverId \nJOIN races AS ra ON r.raceId = ra.raceId \nWHERE ra.name = 'Australian Grand Prix' \nAND d.driverId NOT IN (\n    SELECT r2.driverId \n    FROM results AS r2 \n    JOIN races AS ra2 ON r2.raceId = ra2.raceId \n    WHERE ra2.name = 'Chinese Grand Prix'\n);",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique first and last names of drivers from the 'drivers' table who have completed a lap in less than a specified time. The placeholder in the WHERE clause represents the maximum lap time in milliseconds that a driver must achieve to be included in the results.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of drivers along with their surnames from the 'drivers' table, who have participated in races. The results are grouped by driver ID and ordered by the number of races they have participated in, allowing users to see the most active drivers. The placeholder in the LIMIT clause represents the maximum number of drivers to be displayed.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique race names from the 'races' table that were held at circuits located in a specific country and after a certain year. The placeholders in the WHERE clause represent the country name and the year threshold.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = [PLACEHOLDER-TYPE:STRING] AND T1.year > [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT d.forename, d.surname \nFROM drivers AS d \nJOIN results AS r1 ON d.driverId = r1.driverId \nJOIN races AS ra1 ON r1.raceId = ra1.raceId \nWHERE ra1.name = 'Australian Grand Prix' \nAND d.driverId NOT IN (\n    SELECT d2.driverId \n    FROM drivers AS d2 \n    JOIN results AS r2 ON d2.driverId = r2.driverId \n    JOIN races AS ra2 ON r2.raceId = ra2.raceId \n    WHERE ra2.name = 'Chinese Grand Prix'\n) \nGROUP BY d.driverId;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the forename and surname of drivers from the 'drivers' table who have achieved a specific finishing position in their lap times. The placeholders in the WHERE clause represent the desired position and the minimum count of laps completed by the driver.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a summary of drivers from the 'drivers' table, including their unique identifier and first name, along with a count of the number of races they have participated in. The results are filtered to include only those drivers who have participated in a specified minimum number of races, represented by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the surnames and unique identifiers of drivers who have made a specific number of pit stops and have also achieved a greater number of race results. The placeholders in the HAVING clauses represent the counts of pit stops and race results respectively.\",\n        \"virtual_table\": \"SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT d.forename, d.surname \nFROM drivers d \nJOIN results r1 ON d.driverId = r1.driverId \nJOIN races ra ON r1.raceId = ra.raceId \nWHERE ra.name = 'Australian Grand Prix' \nAND d.driverId NOT IN (\n    SELECT r2.driverId \n    FROM results r2 \n    JOIN races rc ON r2.raceId = rc.raceId \n    WHERE rc.name = 'Chinese Grand Prix'\n);",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT DISTINCT d.forename, d.surname \nFROM drivers AS d \nJOIN results AS r ON d.driverId = r.driverId \nJOIN races AS ra ON r.raceId = ra.raceId \nWHERE ra.name = 'Australian Grand Prix' \nAND d.driverId NOT IN (\n    SELECT r2.driverId \n    FROM results AS r2 \n    JOIN races AS ra2 ON r2.raceId = ra2.raceId \n    WHERE ra2.name = 'Chinese Grand Prix'\n);",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique first and last names of drivers from the 'drivers' table who have completed a lap in less than a specified time. The placeholder in the WHERE clause represents the maximum lap time in milliseconds that a driver must achieve to be included in the results.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the forename and surname of drivers from the 'drivers' table who have achieved a specific finishing position in their lap times. The placeholders in the WHERE clause represent the desired position and the minimum count of laps completed by the driver.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique race names from the 'races' table that were held at circuits located in a specific country and after a certain year. The placeholders in the WHERE clause represent the country name and the year threshold.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = [PLACEHOLDER-TYPE:STRING] AND T1.year > [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT d.forename, d.surname \nFROM drivers d \nJOIN results r ON d.driverId = r.driverId \nJOIN races ra ON r.raceId = ra.raceId \nWHERE ra.name = 'Australian Grand Prix' \nAND d.driverId NOT IN (\n    SELECT d2.driverId \n    FROM drivers d2 \n    JOIN results r2 ON d2.driverId = r2.driverId \n    JOIN races ra2 ON r2.raceId = ra2.raceId \n    WHERE ra2.name = 'Chinese Grand Prix'\n)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of drivers from the 'drivers' table, including their unique identifier and first name, along with a count of the number of races they have participated in. The results are filtered to include only those drivers who have participated in a specified minimum number of races, represented by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of drivers along with their surnames from the 'drivers' table, who have participated in races. The results are grouped by driver ID and ordered by the number of races they have participated in, allowing users to see the most active drivers. The placeholder in the LIMIT clause represents the maximum number of drivers to be displayed.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the surnames and unique identifiers of drivers who have made a specific number of pit stops and have also achieved a greater number of race results. The placeholders in the HAVING clauses represent the counts of pit stops and race results respectively.\",\n        \"virtual_table\": \"SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2183",
        "c_low": "SELECT DISTINCT d.forename \nFROM drivers d \nJOIN driverStandings ds ON d.driverId = ds.driverId \nWHERE ds.position = 1 AND ds.wins > 0;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverStandings AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 1 AND T2.wins > 0;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of drivers along with their surnames from the 'drivers' table, who have participated in races. The results are grouped by driver ID and ordered by the number of races they have participated in, allowing users to see the most active drivers. The placeholder in the LIMIT clause represents the maximum number of drivers to be displayed.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique first and last names of drivers from the 'drivers' table who have completed a lap in less than a specified time. The placeholder in the WHERE clause represents the maximum lap time in milliseconds that a driver must achieve to be included in the results.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique driver IDs and their nationalities from the 'drivers' table, filtered by lap times recorded in the 'lapTimes' table. The condition specifies that only drivers with lap times exceeding a certain duration, represented by a placeholder for numeric values, will be included.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverStandings AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 1 AND T2.wins > 0;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the forename and surname of drivers from the 'drivers' table who have achieved a specific finishing position in their lap times. The placeholders in the WHERE clause represent the desired position and the minimum count of laps completed by the driver.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a summary of drivers from the 'drivers' table, including their unique identifier and first name, along with a count of the number of races they have participated in. The results are filtered to include only those drivers who have participated in a specified minimum number of races, represented by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the surnames and unique identifiers of drivers who have made a specific number of pit stops and have also achieved a greater number of race results. The placeholders in the HAVING clauses represent the counts of pit stops and race results respectively.\",\n        \"virtual_table\": \"SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT d.forename \nFROM drivers d \nJOIN driverStandings ds ON d.driverId = ds.driverId \nWHERE ds.position = 1 AND ds.wins > 0;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT DISTINCT T1.forename \nFROM drivers AS T1 \nJOIN driverStandings AS T2 ON T1.driverId = T2.driverId \nWHERE T2.position = 1 AND T2.wins > 0;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the forename and surname of drivers from the 'drivers' table who have achieved a specific finishing position in their lap times. The placeholders in the WHERE clause represent the desired position and the minimum count of laps completed by the driver.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique first and last names of drivers from the 'drivers' table who have completed a lap in less than a specified time. The placeholder in the WHERE clause represents the maximum lap time in milliseconds that a driver must achieve to be included in the results.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique driver IDs and their nationalities from the 'drivers' table, filtered by lap times recorded in the 'lapTimes' table. The condition specifies that only drivers with lap times exceeding a certain duration, represented by a placeholder for numeric values, will be included.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT d.forename \nFROM drivers AS d \nJOIN results AS r ON d.driverId = r.driverId \nJOIN driverStandings AS ds ON r.raceId = ds.raceId AND d.driverId = ds.driverId \nWHERE ds.position = 1 AND ds.wins > 0;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of drivers from the 'drivers' table, including their unique identifier and first name, along with a count of the number of races they have participated in. The results are filtered to include only those drivers who have participated in a specified minimum number of races, represented by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the surnames and unique identifiers of drivers who have made a specific number of pit stops and have also achieved a greater number of race results. The placeholders in the HAVING clauses represent the counts of pit stops and race results respectively.\",\n        \"virtual_table\": \"SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of drivers along with their surnames from the 'drivers' table, who have participated in races. The results are grouped by driver ID and ordered by the number of races they have participated in, allowing users to see the most active drivers. The placeholder in the LIMIT clause represents the maximum number of drivers to be displayed.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2184",
        "c_low": "SELECT DISTINCT d.forename \nFROM drivers d \nJOIN driverStandings ds ON d.driverId = ds.driverId \nWHERE ds.position = 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT DISTINCT d.forename \nFROM drivers AS d \nJOIN driverStandings AS ds ON d.driverId = ds.driverId \nWHERE ds.position = 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of drivers along with their surnames from the 'drivers' table, who have participated in races. The results are grouped by driver ID and ordered by the number of races they have participated in, allowing users to see the most active drivers. The placeholder in the LIMIT clause represents the maximum number of drivers to be displayed.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique first and last names of drivers from the 'drivers' table who have completed a lap in less than a specified time. The placeholder in the WHERE clause represents the maximum lap time in milliseconds that a driver must achieve to be included in the results.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT d.forename \nFROM drivers AS d \nJOIN results AS r ON d.driverId = r.driverId \nJOIN driverStandings AS ds ON r.raceId = ds.raceId AND d.driverId = ds.driverId \nWHERE ds.position = 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the forename and surname of drivers from the 'drivers' table who have achieved a specific finishing position in their lap times. The placeholders in the WHERE clause represent the desired position and the minimum count of laps completed by the driver.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a summary of drivers from the 'drivers' table, including their unique identifier and first name, along with a count of the number of races they have participated in. The results are filtered to include only those drivers who have participated in a specified minimum number of races, represented by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the surnames and unique identifiers of drivers who have made a specific number of pit stops and have also achieved a greater number of race results. The placeholders in the HAVING clauses represent the counts of pit stops and race results respectively.\",\n        \"virtual_table\": \"SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT d.forename \nFROM drivers d \nJOIN driverStandings ds ON d.driverId = ds.driverId \nWHERE ds.position = 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT DISTINCT d.forename \nFROM drivers AS d \nJOIN driverStandings AS ds ON d.driverId = ds.driverId \nWHERE ds.position = 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the forename and surname of drivers from the 'drivers' table who have achieved a specific finishing position in their lap times. The placeholders in the WHERE clause represent the desired position and the minimum count of laps completed by the driver.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique first and last names of drivers from the 'drivers' table who have completed a lap in less than a specified time. The placeholder in the WHERE clause represents the maximum lap time in milliseconds that a driver must achieve to be included in the results.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT d.forename \nFROM drivers AS d \nJOIN results AS r ON d.driverId = r.driverId \nJOIN driverStandings AS ds ON r.raceId = ds.raceId AND r.driverId = ds.driverId \nWHERE ds.position = 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of drivers from the 'drivers' table, including their unique identifier and first name, along with a count of the number of races they have participated in. The results are filtered to include only those drivers who have participated in a specified minimum number of races, represented by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of drivers along with their surnames from the 'drivers' table, who have participated in races. The results are grouped by driver ID and ordered by the number of races they have participated in, allowing users to see the most active drivers. The placeholder in the LIMIT clause represents the maximum number of drivers to be displayed.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the surnames and unique identifiers of drivers who have made a specific number of pit stops and have also achieved a greater number of race results. The placeholders in the HAVING clauses represent the counts of pit stops and race results respectively.\",\n        \"virtual_table\": \"SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2185",
        "c_low": "SELECT DISTINCT d.forename \nFROM drivers d \nJOIN driverStandings ds ON d.driverId = ds.driverId \nJOIN results r ON ds.raceId = r.raceId AND ds.driverId = r.driverId \nWHERE ds.position = 1 AND ds.points > 20;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT DISTINCT d.forename \nFROM drivers AS d \nJOIN driverStandings AS ds ON d.driverId = ds.driverId \nWHERE ds.position = 1 AND ds.points > 20;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of drivers along with their surnames from the 'drivers' table, who have participated in races. The results are grouped by driver ID and ordered by the number of races they have participated in, allowing users to see the most active drivers. The placeholder in the LIMIT clause represents the maximum number of drivers to be displayed.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique first and last names of drivers from the 'drivers' table who have completed a lap in less than a specified time. The placeholder in the WHERE clause represents the maximum lap time in milliseconds that a driver must achieve to be included in the results.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique driver IDs and their nationalities from the 'drivers' table, filtered by lap times recorded in the 'lapTimes' table. The condition specifies that only drivers with lap times exceeding a certain duration, represented by a placeholder for numeric values, will be included.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT d.forename \nFROM drivers AS d \nJOIN results AS r ON d.driverId = r.driverId \nJOIN driverStandings AS ds ON r.raceId = ds.raceId AND d.driverId = ds.driverId \nWHERE ds.position = 1 AND ds.points > 20;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the forename and surname of drivers from the 'drivers' table who have achieved a specific finishing position in their lap times. The placeholders in the WHERE clause represent the desired position and the minimum count of laps completed by the driver.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a summary of drivers from the 'drivers' table, including their unique identifier and first name, along with a count of the number of races they have participated in. The results are filtered to include only those drivers who have participated in a specified minimum number of races, represented by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the surnames and unique identifiers of drivers who have made a specific number of pit stops and have also achieved a greater number of race results. The placeholders in the HAVING clauses represent the counts of pit stops and race results respectively.\",\n        \"virtual_table\": \"SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT d.forename \nFROM drivers d \nJOIN driverStandings ds ON d.driverId = ds.driverId \nJOIN results r ON d.driverId = r.driverId \nWHERE ds.position = 1 AND ds.points > 20;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT DISTINCT d.forename \nFROM drivers AS d \nJOIN driverStandings AS ds ON d.driverId = ds.driverId \nWHERE ds.position = 1 AND ds.points > 20;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the forename and surname of drivers from the 'drivers' table who have achieved a specific finishing position in their lap times. The placeholders in the WHERE clause represent the desired position and the minimum count of laps completed by the driver.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique first and last names of drivers from the 'drivers' table who have completed a lap in less than a specified time. The placeholder in the WHERE clause represents the maximum lap time in milliseconds that a driver must achieve to be included in the results.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique driver IDs and their nationalities from the 'drivers' table, filtered by lap times recorded in the 'lapTimes' table. The condition specifies that only drivers with lap times exceeding a certain duration, represented by a placeholder for numeric values, will be included.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT d.forename \nFROM drivers AS d \nJOIN driverStandings AS ds ON d.driverId = ds.driverId \nWHERE ds.position = 1 AND ds.points > 20;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of drivers from the 'drivers' table, including their unique identifier and first name, along with a count of the number of races they have participated in. The results are filtered to include only those drivers who have participated in a specified minimum number of races, represented by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the surnames and unique identifiers of drivers who have made a specific number of pit stops and have also achieved a greater number of race results. The placeholders in the HAVING clauses represent the counts of pit stops and race results respectively.\",\n        \"virtual_table\": \"SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of drivers along with their surnames from the 'drivers' table, who have participated in races. The results are grouped by driver ID and ordered by the number of races they have participated in, allowing users to see the most active drivers. The placeholder in the LIMIT clause represents the maximum number of drivers to be displayed.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2186",
        "c_low": "SELECT DISTINCT d.forename \nFROM drivers d \nJOIN driverStandings ds ON d.driverId = ds.driverId \nJOIN results r ON d.driverId = r.driverId \nWHERE ds.position = 1 AND ds.points > 20;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT DISTINCT d.forename \nFROM drivers AS d \nJOIN results AS r ON d.driverId = r.driverId \nJOIN driverStandings AS ds ON r.raceId = ds.raceId AND d.driverId = ds.driverId \nWHERE ds.position = 1 AND ds.points > 20;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of drivers along with their surnames from the 'drivers' table, who have participated in races. The results are grouped by driver ID and ordered by the number of races they have participated in, allowing users to see the most active drivers. The placeholder in the LIMIT clause represents the maximum number of drivers to be displayed.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique first and last names of drivers from the 'drivers' table who have completed a lap in less than a specified time. The placeholder in the WHERE clause represents the maximum lap time in milliseconds that a driver must achieve to be included in the results.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT d.forename \nFROM drivers AS d \nJOIN results AS r ON d.driverId = r.driverId \nJOIN driverStandings AS ds ON r.raceId = ds.raceId AND d.driverId = ds.driverId \nWHERE ds.position = 1 AND ds.points > 20;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the forename and surname of drivers from the 'drivers' table who have achieved a specific finishing position in their lap times. The placeholders in the WHERE clause represent the desired position and the minimum count of laps completed by the driver.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a summary of drivers from the 'drivers' table, including their unique identifier and first name, along with a count of the number of races they have participated in. The results are filtered to include only those drivers who have participated in a specified minimum number of races, represented by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the surnames and unique identifiers of drivers who have made a specific number of pit stops and have also achieved a greater number of race results. The placeholders in the HAVING clauses represent the counts of pit stops and race results respectively.\",\n        \"virtual_table\": \"SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT d.forename \nFROM drivers d \nJOIN driverStandings ds ON d.driverId = ds.driverId \nJOIN results r ON d.driverId = r.driverId \nWHERE ds.position = 1 AND ds.points > 20;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT DISTINCT d.forename \nFROM drivers AS d \nJOIN results AS r ON d.driverId = r.driverId \nJOIN driverStandings AS ds ON d.driverId = ds.driverId \nWHERE ds.position = 1 AND ds.points > 20;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the forename and surname of drivers from the 'drivers' table who have achieved a specific finishing position in their lap times. The placeholders in the WHERE clause represent the desired position and the minimum count of laps completed by the driver.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique first and last names of drivers from the 'drivers' table who have completed a lap in less than a specified time. The placeholder in the WHERE clause represents the maximum lap time in milliseconds that a driver must achieve to be included in the results.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT d.forename \nFROM drivers AS d \nJOIN results AS r ON d.driverId = r.driverId \nJOIN driverStandings AS ds ON r.raceId = ds.raceId AND d.driverId = ds.driverId \nWHERE ds.position = 1 AND ds.points > 20;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of drivers from the 'drivers' table, including their unique identifier and first name, along with a count of the number of races they have participated in. The results are filtered to include only those drivers who have participated in a specified minimum number of races, represented by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of drivers along with their surnames from the 'drivers' table, who have participated in races. The results are grouped by driver ID and ordered by the number of races they have participated in, allowing users to see the most active drivers. The placeholder in the LIMIT clause represents the maximum number of drivers to be displayed.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the surnames and unique identifiers of drivers who have made a specific number of pit stops and have also achieved a greater number of race results. The placeholders in the HAVING clauses represent the counts of pit stops and race results respectively.\",\n        \"virtual_table\": \"SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2189",
        "c_low": "SELECT constructorId, COUNT(raceId) AS number_of_races FROM results GROUP BY constructorId;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of race results from the 'results' table that are associated with a specific race name and year. The placeholders in the WHERE clause represent the race name and the year of interest.\",\n        \"virtual_table\": \"SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = [PLACEHOLDER-TYPE:STRING] AND YEAR = [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT constructorId, COUNT(raceId) AS numberOfRaces FROM constructorResults GROUP BY constructorId;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique race names from the 'races' table that were held at circuits located in a specific country and after a certain year. The placeholders in the WHERE clause represent the country name and the year threshold.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = [PLACEHOLDER-TYPE:STRING] AND T1.year > [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of drivers along with their surnames from the 'drivers' table, who have participated in races. The results are grouped by driver ID and ordered by the number of races they have participated in, allowing users to see the most active drivers. The placeholder in the LIMIT clause represents the maximum number of drivers to be displayed.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique driver IDs and their nationalities from the 'drivers' table, filtered by lap times recorded in the 'lapTimes' table. The condition specifies that only drivers with lap times exceeding a certain duration, represented by a placeholder for numeric values, will be included.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT constructorId, COUNT(*) AS race_count FROM constructorResults GROUP BY constructorId;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of drivers from the 'drivers' table, including their unique identifier and first name, along with a count of the number of races they have participated in. The results are filtered to include only those drivers who have participated in a specified minimum number of races, represented by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of driver IDs and surnames from the 'drivers' table who have participated in races held after a specified year. The results are filtered based on the race year and grouped by driver ID to count the number of races each driver has participated in. The output is ordered by the count of races in descending order, and a limit is applied to restrict the number of results returned.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of race results for each driver from the 'drivers' table, filtered to show only those drivers who have participated in a number of races less than or equal to a specified limit. The placeholder in the HAVING clause represents the maximum number of races a driver can have participated in.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT constructorId, COUNT(raceId) AS number_of_races\nFROM constructorResults\nGROUP BY constructorId;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT constructorId, COUNT(*) AS race_count FROM constructorResults GROUP BY constructorId;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique race names from the 'races' table that were held at circuits located in a specific country and after a certain year. The placeholders in the WHERE clause represent the country name and the year threshold.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = [PLACEHOLDER-TYPE:STRING] AND T1.year > [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of race results from the 'results' table that are associated with a specific race name and year. The placeholders in the WHERE clause represent the race name and the year of interest.\",\n        \"virtual_table\": \"SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = [PLACEHOLDER-TYPE:STRING] AND YEAR = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique driver IDs and their nationalities from the 'drivers' table, filtered by lap times recorded in the 'lapTimes' table. The condition specifies that only drivers with lap times exceeding a certain duration, represented by a placeholder for numeric values, will be included.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT constructorId, COUNT(*) AS numberOfRaces FROM constructorResults GROUP BY constructorId;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of drivers from the 'drivers' table, including their unique identifier and first name, along with a count of the number of races they have participated in. The results are filtered to include only those drivers who have participated in a specified minimum number of races, represented by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of driver IDs and surnames from the 'drivers' table who have participated in races held after a specified year. The results are filtered based on the race year and grouped by driver ID to count the number of races each driver has participated in. The output is ordered by the count of races in descending order, and a limit is applied to restrict the number of results returned.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of drivers along with their surnames from the 'drivers' table, who have participated in races. The results are grouped by driver ID and ordered by the number of races they have participated in, allowing users to see the most active drivers. The placeholder in the LIMIT clause represents the maximum number of drivers to be displayed.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2190",
        "c_low": "SELECT constructorId, COUNT(raceId) AS race_count FROM constructorResults GROUP BY constructorId;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of race results from the 'results' table that are associated with a specific race name and year. The placeholders in the WHERE clause represent the race name and the year of interest.\",\n        \"virtual_table\": \"SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = [PLACEHOLDER-TYPE:STRING] AND YEAR = [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT constructorId, COUNT(raceId) AS race_count FROM constructorResults GROUP BY constructorId;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique race names from the 'races' table that were held at circuits located in a specific country and after a certain year. The placeholders in the WHERE clause represent the country name and the year threshold.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = [PLACEHOLDER-TYPE:STRING] AND T1.year > [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of drivers along with their surnames from the 'drivers' table, who have participated in races. The results are grouped by driver ID and ordered by the number of races they have participated in, allowing users to see the most active drivers. The placeholder in the LIMIT clause represents the maximum number of drivers to be displayed.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT constructorId, COUNT(raceId) AS race_count FROM constructorResults GROUP BY constructorId;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of drivers from the 'drivers' table, including their unique identifier and first name, along with a count of the number of races they have participated in. The results are filtered to include only those drivers who have participated in a specified minimum number of races, represented by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of driver IDs and surnames from the 'drivers' table who have participated in races held after a specified year. The results are filtered based on the race year and grouped by driver ID to count the number of races each driver has participated in. The output is ordered by the count of races in descending order, and a limit is applied to restrict the number of results returned.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of race results for each driver from the 'drivers' table, filtered to show only those drivers who have participated in a number of races less than or equal to a specified limit. The placeholder in the HAVING clause represents the maximum number of races a driver can have participated in.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT constructorId, COUNT(raceId) AS race_count\nFROM constructorResults\nGROUP BY constructorId;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT constructorId, COUNT(raceId) AS race_count FROM constructorResults GROUP BY constructorId;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of race results from the 'results' table that are associated with a specific race name and year. The placeholders in the WHERE clause represent the race name and the year of interest.\",\n        \"virtual_table\": \"SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = [PLACEHOLDER-TYPE:STRING] AND YEAR = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique race names from the 'races' table that were held at circuits located in a specific country and after a certain year. The placeholders in the WHERE clause represent the country name and the year threshold.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = [PLACEHOLDER-TYPE:STRING] AND T1.year > [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT constructorId, COUNT(raceId) AS race_count FROM constructorResults GROUP BY constructorId;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of drivers from the 'drivers' table, including their unique identifier and first name, along with a count of the number of races they have participated in. The results are filtered to include only those drivers who have participated in a specified minimum number of races, represented by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of driver IDs and surnames from the 'drivers' table who have participated in races held after a specified year. The results are filtered based on the race year and grouped by driver ID to count the number of races each driver has participated in. The output is ordered by the count of races in descending order, and a limit is applied to restrict the number of results returned.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of race results for each driver from the 'drivers' table, filtered to show only those drivers who have participated in a number of races less than or equal to a specified limit. The placeholder in the HAVING clause represents the maximum number of races a driver can have participated in.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2194",
        "c_low": "SELECT races.name \nFROM races \nJOIN circuits ON races.circuitId = circuits.circuitId \nWHERE races.year > 2000 AND circuits.country = 'Spain';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of race results from the 'results' table that are associated with a specific race name and year. The placeholders in the WHERE clause represent the race name and the year of interest.\",\n        \"virtual_table\": \"SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = [PLACEHOLDER-TYPE:STRING] AND YEAR = [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Spain' AND T1.year > 2000",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique race names from the 'races' table that were held at circuits located in a specific country and after a certain year. The placeholders in the WHERE clause represent the country name and the year threshold.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = [PLACEHOLDER-TYPE:STRING] AND T1.year > [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of drivers along with their surnames from the 'drivers' table, who have participated in races. The results are grouped by driver ID and ordered by the number of races they have participated in, allowing users to see the most active drivers. The placeholder in the LIMIT clause represents the maximum number of drivers to be displayed.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT T3.name FROM races AS T3 JOIN circuits AS T2 ON T3.circuitId = T2.circuitId WHERE T3.year > 2000 AND T2.country = 'Spain'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of driver IDs and surnames from the 'drivers' table who have participated in races held after a specified year. The results are filtered based on the race year and grouped by driver ID to count the number of races each driver has participated in. The output is ordered by the count of races in descending order, and a limit is applied to restrict the number of results returned.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the surnames and unique identifiers of drivers who have made a specific number of pit stops and have also achieved a greater number of race results. The placeholders in the HAVING clauses represent the counts of pit stops and race results respectively.\",\n        \"virtual_table\": \"SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a summary of drivers from the 'drivers' table, including their unique identifier and first name, along with a count of the number of races they have participated in. The results are filtered to include only those drivers who have participated in a specified minimum number of races, represented by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT races.name \nFROM races \nJOIN circuits ON races.circuitId = circuits.circuitId \nWHERE races.year > 2000 AND circuits.country = 'Spain';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Spain' AND T1.year > 2000",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique race names from the 'races' table that were held at circuits located in a specific country and after a certain year. The placeholders in the WHERE clause represent the country name and the year threshold.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = [PLACEHOLDER-TYPE:STRING] AND T1.year > [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of race results from the 'results' table that are associated with a specific race name and year. The placeholders in the WHERE clause represent the race name and the year of interest.\",\n        \"virtual_table\": \"SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = [PLACEHOLDER-TYPE:STRING] AND YEAR = [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT T3.name FROM races AS T3 JOIN circuits AS T2 ON T3.circuitId = T2.circuitId WHERE T3.year > 2000 AND T2.country = 'Spain'",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of driver IDs and surnames from the 'drivers' table who have participated in races held after a specified year. The results are filtered based on the race year and grouped by driver ID to count the number of races each driver has participated in. The output is ordered by the count of races in descending order, and a limit is applied to restrict the number of results returned.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the surnames and unique identifiers of drivers who have made a specific number of pit stops and have also achieved a greater number of race results. The placeholders in the HAVING clauses represent the counts of pit stops and race results respectively.\",\n        \"virtual_table\": \"SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a summary of drivers from the 'drivers' table, including their unique identifier and first name, along with a count of the number of races they have participated in. The results are filtered to include only those drivers who have participated in a specified minimum number of races, represented by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2202",
        "c_low": "SELECT name FROM races ORDER BY name DESC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT DISTINCT name FROM races ORDER BY name DESC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique race names from the 'races' table that were held at circuits located in a specific country and after a certain year. The placeholders in the WHERE clause represent the country name and the year threshold.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = [PLACEHOLDER-TYPE:STRING] AND T1.year > [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of drivers along with their surnames from the 'drivers' table, who have participated in races. The results are grouped by driver ID and ordered by the number of races they have participated in, allowing users to see the most active drivers. The placeholder in the LIMIT clause represents the maximum number of drivers to be displayed.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT name FROM races ORDER BY name DESC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of drivers from the 'drivers' table, including their unique identifier and first name, along with a count of the number of races they have participated in. The results are filtered to include only those drivers who have participated in a specified minimum number of races, represented by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of driver IDs and surnames from the 'drivers' table who have participated in races held after a specified year. The results are filtered based on the race year and grouped by driver ID to count the number of races each driver has participated in. The output is ordered by the count of races in descending order, and a limit is applied to restrict the number of results returned.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the surnames and unique identifiers of drivers who have made a specific number of pit stops and have also achieved a greater number of race results. The placeholders in the HAVING clauses represent the counts of pit stops and race results respectively.\",\n        \"virtual_table\": \"SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT name FROM races ORDER BY name DESC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT DISTINCT name FROM races ORDER BY name DESC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique race names from the 'races' table that were held at circuits located in a specific country and after a certain year. The placeholders in the WHERE clause represent the country name and the year threshold.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = [PLACEHOLDER-TYPE:STRING] AND T1.year > [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT name FROM races ORDER BY name DESC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of drivers from the 'drivers' table, including their unique identifier and first name, along with a count of the number of races they have participated in. The results are filtered to include only those drivers who have participated in a specified minimum number of races, represented by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of drivers along with their surnames from the 'drivers' table, who have participated in races. The results are grouped by driver ID and ordered by the number of races they have participated in, allowing users to see the most active drivers. The placeholder in the LIMIT clause represents the maximum number of drivers to be displayed.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of driver IDs and surnames from the 'drivers' table who have participated in races held after a specified year. The results are filtered based on the race year and grouped by driver ID to count the number of races each driver has participated in. The output is ordered by the count of races in descending order, and a limit is applied to restrict the number of results returned.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2217",
        "c_low": "SELECT DISTINCT constructors.name \nFROM constructors \nJOIN constructorResults ON constructors.constructorId = constructorResults.constructorId \nWHERE constructorResults.points > 5 \nAND constructors.nationality = 'Japanese';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT DISTINCT constructors.name \nFROM constructors \nJOIN constructorResults ON constructors.constructorId = constructorResults.constructorId \nWHERE constructorResults.points > 5 \nAND constructors.nationality = 'Japanese';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT DISTINCT constructors.name \nFROM constructors \nJOIN constructorResults ON constructors.constructorId = constructorResults.constructorId \nWHERE constructors.nationality = 'Japanese' \nAND constructorResults.points > 5;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT DISTINCT constructors.name \nFROM constructors \nJOIN constructorResults ON constructors.constructorId = constructorResults.constructorId \nWHERE constructorResults.points > 5 \nAND constructors.nationality = 'Japanese';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT DISTINCT constructors.name \nFROM constructors \nJOIN constructorResults ON constructors.constructorId = constructorResults.constructorId \nWHERE constructorResults.points > 5 \nAND constructors.nationality = 'Japanese';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT DISTINCT constructors.name \nFROM constructors \nJOIN constructorResults ON constructors.constructorId = constructorResults.constructorId \nWHERE constructorResults.points > 5 \nAND constructors.nationality = 'Japanese';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2218",
        "c_low": "SELECT name FROM constructors WHERE nationality = 'Japanese' AND constructorId IN (SELECT constructorId FROM constructorResults GROUP BY constructorId HAVING SUM(points) > 5);",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT name FROM constructors WHERE nationality = 'Japanese' AND constructorId IN (SELECT constructorId FROM constructorResults GROUP BY constructorId HAVING SUM(points) > 5);",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT name FROM constructors WHERE nationality = 'Japanese' AND points > 5;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the surnames and unique identifiers of drivers who have made a specific number of pit stops and have also achieved a greater number of race results. The placeholders in the HAVING clauses represent the counts of pit stops and race results respectively.\",\n        \"virtual_table\": \"SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the forename and surname of drivers from the 'drivers' table who have achieved a specific finishing position in their lap times. The placeholders in the WHERE clause represent the desired position and the minimum count of laps completed by the driver.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a summary of drivers from the 'drivers' table, including their unique identifier and first name, along with a count of the number of races they have participated in. The results are filtered to include only those drivers who have participated in a specified minimum number of races, represented by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT name FROM constructors WHERE nationality = 'Japanese' AND constructorId IN (SELECT constructorId FROM constructorResults GROUP BY constructorId HAVING SUM(points) > 5);",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT c.name \nFROM constructors AS c \nJOIN constructorResults AS cr ON c.constructorId = cr.constructorId \nWHERE c.nationality = 'Japanese' \nAND cr.points > 5;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the forename and surname of drivers from the 'drivers' table who have achieved a specific finishing position in their lap times. The placeholders in the WHERE clause represent the desired position and the minimum count of laps completed by the driver.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT constructors.name \nFROM constructors \nJOIN constructorResults ON constructors.constructorId = constructorResults.constructorId \nWHERE constructors.nationality = 'Japanese' \nAND constructorResults.points > 5;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the surnames and unique identifiers of drivers who have made a specific number of pit stops and have also achieved a greater number of race results. The placeholders in the HAVING clauses represent the counts of pit stops and race results respectively.\",\n        \"virtual_table\": \"SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a summary of drivers from the 'drivers' table, including their unique identifier and first name, along with a count of the number of races they have participated in. The results are filtered to include only those drivers who have participated in a specified minimum number of races, represented by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of drivers who have participated in more than a specified number of pit stops or race results. It includes the drivers' first names, last names, and unique identifiers. The placeholders in the HAVING clause represent the minimum count of pit stops or race results required for inclusion in the results.\",\n        \"virtual_table\": \"SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER] UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2219",
        "c_low": "SELECT AVG(fastestLapSpeed) AS average_fastest_lap_speed \nFROM results AS T1 \nJOIN races AS T2 ON T1.raceId = T2.raceId \nWHERE T2.name = 'Monaco Grand Prix' AND T2.year = 2008;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of race results from the 'results' table that are associated with a specific race name and year. The placeholders in the WHERE clause represent the race name and the year of interest.\",\n        \"virtual_table\": \"SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = [PLACEHOLDER-TYPE:STRING] AND YEAR = [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT AVG(lapTimes.fastestLapSpeed) AS average_fastest_lap_speed \nFROM races \nJOIN lapTimes ON races.raceId = lapTimes.raceId \nWHERE races.name = 'Monaco Grand Prix' AND races.year = 2008;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique first and last names of drivers from the 'drivers' table who have completed a lap in less than a specified time. The placeholder in the WHERE clause represents the maximum lap time in milliseconds that a driver must achieve to be included in the results.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique driver IDs and their nationalities from the 'drivers' table, filtered by lap times recorded in the 'lapTimes' table. The condition specifies that only drivers with lap times exceeding a certain duration, represented by a placeholder for numeric values, will be included.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique race names from the 'races' table that were held at circuits located in a specific country and after a certain year. The placeholders in the WHERE clause represent the country name and the year threshold.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = [PLACEHOLDER-TYPE:STRING] AND T1.year > [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT AVG(fastestLapSpeed) AS average_fastest_lap_speed \nFROM lapTimes AS LT \nJOIN results AS R ON LT.raceId = R.raceId \nJOIN races AS RA ON R.raceId = RA.raceId \nWHERE RA.name = 'Monaco Grand Prix' AND RA.year = 2008;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the forename and surname of drivers from the 'drivers' table who have achieved a specific finishing position in their lap times. The placeholders in the WHERE clause represent the desired position and the minimum count of laps completed by the driver.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the surnames and unique identifiers of drivers who have made a specific number of pit stops and have also achieved a greater number of race results. The placeholders in the HAVING clauses represent the counts of pit stops and race results respectively.\",\n        \"virtual_table\": \"SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a summary of drivers from the 'drivers' table, including their unique identifier and first name, along with a count of the number of races they have participated in. The results are filtered to include only those drivers who have participated in a specified minimum number of races, represented by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT AVG(lapTimes.fastestLapSpeed) AS average_fastest_lap_speed\nFROM races\nJOIN lapTimes ON races.raceId = lapTimes.raceId\nWHERE races.name = 'Monaco Grand Prix' AND races.year = 2008;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT AVG(fastestLapSpeed) AS average_fastest_lap_speed \nFROM results AS R \nJOIN races AS RA ON R.raceId = RA.raceId \nWHERE RA.name = 'Monaco Grand Prix' AND RA.year = 2008;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique first and last names of drivers from the 'drivers' table who have completed a lap in less than a specified time. The placeholder in the WHERE clause represents the maximum lap time in milliseconds that a driver must achieve to be included in the results.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the forename and surname of drivers from the 'drivers' table who have achieved a specific finishing position in their lap times. The placeholders in the WHERE clause represent the desired position and the minimum count of laps completed by the driver.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique driver IDs and their nationalities from the 'drivers' table, filtered by lap times recorded in the 'lapTimes' table. The condition specifies that only drivers with lap times exceeding a certain duration, represented by a placeholder for numeric values, will be included.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT AVG(lapTimes.fastestLapSpeed) AS average_fastest_lap_speed \nFROM races \nJOIN lapTimes ON races.raceId = lapTimes.raceId \nWHERE races.name = 'Monaco Grand Prix' AND races.year = 2008;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the surnames and unique identifiers of drivers who have made a specific number of pit stops and have also achieved a greater number of race results. The placeholders in the HAVING clauses represent the counts of pit stops and race results respectively.\",\n        \"virtual_table\": \"SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a summary of drivers from the 'drivers' table, including their unique identifier and first name, along with a count of the number of races they have participated in. The results are filtered to include only those drivers who have participated in a specified minimum number of races, represented by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of drivers who have participated in more than a specified number of pit stops or race results. It includes the drivers' first names, last names, and unique identifiers. The placeholders in the HAVING clause represent the minimum count of pit stops or race results required for inclusion in the results.\",\n        \"virtual_table\": \"SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER] UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2220",
        "c_low": "SELECT AVG(lapTimes.fastestLapSpeed) AS average_fastest_lap_speed\nFROM races\nJOIN lapTimes ON races.raceId = lapTimes.raceId\nJOIN circuits ON races.circuitId = circuits.circuitId\nWHERE circuits.name = 'Monaco Grand Prix' AND races.year = 2008;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT AVG(lapTimes.fastestLapSpeed) AS average_fastest_lap_speed \nFROM races \nJOIN lapTimes ON races.raceId = lapTimes.raceId \nJOIN circuits ON races.circuitId = circuits.circuitId \nWHERE circuits.name = 'Monaco' AND races.year = 2008;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique first and last names of drivers from the 'drivers' table who have completed a lap in less than a specified time. The placeholder in the WHERE clause represents the maximum lap time in milliseconds that a driver must achieve to be included in the results.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique driver IDs and their nationalities from the 'drivers' table, filtered by lap times recorded in the 'lapTimes' table. The condition specifies that only drivers with lap times exceeding a certain duration, represented by a placeholder for numeric values, will be included.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of drivers along with their surnames from the 'drivers' table, who have participated in races. The results are grouped by driver ID and ordered by the number of races they have participated in, allowing users to see the most active drivers. The placeholder in the LIMIT clause represents the maximum number of drivers to be displayed.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT AVG(lapTimes.fastestLapSpeed) AS average_fastest_lap_speed \nFROM lapTimes \nJOIN results ON lapTimes.raceId = results.raceId \nJOIN races ON results.raceId = races.raceId \nJOIN circuits ON races.circuitId = circuits.circuitId \nWHERE circuits.name = 'Monaco Grand Prix' AND races.year = 2008;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the forename and surname of drivers from the 'drivers' table who have achieved a specific finishing position in their lap times. The placeholders in the WHERE clause represent the desired position and the minimum count of laps completed by the driver.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the surnames and unique identifiers of drivers who have made a specific number of pit stops and have also achieved a greater number of race results. The placeholders in the HAVING clauses represent the counts of pit stops and race results respectively.\",\n        \"virtual_table\": \"SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a summary of drivers from the 'drivers' table, including their unique identifier and first name, along with a count of the number of races they have participated in. The results are filtered to include only those drivers who have participated in a specified minimum number of races, represented by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT AVG(lapTimes.fastestLapSpeed) AS average_fastest_lap_speed\nFROM races\nJOIN lapTimes ON races.raceId = lapTimes.raceId\nJOIN circuits ON races.circuitId = circuits.circuitId\nWHERE circuits.name = 'Monaco Grand Prix' AND races.year = 2008;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT AVG(lapTimes.fastestLapSpeed) AS average_fastest_lap_speed \nFROM races \nJOIN lapTimes ON races.raceId = lapTimes.raceId \nJOIN circuits ON races.circuitId = circuits.circuitId \nWHERE circuits.name = 'Monaco Grand Prix' AND races.year = 2008;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique first and last names of drivers from the 'drivers' table who have completed a lap in less than a specified time. The placeholder in the WHERE clause represents the maximum lap time in milliseconds that a driver must achieve to be included in the results.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the forename and surname of drivers from the 'drivers' table who have achieved a specific finishing position in their lap times. The placeholders in the WHERE clause represent the desired position and the minimum count of laps completed by the driver.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique driver IDs and their nationalities from the 'drivers' table, filtered by lap times recorded in the 'lapTimes' table. The condition specifies that only drivers with lap times exceeding a certain duration, represented by a placeholder for numeric values, will be included.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT AVG(lapTimes.fastestLapSpeed) AS average_fastest_lap_speed \nFROM races \nJOIN lapTimes ON races.raceId = lapTimes.raceId \nJOIN circuits ON races.circuitId = circuits.circuitId \nWHERE circuits.name = 'Monaco' AND races.year = 2008;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the surnames and unique identifiers of drivers who have made a specific number of pit stops and have also achieved a greater number of race results. The placeholders in the HAVING clauses represent the counts of pit stops and race results respectively.\",\n        \"virtual_table\": \"SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a summary of drivers from the 'drivers' table, including their unique identifier and first name, along with a count of the number of races they have participated in. The results are filtered to include only those drivers who have participated in a specified minimum number of races, represented by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of drivers who have participated in more than a specified number of pit stops or race results. It includes the drivers' first names, last names, and unique identifiers. The placeholders in the HAVING clause represent the minimum count of pit stops or race results required for inclusion in the results.\",\n        \"virtual_table\": \"SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER] UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2221",
        "c_low": "SELECT MAX(fastestLapSpeed) AS max_fastest_lap_speed\nFROM lapTimes l\nJOIN results r ON l.raceId = r.raceId AND l.driverId = r.driverId\nJOIN races ra ON r.raceId = ra.raceId\nWHERE ra.name = 'Monaco Grand Prix' AND ra.year = 2008;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT MAX(fastestLapSpeed) AS max_fastest_lap_speed \nFROM results AS R \nJOIN races AS RA ON R.raceId = RA.raceId \nWHERE RA.name = 'Monaco Grand Prix' AND RA.year = 2008;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique first and last names of drivers from the 'drivers' table who have completed a lap in less than a specified time. The placeholder in the WHERE clause represents the maximum lap time in milliseconds that a driver must achieve to be included in the results.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique driver IDs and their nationalities from the 'drivers' table, filtered by lap times recorded in the 'lapTimes' table. The condition specifies that only drivers with lap times exceeding a certain duration, represented by a placeholder for numeric values, will be included.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique race names from the 'races' table that were held at circuits located in a specific country and after a certain year. The placeholders in the WHERE clause represent the country name and the year threshold.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = [PLACEHOLDER-TYPE:STRING] AND T1.year > [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT MAX(lapTimes.fastestLapSpeed) AS max_fastest_lap_speed \nFROM races \nJOIN lapTimes ON races.raceId = lapTimes.raceId \nWHERE races.name = 'Monaco Grand Prix' AND races.year = 2008;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the forename and surname of drivers from the 'drivers' table who have achieved a specific finishing position in their lap times. The placeholders in the WHERE clause represent the desired position and the minimum count of laps completed by the driver.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the surnames and unique identifiers of drivers who have made a specific number of pit stops and have also achieved a greater number of race results. The placeholders in the HAVING clauses represent the counts of pit stops and race results respectively.\",\n        \"virtual_table\": \"SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of drivers who have participated in more than a specified number of pit stops or race results. It includes the drivers' first names, last names, and unique identifiers. The placeholders in the HAVING clause represent the minimum count of pit stops or race results required for inclusion in the results.\",\n        \"virtual_table\": \"SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER] UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT MAX(fastestLapSpeed) AS max_fastest_lap_speed\nFROM lapTimes l\nJOIN results r ON l.raceId = r.raceId AND l.driverId = r.driverId\nJOIN races ra ON r.raceId = ra.raceId\nWHERE ra.name = 'Monaco Grand Prix' AND ra.year = 2008;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT MAX(lapTimes.fastestLapSpeed) AS max_fastest_lap_speed \nFROM races \nJOIN lapTimes ON races.raceId = lapTimes.raceId \nWHERE races.name = 'Monaco Grand Prix' AND races.year = 2008;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique first and last names of drivers from the 'drivers' table who have completed a lap in less than a specified time. The placeholder in the WHERE clause represents the maximum lap time in milliseconds that a driver must achieve to be included in the results.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the forename and surname of drivers from the 'drivers' table who have achieved a specific finishing position in their lap times. The placeholders in the WHERE clause represent the desired position and the minimum count of laps completed by the driver.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique driver IDs and their nationalities from the 'drivers' table, filtered by lap times recorded in the 'lapTimes' table. The condition specifies that only drivers with lap times exceeding a certain duration, represented by a placeholder for numeric values, will be included.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT MAX(fastestLapSpeed) AS max_fastest_lap_speed \nFROM results AS r \nJOIN races AS ra ON r.raceId = ra.raceId \nWHERE ra.name = 'Monaco Grand Prix' AND ra.year = 2008;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the surnames and unique identifiers of drivers who have made a specific number of pit stops and have also achieved a greater number of race results. The placeholders in the HAVING clauses represent the counts of pit stops and race results respectively.\",\n        \"virtual_table\": \"SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of drivers who have participated in more than a specified number of pit stops or race results. It includes the drivers' first names, last names, and unique identifiers. The placeholders in the HAVING clause represent the minimum count of pit stops or race results required for inclusion in the results.\",\n        \"virtual_table\": \"SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER] UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of race results for each driver from the 'drivers' table, filtered to show only those drivers who have participated in a number of races less than or equal to a specified limit. The placeholder in the HAVING clause represents the maximum number of races a driver can have participated in.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2222",
        "c_low": "SELECT MAX(lapTimes.fastestLapSpeed) AS max_fastest_lap_speed\nFROM races\nJOIN lapTimes ON races.raceId = lapTimes.raceId\nJOIN circuits ON races.circuitId = circuits.circuitId\nWHERE circuits.name = 'Monaco Grand Prix' AND races.year = 2008;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT MAX(lapTimes.fastestLapSpeed) AS max_fastest_lap_speed \nFROM races \nJOIN lapTimes ON races.raceId = lapTimes.raceId \nJOIN circuits ON races.circuitId = circuits.circuitId \nWHERE circuits.name = 'Monaco' AND races.year = 2008;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique first and last names of drivers from the 'drivers' table who have completed a lap in less than a specified time. The placeholder in the WHERE clause represents the maximum lap time in milliseconds that a driver must achieve to be included in the results.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique driver IDs and their nationalities from the 'drivers' table, filtered by lap times recorded in the 'lapTimes' table. The condition specifies that only drivers with lap times exceeding a certain duration, represented by a placeholder for numeric values, will be included.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of drivers along with their surnames from the 'drivers' table, who have participated in races. The results are grouped by driver ID and ordered by the number of races they have participated in, allowing users to see the most active drivers. The placeholder in the LIMIT clause represents the maximum number of drivers to be displayed.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT MAX(lapTimes.fastestLapSpeed) \nFROM races \nJOIN circuits ON races.circuitId = circuits.circuitId \nJOIN lapTimes ON races.raceId = lapTimes.raceId \nWHERE circuits.name = 'Monaco Grand Prix' AND races.year = 2008;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the forename and surname of drivers from the 'drivers' table who have achieved a specific finishing position in their lap times. The placeholders in the WHERE clause represent the desired position and the minimum count of laps completed by the driver.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the surnames and unique identifiers of drivers who have made a specific number of pit stops and have also achieved a greater number of race results. The placeholders in the HAVING clauses represent the counts of pit stops and race results respectively.\",\n        \"virtual_table\": \"SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of drivers who have participated in more than a specified number of pit stops or race results. It includes the drivers' first names, last names, and unique identifiers. The placeholders in the HAVING clause represent the minimum count of pit stops or race results required for inclusion in the results.\",\n        \"virtual_table\": \"SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER] UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT MAX(lapTimes.fastestLapSpeed) AS max_fastest_lap_speed\nFROM races\nJOIN lapTimes ON races.raceId = lapTimes.raceId\nJOIN circuits ON races.circuitId = circuits.circuitId\nWHERE circuits.name = 'Monaco Grand Prix' AND races.year = 2008;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT MAX(lapTimes.fastestLapSpeed) AS max_fastest_lap_speed \nFROM races \nJOIN circuits ON races.circuitId = circuits.circuitId \nJOIN lapTimes ON races.raceId = lapTimes.raceId \nWHERE circuits.name = 'Monaco' AND races.year = 2008;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the forename and surname of drivers from the 'drivers' table who have achieved a specific finishing position in their lap times. The placeholders in the WHERE clause represent the desired position and the minimum count of laps completed by the driver.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique first and last names of drivers from the 'drivers' table who have completed a lap in less than a specified time. The placeholder in the WHERE clause represents the maximum lap time in milliseconds that a driver must achieve to be included in the results.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique driver IDs and their nationalities from the 'drivers' table, filtered by lap times recorded in the 'lapTimes' table. The condition specifies that only drivers with lap times exceeding a certain duration, represented by a placeholder for numeric values, will be included.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT MAX(lapTimes.fastestLapSpeed) AS max_fastest_lap_speed \nFROM lapTimes \nJOIN results ON lapTimes.raceId = results.raceId \nJOIN races ON results.raceId = races.raceId \nJOIN circuits ON races.circuitId = circuits.circuitId \nWHERE circuits.name = 'Monaco' AND races.year = 2008;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the surnames and unique identifiers of drivers who have made a specific number of pit stops and have also achieved a greater number of race results. The placeholders in the HAVING clauses represent the counts of pit stops and race results respectively.\",\n        \"virtual_table\": \"SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of drivers who have participated in more than a specified number of pit stops or race results. It includes the drivers' first names, last names, and unique identifiers. The placeholders in the HAVING clause represent the minimum count of pit stops or race results required for inclusion in the results.\",\n        \"virtual_table\": \"SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER] UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of race results for each driver from the 'drivers' table, filtered to show only those drivers who have participated in a number of races less than or equal to a specified limit. The placeholder in the HAVING clause represents the maximum number of races a driver can have participated in.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2223",
        "c_low": "SELECT T2.name, MAX(T1.fastestLapSpeed) AS max_fastest_lap_speed, T2.year \nFROM results AS T1 \nJOIN races AS T2 ON T1.raceId = T2.raceId \nWHERE T2.year > 2004 \nGROUP BY T2.name, T2.year \nORDER BY T2.year;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of race results from the 'results' table that are associated with a specific race name and year. The placeholders in the WHERE clause represent the race name and the year of interest.\",\n        \"virtual_table\": \"SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = [PLACEHOLDER-TYPE:STRING] AND YEAR = [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT T1.name, MAX(T2.fastestLapSpeed) AS max_fastest_lap_speed \nFROM races AS T1 \nJOIN results AS T2 ON T1.raceId = T2.raceId \nWHERE T1.year > 2004 \nGROUP BY T1.name \nORDER BY T1.year;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique first and last names of drivers from the 'drivers' table who have completed a lap in less than a specified time. The placeholder in the WHERE clause represents the maximum lap time in milliseconds that a driver must achieve to be included in the results.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique race names from the 'races' table that were held at circuits located in a specific country and after a certain year. The placeholders in the WHERE clause represent the country name and the year threshold.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = [PLACEHOLDER-TYPE:STRING] AND T1.year > [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of drivers along with their surnames from the 'drivers' table, who have participated in races. The results are grouped by driver ID and ordered by the number of races they have participated in, allowing users to see the most active drivers. The placeholder in the LIMIT clause represents the maximum number of drivers to be displayed.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT r.name AS race_name, MAX(l.fastestLapSpeed) AS max_fastest_lap_speed\nFROM races AS r\nJOIN results AS res ON r.raceId = res.raceId\nJOIN lapTimes AS l ON res.raceId = l.raceId AND res.driverId = l.driverId\nWHERE r.year > 2004\nGROUP BY r.name\nORDER BY r.year;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the forename and surname of drivers from the 'drivers' table who have achieved a specific finishing position in their lap times. The placeholders in the WHERE clause represent the desired position and the minimum count of laps completed by the driver.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of driver IDs and surnames from the 'drivers' table who have participated in races held after a specified year. The results are filtered based on the race year and grouped by driver ID to count the number of races each driver has participated in. The output is ordered by the count of races in descending order, and a limit is applied to restrict the number of results returned.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a summary of drivers from the 'drivers' table, including their unique identifier and first name, along with a count of the number of races they have participated in. The results are filtered to include only those drivers who have participated in a specified minimum number of races, represented by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT r.name AS race_name, MAX(l.fastestLapSpeed) AS max_fastest_lap_speed\nFROM races r\nJOIN lapTimes l ON r.raceId = l.raceId\nWHERE r.year > 2004\nGROUP BY r.name\nORDER BY r.year;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT R.name AS race_name, MAX(L.fastestLapSpeed) AS max_fastest_lap_speed, R.year \nFROM races AS R \nJOIN lapTimes AS L ON R.raceId = L.raceId \nWHERE R.year > 2004 \nGROUP BY R.name, R.year \nORDER BY R.year;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique first and last names of drivers from the 'drivers' table who have completed a lap in less than a specified time. The placeholder in the WHERE clause represents the maximum lap time in milliseconds that a driver must achieve to be included in the results.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the forename and surname of drivers from the 'drivers' table who have achieved a specific finishing position in their lap times. The placeholders in the WHERE clause represent the desired position and the minimum count of laps completed by the driver.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique race names from the 'races' table that were held at circuits located in a specific country and after a certain year. The placeholders in the WHERE clause represent the country name and the year threshold.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = [PLACEHOLDER-TYPE:STRING] AND T1.year > [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT r.name AS race_name, MAX(l.fastestLapSpeed) AS max_fastest_lap_speed \nFROM races r \nJOIN results res ON r.raceId = res.raceId \nJOIN lapTimes l ON res.raceId = l.raceId AND res.driverId = l.driverId \nWHERE r.year > 2004 \nGROUP BY r.name \nORDER BY r.year;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of driver IDs and surnames from the 'drivers' table who have participated in races held after a specified year. The results are filtered based on the race year and grouped by driver ID to count the number of races each driver has participated in. The output is ordered by the count of races in descending order, and a limit is applied to restrict the number of results returned.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of drivers along with their surnames from the 'drivers' table, who have participated in races. The results are grouped by driver ID and ordered by the number of races they have participated in, allowing users to see the most active drivers. The placeholder in the LIMIT clause represents the maximum number of drivers to be displayed.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a summary of drivers from the 'drivers' table, including their unique identifier and first name, along with a count of the number of races they have participated in. The results are filtered to include only those drivers who have participated in a specified minimum number of races, represented by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2224",
        "c_low": "SELECT r.name, MAX(res.fastestLapSpeed) AS max_fastest_lap_speed\nFROM races AS r\nJOIN results AS res ON r.raceId = res.raceId\nWHERE r.year > 2004\nGROUP BY r.name\nORDER BY r.year;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of race results from the 'results' table that are associated with a specific race name and year. The placeholders in the WHERE clause represent the race name and the year of interest.\",\n        \"virtual_table\": \"SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = [PLACEHOLDER-TYPE:STRING] AND YEAR = [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT T1.name, MAX(T2.fastestLapSpeed) AS max_fastest_lap_speed \nFROM races AS T1 \nJOIN results AS T2 ON T1.raceId = T2.raceId \nWHERE T1.year > 2004 \nGROUP BY T1.name \nORDER BY T1.year;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique first and last names of drivers from the 'drivers' table who have completed a lap in less than a specified time. The placeholder in the WHERE clause represents the maximum lap time in milliseconds that a driver must achieve to be included in the results.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique race names from the 'races' table that were held at circuits located in a specific country and after a certain year. The placeholders in the WHERE clause represent the country name and the year threshold.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = [PLACEHOLDER-TYPE:STRING] AND T1.year > [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of drivers along with their surnames from the 'drivers' table, who have participated in races. The results are grouped by driver ID and ordered by the number of races they have participated in, allowing users to see the most active drivers. The placeholder in the LIMIT clause represents the maximum number of drivers to be displayed.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT R.name, MAX(L.fastestLapSpeed) AS max_fastest_lap_speed \nFROM races AS R \nJOIN results AS Res ON R.raceId = Res.raceId \nJOIN lapTimes AS L ON Res.raceId = L.raceId AND Res.driverId = L.driverId \nWHERE R.year > 2004 \nGROUP BY R.name, R.year \nORDER BY R.year;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the forename and surname of drivers from the 'drivers' table who have achieved a specific finishing position in their lap times. The placeholders in the WHERE clause represent the desired position and the minimum count of laps completed by the driver.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of driver IDs and surnames from the 'drivers' table who have participated in races held after a specified year. The results are filtered based on the race year and grouped by driver ID to count the number of races each driver has participated in. The output is ordered by the count of races in descending order, and a limit is applied to restrict the number of results returned.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the surnames and unique identifiers of drivers who have made a specific number of pit stops and have also achieved a greater number of race results. The placeholders in the HAVING clauses represent the counts of pit stops and race results respectively.\",\n        \"virtual_table\": \"SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT r.name AS race_name, MAX(l.fastestLapSpeed) AS max_fastest_lap_speed\nFROM races r\nJOIN lapTimes l ON r.raceId = l.raceId\nWHERE r.year > 2004\nGROUP BY r.name\nORDER BY r.year;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T1.name, MAX(T2.fastestLapSpeed) AS max_fastest_lap_speed \nFROM races AS T1 \nJOIN results AS T2 ON T1.raceId = T2.raceId \nWHERE T1.year > 2004 \nGROUP BY T1.name \nORDER BY T1.year;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique first and last names of drivers from the 'drivers' table who have completed a lap in less than a specified time. The placeholder in the WHERE clause represents the maximum lap time in milliseconds that a driver must achieve to be included in the results.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the forename and surname of drivers from the 'drivers' table who have achieved a specific finishing position in their lap times. The placeholders in the WHERE clause represent the desired position and the minimum count of laps completed by the driver.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique race names from the 'races' table that were held at circuits located in a specific country and after a certain year. The placeholders in the WHERE clause represent the country name and the year threshold.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = [PLACEHOLDER-TYPE:STRING] AND T1.year > [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT R.name, MAX(RS.fastestLapSpeed) AS max_fastest_lap_speed \nFROM races AS R \nJOIN results AS RS ON R.raceId = RS.raceId \nWHERE R.year > 2004 \nGROUP BY R.name \nORDER BY R.year;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of driver IDs and surnames from the 'drivers' table who have participated in races held after a specified year. The results are filtered based on the race year and grouped by driver ID to count the number of races each driver has participated in. The output is ordered by the count of races in descending order, and a limit is applied to restrict the number of results returned.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of drivers along with their surnames from the 'drivers' table, who have participated in races. The results are grouped by driver ID and ordered by the number of races they have participated in, allowing users to see the most active drivers. The placeholder in the LIMIT clause represents the maximum number of drivers to be displayed.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the surnames and unique identifiers of drivers who have made a specific number of pit stops and have also achieved a greater number of race results. The placeholders in the HAVING clauses represent the counts of pit stops and race results respectively.\",\n        \"virtual_table\": \"SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2225",
        "c_low": "SELECT r.name, AVG(l.fastestLapSpeed) AS average_fastest_lap_speed\nFROM races AS r\nJOIN results AS res ON r.raceId = res.raceId\nJOIN lapTimes AS l ON res.raceId = l.raceId AND res.driverId = l.driverId\nWHERE r.year > 2004\nGROUP BY r.name\nORDER BY r.year;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of race results from the 'results' table that are associated with a specific race name and year. The placeholders in the WHERE clause represent the race name and the year of interest.\",\n        \"virtual_table\": \"SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = [PLACEHOLDER-TYPE:STRING] AND YEAR = [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT R.name, AVG(L.fastestLapSpeed) AS average_fastest_lap_speed\nFROM races AS R\nJOIN results AS Res ON R.raceId = Res.raceId\nJOIN lapTimes AS L ON Res.raceId = L.raceId AND Res.driverId = L.driverId\nWHERE R.year > 2004\nGROUP BY R.name\nORDER BY R.year;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique first and last names of drivers from the 'drivers' table who have completed a lap in less than a specified time. The placeholder in the WHERE clause represents the maximum lap time in milliseconds that a driver must achieve to be included in the results.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique race names from the 'races' table that were held at circuits located in a specific country and after a certain year. The placeholders in the WHERE clause represent the country name and the year threshold.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = [PLACEHOLDER-TYPE:STRING] AND T1.year > [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of drivers along with their surnames from the 'drivers' table, who have participated in races. The results are grouped by driver ID and ordered by the number of races they have participated in, allowing users to see the most active drivers. The placeholder in the LIMIT clause represents the maximum number of drivers to be displayed.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT R.name, AVG(L.fastestLapSpeed) AS average_fastest_lap_speed\nFROM races AS R\nJOIN lapTimes AS L ON R.raceId = L.raceId\nWHERE R.year > 2004\nGROUP BY R.name\nORDER BY R.year;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the forename and surname of drivers from the 'drivers' table who have achieved a specific finishing position in their lap times. The placeholders in the WHERE clause represent the desired position and the minimum count of laps completed by the driver.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of driver IDs and surnames from the 'drivers' table who have participated in races held after a specified year. The results are filtered based on the race year and grouped by driver ID to count the number of races each driver has participated in. The output is ordered by the count of races in descending order, and a limit is applied to restrict the number of results returned.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a summary of drivers from the 'drivers' table, including their unique identifier and first name, along with a count of the number of races they have participated in. The results are filtered to include only those drivers who have participated in a specified minimum number of races, represented by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT r.name AS race_name, AVG(l.fastestLapSpeed) AS average_fastest_lap_speed\nFROM races r\nJOIN lapTimes l ON r.raceId = l.raceId\nWHERE r.year > 2004\nGROUP BY r.name\nORDER BY r.year;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT R.name AS race_name, AVG(L.fastestLapSpeed) AS average_fastest_lap_speed\nFROM races AS R\nJOIN results AS Res ON R.raceId = Res.raceId\nJOIN lapTimes AS L ON Res.raceId = L.raceId AND Res.driverId = L.driverId\nWHERE R.year > 2004\nGROUP BY R.name\nORDER BY R.year;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique first and last names of drivers from the 'drivers' table who have completed a lap in less than a specified time. The placeholder in the WHERE clause represents the maximum lap time in milliseconds that a driver must achieve to be included in the results.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the forename and surname of drivers from the 'drivers' table who have achieved a specific finishing position in their lap times. The placeholders in the WHERE clause represent the desired position and the minimum count of laps completed by the driver.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique race names from the 'races' table that were held at circuits located in a specific country and after a certain year. The placeholders in the WHERE clause represent the country name and the year threshold.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = [PLACEHOLDER-TYPE:STRING] AND T1.year > [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT R.name, AVG(L.fastestLapSpeed) AS average_fastest_lap_speed \nFROM races AS R \nJOIN results AS Res ON R.raceId = Res.raceId \nJOIN lapTimes AS L ON Res.raceId = L.raceId AND Res.driverId = L.driverId \nWHERE R.year > 2004 \nGROUP BY R.name \nORDER BY R.year;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of driver IDs and surnames from the 'drivers' table who have participated in races held after a specified year. The results are filtered based on the race year and grouped by driver ID to count the number of races each driver has participated in. The output is ordered by the count of races in descending order, and a limit is applied to restrict the number of results returned.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of drivers along with their surnames from the 'drivers' table, who have participated in races. The results are grouped by driver ID and ordered by the number of races they have participated in, allowing users to see the most active drivers. The placeholder in the LIMIT clause represents the maximum number of drivers to be displayed.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a summary of drivers from the 'drivers' table, including their unique identifier and first name, along with a count of the number of races they have participated in. The results are filtered to include only those drivers who have participated in a specified minimum number of races, represented by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2226",
        "c_low": "SELECT r.year, AVG(lap.fastestLapSpeed) AS average_fastest_lap_speed\nFROM races AS r\nJOIN results AS res ON r.raceId = res.raceId\nJOIN lapTimes AS lap ON res.raceId = lap.raceId AND res.driverId = lap.driverId\nWHERE r.year > 2004\nGROUP BY r.year\nORDER BY r.year;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of race results from the 'results' table that are associated with a specific race name and year. The placeholders in the WHERE clause represent the race name and the year of interest.\",\n        \"virtual_table\": \"SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = [PLACEHOLDER-TYPE:STRING] AND YEAR = [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT R.year, AVG(L.fastestLapSpeed) AS average_fastest_lap_speed\nFROM races AS R\nJOIN results AS Res ON R.raceId = Res.raceId\nJOIN lapTimes AS L ON R.raceId = L.raceId\nWHERE R.year > 2004\nGROUP BY R.year\nORDER BY R.year;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique first and last names of drivers from the 'drivers' table who have completed a lap in less than a specified time. The placeholder in the WHERE clause represents the maximum lap time in milliseconds that a driver must achieve to be included in the results.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique race names from the 'races' table that were held at circuits located in a specific country and after a certain year. The placeholders in the WHERE clause represent the country name and the year threshold.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = [PLACEHOLDER-TYPE:STRING] AND T1.year > [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of drivers along with their surnames from the 'drivers' table, who have participated in races. The results are grouped by driver ID and ordered by the number of races they have participated in, allowing users to see the most active drivers. The placeholder in the LIMIT clause represents the maximum number of drivers to be displayed.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT T3.year, AVG(T2.fastestLapSpeed) AS average_fastest_lap_speed \nFROM lapTimes AS T2 \nJOIN results AS T1 ON T2.raceId = T1.raceId \nJOIN races AS T3 ON T1.raceId = T3.raceId \nWHERE T3.year > 2004 \nGROUP BY T3.year \nORDER BY T3.year;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the forename and surname of drivers from the 'drivers' table who have achieved a specific finishing position in their lap times. The placeholders in the WHERE clause represent the desired position and the minimum count of laps completed by the driver.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of driver IDs and surnames from the 'drivers' table who have participated in races held after a specified year. The results are filtered based on the race year and grouped by driver ID to count the number of races each driver has participated in. The output is ordered by the count of races in descending order, and a limit is applied to restrict the number of results returned.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a summary of drivers from the 'drivers' table, including their unique identifier and first name, along with a count of the number of races they have participated in. The results are filtered to include only those drivers who have participated in a specified minimum number of races, represented by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT r.year, AVG(l.fastestLapSpeed) AS average_fastest_lap_speed\nFROM races r\nJOIN lapTimes l ON r.raceId = l.raceId\nWHERE r.year > 2004\nGROUP BY r.year\nORDER BY r.year;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T1.year, AVG(T2.fastestLapSpeed) AS average_fastest_lap_speed \nFROM races AS T1 \nJOIN results AS T2 ON T1.raceId = T2.raceId \nWHERE T1.year > 2004 \nGROUP BY T1.year \nORDER BY T1.year;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique first and last names of drivers from the 'drivers' table who have completed a lap in less than a specified time. The placeholder in the WHERE clause represents the maximum lap time in milliseconds that a driver must achieve to be included in the results.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the forename and surname of drivers from the 'drivers' table who have achieved a specific finishing position in their lap times. The placeholders in the WHERE clause represent the desired position and the minimum count of laps completed by the driver.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  [PLACEHOLDER-TYPE:STRING] GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique race names from the 'races' table that were held at circuits located in a specific country and after a certain year. The placeholders in the WHERE clause represent the country name and the year threshold.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = [PLACEHOLDER-TYPE:STRING] AND T1.year > [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT T3.year, AVG(T2.fastestLapSpeed) AS average_fastest_lap_speed \nFROM results AS T2 \nJOIN races AS T3 ON T2.raceId = T3.raceId \nWHERE T3.year > 2004 \nGROUP BY T3.year \nORDER BY T3.year;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of driver IDs and surnames from the 'drivers' table who have participated in races held after a specified year. The results are filtered based on the race year and grouped by driver ID to count the number of races each driver has participated in. The output is ordered by the count of races in descending order, and a limit is applied to restrict the number of results returned.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > [PLACEHOLDER-TYPE:NUMBER] GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a summary of drivers from the 'drivers' table, including their unique identifier and first name, along with a count of the number of races they have participated in. The results are filtered to include only those drivers who have participated in a specified minimum number of races, represented by a placeholder for numeric values.\",\n        \"virtual_table\": \"SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the surnames and unique identifiers of drivers who have made a specific number of pit stops and have also achieved a greater number of race results. The placeholders in the HAVING clauses represent the counts of pit stops and race results respectively.\",\n        \"virtual_table\": \"SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2243",
        "c_low": "SELECT MIN(Starting_Year) AS Oldest_Technician_Starting_Year FROM technician;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT MIN(Starting_Year) AS Oldest_Starting_Year FROM technician;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of technicians from the 'technician' table who are either of a specific age or another specified age. The placeholders in the WHERE clause represent the ages of the technicians.\",\n        \"virtual_table\": \"SELECT Name FROM technician WHERE Age  =  [PLACEHOLDER-TYPE:NUMBER] OR Age  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of technicians who are assigned to repair tasks for machines that have a value point greater than a specified threshold. The placeholders in the WHERE clause represent the numeric value for the machine's value points.\",\n        \"virtual_table\": \"SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.value_points  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT MIN(Starting_Year) AS Oldest_Starting_Year FROM technician;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies the starting years of technicians from the 'technician' table who belong to two specific teams. The placeholders in the WHERE clause represent the team identifiers for which the starting years are being compared.\",\n        \"virtual_table\": \"SELECT Starting_Year FROM technician WHERE Team  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the teams from the 'technician' table that have a minimum number of technicians. The placeholder in the HAVING clause represents the minimum count of technicians required for a team to be included in the results.\",\n        \"virtual_table\": \"SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT MIN(Starting_Year) AS Oldest_Technician_Starting_Year FROM technician;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies the starting years of technicians from the 'technician' table who belong to two specific teams. The placeholders in the WHERE clause represent the team identifiers for which the starting years are being compared.\",\n        \"virtual_table\": \"SELECT Starting_Year FROM technician WHERE Team  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of technicians from the 'technician' table who are either of a specific age or another specified age. The placeholders in the WHERE clause represent the ages of the technicians.\",\n        \"virtual_table\": \"SELECT Name FROM technician WHERE Age  =  [PLACEHOLDER-TYPE:NUMBER] OR Age  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the teams from the 'technician' table that have a minimum number of technicians. The placeholder in the HAVING clause represents the minimum count of technicians required for a team to be included in the results.\",\n        \"virtual_table\": \"SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT MIN(Starting_Year) AS Oldest_Technician_Starting_Year FROM technician;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT MIN(Starting_Year) AS Oldest_Starting_Year FROM technician;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of technicians who are assigned to repair tasks for machines that have a value point greater than a specified threshold. The placeholders in the WHERE clause represent the numeric value for the machine's value points.\",\n        \"virtual_table\": \"SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.value_points  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2244",
        "c_low": "SELECT MIN(Starting_Year) AS Oldest_Technician_Starting_Year FROM technician;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Starting_Year FROM technician ORDER BY Starting_Year ASC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of technicians from the 'technician' table who are either of a specific age or another specified age. The placeholders in the WHERE clause represent the ages of the technicians.\",\n        \"virtual_table\": \"SELECT Name FROM technician WHERE Age  =  [PLACEHOLDER-TYPE:NUMBER] OR Age  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of technicians who are assigned to repair tasks for machines that have a value point greater than a specified threshold. The placeholders in the WHERE clause represent the numeric value for the machine's value points.\",\n        \"virtual_table\": \"SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.value_points  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT MIN(Starting_Year) AS Oldest_Starting_Year FROM technician;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies the starting years of technicians from the 'technician' table who belong to two specific teams. The placeholders in the WHERE clause represent the team identifiers for which the starting years are being compared.\",\n        \"virtual_table\": \"SELECT Starting_Year FROM technician WHERE Team  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the teams from the 'technician' table that have a minimum number of technicians. The placeholder in the HAVING clause represents the minimum count of technicians required for a team to be included in the results.\",\n        \"virtual_table\": \"SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT MIN(Starting_Year) AS Oldest_Technician_Starting_Year FROM technician;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies the starting years of technicians from the 'technician' table who belong to two specific teams. The placeholders in the WHERE clause represent the team identifiers for which the starting years are being compared.\",\n        \"virtual_table\": \"SELECT Starting_Year FROM technician WHERE Team  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of technicians from the 'technician' table who are either of a specific age or another specified age. The placeholders in the WHERE clause represent the ages of the technicians.\",\n        \"virtual_table\": \"SELECT Name FROM technician WHERE Age  =  [PLACEHOLDER-TYPE:NUMBER] OR Age  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the teams from the 'technician' table that have a minimum number of technicians. The placeholder in the HAVING clause represents the minimum count of technicians required for a team to be included in the results.\",\n        \"virtual_table\": \"SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT MIN(Starting_Year) AS Oldest_Technician_Starting_Year FROM technician;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT MIN(Starting_Year) AS Oldest_Technician_Starting_Year FROM technician;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of technicians who are assigned to repair tasks for machines that have a value point greater than a specified threshold. The placeholders in the WHERE clause represent the numeric value for the machine's value points.\",\n        \"virtual_table\": \"SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.value_points  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2247",
        "c_low": "SELECT Team, COUNT(technician_id) AS technician_count\nFROM technician\nGROUP BY Team\nORDER BY technician_count DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Team, COUNT(technician_id) AS technician_count FROM technician GROUP BY Team ORDER BY technician_count DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of technicians who are assigned to repair tasks for machines that have a value point greater than a specified threshold. The placeholders in the WHERE clause represent the numeric value for the machine's value points.\",\n        \"virtual_table\": \"SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.value_points  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of technicians from the 'technician' table who are either of a specific age or another specified age. The placeholders in the WHERE clause represent the ages of the technicians.\",\n        \"virtual_table\": \"SELECT Name FROM technician WHERE Age  =  [PLACEHOLDER-TYPE:NUMBER] OR Age  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT Team, COUNT(*) as technician_count FROM technician GROUP BY Team ORDER BY technician_count DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the teams from the 'technician' table that have a minimum number of technicians. The placeholder in the HAVING clause represents the minimum count of technicians required for a team to be included in the results.\",\n        \"virtual_table\": \"SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies the starting years of technicians from the 'technician' table who belong to two specific teams. The placeholders in the WHERE clause represent the team identifiers for which the starting years are being compared.\",\n        \"virtual_table\": \"SELECT Starting_Year FROM technician WHERE Team  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT Team, COUNT(*) as technician_count FROM technician GROUP BY Team ORDER BY technician_count DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the teams from the 'technician' table that have a minimum number of technicians. The placeholder in the HAVING clause represents the minimum count of technicians required for a team to be included in the results.\",\n        \"virtual_table\": \"SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies the starting years of technicians from the 'technician' table who belong to two specific teams. The placeholders in the WHERE clause represent the team identifiers for which the starting years are being compared.\",\n        \"virtual_table\": \"SELECT Starting_Year FROM technician WHERE Team  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of technicians from the 'technician' table who are either of a specific age or another specified age. The placeholders in the WHERE clause represent the ages of the technicians.\",\n        \"virtual_table\": \"SELECT Name FROM technician WHERE Age  =  [PLACEHOLDER-TYPE:NUMBER] OR Age  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Team, COUNT(technician_id) AS technician_count \nFROM technician \nGROUP BY Team \nORDER BY technician_count DESC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT Team, COUNT(technician_id) AS technician_count FROM technician GROUP BY Team ORDER BY technician_count DESC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of technicians who are assigned to repair tasks for machines that have a value point greater than a specified threshold. The placeholders in the WHERE clause represent the numeric value for the machine's value points.\",\n        \"virtual_table\": \"SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.value_points  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2248",
        "c_low": "SELECT Team, COUNT(technician_id) AS technician_count\nFROM technician\nGROUP BY Team\nORDER BY technician_count DESC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Team, COUNT(technician_id) AS technician_count FROM technician GROUP BY Team ORDER BY technician_count DESC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of technicians who are assigned to repair tasks for machines that have a value point greater than a specified threshold. The placeholders in the WHERE clause represent the numeric value for the machine's value points.\",\n        \"virtual_table\": \"SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.value_points  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of technicians from the 'technician' table who are either of a specific age or another specified age. The placeholders in the WHERE clause represent the ages of the technicians.\",\n        \"virtual_table\": \"SELECT Name FROM technician WHERE Age  =  [PLACEHOLDER-TYPE:NUMBER] OR Age  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT Team, COUNT(*) as technician_count FROM technician GROUP BY Team ORDER BY technician_count DESC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the teams from the 'technician' table that have a minimum number of technicians. The placeholder in the HAVING clause represents the minimum count of technicians required for a team to be included in the results.\",\n        \"virtual_table\": \"SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies the starting years of technicians from the 'technician' table who belong to two specific teams. The placeholders in the WHERE clause represent the team identifiers for which the starting years are being compared.\",\n        \"virtual_table\": \"SELECT Starting_Year FROM technician WHERE Team  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT Team, COUNT(*) as technician_count FROM technician GROUP BY Team ORDER BY technician_count DESC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the teams from the 'technician' table that have a minimum number of technicians. The placeholder in the HAVING clause represents the minimum count of technicians required for a team to be included in the results.\",\n        \"virtual_table\": \"SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies the starting years of technicians from the 'technician' table who belong to two specific teams. The placeholders in the WHERE clause represent the team identifiers for which the starting years are being compared.\",\n        \"virtual_table\": \"SELECT Starting_Year FROM technician WHERE Team  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of technicians from the 'technician' table who are either of a specific age or another specified age. The placeholders in the WHERE clause represent the ages of the technicians.\",\n        \"virtual_table\": \"SELECT Name FROM technician WHERE Age  =  [PLACEHOLDER-TYPE:NUMBER] OR Age  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Team, COUNT(technician_id) AS technician_count\nFROM technician\nGROUP BY Team\nORDER BY technician_count DESC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT Team, COUNT(technician_id) AS technician_count FROM technician GROUP BY Team ORDER BY technician_count DESC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of technicians who are assigned to repair tasks for machines that have a value point greater than a specified threshold. The placeholders in the WHERE clause represent the numeric value for the machine's value points.\",\n        \"virtual_table\": \"SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.value_points  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2256",
        "c_low": "SELECT technician.Name \nFROM technician \nJOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id \nJOIN machine ON repair_assignment.Machine_ID = machine.Machine_ID \nWHERE machine.value_points > 70;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.Machine_ID = T2.Machine_ID JOIN technician AS T3 ON T1.technician_id = T3.technician_id WHERE T2.value_points > 70",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of technicians who are assigned to repair tasks for machines that have a value point greater than a specified threshold. The placeholders in the WHERE clause represent the numeric value for the machine's value points.\",\n        \"virtual_table\": \"SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.value_points  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of technicians from the 'technician' table who are either of a specific age or another specified age. The placeholders in the WHERE clause represent the ages of the technicians.\",\n        \"virtual_table\": \"SELECT Name FROM technician WHERE Age  =  [PLACEHOLDER-TYPE:NUMBER] OR Age  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT technician.Name \nFROM technician \nJOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id \nJOIN machine ON repair_assignment.Machine_ID = machine.Machine_ID \nWHERE machine.value_points > 70;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies the starting years of technicians from the 'technician' table who belong to two specific teams. The placeholders in the WHERE clause represent the team identifiers for which the starting years are being compared.\",\n        \"virtual_table\": \"SELECT Starting_Year FROM technician WHERE Team  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the teams from the 'technician' table that have a minimum number of technicians. The placeholder in the HAVING clause represents the minimum count of technicians required for a team to be included in the results.\",\n        \"virtual_table\": \"SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT technician.Name \nFROM technician \nJOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id \nJOIN machine ON repair_assignment.Machine_ID = machine.Machine_ID \nWHERE machine.value_points > 70;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of technicians from the 'technician' table who are either of a specific age or another specified age. The placeholders in the WHERE clause represent the ages of the technicians.\",\n        \"virtual_table\": \"SELECT Name FROM technician WHERE Age  =  [PLACEHOLDER-TYPE:NUMBER] OR Age  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies the starting years of technicians from the 'technician' table who belong to two specific teams. The placeholders in the WHERE clause represent the team identifiers for which the starting years are being compared.\",\n        \"virtual_table\": \"SELECT Starting_Year FROM technician WHERE Team  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the teams from the 'technician' table that have a minimum number of technicians. The placeholder in the HAVING clause represents the minimum count of technicians required for a team to be included in the results.\",\n        \"virtual_table\": \"SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT technician.Name \nFROM technician \nJOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id \nJOIN machine ON repair_assignment.Machine_ID = machine.Machine_ID \nWHERE machine.value_points > 70;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.Machine_ID = T2.Machine_ID JOIN technician AS T3 ON T1.technician_id = T3.technician_id WHERE T2.value_points > 70",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of technicians who are assigned to repair tasks for machines that have a value point greater than a specified threshold. The placeholders in the WHERE clause represent the numeric value for the machine's value points.\",\n        \"virtual_table\": \"SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.value_points  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2257",
        "c_low": "SELECT technician.Name, COUNT(repair_assignment.Machine_ID) AS machine_count\nFROM technician\nLEFT JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id\nGROUP BY technician.technician_id;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT T3.Name, COUNT(T1.Machine_ID) AS Number_of_Machines\nFROM repair_assignment AS T1\nJOIN technician AS T3 ON T1.technician_id = T3.technician_id\nGROUP BY T3.Name;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of technicians who are assigned to repair tasks for machines that have a value point greater than a specified threshold. The placeholders in the WHERE clause represent the numeric value for the machine's value points.\",\n        \"virtual_table\": \"SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.value_points  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of technicians from the 'technician' table who are either of a specific age or another specified age. The placeholders in the WHERE clause represent the ages of the technicians.\",\n        \"virtual_table\": \"SELECT Name FROM technician WHERE Age  =  [PLACEHOLDER-TYPE:NUMBER] OR Age  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT technician.Name, COUNT(repair_assignment.Machine_ID) AS machine_count\nFROM technician\nLEFT JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id\nGROUP BY technician.Name;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies the starting years of technicians from the 'technician' table who belong to two specific teams. The placeholders in the WHERE clause represent the team identifiers for which the starting years are being compared.\",\n        \"virtual_table\": \"SELECT Starting_Year FROM technician WHERE Team  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the teams from the 'technician' table that have a minimum number of technicians. The placeholder in the HAVING clause represents the minimum count of technicians required for a team to be included in the results.\",\n        \"virtual_table\": \"SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT technician.Name, COUNT(repair_assignment.Machine_ID) AS number_of_machines\nFROM technician\nLEFT JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id\nGROUP BY technician.Name;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of technicians from the 'technician' table who are either of a specific age or another specified age. The placeholders in the WHERE clause represent the ages of the technicians.\",\n        \"virtual_table\": \"SELECT Name FROM technician WHERE Age  =  [PLACEHOLDER-TYPE:NUMBER] OR Age  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies the starting years of technicians from the 'technician' table who belong to two specific teams. The placeholders in the WHERE clause represent the team identifiers for which the starting years are being compared.\",\n        \"virtual_table\": \"SELECT Starting_Year FROM technician WHERE Team  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the teams from the 'technician' table that have a minimum number of technicians. The placeholder in the HAVING clause represents the minimum count of technicians required for a team to be included in the results.\",\n        \"virtual_table\": \"SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT technician.Name, COUNT(repair_assignment.Machine_ID) AS machine_count\nFROM technician\nLEFT JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id\nGROUP BY technician.technician_id;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT T3.Name, COUNT(T1.Machine_ID) AS Number_of_Machines \nFROM repair_assignment AS T1 \nJOIN technician AS T3 ON T1.technician_id = T3.technician_id \nGROUP BY T3.Name",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of technicians who are assigned to repair tasks for machines that have a value point greater than a specified threshold. The placeholders in the WHERE clause represent the numeric value for the machine's value points.\",\n        \"virtual_table\": \"SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.value_points  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2258",
        "c_low": "SELECT technician.Name, COUNT(repair_assignment.Machine_ID) AS machine_count\nFROM technician\nLEFT JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id\nGROUP BY technician.Name;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT T3.Name, COUNT(T1.Machine_ID) AS Machine_Count \nFROM repair_assignment AS T1 \nJOIN technician AS T3 ON T1.technician_id = T3.technician_id \nGROUP BY T3.Name;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of technicians who are assigned to repair tasks for machines that have a value point greater than a specified threshold. The placeholders in the WHERE clause represent the numeric value for the machine's value points.\",\n        \"virtual_table\": \"SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.value_points  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of technicians from the 'technician' table who are either of a specific age or another specified age. The placeholders in the WHERE clause represent the ages of the technicians.\",\n        \"virtual_table\": \"SELECT Name FROM technician WHERE Age  =  [PLACEHOLDER-TYPE:NUMBER] OR Age  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT technician.Name, COUNT(repair_assignment.Machine_ID) AS machine_count \nFROM technician \nLEFT JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id \nGROUP BY technician.Name;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies the starting years of technicians from the 'technician' table who belong to two specific teams. The placeholders in the WHERE clause represent the team identifiers for which the starting years are being compared.\",\n        \"virtual_table\": \"SELECT Starting_Year FROM technician WHERE Team  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the teams from the 'technician' table that have a minimum number of technicians. The placeholder in the HAVING clause represents the minimum count of technicians required for a team to be included in the results.\",\n        \"virtual_table\": \"SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT technician.Name, COUNT(repair_assignment.Machine_ID) AS machine_count \nFROM technician \nLEFT JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id \nGROUP BY technician.Name;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of technicians from the 'technician' table who are either of a specific age or another specified age. The placeholders in the WHERE clause represent the ages of the technicians.\",\n        \"virtual_table\": \"SELECT Name FROM technician WHERE Age  =  [PLACEHOLDER-TYPE:NUMBER] OR Age  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies the starting years of technicians from the 'technician' table who belong to two specific teams. The placeholders in the WHERE clause represent the team identifiers for which the starting years are being compared.\",\n        \"virtual_table\": \"SELECT Starting_Year FROM technician WHERE Team  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the teams from the 'technician' table that have a minimum number of technicians. The placeholder in the HAVING clause represents the minimum count of technicians required for a team to be included in the results.\",\n        \"virtual_table\": \"SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT technician.Name, COUNT(repair_assignment.Machine_ID) AS machine_count\nFROM technician\nLEFT JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id\nGROUP BY technician.Name;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT T3.Name, COUNT(T1.Machine_ID) AS Machine_Count \nFROM repair_assignment AS T1 \nJOIN technician AS T3 ON T1.technician_id = T3.technician_id \nGROUP BY T3.Name;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of technicians who are assigned to repair tasks for machines that have a value point greater than a specified threshold. The placeholders in the WHERE clause represent the numeric value for the machine's value points.\",\n        \"virtual_table\": \"SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.value_points  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2262",
        "c_low": "SELECT DISTINCT Starting_Year FROM technician WHERE Team IN ('CLE', 'CWS');",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Starting_Year FROM technician WHERE Team = 'CLE' OR Team = 'CWS'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of technicians from the 'technician' table who are either of a specific age or another specified age. The placeholders in the WHERE clause represent the ages of the technicians.\",\n        \"virtual_table\": \"SELECT Name FROM technician WHERE Age  =  [PLACEHOLDER-TYPE:NUMBER] OR Age  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT Starting_Year FROM technician WHERE Team = 'CLE' INTERSECT SELECT Starting_Year FROM technician WHERE Team = 'CWS'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies the starting years of technicians from the 'technician' table who belong to two specific teams. The placeholders in the WHERE clause represent the team identifiers for which the starting years are being compared.\",\n        \"virtual_table\": \"SELECT Starting_Year FROM technician WHERE Team  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the teams from the 'technician' table that have a minimum number of technicians. The placeholder in the HAVING clause represents the minimum count of technicians required for a team to be included in the results.\",\n        \"virtual_table\": \"SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Starting_Year FROM technician WHERE Team = 'CLE' INTERSECT SELECT Starting_Year FROM technician WHERE Team = 'CWS'",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies the starting years of technicians from the 'technician' table who belong to two specific teams. The placeholders in the WHERE clause represent the team identifiers for which the starting years are being compared.\",\n        \"virtual_table\": \"SELECT Starting_Year FROM technician WHERE Team  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the teams from the 'technician' table that have a minimum number of technicians. The placeholder in the HAVING clause represents the minimum count of technicians required for a team to be included in the results.\",\n        \"virtual_table\": \"SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of technicians from the 'technician' table who are either of a specific age or another specified age. The placeholders in the WHERE clause represent the ages of the technicians.\",\n        \"virtual_table\": \"SELECT Name FROM technician WHERE Age  =  [PLACEHOLDER-TYPE:NUMBER] OR Age  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT Starting_Year FROM technician WHERE Team IN ('CLE', 'CWS');",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT DISTINCT Starting_Year FROM technician WHERE Team IN ('CLE', 'CWS');",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2279",
        "c_low": "SELECT e.Name FROM entrepreneur e JOIN people p ON e.People_ID = p.People_ID WHERE p.Weight = (SELECT MAX(Weight) FROM people)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the weights of individuals from the 'people' table, sorted in ascending order by their height. The placeholder in the LIMIT clause indicates the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT Weight FROM people ORDER BY Height ASC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Weight DESC LIMIT 1",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of people associated with entrepreneurs who are not seeking investment from a specific investor. The placeholder in the WHERE clause represents the name of the investor.\",\n        \"virtual_table\": \"SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT Name FROM people WHERE People_ID = (SELECT People_ID FROM entrepreneur ORDER BY Weight DESC LIMIT 1)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the birth dates of individuals who are linked to entrepreneurs seeking investment. The entrepreneurs are filtered based on the names of the investors, which are represented by placeholders in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  [PLACEHOLDER-TYPE:STRING] OR T1.Investor  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of investors who have shown interest in entrepreneurs' companies, grouped by the investor's name. The results are ordered by the number of entrepreneurs associated with each investor in descending order, with a limit on the number of investors returned based on a specified number.\",\n        \"virtual_table\": \"SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the number of entrepreneurs associated with each investor from the 'entrepreneur' table. The placeholder in the SELECT clause represents the investor's name, and the COUNT function is used to aggregate the number of entrepreneurs for each investor.\",\n        \"virtual_table\": \"SELECT Investor ,  COUNT(*) FROM entrepreneur GROUP BY Investor\"\n    }\n}\n",
        "t_1": "SELECT Name FROM people WHERE People_ID = (SELECT People_ID FROM entrepreneur ORDER BY (SELECT Weight FROM people WHERE People_ID = entrepreneur.People_ID) DESC LIMIT 1)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of investors who have shown interest in entrepreneurs' companies, grouped by the investor's name. The results are ordered by the number of entrepreneurs associated with each investor in descending order, with a limit on the number of investors returned based on a specified number.\",\n        \"virtual_table\": \"SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of entrepreneurs associated with each investor from the 'entrepreneur' table. The placeholder in the SELECT clause represents the investor's name, and the COUNT function is used to aggregate the number of entrepreneurs for each investor.\",\n        \"virtual_table\": \"SELECT Investor ,  COUNT(*) FROM entrepreneur GROUP BY Investor\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of investors who have shown interest in multiple entrepreneurs. The placeholder in the HAVING clause represents the minimum number of entrepreneurs an investor must be associated with to be included in the results.\",\n        \"virtual_table\": \"SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Weight DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the birth dates of individuals who are linked to entrepreneurs seeking investment. The entrepreneurs are filtered based on the names of the investors, which are represented by placeholders in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  [PLACEHOLDER-TYPE:STRING] OR T1.Investor  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of people associated with entrepreneurs who are not seeking investment from a specific investor. The placeholder in the WHERE clause represents the name of the investor.\",\n        \"virtual_table\": \"SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT p.Name \nFROM people p \nJOIN entrepreneur e ON p.People_ID = e.People_ID \nORDER BY p.Weight DESC \nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2281",
        "c_low": "SELECT SUM(Money_Requested) AS Total_Money_Requested\nFROM entrepreneur e\nJOIN people p ON e.People_ID = p.People_ID\nWHERE p.Height > 185;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT SUM(Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 185;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of people associated with entrepreneurs who are not seeking investment from a specific investor. The placeholder in the WHERE clause represents the name of the investor.\",\n        \"virtual_table\": \"SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT SUM(Money_Requested) FROM entrepreneur JOIN people ON entrepreneur.People_ID = people.People_ID WHERE Height > 185",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies investors who are interested in entrepreneurs that have requested a specific range of money. The placeholders in the WHERE clause represent the lower and upper limits of the money requested by the entrepreneurs.\",\n        \"virtual_table\": \"SELECT Investor FROM entrepreneur WHERE Money_Requested  >  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of investors who have shown interest in entrepreneurs' companies, grouped by the investor's name. The results are ordered by the number of entrepreneurs associated with each investor in descending order, with a limit on the number of investors returned based on a specified number.\",\n        \"virtual_table\": \"SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the number of entrepreneurs associated with each investor from the 'entrepreneur' table. The placeholder in the SELECT clause represents the investor's name, and the COUNT function is used to aggregate the number of entrepreneurs for each investor.\",\n        \"virtual_table\": \"SELECT Investor ,  COUNT(*) FROM entrepreneur GROUP BY Investor\"\n    }\n}\n",
        "t_1": "SELECT SUM(Money_Requested) FROM entrepreneur JOIN people ON entrepreneur.People_ID = people.People_ID WHERE Height > 185",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies investors who are interested in entrepreneurs that have requested a specific range of money. The placeholders in the WHERE clause represent the lower and upper limits of the money requested by the entrepreneurs.\",\n        \"virtual_table\": \"SELECT Investor FROM entrepreneur WHERE Money_Requested  >  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of investors who have shown interest in entrepreneurs' companies, grouped by the investor's name. The results are ordered by the number of entrepreneurs associated with each investor in descending order, with a limit on the number of investors returned based on a specified number.\",\n        \"virtual_table\": \"SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the number of entrepreneurs associated with each investor from the 'entrepreneur' table. The placeholder in the SELECT clause represents the investor's name, and the COUNT function is used to aggregate the number of entrepreneurs for each investor.\",\n        \"virtual_table\": \"SELECT Investor ,  COUNT(*) FROM entrepreneur GROUP BY Investor\"\n    }\n}\n",
        "t_2": "SELECT SUM(Money_Requested) AS Total_Money_Requested FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 185;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the birth dates of individuals who are linked to entrepreneurs seeking investment. The entrepreneurs are filtered based on the names of the investors, which are represented by placeholders in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  [PLACEHOLDER-TYPE:STRING] OR T1.Investor  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of people associated with entrepreneurs who are not seeking investment from a specific investor. The placeholder in the WHERE clause represents the name of the investor.\",\n        \"virtual_table\": \"SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT SUM(Money_Requested) AS Total_Money_Requested\nFROM entrepreneur e\nJOIN people p ON e.People_ID = p.People_ID\nWHERE p.Height > 185;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2282",
        "c_low": "SELECT SUM(Money_Requested) AS Total_Money_Requested\nFROM entrepreneur e\nJOIN people p ON e.People_ID = p.People_ID\nWHERE p.Height > 185;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT SUM(Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 185",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of people associated with entrepreneurs who are not seeking investment from a specific investor. The placeholder in the WHERE clause represents the name of the investor.\",\n        \"virtual_table\": \"SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT SUM(Money_Requested) FROM entrepreneur JOIN people ON entrepreneur.People_ID = people.People_ID WHERE Height > 185;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies investors who are interested in entrepreneurs that have requested a specific range of money. The placeholders in the WHERE clause represent the lower and upper limits of the money requested by the entrepreneurs.\",\n        \"virtual_table\": \"SELECT Investor FROM entrepreneur WHERE Money_Requested  >  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of investors who have shown interest in entrepreneurs' companies, grouped by the investor's name. The results are ordered by the number of entrepreneurs associated with each investor in descending order, with a limit on the number of investors returned based on a specified number.\",\n        \"virtual_table\": \"SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the birth dates of individuals who are linked to entrepreneurs seeking investment. The entrepreneurs are filtered based on the names of the investors, which are represented by placeholders in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  [PLACEHOLDER-TYPE:STRING] OR T1.Investor  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT SUM(Money_Requested) FROM entrepreneur JOIN people ON entrepreneur.People_ID = people.People_ID WHERE Height > 185",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies investors who are interested in entrepreneurs that have requested a specific range of money. The placeholders in the WHERE clause represent the lower and upper limits of the money requested by the entrepreneurs.\",\n        \"virtual_table\": \"SELECT Investor FROM entrepreneur WHERE Money_Requested  >  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of investors who have shown interest in entrepreneurs' companies, grouped by the investor's name. The results are ordered by the number of entrepreneurs associated with each investor in descending order, with a limit on the number of investors returned based on a specified number.\",\n        \"virtual_table\": \"SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the number of entrepreneurs associated with each investor from the 'entrepreneur' table. The placeholder in the SELECT clause represents the investor's name, and the COUNT function is used to aggregate the number of entrepreneurs for each investor.\",\n        \"virtual_table\": \"SELECT Investor ,  COUNT(*) FROM entrepreneur GROUP BY Investor\"\n    }\n}\n",
        "t_2": "SELECT SUM(Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 185;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the birth dates of individuals who are linked to entrepreneurs seeking investment. The entrepreneurs are filtered based on the names of the investors, which are represented by placeholders in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  [PLACEHOLDER-TYPE:STRING] OR T1.Investor  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of people associated with entrepreneurs who are not seeking investment from a specific investor. The placeholder in the WHERE clause represents the name of the investor.\",\n        \"virtual_table\": \"SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT SUM(Money_Requested) AS Total_Money_Requested\nFROM entrepreneur e\nJOIN people p ON e.People_ID = p.People_ID\nWHERE p.Height > 185;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2293",
        "c_low": "SELECT people.Name, entrepreneur.Company \nFROM entrepreneur \nJOIN people ON entrepreneur.People_ID = people.People_ID \nORDER BY entrepreneur.Money_Requested DESC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT T2.Name, T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Money_Requested DESC",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of people associated with entrepreneurs who are not seeking investment from a specific investor. The placeholder in the WHERE clause represents the name of the investor.\",\n        \"virtual_table\": \"SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT p.Name, e.Company FROM entrepreneur e JOIN people p ON e.People_ID = p.People_ID ORDER BY e.Money_Requested DESC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of investors who have shown interest in entrepreneurs' companies, grouped by the investor's name. The results are ordered by the number of entrepreneurs associated with each investor in descending order, with a limit on the number of investors returned based on a specified number.\",\n        \"virtual_table\": \"SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies investors who are interested in entrepreneurs that have requested a specific range of money. The placeholders in the WHERE clause represent the lower and upper limits of the money requested by the entrepreneurs.\",\n        \"virtual_table\": \"SELECT Investor FROM entrepreneur WHERE Money_Requested  >  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the birth dates of individuals who are linked to entrepreneurs seeking investment. The entrepreneurs are filtered based on the names of the investors, which are represented by placeholders in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  [PLACEHOLDER-TYPE:STRING] OR T1.Investor  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT people.Name, entrepreneur.Company FROM entrepreneur JOIN people ON entrepreneur.People_ID = people.People_ID ORDER BY entrepreneur.Money_Requested DESC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of investors who have shown interest in entrepreneurs' companies, grouped by the investor's name. The results are ordered by the number of entrepreneurs associated with each investor in descending order, with a limit on the number of investors returned based on a specified number.\",\n        \"virtual_table\": \"SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies investors who are interested in entrepreneurs that have requested a specific range of money. The placeholders in the WHERE clause represent the lower and upper limits of the money requested by the entrepreneurs.\",\n        \"virtual_table\": \"SELECT Investor FROM entrepreneur WHERE Money_Requested  >  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of investors who have shown interest in multiple entrepreneurs. The placeholder in the HAVING clause represents the minimum number of entrepreneurs an investor must be associated with to be included in the results.\",\n        \"virtual_table\": \"SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.Name, T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Money_Requested DESC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the birth dates of individuals who are linked to entrepreneurs seeking investment. The entrepreneurs are filtered based on the names of the investors, which are represented by placeholders in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  [PLACEHOLDER-TYPE:STRING] OR T1.Investor  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of people associated with entrepreneurs who are not seeking investment from a specific investor. The placeholder in the WHERE clause represents the name of the investor.\",\n        \"virtual_table\": \"SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT people.Name, entrepreneur.Company \nFROM entrepreneur \nJOIN people ON entrepreneur.People_ID = people.People_ID \nORDER BY entrepreneur.Money_Requested DESC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2294",
        "c_low": "SELECT p.Name AS Entrepreneur_Name, e.Investor \nFROM entrepreneur e \nJOIN people p ON e.People_ID = p.People_ID \nORDER BY e.Money_Requested DESC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT T2.Name AS Entrepreneur_Name, T1.Investor FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY CAST(T1.Money_Requested AS REAL) DESC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of people associated with entrepreneurs who are not seeking investment from a specific investor. The placeholder in the WHERE clause represents the name of the investor.\",\n        \"virtual_table\": \"SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT p.Name, e.Investor FROM entrepreneur e JOIN people p ON e.People_ID = p.People_ID ORDER BY e.Money_Requested DESC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of investors who have shown interest in entrepreneurs' companies, grouped by the investor's name. The results are ordered by the number of entrepreneurs associated with each investor in descending order, with a limit on the number of investors returned based on a specified number.\",\n        \"virtual_table\": \"SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies investors who are interested in entrepreneurs that have requested a specific range of money. The placeholders in the WHERE clause represent the lower and upper limits of the money requested by the entrepreneurs.\",\n        \"virtual_table\": \"SELECT Investor FROM entrepreneur WHERE Money_Requested  >  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the birth dates of individuals who are linked to entrepreneurs seeking investment. The entrepreneurs are filtered based on the names of the investors, which are represented by placeholders in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  [PLACEHOLDER-TYPE:STRING] OR T1.Investor  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT people.Name, entrepreneur.Investor FROM entrepreneur JOIN people ON entrepreneur.People_ID = people.People_ID ORDER BY entrepreneur.Money_Requested DESC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of investors who have shown interest in entrepreneurs' companies, grouped by the investor's name. The results are ordered by the number of entrepreneurs associated with each investor in descending order, with a limit on the number of investors returned based on a specified number.\",\n        \"virtual_table\": \"SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies investors who are interested in entrepreneurs that have requested a specific range of money. The placeholders in the WHERE clause represent the lower and upper limits of the money requested by the entrepreneurs.\",\n        \"virtual_table\": \"SELECT Investor FROM entrepreneur WHERE Money_Requested  >  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the number of entrepreneurs associated with each investor from the 'entrepreneur' table. The placeholder in the SELECT clause represents the investor's name, and the COUNT function is used to aggregate the number of entrepreneurs for each investor.\",\n        \"virtual_table\": \"SELECT Investor ,  COUNT(*) FROM entrepreneur GROUP BY Investor\"\n    }\n}\n",
        "t_2": "SELECT T2.Name AS Entrepreneur_Name, T1.Investor FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY CAST(T1.Money_Requested AS REAL) DESC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the birth dates of individuals who are linked to entrepreneurs seeking investment. The entrepreneurs are filtered based on the names of the investors, which are represented by placeholders in the WHERE clause.\",\n        \"virtual_table\": \"SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  [PLACEHOLDER-TYPE:STRING] OR T1.Investor  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of people associated with entrepreneurs who are not seeking investment from a specific investor. The placeholder in the WHERE clause represents the name of the investor.\",\n        \"virtual_table\": \"SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT p.Name AS Entrepreneur_Name, e.Investor \nFROM entrepreneur e \nJOIN people p ON e.People_ID = p.People_ID \nORDER BY e.Money_Requested DESC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2312",
        "c_low": "SELECT SUM(p.Killed) \nFROM perpetrator p \nJOIN people pe ON p.People_ID = pe.People_ID \nWHERE pe.Height > 184;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the average number of people injured in incidents recorded in the 'perpetrator' table. The result provides insight into the severity of incidents over time, without specifying any particular incident or condition.\",\n        \"virtual_table\": \"SELECT avg(Injured) FROM perpetrator\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of the number of people injured in incidents involving perpetrators, sorted in ascending order. The query retrieves data from the 'perpetrator' table, specifically focusing on the 'Injured' column.\",\n        \"virtual_table\": \"SELECT Injured FROM perpetrator ORDER BY Injured ASC\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table retrieves the maximum year of incidents recorded in the 'perpetrator' table. The placeholder in the SELECT clause indicates that the result will be the highest year value found in the data.\",\n        \"virtual_table\": \"SELECT max(YEAR) FROM perpetrator;\"\n    }\n}\n",
        "c_mid": "SELECT SUM(p.Killed) AS Total_Kills\nFROM perpetrator p\nJOIN people pe ON p.People_ID = pe.People_ID\nWHERE pe.Height > 184;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT SUM(Killed) AS Total_Kills \nFROM perpetrator \nJOIN people ON perpetrator.People_ID = people.People_ID \nWHERE Height > 184;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of incidents involving perpetrators, grouped by country. The placeholder in the SELECT statement allows for counting the total incidents per country.\",\n        \"virtual_table\": \"SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of incidents involving perpetrators grouped by country from the 'perpetrator' table. The placeholder in the LIMIT clause represents the maximum number of countries to display based on the count of incidents.\",\n        \"virtual_table\": \"SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies countries where the number of injured individuals in incidents involving perpetrators falls within a specific range. The placeholders represent the lower and upper limits for the number of injured individuals.\",\n        \"virtual_table\": \"SELECT Country FROM perpetrator WHERE Injured  >  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT Country FROM perpetrator WHERE Injured  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT SUM(Killed) FROM perpetrator JOIN people ON perpetrator.People_ID = people.People_ID WHERE Height > 184",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the average number of people injured in incidents recorded in the 'perpetrator' table. The result provides insight into the severity of incidents over time, without specifying any particular incident or condition.\",\n        \"virtual_table\": \"SELECT avg(Injured) FROM perpetrator\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of incidents involving perpetrators, grouped by country. The placeholder in the SELECT statement allows for counting the total incidents per country.\",\n        \"virtual_table\": \"SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the number of incidents involving perpetrators grouped by country from the 'perpetrator' table. The placeholder in the LIMIT clause represents the maximum number of countries to display based on the count of incidents.\",\n        \"virtual_table\": \"SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT SUM(Killed) AS Total_Kills FROM perpetrator AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 184;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of individuals from the 'people' table who are associated with incidents recorded in the 'perpetrator' table that occurred in specific countries. The placeholders in the WHERE clause represent the names of the countries being queried.\",\n        \"virtual_table\": \"SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  [PLACEHOLDER-TYPE:STRING] OR T2.Country  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT SUM(p.Killed) AS Total_Kills\nFROM perpetrator p\nJOIN people pe ON p.People_ID = pe.People_ID\nWHERE pe.Height > 184;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2317",
        "c_low": "SELECT Country FROM perpetrator GROUP BY Country HAVING COUNT(Perpetrator_ID) >= 2;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the average number of people injured in incidents recorded in the 'perpetrator' table. The result provides insight into the severity of incidents over time, without specifying any particular incident or condition.\",\n        \"virtual_table\": \"SELECT avg(Injured) FROM perpetrator\"\n    }\n}\n",
        "c_mid": "SELECT Country FROM perpetrator GROUP BY Country HAVING COUNT(Perpetrator_ID) >= 2;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of individuals from the 'people' table who are associated with incidents recorded in the 'perpetrator' table, specifically filtering out those incidents that occurred in a specified country. The placeholder in the WHERE clause represents the name of the country to exclude from the results.\",\n        \"virtual_table\": \"SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT Country FROM perpetrator GROUP BY Country HAVING COUNT(*) >= 2",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of incidents involving perpetrators grouped by country from the 'perpetrator' table. The placeholder in the LIMIT clause represents the maximum number of countries to display based on the count of incidents.\",\n        \"virtual_table\": \"SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of incidents involving perpetrators, grouped by country. The placeholder in the SELECT statement allows for counting the total incidents per country.\",\n        \"virtual_table\": \"SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies countries where the number of injured individuals in incidents involving perpetrators falls within a specific range. The placeholders represent the lower and upper limits for the number of injured individuals.\",\n        \"virtual_table\": \"SELECT Country FROM perpetrator WHERE Injured  >  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT Country FROM perpetrator WHERE Injured  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Country FROM perpetrator GROUP BY Country HAVING COUNT(*) >= 2",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of incidents involving perpetrators grouped by country from the 'perpetrator' table. The placeholder in the LIMIT clause represents the maximum number of countries to display based on the count of incidents.\",\n        \"virtual_table\": \"SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of incidents involving perpetrators, grouped by country. The placeholder in the SELECT statement allows for counting the total incidents per country.\",\n        \"virtual_table\": \"SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies countries where the number of injured individuals in incidents involving perpetrators falls within a specific range. The placeholders represent the lower and upper limits for the number of injured individuals.\",\n        \"virtual_table\": \"SELECT Country FROM perpetrator WHERE Injured  >  [PLACEHOLDER-TYPE:NUMBER] INTERSECT SELECT Country FROM perpetrator WHERE Injured  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Country FROM perpetrator GROUP BY Country HAVING COUNT(Perpetrator_ID) >= 2;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of individuals from the 'people' table who are associated with incidents recorded in the 'perpetrator' table that occurred in specific countries. The placeholders in the WHERE clause represent the names of the countries being queried.\",\n        \"virtual_table\": \"SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  [PLACEHOLDER-TYPE:STRING] OR T2.Country  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of individuals from the 'people' table who are associated with incidents recorded in the 'perpetrator' table, specifically filtering out those incidents that occurred in a specified country. The placeholder in the WHERE clause represents the name of the country to exclude from the results.\",\n        \"virtual_table\": \"SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Country\nFROM perpetrator\nGROUP BY Country\nHAVING COUNT(Perpetrator_ID) >= 2;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2325",
        "c_low": "SELECT Campus FROM Campuses WHERE County = 'Los Angeles';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT Campus FROM Campuses WHERE County = 'Los Angeles';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT * FROM Campuses WHERE County = 'Los Angeles';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of campuses from the 'Campuses' table that have records for a specified range of years. The placeholders in the WHERE clause represent the start and end years for filtering the campuses.\",\n        \"virtual_table\": \"SELECT campus FROM campuses WHERE YEAR  >=  [PLACEHOLDER-TYPE:NUMBER] AND YEAR  <=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of campuses that have a campus fee greater than the average campus fee across all campuses. The placeholder in the WHERE clause represents the condition for filtering the campus fees.\",\n        \"virtual_table\": \"SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)\"\n    }\n}\n",
        "t_1": "SELECT * FROM Campuses WHERE County = 'Los Angeles';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of campuses from the 'Campuses' table that have records for a specified range of years. The placeholders in the WHERE clause represent the start and end years for filtering the campuses.\",\n        \"virtual_table\": \"SELECT campus FROM campuses WHERE YEAR  >=  [PLACEHOLDER-TYPE:NUMBER] AND YEAR  <=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of campuses that have a campus fee greater than the average campus fee across all campuses. The placeholder in the WHERE clause represents the condition for filtering the campus fees.\",\n        \"virtual_table\": \"SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)\"\n    }\n}\n",
        "t_2": "SELECT Campus FROM Campuses WHERE County = 'Los Angeles';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Campus FROM Campuses WHERE County = 'Los Angeles';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2327",
        "c_low": "SELECT * FROM Campuses WHERE Location = 'Chico'",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT * FROM Campuses WHERE Location = 'Chico';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT * FROM Campuses WHERE Location = 'Chico';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of campuses from the 'Campuses' table that have records for a specified range of years. The placeholders in the WHERE clause represent the start and end years for filtering the campuses.\",\n        \"virtual_table\": \"SELECT campus FROM campuses WHERE YEAR  >=  [PLACEHOLDER-TYPE:NUMBER] AND YEAR  <=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of campuses that have a campus fee greater than the average campus fee across all campuses. The placeholder in the WHERE clause represents the condition for filtering the campus fees.\",\n        \"virtual_table\": \"SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)\"\n    }\n}\n",
        "t_1": "SELECT * FROM Campuses WHERE Location = 'Chico';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of campuses from the 'Campuses' table that have records for a specified range of years. The placeholders in the WHERE clause represent the start and end years for filtering the campuses.\",\n        \"virtual_table\": \"SELECT campus FROM campuses WHERE YEAR  >=  [PLACEHOLDER-TYPE:NUMBER] AND YEAR  <=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of campuses that have a campus fee greater than the average campus fee across all campuses. The placeholder in the WHERE clause represents the condition for filtering the campus fees.\",\n        \"virtual_table\": \"SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)\"\n    }\n}\n",
        "t_2": "SELECT * FROM Campuses WHERE Location = 'Chico'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT * FROM Campuses WHERE Location = 'Chico';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2328",
        "c_low": "SELECT Campus FROM Campuses WHERE Year = '1958';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT * FROM Campuses WHERE Year = '1958';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT Campus FROM Campuses WHERE Year = '1958'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of campuses from the 'Campuses' table that have records for a specified range of years. The placeholders in the WHERE clause represent the start and end years for filtering the campuses.\",\n        \"virtual_table\": \"SELECT campus FROM campuses WHERE YEAR  >=  [PLACEHOLDER-TYPE:NUMBER] AND YEAR  <=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Campus FROM Campuses WHERE Year = '1958'",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of campuses from the 'Campuses' table that have records for a specified range of years. The placeholders in the WHERE clause represent the start and end years for filtering the campuses.\",\n        \"virtual_table\": \"SELECT campus FROM campuses WHERE YEAR  >=  [PLACEHOLDER-TYPE:NUMBER] AND YEAR  <=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Campus FROM Campuses WHERE Year = '1958';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT * FROM Campuses WHERE Year = '1958';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2334",
        "c_low": "SELECT Campus FROM Campuses WHERE (Location = 'Northridge, Los Angeles' OR Location = 'San Francisco, San Francisco')",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT Campus FROM Campuses WHERE (Location = 'Northridge, Los Angeles' OR Location = 'San Francisco, San Francisco');",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT Campus FROM Campuses WHERE Location IN ('Northridge, Los Angeles', 'San Francisco, San Francisco')",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of campuses from the 'Campuses' table that have records for a specified range of years. The placeholders in the WHERE clause represent the start and end years for filtering the campuses.\",\n        \"virtual_table\": \"SELECT campus FROM campuses WHERE YEAR  >=  [PLACEHOLDER-TYPE:NUMBER] AND YEAR  <=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Campus FROM Campuses WHERE Location IN ('Northridge, Los Angeles', 'San Francisco, San Francisco')",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of campuses from the 'Campuses' table that have records for a specified range of years. The placeholders in the WHERE clause represent the start and end years for filtering the campuses.\",\n        \"virtual_table\": \"SELECT campus FROM campuses WHERE YEAR  >=  [PLACEHOLDER-TYPE:NUMBER] AND YEAR  <=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Campus FROM Campuses WHERE (Location = 'Northridge, Los Angeles' OR Location = 'San Francisco, San Francisco')",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Campus FROM Campuses WHERE (Location = 'Northridge, Los Angeles' OR Location = 'San Francisco, San Francisco');",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2335",
        "c_low": "SELECT * FROM Campuses WHERE Location IN ('Northridge, Los Angeles', 'San Francisco, San Francisco');",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT Campus FROM Campuses WHERE Location IN ('Northridge, Los Angeles', 'San Francisco, San Francisco');",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT * FROM Campuses WHERE Location IN ('Northridge, Los Angeles', 'San Francisco, San Francisco')",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of campuses from the 'Campuses' table that have records for a specified range of years. The placeholders in the WHERE clause represent the start and end years for filtering the campuses.\",\n        \"virtual_table\": \"SELECT campus FROM campuses WHERE YEAR  >=  [PLACEHOLDER-TYPE:NUMBER] AND YEAR  <=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT * FROM Campuses WHERE Location IN ('Northridge, Los Angeles', 'San Francisco, San Francisco')",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of campuses from the 'Campuses' table that have records for a specified range of years. The placeholders in the WHERE clause represent the start and end years for filtering the campuses.\",\n        \"virtual_table\": \"SELECT campus FROM campuses WHERE YEAR  >=  [PLACEHOLDER-TYPE:NUMBER] AND YEAR  <=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT * FROM Campuses WHERE Location IN ('Northridge, Los Angeles', 'San Francisco, San Francisco');",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Campus FROM Campuses WHERE Location IN ('Northridge, Los Angeles', 'San Francisco, San Francisco');",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2347",
        "c_low": "SELECT Year, SUM(Degrees) AS TotalDegrees\nFROM degrees\nGROUP BY Year\nORDER BY TotalDegrees DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT Year FROM degrees GROUP BY Year ORDER BY COUNT(Degrees) DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT Year FROM degrees GROUP BY Year ORDER BY COUNT(Degrees) DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT Year FROM degrees GROUP BY Year ORDER BY COUNT(Degrees) DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT Year, SUM(Degrees) AS TotalDegrees FROM degrees GROUP BY Year ORDER BY TotalDegrees DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Year FROM degrees GROUP BY Year ORDER BY COUNT(Degrees) DESC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2348",
        "c_low": "SELECT Campus, COUNT(Degrees) AS TotalDegrees\nFROM degrees\nGROUP BY Campus\nORDER BY TotalDegrees DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total number of graduate enrollments from the 'discipline_enrollments' table for a specific campus and year. The placeholders in the WHERE clause represent the year of enrollment and the name of the campus.\",\n        \"virtual_table\": \"SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND t2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT Campus, COUNT(Degrees) AS TotalDegrees\nFROM degrees\nGROUP BY Campus\nORDER BY TotalDegrees DESC\nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT Campus, COUNT(Degrees) AS TotalDegrees\nFROM degrees\nGROUP BY Campus\nORDER BY TotalDegrees DESC\nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of campuses from the 'Campuses' table that have records for a specified range of years. The placeholders in the WHERE clause represent the start and end years for filtering the campuses.\",\n        \"virtual_table\": \"SELECT campus FROM campuses WHERE YEAR  >=  [PLACEHOLDER-TYPE:NUMBER] AND YEAR  <=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Campus, COUNT(Degrees) AS TotalDegrees\nFROM degrees\nGROUP BY Campus\nORDER BY TotalDegrees DESC\nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of campuses from the 'Campuses' table that have records for a specified range of years. The placeholders in the WHERE clause represent the start and end years for filtering the campuses.\",\n        \"virtual_table\": \"SELECT campus FROM campuses WHERE YEAR  >=  [PLACEHOLDER-TYPE:NUMBER] AND YEAR  <=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Campus, COUNT(Degrees) AS TotalDegrees\nFROM degrees\nGROUP BY Campus\nORDER BY TotalDegrees DESC\nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total number of graduate enrollments from the 'discipline_enrollments' table for a specific campus and year. The placeholders in the WHERE clause represent the year of enrollment and the name of the campus.\",\n        \"virtual_table\": \"SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND t2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Campus, COUNT(Degrees) AS TotalDegrees\nFROM degrees\nGROUP BY Campus\nORDER BY TotalDegrees DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2349",
        "c_low": "SELECT Campus, COUNT(Degrees) AS TotalDegrees\nFROM degrees\nGROUP BY Campus\nORDER BY TotalDegrees DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total number of graduate enrollments from the 'discipline_enrollments' table for a specific campus and year. The placeholders in the WHERE clause represent the year of enrollment and the name of the campus.\",\n        \"virtual_table\": \"SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND t2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT Campus, COUNT(Degrees) AS TotalDegrees\nFROM degrees\nGROUP BY Campus\nORDER BY TotalDegrees DESC\nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT Campus, COUNT(Degrees) AS TotalDegrees\nFROM degrees\nGROUP BY Campus\nORDER BY TotalDegrees DESC\nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of campuses that have a campus fee greater than the average campus fee across all campuses. The placeholder in the WHERE clause represents the condition for filtering the campus fees.\",\n        \"virtual_table\": \"SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of campuses from the 'Campuses' table that have records for a specified range of years. The placeholders in the WHERE clause represent the start and end years for filtering the campuses.\",\n        \"virtual_table\": \"SELECT campus FROM campuses WHERE YEAR  >=  [PLACEHOLDER-TYPE:NUMBER] AND YEAR  <=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Campus, COUNT(Degrees) AS TotalDegrees\nFROM degrees\nGROUP BY Campus\nORDER BY TotalDegrees DESC\nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of campuses that have a campus fee greater than the average campus fee across all campuses. The placeholder in the WHERE clause represents the condition for filtering the campus fees.\",\n        \"virtual_table\": \"SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of campuses from the 'Campuses' table that have records for a specified range of years. The placeholders in the WHERE clause represent the start and end years for filtering the campuses.\",\n        \"virtual_table\": \"SELECT campus FROM campuses WHERE YEAR  >=  [PLACEHOLDER-TYPE:NUMBER] AND YEAR  <=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Campus, COUNT(Degrees) AS TotalDegrees\nFROM degrees\nGROUP BY Campus\nORDER BY TotalDegrees DESC\nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total number of graduate enrollments from the 'discipline_enrollments' table for a specific campus and year. The placeholders in the WHERE clause represent the year of enrollment and the name of the campus.\",\n        \"virtual_table\": \"SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND t2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Campus, COUNT(Degrees) AS TotalDegrees\nFROM degrees\nGROUP BY Campus\nORDER BY TotalDegrees DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2350",
        "c_low": "SELECT Campus, Faculty FROM faculty WHERE Year = 2003 ORDER BY Faculty DESC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT Campus, Faculty FROM faculty WHERE Year = 2003 ORDER BY Faculty DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT Campus, Faculty FROM faculty WHERE Year = 2003 ORDER BY Faculty DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of campuses from the 'Campuses' table that have records for a specified range of years. The placeholders in the WHERE clause represent the start and end years for filtering the campuses.\",\n        \"virtual_table\": \"SELECT campus FROM campuses WHERE YEAR  >=  [PLACEHOLDER-TYPE:NUMBER] AND YEAR  <=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of campuses that have a campus fee greater than the average campus fee across all campuses. The placeholder in the WHERE clause represents the condition for filtering the campus fees.\",\n        \"virtual_table\": \"SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)\"\n    }\n}\n",
        "t_1": "SELECT Campus, Faculty FROM faculty WHERE Year = 2003 ORDER BY Faculty DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of campuses from the 'Campuses' table that have records for a specified range of years. The placeholders in the WHERE clause represent the start and end years for filtering the campuses.\",\n        \"virtual_table\": \"SELECT campus FROM campuses WHERE YEAR  >=  [PLACEHOLDER-TYPE:NUMBER] AND YEAR  <=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of campuses that have a campus fee greater than the average campus fee across all campuses. The placeholder in the WHERE clause represents the condition for filtering the campus fees.\",\n        \"virtual_table\": \"SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)\"\n    }\n}\n",
        "t_2": "SELECT Campus, Faculty FROM faculty WHERE Year = 2003 ORDER BY Faculty DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Campus, Faculty FROM faculty WHERE Year = 2003 ORDER BY Faculty DESC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2351",
        "c_low": "SELECT Campus, Faculty FROM faculty WHERE Year = 2003 ORDER BY Faculty DESC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT Campus, Faculty FROM faculty WHERE Year = 2003 ORDER BY Faculty DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT Campus FROM faculty WHERE Year = 2003 ORDER BY Faculty DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of campuses that have a campus fee greater than the average campus fee across all campuses. The placeholder in the WHERE clause represents the condition for filtering the campus fees.\",\n        \"virtual_table\": \"SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of campuses from the 'Campuses' table that have records for a specified range of years. The placeholders in the WHERE clause represent the start and end years for filtering the campuses.\",\n        \"virtual_table\": \"SELECT campus FROM campuses WHERE YEAR  >=  [PLACEHOLDER-TYPE:NUMBER] AND YEAR  <=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Campus FROM faculty WHERE Year = 2003 ORDER BY Faculty DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of campuses that have a campus fee greater than the average campus fee across all campuses. The placeholder in the WHERE clause represents the condition for filtering the campus fees.\",\n        \"virtual_table\": \"SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of campuses from the 'Campuses' table that have records for a specified range of years. The placeholders in the WHERE clause represent the start and end years for filtering the campuses.\",\n        \"virtual_table\": \"SELECT campus FROM campuses WHERE YEAR  >=  [PLACEHOLDER-TYPE:NUMBER] AND YEAR  <=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Campus, Faculty FROM faculty WHERE Year = 2003 ORDER BY Faculty DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Campus, Faculty FROM faculty WHERE Year = 2003 ORDER BY Faculty DESC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2356",
        "c_low": "SELECT COUNT(Degrees) AS TotalDegreesGranted \nFROM degrees \nWHERE Year BETWEEN '1998' AND '2002';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the total number of graduate enrollments from the 'discipline_enrollments' table for a specific campus and year. The placeholders in the WHERE clause represent the year of enrollment and the name of the campus.\",\n        \"virtual_table\": \"SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND t2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT COUNT(*) AS TotalDegrees\nFROM degrees\nWHERE Year BETWEEN '1998' AND '2002';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT COUNT(*) AS TotalDegrees\nFROM degrees\nWHERE Year BETWEEN '1998' AND '2002';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT COUNT(*) AS TotalDegrees\nFROM degrees\nWHERE Year BETWEEN '1998' AND '2002';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT COUNT(Degrees) AS TotalDegreesGranted \nFROM degrees \nWHERE Year BETWEEN '1998' AND '2002';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the total number of graduate enrollments from the 'discipline_enrollments' table for a specific campus and year. The placeholders in the WHERE clause represent the year of enrollment and the name of the campus.\",\n        \"virtual_table\": \"SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND t2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(*) AS TotalDegrees\nFROM degrees\nWHERE Year BETWEEN '1998' AND '2002';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2357",
        "c_low": "SELECT SUM(Degrees) AS TotalDegreesConferred \nFROM degrees \nWHERE Year BETWEEN '1998' AND '2002';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT COUNT(*) AS TotalDegrees\nFROM degrees\nWHERE Year BETWEEN '1998' AND '2002';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT COUNT(*) AS TotalDegrees\nFROM degrees\nWHERE Year BETWEEN '1998' AND '2002';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT SUM(CASE WHEN Year BETWEEN '1998' AND '2002' THEN 1 ELSE 0 END) AS TotalDegrees\nFROM degrees;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT SUM(Degrees) AS TotalDegreesConferred \nFROM degrees \nWHERE Year BETWEEN '1998' AND '2002';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT SUM(CASE WHEN Year BETWEEN '1998' AND '2002' THEN 1 ELSE 0 END) AS TotalDegrees\nFROM degrees;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2358",
        "c_low": "SELECT COUNT(Degrees) AS NumberOfDegrees\nFROM degrees AS T1\nJOIN Campuses AS T2 ON T1.Campus = T2.Id\nWHERE T2.County = 'Orange' AND T1.Year > '2000';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total number of graduate enrollments from the 'discipline_enrollments' table for a specific campus and year. The placeholders in the WHERE clause represent the year of enrollment and the name of the campus.\",\n        \"virtual_table\": \"SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND t2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT Campuses.Campus, COUNT(degrees.Degrees) AS DegreesGranted\nFROM Campuses\nJOIN degrees ON Campuses.Id = degrees.Campus\nWHERE Campuses.County = 'Orange' AND degrees.Year > '2000'\nGROUP BY Campuses.Campus;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT Campuses.Campus, COUNT(degrees.Degrees) AS DegreesGranted\nFROM Campuses\nJOIN degrees ON Campuses.Id = degrees.Campus\nWHERE Campuses.County = 'Orange' AND degrees.Year > '2000'\nGROUP BY Campuses.Campus;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT Campuses.Campus, COUNT(degrees.Degrees) AS DegreesGranted\nFROM Campuses\nJOIN degrees ON Campuses.Id = degrees.Campus\nWHERE Campuses.County = 'Orange' AND degrees.Year > '2000'\nGROUP BY Campuses.Campus;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT COUNT(Degrees) AS NumberOfDegrees\nFROM degrees AS T1\nJOIN Campuses AS T2 ON T1.Campus = T2.Id\nWHERE T2.County = 'Orange' AND T1.Year > '2000';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total number of graduate enrollments from the 'discipline_enrollments' table for a specific campus and year. The placeholders in the WHERE clause represent the year of enrollment and the name of the campus.\",\n        \"virtual_table\": \"SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND t2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Campuses.Campus, COUNT(degrees.Degrees) AS DegreesGranted\nFROM Campuses\nJOIN degrees ON Campuses.Id = degrees.Campus\nWHERE Campuses.County = 'Orange' AND degrees.Year > '2000'\nGROUP BY Campuses.Campus;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2359",
        "c_low": "SELECT c.Campus, COUNT(d.Degrees) AS TotalDegrees\nFROM Campuses c\nJOIN degrees d ON c.Id = d.Campus\nWHERE c.County = 'Orange' AND d.Year > '2000'\nGROUP BY c.Campus;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total number of graduate enrollments from the 'discipline_enrollments' table for a specific campus and year. The placeholders in the WHERE clause represent the year of enrollment and the name of the campus.\",\n        \"virtual_table\": \"SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND t2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT Campuses.Campus, COUNT(degrees.Degrees) AS TotalDegrees\nFROM Campuses\nJOIN degrees ON Campuses.Id = degrees.Campus\nWHERE Campuses.County = 'Orange' AND degrees.Year > '2000'\nGROUP BY Campuses.Campus;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT Campuses.Campus, COUNT(degrees.Degrees) AS TotalDegrees\nFROM Campuses\nJOIN degrees ON Campuses.Id = degrees.Campus\nWHERE Campuses.County = 'Orange' AND degrees.Year > '2000'\nGROUP BY Campuses.Campus;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT Campuses.Campus, COUNT(degrees.Degrees) AS TotalDegrees\nFROM Campuses\nJOIN degrees ON Campuses.Id = degrees.Campus\nWHERE Campuses.County = 'Orange' AND degrees.Year > '2000'\nGROUP BY Campuses.Campus;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT c.Campus, COUNT(d.Degrees) AS TotalDegrees\nFROM Campuses c\nJOIN degrees d ON c.Id = d.Campus\nWHERE c.County = 'Orange' AND d.Year > '2000'\nGROUP BY c.Campus;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total number of graduate enrollments from the 'discipline_enrollments' table for a specific campus and year. The placeholders in the WHERE clause represent the year of enrollment and the name of the campus.\",\n        \"virtual_table\": \"SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND t2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Campuses.Campus, COUNT(degrees.Degrees) AS TotalDegrees\nFROM Campuses\nJOIN degrees ON Campuses.Id = degrees.Campus\nWHERE Campuses.County = 'Orange' AND degrees.Year > '2000'\nGROUP BY Campuses.Campus;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2362",
        "c_low": "SELECT T2.Campus \nFROM enrollments AS T1 \nJOIN Campuses AS T2 ON T1.Campus = T2.Id \nWHERE T1.Year = '1956' \nAND T1.TotalEnrollment_AY > 400 \nAND T1.FTE_AY > 200;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the total number of undergraduate enrollments from the 'discipline_enrollments' table for a specific campus and year. The placeholders in the WHERE clause represent the year of enrollment and the name of the campus.\",\n        \"virtual_table\": \"SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND t2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total number of graduate enrollments from the 'discipline_enrollments' table for a specific campus and year. The placeholders in the WHERE clause represent the year of enrollment and the name of the campus.\",\n        \"virtual_table\": \"SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND t2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT Campus FROM enrollments WHERE TotalEnrollment_AY > 400 AND FTE_AY > 200 AND Year = '1956';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT Campus FROM enrollments WHERE TotalEnrollment_AY > 400 AND FTE_AY > 200 AND Year = '1956';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT Campus FROM enrollments WHERE TotalEnrollment_AY > 400 AND FTE_AY > 200 AND Year = '1956';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T2.Campus \nFROM enrollments AS T1 \nJOIN Campuses AS T2 ON T1.Campus = T2.Id \nWHERE T1.Year = '1956' \nAND T1.TotalEnrollment_AY > 400 \nAND T1.FTE_AY > 200;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the total number of undergraduate enrollments from the 'discipline_enrollments' table for a specific campus and year. The placeholders in the WHERE clause represent the year of enrollment and the name of the campus.\",\n        \"virtual_table\": \"SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND t2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total number of graduate enrollments from the 'discipline_enrollments' table for a specific campus and year. The placeholders in the WHERE clause represent the year of enrollment and the name of the campus.\",\n        \"virtual_table\": \"SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND t2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Campus FROM enrollments WHERE TotalEnrollment_AY > 400 AND FTE_AY > 200 AND Year = '1956';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2363",
        "c_low": "SELECT T1.Campus \nFROM Campuses AS T1 \nJOIN enrollments AS T2 ON T1.Id = T2.Campus \nJOIN faculty AS T3 ON T1.Id = T3.Campus \nWHERE T1.Year = '1956' \nAND T3.Faculty > 200 \nAND T2.TotalEnrollment_AY > 400;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the total number of undergraduate enrollments from the 'discipline_enrollments' table for a specific campus and year. The placeholders in the WHERE clause represent the year of enrollment and the name of the campus.\",\n        \"virtual_table\": \"SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND t2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT c.Campus \nFROM Campuses c \nJOIN enrollments e ON c.Id = e.Campus \nWHERE c.Year = '1956' \nAND e.FTE_AY > '200' \nAND e.TotalEnrollment_AY > '400';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT c.Campus \nFROM Campuses c \nJOIN enrollments e ON c.Id = e.Campus \nWHERE c.Year = '1956' \nAND e.FTE_AY > '200' \nAND e.TotalEnrollment_AY > '400';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of campuses from the 'Campuses' table that have records for a specified range of years. The placeholders in the WHERE clause represent the start and end years for filtering the campuses.\",\n        \"virtual_table\": \"SELECT campus FROM campuses WHERE YEAR  >=  [PLACEHOLDER-TYPE:NUMBER] AND YEAR  <=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT c.Campus \nFROM Campuses c \nJOIN enrollments e ON c.Id = e.Campus \nWHERE c.Year = '1956' \nAND e.FTE_AY > '200' \nAND e.TotalEnrollment_AY > '400';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of campuses from the 'Campuses' table that have records for a specified range of years. The placeholders in the WHERE clause represent the start and end years for filtering the campuses.\",\n        \"virtual_table\": \"SELECT campus FROM campuses WHERE YEAR  >=  [PLACEHOLDER-TYPE:NUMBER] AND YEAR  <=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T1.Campus \nFROM Campuses AS T1 \nJOIN enrollments AS T2 ON T1.Id = T2.Campus \nJOIN faculty AS T3 ON T1.Id = T3.Campus \nWHERE T1.Year = '1956' \nAND T3.Faculty > 200 \nAND T2.TotalEnrollment_AY > 400;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the total number of undergraduate enrollments from the 'discipline_enrollments' table for a specific campus and year. The placeholders in the WHERE clause represent the year of enrollment and the name of the campus.\",\n        \"virtual_table\": \"SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND t2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT c.Campus \nFROM Campuses c \nJOIN enrollments e ON c.Id = e.Campus \nWHERE c.Year = '1956' \nAND e.FTE_AY > '200' \nAND e.TotalEnrollment_AY > '400';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2365",
        "c_low": "SELECT COUNT(*) AS CampusCount FROM Campuses WHERE County = 'LA';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT COUNT(*) AS CampusCount FROM Campuses WHERE County = 'LA';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT COUNT(*) FROM Campuses WHERE County = 'LA';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of campuses from the 'Campuses' table that have records for a specified range of years. The placeholders in the WHERE clause represent the start and end years for filtering the campuses.\",\n        \"virtual_table\": \"SELECT campus FROM campuses WHERE YEAR  >=  [PLACEHOLDER-TYPE:NUMBER] AND YEAR  <=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of campuses that have a campus fee greater than the average campus fee across all campuses. The placeholder in the WHERE clause represents the condition for filtering the campus fees.\",\n        \"virtual_table\": \"SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)\"\n    }\n}\n",
        "t_1": "SELECT COUNT(*) FROM Campuses WHERE County = 'LA';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of campuses from the 'Campuses' table that have records for a specified range of years. The placeholders in the WHERE clause represent the start and end years for filtering the campuses.\",\n        \"virtual_table\": \"SELECT campus FROM campuses WHERE YEAR  >=  [PLACEHOLDER-TYPE:NUMBER] AND YEAR  <=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of campuses that have a campus fee greater than the average campus fee across all campuses. The placeholder in the WHERE clause represents the condition for filtering the campus fees.\",\n        \"virtual_table\": \"SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)\"\n    }\n}\n",
        "t_2": "SELECT COUNT(*) AS CampusCount FROM Campuses WHERE County = 'LA';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(*) AS CampusCount FROM Campuses WHERE County = 'LA';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2366",
        "c_low": "SELECT * FROM Campuses WHERE County = 'Los Angeles';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT * FROM Campuses WHERE County = 'Los Angeles';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT * FROM Campuses WHERE County = 'Los Angeles';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of campuses from the 'Campuses' table that have records for a specified range of years. The placeholders in the WHERE clause represent the start and end years for filtering the campuses.\",\n        \"virtual_table\": \"SELECT campus FROM campuses WHERE YEAR  >=  [PLACEHOLDER-TYPE:NUMBER] AND YEAR  <=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of campuses that have a campus fee greater than the average campus fee across all campuses. The placeholder in the WHERE clause represents the condition for filtering the campus fees.\",\n        \"virtual_table\": \"SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)\"\n    }\n}\n",
        "t_1": "SELECT * FROM Campuses WHERE County = 'Los Angeles';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of campuses from the 'Campuses' table that have records for a specified range of years. The placeholders in the WHERE clause represent the start and end years for filtering the campuses.\",\n        \"virtual_table\": \"SELECT campus FROM campuses WHERE YEAR  >=  [PLACEHOLDER-TYPE:NUMBER] AND YEAR  <=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of campuses that have a campus fee greater than the average campus fee across all campuses. The placeholder in the WHERE clause represents the condition for filtering the campus fees.\",\n        \"virtual_table\": \"SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)\"\n    }\n}\n",
        "t_2": "SELECT * FROM Campuses WHERE County = 'Los Angeles';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT * FROM Campuses WHERE County = 'Los Angeles';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2367",
        "c_low": "SELECT Campus FROM Campuses WHERE County = 'Los Angeles';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT Campus FROM Campuses WHERE County = 'Los Angeles';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT * FROM Campuses WHERE County = 'Los Angeles';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of campuses from the 'Campuses' table that have records for a specified range of years. The placeholders in the WHERE clause represent the start and end years for filtering the campuses.\",\n        \"virtual_table\": \"SELECT campus FROM campuses WHERE YEAR  >=  [PLACEHOLDER-TYPE:NUMBER] AND YEAR  <=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of campuses that have a campus fee greater than the average campus fee across all campuses. The placeholder in the WHERE clause represents the condition for filtering the campus fees.\",\n        \"virtual_table\": \"SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)\"\n    }\n}\n",
        "t_1": "SELECT * FROM Campuses WHERE County = 'Los Angeles';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of campuses from the 'Campuses' table that have records for a specified range of years. The placeholders in the WHERE clause represent the start and end years for filtering the campuses.\",\n        \"virtual_table\": \"SELECT campus FROM campuses WHERE YEAR  >=  [PLACEHOLDER-TYPE:NUMBER] AND YEAR  <=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of campuses that have a campus fee greater than the average campus fee across all campuses. The placeholder in the WHERE clause represents the condition for filtering the campus fees.\",\n        \"virtual_table\": \"SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)\"\n    }\n}\n",
        "t_2": "SELECT Campus FROM Campuses WHERE County = 'Los Angeles';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Campus FROM Campuses WHERE County = 'Los Angeles';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2368",
        "c_low": "SELECT COUNT(Degrees) FROM Campuses AS T1 JOIN degrees AS T2 ON T1.Id = T2.Campus WHERE T1.Campus = 'San Jose State University' AND T2.Year = '2000'",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total number of graduate enrollments from the 'discipline_enrollments' table for a specific campus and year. The placeholders in the WHERE clause represent the year of enrollment and the name of the campus.\",\n        \"virtual_table\": \"SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND t2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT SUM(Degrees) AS TotalDegreesConferred\nFROM degrees\nJOIN Campuses ON degrees.Campus = Campuses.Id\nWHERE Campuses.Campus = 'San Jose State University' AND degrees.Year = '2000';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT SUM(Degrees) AS TotalDegreesConferred\nFROM degrees\nJOIN Campuses ON degrees.Campus = Campuses.Id\nWHERE Campuses.Campus = 'San Jose State University' AND degrees.Year = '2000';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT SUM(Degrees) AS TotalDegreesConferred\nFROM degrees\nJOIN Campuses ON degrees.Campus = Campuses.Id\nWHERE Campuses.Campus = 'San Jose State University' AND degrees.Year = '2000';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT COUNT(Degrees) FROM Campuses AS T1 JOIN degrees AS T2 ON T1.Id = T2.Campus WHERE T1.Campus = 'San Jose State University' AND T2.Year = '2000'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total number of graduate enrollments from the 'discipline_enrollments' table for a specific campus and year. The placeholders in the WHERE clause represent the year of enrollment and the name of the campus.\",\n        \"virtual_table\": \"SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND t2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT SUM(Degrees) AS TotalDegreesConferred\nFROM degrees\nJOIN Campuses ON degrees.Campus = Campuses.Id\nWHERE Campuses.Campus = 'San Jose State University' AND degrees.Year = '2000';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2369",
        "c_low": "SELECT COUNT(Degrees) FROM Campuses AS T1 JOIN degrees AS T2 ON T1.Id = T2.Campus WHERE T1.Campus = 'San Jose State University' AND T2.Year = '2000'",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total number of graduate enrollments from the 'discipline_enrollments' table for a specific campus and year. The placeholders in the WHERE clause represent the year of enrollment and the name of the campus.\",\n        \"virtual_table\": \"SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND t2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT COUNT(*) AS TotalDegrees\nFROM degrees\nWHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'San Jose State University')\nAND Year = '2000';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT COUNT(*) AS TotalDegrees\nFROM degrees\nWHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'San Jose State University')\nAND Year = '2000';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT COUNT(*) AS TotalDegrees\nFROM degrees\nWHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'San Jose State University')\nAND Year = '2000';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT COUNT(Degrees) FROM Campuses AS T1 JOIN degrees AS T2 ON T1.Id = T2.Campus WHERE T1.Campus = 'San Jose State University' AND T2.Year = '2000'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total number of graduate enrollments from the 'discipline_enrollments' table for a specific campus and year. The placeholders in the WHERE clause represent the year of enrollment and the name of the campus.\",\n        \"virtual_table\": \"SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND t2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(*) AS TotalDegrees\nFROM degrees\nWHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'San Jose State University')\nAND Year = '2000';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2374",
        "c_low": "SELECT faculty FROM faculty AS T1 JOIN Campuses AS T2 ON T1.Campus = T2.Id WHERE T1.Year = 2002 AND T2.Campus = 'Long Beach State University'",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT Faculty FROM faculty WHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'Long Beach State University') AND Year = 2002;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT Faculty FROM faculty WHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'Long Beach State University') AND Year = 2002;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT Faculty FROM faculty WHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'Long Beach State University') AND Year = 2002;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT faculty FROM faculty AS T1 JOIN Campuses AS T2 ON T1.Campus = T2.Id WHERE T1.Year = 2002 AND T2.Campus = 'Long Beach State University'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Faculty FROM faculty WHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'Long Beach State University') AND Year = 2002;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2376",
        "c_low": "SELECT faculty FROM faculty AS T1 JOIN Campuses AS T2 ON T1.Campus = T2.Id WHERE T1.Year = 2004 AND T2.Campus = 'San Francisco State University'",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT COUNT(*) AS FacultyCount \nFROM faculty \nJOIN Campuses ON faculty.Campus = Campuses.Id \nWHERE Campuses.Campus = 'San Francisco State University' AND faculty.Year = 2004;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT COUNT(*) AS FacultyCount \nFROM faculty \nJOIN Campuses ON faculty.Campus = Campuses.Id \nWHERE Campuses.Campus = 'San Francisco State University' AND faculty.Year = 2004;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT COUNT(*) AS FacultyCount \nFROM faculty \nJOIN Campuses ON faculty.Campus = Campuses.Id \nWHERE Campuses.Campus = 'San Francisco State University' AND faculty.Year = 2004;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT faculty FROM faculty AS T1 JOIN Campuses AS T2 ON T1.Campus = T2.Id WHERE T1.Year = 2004 AND T2.Campus = 'San Francisco State University'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(*) AS FacultyCount \nFROM faculty \nJOIN Campuses ON faculty.Campus = Campuses.Id \nWHERE Campuses.Campus = 'San Francisco State University' AND faculty.Year = 2004;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2377",
        "c_low": "SELECT Faculty FROM faculty AS T1 JOIN Campuses AS T2 ON T1.Campus = T2.Id WHERE T1.Year = 2004 AND T2.Campus = 'San Francisco State University'",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT Faculty FROM faculty WHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'San Francisco State University') AND Year = 2004;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT Faculty FROM faculty WHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'San Francisco State University') AND Year = 2004;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT Faculty FROM faculty WHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'San Francisco State University') AND Year = 2004;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT faculty FROM faculty AS T1 JOIN Campuses AS T2 ON T1.Campus = T2.Id WHERE T1.Year = 2004 AND T2.Campus = 'San Francisco State University'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Faculty FROM faculty WHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'San Francisco State University') AND Year = 2004;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2378",
        "c_low": "SELECT T2.Campus \nFROM faculty AS T1 \nJOIN Campuses AS T2 ON T1.Campus = T2.Id \nWHERE T1.Year = 2004 \nAND T1.Faculty BETWEEN 600 AND 1000;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT Campuses.Campus \nFROM Campuses \nJOIN faculty ON Campuses.Id = faculty.Campus \nWHERE faculty.Year = 2004 \nAND faculty.Faculty BETWEEN 600 AND 1000;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT c.Campus \nFROM Campuses c \nJOIN faculty f ON c.Id = f.Campus \nWHERE f.Year = 2004 AND f.Faculty BETWEEN 600 AND 1000;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of campuses from the 'Campuses' table that have records for a specified range of years. The placeholders in the WHERE clause represent the start and end years for filtering the campuses.\",\n        \"virtual_table\": \"SELECT campus FROM campuses WHERE YEAR  >=  [PLACEHOLDER-TYPE:NUMBER] AND YEAR  <=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT c.Campus \nFROM Campuses c \nJOIN faculty f ON c.Id = f.Campus \nWHERE f.Year = 2004 AND f.Faculty BETWEEN 600 AND 1000;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of campuses from the 'Campuses' table that have records for a specified range of years. The placeholders in the WHERE clause represent the start and end years for filtering the campuses.\",\n        \"virtual_table\": \"SELECT campus FROM campuses WHERE YEAR  >=  [PLACEHOLDER-TYPE:NUMBER] AND YEAR  <=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.Campus \nFROM faculty AS T1 \nJOIN Campuses AS T2 ON T1.Campus = T2.Id \nWHERE T1.Year = 2004 \nAND T1.Faculty BETWEEN 600 AND 1000;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Campuses.Campus \nFROM Campuses \nJOIN faculty ON Campuses.Id = faculty.Campus \nWHERE faculty.Year = 2004 \nAND faculty.Faculty BETWEEN 600 AND 1000;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2379",
        "c_low": "SELECT T2.Campus\nFROM faculty AS T1\nJOIN Campuses AS T2 ON T1.Campus = T2.Id\nWHERE T1.Year = 2004 AND T1.Faculty BETWEEN 600 AND 1000;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT Campuses.Campus \nFROM faculty \nJOIN Campuses ON faculty.Campus = Campuses.Id \nWHERE faculty.Year = 2004 \nAND faculty.Faculty BETWEEN 600 AND 1000;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT c.Campus \nFROM Campuses c \nJOIN faculty f ON c.Id = f.Campus \nWHERE f.Year = 2004 AND f.Faculty BETWEEN 600 AND 1000;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of campuses from the 'Campuses' table that have records for a specified range of years. The placeholders in the WHERE clause represent the start and end years for filtering the campuses.\",\n        \"virtual_table\": \"SELECT campus FROM campuses WHERE YEAR  >=  [PLACEHOLDER-TYPE:NUMBER] AND YEAR  <=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT c.Campus \nFROM Campuses c \nJOIN faculty f ON c.Id = f.Campus \nWHERE f.Year = 2004 AND f.Faculty BETWEEN 600 AND 1000;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of campuses from the 'Campuses' table that have records for a specified range of years. The placeholders in the WHERE clause represent the start and end years for filtering the campuses.\",\n        \"virtual_table\": \"SELECT campus FROM campuses WHERE YEAR  >=  [PLACEHOLDER-TYPE:NUMBER] AND YEAR  <=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.Campus \nFROM faculty AS T1 \nJOIN Campuses AS T2 ON T1.Campus = T2.Id \nWHERE T1.Year = 2004 AND T1.Faculty BETWEEN 600 AND 1000;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Campuses.Campus \nFROM faculty \nJOIN Campuses ON faculty.Campus = Campuses.Id \nWHERE faculty.Year = 2004 \nAND faculty.Faculty BETWEEN 600 AND 1000;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2380",
        "c_low": "SELECT COUNT(faculty) FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus = T2.id WHERE T1.year = 2002 AND T2.id = (SELECT T2.id FROM campuses AS T1 JOIN degrees AS T2 ON T1.id = T2.campus WHERE T2.year = 2002 GROUP BY T2.campus ORDER BY COUNT(T2.degrees) DESC LIMIT 1)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT COUNT(faculty.Campus) AS FacultyCount\nFROM faculty\nJOIN degrees ON faculty.Campus = degrees.Campus\nWHERE degrees.Year = '2002'\nAND degrees.Campus = (SELECT Campus\n                     FROM degrees\n                     WHERE Year = '2002'\n                     GROUP BY Campus\n                     ORDER BY COUNT(Degrees) DESC\n                     LIMIT 1);",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT COUNT(*) AS FacultyCount\nFROM faculty\nWHERE Campus = (\n    SELECT Campus\n    FROM degrees\n    WHERE Year = '2002'\n    GROUP BY Campus\n    ORDER BY COUNT(Degrees) DESC\n    LIMIT 1\n)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT COUNT(*) AS FacultyCount\nFROM faculty\nWHERE Campus = (\n    SELECT Campus\n    FROM degrees\n    WHERE Year = '2002'\n    GROUP BY Campus\n    ORDER BY COUNT(Degrees) DESC\n    LIMIT 1\n)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT COUNT(faculty) FROM faculty AS T1 JOIN degrees AS T2 ON T1.campus = T2.campus JOIN campuses AS T3 ON T2.campus = T3.id WHERE T2.year = 2002 AND T3.campus = (SELECT T4.campus FROM degrees AS T4 WHERE T4.year = 2002 GROUP BY T4.campus ORDER BY COUNT(T4.degrees) DESC LIMIT 1);",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(*) AS FacultyCount\nFROM faculty\nWHERE Campus = (\n    SELECT Campus\n    FROM degrees\n    WHERE Year = '2002'\n    GROUP BY Campus\n    ORDER BY COUNT(Degrees) DESC\n    LIMIT 1\n)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2381",
        "c_low": "SELECT f.Faculty \nFROM faculty AS f \nJOIN degrees AS d ON f.Campus = d.Campus \nWHERE d.Year = '2002' \nAND d.Campus = (SELECT Campus \n                FROM degrees \n                WHERE Year = '2002' \n                GROUP BY Campus \n                ORDER BY COUNT(Degrees) DESC \n                LIMIT 1)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT f.Faculty \nFROM faculty f \nJOIN degrees d ON f.Campus = d.Campus \nWHERE d.Year = '2002' \nAND d.Campus = (SELECT Campus \n                FROM degrees \n                WHERE Year = '2002' \n                GROUP BY Campus \n                ORDER BY COUNT(Degrees) DESC \n                LIMIT 1)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT f.Faculty \nFROM faculty f \nJOIN degrees d ON f.Campus = d.Campus \nWHERE d.Year = '2002' \nAND d.Campus = (SELECT Campus \n                FROM degrees \n                WHERE Year = '2002' \n                GROUP BY Campus \n                ORDER BY COUNT(Degrees) DESC \n                LIMIT 1)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT f.Faculty \nFROM faculty f \nJOIN degrees d ON f.Campus = d.Campus \nWHERE d.Year = '2002' \nAND d.Campus = (SELECT Campus \n                FROM degrees \n                WHERE Year = '2002' \n                GROUP BY Campus \n                ORDER BY COUNT(Degrees) DESC \n                LIMIT 1)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT f.Faculty \nFROM faculty AS f \nJOIN degrees AS d ON f.Campus = d.Campus \nWHERE d.Year = '2002' \nAND d.Campus = (SELECT Campus \n                FROM degrees \n                WHERE Year = '2002' \n                GROUP BY Campus \n                ORDER BY COUNT(Degrees) DESC \n                LIMIT 1)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT f.Faculty \nFROM faculty f \nJOIN degrees d ON f.Campus = d.Campus \nWHERE d.Year = '2002' \nAND d.Campus = (SELECT Campus \n                FROM degrees \n                WHERE Year = '2002' \n                GROUP BY Campus \n                ORDER BY COUNT(Degrees) DESC \n                LIMIT 1)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2382",
        "c_low": "SELECT COUNT(*) FROM faculty AS T1 JOIN campuses AS T2 ON T1.Campus = T2.Id WHERE T1.Year = 2001 AND T2.Id = (SELECT Campus FROM degrees WHERE Year = 2001 GROUP BY Campus ORDER BY COUNT(Degrees) ASC LIMIT 1)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT COUNT(*) AS FacultyCount\nFROM faculty\nWHERE Campus = (\n    SELECT Campus\n    FROM degrees\n    WHERE Year = '2001'\n    GROUP BY Campus\n    ORDER BY COUNT(Degrees) ASC\n    LIMIT 1\n)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT COUNT(*) AS FacultyCount\nFROM faculty\nWHERE Campus = (\n    SELECT Campus\n    FROM degrees\n    WHERE Year = '2001'\n    GROUP BY Campus\n    ORDER BY COUNT(Degrees) ASC\n    LIMIT 1\n)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT COUNT(*) AS FacultyCount\nFROM faculty\nWHERE Campus = (\n    SELECT Campus\n    FROM degrees\n    WHERE Year = '2001'\n    GROUP BY Campus\n    ORDER BY COUNT(Degrees) ASC\n    LIMIT 1\n)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT COUNT(*) FROM faculty AS T1 JOIN campuses AS T2 ON T1.Campus = T2.Id WHERE T1.Year = 2001 AND T2.Id = (SELECT Campus FROM degrees WHERE Year = 2001 GROUP BY Campus ORDER BY COUNT(Degrees) ASC LIMIT 1)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(*) AS FacultyCount\nFROM faculty\nWHERE Campus = (\n    SELECT Campus\n    FROM degrees\n    WHERE Year = '2001'\n    GROUP BY Campus\n    ORDER BY COUNT(Degrees) ASC\n    LIMIT 1\n)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2383",
        "c_low": "SELECT SUM(faculty.Faculty) AS TotalFaculty\nFROM faculty\nWHERE faculty.Year = 2001\nAND faculty.Campus = (\n    SELECT degrees.Campus\n    FROM degrees\n    WHERE degrees.Year = 2001\n    GROUP BY degrees.Campus\n    ORDER BY COUNT(degrees.Degrees) ASC\n    LIMIT 1\n);",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT f.Faculty \nFROM faculty f \nJOIN degrees d ON f.Campus = d.Campus \nWHERE d.Year = '2001' \nORDER BY (SELECT COUNT(*) FROM degrees WHERE Year = '2001') ASC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT f.Faculty \nFROM faculty f \nJOIN degrees d ON f.Campus = d.Campus \nWHERE d.Year = '2001' \nORDER BY d.Degrees ASC \nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT f.Faculty \nFROM faculty f \nJOIN degrees d ON f.Campus = d.Campus \nWHERE d.Year = '2001' \nORDER BY (SELECT COUNT(*) FROM degrees WHERE Year = '2001') ASC \nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT f.Faculty \nFROM faculty AS f \nJOIN degrees AS d ON f.Campus = d.Campus \nWHERE d.Year = '2001' \nORDER BY d.Degrees ASC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT f.Faculty \nFROM faculty f \nJOIN degrees d ON f.Campus = d.Campus \nWHERE d.Year = '2001' \nORDER BY (SELECT COUNT(*) FROM degrees WHERE Year = '2001') ASC \nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2385",
        "c_low": "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN Campuses AS t2 ON t1.Campus = t2.Id WHERE t1.Year = '2023' AND t2.Campus = 'San Jose State'",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total number of undergraduate enrollments from the 'discipline_enrollments' table for a specific campus and year. The placeholders in the WHERE clause represent the year of enrollment and the name of the campus.\",\n        \"virtual_table\": \"SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND t2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total number of graduate enrollments from the 'discipline_enrollments' table for a specific campus and year. The placeholders in the WHERE clause represent the year of enrollment and the name of the campus.\",\n        \"virtual_table\": \"SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND t2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT SUM(Undergraduate) AS TotalUndergraduates\nFROM discipline_enrollments\nWHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'San Jose State');",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT SUM(Undergraduate) AS Total_Undergraduates\nFROM discipline_enrollments\nWHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'San Jose State');",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT SUM(Undergraduate) AS Total_Undergraduates\nFROM discipline_enrollments\nWHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'San Jose State');",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN Campuses AS t2 ON t1.Campus = t2.Id WHERE t1.Year = '2023' AND t2.Campus = 'San Jose State'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the total number of undergraduate enrollments from the 'discipline_enrollments' table for a specific campus and year. The placeholders in the WHERE clause represent the year of enrollment and the name of the campus.\",\n        \"virtual_table\": \"SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND t2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the total number of graduate enrollments from the 'discipline_enrollments' table for a specific campus and year. The placeholders in the WHERE clause represent the year of enrollment and the name of the campus.\",\n        \"virtual_table\": \"SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND t2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT SUM(Undergraduate) AS TotalUndergraduates\nFROM discipline_enrollments\nWHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'San Jose State');",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2387",
        "c_low": "SELECT COUNT(*) FROM degrees AS T1 JOIN Campuses AS T2 ON T1.Campus = T2.Id WHERE T1.Year = 2004 AND T2.Campus = 'San Francisco State University'",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT COUNT(*) AS Graduates\nFROM degrees\nWHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'San Francisco State University')\nAND Year = '2004';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT COUNT(*) AS Graduates\nFROM degrees\nWHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'San Francisco State University')\nAND Year = '2004';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT COUNT(*) AS Graduates\nFROM degrees\nWHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'San Francisco State University')\nAND Year = '2004';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT COUNT(*) AS Graduates \nFROM degrees AS T1 \nJOIN Campuses AS T2 ON T1.Campus = T2.Id \nWHERE T1.Year = 2004 AND T2.Campus = 'San Francisco State University';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the number of faculty members at a specific campus for a given year. The placeholders in the WHERE clause represent the year of the faculty data record and the name of the campus.\",\n        \"virtual_table\": \"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  [PLACEHOLDER-TYPE:NUMBER] AND T2.campus  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides information about the types of degrees awarded at a specific campus during a particular year. The placeholders in the WHERE clause represent the campus name and the year for which the degree data is being queried.\",\n        \"virtual_table\": \"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  [PLACEHOLDER-TYPE:STRING] AND t2.year  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(*) AS Graduates\nFROM degrees\nWHERE Campus = (SELECT Id FROM Campuses WHERE Campus = 'San Francisco State University')\nAND Year = '2004';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2396",
        "c_low": "SELECT Poll_Source, COUNT(*) AS Candidate_Count FROM candidate GROUP BY Poll_Source ORDER BY Candidate_Count DESC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of individuals from the 'people' table who are candidates in the 'candidate' table, specifically those whose support rate is less than their oppose rate. The query joins the two tables on the People_ID to correlate candidate data with personal details.\",\n        \"virtual_table\": \"SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate\"\n    }\n}\n",
        "c_mid": "SELECT Poll_Source, COUNT(*) AS Candidate_Count FROM candidate GROUP BY Poll_Source ORDER BY Candidate_Count DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the gender distribution of candidates based on the percentage of respondents who are unsure about them. It joins the 'people' and 'candidate' tables on the 'People_ID' field, groups the results by gender, and orders them by the average unsure rate in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT Poll_Source, COUNT(*) AS Candidate_Count\nFROM candidate\nGROUP BY Poll_Source\nORDER BY Candidate_Count DESC\nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT Poll_Source, COUNT(*) AS Candidate_Count\nFROM candidate\nGROUP BY Poll_Source\nORDER BY Candidate_Count DESC\nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT Poll_Source, COUNT(*) AS Candidate_Count FROM candidate GROUP BY Poll_Source ORDER BY Candidate_Count DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of individuals from the 'people' table who are candidates in the 'candidate' table, specifically those whose support rate is less than their oppose rate. The query joins the two tables on the People_ID to correlate candidate data with personal details.\",\n        \"virtual_table\": \"SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the gender distribution of candidates based on the percentage of respondents who are unsure about them. It joins the 'people' and 'candidate' tables on the 'People_ID' field, groups the results by gender, and orders them by the average unsure rate in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Poll_Source, COUNT(*) AS Candidate_Count\nFROM candidate\nGROUP BY Poll_Source\nORDER BY Candidate_Count DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2397",
        "c_low": "SELECT Poll_Source, COUNT(*) AS Candidate_Count\nFROM candidate\nGROUP BY Poll_Source\nORDER BY Candidate_Count DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Poll_Source, COUNT(*) AS Candidate_Count FROM candidate GROUP BY Poll_Source ORDER BY Candidate_Count DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the gender distribution of candidates based on the percentage of respondents who are unsure about them. It joins the 'people' and 'candidate' tables on the 'People_ID' field, groups the results by gender, and orders them by the average unsure rate in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT Poll_Source, COUNT(*) AS Candidate_Count\nFROM candidate\nGROUP BY Poll_Source\nORDER BY Candidate_Count DESC\nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT Poll_Source, COUNT(*) AS Candidate_Count\nFROM candidate\nGROUP BY Poll_Source\nORDER BY Candidate_Count DESC\nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT Poll_Source, COUNT(*) AS Candidate_Count FROM candidate GROUP BY Poll_Source ORDER BY Candidate_Count DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the gender distribution of candidates based on the percentage of respondents who are unsure about them. It joins the 'people' and 'candidate' tables on the 'People_ID' field, groups the results by gender, and orders them by the average unsure rate in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Poll_Source, COUNT(Candidate_ID) AS Candidate_Count\nFROM candidate\nGROUP BY Poll_Source\nORDER BY Candidate_Count DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2398",
        "c_low": "SELECT Candidate_ID, Support_rate FROM candidate ORDER BY Support_rate DESC LIMIT 3;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of individuals from the 'people' table who are candidates in the 'candidate' table, specifically those whose support rate is less than their oppose rate. The query joins the two tables on the People_ID to correlate candidate data with personal details.\",\n        \"virtual_table\": \"SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate\"\n    }\n}\n",
        "c_mid": "SELECT Candidate_ID, Support_rate FROM candidate ORDER BY Support_rate DESC LIMIT 3;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the gender distribution of candidates based on the percentage of respondents who are unsure about them. It joins the 'people' and 'candidate' tables on the 'People_ID' field, groups the results by gender, and orders them by the average unsure rate in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT Candidate_ID, Support_rate FROM candidate ORDER BY Support_rate DESC LIMIT 3;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT Candidate_ID, Support_rate FROM candidate ORDER BY Support_rate DESC LIMIT 3;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT * FROM candidate ORDER BY Support_rate DESC LIMIT 3;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of individuals from the 'people' table who are candidates in the 'candidate' table, specifically those whose support rate is less than their oppose rate. The query joins the two tables on the People_ID to correlate candidate data with personal details.\",\n        \"virtual_table\": \"SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the gender distribution of candidates based on the percentage of respondents who are unsure about them. It joins the 'people' and 'candidate' tables on the 'People_ID' field, groups the results by gender, and orders them by the average unsure rate in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Candidate_ID, Support_rate FROM candidate ORDER BY Support_rate DESC LIMIT 3;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2402",
        "c_low": "SELECT c.Support_rate, c.Consider_rate, c.Oppose_rate FROM candidate AS c ORDER BY c.Unsure_rate ASC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of individuals from the 'people' table who are candidates in the 'candidate' table, specifically those whose support rate is less than their oppose rate. The query joins the two tables on the People_ID to correlate candidate data with personal details.\",\n        \"virtual_table\": \"SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate\"\n    }\n}\n",
        "c_mid": "SELECT Support_rate, Consider_rate, Oppose_rate FROM candidate ORDER BY Unsure_rate ASC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the gender distribution of candidates based on the percentage of respondents who are unsure about them. It joins the 'people' and 'candidate' tables on the 'People_ID' field, groups the results by gender, and orders them by the average unsure rate in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT Candidate_ID, Support_rate, Consider_rate, Oppose_rate, Unsure_rate \nFROM candidate \nORDER BY Unsure_rate ASC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT Candidate_ID, Support_rate, Consider_rate, Oppose_rate, Unsure_rate \nFROM candidate \nORDER BY Unsure_rate ASC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT t2.support_rate, t2.consider_rate, t2.oppose_rate FROM candidate AS t2 ORDER BY t2.unsure_rate ASC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of individuals from the 'people' table who are candidates in the 'candidate' table, specifically those whose support rate is less than their oppose rate. The query joins the two tables on the People_ID to correlate candidate data with personal details.\",\n        \"virtual_table\": \"SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the gender distribution of candidates based on the percentage of respondents who are unsure about them. It joins the 'people' and 'candidate' tables on the 'People_ID' field, groups the results by gender, and orders them by the average unsure rate in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Candidate_ID, Support_rate, Consider_rate, Oppose_rate, Unsure_rate \nFROM candidate \nORDER BY Unsure_rate ASC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2403",
        "c_low": "SELECT c.Support_rate, c.Consider_rate, c.Oppose_rate FROM candidate AS c ORDER BY c.Unsure_rate ASC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of individuals from the 'people' table who are candidates in the 'candidate' table, specifically those whose support rate is less than their oppose rate. The query joins the two tables on the People_ID to correlate candidate data with personal details.\",\n        \"virtual_table\": \"SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate\"\n    }\n}\n",
        "c_mid": "SELECT Support_rate, Consider_rate, Oppose_rate FROM candidate ORDER BY Unsure_rate ASC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the gender distribution of candidates based on the percentage of respondents who are unsure about them. It joins the 'people' and 'candidate' tables on the 'People_ID' field, groups the results by gender, and orders them by the average unsure rate in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT Candidate_ID, Support_rate, Consider_rate, Oppose_rate, Unsure_rate \nFROM candidate \nORDER BY Unsure_rate ASC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT Candidate_ID, Support_rate, Consider_rate, Oppose_rate, Unsure_rate \nFROM candidate \nORDER BY Unsure_rate ASC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT Support_rate, Consider_rate, Oppose_rate FROM candidate ORDER BY Unsure_rate ASC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the gender distribution of candidates based on the percentage of respondents who are unsure about them. It joins the 'people' and 'candidate' tables on the 'People_ID' field, groups the results by gender, and orders them by the average unsure rate in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of individuals from the 'people' table who are candidates in the 'candidate' table, specifically those whose support rate is less than their oppose rate. The query joins the two tables on the People_ID to correlate candidate data with personal details.\",\n        \"virtual_table\": \"SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate\"\n    }\n}\n",
        "t_3+": "SELECT Candidate_ID, Support_rate, Consider_rate, Oppose_rate, Unsure_rate FROM candidate ORDER BY Unsure_rate ASC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2405",
        "c_low": "SELECT t2.Poll_Source FROM candidate AS t2 WHERE t2.Oppose_rate > 0",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of individuals from the 'people' table who are candidates in the 'candidate' table, specifically those whose support rate is less than their oppose rate. The query joins the two tables on the People_ID to correlate candidate data with personal details.\",\n        \"virtual_table\": \"SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate\"\n    }\n}\n",
        "c_mid": "SELECT Poll_Source FROM candidate WHERE Oppose_rate IS NOT NULL;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the gender distribution of candidates based on the percentage of respondents who are unsure about them. It joins the 'people' and 'candidate' tables on the 'People_ID' field, groups the results by gender, and orders them by the average unsure rate in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT Poll_Source FROM candidate WHERE Oppose_rate IS NOT NULL;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT Poll_Source FROM candidate WHERE Oppose_rate IS NOT NULL;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT t2.Poll_Source FROM candidate AS t2 WHERE t2.Oppose_rate > 0",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of individuals from the 'people' table who are candidates in the 'candidate' table, specifically those whose support rate is less than their oppose rate. The query joins the two tables on the People_ID to correlate candidate data with personal details.\",\n        \"virtual_table\": \"SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the gender distribution of candidates based on the percentage of respondents who are unsure about them. It joins the 'people' and 'candidate' tables on the 'People_ID' field, groups the results by gender, and orders them by the average unsure rate in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Poll_Source FROM candidate WHERE Oppose_rate IS NOT NULL;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2417",
        "c_low": "SELECT t1.Name, t1.Sex FROM people AS t1 JOIN candidate AS t2 ON t1.People_ID = t2.People_ID WHERE t2.Oppose_rate > (SELECT AVG(t2.Oppose_rate) FROM candidate AS t2 JOIN people AS t3 ON t2.People_ID = t3.People_ID WHERE t3.Sex = t1.Sex)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of individuals from the 'people' table who are candidates in the 'candidate' table, specifically those whose support rate is less than their oppose rate. The query joins the two tables on the People_ID to correlate candidate data with personal details.\",\n        \"virtual_table\": \"SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate\"\n    }\n}\n",
        "c_mid": "SELECT p.Name, p.Sex FROM people AS p JOIN candidate AS c ON p.People_ID = c.People_ID WHERE p.Sex IN (SELECT DISTINCT Sex FROM people) AND c.Oppose_rate = (SELECT MAX(Oppose_rate) FROM candidate AS c2 JOIN people AS p2 ON c2.People_ID = p2.People_ID WHERE p2.Sex = p.Sex)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the gender distribution of candidates based on the percentage of respondents who are unsure about them. It joins the 'people' and 'candidate' tables on the 'People_ID' field, groups the results by gender, and orders them by the average unsure rate in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of individuals from the 'people' table who are linked to candidates in the 'candidate' table, filtered by a specific gender. The placeholder in the WHERE clause represents the gender of the individuals.\",\n        \"virtual_table\": \"SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  [PLACEHOLDER-TYPE:STRING] ORDER BY t1.name\"\n    }\n}\n",
        "c_high": "SELECT p.Sex, p.Name, c.Oppose_rate \nFROM candidate c \nJOIN people p ON c.People_ID = p.People_ID \nWHERE c.Oppose_rate = (SELECT MAX(Oppose_rate) \n                       FROM candidate c2 \n                       JOIN people p2 ON c2.People_ID = p2.People_ID \n                       WHERE p2.Sex = p.Sex)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT p.Sex, p.Name, c.Oppose_rate \nFROM candidate c \nJOIN people p ON c.People_ID = p.People_ID \nWHERE c.Oppose_rate = (SELECT MAX(Oppose_rate) \n                       FROM candidate c2 \n                       JOIN people p2 ON c2.People_ID = p2.People_ID \n                       WHERE p2.Sex = p.Sex)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT t1.name, t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t2.oppose_rate > (SELECT MAX(t2.oppose_rate) FROM candidate AS t2 JOIN people AS t3 ON t2.people_id = t3.people_id WHERE t3.sex = t1.sex)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of individuals from the 'people' table who are candidates in the 'candidate' table, specifically those whose support rate is less than their oppose rate. The query joins the two tables on the People_ID to correlate candidate data with personal details.\",\n        \"virtual_table\": \"SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the gender distribution of candidates based on the percentage of respondents who are unsure about them. It joins the 'people' and 'candidate' tables on the 'People_ID' field, groups the results by gender, and orders them by the average unsure rate in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of individuals from the 'people' table who are linked to candidates in the 'candidate' table, filtered by a specific gender. The placeholder in the WHERE clause represents the gender of the individuals.\",\n        \"virtual_table\": \"SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  [PLACEHOLDER-TYPE:STRING] ORDER BY t1.name\"\n    }\n}\n",
        "t_3+": "SELECT p.Sex, p.Name, c.Oppose_rate \nFROM candidate c \nJOIN people p ON c.People_ID = p.People_ID \nWHERE c.Oppose_rate = (SELECT MAX(Oppose_rate) \n                       FROM candidate c2 \n                       JOIN people p2 ON c2.People_ID = p2.People_ID \n                       WHERE p2.Sex = p.Sex)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2418",
        "c_low": "SELECT p.Sex, AVG(c.Unsure_rate) AS Average_Unsure_Rate\nFROM candidate c\nJOIN people p ON c.People_ID = p.People_ID\nGROUP BY p.Sex\nORDER BY Average_Unsure_Rate DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT t1.Sex, AVG(t2.Unsure_rate) AS Average_Unsure_Rate \nFROM people AS t1 \nJOIN candidate AS t2 ON t1.People_ID = t2.People_ID \nGROUP BY t1.Sex \nORDER BY Average_Unsure_Rate DESC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the gender distribution of candidates based on the percentage of respondents who are unsure about them. It joins the 'people' and 'candidate' tables on the 'People_ID' field, groups the results by gender, and orders them by the average unsure rate in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT p.Sex, AVG(c.Unsure_rate) AS Average_Unsure_Rate\nFROM candidate c\nJOIN people p ON c.People_ID = p.People_ID\nGROUP BY p.Sex\nORDER BY Average_Unsure_Rate DESC\nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the average height and weight of individuals from the 'people' table, filtered by a specific gender. The placeholder in the WHERE clause represents the gender of the individuals being queried.\",\n        \"virtual_table\": \"SELECT avg(height) ,  avg(weight) FROM people WHERE sex  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of individuals grouped by their gender from the 'people' table, specifically for those whose weight exceeds a certain threshold. The placeholder in the WHERE clause represents the weight limit.\",\n        \"virtual_table\": \"SELECT count(*) ,  sex FROM people WHERE weight  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY sex\"\n    }\n}\n",
        "t_1": "SELECT p.Sex, AVG(c.Unsure_rate) AS Average_Unsure_Rate\nFROM candidate c\nJOIN people p ON c.People_ID = p.People_ID\nGROUP BY p.Sex\nORDER BY Average_Unsure_Rate DESC\nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the average height and weight of individuals from the 'people' table, filtered by a specific gender. The placeholder in the WHERE clause represents the gender of the individuals being queried.\",\n        \"virtual_table\": \"SELECT avg(height) ,  avg(weight) FROM people WHERE sex  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of individuals grouped by their gender from the 'people' table, specifically for those whose weight exceeds a certain threshold. The placeholder in the WHERE clause represents the weight limit.\",\n        \"virtual_table\": \"SELECT count(*) ,  sex FROM people WHERE weight  >  [PLACEHOLDER-TYPE:NUMBER] GROUP BY sex\"\n    }\n}\n",
        "t_2": "SELECT t1.Sex, AVG(t2.Unsure_rate) AS Average_Unsure_Rate FROM people AS t1 JOIN candidate AS t2 ON t1.People_ID = t2.People_ID GROUP BY t1.Sex ORDER BY Average_Unsure_Rate DESC LIMIT 1",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the gender distribution of candidates based on the percentage of respondents who are unsure about them. It joins the 'people' and 'candidate' tables on the 'People_ID' field, groups the results by gender, and orders them by the average unsure rate in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT p.Sex, AVG(c.Unsure_rate) AS Average_Unsure_Rate\nFROM candidate c\nJOIN people p ON c.People_ID = p.People_ID\nGROUP BY p.Sex\nORDER BY Average_Unsure_Rate DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2434",
        "c_low": "SELECT title FROM Movie WHERE director = 'steven spielberg'",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique directors of movies that have been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT title FROM Movie WHERE director = 'steven spielberg'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that were directed by a specific director or released before a certain year. The placeholders in the WHERE clause represent the director's name and the year of release.\",\n        \"virtual_table\": \"SELECT title FROM Movie WHERE director  =  [PLACEHOLDER-TYPE:STRING] OR YEAR   <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the titles of movies from the 'Movie' table that were released after the most recent movie directed by a specific director. The placeholder in the WHERE clause represents the director's name.\",\n        \"virtual_table\": \"SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the titles of movies from the 'Movie' table that were directed by a specific director and released after a certain year. The placeholders in the WHERE clause represent the director's name and the year of release.\",\n        \"virtual_table\": \"SELECT title FROM Movie WHERE director = [PLACEHOLDER-TYPE:STRING] AND YEAR  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT title FROM Movie WHERE director = 'steven spielberg'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles and directors of movies from the 'Movie' table that share the same director but are different titles. The results are ordered by the director's name and then by the movie title.\",\n        \"virtual_table\": \"SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the directors of movies from the 'Movie' table who have directed a specific number of films. The placeholder in the HAVING clause represents the count of movies directed by each director.\",\n        \"virtual_table\": \"SELECT director FROM Movie GROUP BY director HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of directors from the 'Movie' table who have directed a specific number of movies, excluding a particular director. The placeholders in the WHERE clause represent the name of the director to exclude and the number of movies directed by the remaining directors.\",\n        \"virtual_table\": \"SELECT director FROM Movie WHERE director != [PLACEHOLDER-TYPE:STRING] GROUP BY director HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT title FROM Movie WHERE director = 'steven spielberg'",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles and directors of movies from the 'Movie' table that share the same director but are different titles. The results are ordered by the director's name and then by the movie title.\",\n        \"virtual_table\": \"SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that were directed by a specific director or released before a certain year. The placeholders in the WHERE clause represent the director's name and the year of release.\",\n        \"virtual_table\": \"SELECT title FROM Movie WHERE director  =  [PLACEHOLDER-TYPE:STRING] OR YEAR   <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the titles of movies from the 'Movie' table that were released after the most recent movie directed by a specific director. The placeholder in the WHERE clause represents the director's name.\",\n        \"virtual_table\": \"SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "t_2": "SELECT title FROM Movie WHERE director = 'steven spielberg'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the directors and titles of movies from the 'Movie' table that have received a specific number of stars in their ratings. The placeholder in the WHERE clause represents the number of stars given in the rating.\",\n        \"virtual_table\": \"SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the titles and directors of movies that have received ratings higher than the average rating for movies directed by a specific director. The placeholder in the subquery represents the name of the director whose average rating is being calculated.\",\n        \"virtual_table\": \"SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "t_3+": "SELECT title FROM Movie WHERE director = 'steven spielberg'",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique directors of movies that have been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that have not been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2460",
        "c_low": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T1.ratingDate IS NULL",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique directors of movies that have been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of reviewers who have given a rating of more than a specified number of stars to movies. The query joins the 'Rating' table with the 'Reviewer' table based on the reviewer's identifier, allowing us to filter the results based on the star rating provided.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT Reviewer.name \nFROM Reviewer \nJOIN Rating ON Reviewer.rID = Rating.rID \nWHERE Rating.ratingDate IS NULL;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies reviewers who have submitted ratings for movies but did not give a specific number of stars. The placeholder in the EXCEPT clause represents the number of stars that is being excluded from the results.\",\n        \"virtual_table\": \"SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of distinct movie titles from the 'Movie' table that have been rated by a specific reviewer or were released after a certain year. The placeholders in the WHERE clause represent the reviewer's name and the year of release, respectively.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] OR T2.year  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the average star ratings given by each reviewer from the 'Rating' table. The placeholder in the SELECT statement represents the reviewer's name, and the average stars are calculated for each reviewer based on their ratings.\",\n        \"virtual_table\": \"SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.ratingDate IS NULL",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that have not been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of reviewers from the 'Reviewer' table who have submitted a number of ratings equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of ratings a reviewer must have submitted.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Reviewer.name FROM Reviewer WHERE rID IN (SELECT rID FROM Rating WHERE ratingDate IS NULL)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies reviewers who have submitted ratings for movies but did not give a specific number of stars. The placeholder in the EXCEPT clause represents the number of stars that is being excluded from the results.\",\n        \"virtual_table\": \"SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.ratingDate IS NULL",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of reviewers from the 'Reviewer' table who have submitted a number of ratings equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of ratings a reviewer must have submitted.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of reviewers who have given a rating of more than a specified number of stars to movies. The query joins the 'Rating' table with the 'Reviewer' table based on the reviewer's identifier, allowing us to filter the results based on the star rating provided.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the average star ratings given by each reviewer from the 'Rating' table. The placeholder in the SELECT statement represents the reviewer's name, and the average stars are calculated for each reviewer based on their ratings.\",\n        \"virtual_table\": \"SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T1.ratingDate IS NULL",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that have not been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2461",
        "c_low": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T1.ratingDate IS NULL",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique directors of movies that have been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of reviewers who have given a rating of more than a specified number of stars to movies. The query joins the 'Rating' table with the 'Reviewer' table based on the reviewer's identifier, allowing us to filter the results based on the star rating provided.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT name FROM Reviewer WHERE rID NOT IN (SELECT rID FROM Rating WHERE ratingDate IS NOT NULL)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies reviewers who have submitted ratings for movies but did not give a specific number of stars. The placeholder in the EXCEPT clause represents the number of stars that is being excluded from the results.\",\n        \"virtual_table\": \"SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of distinct movie titles from the 'Movie' table that have been rated by a specific reviewer or were released after a certain year. The placeholders in the WHERE clause represent the reviewer's name and the year of release, respectively.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] OR T2.year  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the average star ratings given by each reviewer from the 'Rating' table. The placeholder in the SELECT statement represents the reviewer's name, and the average stars are calculated for each reviewer based on their ratings.\",\n        \"virtual_table\": \"SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT name FROM Reviewer WHERE rID NOT IN (SELECT rID FROM Rating WHERE ratingDate IS NOT NULL)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that have not been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of reviewers from the 'Reviewer' table who have submitted a number of ratings equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of ratings a reviewer must have submitted.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT Reviewer.name FROM Reviewer WHERE rID IN (SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars IS NOT NULL)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies reviewers who have submitted ratings for movies but did not give a specific number of stars. The placeholder in the EXCEPT clause represents the number of stars that is being excluded from the results.\",\n        \"virtual_table\": \"SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.name FROM Reviewer AS T2 LEFT JOIN Rating AS T1 ON T1.rID = T2.rID WHERE T1.ratingDate IS NULL",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of reviewers who have given a rating of more than a specified number of stars to movies. The query joins the 'Rating' table with the 'Reviewer' table based on the reviewer's identifier, allowing us to filter the results based on the star rating provided.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of reviewers from the 'Reviewer' table who have submitted a number of ratings equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of ratings a reviewer must have submitted.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the average star ratings given by each reviewer from the 'Rating' table. The placeholder in the SELECT statement represents the reviewer's name, and the average stars are calculated for each reviewer based on their ratings.\",\n        \"virtual_table\": \"SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT name FROM Reviewer WHERE rID NOT IN (SELECT rID FROM Rating WHERE ratingDate IS NOT NULL)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that have not been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2476",
        "c_low": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  = 'Gone with the Wind'",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique directors of movies that have been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of reviewers who have given a rating of more than a specified number of stars to movies. The query joins the 'Rating' table with the 'Reviewer' table based on the reviewer's identifier, allowing us to filter the results based on the star rating provided.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T2.title = 'Gone with the Wind'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of distinct movie titles from the 'Movie' table that have been rated by a specific reviewer or were released after a certain year. The placeholders in the WHERE clause represent the reviewer's name and the year of release, respectively.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] OR T2.year  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies reviewers who have submitted ratings for movies but did not give a specific number of stars. The placeholder in the EXCEPT clause represents the number of stars that is being excluded from the results.\",\n        \"virtual_table\": \"SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the average star ratings given by each reviewer from the 'Rating' table. The placeholder in the SELECT statement represents the reviewer's name, and the average stars are calculated for each reviewer based on their ratings.\",\n        \"virtual_table\": \"SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T2.title = 'Gone with the Wind'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of reviewers from the 'Reviewer' table who have submitted a number of ratings equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of ratings a reviewer must have submitted.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that have not been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT Reviewer.name \nFROM Reviewer \nJOIN Rating ON Reviewer.rID = Rating.rID \nJOIN Movie ON Rating.mID = Movie.mID \nWHERE Movie.title = 'Gone with the Wind';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies reviewers who have submitted ratings for movies but did not give a specific number of stars. The placeholder in the EXCEPT clause represents the number of stars that is being excluded from the results.\",\n        \"virtual_table\": \"SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID JOIN Movie AS T3 ON T1.mID = T3.mID WHERE T3.title = 'Gone with the Wind'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of reviewers who have given a rating of more than a specified number of stars to movies. The query joins the 'Rating' table with the 'Reviewer' table based on the reviewer's identifier, allowing us to filter the results based on the star rating provided.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of reviewers from the 'Reviewer' table who have submitted a number of ratings equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of ratings a reviewer must have submitted.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the average star ratings given by each reviewer from the 'Rating' table. The placeholder in the SELECT statement represents the reviewer's name, and the average stars are calculated for each reviewer based on their ratings.\",\n        \"virtual_table\": \"SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  = 'Gone with the Wind'",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique directors of movies that have been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2482",
        "c_low": "SELECT T3.name, T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique directors of movies that have been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of reviewers who have given a rating of more than a specified number of stars to movies. The query joins the 'Rating' table with the 'Reviewer' table based on the reviewer's identifier, allowing us to filter the results based on the star rating provided.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT Reviewer.name, Movie.title FROM Reviewer JOIN Rating ON Reviewer.rID = Rating.rID JOIN Movie ON Rating.mID = Movie.mID;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of distinct movie titles from the 'Movie' table that have been rated by a specific reviewer or were released after a certain year. The placeholders in the WHERE clause represent the reviewer's name and the year of release, respectively.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] OR T2.year  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the titles of movies along with their average ratings from the 'Rating' table. The results are grouped by movie identifier and ordered by the average rating in ascending order, with a limit on the number of results returned as specified by the placeholder.\",\n        \"virtual_table\": \"SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies reviewers who have submitted ratings for movies but did not give a specific number of stars. The placeholder in the EXCEPT clause represents the number of stars that is being excluded from the results.\",\n        \"virtual_table\": \"SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT T3.name, T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that have not been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles and directors of movies from the 'Movie' table that share the same director but are different titles. The results are ordered by the director's name and then by the movie title.\",\n        \"virtual_table\": \"SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title\"\n    }\n}\n",
        "t_1": "SELECT Reviewer.name, Movie.title FROM Reviewer JOIN Rating ON Reviewer.rID = Rating.rID JOIN Movie ON Rating.mID = Movie.mID;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles and directors of movies from the 'Movie' table that share the same director but are different titles. The results are ordered by the director's name and then by the movie title.\",\n        \"virtual_table\": \"SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies reviewers who have submitted ratings for movies but did not give a specific number of stars. The placeholder in the EXCEPT clause represents the number of stars that is being excluded from the results.\",\n        \"virtual_table\": \"SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that were directed by a specific director or released before a certain year. The placeholders in the WHERE clause represent the director's name and the year of release.\",\n        \"virtual_table\": \"SELECT title FROM Movie WHERE director  =  [PLACEHOLDER-TYPE:STRING] OR YEAR   <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Reviewer.name, Movie.title FROM Rating JOIN Reviewer ON Rating.rID = Reviewer.rID JOIN Movie ON Rating.mID = Movie.mID;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of reviewers who have given a rating of more than a specified number of stars to movies. The query joins the 'Rating' table with the 'Reviewer' table based on the reviewer's identifier, allowing us to filter the results based on the star rating provided.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the titles of movies along with their average ratings from the 'Rating' table. The results are grouped by movie identifier and ordered by the average rating in ascending order, with a limit on the number of results returned as specified by the placeholder.\",\n        \"virtual_table\": \"SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of reviewers from the 'Reviewer' table who have submitted a number of ratings equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of ratings a reviewer must have submitted.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT T3.name, T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique directors of movies that have been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2483",
        "c_low": "SELECT DISTINCT T3.name, T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique directors of movies that have been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of reviewers who have given a rating of more than a specified number of stars to movies. The query joins the 'Rating' table with the 'Reviewer' table based on the reviewer's identifier, allowing us to filter the results based on the star rating provided.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT Reviewer.name, Movie.title FROM Reviewer JOIN Rating ON Reviewer.rID = Rating.rID JOIN Movie ON Rating.mID = Movie.mID;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of distinct movie titles from the 'Movie' table that have been rated by a specific reviewer or were released after a certain year. The placeholders in the WHERE clause represent the reviewer's name and the year of release, respectively.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] OR T2.year  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies reviewers who have submitted ratings for movies but did not give a specific number of stars. The placeholder in the EXCEPT clause represents the number of stars that is being excluded from the results.\",\n        \"virtual_table\": \"SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the directors and titles of movies from the 'Movie' table that have received a specific number of stars in their ratings. The placeholder in the WHERE clause represents the number of stars given in the rating.\",\n        \"virtual_table\": \"SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT T3.name, T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that have not been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles and directors of movies from the 'Movie' table that share the same director but are different titles. The results are ordered by the director's name and then by the movie title.\",\n        \"virtual_table\": \"SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title\"\n    }\n}\n",
        "t_1": "SELECT Reviewer.name, Movie.title FROM Reviewer JOIN Rating ON Reviewer.rID = Rating.rID JOIN Movie ON Rating.mID = Movie.mID;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles and directors of movies from the 'Movie' table that share the same director but are different titles. The results are ordered by the director's name and then by the movie title.\",\n        \"virtual_table\": \"SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies reviewers who have submitted ratings for movies but did not give a specific number of stars. The placeholder in the EXCEPT clause represents the number of stars that is being excluded from the results.\",\n        \"virtual_table\": \"SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that were directed by a specific director or released before a certain year. The placeholders in the WHERE clause represent the director's name and the year of release.\",\n        \"virtual_table\": \"SELECT title FROM Movie WHERE director  =  [PLACEHOLDER-TYPE:STRING] OR YEAR   <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Reviewer.name, Movie.title FROM Reviewer JOIN Rating ON Reviewer.rID = Rating.rID JOIN Movie ON Rating.mID = Movie.mID;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of reviewers who have given a rating of more than a specified number of stars to movies. The query joins the 'Rating' table with the 'Reviewer' table based on the reviewer's identifier, allowing us to filter the results based on the star rating provided.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of reviewers from the 'Reviewer' table who have submitted a number of ratings equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of ratings a reviewer must have submitted.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the directors and titles of movies from the 'Movie' table that have received a specific number of stars in their ratings. The placeholder in the WHERE clause represents the number of stars given in the rating.\",\n        \"virtual_table\": \"SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT T3.name, T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique directors of movies that have been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2487",
        "c_low": "SELECT director, GROUP_CONCAT(title) AS movies\nFROM Movie\nWHERE director IN (\n    SELECT director\n    FROM Movie\n    GROUP BY director\n    HAVING COUNT(mID) > 1\n)\nGROUP BY director;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique directors of movies that have been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT director, GROUP_CONCAT(title) AS movies\nFROM Movie\nWHERE director IN (\n    SELECT director\n    FROM Movie\n    GROUP BY director\n    HAVING COUNT(mID) > 1\n)\nGROUP BY director;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that were directed by a specific director or released before a certain year. The placeholders in the WHERE clause represent the director's name and the year of release.\",\n        \"virtual_table\": \"SELECT title FROM Movie WHERE director  =  [PLACEHOLDER-TYPE:STRING] OR YEAR   <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the titles of movies from the 'Movie' table that were directed by a specific director and released after a certain year. The placeholders in the WHERE clause represent the director's name and the year of release.\",\n        \"virtual_table\": \"SELECT title FROM Movie WHERE director = [PLACEHOLDER-TYPE:STRING] AND YEAR  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the titles of movies from the 'Movie' table that were released after the most recent movie directed by a specific director. The placeholder in the WHERE clause represents the director's name.\",\n        \"virtual_table\": \"SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "c_high": "SELECT T1.title, T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director = T2.director WHERE T1.title != T2.title ORDER BY T1.director, T1.title",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles and directors of movies from the 'Movie' table that share the same director but are different titles. The results are ordered by the director's name and then by the movie title.\",\n        \"virtual_table\": \"SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the directors of movies from the 'Movie' table who have directed a specific number of films. The placeholder in the HAVING clause represents the count of movies directed by each director.\",\n        \"virtual_table\": \"SELECT director FROM Movie GROUP BY director HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of directors from the 'Movie' table who have directed a specific number of movies, excluding a particular director. The placeholders in the WHERE clause represent the name of the director to exclude and the number of movies directed by the remaining directors.\",\n        \"virtual_table\": \"SELECT director FROM Movie WHERE director != [PLACEHOLDER-TYPE:STRING] GROUP BY director HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT T1.title, T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director = T2.director WHERE T1.title != T2.title ORDER BY T1.director, T1.title",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles and directors of movies from the 'Movie' table that share the same director but are different titles. The results are ordered by the director's name and then by the movie title.\",\n        \"virtual_table\": \"SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the directors of movies from the 'Movie' table who have directed a specific number of films. The placeholder in the HAVING clause represents the count of movies directed by each director.\",\n        \"virtual_table\": \"SELECT director FROM Movie GROUP BY director HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that were directed by a specific director or released before a certain year. The placeholders in the WHERE clause represent the director's name and the year of release.\",\n        \"virtual_table\": \"SELECT title FROM Movie WHERE director  =  [PLACEHOLDER-TYPE:STRING] OR YEAR   <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT director, title FROM Movie WHERE director IN (SELECT director FROM Movie GROUP BY director HAVING COUNT(mID) > 1)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the directors and titles of movies from the 'Movie' table that have received a specific number of stars in their ratings. The placeholder in the WHERE clause represents the number of stars given in the rating.\",\n        \"virtual_table\": \"SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the titles and directors of movies that have received ratings higher than the average rating for movies directed by a specific director. The placeholder in the subquery represents the name of the director whose average rating is being calculated.\",\n        \"virtual_table\": \"SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "t_3+": "SELECT director, GROUP_CONCAT(title) AS movies FROM Movie GROUP BY director HAVING COUNT(mID) > 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique directors of movies that have been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2494",
        "c_low": "SELECT director, COUNT(*) AS review_count FROM Movie JOIN Rating ON Movie.mID = Rating.mID GROUP BY director;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique directors of movies that have been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of reviewers who have given a rating of more than a specified number of stars to movies. The query joins the 'Rating' table with the 'Reviewer' table based on the reviewer's identifier, allowing us to filter the results based on the star rating provided.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT director, COUNT(*) AS review_count FROM Movie AS M JOIN Rating AS R ON M.mID = R.mID GROUP BY director",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the titles and directors of movies that have received ratings higher than the average rating for movies directed by a specific director. The placeholder in the subquery represents the name of the director whose average rating is being calculated.\",\n        \"virtual_table\": \"SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the directors and titles of movies from the 'Movie' table that have received a specific number of stars in their ratings. The placeholder in the WHERE clause represents the number of stars given in the rating.\",\n        \"virtual_table\": \"SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the titles of movies from the 'Movie' table that were directed by a specific director and released after a certain year. The placeholders in the WHERE clause represent the director's name and the year of release.\",\n        \"virtual_table\": \"SELECT title FROM Movie WHERE director = [PLACEHOLDER-TYPE:STRING] AND YEAR  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT M.director, COUNT(R.mID) AS review_count \nFROM Movie AS M \nLEFT JOIN Rating AS R ON M.mID = R.mID \nGROUP BY M.director;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the directors of movies from the 'Movie' table who have directed a specific number of films. The placeholder in the HAVING clause represents the count of movies directed by each director.\",\n        \"virtual_table\": \"SELECT director FROM Movie GROUP BY director HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles and directors of movies from the 'Movie' table that share the same director but are different titles. The results are ordered by the director's name and then by the movie title.\",\n        \"virtual_table\": \"SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title\"\n    }\n}\n",
        "t_1": "SELECT M.director, COUNT(R.mID) AS review_count \nFROM Movie AS M \nLEFT JOIN Rating AS R ON M.mID = R.mID \nGROUP BY M.director;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the directors of movies from the 'Movie' table who have directed a specific number of films. The placeholder in the HAVING clause represents the count of movies directed by each director.\",\n        \"virtual_table\": \"SELECT director FROM Movie GROUP BY director HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the titles and directors of movies from the 'Movie' table that share the same director but are different titles. The results are ordered by the director's name and then by the movie title.\",\n        \"virtual_table\": \"SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of directors from the 'Movie' table who have directed a specific number of movies, excluding a particular director. The placeholders in the WHERE clause represent the name of the director to exclude and the number of movies directed by the remaining directors.\",\n        \"virtual_table\": \"SELECT director FROM Movie WHERE director != [PLACEHOLDER-TYPE:STRING] GROUP BY director HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT M.director, COUNT(R.mID) AS review_count \nFROM Movie AS M \nLEFT JOIN Rating AS R ON M.mID = R.mID \nGROUP BY M.director;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the titles and directors of movies that have received ratings higher than the average rating for movies directed by a specific director. The placeholder in the subquery represents the name of the director whose average rating is being calculated.\",\n        \"virtual_table\": \"SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the directors and titles of movies from the 'Movie' table that have received a specific number of stars in their ratings. The placeholder in the WHERE clause represents the number of stars given in the rating.\",\n        \"virtual_table\": \"SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of reviewers who have given a rating of more than a specified number of stars to movies. The query joins the 'Rating' table with the 'Reviewer' table based on the reviewer's identifier, allowing us to filter the results based on the star rating provided.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT director, COUNT(*) AS review_count \nFROM Movie \nJOIN Rating ON Movie.mID = Rating.mID \nGROUP BY director;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique directors of movies that have been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2495",
        "c_low": "SELECT director, COUNT(*) AS review_count \nFROM Movie \nJOIN Rating ON Movie.mID = Rating.mID \nGROUP BY director;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique directors of movies that have been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of reviewers who have given a rating of more than a specified number of stars to movies. The query joins the 'Rating' table with the 'Reviewer' table based on the reviewer's identifier, allowing us to filter the results based on the star rating provided.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT director, COUNT(rID) AS review_count FROM Rating JOIN Movie ON Rating.mID = Movie.mID GROUP BY director;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the titles and directors of movies that have received ratings higher than the average rating for movies directed by a specific director. The placeholder in the subquery represents the name of the director whose average rating is being calculated.\",\n        \"virtual_table\": \"SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the directors and titles of movies from the 'Movie' table that have received a specific number of stars in their ratings. The placeholder in the WHERE clause represents the number of stars given in the rating.\",\n        \"virtual_table\": \"SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that were directed by a specific director or released before a certain year. The placeholders in the WHERE clause represent the director's name and the year of release.\",\n        \"virtual_table\": \"SELECT title FROM Movie WHERE director  =  [PLACEHOLDER-TYPE:STRING] OR YEAR   <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT director, COUNT(*) AS review_count FROM Rating AS R JOIN Movie AS M ON R.mID = M.mID GROUP BY director",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the directors of movies from the 'Movie' table who have directed a specific number of films. The placeholder in the HAVING clause represents the count of movies directed by each director.\",\n        \"virtual_table\": \"SELECT director FROM Movie GROUP BY director HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of directors from the 'Movie' table who have directed a specific number of movies, excluding a particular director. The placeholders in the WHERE clause represent the name of the director to exclude and the number of movies directed by the remaining directors.\",\n        \"virtual_table\": \"SELECT director FROM Movie WHERE director != [PLACEHOLDER-TYPE:STRING] GROUP BY director HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Movie.director, COUNT(Rating.rID) AS review_count \nFROM Movie \nLEFT JOIN Rating ON Movie.mID = Rating.mID \nGROUP BY Movie.director;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the directors of movies from the 'Movie' table who have directed a specific number of films. The placeholder in the HAVING clause represents the count of movies directed by each director.\",\n        \"virtual_table\": \"SELECT director FROM Movie GROUP BY director HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of directors from the 'Movie' table who have directed a specific number of movies, excluding a particular director. The placeholders in the WHERE clause represent the name of the director to exclude and the number of movies directed by the remaining directors.\",\n        \"virtual_table\": \"SELECT director FROM Movie WHERE director != [PLACEHOLDER-TYPE:STRING] GROUP BY director HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that were directed by a specific director or released before a certain year. The placeholders in the WHERE clause represent the director's name and the year of release.\",\n        \"virtual_table\": \"SELECT title FROM Movie WHERE director  =  [PLACEHOLDER-TYPE:STRING] OR YEAR   <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT M.director, COUNT(R.mID) AS review_count \nFROM Movie AS M \nLEFT JOIN Rating AS R ON M.mID = R.mID \nGROUP BY M.director;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the titles and directors of movies that have received ratings higher than the average rating for movies directed by a specific director. The placeholder in the subquery represents the name of the director whose average rating is being calculated.\",\n        \"virtual_table\": \"SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the directors and titles of movies from the 'Movie' table that have received a specific number of stars in their ratings. The placeholder in the WHERE clause represents the number of stars given in the rating.\",\n        \"virtual_table\": \"SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of reviewers who have given a rating of more than a specified number of stars to movies. The query joins the 'Rating' table with the 'Reviewer' table based on the reviewer's identifier, allowing us to filter the results based on the star rating provided.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT M.director, COUNT(R.rID) AS review_count \nFROM Movie AS M \nJOIN Rating AS R ON M.mID = R.mID \nGROUP BY M.director;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique directors of movies that have been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2496",
        "c_low": "SELECT T2.title, AVG(T1.stars) AS average_rating \nFROM Rating AS T1 \nJOIN Movie AS T2 ON T1.mID = T2.mID \nGROUP BY T2.title \nORDER BY average_rating DESC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the titles of movies from the 'Movie' table that have received ratings within a specified range of stars. The placeholders in the WHERE clause represent the minimum and maximum star ratings.\",\n        \"virtual_table\": \"SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the titles of movies from the 'Movie' table that were released in the most recent year. The subquery retrieves the maximum year from the 'Movie' table, ensuring that only the latest movies are selected.\",\n        \"virtual_table\": \"SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)\"\n    }\n}\n",
        "c_mid": "SELECT T2.title, avg(T1.stars) AS average_rating FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID ORDER BY average_rating DESC",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the titles of movies along with their average ratings from the 'Rating' table. The results are grouped by movie identifier and ordered by the average rating in ascending order, with a limit on the number of results returned as specified by the placeholder.\",\n        \"virtual_table\": \"SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the titles and directors of movies that have received ratings higher than the average rating for movies directed by a specific director. The placeholder in the subquery represents the name of the director whose average rating is being calculated.\",\n        \"virtual_table\": \"SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the average star rating of movies released in the earliest year from the 'Movie' table. The placeholder in the WHERE clause is used to filter the movies based on their release year, which is determined by a subquery that finds the minimum year.\",\n        \"virtual_table\": \"SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)\"\n    }\n}\n",
        "c_high": "SELECT title, AVG(stars) AS average_rating \nFROM Rating AS R \nJOIN Movie AS M ON R.mID = M.mID \nGROUP BY M.mID \nORDER BY average_rating DESC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that have not been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT Movie.title, AVG(Rating.stars) AS average_rating \nFROM Movie \nJOIN Rating ON Movie.mID = Rating.mID \nGROUP BY Movie.mID \nORDER BY average_rating DESC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the titles of movies from the 'Movie' table that were released in the most recent year. The subquery retrieves the maximum year from the 'Movie' table, ensuring that only the latest movies are selected.\",\n        \"virtual_table\": \"SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)\"\n    }\n}\n",
        "t_2": "SELECT T2.title, avg(T1.stars) AS average_rating FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID ORDER BY average_rating DESC",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the titles of movies along with their average ratings from the 'Rating' table. The results are grouped by movie identifier and ordered by the average rating in ascending order, with a limit on the number of results returned as specified by the placeholder.\",\n        \"virtual_table\": \"SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the titles and directors of movies that have received ratings higher than the average rating for movies directed by a specific director. The placeholder in the subquery represents the name of the director whose average rating is being calculated.\",\n        \"virtual_table\": \"SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the average star rating of movies released in the earliest year from the 'Movie' table. The placeholder in the WHERE clause is used to filter the movies based on their release year, which is determined by a subquery that finds the minimum year.\",\n        \"virtual_table\": \"SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)\"\n    }\n}\n",
        "t_3+": "SELECT Movie.title, AVG(Rating.stars) AS average_rating \nFROM Rating \nJOIN Movie ON Rating.mID = Movie.mID \nGROUP BY Movie.mID \nORDER BY average_rating DESC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of distinct movie titles from the 'Movie' table that have been rated by a specific reviewer or were released after a certain year. The placeholders in the WHERE clause represent the reviewer's name and the year of release, respectively.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] OR T2.year  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2497",
        "c_low": "SELECT T2.title, AVG(T1.stars) AS average_rating \nFROM Rating AS T1 \nJOIN Movie AS T2 ON T1.mID = T2.mID \nGROUP BY T2.title \nORDER BY average_rating DESC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the titles of movies from the 'Movie' table that have received ratings within a specified range of stars. The placeholders in the WHERE clause represent the minimum and maximum star ratings.\",\n        \"virtual_table\": \"SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of reviewers who have given a rating of more than a specified number of stars to movies. The query joins the 'Rating' table with the 'Reviewer' table based on the reviewer's identifier, allowing us to filter the results based on the star rating provided.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT T2.title, avg(T1.stars) AS average_rating FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID ORDER BY average_rating DESC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the titles of movies along with their average ratings from the 'Rating' table. The results are grouped by movie identifier and ordered by the average rating in ascending order, with a limit on the number of results returned as specified by the placeholder.\",\n        \"virtual_table\": \"SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the titles and directors of movies that have received ratings higher than the average rating for movies directed by a specific director. The placeholder in the subquery represents the name of the director whose average rating is being calculated.\",\n        \"virtual_table\": \"SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the average star rating of movies released in the earliest year from the 'Movie' table. The placeholder in the WHERE clause is used to filter the movies based on their release year, which is determined by a subquery that finds the minimum year.\",\n        \"virtual_table\": \"SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)\"\n    }\n}\n",
        "c_high": "SELECT title, AVG(stars) AS average_rating \nFROM Rating AS R \nJOIN Movie AS M ON R.mID = M.mID \nGROUP BY M.mID \nORDER BY average_rating DESC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that have not been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT Movie.title, AVG(Rating.stars) AS average_rating \nFROM Movie \nJOIN Rating ON Movie.mID = Rating.mID \nGROUP BY Movie.mID \nORDER BY average_rating DESC \nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the titles of movies from the 'Movie' table that were released in the most recent year. The subquery retrieves the maximum year from the 'Movie' table, ensuring that only the latest movies are selected.\",\n        \"virtual_table\": \"SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)\"\n    }\n}\n",
        "t_2": "SELECT T2.title, avg(T1.stars) AS average_rating FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID ORDER BY average_rating DESC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the titles of movies along with their average ratings from the 'Rating' table. The results are grouped by movie identifier and ordered by the average rating in ascending order, with a limit on the number of results returned as specified by the placeholder.\",\n        \"virtual_table\": \"SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the titles and directors of movies that have received ratings higher than the average rating for movies directed by a specific director. The placeholder in the subquery represents the name of the director whose average rating is being calculated.\",\n        \"virtual_table\": \"SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the average star rating of movies released in the earliest year from the 'Movie' table. The placeholder in the WHERE clause is used to filter the movies based on their release year, which is determined by a subquery that finds the minimum year.\",\n        \"virtual_table\": \"SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)\"\n    }\n}\n",
        "t_3+": "SELECT T2.title, AVG(T1.stars) AS average_rating \nFROM Rating AS T1 \nJOIN Movie AS T2 ON T1.mID = T2.mID \nGROUP BY T2.title \nORDER BY average_rating DESC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that have not been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2499",
        "c_low": "SELECT M.title, AVG(R.stars) AS average_rating \nFROM Movie AS M \nJOIN Rating AS R ON M.mID = R.mID \nGROUP BY M.mID \nHAVING AVG(R.stars) = (\n    SELECT MIN(avg_rating) \n    FROM (\n        SELECT AVG(stars) AS avg_rating \n        FROM Rating \n        GROUP BY mID\n    ) AS avg_ratings\n);",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the titles of movies from the 'Movie' table that have received ratings within a specified range of stars. The placeholders in the WHERE clause represent the minimum and maximum star ratings.\",\n        \"virtual_table\": \"SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique directors of movies that have been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT T2.title, avg(T1.stars) AS average_rating \nFROM Rating AS T1 \nJOIN Movie AS T2 ON T1.mID = T2.mID \nGROUP BY T1.mID \nHAVING avg(T1.stars) = (SELECT min(avg_rating) \n                         FROM (SELECT avg(T1.stars) AS avg_rating \n                               FROM Rating AS T1 \n                               GROUP BY T1.mID))",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the titles of movies along with their average ratings from the 'Rating' table. The results are grouped by movie identifier and ordered by the average rating in ascending order, with a limit on the number of results returned as specified by the placeholder.\",\n        \"virtual_table\": \"SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the titles and directors of movies that have received ratings higher than the average rating for movies directed by a specific director. The placeholder in the subquery represents the name of the director whose average rating is being calculated.\",\n        \"virtual_table\": \"SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the average star rating of movies released in the earliest year from the 'Movie' table. The placeholder in the WHERE clause is used to filter the movies based on their release year, which is determined by a subquery that finds the minimum year.\",\n        \"virtual_table\": \"SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)\"\n    }\n}\n",
        "c_high": "SELECT title, AVG(stars) AS average_rating \nFROM Rating \nJOIN Movie ON Rating.mID = Movie.mID \nGROUP BY title \nHAVING AVG(stars) = (\n    SELECT MIN(avg_rating) \n    FROM (\n        SELECT AVG(stars) AS avg_rating \n        FROM Rating \n        GROUP BY mID\n    ) AS avg_ratings\n);",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that have not been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    }\n}\n",
        "t_1": "SELECT title, AVG(stars) AS average_rating\nFROM Movie\nJOIN Rating ON Movie.mID = Rating.mID\nGROUP BY Movie.mID\nHAVING AVG(stars) = (\n    SELECT MIN(avg_rating)\n    FROM (\n        SELECT AVG(stars) AS avg_rating\n        FROM Rating\n        GROUP BY mID\n    ) AS avg_ratings\n);",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T2.title, avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID HAVING avg(T1.stars) = (SELECT min(avg_rating) FROM (SELECT avg(T1.stars) as avg_rating FROM Rating AS T1 GROUP BY T1.mID))",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the titles of movies along with their average ratings from the 'Rating' table. The results are grouped by movie identifier and ordered by the average rating in ascending order, with a limit on the number of results returned as specified by the placeholder.\",\n        \"virtual_table\": \"SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the titles and directors of movies that have received ratings higher than the average rating for movies directed by a specific director. The placeholder in the subquery represents the name of the director whose average rating is being calculated.\",\n        \"virtual_table\": \"SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the average star rating of movies released in the earliest year from the 'Movie' table. The placeholder in the WHERE clause is used to filter the movies based on their release year, which is determined by a subquery that finds the minimum year.\",\n        \"virtual_table\": \"SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)\"\n    }\n}\n",
        "t_3+": "SELECT title, AVG(stars) AS average_rating \nFROM Rating \nJOIN Movie ON Rating.mID = Movie.mID \nGROUP BY Movie.mID \nHAVING AVG(stars) = (\n    SELECT MIN(avg_rating) \n    FROM (\n        SELECT AVG(stars) AS avg_rating \n        FROM Rating \n        GROUP BY mID\n    ) AS avg_ratings\n);",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that have not been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2500",
        "c_low": "SELECT title, year FROM Movie WHERE mID IN (SELECT mID FROM Rating ORDER BY stars DESC LIMIT 3)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of reviewers who have given a rating of more than a specified number of stars to movies. The query joins the 'Rating' table with the 'Reviewer' table based on the reviewer's identifier, allowing us to filter the results based on the star rating provided.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the titles of movies from the 'Movie' table that have received ratings within a specified range of stars. The placeholders in the WHERE clause represent the minimum and maximum star ratings.\",\n        \"virtual_table\": \"SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT T1.title, T2.year FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars IN (SELECT DISTINCT stars FROM Rating ORDER BY stars DESC LIMIT 3)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the directors and titles of movies from the 'Movie' table that have received a specific number of stars in their ratings. The placeholder in the WHERE clause represents the number of stars given in the rating.\",\n        \"virtual_table\": \"SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the maximum star rating for movies released in the most recent year. It joins the 'Rating' and 'Movie' tables to correlate the ratings with their respective movies, filtering for the year of release that is the latest available in the database.\",\n        \"virtual_table\": \"SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the average star rating of movies released in the earliest year from the 'Movie' table. The placeholder in the WHERE clause is used to filter the movies based on their release year, which is determined by a subquery that finds the minimum year.\",\n        \"virtual_table\": \"SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)\"\n    }\n}\n",
        "c_high": "SELECT title, year FROM Movie WHERE mID IN (SELECT mID FROM Rating ORDER BY stars DESC LIMIT 3)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that have not been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT title, year FROM Movie WHERE mID IN (SELECT mID FROM Rating ORDER BY stars DESC LIMIT 3)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the titles of movies from the 'Movie' table that were released in the most recent year. The subquery retrieves the maximum year from the 'Movie' table, ensuring that only the latest movies are selected.\",\n        \"virtual_table\": \"SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the titles of movies from the 'Movie' table that were released after the most recent movie directed by a specific director. The placeholder in the WHERE clause represents the director's name.\",\n        \"virtual_table\": \"SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies reviewers who have submitted ratings for movies but did not give a specific number of stars. The placeholder in the EXCEPT clause represents the number of stars that is being excluded from the results.\",\n        \"virtual_table\": \"SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT title, year FROM Movie WHERE mID IN (SELECT mID FROM Rating ORDER BY stars DESC LIMIT 3)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the directors and titles of movies from the 'Movie' table that have received a specific number of stars in their ratings. The placeholder in the WHERE clause represents the number of stars given in the rating.\",\n        \"virtual_table\": \"SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the maximum star rating for movies released in the most recent year. It joins the 'Rating' and 'Movie' tables to correlate the ratings with their respective movies, filtering for the year of release that is the latest available in the database.\",\n        \"virtual_table\": \"SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of reviewers who have given a rating of more than a specified number of stars to movies. The query joins the 'Rating' table with the 'Reviewer' table based on the reviewer's identifier, allowing us to filter the results based on the star rating provided.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT title, year FROM Movie WHERE mID IN (SELECT mID FROM Rating ORDER BY stars DESC LIMIT 3)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique directors of movies that have been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2502",
        "c_low": "SELECT M.director, M.title, R.highest_rating\nFROM Movie AS M\nJOIN (\n    SELECT mID, MAX(stars) AS highest_rating\n    FROM Rating\n    GROUP BY mID\n) AS R ON M.mID = R.mID\nWHERE M.director IS NOT NULL;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique directors of movies that have been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the titles of movies from the 'Movie' table that have received ratings within a specified range of stars. The placeholders in the WHERE clause represent the minimum and maximum star ratings.\",\n        \"virtual_table\": \"SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT M.director, M.title, R.stars \nFROM Movie AS M \nJOIN Rating AS R ON M.mID = R.mID \nWHERE M.director IS NOT NULL \nAND (M.mID, R.stars) IN (\n    SELECT M2.mID, MAX(R2.stars) \n    FROM Movie AS M2 \n    JOIN Rating AS R2 ON M2.mID = R2.mID \n    GROUP BY M2.director\n)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the titles and directors of movies that have received ratings higher than the average rating for movies directed by a specific director. The placeholder in the subquery represents the name of the director whose average rating is being calculated.\",\n        \"virtual_table\": \"SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the directors and titles of movies from the 'Movie' table that have received a specific number of stars in their ratings. The placeholder in the WHERE clause represents the number of stars given in the rating.\",\n        \"virtual_table\": \"SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the titles of movies from the 'Movie' table that were released after the most recent movie directed by a specific director. The placeholder in the WHERE clause represents the director's name.\",\n        \"virtual_table\": \"SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "c_high": "SELECT M.director, M.title, R.stars \nFROM Movie AS M \nJOIN Rating AS R ON M.mID = R.mID \nWHERE M.director IS NOT NULL \nAND (M.director, R.stars) IN (\n    SELECT M2.director, MAX(R2.stars) \n    FROM Movie AS M2 \n    JOIN Rating AS R2 ON M2.mID = R2.mID \n    WHERE M2.director IS NOT NULL \n    GROUP BY M2.director\n) \nORDER BY M.director;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles and directors of movies from the 'Movie' table that share the same director but are different titles. The results are ordered by the director's name and then by the movie title.\",\n        \"virtual_table\": \"SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of directors from the 'Movie' table who have directed a specific number of movies, excluding a particular director. The placeholders in the WHERE clause represent the name of the director to exclude and the number of movies directed by the remaining directors.\",\n        \"virtual_table\": \"SELECT director FROM Movie WHERE director != [PLACEHOLDER-TYPE:STRING] GROUP BY director HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT M.director, M.title, R.stars \nFROM Movie AS M \nJOIN Rating AS R ON M.mID = R.mID \nWHERE M.director IS NOT NULL \nAND (M.director, R.stars) IN (\n    SELECT M2.director, MAX(R2.stars) \n    FROM Movie AS M2 \n    JOIN Rating AS R2 ON M2.mID = R2.mID \n    WHERE M2.director IS NOT NULL \n    GROUP BY M2.director\n) \nORDER BY M.director;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles and directors of movies from the 'Movie' table that share the same director but are different titles. The results are ordered by the director's name and then by the movie title.\",\n        \"virtual_table\": \"SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the titles of movies from the 'Movie' table that were released after the most recent movie directed by a specific director. The placeholder in the WHERE clause represents the director's name.\",\n        \"virtual_table\": \"SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of directors from the 'Movie' table who have directed a specific number of movies, excluding a particular director. The placeholders in the WHERE clause represent the name of the director to exclude and the number of movies directed by the remaining directors.\",\n        \"virtual_table\": \"SELECT director FROM Movie WHERE director != [PLACEHOLDER-TYPE:STRING] GROUP BY director HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT M.director, M.title, R.max_rating\nFROM Movie AS M\nJOIN (SELECT mID, MAX(stars) AS max_rating\n      FROM Rating\n      GROUP BY mID) AS R ON M.mID = R.mID\nWHERE M.director IS NOT NULL;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the titles and directors of movies that have received ratings higher than the average rating for movies directed by a specific director. The placeholder in the subquery represents the name of the director whose average rating is being calculated.\",\n        \"virtual_table\": \"SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the directors and titles of movies from the 'Movie' table that have received a specific number of stars in their ratings. The placeholder in the WHERE clause represents the number of stars given in the rating.\",\n        \"virtual_table\": \"SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the titles of movies along with their average ratings from the 'Rating' table. The results are grouped by movie identifier and ordered by the average rating in ascending order, with a limit on the number of results returned as specified by the placeholder.\",\n        \"virtual_table\": \"SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT M.director, M.title, R.stars \nFROM Movie AS M \nJOIN Rating AS R ON M.mID = R.mID \nWHERE M.director IS NOT NULL \nAND (M.director, R.stars) IN (\n    SELECT M2.director, MAX(R2.stars) \n    FROM Movie AS M2 \n    JOIN Rating AS R2 ON M2.mID = R2.mID \n    WHERE M2.director IS NOT NULL \n    GROUP BY M2.director\n) \nORDER BY M.director;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique directors of movies that have been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2503",
        "c_low": "SELECT M.title, M.director, R.stars \nFROM Movie AS M \nJOIN Rating AS R ON M.mID = R.mID \nJOIN Reviewer AS Rev ON R.rID = Rev.rID \nORDER BY M.director, M.title;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique directors of movies that have been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of reviewers who have given a rating of more than a specified number of stars to movies. The query joins the 'Rating' table with the 'Reviewer' table based on the reviewer's identifier, allowing us to filter the results based on the star rating provided.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT M.title, R.stars, M.director \nFROM Movie AS M \nJOIN Rating AS R ON M.mID = R.mID \nJOIN Reviewer AS Rev ON R.rID = Rev.rID \nORDER BY M.director, M.title;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the titles and directors of movies that have received ratings higher than the average rating for movies directed by a specific director. The placeholder in the subquery represents the name of the director whose average rating is being calculated.\",\n        \"virtual_table\": \"SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the directors and titles of movies from the 'Movie' table that have received a specific number of stars in their ratings. The placeholder in the WHERE clause represents the number of stars given in the rating.\",\n        \"virtual_table\": \"SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of distinct movie titles from the 'Movie' table that have been rated by a specific reviewer or were released after a certain year. The placeholders in the WHERE clause represent the reviewer's name and the year of release, respectively.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] OR T2.year  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT T3.name, T2.title, T1.stars \nFROM Rating AS T1 \nJOIN Movie AS T2 ON T1.mID = T2.mID \nJOIN Reviewer AS T3 ON T1.rID = T3.rID \nWHERE T2.director = T3.name",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the titles and directors of movies from the 'Movie' table that share the same director but are different titles. The results are ordered by the director's name and then by the movie title.\",\n        \"virtual_table\": \"SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that have not been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT M.title, R.stars, M.director \nFROM Movie AS M \nJOIN Rating AS R ON M.mID = R.mID \nJOIN Reviewer AS Rev ON R.rID = Rev.rID \nORDER BY M.director, M.title;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles and directors of movies from the 'Movie' table that share the same director but are different titles. The results are ordered by the director's name and then by the movie title.\",\n        \"virtual_table\": \"SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that were directed by a specific director or released before a certain year. The placeholders in the WHERE clause represent the director's name and the year of release.\",\n        \"virtual_table\": \"SELECT title FROM Movie WHERE director  =  [PLACEHOLDER-TYPE:STRING] OR YEAR   <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the titles of movies from the 'Movie' table that were released after the most recent movie directed by a specific director. The placeholder in the WHERE clause represents the director's name.\",\n        \"virtual_table\": \"SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "t_2": "SELECT M.director, M.title, R.stars \nFROM Movie AS M \nJOIN Rating AS R ON M.mID = R.mID \nJOIN Reviewer AS Rev ON R.rID = Rev.rID \nORDER BY M.director, M.title;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the titles and directors of movies that have received ratings higher than the average rating for movies directed by a specific director. The placeholder in the subquery represents the name of the director whose average rating is being calculated.\",\n        \"virtual_table\": \"SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the directors and titles of movies from the 'Movie' table that have received a specific number of stars in their ratings. The placeholder in the WHERE clause represents the number of stars given in the rating.\",\n        \"virtual_table\": \"SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the titles of movies along with their average ratings from the 'Rating' table. The results are grouped by movie identifier and ordered by the average rating in ascending order, with a limit on the number of results returned as specified by the placeholder.\",\n        \"virtual_table\": \"SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT T2.director, T2.title, T1.stars \nFROM Rating AS T1 \nJOIN Movie AS T2 ON T1.mID = T2.mID \nJOIN Reviewer AS T3 ON T1.rID = T3.rID \nWHERE T2.director IS NOT NULL;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique directors of movies that have been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2504",
        "c_low": "SELECT T2.title, MIN(T1.stars) AS least_rating FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.rID",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the titles of movies from the 'Movie' table that have received ratings within a specified range of stars. The placeholders in the WHERE clause represent the minimum and maximum star ratings.\",\n        \"virtual_table\": \"SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of reviewers who have given a rating of more than a specified number of stars to movies. The query joins the 'Rating' table with the 'Reviewer' table based on the reviewer's identifier, allowing us to filter the results based on the star rating provided.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT M.title, R.stars \nFROM Rating R \nJOIN Movie M ON R.mID = M.mID \nWHERE (R.rID, R.stars) IN (\n    SELECT rID, MIN(stars) \n    FROM Rating \n    GROUP BY rID\n)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies reviewers who have submitted ratings for movies but did not give a specific number of stars. The placeholder in the EXCEPT clause represents the number of stars that is being excluded from the results.\",\n        \"virtual_table\": \"SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average star rating of movies released in the earliest year from the 'Movie' table. The placeholder in the WHERE clause is used to filter the movies based on their release year, which is determined by a subquery that finds the minimum year.\",\n        \"virtual_table\": \"SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the titles of movies along with their average ratings from the 'Rating' table. The results are grouped by movie identifier and ordered by the average rating in ascending order, with a limit on the number of results returned as specified by the placeholder.\",\n        \"virtual_table\": \"SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT T3.name, T2.title, MIN(T1.stars) AS least_stars\nFROM Rating AS T1\nJOIN Movie AS T2 ON T1.mID = T2.mID\nJOIN Reviewer AS T3 ON T1.rID = T3.rID\nGROUP BY T3.name, T2.title;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that have not been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT Movie.title, Rating.stars \nFROM Rating \nJOIN Movie ON Rating.mID = Movie.mID \nWHERE (Rating.rID, Rating.stars) IN (\n    SELECT Rating.rID, MIN(Rating.stars) \n    FROM Rating \n    GROUP BY Rating.rID\n);",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies reviewers who have submitted ratings for movies but did not give a specific number of stars. The placeholder in the EXCEPT clause represents the number of stars that is being excluded from the results.\",\n        \"virtual_table\": \"SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of ratings from the 'Rating' table where the number of stars given exceeds a specified threshold. The placeholder in the WHERE clause represents the minimum number of stars that a rating must have to be included in the count.\",\n        \"virtual_table\": \"SELECT count(*) FROM Rating WHERE stars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.title, MIN(T1.stars) AS least_rating FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.rID",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average star rating of movies released in the earliest year from the 'Movie' table. The placeholder in the WHERE clause is used to filter the movies based on their release year, which is determined by a subquery that finds the minimum year.\",\n        \"virtual_table\": \"SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the titles of movies from the 'Movie' table that have received ratings within a specified range of stars. The placeholders in the WHERE clause represent the minimum and maximum star ratings.\",\n        \"virtual_table\": \"SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of reviewers who have given a rating of more than a specified number of stars to movies. The query joins the 'Rating' table with the 'Reviewer' table based on the reviewer's identifier, allowing us to filter the results based on the star rating provided.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT T3.name, T2.title, MIN(T1.stars) AS least_stars\nFROM Rating AS T1\nJOIN Movie AS T2 ON T1.mID = T2.mID\nJOIN Reviewer AS T3 ON T1.rID = T3.rID\nGROUP BY T3.name, T2.title;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that have not been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2505",
        "c_low": "SELECT R.rID, M.title, R.stars \nFROM Rating R \nJOIN Movie M ON R.mID = M.mID \nWHERE (R.rID, R.stars) IN (\n    SELECT R2.rID, MIN(R2.stars) \n    FROM Rating R2 \n    GROUP BY R2.rID\n)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique directors of movies that have been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of reviewers who have given a rating of more than a specified number of stars to movies. The query joins the 'Rating' table with the 'Reviewer' table based on the reviewer's identifier, allowing us to filter the results based on the star rating provided.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT T3.rID, T2.title, MIN(T1.stars) AS smallest_rating \nFROM Rating AS T1 \nJOIN Movie AS T2 ON T1.mID = T2.mID \nJOIN Reviewer AS T3 ON T1.rID = T3.rID \nGROUP BY T3.rID, T2.title;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the titles of movies along with their average ratings from the 'Rating' table. The results are grouped by movie identifier and ordered by the average rating in ascending order, with a limit on the number of results returned as specified by the placeholder.\",\n        \"virtual_table\": \"SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of distinct movie titles from the 'Movie' table that have been rated by a specific reviewer or were released after a certain year. The placeholders in the WHERE clause represent the reviewer's name and the year of release, respectively.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] OR T2.year  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the directors and titles of movies from the 'Movie' table that have received a specific number of stars in their ratings. The placeholder in the WHERE clause represents the number of stars given in the rating.\",\n        \"virtual_table\": \"SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT T3.rID, T2.title, MIN(T1.stars) AS smallest_rating \nFROM Rating AS T1 \nJOIN Movie AS T2 ON T1.mID = T2.mID \nJOIN Reviewer AS T3 ON T1.rID = T3.rID \nGROUP BY T3.rID, T2.title;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that have not been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of reviewers from the 'Reviewer' table who have submitted a number of ratings equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of ratings a reviewer must have submitted.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT r.rID, m.title, r2.stars \nFROM Reviewer r \nJOIN Rating r2 ON r.rID = r2.rID \nJOIN Movie m ON r2.mID = m.mID \nWHERE (r2.rID, r2.stars) IN (\n    SELECT rID, MIN(stars) \n    FROM Rating \n    GROUP BY rID\n)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies reviewers who have submitted ratings for movies but did not give a specific number of stars. The placeholder in the EXCEPT clause represents the number of stars that is being excluded from the results.\",\n        \"virtual_table\": \"SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT R.rID, M.title, R.stars \nFROM Rating R \nJOIN Movie M ON R.mID = M.mID \nWHERE R.stars = (SELECT MIN(stars) FROM Rating WHERE rID = R.rID)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of reviewers who have given a rating of more than a specified number of stars to movies. The query joins the 'Rating' table with the 'Reviewer' table based on the reviewer's identifier, allowing us to filter the results based on the star rating provided.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the titles of movies along with their average ratings from the 'Rating' table. The results are grouped by movie identifier and ordered by the average rating in ascending order, with a limit on the number of results returned as specified by the placeholder.\",\n        \"virtual_table\": \"SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the titles of movies from the 'Movie' table that have received ratings within a specified range of stars. The placeholders in the WHERE clause represent the minimum and maximum star ratings.\",\n        \"virtual_table\": \"SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT T3.rID, T2.title, T1.stars \nFROM Rating AS T1 \nJOIN Movie AS T2 ON T1.mID = T2.mID \nJOIN Reviewer AS T3 ON T1.rID = T3.rID \nWHERE (T1.stars) = (SELECT MIN(stars) FROM Rating WHERE rID = T3.rID)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that have not been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2506",
        "c_low": "SELECT M.title, MIN(R.stars) AS lowest_rating\nFROM Movie AS M\nJOIN Rating AS R ON M.mID = R.mID\nGROUP BY M.director;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique directors of movies that have been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the titles of movies from the 'Movie' table that have received ratings within a specified range of stars. The placeholders in the WHERE clause represent the minimum and maximum star ratings.\",\n        \"virtual_table\": \"SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT M.title, R.stars FROM Movie AS M JOIN Rating AS R ON M.mID = R.mID WHERE R.stars = (SELECT MIN(R2.stars) FROM Rating AS R2 JOIN Movie AS M2 ON R2.mID = M2.mID WHERE M2.director = M.director)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the titles and directors of movies that have received ratings higher than the average rating for movies directed by a specific director. The placeholder in the subquery represents the name of the director whose average rating is being calculated.\",\n        \"virtual_table\": \"SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the directors and titles of movies from the 'Movie' table that have received a specific number of stars in their ratings. The placeholder in the WHERE clause represents the number of stars given in the rating.\",\n        \"virtual_table\": \"SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that were directed by a specific director or released before a certain year. The placeholders in the WHERE clause represent the director's name and the year of release.\",\n        \"virtual_table\": \"SELECT title FROM Movie WHERE director  =  [PLACEHOLDER-TYPE:STRING] OR YEAR   <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT T1.title, MIN(T2.stars) AS lowest_rating\nFROM Movie AS T1\nJOIN Rating AS T2 ON T1.mID = T2.mID\nWHERE T1.director IN (\n    SELECT director\n    FROM Movie\n    GROUP BY director\n)\nGROUP BY T1.director;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles and directors of movies from the 'Movie' table that share the same director but are different titles. The results are ordered by the director's name and then by the movie title.\",\n        \"virtual_table\": \"SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of directors from the 'Movie' table who have directed a specific number of movies, excluding a particular director. The placeholders in the WHERE clause represent the name of the director to exclude and the number of movies directed by the remaining directors.\",\n        \"virtual_table\": \"SELECT director FROM Movie WHERE director != [PLACEHOLDER-TYPE:STRING] GROUP BY director HAVING count(*)  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT M.title, R.stars FROM Movie AS M JOIN Rating AS R ON M.mID = R.mID WHERE R.stars = (SELECT MIN(R2.stars) FROM Rating AS R2 JOIN Movie AS M2 ON R2.mID = M2.mID WHERE M2.director = M.director) AND M.mID IN (SELECT DISTINCT mID FROM Rating) ORDER BY M.director, M.title;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles and directors of movies from the 'Movie' table that share the same director but are different titles. The results are ordered by the director's name and then by the movie title.\",\n        \"virtual_table\": \"SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that were directed by a specific director or released before a certain year. The placeholders in the WHERE clause represent the director's name and the year of release.\",\n        \"virtual_table\": \"SELECT title FROM Movie WHERE director  =  [PLACEHOLDER-TYPE:STRING] OR YEAR   <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the titles of movies from the 'Movie' table that were released after the most recent movie directed by a specific director. The placeholder in the WHERE clause represents the director's name.\",\n        \"virtual_table\": \"SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "t_2": "SELECT T2.title, avg(T1.stars) AS average_rating \nFROM Rating AS T1 \nJOIN Movie AS T2 ON T1.mID = T2.mID \nWHERE T2.director IN (\n    SELECT director \n    FROM Movie \n    GROUP BY director \n) \nGROUP BY T2.director, T2.mID \nHAVING avg(T1.stars) = (\n    SELECT MIN(avg_rating) \n    FROM (\n        SELECT avg(T1.stars) AS avg_rating \n        FROM Rating AS T1 \n        JOIN Movie AS T2 ON T1.mID = T2.mID \n        WHERE T2.director = T2.director \n        GROUP BY T1.mID\n    ) AS subquery\n)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the titles and directors of movies that have received ratings higher than the average rating for movies directed by a specific director. The placeholder in the subquery represents the name of the director whose average rating is being calculated.\",\n        \"virtual_table\": \"SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the directors and titles of movies from the 'Movie' table that have received a specific number of stars in their ratings. The placeholder in the WHERE clause represents the number of stars given in the rating.\",\n        \"virtual_table\": \"SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the titles of movies along with their average ratings from the 'Rating' table. The results are grouped by movie identifier and ordered by the average rating in ascending order, with a limit on the number of results returned as specified by the placeholder.\",\n        \"virtual_table\": \"SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT title, MIN(stars) AS lowest_rating \nFROM Rating AS R \nJOIN Movie AS M ON R.mID = M.mID \nWHERE M.director IN (SELECT DISTINCT T2.director \n                     FROM Rating AS T1 \n                     JOIN Movie AS T2 ON T1.mID = T2.mID \n                     JOIN Reviewer AS T3 ON T1.rID = T3.rID) \nGROUP BY M.director;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique directors of movies that have been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2507",
        "c_low": "SELECT M.director, M.title, R.stars \nFROM Movie AS M \nJOIN Rating AS R ON M.mID = R.mID \nWHERE (M.director, R.stars) IN (\n    SELECT M2.director, MIN(R2.stars) \n    FROM Movie AS M2 \n    JOIN Rating AS R2 ON M2.mID = R2.mID \n    GROUP BY M2.director\n) \nORDER BY M.director;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique directors of movies that have been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT M.title, R.stars FROM Movie AS M JOIN Rating AS R ON M.mID = R.mID WHERE (M.director, R.stars) IN (SELECT M2.director, MIN(R2.stars) FROM Movie AS M2 JOIN Rating AS R2 ON M2.mID = R2.mID GROUP BY M2.director)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the titles and directors of movies that have received ratings higher than the average rating for movies directed by a specific director. The placeholder in the subquery represents the name of the director whose average rating is being calculated.\",\n        \"virtual_table\": \"SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the directors and titles of movies from the 'Movie' table that have received a specific number of stars in their ratings. The placeholder in the WHERE clause represents the number of stars given in the rating.\",\n        \"virtual_table\": \"SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the titles of movies from the 'Movie' table that were released after the most recent movie directed by a specific director. The placeholder in the WHERE clause represents the director's name.\",\n        \"virtual_table\": \"SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "c_high": "SELECT M.director, M.title, R.stars \nFROM Movie AS M \nJOIN Rating AS R ON M.mID = R.mID \nWHERE (M.director, R.stars) IN (\n    SELECT M2.director, MIN(R2.stars) \n    FROM Movie AS M2 \n    JOIN Rating AS R2 ON M2.mID = R2.mID \n    GROUP BY M2.director\n) \nORDER BY M.director;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that have not been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles and directors of movies from the 'Movie' table that share the same director but are different titles. The results are ordered by the director's name and then by the movie title.\",\n        \"virtual_table\": \"SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title\"\n    }\n}\n",
        "t_1": "SELECT M.title, R.stars FROM Movie M JOIN Rating R ON M.mID = R.mID WHERE R.stars = (SELECT MIN(stars) FROM Rating WHERE mID = M.mID) AND M.director IN (SELECT DISTINCT director FROM Movie) ORDER BY M.director;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the titles of movies from the 'Movie' table that were released after the most recent movie directed by a specific director. The placeholder in the WHERE clause represents the director's name.\",\n        \"virtual_table\": \"SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the titles and directors of movies from the 'Movie' table that share the same director but are different titles. The results are ordered by the director's name and then by the movie title.\",\n        \"virtual_table\": \"SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that were directed by a specific director or released before a certain year. The placeholders in the WHERE clause represent the director's name and the year of release.\",\n        \"virtual_table\": \"SELECT title FROM Movie WHERE director  =  [PLACEHOLDER-TYPE:STRING] OR YEAR   <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT M.title, R.avg_stars, M.director \nFROM Movie AS M \nJOIN (\n    SELECT T2.mID, avg(T1.stars) AS avg_stars \n    FROM Rating AS T1 \n    JOIN Movie AS T2 ON T1.mID = T2.mID \n    GROUP BY T2.mID \n) AS R ON M.mID = R.mID \nWHERE R.avg_stars = (\n    SELECT MIN(avg_stars) \n    FROM (\n        SELECT T2.director, avg(T1.stars) AS avg_stars \n        FROM Rating AS T1 \n        JOIN Movie AS T2 ON T1.mID = T2.mID \n        GROUP BY T2.director, T2.mID\n    ) AS D \n    WHERE D.director = M.director\n) \nORDER BY M.director;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the titles and directors of movies that have received ratings higher than the average rating for movies directed by a specific director. The placeholder in the subquery represents the name of the director whose average rating is being calculated.\",\n        \"virtual_table\": \"SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the directors and titles of movies from the 'Movie' table that have received a specific number of stars in their ratings. The placeholder in the WHERE clause represents the number of stars given in the rating.\",\n        \"virtual_table\": \"SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the titles of movies along with their average ratings from the 'Rating' table. The results are grouped by movie identifier and ordered by the average rating in ascending order, with a limit on the number of results returned as specified by the placeholder.\",\n        \"virtual_table\": \"SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT director, title, stars FROM (SELECT T2.director, T2.title, T1.stars, ROW_NUMBER() OVER (PARTITION BY T2.director ORDER BY T1.stars ASC) as rn FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID) WHERE rn = 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique directors of movies that have been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that have not been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2508",
        "c_low": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T2.title ORDER BY COUNT(T1.mID) DESC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the titles of movies from the 'Movie' table that were released in the most recent year. The subquery retrieves the maximum year from the 'Movie' table, ensuring that only the latest movies are selected.\",\n        \"virtual_table\": \"SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the titles of movies from the 'Movie' table that have received ratings within a specified range of stars. The placeholders in the WHERE clause represent the minimum and maximum star ratings.\",\n        \"virtual_table\": \"SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT T2.title, COUNT(T1.mID) AS rating_count FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID ORDER BY rating_count DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the titles of movies along with their average ratings from the 'Rating' table. The results are grouped by movie identifier and ordered by the average rating in ascending order, with a limit on the number of results returned as specified by the placeholder.\",\n        \"virtual_table\": \"SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the maximum star rating for movies released in the most recent year. It joins the 'Rating' and 'Movie' tables to correlate the ratings with their respective movies, filtering for the year of release that is the latest available in the database.\",\n        \"virtual_table\": \"SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the directors and titles of movies from the 'Movie' table that have received a specific number of stars in their ratings. The placeholder in the WHERE clause represents the number of stars given in the rating.\",\n        \"virtual_table\": \"SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT title FROM Movie WHERE mID IN (SELECT mID FROM Rating GROUP BY mID ORDER BY COUNT(*) DESC LIMIT 1)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that have not been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles and directors of movies from the 'Movie' table that share the same director but are different titles. The results are ordered by the director's name and then by the movie title.\",\n        \"virtual_table\": \"SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title\"\n    }\n}\n",
        "t_1": "SELECT Movie.title FROM Movie JOIN Rating ON Movie.mID = Rating.mID GROUP BY Movie.title ORDER BY COUNT(Rating.mID) DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the titles of movies from the 'Movie' table that were released in the most recent year. The subquery retrieves the maximum year from the 'Movie' table, ensuring that only the latest movies are selected.\",\n        \"virtual_table\": \"SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the titles of movies from the 'Movie' table that were released after the most recent movie directed by a specific director. The placeholder in the WHERE clause represents the director's name.\",\n        \"virtual_table\": \"SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles and directors of movies from the 'Movie' table that share the same director but are different titles. The results are ordered by the director's name and then by the movie title.\",\n        \"virtual_table\": \"SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title\"\n    }\n}\n",
        "t_2": "SELECT T2.title, COUNT(T1.mID) AS rating_count FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID ORDER BY rating_count DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the titles of movies along with their average ratings from the 'Rating' table. The results are grouped by movie identifier and ordered by the average rating in ascending order, with a limit on the number of results returned as specified by the placeholder.\",\n        \"virtual_table\": \"SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the maximum star rating for movies released in the most recent year. It joins the 'Rating' and 'Movie' tables to correlate the ratings with their respective movies, filtering for the year of release that is the latest available in the database.\",\n        \"virtual_table\": \"SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the directors and titles of movies from the 'Movie' table that have received a specific number of stars in their ratings. The placeholder in the WHERE clause represents the number of stars given in the rating.\",\n        \"virtual_table\": \"SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T2.title ORDER BY COUNT(T1.mID) DESC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of distinct movie titles from the 'Movie' table that have been rated by a specific reviewer or were released after a certain year. The placeholders in the WHERE clause represent the reviewer's name and the year of release, respectively.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] OR T2.year  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that have not been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2509",
        "c_low": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T2.title ORDER BY COUNT(T1.rID) DESC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique directors of movies that have been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the titles of movies from the 'Movie' table that were released in the most recent year. The subquery retrieves the maximum year from the 'Movie' table, ensuring that only the latest movies are selected.\",\n        \"virtual_table\": \"SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)\"\n    }\n}\n",
        "c_mid": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID ORDER BY COUNT(T1.rID) DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of distinct movie titles from the 'Movie' table that have been rated by a specific reviewer or were released after a certain year. The placeholders in the WHERE clause represent the reviewer's name and the year of release, respectively.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] OR T2.year  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the maximum star rating for movies released in the most recent year. It joins the 'Rating' and 'Movie' tables to correlate the ratings with their respective movies, filtering for the year of release that is the latest available in the database.\",\n        \"virtual_table\": \"SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the titles of movies along with their average ratings from the 'Rating' table. The results are grouped by movie identifier and ordered by the average rating in ascending order, with a limit on the number of results returned as specified by the placeholder.\",\n        \"virtual_table\": \"SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT title FROM Movie WHERE mID IN (SELECT mID FROM Rating GROUP BY mID ORDER BY COUNT(rID) DESC LIMIT 1)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that have not been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles and directors of movies from the 'Movie' table that share the same director but are different titles. The results are ordered by the director's name and then by the movie title.\",\n        \"virtual_table\": \"SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title\"\n    }\n}\n",
        "t_1": "SELECT title FROM Movie WHERE mID = (SELECT mID FROM Rating GROUP BY mID ORDER BY COUNT(*) DESC LIMIT 1)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the titles of movies from the 'Movie' table that were released in the most recent year. The subquery retrieves the maximum year from the 'Movie' table, ensuring that only the latest movies are selected.\",\n        \"virtual_table\": \"SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the titles of movies from the 'Movie' table that were released after the most recent movie directed by a specific director. The placeholder in the WHERE clause represents the director's name.\",\n        \"virtual_table\": \"SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles and directors of movies from the 'Movie' table that share the same director but are different titles. The results are ordered by the director's name and then by the movie title.\",\n        \"virtual_table\": \"SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title\"\n    }\n}\n",
        "t_2": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID ORDER BY COUNT(T1.rID) DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the maximum star rating for movies released in the most recent year. It joins the 'Rating' and 'Movie' tables to correlate the ratings with their respective movies, filtering for the year of release that is the latest available in the database.\",\n        \"virtual_table\": \"SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of reviewers who have given a rating of more than a specified number of stars to movies. The query joins the 'Rating' table with the 'Reviewer' table based on the reviewer's identifier, allowing us to filter the results based on the star rating provided.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the titles of movies along with their average ratings from the 'Rating' table. The results are grouped by movie identifier and ordered by the average rating in ascending order, with a limit on the number of results returned as specified by the placeholder.\",\n        \"virtual_table\": \"SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T2.title ORDER BY COUNT(T1.rID) DESC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique directors of movies that have been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2511",
        "c_low": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars BETWEEN 3 AND 5",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the titles of movies from the 'Movie' table that have received ratings within a specified range of stars. The placeholders in the WHERE clause represent the minimum and maximum star ratings.\",\n        \"virtual_table\": \"SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of reviewers who have given a rating of more than a specified number of stars to movies. The query joins the 'Rating' table with the 'Reviewer' table based on the reviewer's identifier, allowing us to filter the results based on the star rating provided.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars BETWEEN '3' AND '5'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the directors and titles of movies from the 'Movie' table that have received a specific number of stars in their ratings. The placeholder in the WHERE clause represents the number of stars given in the rating.\",\n        \"virtual_table\": \"SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the titles of movies along with their average ratings from the 'Rating' table. The results are grouped by movie identifier and ordered by the average rating in ascending order, with a limit on the number of results returned as specified by the placeholder.\",\n        \"virtual_table\": \"SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of distinct movie titles from the 'Movie' table that have been rated by a specific reviewer or were released after a certain year. The placeholders in the WHERE clause represent the reviewer's name and the year of release, respectively.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] OR T2.year  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT T2.title \nFROM Rating AS T1 \nJOIN Movie AS T2 ON T1.mID = T2.mID \nWHERE T1.stars BETWEEN '3' AND '5'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that have not been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles and directors of movies from the 'Movie' table that share the same director but are different titles. The results are ordered by the director's name and then by the movie title.\",\n        \"virtual_table\": \"SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title\"\n    }\n}\n",
        "t_1": "SELECT Movie.title FROM Movie JOIN Rating ON Movie.mID = Rating.mID WHERE Rating.stars BETWEEN '3' AND '5';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies reviewers who have submitted ratings for movies but did not give a specific number of stars. The placeholder in the EXCEPT clause represents the number of stars that is being excluded from the results.\",\n        \"virtual_table\": \"SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the titles of movies from the 'Movie' table that were released after the most recent movie directed by a specific director. The placeholder in the WHERE clause represents the director's name.\",\n        \"virtual_table\": \"SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles and directors of movies from the 'Movie' table that share the same director but are different titles. The results are ordered by the director's name and then by the movie title.\",\n        \"virtual_table\": \"SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title\"\n    }\n}\n",
        "t_2": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the directors and titles of movies from the 'Movie' table that have received a specific number of stars in their ratings. The placeholder in the WHERE clause represents the number of stars given in the rating.\",\n        \"virtual_table\": \"SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the titles of movies from the 'Movie' table that have received ratings within a specified range of stars. The placeholders in the WHERE clause represent the minimum and maximum star ratings.\",\n        \"virtual_table\": \"SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of reviewers who have given a rating of more than a specified number of stars to movies. The query joins the 'Rating' table with the 'Reviewer' table based on the reviewer's identifier, allowing us to filter the results based on the star rating provided.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars BETWEEN '3' AND '5'",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that have not been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2514",
        "c_low": "SELECT M.title, AVG(R.stars) AS average_rating\nFROM Movie AS M\nLEFT JOIN Rating AS R ON M.mID = R.mID\nWHERE M.mID NOT IN (\n    SELECT R1.mID\n    FROM Rating AS R1\n    JOIN Reviewer AS Rev ON R1.rID = Rev.rID\n    WHERE Rev.name = 'Brittany Harris'\n)\nGROUP BY M.title;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of reviewers who have given a rating of more than a specified number of stars to movies. The query joins the 'Rating' table with the 'Reviewer' table based on the reviewer's identifier, allowing us to filter the results based on the star rating provided.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the titles of movies from the 'Movie' table that have received ratings within a specified range of stars. The placeholders in the WHERE clause represent the minimum and maximum star ratings.\",\n        \"virtual_table\": \"SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT T2.title, AVG(T1.stars) AS average_rating \nFROM Rating AS T1 \nJOIN Movie AS T2 ON T1.mID = T2.mID \nWHERE T1.rID NOT IN (SELECT rID FROM Reviewer WHERE name = 'Brittany Harris') \nGROUP BY T2.title;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies reviewers who have submitted ratings for movies but did not give a specific number of stars. The placeholder in the EXCEPT clause represents the number of stars that is being excluded from the results.\",\n        \"virtual_table\": \"SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average star ratings given by each reviewer from the 'Rating' table. The placeholder in the SELECT statement represents the reviewer's name, and the average stars are calculated for each reviewer based on their ratings.\",\n        \"virtual_table\": \"SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the average star rating of movies released in the earliest year from the 'Movie' table. The placeholder in the WHERE clause is used to filter the movies based on their release year, which is determined by a subquery that finds the minimum year.\",\n        \"virtual_table\": \"SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)\"\n    }\n}\n",
        "c_high": "SELECT AVG(stars) AS average_rating, Movie.title \nFROM Movie \nJOIN Rating ON Movie.mID = Rating.mID \nWHERE Movie.title NOT IN (SELECT DISTINCT T2.title \n                          FROM Rating AS T1 \n                          JOIN Movie AS T2 ON T1.mID = T2.mID \n                          JOIN Reviewer AS T3 ON T1.rID = T3.rID \n                          WHERE T3.name = 'Brittany Harris') \nGROUP BY Movie.title;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that have not been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    }\n}\n",
        "t_1": "SELECT Movie.title, AVG(CAST(Rating.stars AS REAL)) AS average_rating\nFROM Movie\nJOIN Rating ON Movie.mID = Rating.mID\nWHERE Rating.rID NOT IN (SELECT rID FROM Reviewer WHERE name = 'Brittany Harris')\nGROUP BY Movie.title;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies reviewers who have submitted ratings for movies but did not give a specific number of stars. The placeholder in the EXCEPT clause represents the number of stars that is being excluded from the results.\",\n        \"virtual_table\": \"SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.title, avg(T1.stars) \nFROM Rating AS T1 \nJOIN Movie AS T2 ON T1.mID = T2.mID \nWHERE T1.rID NOT IN (SELECT rID FROM Reviewer WHERE name = 'Brittany Harris') \nGROUP BY T1.mID",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average star ratings given by each reviewer from the 'Rating' table. The placeholder in the SELECT statement represents the reviewer's name, and the average stars are calculated for each reviewer based on their ratings.\",\n        \"virtual_table\": \"SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average star rating of movies released in the earliest year from the 'Movie' table. The placeholder in the WHERE clause is used to filter the movies based on their release year, which is determined by a subquery that finds the minimum year.\",\n        \"virtual_table\": \"SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the titles of movies along with their average ratings from the 'Rating' table. The results are grouped by movie identifier and ordered by the average rating in ascending order, with a limit on the number of results returned as specified by the placeholder.\",\n        \"virtual_table\": \"SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT AVG(T1.stars) AS average_rating, T2.title \nFROM Rating AS T1 \nJOIN Movie AS T2 ON T1.mID = T2.mID \nWHERE T2.title NOT IN (SELECT DISTINCT T2.title \n                        FROM Rating AS T1 \n                        JOIN Movie AS T2 ON T1.mID = T2.mID \n                        JOIN Reviewer AS T3 ON T1.rID = T3.rID \n                        WHERE T3.name = 'Brittany Harris') \nGROUP BY T2.title;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that have not been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2515",
        "c_low": "SELECT M.title, AVG(R.stars) AS average_rating \nFROM Movie AS M \nLEFT JOIN Rating AS R ON M.mID = R.mID \nWHERE M.mID NOT IN (\n    SELECT R1.mID \n    FROM Rating AS R1 \n    JOIN Reviewer AS Rev ON R1.rID = Rev.rID \n    WHERE Rev.name = 'Brittany Harris'\n) \nGROUP BY M.title;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique directors of movies that have been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of reviewers who have given a rating of more than a specified number of stars to movies. The query joins the 'Rating' table with the 'Reviewer' table based on the reviewer's identifier, allowing us to filter the results based on the star rating provided.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT T2.title, avg(T1.stars) \nFROM Rating AS T1 \nJOIN Movie AS T2 ON T1.mID = T2.mID \nWHERE T1.rID NOT IN (SELECT rID FROM Reviewer WHERE name = 'Brittany Harris') \nGROUP BY T1.mID;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the titles of movies along with their average ratings from the 'Rating' table. The results are grouped by movie identifier and ordered by the average rating in ascending order, with a limit on the number of results returned as specified by the placeholder.\",\n        \"virtual_table\": \"SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies reviewers who have submitted ratings for movies but did not give a specific number of stars. The placeholder in the EXCEPT clause represents the number of stars that is being excluded from the results.\",\n        \"virtual_table\": \"SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the average star rating of movies released in the earliest year from the 'Movie' table. The placeholder in the WHERE clause is used to filter the movies based on their release year, which is determined by a subquery that finds the minimum year.\",\n        \"virtual_table\": \"SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)\"\n    }\n}\n",
        "c_high": "SELECT AVG(T1.stars) AS average_rating, T2.title \nFROM Rating AS T1 \nJOIN Movie AS T2 ON T1.mID = T2.mID \nWHERE T2.title IN (SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Brittany Harris') \nGROUP BY T2.title;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that have not been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of reviewers from the 'Reviewer' table who have submitted a number of ratings equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of ratings a reviewer must have submitted.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Movie.title, AVG(CAST(Rating.stars AS REAL)) AS average_rating\nFROM Movie\nJOIN Rating ON Movie.mID = Rating.mID\nWHERE Rating.rID NOT IN (SELECT rID FROM Reviewer WHERE name = 'Brittany Harris')\nGROUP BY Movie.title;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies reviewers who have submitted ratings for movies but did not give a specific number of stars. The placeholder in the EXCEPT clause represents the number of stars that is being excluded from the results.\",\n        \"virtual_table\": \"SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.title, avg(T1.stars) \nFROM Rating AS T1 \nJOIN Movie AS T2 ON T1.mID = T2.mID \nWHERE T1.rID NOT IN (SELECT rID FROM Reviewer WHERE name = 'Brittany Harris') \nGROUP BY T2.mID;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the titles of movies along with their average ratings from the 'Rating' table. The results are grouped by movie identifier and ordered by the average rating in ascending order, with a limit on the number of results returned as specified by the placeholder.\",\n        \"virtual_table\": \"SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average star rating of movies released in the earliest year from the 'Movie' table. The placeholder in the WHERE clause is used to filter the movies based on their release year, which is determined by a subquery that finds the minimum year.\",\n        \"virtual_table\": \"SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the average star ratings given by each reviewer from the 'Rating' table. The placeholder in the SELECT statement represents the reviewer's name, and the average stars are calculated for each reviewer based on their ratings.\",\n        \"virtual_table\": \"SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name\"\n    }\n}\n",
        "t_3+": "SELECT AVG(stars) AS average_rating, title FROM Movie WHERE title NOT IN (SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Brittany Harris') GROUP BY title;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that have not been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2516",
        "c_low": "SELECT mID FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating WHERE rID = (SELECT rID FROM Reviewer WHERE name = 'Brittany Harris'));",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique directors of movies that have been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT mID FROM Movie EXCEPT SELECT mID FROM Rating JOIN Reviewer ON Rating.rID = Reviewer.rID WHERE Reviewer.name = 'Brittany Harris';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies reviewers who have submitted ratings for movies but did not give a specific number of stars. The placeholder in the EXCEPT clause represents the number of stars that is being excluded from the results.\",\n        \"virtual_table\": \"SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of distinct movie titles from the 'Movie' table that have been rated by a specific reviewer or were released after a certain year. The placeholders in the WHERE clause represent the reviewer's name and the year of release, respectively.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] OR T2.year  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT mID FROM Movie EXCEPT SELECT T2.mID FROM Rating AS T1 JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Brittany Harris'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that have not been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    }\n}\n",
        "t_1": "SELECT mID FROM Movie EXCEPT SELECT mID FROM Rating WHERE rID = (SELECT rID FROM Reviewer WHERE name = 'Brittany Harris')",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies reviewers who have submitted ratings for movies but did not give a specific number of stars. The placeholder in the EXCEPT clause represents the number of stars that is being excluded from the results.\",\n        \"virtual_table\": \"SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT m.mID \nFROM Movie m \nWHERE m.mID NOT IN (\n    SELECT r.mID \n    FROM Rating r \n    JOIN Reviewer rev ON r.rID = rev.rID \n    WHERE rev.name = 'Brittany Harris'\n);",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT mID FROM Movie EXCEPT SELECT T2.mID FROM Rating AS T1 JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Brittany Harris'",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that have not been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique directors of movies that have been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2517",
        "c_low": "SELECT mID FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating WHERE rID IN (SELECT rID FROM Reviewer WHERE name = 'Brittany Harris'));",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique directors of movies that have been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT mID FROM Movie EXCEPT SELECT mID FROM Rating WHERE rID = (SELECT rID FROM Reviewer WHERE name = 'Brittany Harris')",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies reviewers who have submitted ratings for movies but did not give a specific number of stars. The placeholder in the EXCEPT clause represents the number of stars that is being excluded from the results.\",\n        \"virtual_table\": \"SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of distinct movie titles from the 'Movie' table that have been rated by a specific reviewer or were released after a certain year. The placeholders in the WHERE clause represent the reviewer's name and the year of release, respectively.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] OR T2.year  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT mID FROM Movie EXCEPT SELECT T2.mID FROM Rating AS T1 JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Britanny Harris'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that have not been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    }\n}\n",
        "t_1": "SELECT mID FROM Movie EXCEPT SELECT mID FROM Rating WHERE rID IN (SELECT rID FROM Reviewer WHERE name = 'Britanny Harris')",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies reviewers who have submitted ratings for movies but did not give a specific number of stars. The placeholder in the EXCEPT clause represents the number of stars that is being excluded from the results.\",\n        \"virtual_table\": \"SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT m.mID \nFROM Movie m \nLEFT JOIN Rating r ON m.mID = r.mID \nLEFT JOIN Reviewer rev ON r.rID = rev.rID \nWHERE rev.name IS NULL OR rev.name != 'Brittany Harris';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT DISTINCT mID FROM Movie EXCEPT SELECT T2.mID FROM Rating AS T1 JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Britanny Harris'",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that have not been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique directors of movies that have been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2518",
        "c_low": "SELECT M.title, AVG(R.stars) AS average_rating\nFROM Movie AS M\nJOIN Rating AS R ON M.mID = R.mID\nGROUP BY M.mID\nHAVING COUNT(R.rID) >= 2;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the titles of movies from the 'Movie' table that have received ratings within a specified range of stars. The placeholders in the WHERE clause represent the minimum and maximum star ratings.\",\n        \"virtual_table\": \"SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of reviewers who have given a rating of more than a specified number of stars to movies. The query joins the 'Rating' table with the 'Reviewer' table based on the reviewer's identifier, allowing us to filter the results based on the star rating provided.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of ratings from the 'Rating' table where the number of stars given exceeds a specified threshold. The placeholder in the WHERE clause represents the minimum number of stars that a rating must have to be included in the count.\",\n        \"virtual_table\": \"SELECT count(*) FROM Rating WHERE stars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT T2.title, avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID HAVING COUNT(T1.rID) >= 2",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the titles of movies along with their average ratings from the 'Rating' table. The results are grouped by movie identifier and ordered by the average rating in ascending order, with a limit on the number of results returned as specified by the placeholder.\",\n        \"virtual_table\": \"SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average star ratings given by each reviewer from the 'Rating' table. The placeholder in the SELECT statement represents the reviewer's name, and the average stars are calculated for each reviewer based on their ratings.\",\n        \"virtual_table\": \"SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the average star rating of movies released in the earliest year from the 'Movie' table. The placeholder in the WHERE clause is used to filter the movies based on their release year, which is determined by a subquery that finds the minimum year.\",\n        \"virtual_table\": \"SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)\"\n    }\n}\n",
        "c_high": "SELECT m.title, AVG(r.stars) AS average_rating\nFROM Rating AS r\nJOIN Movie AS m ON r.mID = m.mID\nGROUP BY m.mID\nHAVING COUNT(r.rID) >= 2;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    }\n}\n",
        "t_1": "SELECT m.title, AVG(r.stars) AS average_rating\nFROM Movie m\nJOIN Rating r ON m.mID = r.mID\nGROUP BY m.mID\nHAVING COUNT(r.rID) >= 2;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of ratings from the 'Rating' table where the number of stars given exceeds a specified threshold. The placeholder in the WHERE clause represents the minimum number of stars that a rating must have to be included in the count.\",\n        \"virtual_table\": \"SELECT count(*) FROM Rating WHERE stars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies reviewers who have submitted ratings for movies but did not give a specific number of stars. The placeholder in the EXCEPT clause represents the number of stars that is being excluded from the results.\",\n        \"virtual_table\": \"SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.title, avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID HAVING COUNT(T1.rID) >= 2",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the titles of movies along with their average ratings from the 'Rating' table. The results are grouped by movie identifier and ordered by the average rating in ascending order, with a limit on the number of results returned as specified by the placeholder.\",\n        \"virtual_table\": \"SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average star ratings given by each reviewer from the 'Rating' table. The placeholder in the SELECT statement represents the reviewer's name, and the average stars are calculated for each reviewer based on their ratings.\",\n        \"virtual_table\": \"SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the average star rating of movies released in the earliest year from the 'Movie' table. The placeholder in the WHERE clause is used to filter the movies based on their release year, which is determined by a subquery that finds the minimum year.\",\n        \"virtual_table\": \"SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)\"\n    }\n}\n",
        "t_3+": "SELECT Movie.title, AVG(Rating.stars) AS average_rating\nFROM Rating\nJOIN Movie ON Rating.mID = Movie.mID\nGROUP BY Movie.mID\nHAVING COUNT(Rating.rID) >= 2;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of distinct movie titles from the 'Movie' table that have been rated by a specific reviewer or were released after a certain year. The placeholders in the WHERE clause represent the reviewer's name and the year of release, respectively.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] OR T2.year  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2519",
        "c_low": "SELECT M.title, AVG(R.stars) AS average_rating \nFROM Movie AS M \nJOIN Rating AS R ON M.mID = R.mID \nGROUP BY M.mID \nHAVING COUNT(R.rID) > 3;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of reviewers who have given a rating of more than a specified number of stars to movies. The query joins the 'Rating' table with the 'Reviewer' table based on the reviewer's identifier, allowing us to filter the results based on the star rating provided.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the titles of movies from the 'Movie' table that have received ratings within a specified range of stars. The placeholders in the WHERE clause represent the minimum and maximum star ratings.\",\n        \"virtual_table\": \"SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT T2.title, avg(T1.stars) AS average_rating \nFROM Rating AS T1 \nJOIN Movie AS T2 ON T1.mID = T2.mID \nGROUP BY T1.mID \nHAVING COUNT(T1.rID) > 3;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the titles of movies along with their average ratings from the 'Rating' table. The results are grouped by movie identifier and ordered by the average rating in ascending order, with a limit on the number of results returned as specified by the placeholder.\",\n        \"virtual_table\": \"SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the titles and directors of movies that have received ratings higher than the average rating for movies directed by a specific director. The placeholder in the subquery represents the name of the director whose average rating is being calculated.\",\n        \"virtual_table\": \"SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the average star rating of movies released in the earliest year from the 'Movie' table. The placeholder in the WHERE clause is used to filter the movies based on their release year, which is determined by a subquery that finds the minimum year.\",\n        \"virtual_table\": \"SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)\"\n    }\n}\n",
        "c_high": "SELECT T2.title, AVG(T1.stars) AS average_rating \nFROM Rating AS T1 \nJOIN Movie AS T2 ON T1.mID = T2.mID \nGROUP BY T1.mID \nHAVING COUNT(T1.rID) > 3;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that have not been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of reviewers from the 'Reviewer' table who have submitted a number of ratings equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of ratings a reviewer must have submitted.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT m.title, AVG(CAST(r.stars AS REAL)) AS average_rating\nFROM Movie m\nJOIN Rating r ON m.mID = r.mID\nGROUP BY m.mID\nHAVING COUNT(r.rID) > 3;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies reviewers who have submitted ratings for movies but did not give a specific number of stars. The placeholder in the EXCEPT clause represents the number of stars that is being excluded from the results.\",\n        \"virtual_table\": \"SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.title, avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID HAVING COUNT(T1.rID) > 3",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the titles of movies along with their average ratings from the 'Rating' table. The results are grouped by movie identifier and ordered by the average rating in ascending order, with a limit on the number of results returned as specified by the placeholder.\",\n        \"virtual_table\": \"SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of reviewers who have given a rating of more than a specified number of stars to movies. The query joins the 'Rating' table with the 'Reviewer' table based on the reviewer's identifier, allowing us to filter the results based on the star rating provided.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the titles and directors of movies that have received ratings higher than the average rating for movies directed by a specific director. The placeholder in the subquery represents the name of the director whose average rating is being calculated.\",\n        \"virtual_table\": \"SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "t_3+": "SELECT Movie.title, AVG(Rating.stars) AS average_rating \nFROM Rating \nJOIN Movie ON Rating.mID = Movie.mID \nGROUP BY Movie.mID \nHAVING COUNT(Rating.rID) > 3;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique directors of movies that have been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2522",
        "c_low": "SELECT DISTINCT rID FROM Rating WHERE rID NOT IN (SELECT rID FROM Rating WHERE stars = '4')",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of reviewers who have given a rating of more than a specified number of stars to movies. The query joins the 'Rating' table with the 'Reviewer' table based on the reviewer's identifier, allowing us to filter the results based on the star rating provided.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique directors of movies that have been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars = '4'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies reviewers who have submitted ratings for movies but did not give a specific number of stars. The placeholder in the EXCEPT clause represents the number of stars that is being excluded from the results.\",\n        \"virtual_table\": \"SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average star ratings given by each reviewer from the 'Rating' table. The placeholder in the SELECT statement represents the reviewer's name, and the average stars are calculated for each reviewer based on their ratings.\",\n        \"virtual_table\": \"SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the directors and titles of movies from the 'Movie' table that have received a specific number of stars in their ratings. The placeholder in the WHERE clause represents the number of stars given in the rating.\",\n        \"virtual_table\": \"SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT rID FROM Rating WHERE rID NOT IN (SELECT rID FROM Rating WHERE stars = '4')",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that have not been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of reviewers from the 'Reviewer' table who have submitted a number of ratings equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of ratings a reviewer must have submitted.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars = 4",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies reviewers who have submitted ratings for movies but did not give a specific number of stars. The placeholder in the EXCEPT clause represents the number of stars that is being excluded from the results.\",\n        \"virtual_table\": \"SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of ratings from the 'Rating' table where the number of stars given exceeds a specified threshold. The placeholder in the WHERE clause represents the minimum number of stars that a rating must have to be included in the count.\",\n        \"virtual_table\": \"SELECT count(*) FROM Rating WHERE stars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT rID FROM Rating WHERE rID NOT IN (SELECT rID FROM Rating WHERE stars = '4')",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of reviewers who have given a rating of more than a specified number of stars to movies. The query joins the 'Rating' table with the 'Reviewer' table based on the reviewer's identifier, allowing us to filter the results based on the star rating provided.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of reviewers from the 'Reviewer' table who have submitted a number of ratings equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of ratings a reviewer must have submitted.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the average star ratings given by each reviewer from the 'Rating' table. The placeholder in the SELECT statement represents the reviewer's name, and the average stars are calculated for each reviewer based on their ratings.\",\n        \"virtual_table\": \"SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT rID FROM Rating WHERE rID NOT IN (SELECT rID FROM Rating WHERE stars = '4')",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that have not been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2523",
        "c_low": "SELECT DISTINCT rID FROM Reviewer WHERE rID NOT IN (SELECT rID FROM Rating WHERE stars = '4')",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of reviewers who have given a rating of more than a specified number of stars to movies. The query joins the 'Rating' table with the 'Reviewer' table based on the reviewer's identifier, allowing us to filter the results based on the star rating provided.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique directors of movies that have been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars = '4'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies reviewers who have submitted ratings for movies but did not give a specific number of stars. The placeholder in the EXCEPT clause represents the number of stars that is being excluded from the results.\",\n        \"virtual_table\": \"SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average star ratings given by each reviewer from the 'Rating' table. The placeholder in the SELECT statement represents the reviewer's name, and the average stars are calculated for each reviewer based on their ratings.\",\n        \"virtual_table\": \"SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the directors and titles of movies from the 'Movie' table that have received a specific number of stars in their ratings. The placeholder in the WHERE clause represents the number of stars given in the rating.\",\n        \"virtual_table\": \"SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT rID FROM Reviewer WHERE rID NOT IN (SELECT rID FROM Rating WHERE stars = '4')",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that have not been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of reviewers from the 'Reviewer' table who have submitted a number of ratings equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of ratings a reviewer must have submitted.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT rID FROM Reviewer EXCEPT SELECT rID FROM Rating WHERE stars = '4'",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies reviewers who have submitted ratings for movies but did not give a specific number of stars. The placeholder in the EXCEPT clause represents the number of stars that is being excluded from the results.\",\n        \"virtual_table\": \"SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT rID FROM Reviewer WHERE rID NOT IN (SELECT rID FROM Rating WHERE stars = '4')",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of reviewers who have given a rating of more than a specified number of stars to movies. The query joins the 'Rating' table with the 'Reviewer' table based on the reviewer's identifier, allowing us to filter the results based on the star rating provided.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of reviewers from the 'Reviewer' table who have submitted a number of ratings equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of ratings a reviewer must have submitted.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the average star ratings given by each reviewer from the 'Rating' table. The placeholder in the SELECT statement represents the reviewer's name, and the average stars are calculated for each reviewer based on their ratings.\",\n        \"virtual_table\": \"SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT rID FROM Reviewer WHERE rID NOT IN (SELECT rID FROM Rating WHERE stars = '4')",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that have not been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2528",
        "c_low": "SELECT DISTINCT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars IN ('3', '4')",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of reviewers who have given a rating of more than a specified number of stars to movies. The query joins the 'Rating' table with the 'Reviewer' table based on the reviewer's identifier, allowing us to filter the results based on the star rating provided.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique directors of movies that have been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT T2.name \nFROM Rating AS T1 \nJOIN Reviewer AS T2 ON T1.rID = T2.rID \nWHERE T1.stars IN (3, 4)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies reviewers who have submitted ratings for movies but did not give a specific number of stars. The placeholder in the EXCEPT clause represents the number of stars that is being excluded from the results.\",\n        \"virtual_table\": \"SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average star ratings given by each reviewer from the 'Rating' table. The placeholder in the SELECT statement represents the reviewer's name, and the average stars are calculated for each reviewer based on their ratings.\",\n        \"virtual_table\": \"SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the directors and titles of movies from the 'Movie' table that have received a specific number of stars in their ratings. The placeholder in the WHERE clause represents the number of stars given in the rating.\",\n        \"virtual_table\": \"SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T1.stars IN ('3', '4')",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of reviewers from the 'Reviewer' table who have submitted a number of ratings equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of ratings a reviewer must have submitted.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that have not been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT Reviewer.name \nFROM Reviewer \nJOIN Rating ON Reviewer.rID = Rating.rID \nWHERE Rating.stars IN ('3', '4')",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies reviewers who have submitted ratings for movies but did not give a specific number of stars. The placeholder in the EXCEPT clause represents the number of stars that is being excluded from the results.\",\n        \"virtual_table\": \"SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars IN ('3', '4')",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of reviewers who have given a rating of more than a specified number of stars to movies. The query joins the 'Rating' table with the 'Reviewer' table based on the reviewer's identifier, allowing us to filter the results based on the star rating provided.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of reviewers from the 'Reviewer' table who have submitted a number of ratings equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of ratings a reviewer must have submitted.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the average star ratings given by each reviewer from the 'Rating' table. The placeholder in the SELECT statement represents the reviewer's name, and the average stars are calculated for each reviewer based on their ratings.\",\n        \"virtual_table\": \"SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T1.stars IN ('3', '4')",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique directors of movies that have been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2529",
        "c_low": "SELECT DISTINCT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars IN ('3', '4')",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of reviewers who have given a rating of more than a specified number of stars to movies. The query joins the 'Rating' table with the 'Reviewer' table based on the reviewer's identifier, allowing us to filter the results based on the star rating provided.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique directors of movies that have been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT T2.name \nFROM Rating AS T1 \nJOIN Reviewer AS T2 ON T1.rID = T2.rID \nWHERE T1.stars IN ('3', '4')",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies reviewers who have submitted ratings for movies but did not give a specific number of stars. The placeholder in the EXCEPT clause represents the number of stars that is being excluded from the results.\",\n        \"virtual_table\": \"SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average star ratings given by each reviewer from the 'Rating' table. The placeholder in the SELECT statement represents the reviewer's name, and the average stars are calculated for each reviewer based on their ratings.\",\n        \"virtual_table\": \"SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the directors and titles of movies from the 'Movie' table that have received a specific number of stars in their ratings. The placeholder in the WHERE clause represents the number of stars given in the rating.\",\n        \"virtual_table\": \"SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T1.stars IN ('3', '4')",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of reviewers from the 'Reviewer' table who have submitted a number of ratings equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of ratings a reviewer must have submitted.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that have not been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT Reviewer.name \nFROM Reviewer \nJOIN Rating ON Reviewer.rID = Rating.rID \nWHERE Rating.stars IN ('3', '4')",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies reviewers who have submitted ratings for movies but did not give a specific number of stars. The placeholder in the EXCEPT clause represents the number of stars that is being excluded from the results.\",\n        \"virtual_table\": \"SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars IN ('3', '4')",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of reviewers who have given a rating of more than a specified number of stars to movies. The query joins the 'Rating' table with the 'Reviewer' table based on the reviewer's identifier, allowing us to filter the results based on the star rating provided.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of reviewers from the 'Reviewer' table who have submitted a number of ratings equal to or greater than a specified threshold. The placeholder in the HAVING clause represents the minimum count of ratings a reviewer must have submitted.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the average star ratings given by each reviewer from the 'Rating' table. The placeholder in the SELECT statement represents the reviewer's name, and the average stars are calculated for each reviewer based on their ratings.\",\n        \"virtual_table\": \"SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T1.stars IN ('3', '4')",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique directors of movies that have been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2530",
        "c_low": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars IN ('3', '4')",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the titles of movies from the 'Movie' table that have received ratings within a specified range of stars. The placeholders in the WHERE clause represent the minimum and maximum star ratings.\",\n        \"virtual_table\": \"SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of reviewers who have given a rating of more than a specified number of stars to movies. The query joins the 'Rating' table with the 'Reviewer' table based on the reviewer's identifier, allowing us to filter the results based on the star rating provided.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars IN ('3', '4')",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the directors and titles of movies from the 'Movie' table that have received a specific number of stars in their ratings. The placeholder in the WHERE clause represents the number of stars given in the rating.\",\n        \"virtual_table\": \"SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the maximum star rating for movies released in the most recent year. It joins the 'Rating' and 'Movie' tables to correlate the ratings with their respective movies, filtering for the year of release that is the latest available in the database.\",\n        \"virtual_table\": \"SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the titles of movies along with their average ratings from the 'Rating' table. The results are grouped by movie identifier and ordered by the average rating in ascending order, with a limit on the number of results returned as specified by the placeholder.\",\n        \"virtual_table\": \"SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars IN ('3', '4')",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that have not been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles and directors of movies from the 'Movie' table that share the same director but are different titles. The results are ordered by the director's name and then by the movie title.\",\n        \"virtual_table\": \"SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT M.title \nFROM Movie M \nJOIN Rating R ON M.mID = R.mID \nWHERE R.stars IN ('3', '4')",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies reviewers who have submitted ratings for movies but did not give a specific number of stars. The placeholder in the EXCEPT clause represents the number of stars that is being excluded from the results.\",\n        \"virtual_table\": \"SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the titles and directors of movies from the 'Movie' table that share the same director but are different titles. The results are ordered by the director's name and then by the movie title.\",\n        \"virtual_table\": \"SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the titles of movies from the 'Movie' table that were released after the most recent movie directed by a specific director. The placeholder in the WHERE clause represents the director's name.\",\n        \"virtual_table\": \"SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "t_2": "SELECT T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars IN (3, 4)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the directors and titles of movies from the 'Movie' table that have received a specific number of stars in their ratings. The placeholder in the WHERE clause represents the number of stars given in the rating.\",\n        \"virtual_table\": \"SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the titles of movies from the 'Movie' table that have received ratings within a specified range of stars. The placeholders in the WHERE clause represent the minimum and maximum star ratings.\",\n        \"virtual_table\": \"SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of reviewers who have given a rating of more than a specified number of stars to movies. The query joins the 'Rating' table with the 'Reviewer' table based on the reviewer's identifier, allowing us to filter the results based on the star rating provided.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars IN ('3', '4')",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that have not been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2531",
        "c_low": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars IN ('3', '4')",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of reviewers who have given a rating of more than a specified number of stars to movies. The query joins the 'Rating' table with the 'Reviewer' table based on the reviewer's identifier, allowing us to filter the results based on the star rating provided.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the titles of movies from the 'Movie' table that have received ratings within a specified range of stars. The placeholders in the WHERE clause represent the minimum and maximum star ratings.\",\n        \"virtual_table\": \"SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars IN ('3', '4')",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the directors and titles of movies from the 'Movie' table that have received a specific number of stars in their ratings. The placeholder in the WHERE clause represents the number of stars given in the rating.\",\n        \"virtual_table\": \"SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the maximum star rating for movies released in the most recent year. It joins the 'Rating' and 'Movie' tables to correlate the ratings with their respective movies, filtering for the year of release that is the latest available in the database.\",\n        \"virtual_table\": \"SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of distinct movie titles from the 'Movie' table that have been rated by a specific reviewer or were released after a certain year. The placeholders in the WHERE clause represent the reviewer's name and the year of release, respectively.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING] OR T2.year  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars IN ('3', '4')",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the titles of movies from the 'Movie' table that have not been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the titles and directors of movies from the 'Movie' table that share the same director but are different titles. The results are ordered by the director's name and then by the movie title.\",\n        \"virtual_table\": \"SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title\"\n    }\n}\n",
        "t_1": "SELECT Movie.title FROM Movie JOIN Rating ON Movie.mID = Rating.mID WHERE Rating.stars IN ('3', '4')",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies reviewers who have submitted ratings for movies but did not give a specific number of stars. The placeholder in the EXCEPT clause represents the number of stars that is being excluded from the results.\",\n        \"virtual_table\": \"SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the titles and directors of movies from the 'Movie' table that share the same director but are different titles. The results are ordered by the director's name and then by the movie title.\",\n        \"virtual_table\": \"SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the titles of movies from the 'Movie' table that were released after the most recent movie directed by a specific director. The placeholder in the WHERE clause represents the director's name.\",\n        \"virtual_table\": \"SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "t_2": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars BETWEEN 3 AND 4",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the directors and titles of movies from the 'Movie' table that have received a specific number of stars in their ratings. The placeholder in the WHERE clause represents the number of stars given in the rating.\",\n        \"virtual_table\": \"SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of reviewers who have given a rating of more than a specified number of stars to movies. The query joins the 'Rating' table with the 'Reviewer' table based on the reviewer's identifier, allowing us to filter the results based on the star rating provided.\",\n        \"virtual_table\": \"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the titles of movies from the 'Movie' table that have received ratings within a specified range of stars. The placeholders in the WHERE clause represent the minimum and maximum star ratings.\",\n        \"virtual_table\": \"SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars IN ('3', '4')",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table presents a list of distinct reviewers' names, the titles of movies they rated, and the corresponding star ratings. The data is sourced from the 'Rating', 'Movie', and 'Reviewer' tables, with a condition that the director of the movie matches the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the distinct names of reviewers who have rated a specific movie from the 'Movie' table. The placeholder in the WHERE clause represents the title of the movie.\",\n        \"virtual_table\": \"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique directors of movies that have been rated by a specific reviewer. The placeholder in the WHERE clause represents the reviewer's name.\",\n        \"virtual_table\": \"SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n"
    },
    {
        "sample_id": "train.2541",
        "c_low": "SELECT Name, Crime_rate FROM county_public_safety ORDER BY Police_officers ASC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of cities from the 'city' table, ordered by the number of White residents in descending order. The placeholder in the LIMIT clause represents the maximum number of city names to be returned.\",\n        \"virtual_table\": \"SELECT Name FROM city ORDER BY White DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT Name, Crime_rate FROM county_public_safety ORDER BY Police_officers ASC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of cities from the 'city' table that belong to the county with the highest number of police officers. The placeholder in the subquery represents the limit for selecting the county based on the number of police officers.\",\n        \"virtual_table\": \"SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of cities from the 'city' table that belong to counties with a crime rate below a specified threshold. The placeholder in the subquery represents the maximum crime rate to filter the counties.\",\n        \"virtual_table\": \"SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of cities that belong to counties with a population exceeding a specified threshold. The placeholder in the subquery represents the population limit used to filter the counties.\",\n        \"virtual_table\": \"SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_1": "SELECT Name, Crime_rate FROM county_public_safety ORDER BY Police_officers ASC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of cities from the 'city' table, ordered by the number of White residents in descending order. The placeholder in the LIMIT clause represents the maximum number of city names to be returned.\",\n        \"virtual_table\": \"SELECT Name FROM city ORDER BY White DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Name, Crime_rate FROM county_public_safety ORDER BY Police_officers ASC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of cities from the 'city' table that belong to the county with the highest number of police officers. The placeholder in the subquery represents the limit for selecting the county based on the number of police officers.\",\n        \"virtual_table\": \"SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of cities from the 'city' table that belong to counties with a crime rate below a specified threshold. The placeholder in the subquery represents the maximum crime rate to filter the counties.\",\n        \"virtual_table\": \"SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of cities that belong to counties with a population exceeding a specified threshold. The placeholder in the subquery represents the population limit used to filter the counties.\",\n        \"virtual_table\": \"SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_3+": "SELECT Name, Crime_rate FROM county_public_safety ORDER BY Police_officers ASC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2544",
        "c_low": "SELECT Name, (Hispanic * 100.0 / (White + Black + Amerindian + Asian + Multiracial + Hispanic)) AS Hispanic_Percentage\nFROM city\nWHERE (Black * 100.0 / (White + Black + Amerindian + Asian + Multiracial + Hispanic)) > 10;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of cities from the 'city' table, ordered by the number of White residents in descending order. The placeholder in the LIMIT clause represents the maximum number of city names to be returned.\",\n        \"virtual_table\": \"SELECT Name FROM city ORDER BY White DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT c.Name, (c.Hispanic * 100.0 / (c.White + c.Black + c.Amerindian + c.Asian + c.Multiracial + c.Hispanic)) AS Hispanic_Percentage\nFROM city c\nWHERE (c.Black * 100.0 / (c.White + c.Black + c.Amerindian + c.Asian + c.Multiracial + c.Hispanic)) > 10;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT Name, (Hispanic * 100.0 / (White + Black + Amerindian + Asian + Multiracial + Hispanic)) AS Hispanic_Percentage \nFROM city \nWHERE (Black * 100.0 / (White + Black + Amerindian + Asian + Multiracial + Hispanic)) > 10;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of cities from the 'city' table that belong to the county with the highest number of police officers. The placeholder in the subquery represents the limit for selecting the county based on the number of police officers.\",\n        \"virtual_table\": \"SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of cities from the 'city' table that belong to counties with a crime rate below a specified threshold. The placeholder in the subquery represents the maximum crime rate to filter the counties.\",\n        \"virtual_table\": \"SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_1": "SELECT Name, (Hispanic * 100.0 / (White + Black + Amerindian + Asian + Multiracial + Hispanic)) AS Hispanic_Percentage\nFROM city\nWHERE (Black * 100.0 / (White + Black + Amerindian + Asian + Multiracial + Hispanic)) > 10;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of cities from the 'city' table, ordered by the number of White residents in descending order. The placeholder in the LIMIT clause represents the maximum number of city names to be returned.\",\n        \"virtual_table\": \"SELECT Name FROM city ORDER BY White DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Name, (Hispanic * 100.0 / (White + Black + Amerindian + Asian + Multiracial + Hispanic)) AS Hispanic_Percentage \nFROM city \nWHERE (Black * 100.0 / (White + Black + Amerindian + Asian + Multiracial + Hispanic)) > 10;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of cities from the 'city' table that belong to the county with the highest number of police officers. The placeholder in the subquery represents the limit for selecting the county based on the number of police officers.\",\n        \"virtual_table\": \"SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of cities from the 'city' table that belong to counties with a crime rate below a specified threshold. The placeholder in the subquery represents the maximum crime rate to filter the counties.\",\n        \"virtual_table\": \"SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_3+": "SELECT c.Name, (c.Hispanic * 100.0 / (c.White + c.Black + c.Amerindian + c.Asian + c.Multiracial + c.Hispanic)) AS Hispanic_Percentage\nFROM city c\nWHERE (c.Black * 100.0 / (c.White + c.Black + c.Amerindian + c.Asian + c.Multiracial + c.Hispanic)) > 10;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2545",
        "c_low": "SELECT Name, (Hispanic * 100.0 / (White + Black + Amerindian + Asian + Multiracial + Hispanic)) AS Hispanic_Percentage\nFROM city\nWHERE (Black * 100.0 / (White + Black + Amerindian + Asian + Multiracial + Hispanic)) > 10;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of cities from the 'city' table, ordered by the number of White residents in descending order. The placeholder in the LIMIT clause represents the maximum number of city names to be returned.\",\n        \"virtual_table\": \"SELECT Name FROM city ORDER BY White DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT c.Name, (c.Hispanic * 100.0 / (c.White + c.Black + c.Amerindian + c.Asian + c.Multiracial + c.Hispanic)) AS Hispanic_Percentage\nFROM city c\nWHERE (c.Black * 100.0 / (c.White + c.Black + c.Amerindian + c.Asian + c.Multiracial + c.Hispanic)) > 10;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT (Hispanic * 100.0 / (White + Black + Amerindian + Asian + Multiracial + Hispanic)) AS Hispanic_Percentage\nFROM city\nWHERE (Black * 100.0 / (White + Black + Amerindian + Asian + Multiracial + Hispanic)) > 10;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of cities from the 'city' table that belong to counties with a crime rate below a specified threshold. The placeholder in the subquery represents the maximum crime rate to filter the counties.\",\n        \"virtual_table\": \"SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of cities that belong to counties with a population exceeding a specified threshold. The placeholder in the subquery represents the population limit used to filter the counties.\",\n        \"virtual_table\": \"SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of cities from the 'city' table that belong to the county with the highest number of police officers. The placeholder in the subquery represents the limit for selecting the county based on the number of police officers.\",\n        \"virtual_table\": \"SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_1": "SELECT Name, (Hispanic * 100.0 / (White + Black + Amerindian + Asian + Multiracial + Hispanic)) AS Hispanic_Percentage \nFROM city \nWHERE (Black * 100.0 / (White + Black + Amerindian + Asian + Multiracial + Hispanic)) > 10;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of cities from the 'city' table, ordered by the number of White residents in descending order. The placeholder in the LIMIT clause represents the maximum number of city names to be returned.\",\n        \"virtual_table\": \"SELECT Name FROM city ORDER BY White DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT (Hispanic * 100.0 / (White + Black + Amerindian + Asian + Multiracial + Hispanic)) AS hispanic_percentage \nFROM city \nWHERE (Black * 100.0 / (White + Black + Amerindian + Asian + Multiracial + Hispanic)) > 10;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of cities from the 'city' table that belong to counties with a crime rate below a specified threshold. The placeholder in the subquery represents the maximum crime rate to filter the counties.\",\n        \"virtual_table\": \"SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of cities that belong to counties with a population exceeding a specified threshold. The placeholder in the subquery represents the population limit used to filter the counties.\",\n        \"virtual_table\": \"SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of cities from the 'city' table that belong to the county with the highest number of police officers. The placeholder in the subquery represents the limit for selecting the county based on the number of police officers.\",\n        \"virtual_table\": \"SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_3+": "SELECT c.Name, (c.Hispanic * 100.0 / (c.White + c.Black + c.Amerindian + c.Asian + c.Multiracial + c.Hispanic)) AS Hispanic_Percentage\nFROM city c\nWHERE (c.Black * 100.0 / (c.White + c.Black + c.Amerindian + c.Asian + c.Multiracial + c.Hispanic)) > 10;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2552",
        "c_low": "SELECT c.Name AS City_Name, (CAST(c.White AS FLOAT) / (SELECT SUM(White + Black + Amerindian + Asian + Multiracial + Hispanic) FROM city WHERE County_ID = c.County_ID) * 100) AS White_Percentage, cps.Crime_rate\nFROM city c\nJOIN county_public_safety cps ON c.County_ID = cps.County_ID;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of cities from the 'city' table, ordered by the number of White residents in descending order. The placeholder in the LIMIT clause represents the maximum number of city names to be returned.\",\n        \"virtual_table\": \"SELECT Name FROM city ORDER BY White DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT c.Name AS City_Name, \n       (c.White * 100.0 / (c.White + c.Black + c.Amerindian + c.Asian + c.Multiracial + c.Hispanic)) AS White_Percentage, \n       cps.Crime_rate \nFROM city c \nJOIN county_public_safety cps ON c.County_ID = cps.County_ID;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT c.Name AS City_Name, (c.White * 100.0 / (c.White + c.Black + c.Amerindian + c.Asian + c.Multiracial + c.Hispanic)) AS White_Percentage, cps.Crime_rate\nFROM city c\nJOIN county_public_safety cps ON c.County_ID = cps.County_ID;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of cities from the 'city' table that belong to counties with a crime rate below a specified threshold. The placeholder in the subquery represents the maximum crime rate to filter the counties.\",\n        \"virtual_table\": \"SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of cities from the 'city' table that belong to the county with the highest number of police officers. The placeholder in the subquery represents the limit for selecting the county based on the number of police officers.\",\n        \"virtual_table\": \"SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of counties from the 'county_public_safety' table that do not have any associated cities. The placeholder in the WHERE clause represents the County_IDs of counties that are present in the 'city' table.\",\n        \"virtual_table\": \"SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)\"\n    }\n}\n",
        "t_1": "SELECT c.Name AS City_Name, (CAST(c.White AS FLOAT) / (SELECT SUM(White + Black + Amerindian + Asian + Multiracial + Hispanic) FROM city WHERE County_ID = c.County_ID) * 100) AS White_Percentage, cps.Crime_rate\nFROM city c\nJOIN county_public_safety cps ON c.County_ID = cps.County_ID;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of cities from the 'city' table, ordered by the number of White residents in descending order. The placeholder in the LIMIT clause represents the maximum number of city names to be returned.\",\n        \"virtual_table\": \"SELECT Name FROM city ORDER BY White DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT c.Name AS City_Name, (CAST(c.White AS FLOAT) / (CAST(c.White AS FLOAT) + CAST(c.Black AS FLOAT) + CAST(c.Amerindian AS FLOAT) + CAST(c.Asian AS FLOAT) + CAST(c.Multiracial AS FLOAT) + CAST(c.Hispanic AS FLOAT)) * 100) AS White_Percentage, cps.Crime_rate\nFROM city c\nJOIN county_public_safety cps ON c.County_ID = cps.County_ID;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of cities from the 'city' table that belong to counties with a crime rate below a specified threshold. The placeholder in the subquery represents the maximum crime rate to filter the counties.\",\n        \"virtual_table\": \"SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of cities from the 'city' table that belong to the county with the highest number of police officers. The placeholder in the subquery represents the limit for selecting the county based on the number of police officers.\",\n        \"virtual_table\": \"SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of counties from the 'county_public_safety' table that do not have any associated cities. The placeholder in the WHERE clause represents the County_IDs of counties that are present in the 'city' table.\",\n        \"virtual_table\": \"SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)\"\n    }\n}\n",
        "t_3+": "SELECT c.Name AS City_Name, \n       (c.White * 100.0 / (c.White + c.Black + c.Amerindian + c.Asian + c.Multiracial + c.Hispanic)) AS White_Percentage, \n       cps.Crime_rate \nFROM city c \nJOIN county_public_safety cps ON c.County_ID = cps.County_ID;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2553",
        "c_low": "SELECT c.Name AS City_Name, (c.White * 100.0 / (c.White + c.Black + c.Amerindian + c.Asian + c.Multiracial + c.Hispanic)) AS White_Percentage, cps.Crime_rate\nFROM city c\nJOIN county_public_safety cps ON c.County_ID = cps.County_ID;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of cities from the 'city' table, ordered by the number of White residents in descending order. The placeholder in the LIMIT clause represents the maximum number of city names to be returned.\",\n        \"virtual_table\": \"SELECT Name FROM city ORDER BY White DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT c.Name AS City_Name, \n       (c.White * 100.0 / (c.White + c.Black + c.Amerindian + c.Asian + c.Multiracial + c.Hispanic)) AS White_Percentage, \n       cps.Crime_rate \nFROM city c \nJOIN county_public_safety cps ON c.County_ID = cps.County_ID;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT c.White * 100.0 / (c.White + c.Black + c.Amerindian + c.Asian + c.Multiracial + c.Hispanic) AS White_Percentage, cps.Crime_rate \nFROM city c \nJOIN county_public_safety cps ON c.County_ID = cps.County_ID;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of cities from the 'city' table that belong to counties with a crime rate below a specified threshold. The placeholder in the subquery represents the maximum crime rate to filter the counties.\",\n        \"virtual_table\": \"SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of cities from the 'city' table that belong to the county with the highest number of police officers. The placeholder in the subquery represents the limit for selecting the county based on the number of police officers.\",\n        \"virtual_table\": \"SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of counties from the 'county_public_safety' table that do not have any associated cities. The placeholder in the WHERE clause represents the County_IDs of counties that are present in the 'city' table.\",\n        \"virtual_table\": \"SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)\"\n    }\n}\n",
        "t_1": "SELECT c.Name AS City_Name, (c.White * 100.0 / (c.White + c.Black + c.Amerindian + c.Asian + c.Multiracial + c.Hispanic)) AS White_Percentage, cps.Crime_rate\nFROM city c\nJOIN county_public_safety cps ON c.County_ID = cps.County_ID;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of cities from the 'city' table, ordered by the number of White residents in descending order. The placeholder in the LIMIT clause represents the maximum number of city names to be returned.\",\n        \"virtual_table\": \"SELECT Name FROM city ORDER BY White DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT c.White * 100.0 / (c.White + c.Black + c.Amerindian + c.Asian + c.Multiracial + c.Hispanic) AS White_Percentage, cps.Crime_rate \nFROM city c \nJOIN county_public_safety cps ON c.County_ID = cps.County_ID;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of cities from the 'city' table that belong to counties with a crime rate below a specified threshold. The placeholder in the subquery represents the maximum crime rate to filter the counties.\",\n        \"virtual_table\": \"SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of cities from the 'city' table that belong to the county with the highest number of police officers. The placeholder in the subquery represents the limit for selecting the county based on the number of police officers.\",\n        \"virtual_table\": \"SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of counties from the 'county_public_safety' table that do not have any associated cities. The placeholder in the WHERE clause represents the County_IDs of counties that are present in the 'city' table.\",\n        \"virtual_table\": \"SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)\"\n    }\n}\n",
        "t_3+": "SELECT c.Name AS City_Name, \n       (c.White * 100.0 / (c.White + c.Black + c.Amerindian + c.Asian + c.Multiracial + c.Hispanic)) AS White_Percentage, \n       cps.Crime_rate \nFROM city c \nJOIN county_public_safety cps ON c.County_ID = cps.County_ID;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    }
]