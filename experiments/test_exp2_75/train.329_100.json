[
    {
        "sample_id": "train.1",
        "c_low": "SELECT head.name, head.born_state, head.age FROM head ORDER BY head.age;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of department heads from the 'head' table who were not born in a specific state. The placeholder in the WHERE clause represents the state name that is being excluded.\",\n        \"virtual_table\": \"SELECT name FROM head WHERE born_state != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT head.name, head.born_state, head.age FROM head ORDER BY head.age;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT h.name, h.born_state, h.age FROM head AS h ORDER BY h.age;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the states of birth for department heads from the 'head' table, grouped by state. The placeholder in the HAVING clause represents the minimum count of department heads required for a state to be included in the results.\",\n        \"virtual_table\": \"SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and total number of employees in departments where the head is temporarily acting. The placeholder in the WHERE clause represents the status of the head's position.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT name, born_state, age FROM head ORDER BY age;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the states of birth for department heads from the 'head' table, grouped by state. The placeholder in the HAVING clause represents the minimum count of department heads required for a state to be included in the results.\",\n        \"virtual_table\": \"SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of department heads from the 'head' table who were not born in a specific state. The placeholder in the WHERE clause represents the state name that is being excluded.\",\n        \"virtual_table\": \"SELECT name FROM head WHERE born_state != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT head.name, head.born_state, head.age FROM head JOIN management ON head.head_ID = management.head_ID JOIN department ON management.department_ID = department.Department_ID ORDER BY head.age;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and total number of employees in departments where the head is temporarily acting. The placeholder in the WHERE clause represents the status of the head's position.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT head.name, head.born_state, head.age FROM head ORDER BY head.age;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.1",
        "c_low": "SELECT head.name, head.born_state, head.age FROM head ORDER BY head.age;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of department heads from the 'head' table who were not born in a specific state. The placeholder in the WHERE clause represents the state name that is being excluded.\",\n        \"virtual_table\": \"SELECT name FROM head WHERE born_state != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT head.name, head.born_state, head.age FROM head ORDER BY head.age;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT h.name, h.born_state, h.age FROM head AS h ORDER BY h.age;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the states of birth for department heads from the 'head' table, grouped by state. The placeholder in the HAVING clause represents the minimum count of department heads required for a state to be included in the results.\",\n        \"virtual_table\": \"SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and total number of employees in departments where the head is temporarily acting. The placeholder in the WHERE clause represents the status of the head's position.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT name, born_state, age FROM head ORDER BY age;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the states of birth for department heads from the 'head' table, grouped by state. The placeholder in the HAVING clause represents the minimum count of department heads required for a state to be included in the results.\",\n        \"virtual_table\": \"SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of department heads from the 'head' table who were not born in a specific state. The placeholder in the WHERE clause represents the state name that is being excluded.\",\n        \"virtual_table\": \"SELECT name FROM head WHERE born_state != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT head.name, head.born_state, head.age FROM head JOIN management ON head.head_ID = management.head_ID ORDER BY head.age;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and total number of employees in departments where the head is temporarily acting. The placeholder in the WHERE clause represents the status of the head's position.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT head.name, head.born_state, head.age FROM head JOIN management ON head.head_ID = management.head_ID JOIN department ON management.department_ID = department.Department_ID ORDER BY head.age;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.2",
        "c_low": "SELECT strftime('%Y', Creation) AS creation_year, Name, Budget_in_Billions FROM department;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT strftime('%Y', Creation) AS creation_year, Name, Budget_in_Billions FROM department;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT strftime('%Y', Creation) AS creation_year, Name, Budget_in_Billions FROM department;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT strftime('%Y', Creation) AS creation_year, Name, Budget_in_Billions FROM department;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT strftime('%Y', Creation) AS Creation_Year, Name, Budget_in_Billions FROM department;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT strftime('%Y', Creation) AS creation_year, Name, Budget_in_Billions FROM department;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.6",
        "c_low": "SELECT DISTINCT substr(Creation, 1, 4) AS Creation_Year \nFROM department \nJOIN management ON department.Department_ID = management.department_ID \nJOIN head ON management.head_ID = head.head_ID \nWHERE head.born_state = 'Alabama';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of department heads from the 'head' table who were not born in a specific state. The placeholder in the WHERE clause represents the state name that is being excluded.\",\n        \"virtual_table\": \"SELECT name FROM head WHERE born_state != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT substr(Creation, 1, 4) AS Creation_Year\nFROM department d\nJOIN management m ON d.Department_ID = m.department_ID\nJOIN head h ON m.head_ID = h.head_ID\nWHERE h.born_state = 'Alabama';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT DISTINCT Creation FROM department WHERE Department_ID IN (SELECT department_ID FROM management WHERE head_ID IN (SELECT head_ID FROM head WHERE born_state = 'Alabama'));",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the states of birth for department heads from the 'head' table, grouped by state. The placeholder in the HAVING clause represents the minimum count of department heads required for a state to be included in the results.\",\n        \"virtual_table\": \"SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a summary of departments from the 'department' table, including their unique identifiers and names, along with the count of heads managing each department. The results are filtered to show only those departments that have more than a specified number of heads managing them, as indicated by the placeholder in the HAVING clause.\",\n        \"virtual_table\": \"SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT strftime('%Y', Creation) AS creation_year \nFROM department d \nJOIN management m ON d.Department_ID = m.department_ID \nJOIN head h ON m.head_ID = h.head_ID \nWHERE h.born_state = 'Alabama';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of department heads from the 'head' table who were not born in a specific state. The placeholder in the WHERE clause represents the state name that is being excluded.\",\n        \"virtual_table\": \"SELECT name FROM head WHERE born_state != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the states of birth for department heads from the 'head' table, grouped by state. The placeholder in the HAVING clause represents the minimum count of department heads required for a state to be included in the results.\",\n        \"virtual_table\": \"SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT strftime('%Y', Creation) AS creation_year \nFROM department AS d \nJOIN management AS m ON d.Department_ID = m.department_ID \nJOIN head AS h ON m.head_ID = h.head_ID \nWHERE h.born_state = 'Alabama';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of departments from the 'department' table, including their unique identifiers and names, along with the count of heads managing each department. The results are filtered to show only those departments that have more than a specified number of heads managing them, as indicated by the placeholder in the HAVING clause.\",\n        \"virtual_table\": \"SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT substr(Creation, 1, 4) AS Creation_Year\nFROM department d\nJOIN management m ON d.Department_ID = m.department_ID\nJOIN head h ON m.head_ID = h.head_ID\nWHERE h.born_state = 'Alabama';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.8",
        "c_low": "SELECT strftime('%Y', Creation) AS Year, COUNT(*) AS DepartmentCount\nFROM department\nGROUP BY Year\nORDER BY DepartmentCount DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT strftime('%Y', Creation) AS Year, COUNT(*) AS DepartmentCount\nFROM department\nGROUP BY Year\nORDER BY DepartmentCount DESC\nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT strftime('%Y', Creation) AS year, COUNT(*) AS department_count \nFROM department \nGROUP BY year \nORDER BY department_count DESC \nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of departments from the 'department' table, including their unique identifiers and names, along with the count of heads managing each department. The results are filtered to show only those departments that have more than a specified number of heads managing them, as indicated by the placeholder in the HAVING clause.\",\n        \"virtual_table\": \"SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT strftime('%Y', Creation) AS establishment_year, COUNT(*) AS num_departments\nFROM department\nGROUP BY establishment_year\nORDER BY num_departments DESC\nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT strftime('%Y', Creation) AS year, COUNT(*) AS department_count \nFROM department \nGROUP BY year \nORDER BY department_count DESC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of departments from the 'department' table, including their unique identifiers and names, along with the count of heads managing each department. The results are filtered to show only those departments that have more than a specified number of heads managing them, as indicated by the placeholder in the HAVING clause.\",\n        \"virtual_table\": \"SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT strftime('%Y', Creation) AS Year, COUNT(*) AS DepartmentCount\nFROM department\nGROUP BY Year\nORDER BY DepartmentCount DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.12",
        "c_low": "SELECT DISTINCT h.age \nFROM head h \nJOIN management m ON h.head_ID = m.head_ID \nWHERE m.temporary_acting = 'yes';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT DISTINCT h.age \nFROM head h \nJOIN management m ON h.head_ID = m.head_ID \nWHERE m.temporary_acting = 'yes';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT DISTINCT h.age \nFROM head h \nJOIN management m ON h.head_ID = m.head_ID \nWHERE m.temporary_acting = 'yes';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT DISTINCT h.age \nFROM head h \nJOIN management m ON h.head_ID = m.head_ID \nWHERE m.temporary_acting = 'yes';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT DISTINCT h.age \nFROM head h \nJOIN management m ON h.head_ID = m.head_ID \nWHERE m.temporary_acting = 'yes';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT DISTINCT h.age \nFROM head h \nJOIN management m ON h.head_ID = m.head_ID \nWHERE m.temporary_acting = 'yes';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.13",
        "c_low": "SELECT DISTINCT h1.born_state \nFROM head h1 \nJOIN management m1 ON h1.head_ID = m1.head_ID \nJOIN department d1 ON m1.department_ID = d1.Department_ID \nWHERE d1.Name = 'Treasury' \n   OR d1.Name = 'Homeland Security';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of department heads from the 'head' table who were not born in a specific state. The placeholder in the WHERE clause represents the state name that is being excluded.\",\n        \"virtual_table\": \"SELECT name FROM head WHERE born_state != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT h1.born_state\nFROM department d1\nJOIN management m1 ON d1.Department_ID = m1.department_ID\nJOIN head h1 ON m1.head_ID = h1.head_ID\nWHERE d1.Name = 'Treasury'\nUNION\nSELECT DISTINCT h2.born_state\nFROM department d2\nJOIN management m2 ON d2.Department_ID = m2.department_ID\nJOIN head h2 ON m2.head_ID = h2.head_ID\nWHERE d2.Name = 'Homeland Security';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT h1.born_state \nFROM head h1 \nJOIN management m1 ON h1.head_ID = m1.head_ID \nJOIN department d1 ON m1.department_ID = d1.Department_ID \nWHERE d1.Name = 'Treasury' \n   OR d1.Name = 'Homeland Security' \nGROUP BY h1.born_state \nHAVING COUNT(DISTINCT d1.Name) = 2;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the states of birth for department heads from the 'head' table, grouped by state. The placeholder in the HAVING clause represents the minimum count of department heads required for a state to be included in the results.\",\n        \"virtual_table\": \"SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT h1.born_state \nFROM head h1 \nJOIN management m1 ON h1.head_ID = m1.head_ID \nJOIN department d1 ON m1.department_ID = d1.Department_ID \nWHERE d1.Name = 'Treasury' \nUNION \nSELECT h2.born_state \nFROM head h2 \nJOIN management m2 ON h2.head_ID = m2.head_ID \nJOIN department d2 ON m2.department_ID = d2.Department_ID \nWHERE d2.Name = 'Homeland Security';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of department heads from the 'head' table who were not born in a specific state. The placeholder in the WHERE clause represents the state name that is being excluded.\",\n        \"virtual_table\": \"SELECT name FROM head WHERE born_state != [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the states of birth for department heads from the 'head' table, grouped by state. The placeholder in the HAVING clause represents the minimum count of department heads required for a state to be included in the results.\",\n        \"virtual_table\": \"SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT h1.born_state\nFROM department d1\nJOIN management m1 ON d1.Department_ID = m1.department_ID\nJOIN head h1 ON m1.head_ID = h1.head_ID\nWHERE d1.Name = 'Treasury'\nUNION\nSELECT DISTINCT h2.born_state\nFROM department d2\nJOIN management m2 ON d2.Department_ID = m2.department_ID\nJOIN head h2 ON m2.head_ID = h2.head_ID\nWHERE d2.Name = 'Homeland Security';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT DISTINCT h1.born_state\nFROM department d1\nJOIN management m1 ON d1.Department_ID = m1.department_ID\nJOIN head h1 ON m1.head_ID = h1.head_ID\nWHERE d1.Name = 'Treasury'\nUNION\nSELECT DISTINCT h2.born_state\nFROM department d2\nJOIN management m2 ON d2.Department_ID = m2.department_ID\nJOIN head h2 ON m2.head_ID = h2.head_ID\nWHERE d2.Name = 'Homeland Security';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.19",
        "c_low": "SELECT Farm_ID, Total_Horses FROM farm ORDER BY Total_Horses ASC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Farm_ID, Total_Horses FROM farm ORDER BY Total_Horses ASC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT Farm_ID, Total_Horses FROM farm ORDER BY Total_Horses ASC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT Farm_ID, Total_Horses FROM farm ORDER BY Total_Horses ASC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT Farm_ID, Total_Horses FROM farm ORDER BY Total_Horses ASC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT Farm_ID, Total_Horses FROM farm ORDER BY Total_Horses ASC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.44",
        "c_low": "SELECT Status, COUNT(*) AS City_Count\nFROM city\nGROUP BY Status\nORDER BY City_Count DESC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Status, COUNT(*) AS City_Count FROM city GROUP BY Status ORDER BY City_Count DESC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the status of cities that have hosted competitions, grouped by the city identifier. The results are ordered by the number of competitions hosted in descending order, with a limit on the number of cities returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the official names and current statuses of cities from the 'city' table, ordered by their population in descending order. The placeholder in the LIMIT clause represents the maximum number of cities to be returned.\",\n        \"virtual_table\": \"SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT Status, COUNT(*) AS City_Count FROM city GROUP BY Status ORDER BY City_Count DESC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the official names of cities that have hosted more than a specified number of competitions. The placeholder in the HAVING clause represents the minimum count of competitions that a city must have hosted to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Status, COUNT(*) AS City_Count \nFROM city \nGROUP BY Status \nORDER BY City_Count DESC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the official names and current statuses of cities from the 'city' table, ordered by their population in descending order. The placeholder in the LIMIT clause represents the maximum number of cities to be returned.\",\n        \"virtual_table\": \"SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Status, COUNT(*) AS City_Count FROM city GROUP BY Status ORDER BY City_Count DESC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the status of cities that have hosted competitions, grouped by the city identifier. The results are ordered by the number of competitions hosted in descending order, with a limit on the number of cities returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the official names of cities that have hosted more than a specified number of competitions. The placeholder in the HAVING clause represents the minimum count of competitions that a city must have hosted to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Status, COUNT(*) AS City_Count\nFROM city\nGROUP BY Status\nORDER BY City_Count DESC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.45",
        "c_low": "SELECT Status, COUNT(*) AS Frequency \nFROM city \nGROUP BY Status \nORDER BY Frequency ASC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Status, COUNT(*) AS Frequency FROM city GROUP BY Status ORDER BY Frequency ASC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the official names and current statuses of cities from the 'city' table, ordered by their population in descending order. The placeholder in the LIMIT clause represents the maximum number of cities to be returned.\",\n        \"virtual_table\": \"SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the status of cities that have hosted competitions, grouped by the city identifier. The results are ordered by the number of competitions hosted in descending order, with a limit on the number of cities returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT Status, COUNT(*) AS Frequency \nFROM city \nGROUP BY Status \nORDER BY Frequency ASC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT Status, COUNT(Status) AS Frequency FROM city GROUP BY Status ORDER BY Frequency ASC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the official names and current statuses of cities from the 'city' table, ordered by their population in descending order. The placeholder in the LIMIT clause represents the maximum number of cities to be returned.\",\n        \"virtual_table\": \"SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Status, COUNT(*) AS Frequency FROM city GROUP BY Status ORDER BY Frequency ASC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the status of cities that have hosted competitions, grouped by the city identifier. The results are ordered by the number of competitions hosted in descending order, with a limit on the number of cities returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Status, COUNT(*) AS Frequency \nFROM city \nGROUP BY Status \nORDER BY Frequency ASC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.46",
        "c_low": "SELECT Status, COUNT(*) as Count\nFROM city\nGROUP BY Status\nORDER BY Count DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Status, COUNT(*) as Count FROM city GROUP BY Status ORDER BY Count DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the status of cities that have hosted competitions, grouped by the city identifier. The results are ordered by the number of competitions hosted in descending order, with a limit on the number of cities returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the official names and current statuses of cities from the 'city' table, ordered by their population in descending order. The placeholder in the LIMIT clause represents the maximum number of cities to be returned.\",\n        \"virtual_table\": \"SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the themes of competitions hosted in cities that have a population greater than a specified number. The placeholder in the WHERE clause represents the population threshold.\",\n        \"virtual_table\": \"SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT Status, COUNT(*) as Count\nFROM city\nGROUP BY Status\nORDER BY Count DESC\nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT Status, COUNT(Status) AS Status_Count FROM city GROUP BY Status ORDER BY Status_Count DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the official names and current statuses of cities from the 'city' table, ordered by their population in descending order. The placeholder in the LIMIT clause represents the maximum number of cities to be returned.\",\n        \"virtual_table\": \"SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Status, COUNT(*) as Count FROM city GROUP BY Status ORDER BY Count DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the status of cities that have hosted competitions, grouped by the city identifier. The results are ordered by the number of competitions hosted in descending order, with a limit on the number of cities returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the themes of competitions hosted in cities that have a population greater than a specified number. The placeholder in the WHERE clause represents the population threshold.\",\n        \"virtual_table\": \"SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Status, COUNT(*) as Count\nFROM city\nGROUP BY Status\nORDER BY Count DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.47",
        "c_low": "SELECT Status, COUNT(Status) AS Status_Count\nFROM city\nGROUP BY Status\nORDER BY Status_Count DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Status, COUNT(*) as Status_Count FROM city GROUP BY Status ORDER BY Status_Count DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the status of cities that have hosted competitions, grouped by the city identifier. The results are ordered by the number of competitions hosted in descending order, with a limit on the number of cities returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the official names and current statuses of cities from the 'city' table, ordered by their population in descending order. The placeholder in the LIMIT clause represents the maximum number of cities to be returned.\",\n        \"virtual_table\": \"SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the themes of competitions hosted in cities that have a population greater than a specified number. The placeholder in the WHERE clause represents the population threshold.\",\n        \"virtual_table\": \"SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT Status, COUNT(Status) AS Status_Count\nFROM city\nGROUP BY Status\nORDER BY Status_Count DESC\nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT Status, COUNT(Status) AS Status_Count FROM city GROUP BY Status ORDER BY Status_Count DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the official names and current statuses of cities from the 'city' table, ordered by their population in descending order. The placeholder in the LIMIT clause represents the maximum number of cities to be returned.\",\n        \"virtual_table\": \"SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Status, COUNT(*) as Status_Count FROM city GROUP BY Status ORDER BY Status_Count DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the status of cities that have hosted competitions, grouped by the city identifier. The results are ordered by the number of competitions hosted in descending order, with a limit on the number of cities returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the themes of competitions hosted in cities that have a population greater than a specified number. The placeholder in the WHERE clause represents the population threshold.\",\n        \"virtual_table\": \"SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Status, COUNT(Status) AS Status_Count\nFROM city\nGROUP BY Status\nORDER BY Status_Count DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.50",
        "c_low": "SELECT Status FROM city WHERE Population > 1500 AND Population < 500;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Status FROM city WHERE Population > 1500 AND Population < 500",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the official names and current statuses of cities from the 'city' table, ordered by their population in descending order. The placeholder in the LIMIT clause represents the maximum number of cities to be returned.\",\n        \"virtual_table\": \"SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the status of cities that have hosted competitions, grouped by the city identifier. The results are ordered by the number of competitions hosted in descending order, with a limit on the number of cities returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the themes of competitions hosted in cities that have a population greater than a specified number. The placeholder in the WHERE clause represents the population threshold.\",\n        \"virtual_table\": \"SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT Status FROM city WHERE Population > 1500 AND Population < 500;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT Status FROM city WHERE Population > 1500 AND Population < 500;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the official names and current statuses of cities from the 'city' table, ordered by their population in descending order. The placeholder in the LIMIT clause represents the maximum number of cities to be returned.\",\n        \"virtual_table\": \"SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Status FROM city WHERE Population > 1500 AND Population < 500",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the status of cities that have hosted competitions, grouped by the city identifier. The results are ordered by the number of competitions hosted in descending order, with a limit on the number of cities returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the themes of competitions hosted in cities that have a population greater than a specified number. The placeholder in the WHERE clause represents the population threshold.\",\n        \"virtual_table\": \"SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Status FROM city WHERE Population > 1500 AND Population < 500;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.51",
        "c_low": "SELECT DISTINCT Status FROM city WHERE Population > 1500 OR Population < 500;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT DISTINCT Status FROM city WHERE Population > 1500 OR Population < 500;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the official names and current statuses of cities from the 'city' table, ordered by their population in descending order. The placeholder in the LIMIT clause represents the maximum number of cities to be returned.\",\n        \"virtual_table\": \"SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the themes of competitions hosted in cities that have a population greater than a specified number. The placeholder in the WHERE clause represents the population threshold.\",\n        \"virtual_table\": \"SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the status of cities that have hosted competitions, grouped by the city identifier. The results are ordered by the number of competitions hosted in descending order, with a limit on the number of cities returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT Status FROM city WHERE Population > 1500 OR Population < 500;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the official names of cities that have hosted more than a specified number of competitions. The placeholder in the HAVING clause represents the minimum count of competitions that a city must have hosted to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT Status FROM city WHERE Population > 1500 OR Population < 500;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the official names and current statuses of cities from the 'city' table, ordered by their population in descending order. The placeholder in the LIMIT clause represents the maximum number of cities to be returned.\",\n        \"virtual_table\": \"SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT Status FROM city WHERE Population > 1500 UNION SELECT DISTINCT Status FROM city WHERE Population < 500;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the themes of competitions hosted in cities that have a population greater than a specified number. The placeholder in the WHERE clause represents the population threshold.\",\n        \"virtual_table\": \"SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the status of cities that have hosted competitions, grouped by the city identifier. The results are ordered by the number of competitions hosted in descending order, with a limit on the number of cities returned based on a specified number.\",\n        \"virtual_table\": \"SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the official names of cities that have hosted more than a specified number of competitions. The placeholder in the HAVING clause represents the minimum count of competitions that a city must have hosted to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT Status FROM city WHERE Population > 1500 OR Population < 500;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.56",
        "c_low": "SELECT course_name, COUNT(student_id) AS number_of_students \nFROM (\n    SELECT T1.student_id, T2.course_name \n    FROM Student_Course_Registrations AS T1 \n    JOIN Courses AS T2 ON T1.course_id = T2.course_id\n) AS course_student_list \nGROUP BY course_name \nORDER BY number_of_students DESC \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Registrations AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id ORDER BY COUNT(*) DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of students who attended a specific course from the 'Courses' table. The placeholder in the WHERE clause represents the name of the course being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    }\n}\n",
        "c_high": "SELECT course_id, COUNT(student_id) AS student_count \nFROM Student_Course_Registrations \nGROUP BY course_id \nORDER BY student_count DESC \nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT course_id, COUNT(student_id) AS student_count\nFROM Student_Course_Registrations\nGROUP BY course_id\nORDER BY student_count DESC\nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Registrations AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "t_3+": "SELECT course_id, COUNT(student_id) AS student_count\nFROM Student_Course_Registrations\nGROUP BY course_id\nORDER BY student_count DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.58",
        "c_low": "SELECT student_id FROM (SELECT student_id, COUNT(course_id) AS course_count FROM Student_Course_Registrations GROUP BY student_id) WHERE course_count = (SELECT MIN(course_count) FROM (SELECT COUNT(course_id) AS course_count FROM Student_Course_Registrations GROUP BY student_id));",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT student_id FROM Student_Course_Registrations GROUP BY student_id HAVING COUNT(course_id) = (SELECT MIN(course_count) FROM (SELECT COUNT(course_id) AS course_count FROM Student_Course_Registrations GROUP BY student_id));",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of students who attended a specific course from the 'Courses' table. The placeholder in the WHERE clause represents the name of the course being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT student_id FROM (SELECT T1.student_id, COUNT(*) AS course_count FROM Students AS T1 JOIN Student_Course_Registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id) AS course_counts ORDER BY course_count ASC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Students' table who have not attended any courses. The subquery checks the 'Student_Course_Attendance' table to filter out those students who have registered for and attended courses.\",\n        \"virtual_table\": \"SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    }\n}\n",
        "t_1": "SELECT student_id\nFROM Student_Course_Registrations\nGROUP BY student_id\nHAVING COUNT(course_id) = (\n    SELECT MIN(course_count)\n    FROM (\n        SELECT COUNT(course_id) AS course_count\n        FROM Student_Course_Registrations\n        GROUP BY student_id\n    ) AS course_counts\n);",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT student_id FROM Student_Course_Registrations GROUP BY student_id ORDER BY COUNT(course_id) ASC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Students' table who have not attended any courses. The subquery checks the 'Student_Course_Attendance' table to filter out those students who have registered for and attended courses.\",\n        \"virtual_table\": \"SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "t_3+": "SELECT student_id\nFROM Student_Course_Registrations\nGROUP BY student_id\nHAVING COUNT(course_id) = (\n    SELECT MIN(course_count)\n    FROM (\n        SELECT COUNT(course_id) AS course_count\n        FROM Student_Course_Registrations\n        GROUP BY student_id\n    ) AS course_counts\n);",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.59",
        "c_low": "SELECT student_id FROM (SELECT student_id, COUNT(course_id) AS course_count FROM Student_Course_Registrations GROUP BY student_id) WHERE course_count = (SELECT MIN(course_count) FROM (SELECT COUNT(course_id) AS course_count FROM Student_Course_Registrations GROUP BY student_id));",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT student_id FROM Student_Course_Registrations GROUP BY student_id HAVING COUNT(course_id) = (SELECT MIN(course_count) FROM (SELECT COUNT(course_id) AS course_count FROM Student_Course_Registrations GROUP BY student_id));",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT student_id FROM (SELECT T1.student_id, COUNT(*) AS course_count FROM Students AS T1 JOIN Student_Course_Registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id) AS course_counts WHERE course_count = (SELECT MIN(course_count) FROM (SELECT COUNT(*) AS course_count FROM Students AS T1 JOIN Student_Course_Registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id));",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Students' table who have not attended any courses. The subquery checks the 'Student_Course_Attendance' table to filter out those students who have registered for and attended courses.\",\n        \"virtual_table\": \"SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    }\n}\n",
        "t_1": "SELECT student_id FROM Student_Course_Registrations GROUP BY student_id HAVING COUNT(course_id) = (SELECT MIN(course_count) FROM (SELECT COUNT(course_id) AS course_count FROM Student_Course_Registrations GROUP BY student_id));",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT student_id FROM Student_Course_Registrations GROUP BY student_id HAVING COUNT(course_id) = (SELECT MIN(course_count) FROM (SELECT COUNT(course_id) AS course_count FROM Student_Course_Registrations GROUP BY student_id));",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Students' table who have not attended any courses. The subquery checks the 'Student_Course_Attendance' table to filter out those students who have registered for and attended courses.\",\n        \"virtual_table\": \"SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    }\n}\n",
        "t_3+": "SELECT student_id FROM Student_Course_Registrations GROUP BY student_id HAVING COUNT(course_id) = (SELECT MIN(course_count) FROM (SELECT COUNT(course_id) AS course_count FROM Student_Course_Registrations GROUP BY student_id));",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.64",
        "c_low": "SELECT DISTINCT student_id FROM Student_Course_Attendance;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT student_id FROM Student_Course_Attendance;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT student_id FROM Student_Course_Attendance;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Students' table who have not attended any courses. The subquery checks the 'Student_Course_Attendance' table to filter out those students who have registered for and attended courses.\",\n        \"virtual_table\": \"SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT student_id FROM Student_Course_Attendance;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT student_id FROM Student_Course_Attendance;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT student_id FROM Student_Course_Attendance;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.65",
        "c_low": "SELECT DISTINCT student_id FROM Student_Course_Attendance;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT student_id FROM Student_Course_Attendance;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the count of students who attended a specific course from the 'Courses' table. The placeholder in the WHERE clause represents the name of the course being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT student_id FROM Student_Course_Attendance;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Students' table who have not attended any courses. The subquery checks the 'Student_Course_Attendance' table to filter out those students who have registered for and attended courses.\",\n        \"virtual_table\": \"SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT student_id FROM Student_Course_Attendance;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT student_id FROM Student_Course_Attendance;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT student_id FROM Student_Course_Attendance;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.67",
        "c_low": "SELECT S.student_id, P.first_name, P.middle_name, P.last_name, R.registration_date \nFROM Students AS S \nJOIN People AS P ON S.student_id = P.person_id \nJOIN Student_Course_Registrations AS R ON S.student_id = R.student_id \nWHERE R.registration_date = (SELECT MAX(registration_date) FROM Student_Course_Registrations)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT S.student_details FROM Students AS S JOIN Student_Course_Registrations AS R ON S.student_id = R.student_id ORDER BY R.registration_date DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    }\n}\n",
        "c_high": "SELECT S.student_id, S.student_details \nFROM Students S \nJOIN Student_Course_Registrations R ON S.student_id = R.student_id \nWHERE R.registration_date = (SELECT MAX(registration_date) FROM Student_Course_Registrations)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    }\n}\n",
        "t_1": "SELECT s.student_id, s.student_details \nFROM Students s \nJOIN Student_Course_Registrations scr ON s.student_id = scr.student_id \nORDER BY scr.registration_date DESC \nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT S.student_id, S.student_details \nFROM Students AS S \nJOIN Student_Course_Registrations AS R ON S.student_id = R.student_id \nWHERE R.registration_date = (SELECT MAX(registration_date) FROM Student_Course_Registrations)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT s.student_id, s.student_details \nFROM Students s \nJOIN Student_Course_Registrations scr ON s.student_id = scr.student_id \nORDER BY scr.registration_date DESC \nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.68",
        "c_low": "SELECT T1.student_id, T2.course_name, T1.registration_date \nFROM student_course_registrations AS T1 \nJOIN courses AS T2 ON T1.course_id = T2.course_id \nORDER BY T1.registration_date DESC \nLIMIT 10;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT S.student_id, S.student_details, SCR.registration_date, C.course_name \nFROM Students AS S \nJOIN Student_Course_Registrations AS SCR ON S.student_id = SCR.student_id \nJOIN Courses AS C ON SCR.course_id = C.course_id \nORDER BY SCR.registration_date DESC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    }\n}\n",
        "c_high": "SELECT S.student_id, S.student_details, C.course_id, C.course_name, R.registration_date \nFROM Students AS S \nJOIN Student_Course_Registrations AS R ON S.student_id = R.student_id \nJOIN Courses AS C ON R.course_id = C.course_id \nWHERE R.registration_date = (SELECT MAX(registration_date) FROM Student_Course_Registrations)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    }\n}\n",
        "t_1": "SELECT s.student_id, s.student_details, scr.registration_date, c.course_name \nFROM Students s \nJOIN Student_Course_Registrations scr ON s.student_id = scr.student_id \nJOIN Courses c ON scr.course_id = c.course_id \nORDER BY scr.registration_date DESC \nLIMIT 10;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT S.student_id, S.student_details, C.course_name, SCR.registration_date \nFROM Students AS S \nJOIN Student_Course_Registrations AS SCR ON S.student_id = SCR.student_id \nJOIN Courses AS C ON SCR.course_id = C.course_id \nORDER BY SCR.registration_date DESC \nLIMIT 10;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT s.student_id, s.student_details, scr.registration_date, c.course_name \nFROM Students s \nJOIN Student_Course_Registrations scr ON s.student_id = scr.student_id \nJOIN Courses c ON scr.course_id = c.course_id \nORDER BY scr.registration_date DESC \nLIMIT 10;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.76",
        "c_low": "SELECT candidate_id FROM Candidate_Assessments ORDER BY assessment_date DESC LIMIT 1",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of candidate identifiers from the 'Candidate_Assessments' table, ordered by the date of assessment in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT T2.candidate_id FROM candidates AS T2 JOIN student_course_attendance AS T1 ON T2.candidate_id = T1.student_id ORDER BY T1.date_of_attendance DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table retrieves the unique identifier of candidates from the 'candidates' table who are associated with a person in the 'people' table based on a specific email address. The placeholder in the WHERE clause represents the email address of the person.\",\n        \"virtual_table\": \"SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT candidate_id FROM candidates WHERE candidate_id IN (SELECT student_id FROM (SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance) AS combined_courses) ORDER BY candidate_id DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT candidate_id FROM Candidate_Assessments ORDER BY assessment_date DESC LIMIT 1",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of candidate identifiers from the 'Candidate_Assessments' table, ordered by the date of assessment in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT candidate_id FROM candidates WHERE candidate_id IN (SELECT student_id FROM student_course_attendance ORDER BY date_of_attendance DESC LIMIT 1)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT c.candidate_id\nFROM Candidates c\nJOIN Student_Course_Attendance sca ON c.candidate_id = sca.student_id\nJOIN Student_Course_Registrations scr ON sca.student_id = scr.student_id AND sca.course_id = scr.course_id\nORDER BY sca.date_of_attendance DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.77",
        "c_low": "SELECT S.student_id, P.first_name, P.last_name, COUNT(SCR.course_id) AS course_count\nFROM Students AS S\nJOIN People AS P ON S.student_id = P.person_id\nJOIN Student_Course_Registrations AS SCR ON S.student_id = SCR.student_id\nGROUP BY S.student_id, P.first_name, P.last_name\nORDER BY course_count DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT S.student_id, S.student_details \nFROM Students AS S \nJOIN Student_Course_Registrations AS R ON S.student_id = R.student_id \nGROUP BY S.student_id \nORDER BY COUNT(R.course_id) DESC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of students who attended a specific course from the 'Courses' table. The placeholder in the WHERE clause represents the name of the course being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    }\n}\n",
        "c_high": "SELECT S.student_id, S.student_details \nFROM Students AS S \nJOIN (\n    SELECT T1.student_id, COUNT(*) AS course_count \n    FROM Students AS T1 \n    JOIN Student_Course_Registrations AS T2 ON T1.student_id = T2.student_id \n    GROUP BY T1.student_id \n) AS CourseCounts ON S.student_id = CourseCounts.student_id \nWHERE CourseCounts.course_count = (\n    SELECT MAX(course_count) \n    FROM (\n        SELECT COUNT(*) AS course_count \n        FROM Student_Course_Registrations \n        GROUP BY student_id\n    )\n)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    }\n}\n",
        "t_1": "SELECT s.student_id, s.student_details\nFROM Students s\nJOIN Student_Course_Registrations scr ON s.student_id = scr.student_id\nGROUP BY s.student_id\nORDER BY COUNT(scr.course_id) DESC\nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T1.student_id, T1.student_details \nFROM students AS T1 \nJOIN (\n    SELECT T1.student_id, COUNT(*) AS course_count \n    FROM students AS T1 \n    JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id \n    GROUP BY T1.student_id \n) AS T2 ON T1.student_id = T2.student_id \nWHERE T2.course_count = (\n    SELECT MAX(course_count) \n    FROM (\n        SELECT COUNT(*) AS course_count \n        FROM student_course_registrations \n        GROUP BY student_id\n    )\n)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    }\n}\n",
        "t_3+": "SELECT s.student_id, s.student_details\nFROM Students s\nJOIN Student_Course_Registrations scr ON s.student_id = scr.student_id\nGROUP BY s.student_id\nORDER BY COUNT(scr.course_id) DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.78",
        "c_low": "SELECT student_id, COUNT(course_id) AS course_count\nFROM Student_Course_Registrations\nGROUP BY student_id\nORDER BY course_count DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT S.student_id, S.student_details \nFROM Students AS S \nJOIN Student_Course_Registrations AS R ON S.student_id = R.student_id \nGROUP BY S.student_id \nORDER BY COUNT(R.course_id) DESC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of students who attended a specific course from the 'Courses' table. The placeholder in the WHERE clause represents the name of the course being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    }\n}\n",
        "c_high": "SELECT S.student_id, S.student_details \nFROM Students AS S \nJOIN (\n    SELECT T1.student_id, COUNT(*) AS course_count \n    FROM Students AS T1 \n    JOIN Student_Course_Registrations AS T2 ON T1.student_id = T2.student_id \n    GROUP BY T1.student_id \n) AS CourseCounts ON S.student_id = CourseCounts.student_id \nWHERE CourseCounts.course_count = (\n    SELECT MAX(course_count) \n    FROM (\n        SELECT COUNT(*) AS course_count \n        FROM Student_Course_Registrations \n        GROUP BY student_id\n    )\n)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    }\n}\n",
        "t_1": "SELECT s.student_id, s.student_details, COUNT(scr.course_id) AS course_count\nFROM Students s\nJOIN Student_Course_Registrations scr ON s.student_id = scr.student_id\nGROUP BY s.student_id, s.student_details\nORDER BY course_count DESC\nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T1.student_id, T1.student_details \nFROM students AS T1 \nJOIN (\n    SELECT T1.student_id, COUNT(*) AS course_count \n    FROM students AS T1 \n    JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id \n    GROUP BY T1.student_id \n) AS T3 ON T1.student_id = T3.student_id \nWHERE T3.course_count = (\n    SELECT MAX(course_count) \n    FROM (\n        SELECT COUNT(*) AS course_count \n        FROM students AS T1 \n        JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id \n        GROUP BY T1.student_id\n    ) AS T4\n);",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    }\n}\n",
        "t_3+": "SELECT s.student_id, p.first_name, p.last_name, COUNT(scr.course_id) AS course_count\nFROM Students s\nJOIN People p ON s.student_id = p.person_id\nJOIN Student_Course_Registrations scr ON s.student_id = scr.student_id\nGROUP BY s.student_id, p.first_name, p.last_name\nORDER BY course_count DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.81",
        "c_low": "SELECT course_name, COUNT(student_id) AS registered_students_count \nFROM (\n    SELECT T1.student_id, T2.course_name \n    FROM Student_Course_Registrations AS T1 \n    JOIN Courses AS T2 ON T1.course_id = T2.course_id\n) AS course_student_list \nGROUP BY course_name;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT C.course_name, COUNT(SCR.student_id) AS registered_students_count \nFROM Courses AS C \nJOIN Student_Course_Registrations AS SCR ON C.course_id = SCR.course_id \nGROUP BY C.course_id \nORDER BY registered_students_count DESC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of students who attended a specific course from the 'Courses' table. The placeholder in the WHERE clause represents the name of the course being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    }\n}\n",
        "c_high": "SELECT C.course_name, COUNT(SCR.student_id) AS registered_students_count \nFROM Courses AS C \nLEFT JOIN Student_Course_Registrations AS SCR ON C.course_id = SCR.course_id \nGROUP BY C.course_id;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Courses.course_name, COUNT(Student_Course_Registrations.student_id) AS registered_students_count\nFROM Courses\nLEFT JOIN Student_Course_Registrations ON Courses.course_id = Student_Course_Registrations.course_id\nGROUP BY Courses.course_name;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT T2.course_name, COUNT(T1.student_id) AS registered_students_count \nFROM Student_Course_Registrations AS T1 \nJOIN Courses AS T2 ON T1.course_id = T2.course_id \nGROUP BY T2.course_name;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Courses.course_name, COUNT(Student_Course_Registrations.student_id) AS registered_students_count\nFROM Courses\nLEFT JOIN Student_Course_Registrations ON Courses.course_id = Student_Course_Registrations.course_id\nGROUP BY Courses.course_name;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.82",
        "c_low": "SELECT T2.course_id, COUNT(T1.student_id) AS student_count, T2.course_name \nFROM Student_Course_Registrations AS T1 \nJOIN Courses AS T2 ON T1.course_id = T2.course_id \nGROUP BY T2.course_id, T2.course_name;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT C.course_id, C.course_name, COUNT(SCR.student_id) AS student_count \nFROM Courses AS C \nLEFT JOIN Student_Course_Registrations AS SCR ON C.course_id = SCR.course_id \nGROUP BY C.course_id, C.course_name;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of students who attended a specific course from the 'Courses' table. The placeholder in the WHERE clause represents the name of the course being queried.\",\n        \"virtual_table\": \"SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    }\n}\n",
        "c_high": "SELECT C.course_id, C.course_name, COUNT(SCR.student_id) AS student_count \nFROM Courses AS C \nLEFT JOIN Student_Course_Registrations AS SCR ON C.course_id = SCR.course_id \nGROUP BY C.course_id, C.course_name;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    }\n}\n",
        "t_1": "SELECT c.course_id, c.course_name, COUNT(scr.student_id) AS student_count\nFROM Courses c\nLEFT JOIN Student_Course_Registrations scr ON c.course_id = scr.course_id\nGROUP BY c.course_id, c.course_name;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT C.course_id, C.course_name, COUNT(SCR.student_id) AS student_count \nFROM Courses AS C \nLEFT JOIN Student_Course_Registrations AS SCR ON C.course_id = SCR.course_id \nGROUP BY C.course_id, C.course_name;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    }\n}\n",
        "t_3+": "SELECT Courses.course_id, COUNT(Student_Course_Registrations.student_id) AS student_count, Courses.course_name\nFROM Courses\nLEFT JOIN Student_Course_Registrations ON Courses.course_id = Student_Course_Registrations.course_id\nGROUP BY Courses.course_id, Courses.course_name;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.89",
        "c_low": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = '301' ORDER BY registration_date DESC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = '301' ORDER BY registration_date DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = '301' ORDER BY registration_date DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Students' table who have not attended any courses. The subquery checks the 'Student_Course_Attendance' table to filter out those students who have registered for and attended courses.\",\n        \"virtual_table\": \"SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\"\n    }\n}\n",
        "t_1": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = '301' ORDER BY registration_date DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = '301' ORDER BY registration_date DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    }\n}\n",
        "t_3+": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = '301' ORDER BY registration_date DESC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.90",
        "c_low": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = '301' ORDER BY registration_date DESC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = '301' ORDER BY registration_date DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = '301' ORDER BY registration_date DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Students' table who have not attended any courses. The subquery checks the 'Student_Course_Attendance' table to filter out those students who have registered for and attended courses.\",\n        \"virtual_table\": \"SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\"\n    }\n}\n",
        "t_1": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = '301' ORDER BY registration_date DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = '301' ORDER BY registration_date DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "t_3+": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = '301' ORDER BY registration_date DESC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.92",
        "c_low": "SELECT DISTINCT T1.city FROM Addresses AS T1 JOIN People_Addresses AS T2 ON T1.address_id = T2.address_id",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique cities from the 'Addresses' table that are associated with people through the 'People_Addresses' table. The placeholder in the JOIN clause represents the relationship between addresses and people.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique cities where students are located, by joining the 'Addresses', 'People_Addresses', and 'Students' tables. The placeholders in the query represent the necessary identifiers for the relationships between these tables.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT city FROM Addresses;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT DISTINCT city FROM Addresses;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT DISTINCT city FROM Addresses;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT DISTINCT T1.city FROM Addresses AS T1 JOIN People_Addresses AS T2 ON T1.address_id = T2.address_id",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique cities from the 'Addresses' table that are associated with people through the 'People_Addresses' table. The placeholder in the JOIN clause represents the relationship between addresses and people.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT T1.city FROM Addresses AS T1 JOIN People_Addresses AS T2 ON T1.address_id = T2.address_id JOIN Students AS T3 ON T2.person_id = T3.student_id",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique cities where students are located, by joining the 'Addresses', 'People_Addresses', and 'Students' tables. The placeholders in the query represent the necessary identifiers for the relationships between these tables.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id\"\n    }\n}\n"
    },
    {
        "sample_id": "train.93",
        "c_low": "SELECT DISTINCT T1.city FROM Addresses AS T1 JOIN People_Addresses AS T2 ON T1.address_id = T2.address_id JOIN Students AS T3 ON T2.person_id = T3.student_id",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique cities where students are located, by joining the 'Addresses', 'People_Addresses', and 'Students' tables. The placeholders in the query represent the necessary identifiers for the relationships between these tables.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique cities from the 'Addresses' table that are associated with people through the 'People_Addresses' table. The placeholder in the JOIN clause represents the relationship between addresses and people.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT a.city\nFROM Addresses a\nJOIN People_Addresses pa ON a.address_id = pa.address_id\nJOIN Students s ON pa.person_id = s.student_id;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT DISTINCT a.city\nFROM Addresses a\nJOIN People_Addresses pa ON a.address_id = pa.address_id\nJOIN Students s ON pa.person_id = s.student_id;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT DISTINCT a.city\nFROM Addresses a\nJOIN People_Addresses pa ON a.address_id = pa.address_id\nJOIN Students s ON pa.person_id = s.student_id;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT DISTINCT T1.city FROM Addresses AS T1 JOIN People_Addresses AS T2 ON T1.address_id = T2.address_id JOIN Students AS T3 ON T2.person_id = T3.student_id",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique cities from the 'Addresses' table that are associated with people through the 'People_Addresses' table. The placeholder in the JOIN clause represents the relationship between addresses and people.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT T1.city FROM Addresses AS T1 JOIN People_Addresses AS T2 ON T1.address_id = T2.address_id JOIN Students AS T3 ON T2.person_id = T3.student_id",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique cities where students are located, by joining the 'Addresses', 'People_Addresses', and 'Students' tables. The placeholders in the query represent the necessary identifiers for the relationships between these tables.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id\"\n    }\n}\n"
    },
    {
        "sample_id": "train.103",
        "c_low": "SELECT S.student_id, P.first_name, P.middle_name, P.last_name, SC.course_name \nFROM (SELECT T1.student_id, T2.course_name \n      FROM Student_Course_Registrations AS T1 \n      JOIN Courses AS T2 ON T1.course_id = T2.course_id) AS S \nLEFT JOIN Student_Course_Attendance AS A ON S.student_id = A.student_id \nLEFT JOIN People AS P ON S.student_id = P.person_id \nWHERE A.course_id IS NULL;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT S.student_id, S.student_details \nFROM Students AS S \nJOIN Student_Course_Registrations AS R ON S.student_id = R.student_id \nLEFT JOIN Student_Course_Attendance AS A ON R.student_id = A.student_id AND R.course_id = A.course_id \nWHERE A.student_id IS NULL;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT S.student_id, S.student_details \nFROM Students S \nWHERE S.student_id IN (SELECT student_id FROM Student_Course_Registrations) \nAND S.student_id NOT IN (SELECT student_id FROM Student_Course_Attendance);",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Students' table who have not attended any courses. The subquery checks the 'Student_Course_Attendance' table to filter out those students who have registered for and attended courses.\",\n        \"virtual_table\": \"SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    }\n}\n",
        "t_1": "SELECT s.student_id, s.student_details \nFROM Students s \nJOIN Student_Course_Registrations scr ON s.student_id = scr.student_id \nLEFT JOIN Student_Course_Attendance sca ON scr.student_id = sca.student_id AND scr.course_id = sca.course_id \nWHERE sca.student_id IS NULL;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT * FROM Students WHERE student_id IN (SELECT student_id FROM Student_Course_Registrations) AND student_id NOT IN (SELECT student_id FROM Student_Course_Attendance)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Students' table who have not attended any courses. The subquery checks the 'Student_Course_Attendance' table to filter out those students who have registered for and attended courses.\",\n        \"virtual_table\": \"SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "t_3+": "SELECT s.student_id, s.student_details \nFROM Students s \nJOIN Student_Course_Registrations scr ON s.student_id = scr.student_id \nLEFT JOIN Student_Course_Attendance sca ON scr.student_id = sca.student_id AND scr.course_id = sca.course_id \nWHERE sca.student_id IS NULL;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.104",
        "c_low": "SELECT S.student_id, P.first_name, P.middle_name, P.last_name, S.student_details \nFROM Students AS S \nJOIN People AS P ON S.student_id = P.person_id \nWHERE S.student_id NOT IN (\n    SELECT DISTINCT SC.student_id \n    FROM Student_Course_Attendance AS SC\n)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT s.student_id, s.student_details \nFROM Students s \nLEFT JOIN Student_Course_Registrations r ON s.student_id = r.student_id \nLEFT JOIN Student_Course_Attendance a ON r.student_id = a.student_id AND r.course_id = a.course_id \nWHERE a.student_id IS NULL;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT * FROM Students WHERE student_id NOT IN (SELECT student_id FROM Student_Course_Attendance)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Students' table who have not attended any courses. The subquery checks the 'Student_Course_Attendance' table to filter out those students who have registered for and attended courses.\",\n        \"virtual_table\": \"SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    }\n}\n",
        "t_1": "SELECT s.student_id, s.student_details \nFROM Students s \nLEFT JOIN Student_Course_Registrations scr ON s.student_id = scr.student_id \nLEFT JOIN Student_Course_Attendance sca ON scr.student_id = sca.student_id AND scr.course_id = sca.course_id \nWHERE sca.student_id IS NULL;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT * FROM Students WHERE student_id NOT IN (SELECT student_id FROM Student_Course_Attendance)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Students' table who have not attended any courses. The subquery checks the 'Student_Course_Attendance' table to filter out those students who have registered for and attended courses.\",\n        \"virtual_table\": \"SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT s.student_id, s.student_details \nFROM Students s \nLEFT JOIN Student_Course_Registrations scr ON s.student_id = scr.student_id \nLEFT JOIN Student_Course_Attendance sca ON scr.student_id = sca.student_id AND scr.course_id = sca.course_id \nWHERE scr.student_id IS NOT NULL AND sca.student_id IS NULL;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.105",
        "c_low": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = (SELECT course_id FROM Courses WHERE course_name = 'Statistics') ORDER BY registration_date;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = (SELECT course_id FROM Courses WHERE course_name = 'Statistics') ORDER BY registration_date;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = (SELECT course_id FROM Courses WHERE course_name = 'Statistics') ORDER BY registration_date;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Students' table who have not attended any courses. The subquery checks the 'Student_Course_Attendance' table to filter out those students who have registered for and attended courses.\",\n        \"virtual_table\": \"SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\"\n    }\n}\n",
        "t_1": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = 'statistics' ORDER BY registration_date;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = (SELECT course_id FROM Courses WHERE course_name = 'Statistics') ORDER BY registration_date;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = (SELECT course_id FROM Courses WHERE course_name = 'Statistics') ORDER BY registration_date;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.106",
        "c_low": "SELECT student_id FROM (SELECT T1.student_id, T2.course_name FROM Student_Course_Registrations AS T1 JOIN Courses AS T2 ON T1.course_id = T2.course_id) WHERE course_name = 'Statistics' ORDER BY registration_date;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "c_mid": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = (SELECT course_id FROM Courses WHERE course_name = 'Statistics') ORDER BY registration_date;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course names from the 'Courses' table that have been registered for by students. The results are grouped by course ID and ordered by the number of registrations in descending order, allowing users to see the most popular courses. The placeholder in the LIMIT clause represents the maximum number of courses to return.\",\n        \"virtual_table\": \"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = (SELECT course_id FROM Courses WHERE course_name = 'Statistics') ORDER BY registration_date;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of students from the 'Students' table who have not attended any courses. The subquery checks the 'Student_Course_Attendance' table to filter out those students who have registered for and attended courses.\",\n        \"virtual_table\": \"SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a count of course registrations for each student from the 'Students' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the count function aggregates the number of courses each student is registered for.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\"\n    }\n}\n",
        "t_1": "SELECT scr.student_id \nFROM Student_Course_Registrations scr \nJOIN Courses c ON scr.course_id = c.course_id \nWHERE c.course_name = 'Statistics' \nORDER BY scr.registration_date;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student identifiers from the 'Student_Course_Attendance' table for a specific course. The placeholder in the WHERE clause represents the unique identifier of the course.\",\n        \"virtual_table\": \"SELECT student_id FROM student_course_attendance WHERE course_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT student_id FROM Student_Course_Registrations AS T1 JOIN Courses AS T2 ON T1.course_id = T2.course_id WHERE T2.course_name = 'Statistics' ORDER BY T1.registration_date;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of student IDs from the 'Courses' and 'Student_Course_Attendance' tables. It retrieves the IDs of students who attended a specific course, identified by the course name. The results are ordered by the date of attendance, allowing for a chronological view of student participation in the course.\",\n        \"virtual_table\": \"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = [PLACEHOLDER-TYPE:STRING] ORDER BY T2.date_of_attendance\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of course IDs for a specific student by combining the courses they are registered for and the courses they have attended. The placeholders in the query represent the unique identifier of the student.\",\n        \"virtual_table\": \"SELECT course_id FROM student_course_registrations WHERE student_id = [PLACEHOLDER-TYPE:NUMBER] UNION SELECT course_id FROM student_course_attendance WHERE student_id = [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of student IDs along with the names of the courses they are registered in. The data is sourced from the 'Student_Course_Registrations' table, which links students to their respective courses through a join with the 'Courses' table.\",\n        \"virtual_table\": \"SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\"\n    }\n}\n",
        "t_3+": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = (SELECT course_id FROM Courses WHERE course_name = 'Statistics') ORDER BY registration_date;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.123",
        "c_low": "SELECT zip_code, AVG(mean_temperature_f) AS average_mean_temperature\nFROM weather\nWHERE strftime('%m', date) = '08'\nGROUP BY zip_code;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the date and the temperature range (difference between maximum and minimum temperatures) from the 'weather' table, ordered by the temperature range. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT zip_code, AVG(mean_temperature_f) AS average_mean_temperature\nFROM weather\nWHERE strftime('%m', date) = '08'\nGROUP BY zip_code;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT zip_code, avg(mean_temperature_f) FROM weather WHERE date LIKE '2023-08%' GROUP BY zip_code",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average number of bikes available at stations that are not located in a specific city. The placeholder in the WHERE clause represents the name of the city to exclude from the average calculation.\",\n        \"virtual_table\": \"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "t_1": "SELECT zip_code, avg(mean_temperature_f) AS average_mean_temperature\nFROM weather\nWHERE date LIKE '2023-08%'\nGROUP BY zip_code;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT zip_code, AVG(mean_temperature_f) AS average_mean_temperature\nFROM weather\nWHERE date BETWEEN '2023-08-01' AND '2023-08-31'\nGROUP BY zip_code;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the average number of bikes available at stations that are not located in a specific city. The placeholder in the WHERE clause represents the name of the city to exclude from the average calculation.\",\n        \"virtual_table\": \"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "t_3+": "SELECT zip_code, AVG(mean_temperature_f) AS average_mean_temperature\nFROM weather\nWHERE strftime('%m', date) = '08'\nGROUP BY zip_code;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.133",
        "c_low": "SELECT start_station_name, start_station_id\nFROM trip\nWHERE strftime('%m', start_date) = '08'\nGROUP BY start_station_id, start_station_name\nORDER BY COUNT(*) DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT start_station_name, start_station_id FROM trip WHERE strftime('%Y-%m', start_date) >= '2023-08' GROUP BY start_station_id ORDER BY COUNT(*) DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique bike stations that currently have a certain number of bikes available. The query joins the 'station' table with the 'status' table to filter stations based on their bike availability, using a placeholder for the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT start_station_name, start_station_id FROM trip WHERE start_date >= '2023-08-01' GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the unique station IDs from the 'station' table located in a specific city. It intersects with the 'status' table to find stations that have an average number of available bikes greater than a specified threshold. The placeholders in the WHERE and HAVING clauses represent the city name and the minimum average bikes available, respectively.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT start_station_id, start_station_name \nFROM trip \nWHERE start_date >= '2023-08-01' \nGROUP BY start_station_id, start_station_name \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT start_station_name, start_station_id FROM trip WHERE start_date >= '2023-08-01' GROUP BY start_station_id ORDER BY COUNT(*) DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT start_station_name, start_station_id\nFROM trip\nWHERE strftime('%m', start_date) = '08'\nGROUP BY start_station_id, start_station_name\nORDER BY COUNT(*) DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.134",
        "c_low": "SELECT start_station_name, start_station_id \nFROM trip \nWHERE strftime('%Y-%m', start_date) = '2023-08' \nGROUP BY start_station_name, start_station_id \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT start_station_name, start_station_id \nFROM trip \nWHERE strftime('%Y-%m', start_date) = '2023-08' \nGROUP BY start_station_id \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique bike stations that currently have a certain number of bikes available. The query joins the 'station' table with the 'status' table to filter stations based on their bike availability, using a placeholder for the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT start_station_id, start_station_name \nFROM trip \nWHERE strftime('%Y-%m', start_date) = '2023-08' \nGROUP BY start_station_id, start_station_name \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the unique station IDs from the 'station' table located in a specific city. It intersects with the 'status' table to find stations that have an average number of available bikes greater than a specified threshold. The placeholders in the WHERE and HAVING clauses represent the city name and the minimum average bikes available, respectively.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT start_station_name, start_station_id \nFROM trip \nWHERE strftime('%Y-%m', start_date) = '2023-08' \nGROUP BY start_station_id, start_station_name \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_2": "SELECT start_station_name, start_station_id \nFROM trip \nWHERE strftime('%Y-%m', start_date) = '2023-08' \nGROUP BY start_station_id \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT start_station_name, start_station_id \nFROM trip \nWHERE strftime('%Y-%m', start_date) = '2023-08' \nGROUP BY start_station_name, start_station_id \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.135",
        "c_low": "SELECT bike_id, COUNT(*) as trip_count \nFROM trip \nWHERE zip_code = '94002' \nGROUP BY bike_id \nORDER BY trip_count DESC \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT bike_id, COUNT(*) as trip_count \nFROM trip \nWHERE zip_code = '94002' \nGROUP BY bike_id \nORDER BY trip_count DESC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique bike stations that currently have a certain number of bikes available. The query joins the 'station' table with the 'status' table to filter stations based on their bike availability, using a placeholder for the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT bike_id, COUNT(*) as trip_count \nFROM trip \nWHERE zip_code = '94002' \nGROUP BY bike_id \nORDER BY trip_count DESC \nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the average number of bikes available at stations that are not located in a specific city. The placeholder in the WHERE clause represents the name of the city to exclude from the average calculation.\",\n        \"virtual_table\": \"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT bike_id, COUNT(*) as trip_count \nFROM trip \nWHERE zip_code = '94002' \nGROUP BY bike_id \nORDER BY trip_count DESC \nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT bike_id, COUNT(*) as trip_count \nFROM trip \nWHERE zip_code = '94002' \nGROUP BY bike_id \nORDER BY trip_count DESC \nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the average number of bikes available at stations that are not located in a specific city. The placeholder in the WHERE clause represents the name of the city to exclude from the average calculation.\",\n        \"virtual_table\": \"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT bike_id, COUNT(*) AS trip_count\nFROM trip\nWHERE zip_code = '94002'\nGROUP BY bike_id\nORDER BY trip_count DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.136",
        "c_low": "SELECT bike_id FROM trip WHERE zip_code = '94002' ORDER BY duration DESC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT bike_id FROM trip WHERE zip_code = '94002' GROUP BY bike_id ORDER BY SUM(duration) DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique bike stations that currently have a certain number of bikes available. The query joins the 'station' table with the 'status' table to filter stations based on their bike availability, using a placeholder for the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT bike_id FROM trip WHERE zip_code = '94002' ORDER BY duration DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the average number of bikes available at stations that are not located in a specific city. The placeholder in the WHERE clause represents the name of the city to exclude from the average calculation.\",\n        \"virtual_table\": \"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the unique station IDs from the 'station' table located in a specific city. It intersects with the 'status' table to find stations that have an average number of available bikes greater than a specified threshold. The placeholders in the WHERE and HAVING clauses represent the city name and the minimum average bikes available, respectively.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT bike_id FROM trip WHERE zip_code = '94002' ORDER BY duration DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT bike_id FROM trip WHERE zip_code = '94002' ORDER BY duration DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique bike stations that currently have a certain number of bikes available. The query joins the 'station' table with the 'status' table to filter stations based on their bike availability, using a placeholder for the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT bike_id\nFROM trip\nWHERE zip_code = '94002'\nORDER BY duration DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.137",
        "c_low": "SELECT COUNT(*) FROM weather WHERE mean_humidity > 50 AND mean_visibility > 8;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the date and the temperature range (difference between maximum and minimum temperatures) from the 'weather' table, ordered by the temperature range. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT COUNT(*) FROM weather WHERE mean_humidity > 50 AND mean_visibility > 8;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT COUNT(*) FROM weather WHERE mean_humidity > 50 AND mean_visibility_miles > 8;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    }\n}\n",
        "t_1": "SELECT COUNT(*) FROM weather WHERE mean_humidity > 50 AND mean_visibility_miles > 8;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    }\n}\n",
        "t_2": "SELECT COUNT(*) \nFROM weather \nWHERE mean_humidity > 50 AND mean_visibility > 8;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT COUNT(*) \nFROM weather \nWHERE mean_humidity > 50 AND mean_visibility > 8;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.142",
        "c_low": "SELECT s.id FROM station s JOIN status st ON s.id = st.station_id WHERE s.city = 'San Francisco' AND st.bikes_available > 10;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T1.city = 'San Francisco' AND T2.bikes_available > 10",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique bike stations that currently have a certain number of bikes available. The query joins the 'station' table with the 'status' table to filter stations based on their bike availability, using a placeholder for the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average longitude of bike stations from the 'station' table that do not have the maximum number of available bikes reported in the 'status' table. The placeholder in the HAVING clause represents a numeric value for filtering the bike availability.\",\n        \"virtual_table\": \"SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT id FROM station WHERE city = 'San Francisco' INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available) > 10",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the unique station IDs from the 'station' table located in a specific city. It intersects with the 'status' table to find stations that have an average number of available bikes greater than a specified threshold. The placeholders in the WHERE and HAVING clauses represent the city name and the minimum average bikes available, respectively.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT s.id FROM station s JOIN status st ON s.id = st.station_id WHERE s.city = 'San Francisco' AND st.bikes_available > 10;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T1.city = 'San Francisco' GROUP BY T1.id HAVING avg(T2.bikes_available) > 10",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT s.id \nFROM station s \nJOIN status st ON s.id = st.station_id \nWHERE s.city = 'San Francisco' \nAND st.bikes_available > 10;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.143",
        "c_low": "SELECT s.name, s.id \nFROM station s \nJOIN status st ON s.id = st.station_id \nGROUP BY s.id \nHAVING AVG(st.bikes_available) > 14 OR strftime('%m', s.installation_date) = '12'",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT T1.id, T1.name \nFROM station AS T1 \nLEFT JOIN status AS T2 ON T1.id = T2.station_id \nGROUP BY T1.id, T1.name \nHAVING AVG(T2.bikes_available) > 14 OR strftime('%m', T1.installation_date) = '12'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique bike stations that currently have a certain number of bikes available. The query joins the 'station' table with the 'status' table to filter stations based on their bike availability, using a placeholder for the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average longitude of bike stations from the 'station' table that do not have the maximum number of available bikes reported in the 'status' table. The placeholder in the HAVING clause represents a numeric value for filtering the bike availability.\",\n        \"virtual_table\": \"SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT id, name FROM station WHERE id IN (SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available) > 14) OR installation_date LIKE '%-12-%';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the unique station IDs from the 'station' table located in a specific city. It intersects with the 'status' table to find stations that have an average number of available bikes greater than a specified threshold. The placeholders in the WHERE and HAVING clauses represent the city name and the minimum average bikes available, respectively.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT s.name, s.id \nFROM station s \nJOIN status st ON s.id = st.station_id \nGROUP BY s.id, s.name \nHAVING AVG(st.bikes_available) > 14 OR strftime('%m', s.installation_date) = '12';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT id, name FROM station WHERE id IN (SELECT T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available) > 14) OR installation_date LIKE '%-12-%';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT name, id \nFROM station \nWHERE id IN (\n    SELECT station_id \n    FROM status \n    GROUP BY station_id \n    HAVING AVG(bikes_available) > 14\n) OR installation_date LIKE '%-12-%';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.144",
        "c_low": "SELECT s.name, s.id \nFROM station s \nJOIN status st ON s.id = st.station_id \nGROUP BY s.id \nHAVING AVG(st.bikes_available) > 14 \nOR s.installation_date LIKE '%-12-%';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT T1.id, T1.name \nFROM station AS T1 \nJOIN status AS T2 ON T1.id = T2.station_id \nGROUP BY T1.id, T1.name \nHAVING AVG(T2.bikes_available) > 14 OR \n       strftime('%m', T1.installation_date) = '12'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique bike stations that currently have a certain number of bikes available. The query joins the 'station' table with the 'status' table to filter stations based on their bike availability, using a placeholder for the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average longitude of bike stations from the 'station' table that do not have the maximum number of available bikes reported in the 'status' table. The placeholder in the HAVING clause represents a numeric value for filtering the bike availability.\",\n        \"virtual_table\": \"SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT id, name FROM station WHERE id IN (SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available) > 14) OR installation_date LIKE '%-12-%';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the unique station IDs from the 'station' table located in a specific city. It intersects with the 'status' table to find stations that have an average number of available bikes greater than a specified threshold. The placeholders in the WHERE and HAVING clauses represent the city name and the minimum average bikes available, respectively.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT s.name, s.id \nFROM station s \nJOIN status st ON s.id = st.station_id \nGROUP BY s.id, s.name \nHAVING AVG(st.bikes_available) > 14 OR strftime('%m', s.installation_date) = '12';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT T1.id, T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T1.id HAVING avg(T2.bikes_available) > 14 UNION SELECT T1.id, T1.name FROM station AS T1 WHERE strftime('%m', T1.installation_date) = '12'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique bike stations that currently have a certain number of bikes available. The query joins the 'station' table with the 'status' table to filter stations based on their bike availability, using a placeholder for the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT s.name, s.id \nFROM station s \nJOIN status st ON s.id = st.station_id \nGROUP BY s.id \nHAVING AVG(st.bikes_available) > 14 \n   OR s.installation_date LIKE '%-12-%';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.145",
        "c_low": "SELECT cloud_cover, COUNT(cloud_cover) AS count\nFROM weather\nWHERE zip_code = 94107\nGROUP BY cloud_cover\nORDER BY count DESC\nLIMIT 3;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT cloud_cover, COUNT(cloud_cover) as count\nFROM weather\nWHERE zip_code = 94107\nGROUP BY cloud_cover\nORDER BY count DESC\nLIMIT 3;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT cloud_cover, COUNT(cloud_cover) as count FROM weather WHERE zip_code = 94107 GROUP BY cloud_cover ORDER BY count DESC LIMIT 3;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    }\n}\n",
        "t_1": "SELECT cloud_cover, COUNT(cloud_cover) as count FROM weather WHERE zip_code = 94107 GROUP BY cloud_cover ORDER BY count DESC LIMIT 3;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    }\n}\n",
        "t_2": "SELECT cloud_cover, COUNT(cloud_cover) AS frequency\nFROM weather\nWHERE zip_code = 94107\nGROUP BY cloud_cover\nORDER BY frequency DESC\nLIMIT 3;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT cloud_cover, COUNT(cloud_cover) AS count\nFROM weather\nWHERE zip_code = 94107\nGROUP BY cloud_cover\nORDER BY count DESC\nLIMIT 3;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.146",
        "c_low": "SELECT cloud_cover, COUNT(cloud_cover) AS count\nFROM weather\nWHERE zip_code = 94107\nGROUP BY cloud_cover\nORDER BY count DESC\nLIMIT 3;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT cloud_cover, COUNT(cloud_cover) as count\nFROM weather\nWHERE zip_code = 94107\nGROUP BY cloud_cover\nORDER BY count DESC\nLIMIT 3;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT cloud_cover, COUNT(cloud_cover) as cover_count \nFROM weather \nWHERE zip_code = 94107 \nGROUP BY cloud_cover \nORDER BY cover_count DESC \nLIMIT 3;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    }\n}\n",
        "t_1": "SELECT cloud_cover, COUNT(cloud_cover) as count FROM weather WHERE zip_code = 94107 GROUP BY cloud_cover ORDER BY count DESC LIMIT 3;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    }\n}\n",
        "t_2": "SELECT cloud_cover, COUNT(cloud_cover) AS count\nFROM weather\nWHERE zip_code = 94107\nGROUP BY cloud_cover\nORDER BY count DESC\nLIMIT 3;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT cloud_cover, COUNT(cloud_cover) AS cover_count\nFROM weather\nWHERE zip_code = 94107\nGROUP BY cloud_cover\nORDER BY cover_count DESC\nLIMIT 3;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.153",
        "c_low": "SELECT zip_code, date FROM weather WHERE max_temperature_f = 80",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the date and the temperature range (difference between maximum and minimum temperatures) from the 'weather' table, ordered by the temperature range. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT date, zip_code FROM weather WHERE max_temperature_f = 80",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT zip_code, date FROM weather WHERE max_temperature_f = 80",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT zip_code, date FROM weather WHERE max_temperature_f = 80",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_2": "SELECT date, zip_code \nFROM weather \nWHERE max_temperature_f = 80;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT date, zip_code \nFROM weather \nWHERE max_temperature_f = 80;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.154",
        "c_low": "SELECT DISTINCT s.zip_code, w.date \nFROM station s \nJOIN status st ON s.id = st.station_id \nJOIN weather w ON w.zip_code = s.city \nWHERE w.max_temperature_f >= 80;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the date and the temperature range (difference between maximum and minimum temperatures) from the 'weather' table, ordered by the temperature range. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT w.zip_code, w.date \nFROM weather w \nJOIN station s ON s.city = (SELECT city FROM station WHERE id = s.id) \nWHERE w.max_temperature_f >= 80;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT s.city, w.zip_code, w.date FROM weather w JOIN station s ON s.city = w.zip_code WHERE w.max_temperature_f >= 80",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT zip_code, date FROM weather WHERE max_temperature_f >= 80",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT zip_code, date FROM weather WHERE max_temperature_f >= 80",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT w.zip_code, w.date\nFROM weather w\nJOIN station s ON s.city = w.zip_code\nWHERE w.max_temperature_f >= 80;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.155",
        "c_low": "SELECT trip.id FROM trip JOIN weather ON trip.zip_code = weather.zip_code WHERE weather.mean_temperature_f > 60;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the date and the temperature range (difference between maximum and minimum temperatures) from the 'weather' table, ordered by the temperature range. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT id FROM trip WHERE zip_code IN (SELECT zip_code FROM weather WHERE mean_temperature_f > 60)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT id FROM trip WHERE zip_code IN (SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_temperature_f) > 60)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT id FROM trip WHERE zip_code IN (SELECT zip_code FROM weather WHERE avg(mean_temperature_f) > 60 GROUP BY zip_code)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_2": "SELECT trip.id \nFROM trip \nJOIN weather ON trip.zip_code = weather.zip_code \nWHERE weather.mean_temperature_f > 60;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT trip.id \nFROM trip \nJOIN weather ON trip.zip_code = weather.zip_code \nWHERE weather.mean_temperature_f > 60;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.156",
        "c_low": "SELECT trip.id\nFROM trip\nJOIN weather ON trip.start_date LIKE '%' || weather.date || '%'\nWHERE weather.mean_temperature_f > 60;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the date and the temperature range (difference between maximum and minimum temperatures) from the 'weather' table, ordered by the temperature range. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT id FROM trip WHERE start_date IN (SELECT start_date FROM trip WHERE zip_code IN (SELECT zip_code FROM weather WHERE mean_temperature_f > 60))",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT trip.id FROM trip JOIN (SELECT zip_code, avg(mean_temperature_f) as avg_temp FROM weather GROUP BY zip_code) as temp ON trip.zip_code = temp.zip_code WHERE temp.avg_temp > 60;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT id FROM trip WHERE zip_code IN (SELECT zip_code FROM weather WHERE avg(mean_temperature_f) > 60 GROUP BY zip_code)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT trip.id FROM trip JOIN weather ON trip.start_date = weather.date WHERE weather.mean_temperature_f > 60;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT trip.id\nFROM trip\nJOIN weather ON trip.start_date LIKE '%' || weather.date || '%'\nWHERE weather.mean_temperature_f > 60;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.160",
        "c_low": "SELECT w1.date, w1.zip_code \nFROM weather w1 \nWHERE w1.min_dew_point_f < (\n    SELECT MIN(w2.min_dew_point_f) \n    FROM weather w2 \n    WHERE w2.zip_code = 94107\n) \nAND w1.zip_code IS NOT NULL;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the date and the temperature range (difference between maximum and minimum temperatures) from the 'weather' table, ordered by the temperature range. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT date, zip_code FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT w1.zip_code, w1.min_dew_point_f \nFROM weather w1 \nWHERE w1.min_dew_point_f < (\n    SELECT MIN(w2.min_dew_point_f) \n    FROM weather w2 \n    WHERE w2.zip_code = 94107\n) \nGROUP BY w1.zip_code;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT date, zip_code FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT w.zip_code \nFROM weather w \nWHERE w.min_dew_point_f < (SELECT MIN(min_dew_point_f) FROM weather WHERE zip_code = 94107) \nGROUP BY w.zip_code;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT w.zip_code \nFROM weather w \nWHERE w.min_dew_point_f < (SELECT MIN(min_dew_point_f) FROM weather WHERE zip_code = 94107) \nGROUP BY w.zip_code;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.161",
        "c_low": "SELECT t.end_station_id, s.installation_date\nFROM trip t\nJOIN station s ON t.end_station_id = s.id;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT end_station_id, installation_date FROM trip JOIN station ON trip.end_station_id = station.id",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT s.installation_date FROM trip t JOIN station s ON t.end_station_id = s.id;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT s.installation_date \nFROM trip t \nJOIN station s ON t.end_station_id = s.id;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_2": "SELECT s.installation_date FROM trip t JOIN station s ON t.end_station_id = s.id;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT t.end_station_id, s.installation_date\nFROM trip t\nJOIN station s ON t.end_station_id = s.id;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.162",
        "c_low": "SELECT s.name AS end_station_name, s.installation_date \nFROM trip t \nJOIN station s ON t.end_station_id = s.id;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT s.installation_date FROM trip t JOIN station s ON t.end_station_id = s.id;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT s.installation_date \nFROM station s \nJOIN trip t ON s.id = t.end_station_id \nGROUP BY s.id;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT station.installation_date FROM station JOIN trip ON station.id = trip.end_station_id;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT s.installation_date \nFROM station s \nJOIN trip t ON s.id = t.end_station_id;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT s.name AS end_station_name, s.installation_date \nFROM trip t \nJOIN station s ON t.end_station_id = s.id;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.163",
        "c_low": "SELECT trip.id \nFROM trip \nJOIN station ON trip.start_station_id = station.id \nWHERE station.dock_count = (SELECT MAX(dock_count) FROM station);",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT trip.id FROM trip JOIN station ON trip.start_station_id = station.id WHERE station.dock_count = (SELECT MAX(dock_count) FROM station);",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT trip.id FROM trip JOIN station ON trip.start_station_id = station.id ORDER BY station.dock_count DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT id FROM trip WHERE start_station_id = (SELECT id FROM station ORDER BY dock_count DESC LIMIT 1)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_2": "SELECT trip.id FROM trip JOIN station ON trip.start_station_id = station.id ORDER BY station.dock_count DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT trip.id \nFROM trip \nJOIN station ON trip.start_station_id = station.id \nWHERE station.dock_count = (SELECT MAX(dock_count) FROM station);",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.164",
        "c_low": "SELECT trip.id \nFROM trip \nJOIN station ON trip.start_station_id = station.id \nWHERE station.dock_count = (SELECT MAX(dock_count) FROM station);",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT id FROM trip WHERE start_station_id = (SELECT id FROM station ORDER BY dock_count DESC LIMIT 1)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique bike stations that currently have a certain number of bikes available. The query joins the 'station' table with the 'status' table to filter stations based on their bike availability, using a placeholder for the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT id FROM trip WHERE start_station_id = (SELECT id FROM station ORDER BY dock_count DESC LIMIT 1)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the unique station IDs from the 'station' table located in a specific city. It intersects with the 'status' table to find stations that have an average number of available bikes greater than a specified threshold. The placeholders in the WHERE and HAVING clauses represent the city name and the minimum average bikes available, respectively.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT id FROM trip WHERE start_station_id = (SELECT id FROM station ORDER BY dock_count DESC LIMIT 1)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_2": "SELECT id FROM trip WHERE start_station_id = (SELECT id FROM station ORDER BY dock_count DESC LIMIT 1)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT trip.id \nFROM trip \nJOIN station ON trip.start_station_id = station.id \nWHERE station.dock_count = (SELECT MAX(dock_count) FROM station);",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.165",
        "c_low": "SELECT COUNT(*) AS trip_count \nFROM trip \nWHERE end_station_name NOT IN (SELECT name FROM station WHERE city = 'San Francisco');",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 ON T1.id = T2.start_station_id AND T3.id = T2.end_station_id WHERE T1.city != 'San Francisco' AND T3.city != 'San Francisco'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT COUNT(*) FROM trip WHERE end_station_name NOT IN (SELECT name FROM station WHERE city = 'San Francisco')",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the average number of bikes available at stations that are not located in a specific city. The placeholder in the WHERE clause represents the name of the city to exclude from the average calculation.\",\n        \"virtual_table\": \"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "t_1": "SELECT COUNT(*) AS trip_count \nFROM trip \nWHERE end_station_name NOT IN (SELECT name FROM station WHERE city = 'San Francisco');",
        "t_1_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_2": "SELECT count(*) FROM trip WHERE end_station_id NOT IN (SELECT id FROM station WHERE city = 'San Francisco')",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average number of bikes available at stations that are not located in a specific city. The placeholder in the WHERE clause represents the name of the city to exclude from the average calculation.\",\n        \"virtual_table\": \"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(*) AS trip_count \nFROM trip \nWHERE end_station_name NOT IN (SELECT name FROM station WHERE city = 'San Francisco');",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.166",
        "c_low": "SELECT COUNT(*) AS trip_count \nFROM trip \nWHERE end_station_name != 'San Francisco';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id WHERE T2.city != 'San Francisco'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT COUNT(*) FROM trip WHERE end_station_name != 'San Francisco'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the average number of bikes available at stations that are not located in a specific city. The placeholder in the WHERE clause represents the name of the city to exclude from the average calculation.\",\n        \"virtual_table\": \"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "t_1": "SELECT COUNT(*) FROM trip WHERE end_station_name != 'San Francisco';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_2": "SELECT count(*) FROM trip WHERE end_station_name != 'San Francisco'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average number of bikes available at stations that are not located in a specific city. The placeholder in the WHERE clause represents the name of the city to exclude from the average calculation.\",\n        \"virtual_table\": \"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "t_3+": "SELECT COUNT(*) AS trip_count \nFROM trip \nWHERE end_station_name != 'San Francisco';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.167",
        "c_low": "SELECT date FROM weather WHERE zip_code = 94107 AND events NOT LIKE '%Fog%' AND events NOT LIKE '%Rain%';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT date FROM weather WHERE zip_code = 94107 AND events NOT LIKE '%Fog%' AND events NOT LIKE '%Rain%';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT date FROM weather WHERE zip_code = 94107 AND events NOT LIKE '%Fog%' AND events NOT LIKE '%Rain%'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average number of bikes available at stations that are not located in a specific city. The placeholder in the WHERE clause represents the name of the city to exclude from the average calculation.\",\n        \"virtual_table\": \"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "t_1": "SELECT date FROM weather WHERE zip_code = 94107 AND events NOT LIKE '%Fog%' AND events NOT LIKE '%Rain%';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT date FROM weather WHERE zip_code = 94107 AND events NOT LIKE '%Fog%' AND events NOT LIKE '%Rain%';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the average number of bikes available at stations that are not located in a specific city. The placeholder in the WHERE clause represents the name of the city to exclude from the average calculation.\",\n        \"virtual_table\": \"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT date FROM weather WHERE zip_code = 94107 AND events NOT LIKE '%Fog%' AND events NOT LIKE '%Rain%';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.168",
        "c_low": "SELECT date FROM weather WHERE zip_code = 94107 AND events NOT LIKE '%fog%' AND events NOT LIKE '%rain%';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT date FROM weather WHERE zip_code = 94107 AND events IS NULL AND precipitation_inches = 0",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT date FROM weather WHERE zip_code = 94107 AND precipitation_inches = 0 AND events NOT LIKE '%fog%'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average number of bikes available at stations that are not located in a specific city. The placeholder in the WHERE clause represents the name of the city to exclude from the average calculation.\",\n        \"virtual_table\": \"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "t_1": "SELECT date FROM weather WHERE zip_code = 94107 AND precipitation_inches = 0 AND events = 0",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT date FROM weather WHERE zip_code = 94107 AND precipitation_inches = 0 AND events NOT LIKE '%fog%'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the average number of bikes available at stations that are not located in a specific city. The placeholder in the WHERE clause represents the name of the city to exclude from the average calculation.\",\n        \"virtual_table\": \"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT date FROM weather WHERE zip_code = 94107 AND events NOT LIKE '%fog%' AND events NOT LIKE '%rain%';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.172",
        "c_low": "SELECT s.name \nFROM station s \nJOIN status st ON s.id = st.station_id \nWHERE st.bikes_available > 10 \nAND s.city != 'San Jose';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available > 10 AND T1.city != 'San Jose'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique bike stations that currently have a certain number of bikes available. The query joins the 'station' table with the 'status' table to filter stations based on their bike availability, using a placeholder for the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average longitude of bike stations from the 'station' table that do not have the maximum number of available bikes reported in the 'status' table. The placeholder in the HAVING clause represents a numeric value for filtering the bike availability.\",\n        \"virtual_table\": \"SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available) > 10 EXCEPT SELECT name FROM station WHERE city = 'San Jose'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average number of bikes available at stations that are not located in a specific city. The placeholder in the WHERE clause represents the name of the city to exclude from the average calculation.\",\n        \"virtual_table\": \"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING])\"\n    }\n}\n",
        "t_1": "SELECT s.name \nFROM station s \nJOIN status st ON s.id = st.station_id \nWHERE st.bikes_available > 10 \nAND s.city != 'San Jose';",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available > 10 AND T1.city != 'San Jose'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT name FROM station s JOIN status st ON s.id = st.station_id WHERE st.bikes_available > 10 AND s.city != 'San Jose';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.183",
        "c_low": "SELECT city, MAX(lat) as highest_latitude \nFROM station \nGROUP BY city \nORDER BY highest_latitude DESC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT city, MAX(lat) AS highest_latitude\nFROM station\nGROUP BY city\nORDER BY highest_latitude DESC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT city, MAX(lat) as highest_latitude \nFROM station \nGROUP BY city \nORDER BY highest_latitude DESC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT city, MAX(lat) as highest_latitude \nFROM station \nGROUP BY city \nORDER BY highest_latitude DESC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT city, MAX(lat) AS highest_latitude\nFROM station\nGROUP BY city\nORDER BY highest_latitude DESC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT city, MAX(lat) AS highest_latitude\nFROM station\nGROUP BY city\nORDER BY highest_latitude DESC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.184",
        "c_low": "SELECT city, name FROM station WHERE lat = (SELECT MAX(lat) FROM station GROUP BY city) ORDER BY lat DESC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT city, name FROM station ORDER BY lat DESC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT name FROM station WHERE city IS NOT NULL ORDER BY lat DESC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT city, name FROM station WHERE lat = (SELECT MAX(lat) FROM station GROUP BY city) ORDER BY lat DESC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT city, name FROM station ORDER BY lat DESC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT city, name FROM station ORDER BY CAST(lat AS REAL) DESC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.188",
        "c_low": "SELECT id, duration FROM trip ORDER BY duration DESC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT id, duration FROM trip ORDER BY duration DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT id, duration FROM trip ORDER BY duration DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT id, duration FROM trip ORDER BY duration DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_2": "SELECT id, duration FROM trip ORDER BY duration DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT id, duration FROM trip ORDER BY duration DESC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.189",
        "c_low": "SELECT s.long, AVG(t.duration) AS average_duration\nFROM station s\nJOIN trip t ON s.id = t.start_station_id\nGROUP BY s.id, s.long;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT s.long, AVG(t.duration) AS average_duration\nFROM station s\nJOIN trip t ON s.id = t.start_station_id\nGROUP BY s.id;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the average longitude of bike stations from the 'station' table that do not have the maximum number of available bikes reported in the 'status' table. The placeholder in the HAVING clause represents a numeric value for filtering the bike availability.\",\n        \"virtual_table\": \"SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT s.long, AVG(t.duration) AS average_duration\nFROM station s\nJOIN trip t ON s.id = t.start_station_id\nGROUP BY s.id, s.long;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the average number of bikes available at stations that are not located in a specific city. The placeholder in the WHERE clause represents the name of the city to exclude from the average calculation.\",\n        \"virtual_table\": \"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the unique station IDs from the 'station' table located in a specific city. It intersects with the 'status' table to find stations that have an average number of available bikes greater than a specified threshold. The placeholders in the WHERE and HAVING clauses represent the city name and the minimum average bikes available, respectively.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT s.long, AVG(t.duration) AS average_duration\nFROM station s\nJOIN trip t ON s.id = t.start_station_id\nGROUP BY s.id;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT s.long, AVG(t.duration) AS average_duration\nFROM station s\nJOIN trip t ON s.id = t.start_station_id\nGROUP BY s.id, s.long;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the average longitude of bike stations from the 'station' table that do not have the maximum number of available bikes reported in the 'status' table. The placeholder in the HAVING clause represents a numeric value for filtering the bike availability.\",\n        \"virtual_table\": \"SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT s.long, AVG(t.duration) AS average_duration\nFROM station s\nJOIN trip t ON s.id = t.start_station_id\nGROUP BY s.id, s.long;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.190",
        "c_low": "SELECT s.id, s.name, s.long, AVG(t.duration) AS average_duration\nFROM station s\nJOIN trip t ON s.id = t.start_station_id\nGROUP BY s.id, s.name, s.long;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT start_station_id, start_station_name, long, AVG(duration) AS average_duration\nFROM trip\nGROUP BY start_station_id, start_station_name, long;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT start_station_id, start_station_name, long, AVG(duration) AS average_duration\nFROM trip\nJOIN station ON trip.start_station_id = station.id\nGROUP BY start_station_id, start_station_name, long;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the unique station IDs from the 'station' table located in a specific city. It intersects with the 'status' table to find stations that have an average number of available bikes greater than a specified threshold. The placeholders in the WHERE and HAVING clauses represent the city name and the minimum average bikes available, respectively.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT s.id, s.name, s.long, AVG(t.duration) AS average_duration\nFROM station s\nJOIN trip t ON s.id = t.start_station_id\nGROUP BY s.id, s.name, s.long;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT start_station_id, name, long, AVG(duration) AS average_duration\nFROM trip\nJOIN station ON trip.start_station_id = station.id\nGROUP BY start_station_id, name, long;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average longitude of bike stations from the 'station' table that do not have the maximum number of available bikes reported in the 'status' table. The placeholder in the HAVING clause represents a numeric value for filtering the bike availability.\",\n        \"virtual_table\": \"SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "t_3+": "SELECT trip.start_station_id, station.name, station.long, AVG(trip.duration) AS average_duration\nFROM trip\nJOIN station ON trip.start_station_id = station.id\nGROUP BY trip.start_station_id, station.name, station.long;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.191",
        "c_low": "SELECT s.lat, MIN(t.duration) AS min_duration\nFROM station s\nJOIN trip t ON s.id = t.end_station_id\nGROUP BY s.id, s.lat;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT s.lat, MIN(t.duration) AS min_duration\nFROM station s\nJOIN trip t ON s.id = t.end_station_id\nGROUP BY s.id;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average longitude of bike stations from the 'station' table that do not have the maximum number of available bikes reported in the 'status' table. The placeholder in the HAVING clause represents a numeric value for filtering the bike availability.\",\n        \"virtual_table\": \"SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT s.lat, MIN(t.duration) AS min_duration\nFROM station s\nJOIN trip t ON s.id = t.end_station_id\nGROUP BY s.id, s.lat;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT s.lat, MIN(t.duration) AS min_duration\nFROM station s\nJOIN trip t ON s.id = t.end_station_id\nGROUP BY s.id;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT s.lat, MIN(t.duration) AS min_duration\nFROM station s\nJOIN trip t ON s.id = t.end_station_id\nGROUP BY s.id;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT s.lat, MIN(t.duration) AS min_duration\nFROM station s\nJOIN trip t ON s.id = t.end_station_id\nGROUP BY s.id;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.192",
        "c_low": "SELECT s.id, s.name, s.lat, MIN(t.duration) AS min_duration\nFROM station s\nJOIN trip t ON s.id = t.end_station_id\nGROUP BY s.id, s.name, s.lat;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT end_station_id, end_station_name, lat, MIN(duration) AS min_duration \nFROM trip \nJOIN station ON trip.end_station_id = station.id \nGROUP BY end_station_id, end_station_name, lat;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT end_station_id, end_station_name, lat, MIN(duration) AS min_duration \nFROM trip \nJOIN station ON trip.end_station_id = station.id \nGROUP BY end_station_id, end_station_name, lat;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT end_station_id, end_station_name, MIN(duration) AS min_duration \nFROM trip \nGROUP BY end_station_id, end_station_name;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT end_station_id, name, lat, MIN(duration) AS min_duration \nFROM trip \nJOIN station ON trip.end_station_id = station.id \nGROUP BY end_station_id, name, lat;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT end_station_id, end_station_name, lat, MIN(duration) AS min_duration\nFROM trip\nJOIN station ON trip.end_station_id = station.id\nGROUP BY end_station_id, end_station_name, lat;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.195",
        "c_low": "SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f < 70;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the date and the temperature range (difference between maximum and minimum temperatures) from the 'weather' table, ordered by the temperature range. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT zip_code FROM weather WHERE zip_code NOT IN (SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f >= 70)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT zip_code FROM weather WHERE zip_code NOT IN (SELECT zip_code FROM weather WHERE max_dew_point_f >= 70)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT zip_code FROM weather WHERE zip_code NOT IN (SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f >= 70)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f < 70;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f < 70;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.196",
        "c_low": "SELECT DISTINCT zip_code \nFROM weather \nWHERE max_dew_point_f < 70 \nGROUP BY zip_code \nHAVING COUNT(DISTINCT date) = (SELECT COUNT(DISTINCT date) FROM weather)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the date and the temperature range (difference between maximum and minimum temperatures) from the 'weather' table, ordered by the temperature range. The placeholder in the LIMIT clause represents the maximum number of records to return.\",\n        \"virtual_table\": \"SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT zip_code FROM weather WHERE zip_code NOT IN (SELECT zip_code FROM weather WHERE max_dew_point_f >= 70)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT zip_code FROM weather GROUP BY zip_code HAVING MAX(max_dew_point_f) < 70",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f < 70",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f < 70;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f < 70;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.198",
        "c_low": "SELECT id FROM trip WHERE duration = (SELECT AVG(duration) FROM trip WHERE zip_code = '94103')",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT id FROM trip WHERE duration >= (SELECT avg(duration) FROM trip WHERE zip_code = '94103')",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT id FROM trip WHERE duration = (SELECT avg(duration) FROM trip WHERE zip_code = '94103')",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT id FROM trip WHERE duration >= (SELECT avg(duration) FROM trip WHERE zip_code = '94103')",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT id FROM trip WHERE duration = (SELECT AVG(duration) FROM trip WHERE zip_code = '94103')",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT id FROM trip WHERE duration = (SELECT AVG(duration) FROM trip WHERE zip_code = '94103')",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.204",
        "c_low": "SELECT station.id, station.name FROM station JOIN status ON station.id = status.station_id WHERE status.bikes_available > 12;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT T1.id, T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available > 12",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique bike stations that currently have a certain number of bikes available. The query joins the 'station' table with the 'status' table to filter stations based on their bike availability, using a placeholder for the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average longitude of bike stations from the 'station' table that do not have the maximum number of available bikes reported in the 'status' table. The placeholder in the HAVING clause represents a numeric value for filtering the bike availability.\",\n        \"virtual_table\": \"SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT T1.id, T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T1.id HAVING avg(T2.bikes_available) > 12;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies the unique station IDs from the 'station' table located in a specific city. It intersects with the 'status' table to find stations that have an average number of available bikes greater than a specified threshold. The placeholders in the WHERE and HAVING clauses represent the city name and the minimum average bikes available, respectively.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT s.id, s.name FROM station s JOIN status st ON s.id = st.station_id WHERE st.bikes_available > 12;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT T1.id, T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available > 12",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique bike stations that currently have a certain number of bikes available. The query joins the 'station' table with the 'status' table to filter stations based on their bike availability, using a placeholder for the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT station.id, station.name \nFROM station \nJOIN status ON station.id = status.station_id \nWHERE status.bikes_available > 12;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.205",
        "c_low": "SELECT zip_code\nFROM trip\nJOIN weather ON trip.start_date LIKE weather.date || '%'\nGROUP BY zip_code\nHAVING AVG(mean_humidity) < 70 AND COUNT(trip.id) >= 100;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT zip_code FROM weather WHERE mean_humidity < 70 AND zip_code IN (SELECT zip_code FROM trip GROUP BY zip_code HAVING COUNT(id) >= 100)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT zip_code \nFROM weather \nJOIN trip ON trip.zip_code = weather.zip_code \nGROUP BY zip_code \nHAVING avg(mean_humidity) < 70 AND COUNT(trip.id) >= 100;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT zip_code \nFROM weather \nGROUP BY zip_code \nHAVING avg(mean_humidity) < 70 \nAND (SELECT COUNT(*) FROM trip WHERE trip.zip_code = weather.zip_code) >= 100;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT zip_code\nFROM trip\nJOIN weather ON trip.start_date LIKE weather.date || '%'\nGROUP BY zip_code\nHAVING AVG(mean_humidity) < 70 AND COUNT(trip.id) >= 100;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT zip_code\nFROM trip\nJOIN weather ON trip.start_date LIKE weather.date || '%'\nGROUP BY zip_code\nHAVING AVG(mean_humidity) < 70 AND COUNT(trip.id) >= 100;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.206",
        "c_low": "SELECT zip_code \nFROM trip \nWHERE zip_code IN (\n    SELECT zip_code \n    FROM weather \n    GROUP BY zip_code \n    HAVING AVG(mean_humidity) < 70\n) \nGROUP BY zip_code \nHAVING COUNT(id) >= 100;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT zip_code \nFROM weather \nJOIN trip ON weather.zip_code = trip.zip_code \nGROUP BY zip_code \nHAVING avg(mean_humidity) < 70 AND COUNT(trip.id) >= 100;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT zip_code \nFROM weather \nJOIN trip ON weather.zip_code = trip.zip_code \nGROUP BY zip_code \nHAVING avg(mean_humidity) < 70 AND COUNT(trip.id) >= 100;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    }\n}\n",
        "t_1": "SELECT zip_code \nFROM weather \nGROUP BY zip_code \nHAVING avg(mean_humidity) < 70 \nAND (SELECT COUNT(*) FROM trip WHERE trip.zip_code = weather.zip_code) >= 100;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique zip codes from the 'weather' table, grouped by zip code. It orders the results based on the average mean sea level pressure for each zip code and limits the output to a specified number of zip codes. The placeholder in the LIMIT clause represents the maximum number of zip codes to return.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the dates and zip codes of weather reports where the minimum dew point is less than the minimum dew point recorded for a specific zip code. The placeholder in the subquery represents the zip code for which the minimum dew point is being compared.\",\n        \"virtual_table\": \"SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of zip codes from the 'weather' table where the average mean visibility in miles is below a specified threshold. The placeholder in the HAVING clause represents the visibility limit that is being queried.\",\n        \"virtual_table\": \"SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT zip_code \nFROM trip \nWHERE zip_code IN (\n    SELECT zip_code \n    FROM weather \n    WHERE mean_humidity < 70\n) \nGROUP BY zip_code \nHAVING COUNT(id) >= 100;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT zip_code \nFROM trip \nWHERE zip_code IN (\n    SELECT zip_code \n    FROM weather \n    WHERE mean_humidity < 70\n) \nGROUP BY zip_code \nHAVING COUNT(id) >= 100;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.208",
        "c_low": "SELECT name FROM station WHERE city = 'Palo Alto' AND id NOT IN (SELECT end_station_id FROM trip)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT name FROM station WHERE city = 'Palo Alto' AND id NOT IN (SELECT end_station_id FROM trip)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT name FROM station WHERE city = 'Palo Alto' EXCEPT SELECT end_station_name FROM trip;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations that have an average number of bikes available greater than a specified threshold. It excludes any stations located in a specific city. The placeholders in the HAVING clause and the WHERE clause represent the numeric threshold for bikes available and the name of the city, respectively.\",\n        \"virtual_table\": \"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT name FROM station WHERE city = 'Palo Alto' AND id NOT IN (SELECT end_station_id FROM trip)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT name FROM station WHERE city = 'Palo Alto' EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*) > 0",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique names of bike stations from the 'station' table that currently have a specific number of bikes available. The placeholder in the WHERE clause represents the number of bikes available at the station.\",\n        \"virtual_table\": \"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT name FROM station WHERE city = 'Palo Alto' AND id NOT IN (SELECT end_station_id FROM trip);",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.211",
        "c_low": "SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude FROM station WHERE id IN (SELECT start_station_id FROM trip)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude FROM trip;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude FROM station JOIN trip ON station.id = trip.start_station_id;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the average mean temperature recorded for each zip code on a specific date. The placeholder in the WHERE clause allows users to specify the date for which they want to retrieve the temperature data.\",\n        \"virtual_table\": \"SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE [PLACEHOLDER-TYPE:STRING] GROUP BY zip_code\"\n    }\n}\n",
        "t_1": "SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude FROM trip;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the total and maximum duration of trips taken with a specific bike. The placeholder in the WHERE clause represents the unique identifier of the bike used for the trips.\",\n        \"virtual_table\": \"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude FROM trip;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the average longitude of bike stations from the 'station' table that do not have the maximum number of available bikes reported in the 'status' table. The placeholder in the HAVING clause represents a numeric value for filtering the bike availability.\",\n        \"virtual_table\": \"SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude\nFROM station\nJOIN trip ON station.id = trip.start_station_id;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.212",
        "c_low": "SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude FROM station WHERE id IN (SELECT start_station_id FROM trip);",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT avg(lat) AS average_latitude, avg(long) AS average_longitude FROM station WHERE id IN (SELECT start_station_id FROM trip)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the average longitude of bike stations from the 'station' table that do not have the maximum number of available bikes reported in the 'status' table. The placeholder in the HAVING clause represents a numeric value for filtering the bike availability.\",\n        \"virtual_table\": \"SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    }\n}\n",
        "c_high": "SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude \nFROM station \nWHERE id IN (SELECT start_station_id FROM trip)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude \nFROM station \nWHERE id IN (SELECT DISTINCT start_station_id FROM trip);",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of bike stations from the 'station' table that are located at a latitude less than a specified value. The placeholder in the WHERE clause represents the latitude coordinate.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE lat  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips associated with a specific zip code. The placeholder in the subquery represents the zip code used to calculate the average duration.\",\n        \"virtual_table\": \"SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  [PLACEHOLDER-TYPE:NUMBER])\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of starting station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a number of trips greater than or equal to a specified threshold. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.\",\n        \"virtual_table\": \"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude FROM station WHERE id IN (SELECT start_station_id FROM trip)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table counts the number of trips that started and ended in different stations located in a specific city. The placeholders in the WHERE clause represent the names of the cities for filtering the results.\",\n        \"virtual_table\": \"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  [PLACEHOLDER-TYPE:STRING] AND T3.city  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies the unique station identifiers from the 'station' table that have a latitude greater than a specified value, while excluding those stations that have a minimum number of available bikes below a certain threshold. The placeholders in the query represent the latitude and the minimum number of bikes available.\",\n        \"virtual_table\": \"SELECT id FROM station WHERE lat  >  [PLACEHOLDER-TYPE:NUMBER] EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for trips more than a specified number of times. The placeholders in the WHERE clause represent the city name and the count of trips.\",\n        \"virtual_table\": \"SELECT name FROM station WHERE city  =  [PLACEHOLDER-TYPE:STRING] EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude\nFROM station\nWHERE id IN (\n    SELECT start_station_id\n    FROM trip\n);",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.214",
        "c_low": "SELECT DISTINCT b.Writer\nFROM book b\nORDER BY b.Writer ASC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT DISTINCT Writer FROM book ORDER BY Writer ASC;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the writers of books from the 'book' table that have a publication price exceeding a specified amount. The placeholder in the WHERE clause represents the minimum price of the publication.\",\n        \"virtual_table\": \"SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the titles of books from the 'book' table that are not written by a specific writer. The placeholder in the WHERE clause represents the writer's identifier.\",\n        \"virtual_table\": \"SELECT Title FROM book WHERE Writer != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT Writer FROM book GROUP BY Writer ORDER BY Writer ASC",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of writers from the 'book' table who have authored more than a specified number of books. The placeholder in the HAVING clause represents the minimum count of books that a writer must have authored to be included in the results.\",\n        \"virtual_table\": \"SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT Writer FROM book ORDER BY Writer ASC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of writers from the 'book' table who have authored more than a specified number of books. The placeholder in the HAVING clause represents the minimum count of books that a writer must have authored to be included in the results.\",\n        \"virtual_table\": \"SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the titles of books from the 'book' table that are not written by a specific writer. The placeholder in the WHERE clause represents the writer's identifier.\",\n        \"virtual_table\": \"SELECT Title FROM book WHERE Writer != [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T1.Writer ASC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the writers of books from the 'book' table that have a publication price exceeding a specified amount. The placeholder in the WHERE clause represents the minimum price of the publication.\",\n        \"virtual_table\": \"SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT b.Writer\nFROM book b\nORDER BY b.Writer ASC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.227",
        "c_low": "SELECT Publication_Date, COUNT(*) as count FROM publication GROUP BY Publication_Date ORDER BY count DESC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of distinct publication dates from the 'publication' table. The result will indicate how many unique dates exist for the publications recorded.\",\n        \"virtual_table\": \"SELECT COUNT (DISTINCT Publication_Date) FROM publication\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of publishers from the 'publication' table, ordered by the retail price of their publications in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of publishers to retrieve.\",\n        \"virtual_table\": \"SELECT Publisher FROM publication ORDER BY Price DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT Publication_Date, COUNT(*) as count FROM publication GROUP BY Publication_Date ORDER BY count DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the retail prices of publications from the 'publication' table that are published by specific publishers. The placeholders in the WHERE clause represent the names of the publishers being queried.\",\n        \"virtual_table\": \"SELECT Price FROM publication WHERE Publisher  =  [PLACEHOLDER-TYPE:STRING] OR Publisher  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the writers of books from the 'book' table that have a publication price exceeding a specified amount. The placeholder in the WHERE clause represents the minimum price of the publication.\",\n        \"virtual_table\": \"SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT Publication_Date, COUNT(*) as Publication_Count FROM publication GROUP BY Publication_Date ORDER BY Publication_Count DESC LIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table summarizes the number of publications by each publisher from the 'publication' table. The query groups the results by the publisher's name and counts the total number of publications for each publisher.\",\n        \"virtual_table\": \"SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\"\n    }\n}\n",
        "t_1": "SELECT Publication_Date, COUNT(*) as Publication_Count FROM publication GROUP BY Publication_Date ORDER BY Publication_Count DESC LIMIT 1",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the count of distinct publication dates from the 'publication' table. The result will indicate how many unique dates exist for the publications recorded.\",\n        \"virtual_table\": \"SELECT COUNT (DISTINCT Publication_Date) FROM publication\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table summarizes the number of publications by each publisher from the 'publication' table. The query groups the results by the publisher's name and counts the total number of publications for each publisher.\",\n        \"virtual_table\": \"SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the retail prices of publications from the 'publication' table that are published by specific publishers. The placeholders in the WHERE clause represent the names of the publishers being queried.\",\n        \"virtual_table\": \"SELECT Price FROM publication WHERE Publisher  =  [PLACEHOLDER-TYPE:STRING] OR Publisher  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT Publication_Date, COUNT(*) as count FROM publication GROUP BY Publication_Date ORDER BY count DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the writers of books from the 'book' table that have a publication price exceeding a specified amount. The placeholder in the WHERE clause represents the minimum price of the publication.\",\n        \"virtual_table\": \"SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Publication_Date, COUNT(*) as count FROM publication GROUP BY Publication_Date ORDER BY count DESC LIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.230",
        "c_low": "SELECT DISTINCT Publisher FROM publication WHERE Price > 10000000 OR Price < 5000000;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of publishers from the 'publication' table, ordered by the retail price of their publications in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of publishers to retrieve.\",\n        \"virtual_table\": \"SELECT Publisher FROM publication ORDER BY Price DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the count of distinct publication dates from the 'publication' table. The result will indicate how many unique dates exist for the publications recorded.\",\n        \"virtual_table\": \"SELECT COUNT (DISTINCT Publication_Date) FROM publication\"\n    }\n}\n",
        "c_mid": "SELECT DISTINCT Publisher FROM publication WHERE Price > 10000000 OR Price < 5000000;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the writers of books from the 'book' table that have a publication price exceeding a specified amount. The placeholder in the WHERE clause represents the minimum price of the publication.\",\n        \"virtual_table\": \"SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the retail prices of publications from the 'publication' table that are published by specific publishers. The placeholders in the WHERE clause represent the names of the publishers being queried.\",\n        \"virtual_table\": \"SELECT Price FROM publication WHERE Publisher  =  [PLACEHOLDER-TYPE:STRING] OR Publisher  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT DISTINCT Publisher FROM publication WHERE Price > 10000000 INTERSECT SELECT DISTINCT Publisher FROM publication WHERE Price < 5000000",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct publishers from the 'publication' table whose publications have a retail price exceeding a specified amount. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT DISTINCT Publisher FROM publication WHERE Price  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of publishers from the 'publication' table that have published more than a specified number of publications. The placeholder in the HAVING clause represents the minimum count of publications required to be included in the results.\",\n        \"virtual_table\": \"SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table summarizes the number of publications by each publisher from the 'publication' table. The query groups the results by the publisher's name and counts the total number of publications for each publisher.\",\n        \"virtual_table\": \"SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher\"\n    }\n}\n",
        "t_1": "SELECT DISTINCT Publisher FROM publication WHERE Price > 10000000 UNION SELECT DISTINCT Publisher FROM publication WHERE Price < 5000000;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the distinct publishers from the 'publication' table whose publications have a retail price exceeding a specified amount. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT DISTINCT Publisher FROM publication WHERE Price  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of publishers from the 'publication' table, ordered by the retail price of their publications in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of publishers to retrieve.\",\n        \"virtual_table\": \"SELECT Publisher FROM publication ORDER BY Price DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of publishers from the 'publication' table that have published more than a specified number of publications. The placeholder in the HAVING clause represents the minimum count of publications required to be included in the results.\",\n        \"virtual_table\": \"SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT Publisher FROM publication WHERE Price > 10000000 OR Price < 5000000;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the writers of books from the 'book' table that have a publication price exceeding a specified amount. The placeholder in the WHERE clause represents the minimum price of the publication.\",\n        \"virtual_table\": \"SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT p.Publisher \nFROM publication p \nWHERE p.Price > 10000000 OR p.Price < 5000000;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.255",
        "c_low": "SELECT a.Name \nFROM actor a \nJOIN musical m ON a.Musical_ID = m.Musical_ID \nORDER BY m.Year DESC;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the duration of performances by actors from the 'actor' table, ordered by the age of the actors at the time of their performances in descending order. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT Duration FROM actor ORDER BY Age DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID ORDER BY T2.Year DESC",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT actor.Name \nFROM actor \nJOIN musical ON actor.Musical_ID = musical.Musical_ID \nORDER BY musical.Year DESC;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT actor.Name \nFROM actor \nJOIN musical ON actor.Musical_ID = musical.Musical_ID \nORDER BY musical.Year DESC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the duration of performances by actors from the 'actor' table, ordered by the age of the actors at the time of their performances in descending order. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT Duration FROM actor ORDER BY Age DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID ORDER BY T2.Year DESC;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT actor.Name\nFROM actor\nJOIN musical ON actor.Musical_ID = musical.Musical_ID\nORDER BY musical.Year DESC;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.256",
        "c_low": "SELECT m.Name, COUNT(a.Actor_ID) AS Number_of_Actors\nFROM musical m\nLEFT JOIN actor a ON m.Musical_ID = a.Musical_ID\nGROUP BY m.Name;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT T2.Name, COUNT(T1.Actor_ID) AS NumberOfActors \nFROM musical AS T2 \nJOIN actor AS T1 ON T1.Musical_ID = T2.Musical_ID \nGROUP BY T2.Name;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT T2.Name, COUNT(T1.Actor_ID) AS Number_of_Actors \nFROM actor AS T1 \nJOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID \nGROUP BY T2.Musical_ID",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT m.Name, COUNT(a.Actor_ID) AS Number_of_Actors \nFROM musical m \nLEFT JOIN actor a ON m.Musical_ID = a.Musical_ID \nGROUP BY m.Name;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT T2.Name, COUNT(T1.Actor_ID) AS Number_of_Actors FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T2.Musical_ID",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT m.Name, COUNT(a.Actor_ID) AS Number_of_Actors\nFROM musical m\nLEFT JOIN actor a ON m.Musical_ID = a.Musical_ID\nGROUP BY m.Name;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.257",
        "c_low": "SELECT m.Name, COUNT(a.Actor_ID) AS Actor_Count\nFROM musical m\nLEFT JOIN actor a ON m.Musical_ID = a.Musical_ID\nGROUP BY m.Musical_ID;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the duration of performances by actors from the 'actor' table, ordered by the age of the actors at the time of their performances in descending order. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT Duration FROM actor ORDER BY Age DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_mid": "SELECT T2.Name, COUNT(T1.Actor_ID) AS Actor_Count \nFROM musical AS T2 \nLEFT JOIN actor AS T1 ON T1.Musical_ID = T2.Musical_ID \nGROUP BY T2.Name;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT T2.Name, COUNT(T1.Actor_ID) AS Actor_Count FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T2.Name;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT m.Name, COUNT(a.Actor_ID) AS Actor_Count \nFROM musical m \nLEFT JOIN actor a ON m.Musical_ID = a.Musical_ID \nGROUP BY m.Name;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the duration of performances by actors from the 'actor' table, ordered by the age of the actors at the time of their performances in descending order. The placeholder in the LIMIT clause represents the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT Duration FROM actor ORDER BY Age DESC LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.Name, COUNT(T1.Actor_ID) AS Actor_Count FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T2.Name;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT musical.Name, COUNT(actor.Actor_ID) AS Actor_Count\nFROM musical\nLEFT JOIN actor ON musical.Musical_ID = actor.Musical_ID\nGROUP BY musical.Name;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.260",
        "c_low": "SELECT Nominee, COUNT(Musical_ID) AS Number_of_Musicals\nFROM musical\nWHERE Result = 'Nominated'\nGROUP BY Nominee;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Nominee, COUNT(DISTINCT Musical_ID) AS NumberOfMusicals\nFROM musical\nGROUP BY Nominee;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT Nominee, COUNT(*) AS NumberOfNominations FROM musical GROUP BY Nominee",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Nominee, COUNT(*) AS NumberOfMusicals\nFROM musical\nGROUP BY Nominee;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Nominee, COUNT(*) AS NumberOfMusicals\nFROM musical\nWHERE Result = 'Nominated'\nGROUP BY Nominee;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Nominee, COUNT(Musical_ID) AS Number_of_Musicals\nFROM musical\nWHERE Result = 'Nominated'\nGROUP BY Nominee;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.261",
        "c_low": "SELECT Nominee, COUNT(*) AS Nominations\nFROM musical\nWHERE Result = 'Nominated'\nGROUP BY Nominee;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Nominee, COUNT(*) AS Nominations\nFROM musical\nGROUP BY Nominee;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT Nominee, COUNT(*) AS Nominations FROM musical GROUP BY Nominee",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Nominee, COUNT(*) AS Nominations\nFROM musical\nGROUP BY Nominee;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Nominee, COUNT(*) AS Nominations\nFROM musical\nWHERE Result = 'Nominated'\nGROUP BY Nominee;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Nominee, COUNT(*) AS Nominations\nFROM musical\nWHERE Result = 'Nominated'\nGROUP BY Nominee;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.262",
        "c_low": "SELECT Nominee, COUNT(*) AS NominationCount\nFROM musical\nGROUP BY Nominee\nORDER BY NominationCount DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Nominee, COUNT(*) AS NominationCount\nFROM musical\nGROUP BY Nominee\nORDER BY NominationCount DESC\nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_1": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_2": "SELECT Nominee, COUNT(*) AS NominationCount\nFROM musical\nGROUP BY Nominee\nORDER BY NominationCount DESC\nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT Nominee, COUNT(*) AS NominationCount\nFROM musical\nGROUP BY Nominee\nORDER BY NominationCount DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.263",
        "c_low": "SELECT Nominee, COUNT(*) AS NominationCount\nFROM musical\nGROUP BY Nominee\nORDER BY NominationCount DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Nominee, COUNT(*) as NominationCount FROM musical GROUP BY Nominee ORDER BY NominationCount DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*) = (SELECT MAX(nomination_count) FROM (SELECT COUNT(*) AS nomination_count FROM musical GROUP BY Nominee));",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*) > 0 ORDER BY COUNT(*) DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Nominee, COUNT(*) as NominationCount FROM musical GROUP BY Nominee ORDER BY NominationCount DESC LIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "t_3+": "SELECT Nominee, COUNT(*) AS NominationCount\nFROM musical\nGROUP BY Nominee\nORDER BY NominationCount DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.267",
        "c_low": "SELECT Nominee, COUNT(*) as NominationCount \nFROM musical \nWHERE Result = 'Nominated' \nGROUP BY Nominee \nHAVING COUNT(*) > 2;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT Nominee, COUNT(*) as NominationCount \nFROM musical \nWHERE Result = 'Nominated' \nGROUP BY Nominee \nHAVING COUNT(*) > 2;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_high": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*) > 2",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*) > 2",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Nominee, COUNT(*) as NominationCount \nFROM musical \nWHERE Result = 'Nominated' \nGROUP BY Nominee \nHAVING COUNT(*) > 2;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT Nominee, COUNT(*) as NominationCount \nFROM musical \nWHERE Result = 'Nominated' \nGROUP BY Nominee \nHAVING COUNT(*) > 2;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.272",
        "c_low": "SELECT Name, Nominee FROM musical WHERE Award IN ('Bob Fosse', 'Cleavant Derricks');",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID WHERE T2.Award IN ('Bob Fosse', 'Cleavant Derricks')",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT Nominee FROM musical WHERE Award = 'Bob Fosse' INTERSECT SELECT Nominee FROM musical WHERE Award = 'Cleavant Derricks'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Nominee FROM musical WHERE Award = 'Bob Fosse' INTERSECT SELECT Nominee FROM musical WHERE Award = 'Cleavant Derricks'",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT Nominee FROM musical WHERE Award IN ('Bob Fosse', 'Cleavant Derricks')",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT Name, Nominee FROM musical WHERE Award IN ('Bob Fosse', 'Cleavant Derricks');",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.273",
        "c_low": "SELECT DISTINCT Nominee \nFROM musical \nWHERE Award IN ('Bob Fosse', 'Cleavant Derricks') \nAND Result = 'Nominated';",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT DISTINCT Nominee FROM musical WHERE Award IN ('Bob Fosse', 'Cleavant Derricks') AND Result = 'Nominated';",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT Nominee FROM musical WHERE Award = 'Bob Fosse' INTERSECT SELECT Nominee FROM musical WHERE Award = 'Cleavant Derricks'",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT Nominee FROM musical WHERE Award = 'Bob Fosse' INTERSECT SELECT Nominee FROM musical WHERE Award = 'Cleavant Derricks'",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table identifies nominees from the 'musical' table who have been nominated for two specific awards. The placeholders in the WHERE clauses represent the names of the awards being compared.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING] INTERSECT SELECT Nominee FROM musical WHERE Award  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.\",\n        \"virtual_table\": \"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT DISTINCT Nominee FROM musical WHERE Award IN ('Bob Fosse', 'Cleavant Derricks') AND Result = 'Nominated';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of actors from the 'actor' table who performed in a specific musical. The placeholder in the WHERE clause represents the title of the musical.\",\n        \"virtual_table\": \"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table lists the names of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for a musical to be included in the results.\",\n        \"virtual_table\": \"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT DISTINCT Nominee \nFROM musical \nWHERE Award IN ('Bob Fosse', 'Cleavant Derricks') \nAND Result = 'Nominated';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.285",
        "c_low": "SELECT up.name \nFROM user_profiles up \nWHERE up.followers > (SELECT followers FROM user_profiles WHERE name = 'Tyler Swift')",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT name FROM user_profiles WHERE followers > (SELECT followers FROM user_profiles WHERE name = 'Tyler Swift')",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and email addresses of users from the 'user_profiles' table, ordered by the number of followers they have. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table calculates the average number of followers for users from the 'user_profiles' table who have not posted any tweets. The placeholder in the subquery represents the user identifiers of those who have tweeted.\",\n        \"virtual_table\": \"SELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the identifiers of users being followed by a specific user or users from the 'user_profiles' table. The placeholders in the WHERE clause represent the names of the users whose followings are being queried.\",\n        \"virtual_table\": \"SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING] OR T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT name FROM user_profiles WHERE followers > (SELECT followers FROM user_profiles WHERE name = 'Tyler Swift')",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of users from the 'user_profiles' table who have posted more than a specified number of tweets. The placeholder in the HAVING clause represents the minimum count of tweets a user must have posted to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of users from the 'user_profiles' table along with the count of tweets they have posted. It filters the results to only include users who have posted more than a specified number of tweets, represented by a placeholder in the HAVING clause.\",\n        \"virtual_table\": \"SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names and partition identifiers of users from the 'user_profiles' table who have posted fewer tweets than a specified number. The placeholder in the HAVING clause represents the maximum number of tweets a user can have to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT name FROM user_profiles WHERE followers > (SELECT followers FROM user_profiles WHERE name = 'Tyler Swift')",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and email addresses of users from the 'user_profiles' table, ordered by the number of followers they have. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT name FROM user_profiles WHERE followers > (SELECT followers FROM user_profiles WHERE name = 'Tyler Swift')",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of users from the 'user_profiles' table who have posted more than a specified number of tweets. The placeholder in the HAVING clause represents the minimum count of tweets a user must have posted to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of users from the 'user_profiles' table along with the count of tweets they have posted. It filters the results to only include users who have posted more than a specified number of tweets, represented by a placeholder in the HAVING clause.\",\n        \"virtual_table\": \"SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names and partition identifiers of users from the 'user_profiles' table who have posted fewer tweets than a specified number. The placeholder in the HAVING clause represents the maximum number of tweets a user can have to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT up.name \nFROM user_profiles up \nWHERE up.followers > (SELECT followers FROM user_profiles WHERE name = 'Tyler Swift')",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.286",
        "c_low": "SELECT name, email FROM user_profiles WHERE followers > 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT name, email FROM user_profiles WHERE followers > 1",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and email addresses of users from the 'user_profiles' table, ordered by the number of followers they have. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the identifiers of users being followed by a specific user or users from the 'user_profiles' table. The placeholders in the WHERE clause represent the names of the users whose followings are being queried.\",\n        \"virtual_table\": \"SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING] OR T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table calculates the average number of followers for users from the 'user_profiles' table who have not posted any tweets. The placeholder in the subquery represents the user identifiers of those who have tweeted.\",\n        \"virtual_table\": \"SELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)\"\n    }\n}\n",
        "c_high": "SELECT name, email FROM user_profiles WHERE followers > 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of users from the 'user_profiles' table who have posted more than a specified number of tweets. The placeholder in the HAVING clause represents the minimum count of tweets a user must have posted to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names of users from the 'user_profiles' table along with the count of tweets they have posted. It filters the results to only include users who have posted more than a specified number of tweets, represented by a placeholder in the HAVING clause.\",\n        \"virtual_table\": \"SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names and partition identifiers of users from the 'user_profiles' table who have posted fewer tweets than a specified number. The placeholder in the HAVING clause represents the maximum number of tweets a user can have to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT name, email FROM user_profiles WHERE followers > 1",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and email addresses of users from the 'user_profiles' table, ordered by the number of followers they have. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT name, email FROM user_profiles WHERE followers > 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of users from the 'user_profiles' table who have posted more than a specified number of tweets. The placeholder in the HAVING clause represents the minimum count of tweets a user must have posted to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the identifiers of users being followed by a specific user or users from the 'user_profiles' table. The placeholders in the WHERE clause represent the names of the users whose followings are being queried.\",\n        \"virtual_table\": \"SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING] OR T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names of users from the 'user_profiles' table along with the count of tweets they have posted. It filters the results to only include users who have posted more than a specified number of tweets, represented by a placeholder in the HAVING clause.\",\n        \"virtual_table\": \"SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT name, email FROM user_profiles WHERE followers > 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.288",
        "c_low": "SELECT f1 FROM follows WHERE f2 IN (SELECT uid FROM user_profiles WHERE name IN ('Mary', 'Susan'));",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = 'Mary' OR T1.name = 'Susan'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the identifiers of users being followed by a specific user or users from the 'user_profiles' table. The placeholders in the WHERE clause represent the names of the users whose followings are being queried.\",\n        \"virtual_table\": \"SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING] OR T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and email addresses of users from the 'user_profiles' table, ordered by the number of followers they have. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT f1 FROM follows WHERE f2 IN (SELECT uid FROM user_profiles WHERE name IN ('Mary', 'Susan'))",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of users from the 'user_profiles' table who have posted more than a specified number of tweets. The placeholder in the HAVING clause represents the minimum count of tweets a user must have posted to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and partition identifiers of users from the 'user_profiles' table who have posted fewer tweets than a specified number. The placeholder in the HAVING clause represents the maximum number of tweets a user can have to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names of users from the 'user_profiles' table along with the count of tweets they have posted. It filters the results to only include users who have posted more than a specified number of tweets, represented by a placeholder in the HAVING clause.\",\n        \"virtual_table\": \"SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT uid FROM follows WHERE f1 IN (SELECT uid FROM user_profiles WHERE name IN ('Mary', 'Susan'));",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and email addresses of users from the 'user_profiles' table, ordered by the number of followers they have. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = 'Mary' OR T1.name = 'Susan'",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the identifiers of users being followed by a specific user or users from the 'user_profiles' table. The placeholders in the WHERE clause represent the names of the users whose followings are being queried.\",\n        \"virtual_table\": \"SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING] OR T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of users from the 'user_profiles' table who have posted more than a specified number of tweets. The placeholder in the HAVING clause represents the minimum count of tweets a user must have posted to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names and partition identifiers of users from the 'user_profiles' table who have posted fewer tweets than a specified number. The placeholder in the HAVING clause represents the maximum number of tweets a user can have to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT f1 FROM follows WHERE f2 IN (SELECT uid FROM user_profiles WHERE name IN ('Mary', 'Susan'));",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.293",
        "c_low": "SELECT up.name\nFROM user_profiles up\nJOIN follows f ON up.uid = f.f2\nGROUP BY up.uid\nORDER BY COUNT(f.f1) DESC\nLIMIT 5;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT name FROM user_profiles WHERE uid IN (SELECT f1 FROM follows GROUP BY f1 ORDER BY COUNT(f2) DESC LIMIT 5)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and email addresses of users from the 'user_profiles' table, ordered by the number of followers they have. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT T1.name FROM user_profiles AS T1 JOIN follows AS F ON T1.uid = F.f2 GROUP BY F.f2 ORDER BY COUNT(F.f1) DESC LIMIT 5;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of users from the 'user_profiles' table who have posted more than a specified number of tweets. The placeholder in the HAVING clause represents the minimum count of tweets a user must have posted to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT name FROM user_profiles WHERE uid IN (SELECT f1 FROM follows GROUP BY f1 ORDER BY COUNT(f2) DESC LIMIT 5)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and email addresses of users from the 'user_profiles' table, ordered by the number of followers they have. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T1.name FROM user_profiles AS T1 JOIN follows AS F ON T1.uid = F.f2 GROUP BY F.f2 ORDER BY COUNT(F.f1) DESC LIMIT 5;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of users from the 'user_profiles' table who have posted more than a specified number of tweets. The placeholder in the HAVING clause represents the minimum count of tweets a user must have posted to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT up.name\nFROM user_profiles up\nJOIN follows f ON up.uid = f.f2\nGROUP BY up.uid\nORDER BY COUNT(f.f1) DESC\nLIMIT 5;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.295",
        "c_low": "SELECT user_profiles.name, COUNT(tweets.id) AS tweet_count\nFROM user_profiles\nLEFT JOIN tweets ON user_profiles.uid = tweets.uid\nGROUP BY user_profiles.uid;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT user_profiles.name, COUNT(tweets.id) AS tweet_count \nFROM user_profiles \nLEFT JOIN tweets ON user_profiles.uid = tweets.uid \nGROUP BY user_profiles.uid;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table calculates the average number of followers for users from the 'user_profiles' table who have not posted any tweets. The placeholder in the subquery represents the user identifiers of those who have tweeted.\",\n        \"virtual_table\": \"SELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides the names and email addresses of users from the 'user_profiles' table, ordered by the number of followers they have. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the identifiers of users being followed by a specific user or users from the 'user_profiles' table. The placeholders in the WHERE clause represent the names of the users whose followings are being queried.\",\n        \"virtual_table\": \"SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  [PLACEHOLDER-TYPE:STRING] OR T1.name  =  [PLACEHOLDER-TYPE:STRING]\"\n    }\n}\n",
        "c_high": "SELECT T1.name, count(*) AS tweet_count FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T1.uid",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names of users from the 'user_profiles' table along with the count of tweets they have posted. It filters the results to only include users who have posted more than a specified number of tweets, represented by a placeholder in the HAVING clause.\",\n        \"virtual_table\": \"SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of users from the 'user_profiles' table who have posted more than a specified number of tweets. The placeholder in the HAVING clause represents the minimum count of tweets a user must have posted to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names and partition identifiers of users from the 'user_profiles' table who have posted fewer tweets than a specified number. The placeholder in the HAVING clause represents the maximum number of tweets a user can have to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT up.name, COUNT(t.id) AS tweet_count \nFROM user_profiles up \nLEFT JOIN tweets t ON up.uid = t.uid \nGROUP BY up.uid \nORDER BY tweet_count DESC;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names and email addresses of users from the 'user_profiles' table, ordered by the number of followers they have. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.\",\n        \"virtual_table\": \"SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT T1.name, count(*) AS tweet_count FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T1.uid",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides the names of users from the 'user_profiles' table along with the count of tweets they have posted. It filters the results to only include users who have posted more than a specified number of tweets, represented by a placeholder in the HAVING clause.\",\n        \"virtual_table\": \"SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of users from the 'user_profiles' table who have posted more than a specified number of tweets. The placeholder in the HAVING clause represents the minimum count of tweets a user must have posted to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides the names and partition identifiers of users from the 'user_profiles' table who have posted fewer tweets than a specified number. The placeholder in the HAVING clause represents the maximum number of tweets a user can have to be included in the results.\",\n        \"virtual_table\": \"SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT user_profiles.name, COUNT(tweets.id) AS tweet_count\nFROM user_profiles\nLEFT JOIN tweets ON user_profiles.uid = tweets.uid\nGROUP BY user_profiles.uid;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.304",
        "c_low": "SELECT attribute_data_type\nFROM Attribute_Definitions\nGROUP BY attribute_data_type\nHAVING COUNT(attribute_id) > 3;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT ad.attribute_data_type, COUNT(ad.attribute_id) AS attribute_count \nFROM Attribute_Definitions AS ad \nGROUP BY ad.attribute_data_type \nHAVING COUNT(ad.attribute_id) > 3;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and unique identifiers of attributes from the 'Attribute_Definitions' table that are associated with specific catalog entries in the 'Catalog_Contents_Additional_Attributes' table. The placeholder in the WHERE clause represents the value of the attribute being queried.\",\n        \"virtual_table\": \"SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*) > 3",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of the different data types defined in the 'Attribute_Definitions' table, specifically those that have more than a specified number of occurrences. The placeholder in the HAVING clause represents the minimum count of attributes required to be included in the results.\",\n        \"virtual_table\": \"SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*) > 3",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of the different data types defined in the 'Attribute_Definitions' table, specifically those that have more than a specified number of occurrences. The placeholder in the HAVING clause represents the minimum count of attributes required to be included in the results.\",\n        \"virtual_table\": \"SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT ad.attribute_data_type, COUNT(ad.attribute_id) AS attribute_count \nFROM Attribute_Definitions AS ad \nGROUP BY ad.attribute_data_type \nHAVING COUNT(ad.attribute_id) > 3;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and unique identifiers of attributes from the 'Attribute_Definitions' table that are associated with specific catalog entries in the 'Catalog_Contents_Additional_Attributes' table. The placeholder in the WHERE clause represents the value of the attribute being queried.\",\n        \"virtual_table\": \"SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT attribute_data_type\nFROM Attribute_Definitions\nGROUP BY attribute_data_type\nHAVING COUNT(attribute_id) > 3;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.311",
        "c_low": "SELECT catalog_publisher, COUNT(catalog_id) AS catalog_count\nFROM Catalogs\nGROUP BY catalog_publisher\nORDER BY catalog_count DESC\nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    }\n}\n",
        "c_mid": "SELECT catalog_publisher, COUNT(catalog_id) AS catalog_count \nFROM Catalogs \nGROUP BY catalog_publisher \nORDER BY catalog_count DESC \nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique catalog publishers from the 'Catalogs' table that match a specific pattern. The placeholder in the WHERE clause allows for filtering based on the publisher's name.\",\n        \"virtual_table\": \"SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that have a next entry in the catalog hierarchy. The placeholder in the WHERE clause represents a numeric identifier for filtering entries based on their next entry ID.\",\n        \"virtual_table\": \"SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT catalog_publisher, COUNT(catalog_id) AS catalog_count\nFROM Catalogs\nGROUP BY catalog_publisher\nORDER BY catalog_count DESC\nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT catalog_publisher, COUNT(catalog_id) AS catalog_count \nFROM Catalogs \nGROUP BY catalog_publisher \nORDER BY catalog_count DESC \nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique catalog publishers from the 'Catalogs' table that match a specific pattern. The placeholder in the WHERE clause allows for filtering based on the publisher's name.\",\n        \"virtual_table\": \"SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    }\n}\n",
        "t_2": "SELECT catalog_publisher, COUNT(catalog_id) AS catalog_count\nFROM Catalogs\nGROUP BY catalog_publisher\nORDER BY catalog_count DESC\nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT catalog_publisher, COUNT(catalog_id) AS catalog_count\nFROM Catalogs\nGROUP BY catalog_publisher\nORDER BY catalog_count DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.312",
        "c_low": "SELECT catalog_publisher FROM Catalogs GROUP BY catalog_publisher ORDER BY COUNT(catalog_id) DESC LIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    }\n}\n",
        "c_mid": "SELECT catalog_publisher FROM Catalogs GROUP BY catalog_publisher ORDER BY COUNT(catalog_id) DESC LIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique catalog publishers from the 'Catalogs' table that match a specific pattern. The placeholder in the WHERE clause allows for filtering based on the publisher's name.\",\n        \"virtual_table\": \"SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that have a next entry in the catalog hierarchy. The placeholder in the WHERE clause represents a numeric identifier for filtering entries based on their next entry ID.\",\n        \"virtual_table\": \"SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT catalog_publisher, COUNT(catalog_id) AS catalog_count\nFROM Catalogs\nGROUP BY catalog_publisher\nORDER BY catalog_count DESC\nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT catalog_publisher FROM Catalogs GROUP BY catalog_publisher ORDER BY COUNT(catalog_id) DESC LIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique catalog publishers from the 'Catalogs' table that match a specific pattern. The placeholder in the WHERE clause allows for filtering based on the publisher's name.\",\n        \"virtual_table\": \"SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE [PLACEHOLDER-TYPE:STRING]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    }\n}\n",
        "t_2": "SELECT catalog_publisher, COUNT(catalog_id) AS catalog_count\nFROM Catalogs\nGROUP BY catalog_publisher\nORDER BY catalog_count DESC\nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT catalog_publisher, COUNT(catalog_id) AS catalog_count\nFROM Catalogs\nGROUP BY catalog_publisher\nORDER BY catalog_count DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.315",
        "c_low": "SELECT catalog_entry_name\nFROM Catalog_Contents\nWHERE catalog_entry_id IN (\n    SELECT catalog_entry_id\n    FROM Catalog_Contents_Additional_Attributes\n    GROUP BY attribute_id\n    ORDER BY COUNT(DISTINCT catalog_entry_id) DESC\n    LIMIT 1\n)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    }\n}\n",
        "c_mid": "SELECT cc.catalog_entry_name \nFROM Catalog_Contents AS cc \nJOIN Catalog_Contents_Additional_Attributes AS cca ON cc.catalog_entry_id = cca.catalog_entry_id \nWHERE cca.attribute_id IN (\n    SELECT attribute_id \n    FROM Catalog_Contents_Additional_Attributes \n    GROUP BY attribute_id \n    ORDER BY COUNT(*) DESC \n    LIMIT 1\n)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that have a next entry in the catalog hierarchy. The placeholder in the WHERE clause represents a numeric identifier for filtering entries based on their next entry ID.\",\n        \"virtual_table\": \"SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names and unique identifiers of attributes from the 'Attribute_Definitions' table that are associated with specific catalog entries in the 'Catalog_Contents_Additional_Attributes' table. The placeholder in the WHERE clause represents the value of the attribute being queried.\",\n        \"virtual_table\": \"SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT cc.catalog_entry_name\nFROM Catalog_Contents cc\nJOIN Catalog_Contents_Additional_Attributes cca ON cc.catalog_entry_id = cca.catalog_entry_id\nWHERE cca.attribute_id = (\n    SELECT attribute_id\n    FROM Catalog_Contents_Additional_Attributes\n    GROUP BY attribute_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT catalog_entry_name\nFROM Catalog_Contents_Additional_Attributes\nWHERE attribute_id = (\n    SELECT attribute_id\n    FROM Catalog_Contents_Additional_Attributes\n    GROUP BY attribute_id\n    ORDER BY COUNT(catalog_entry_id) DESC\n    LIMIT 1\n)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that have a next entry in the catalog hierarchy. The placeholder in the WHERE clause represents a numeric identifier for filtering entries based on their next entry ID.\",\n        \"virtual_table\": \"SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT cc.catalog_entry_name \nFROM Catalog_Contents AS cc \nJOIN Catalog_Contents_Additional_Attributes AS cca ON cc.catalog_entry_id = cca.catalog_entry_id \nWHERE cca.attribute_id = (\n    SELECT attribute_id \n    FROM Catalog_Contents_Additional_Attributes \n    GROUP BY attribute_id \n    ORDER BY COUNT(*) DESC \n    LIMIT 1\n)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and unique identifiers of attributes from the 'Attribute_Definitions' table that are associated with specific catalog entries in the 'Catalog_Contents_Additional_Attributes' table. The placeholder in the WHERE clause represents the value of the attribute being queried.\",\n        \"virtual_table\": \"SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT cc.catalog_entry_name\nFROM Catalog_Contents cc\nJOIN Catalog_Contents_Additional_Attributes cca ON cc.catalog_entry_id = cca.catalog_entry_id\nWHERE cca.attribute_id = (\n    SELECT attribute_id\n    FROM Catalog_Contents_Additional_Attributes\n    GROUP BY attribute_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.316",
        "c_low": "SELECT catalog_entry_name\nFROM Catalog_Contents\nWHERE catalog_entry_id IN (\n    SELECT catalog_entry_id\n    FROM Catalog_Contents_Additional_Attributes\n    GROUP BY catalog_entry_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    }\n}\n",
        "c_mid": "SELECT cc.catalog_entry_name\nFROM Catalog_Contents AS cc\nJOIN Catalog_Contents_Additional_Attributes AS cca ON cc.catalog_entry_id = cca.catalog_entry_id\nGROUP BY cca.attribute_id\nORDER BY COUNT(cca.catalog_entry_id) DESC\nLIMIT 1;",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that have a next entry in the catalog hierarchy. The placeholder in the WHERE clause represents a numeric identifier for filtering entries based on their next entry ID.\",\n        \"virtual_table\": \"SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names and unique identifiers of attributes from the 'Attribute_Definitions' table that are associated with specific catalog entries in the 'Catalog_Contents_Additional_Attributes' table. The placeholder in the WHERE clause represents the value of the attribute being queried.\",\n        \"virtual_table\": \"SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT cc.catalog_entry_name\nFROM Catalog_Contents cc\nJOIN Catalog_Contents_Additional_Attributes cca ON cc.catalog_entry_id = cca.catalog_entry_id\nJOIN (\n    SELECT attribute_id\n    FROM Catalog_Contents_Additional_Attributes\n    GROUP BY attribute_id\n    HAVING COUNT(*) = (\n        SELECT MAX(attr_count)\n        FROM (\n            SELECT COUNT(*) as attr_count\n            FROM Catalog_Contents_Additional_Attributes\n            GROUP BY attribute_id\n        )\n    )\n) AS most_entries ON cca.attribute_id = most_entries.attribute_id;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a summary of the different data types defined in the 'Attribute_Definitions' table, specifically those that have more than a specified number of occurrences. The placeholder in the HAVING clause represents the minimum count of attributes required to be included in the results.\",\n        \"virtual_table\": \"SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_1": "SELECT catalog_entry_name\nFROM Catalog_Contents cc\nJOIN Catalog_Contents_Additional_Attributes cca ON cc.catalog_entry_id = cca.catalog_entry_id\nGROUP BY cc.catalog_entry_name\nORDER BY COUNT(cca.attribute_id) DESC\nLIMIT 1;",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that have a next entry in the catalog hierarchy. The placeholder in the WHERE clause represents a numeric identifier for filtering entries based on their next entry ID.\",\n        \"virtual_table\": \"SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT cc.catalog_entry_name\nFROM Catalog_Contents AS cc\nJOIN Catalog_Contents_Additional_Attributes AS cca ON cc.catalog_entry_id = cca.catalog_entry_id\nWHERE cca.attribute_id IN (\n    SELECT attribute_id\n    FROM Catalog_Contents_Additional_Attributes\n    GROUP BY attribute_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n);",
        "t_2_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and unique identifiers of attributes from the 'Attribute_Definitions' table that are associated with specific catalog entries in the 'Catalog_Contents_Additional_Attributes' table. The placeholder in the WHERE clause represents the value of the attribute being queried.\",\n        \"virtual_table\": \"SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_3+": "SELECT cc.catalog_entry_name\nFROM Catalog_Contents cc\nJOIN Catalog_Contents_Additional_Attributes cca ON cc.catalog_entry_id = cca.catalog_entry_id\nGROUP BY cca.attribute_id\nORDER BY COUNT(cca.catalog_entry_id) DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.317",
        "c_low": "SELECT catalog_entry_name FROM Catalog_Contents WHERE catalog_entry_id IN (SELECT catalog_entry_id FROM Catalog_Contents ORDER BY price_in_dollars DESC LIMIT 1)",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    }\n}\n",
        "c_mid": "SELECT catalog_entry_name FROM Catalog_Contents WHERE price_in_dollars = (SELECT MAX(price_in_dollars) FROM Catalog_Contents)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that have a next entry in the catalog hierarchy. The placeholder in the WHERE clause represents a numeric identifier for filtering entries based on their next entry ID.\",\n        \"virtual_table\": \"SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT cc.catalog_entry_name\nFROM Catalogs c\nJOIN Catalog_Contents cc ON c.catalog_id = cc.catalog_level_number\nORDER BY cc.price_in_dollars DESC\nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT catalog_entry_name FROM Catalog_Contents WHERE price_in_dollars = (SELECT MAX(price_in_dollars) FROM Catalog_Contents)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that have a next entry in the catalog hierarchy. The placeholder in the WHERE clause represents a numeric identifier for filtering entries based on their next entry ID.\",\n        \"virtual_table\": \"SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT cc.catalog_entry_name\nFROM Catalogs c\nJOIN Catalog_Contents cc ON c.catalog_id = cc.catalog_level_number\nORDER BY cc.price_in_dollars DESC\nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT cc.catalog_entry_name\nFROM Catalogs c\nJOIN Catalog_Contents cc ON c.catalog_id = cc.catalog_id\nORDER BY cc.price_in_dollars DESC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.319",
        "c_low": "SELECT cs.catalog_level_name \nFROM Catalogs c \nJOIN Catalog_Contents cc ON c.catalog_id = cc.catalog_id \nJOIN Catalog_Structure cs ON cc.catalog_level_number = cs.catalog_level_number \nWHERE cc.price_in_dollars = (\n    SELECT MIN(price_in_dollars) \n    FROM Catalog_Contents \n    WHERE catalog_id = c.catalog_id\n) \nLIMIT 1;",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    }\n}\n",
        "c_mid": "SELECT cs.catalog_level_name \nFROM Catalogs c \nJOIN Catalog_Contents cc ON c.catalog_id = cc.catalog_id \nJOIN Catalog_Structure cs ON cc.catalog_level_number = cs.catalog_level_number \nWHERE c.catalog_id = (SELECT catalog_id \n                      FROM Catalogs \n                      ORDER BY (SELECT MIN(price_in_dollars) FROM Catalog_Contents WHERE catalog_id = Catalogs.catalog_id) \n                      LIMIT 1)",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names and level numbers of catalog levels from the 'Catalog_Structure' table that fall within a specified range of level numbers. The placeholders in the WHERE clause represent the lower and upper bounds of the level number range.\",\n        \"virtual_table\": \"SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that have a next entry in the catalog hierarchy. The placeholder in the WHERE clause represents a numeric identifier for filtering entries based on their next entry ID.\",\n        \"virtual_table\": \"SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT cs.catalog_level_name\nFROM Catalogs c\nJOIN Catalog_Contents cc ON c.catalog_id = cc.catalog_id\nJOIN Catalog_Structure cs ON cc.catalog_level_number = cs.catalog_level_number\nORDER BY cc.price_in_dollars ASC\nLIMIT 1;",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT cs.catalog_level_name \nFROM Catalogs c \nJOIN Catalog_Contents cc ON c.catalog_id = cc.catalog_id \nJOIN Catalog_Structure cs ON cc.catalog_level_number = cs.catalog_level_number \nWHERE c.catalog_id = (SELECT catalog_id \n                      FROM Catalog_Contents \n                      ORDER BY price_in_dollars ASC \n                      LIMIT 1)",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names and level numbers of catalog levels from the 'Catalog_Structure' table that fall within a specified range of level numbers. The placeholders in the WHERE clause represent the lower and upper bounds of the level number range.\",\n        \"virtual_table\": \"SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that have a next entry in the catalog hierarchy. The placeholder in the WHERE clause represents a numeric identifier for filtering entries based on their next entry ID.\",\n        \"virtual_table\": \"SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT cs.catalog_level_name\nFROM Catalogs c\nJOIN Catalog_Contents cc ON c.catalog_id = cc.catalog_id\nJOIN Catalog_Structure cs ON cc.catalog_level_number = cs.catalog_level_number\nORDER BY cc.price_in_dollars ASC\nLIMIT 1;",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT cs.catalog_level_name\nFROM Catalogs c\nJOIN Catalog_Contents cc ON c.catalog_id = cc.catalog_id\nJOIN Catalog_Structure cs ON cc.catalog_level_number = cs.catalog_level_number\nORDER BY cc.price_in_dollars ASC\nLIMIT 1;",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.320",
        "c_low": "SELECT cs.catalog_level_name\nFROM Catalogs c\nJOIN Catalog_Contents cc ON c.catalog_id = cc.catalog_id\nWHERE cc.price_in_dollars = (\n    SELECT MIN(price_in_dollars)\n    FROM Catalog_Contents\n);\n",
        "c_low_hint": "Descriptions and Virtual Tables:\n{}\n",
        "c_mid": "SELECT cs.catalog_level_name \nFROM Catalog_Contents cc \nJOIN Catalog_Structure cs ON cc.catalog_level_number = cs.catalog_level_number \nWHERE cc.price_in_dollars = (\n    SELECT MIN(price_in_dollars) \n    FROM Catalog_Contents\n);",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names and level numbers of catalog levels from the 'Catalog_Structure' table that fall within a specified range of level numbers. The placeholders in the WHERE clause represent the lower and upper bounds of the level number range.\",\n        \"virtual_table\": \"SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT cs.catalog_level_name\nFROM Catalogs c\nJOIN Catalog_Contents cc ON c.catalog_id = cc.catalog_id\nWHERE cc.price_in_dollars = (\n    SELECT MIN(price_in_dollars)\n    FROM Catalog_Contents\n)",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT cs.catalog_level_name \nFROM Catalog_Contents cc \nJOIN Catalog_Structure cs ON cc.catalog_level_number = cs.catalog_level_number \nWHERE cc.price_in_dollars = (SELECT MIN(price_in_dollars) FROM Catalog_Contents);",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names and level numbers of catalog levels from the 'Catalog_Structure' table that fall within a specified range of level numbers. The placeholders in the WHERE clause represent the lower and upper bounds of the level number range.\",\n        \"virtual_table\": \"SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "t_2": "SELECT cs.catalog_level_name\nFROM Catalogs c\nJOIN Catalog_Contents cc ON c.catalog_id = cc.catalog_id\nWHERE cc.price_in_dollars = (\n    SELECT MIN(price_in_dollars)\n    FROM Catalog_Contents\n)",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT cs.catalog_level_name\nFROM Catalogs c\nJOIN Catalog_Contents cc ON c.catalog_id = cc.catalog_id\nWHERE cc.price_in_dollars = (\n    SELECT MIN(price_in_dollars)\n    FROM Catalog_Contents\n)",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    },
    {
        "sample_id": "train.329",
        "c_low": "SELECT DISTINCT(catalog_entry_name) FROM Catalog_Contents WHERE catalog_level_number = '8'",
        "c_low_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    }\n}\n",
        "c_mid": "SELECT catalog_entry_name FROM Catalog_Contents WHERE catalog_level_number = '8'",
        "c_mid_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and level numbers of catalog levels from the 'Catalog_Structure' table that fall within a specified range of level numbers. The placeholders in the WHERE clause represent the lower and upper bounds of the level number range.\",\n        \"virtual_table\": \"SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that have a next entry in the catalog hierarchy. The placeholder in the WHERE clause represents a numeric identifier for filtering entries based on their next entry ID.\",\n        \"virtual_table\": \"SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table describes the names and capacities of catalog entries from the 'Catalog_Contents' table that have a price greater than a specified amount in US dollars. The placeholder in the WHERE clause represents the price threshold.\",\n        \"virtual_table\": \"SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    }\n}\n",
        "c_high": "SELECT catalog_entry_name FROM Catalog_Contents WHERE catalog_level_number = '8';",
        "c_high_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_1": "SELECT catalog_entry_name FROM Catalog_Contents WHERE catalog_level_number = '8'",
        "t_1_hint": "Descriptions and Virtual Tables:\n{\n    \"0\": {\n        \"description\": \"This virtual table describes the names and level numbers of catalog levels from the 'Catalog_Structure' table that fall within a specified range of level numbers. The placeholders in the WHERE clause represent the lower and upper bounds of the level number range.\",\n        \"virtual_table\": \"SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN [PLACEHOLDER-TYPE:NUMBER] AND [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"1\": {\n        \"description\": \"This virtual table describes the names of catalog entries from the 'Catalog_Contents' table that have a next entry in the catalog hierarchy. The placeholder in the WHERE clause represents a numeric identifier for filtering entries based on their next entry ID.\",\n        \"virtual_table\": \"SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  [PLACEHOLDER-TYPE:NUMBER]\"\n    },\n    \"2\": {\n        \"description\": \"This virtual table provides a list of unique catalog entry names from the 'Catalog_Contents' table. The use of the DISTINCT keyword ensures that each entry name is only listed once, regardless of how many times it appears in the table.\",\n        \"virtual_table\": \"SELECT distinct(catalog_entry_name) FROM catalog_contents\"\n    }\n}\n",
        "t_2": "SELECT catalog_entry_name FROM Catalog_Contents WHERE catalog_level_number = '8';",
        "t_2_hint": "Descriptions and Virtual Tables:\n{}\n",
        "t_3+": "SELECT catalog_entry_name FROM Catalog_Contents WHERE catalog_level_number = '8';",
        "t_3+_hint": "Descriptions and Virtual Tables:\n{}\n"
    }
]