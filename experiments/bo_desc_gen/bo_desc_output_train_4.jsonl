{"sample_id": "train.931", "rationale": ["The query identifies the relevant tables, which are 'Customers' and 'Customers_Policies'.", "It selects the columns 'date_opened' and 'date_closed' from the 'Customers_Policies' table.", "A JOIN operation is performed to link 'Customers' and 'Customers_Policies' based on the 'customer_id'.", "A condition is added to filter the results based on the 'customer_name' using a placeholder for string values."], "description": "This virtual table provides the opening and closing dates of policies associated with a specific customer from the 'Customers' and 'Customers_Policies' tables. The placeholder in the WHERE clause represents the name of the customer being queried."}
{"sample_id": "train.933", "rationale": ["The query is identifying the relevant table, which is 'enzyme'.", "The count function is used to return the total number of records in the 'enzyme' table.", "No conditions are applied, so it counts all entries in the table."], "description": "This virtual table provides the total count of enzymes recorded in the 'enzyme' table. It does not filter or specify any conditions, thus returning the overall number of entries present."}
{"sample_id": "train.935", "rationale": ["The query identifies the relevant table, which is 'enzyme'.", "Select the column to display, 'name'.", "Add an ORDER BY clause to sort the results in descending order based on the enzyme names."], "description": "This virtual table lists the names of enzymes from the 'enzyme' table, sorted in descending order. The output will show all enzyme names without any filtering conditions."}
{"sample_id": "train.939", "rationale": ["The query is identifying the relevant table, which is 'enzyme'.", "It selects the maximum value from the 'OMIM' column, which is a numeric field.", "The use of the aggregate function 'max' indicates that we are interested in the highest OMIM identifier present in the enzyme table."], "description": "This virtual table provides the maximum OMIM identifier from the 'enzyme' table, which is used to uniquely identify genetic conditions related to enzymes. The query retrieves the highest value of the OMIM column, which is a numeric identifier."}
{"sample_id": "train.941", "rationale": ["The query identifies the relevant table, which is 'enzyme'.", "Select the columns to display: 'product', 'chromosome', and 'porphyria'.", "Add a condition to filter the 'Location' column for the specified geographical location using a placeholder for string values."], "description": "This virtual table provides information about the products produced by enzymes, their chromosome locations, and their association with porphyria disorders from the 'enzyme' table, filtered by a specific geographical location. The placeholder in the WHERE clause represents the location of the enzyme's activity."}
{"sample_id": "train.943", "rationale": ["The query is identifying the relevant table, which is 'enzyme'.", "Select the column to display, 'name'.", "Add a condition to filter the 'product' column to exclude a specific product using a placeholder for string values."], "description": "This virtual table describes the names of enzymes from the 'enzyme' table that produce a specific product. The placeholder in the WHERE clause represents the product that should not be associated with the enzymes."}
{"sample_id": "train.945", "rationale": ["The query is identifying the relevant table, which is 'medicine'.", "Select the columns to display, 'name' and 'Trade_Name'.", "Add a condition to filter the 'FDA_approved' column for the specified approval status using a placeholder for string values."], "description": "This virtual table describes the names and trade names of medicines from the 'medicine' table that have a specific FDA approval status. The placeholder in the WHERE clause represents the FDA approval status of the medicine."}
{"sample_id": "train.947", "rationale": ["The query identifies the relevant tables: 'enzyme', 'medicine_enzyme_interaction', and 'medicine'.", "It selects the 'name' column from the 'enzyme' table.", "The query uses JOINs to connect the 'enzyme' table with the 'medicine_enzyme_interaction' table on the enzyme ID, and then connects to the 'medicine' table on the medicine ID.", "Conditions are added to filter results based on the specified medicine name and interaction type using placeholders for string values."], "description": "This virtual table describes the names of enzymes that interact with a specific medicine, filtered by the medicine's name and the type of interaction. The placeholders in the WHERE clause represent the medicine's name and the interaction type."}
{"sample_id": "train.949", "rationale": ["The query identifies the relevant tables, which are 'medicine' and 'medicine_enzyme_interaction'.", "It selects the columns to display, specifically the 'id' and 'name' from the 'medicine' table.", "A JOIN operation is performed to link the 'medicine' table with the 'medicine_enzyme_interaction' table based on the medicine's identifier.", "The results are grouped by the medicine's identifier to aggregate the interaction counts.", "The HAVING clause is used to filter the results based on a minimum count of interactions, using a placeholder for numeric values."], "description": "This virtual table describes the unique identifiers and names of medicines from the 'medicine' table that are involved in interactions with enzymes, as indicated in the 'medicine_enzyme_interaction' table. The placeholder in the HAVING clause represents the minimum number of interactions required for the medicines to be included in the results."}
{"sample_id": "train.955", "rationale": ["The query identifies the relevant tables: 'medicine_enzyme_interaction', 'medicine', and 'enzyme'.", "It selects the 'interaction_type' column from the 'medicine_enzyme_interaction' table.", "The query uses JOINs to connect the 'medicine_enzyme_interaction' table with the 'medicine' and 'enzyme' tables based on their IDs.", "Conditions are added to filter results based on the specified names of the enzyme and medicine using placeholders for string values."], "description": "This virtual table describes the types of interactions between a specific medicine and enzyme. It retrieves the interaction type from the 'medicine_enzyme_interaction' table by joining it with the 'medicine' and 'enzyme' tables based on their respective identifiers. The placeholders in the WHERE clause represent the names of the enzyme and the medicine involved in the interaction."}
{"sample_id": "train.957", "rationale": ["The query identifies the relevant table, which is 'medicine_enzyme_interaction'.", "It selects the 'interaction_type' column and counts the occurrences of each type using the count function.", "The results are grouped by 'interaction_type' to aggregate the counts for each type.", "The results are ordered in descending order based on the count of interactions.", "A limit is applied to restrict the number of results returned, using a placeholder for numeric values."], "description": "This virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the occurrences of each interaction type and orders them in descending order, allowing the user to specify a limit on the number of results returned."}
{"sample_id": "train.959", "rationale": ["The query is identifying the relevant table, which is 'medicine'.", "The count function is used to get the total number of records that meet the specified condition.", "A condition is added to filter the 'FDA_approved' column for the specified approval status using a placeholder for string values."], "description": "This virtual table provides the count of medicines from the 'medicine' table that have a specific FDA approval status. The placeholder in the WHERE clause represents the FDA approval status of the medicines."}
{"sample_id": "train.961", "rationale": ["The query identifies the relevant table, which is 'enzyme'.", "It uses a subquery to find all enzyme IDs that are present in the 'medicine_enzyme_interaction' table.", "The main query counts the enzymes whose IDs are not in the list returned by the subquery, indicating they have no interactions with any medicines."], "description": "This virtual table provides a count of enzymes from the 'enzyme' table that do not have any recorded interactions with medicines in the 'medicine_enzyme_interaction' table. The subquery identifies all enzyme IDs that are involved in interactions, and the main query counts those enzymes that are not included in that list."}
{"sample_id": "train.963", "rationale": ["The query identifies the relevant tables, 'medicine' and 'medicine_enzyme_interaction'.", "It selects the 'id' and 'Trade_Name' from the 'medicine' table, aliased as T1.", "A JOIN operation is performed between 'medicine' (T1) and 'medicine_enzyme_interaction' (T2) on the condition that the 'medicine_id' in T2 matches the 'id' in T1.", "The results are grouped by the 'id' of the medicine to aggregate the interaction counts.", "The HAVING clause filters the results to include only those medicines that have a count of interactions greater than or equal to a specified number, represented by a placeholder."], "description": "This virtual table provides a list of unique identifiers and trade names of medicines that are involved in interactions with enzymes, filtered to include only those medicines that have interactions with a specified minimum count. The placeholder in the HAVING clause represents the minimum number of interactions required."}
{"sample_id": "train.965", "rationale": ["The query identifies the relevant tables, which are 'enzyme' and 'medicine_enzyme_interaction'.", "It selects distinct columns to display: 'name', 'location', and 'product' from the 'enzyme' table.", "A JOIN operation is performed between 'enzyme' and 'medicine_enzyme_interaction' on the enzyme ID to link the two tables.", "A condition is added to filter the results based on the 'interaction_type' column using a placeholder for string values."], "description": "This virtual table provides a distinct list of enzyme names, their geographical locations, and the products they produce, specifically for those enzymes that interact with medicines in a certain way. The placeholder in the WHERE clause represents the type of interaction being queried."}
{"sample_id": "train.971", "rationale": ["The query is identifying the relevant table, which is 'medicine'.", "It selects a count of distinct values from the 'FDA_approved' column.", "The use of DISTINCT ensures that only unique FDA approval statuses are counted."], "description": "This virtual table provides a count of distinct FDA approval statuses from the 'medicine' table. The placeholder in the SELECT clause indicates that the count will reflect the unique values of the FDA_approved column."}
{"sample_id": "train.973", "rationale": ["The query is identifying the relevant table, which is 'enzyme'.", "Select the column to display, 'name'.", "Add a condition to filter the 'name' column using the LIKE operator for pattern matching with a placeholder for string values."], "description": "This virtual table describes the names of enzymes from the 'enzyme' table that match a specific pattern. The placeholder in the LIKE clause represents the pattern to search for in the enzyme names."}
{"sample_id": "train.975", "rationale": ["The query identifies the relevant table, which is 'medicine'.", "It selects the 'Trade_Name' column and counts the occurrences of each trade name.", "The GROUP BY clause is used to aggregate the results based on the trade name, allowing for a count of each unique trade name."], "description": "This virtual table summarizes the count of medicines grouped by their trade names from the 'medicine' table. The placeholder in the SELECT clause represents the trade name of the medicines."}
{"sample_id": "train.977", "rationale": ["The query identifies the relevant table, which is 'university'.", "Select the columns to display, 'school' and 'nickname'.", "Add an ORDER BY clause to sort the results based on the 'founded' year."], "description": "This virtual table provides the names and nicknames of universities from the 'university' table, ordered by the year they were founded. The query allows users to see the historical context of universities based on their establishment dates."}
{"sample_id": "train.981", "rationale": ["The query identifies the relevant table, which is 'university'.", "Select the column to display, 'founded', which indicates the year the university was established.", "Add an ORDER BY clause to sort the results based on the 'enrollment' column in descending order.", "Include a LIMIT clause with a placeholder to specify how many records to return."], "description": "This virtual table provides a list of universities sorted by their enrollment numbers in descending order, showing the year each university was founded. The placeholder in the LIMIT clause allows for specifying the maximum number of universities to retrieve."}
{"sample_id": "train.983", "rationale": ["The query identifies the relevant table, which is 'university'.", "Select the 'founded' column to display the year each university was established.", "Add a condition to filter the 'affiliation' column to exclude universities with a specific type of affiliation using a placeholder for string values.", "Order the results by the 'founded' column in descending order to show the most recently established universities first.", "Limit the number of results returned using a placeholder for numeric values."], "description": "This virtual table provides a list of universities that have a specific type of affiliation, excluding those with the specified affiliation. The results are ordered by the year the university was founded in descending order, and the number of results returned is limited by a placeholder for numeric values."}
{"sample_id": "train.985", "rationale": ["The query is identifying the relevant table, which is 'basketball_match'.", "The goal is to count the number of distinct 'School_ID' entries to determine how many unique schools have teams.", "Using the COUNT function with DISTINCT ensures that only unique school identifiers are counted."], "description": "This virtual table provides the count of distinct schools that have basketball teams participating in matches from the 'basketball_match' table. The result indicates how many unique schools are represented in the dataset."}
{"sample_id": "train.987", "rationale": ["The query identifies the relevant table, which is 'basketball_match'.", "Select the column to display, 'acc_percent', which represents the winning percentage of the teams in the ACC.", "Order the results by 'acc_percent' in descending order to show the highest percentages first.", "Limit the number of results returned using a placeholder for numeric values, allowing the user to specify how many top results they want."], "description": "This virtual table provides the winning percentages of basketball teams in the ACC, sorted in descending order. The placeholder in the LIMIT clause allows the user to specify the number of results to return."}
{"sample_id": "train.989", "rationale": ["The query identifies the relevant tables, 'university' and 'basketball_match'.", "It selects the 'Primary_conference' column from the 'university' table.", "A JOIN operation is performed on 'School_ID' to link the two tables based on their relationship.", "The results are ordered by the 'ACC_Percent' column from the 'basketball_match' table to prioritize teams with higher winning percentages.", "The LIMIT clause is included to restrict the number of records returned, using a placeholder for numeric values."], "description": "This virtual table provides the primary athletic conference of universities associated with basketball teams, ordered by the winning percentage of the teams in the ACC. The placeholder in the LIMIT clause represents the maximum number of records to return."}
{"sample_id": "train.991", "rationale": ["The query identifies the relevant tables, 'university' and 'basketball_match'.", "It selects the 'team_name' and 'ACC_Regular_Season' columns from the 'basketball_match' table.", "A JOIN operation is performed on 'School_ID' to link the two tables based on their relationship.", "The results are ordered by the 'founded' year of the universities to show the teams in chronological order of their university's establishment.", "The LIMIT clause is included to restrict the number of results returned, using a placeholder for numeric values."], "description": "This virtual table provides the names of basketball teams along with their ACC regular season records, sourced from the 'basketball_match' table. The data is filtered based on the associated universities from the 'university' table, and it is ordered by the year the universities were founded. The placeholder in the LIMIT clause allows for specifying the maximum number of records to return."}
{"sample_id": "train.993", "rationale": ["The query identifies the relevant tables, 'university' and 'basketball_match'.", "It selects the 'All_Games' column from the 'basketball_match' table and the 'Location' column from the 'university' table.", "A JOIN operation is performed on the 'School_ID' to link the two tables based on the university associated with the basketball team.", "A condition is added to filter the results based on the specified 'team_name' using a placeholder for string values."], "description": "This virtual table provides the overall game record of a specific basketball team along with the geographical location of the university associated with that team. The placeholder in the WHERE clause represents the name of the basketball team being queried."}
{"sample_id": "train.995", "rationale": ["The query identifies the relevant table, which is 'university'.", "It selects the average of the 'enrollment' column to compute the average number of students.", "A condition is added to filter universities based on their founding year using a placeholder for numeric values."], "description": "This virtual table calculates the average enrollment of universities that were established before a specific year. The placeholder in the WHERE clause represents the year of establishment."}
{"sample_id": "train.997", "rationale": ["The query identifies the relevant table, which is 'university'.", "Select the columns to display, 'enrollment' and 'primary_conference'.", "Add an ORDER BY clause to sort the results by the 'founded' year.", "Include a LIMIT clause with a placeholder to restrict the number of records returned."], "description": "This virtual table provides the enrollment numbers and primary athletic conference of universities, sorted by the year they were founded. The placeholder in the LIMIT clause allows for specifying the maximum number of records to return."}
{"sample_id": "train.999", "rationale": ["The query identifies the relevant table, which is 'university'.", "It selects the sum of the 'enrollment' column to get the total number of students enrolled across all universities.", "It also selects the minimum value of the 'enrollment' column to find the university with the least number of enrolled students."], "description": "This virtual table summarizes the total and minimum enrollment figures from the 'university' table. The placeholders represent the enrollment numbers for different universities."}
{"sample_id": "train.1001", "rationale": ["The query identifies the relevant table, which is 'university'.", "It selects the sum of the 'enrollment' column to get the total number of students.", "The 'affiliation' column is included to categorize the results by the type of governance.", "The GROUP BY clause is used to group the results based on the 'affiliation' type."], "description": "This virtual table summarizes the total enrollment of universities grouped by their affiliation type. The placeholder in the SELECT clause represents the total number of students enrolled, while the affiliation column indicates the type of governance or affiliation of the universities."}
{"sample_id": "train.1003", "rationale": ["The query identifies the relevant table, which is 'university'.", "It counts the number of universities using the count(*) function.", "A subquery is used to filter out the universities that have basketball teams by checking if their 'school_id' exists in the 'basketball_match' table. The placeholder in the subquery represents the school IDs of universities that have teams."], "description": "This virtual table provides the count of universities that do not have any associated basketball teams in the 'basketball_match' table. The placeholder in the subquery represents the school IDs of universities that have teams, allowing for the identification of those without teams."}
{"sample_id": "train.1007", "rationale": ["The query is identifying the relevant table, which is 'university'.", "The goal is to count the distinct values in the 'affiliation' column.", "Using the COUNT function with DISTINCT allows us to get the number of unique affiliations present in the university table."], "description": "This virtual table provides the count of distinct affiliations of universities from the 'university' table. The placeholder in the SELECT clause represents the unique affiliations of the universities."}
{"sample_id": "train.1009", "rationale": ["The query identifies the relevant table, which is 'university'.", "It selects the count of all records in the 'university' table.", "A condition is added to filter the results based on the 'Location' column using a placeholder for string values."], "description": "This virtual table provides the count of universities located in a specific geographical area. The placeholder in the WHERE clause allows users to specify the location they are interested in."}
{"sample_id": "train.1011", "rationale": ["The query identifies the relevant tables, which are 'university' and 'basketball_match'.", "It selects the 'team_name' from the 'basketball_match' table.", "A join is performed on 'School_ID' to connect the two tables.", "A condition is added to filter universities with enrollment less than the average enrollment of all universities, using a subquery to calculate the average enrollment."], "description": "This virtual table lists the names of basketball teams from universities that have an enrollment below the average enrollment of all universities. The query joins the 'university' and 'basketball_match' tables based on the 'School_ID' to filter the teams accordingly."}
{"sample_id": "train.1013", "rationale": ["The query identifies the relevant table, which is 'university'.", "It selects the count of universities and the 'affiliation' column to group the results by affiliation type.", "A condition is added to filter universities based on their enrollment, using a placeholder for numeric values."], "description": "This virtual table provides a count of universities grouped by their affiliation type, specifically for those universities that have an enrollment greater than a specified number. The placeholder in the WHERE clause represents the minimum enrollment number."}
{"sample_id": "train.1015", "rationale": ["The query identifies the relevant table, which is 'university'.", "It selects the sum of the 'Enrollment' column and the 'affiliation' column to provide a summary of total enrollments by affiliation type.", "A condition is added to filter universities based on their founding year using a placeholder for numeric values.", "The results are grouped by the 'affiliation' column to aggregate the enrollment numbers accordingly."], "description": "This virtual table summarizes the total enrollment of universities grouped by their affiliation type, specifically for those universities established after a certain year. The placeholder in the WHERE clause represents the year of establishment."}
{"sample_id": "train.1017", "rationale": ["The query is identifying the relevant table, which is 'university'.", "Select the maximum value of the 'Enrollment' column to find the largest student body.", "The use of the max() function allows us to retrieve the highest enrollment number from the dataset."], "description": "This virtual table provides the maximum enrollment number from the 'university' table, which represents the largest student body among the universities listed. The placeholder in the SELECT clause indicates that the maximum value of the 'Enrollment' column will be retrieved."}
{"sample_id": "train.1019", "rationale": ["The query selects all columns from the 'basketball_match' table.", "This table contains detailed records of basketball teams, including their performance in different contexts (ACC regular season, home games, away games, etc.).", "The virtual table also implicitly connects to the 'university' table through the School_ID, allowing for a complete overview of the teams and their respective universities."], "description": "This virtual table provides a comprehensive view of all basketball matches, including details about the teams, their records in various competitions, and their associated universities. The data includes team identifiers, names, performance metrics in the ACC and overall games, as well as the school information linked through the School_ID."}
{"sample_id": "train.1021", "rationale": ["The query identifies the relevant table, which is 'basketball_match'.", "Select the column to display, 'team_name'.", "Order the results by the 'All_Home' column in descending order to show the teams with the best home records first."], "description": "This virtual table provides a list of basketball team names from the 'basketball_match' table, ordered by their home game records in descending order. This allows users to see which teams have the best performance in home games."}
{"sample_id": "train.1023", "rationale": ["The query identifies the relevant table, which is 'chip_model'.", "Select the column to display, 'Model_name'.", "Add a condition to filter the 'Launch_year' column for the specified range using placeholders for numeric values."], "description": "This virtual table describes the chip models from the 'chip_model' table that were launched within a specific range of years. The placeholders in the WHERE clause represent the start and end years of the launch period."}
{"sample_id": "train.1024", "rationale": ["The query identifies the relevant table, which is 'chip_model'.", "Selects the columns to display, 'Model_name' and 'RAM_MiB'.", "Orders the results by 'RAM_MiB' in ascending order to show the smallest RAM sizes first.", "Limits the number of results returned using a placeholder for numeric values."], "description": "This virtual table provides a list of chip models along with their RAM sizes from the 'chip_model' table. The results are ordered by the amount of RAM in ascending order, and the placeholder indicates the maximum number of records to return."}
{"sample_id": "train.1026", "rationale": ["The query identifies the relevant table, which is 'phone'.", "It selects a count of all records in the 'phone' table.", "A condition is added to filter the results based on the 'Company_name' column using a placeholder for string values."], "description": "This virtual table provides a count of phones manufactured by a specific company from the 'phone' table. The placeholder in the WHERE clause represents the company's name."}
{"sample_id": "train.1027", "rationale": ["The query identifies the relevant tables, which are 'chip_model' and 'phone'.", "It selects the maximum and minimum values of the 'RAM_MiB' column from the 'chip_model' table.", "A JOIN operation is performed between 'chip_model' and 'phone' on the condition that the chip model name matches the corresponding reference in the phone table.", "A condition is added to filter the results based on the specified company name using a placeholder for string values."], "description": "This virtual table provides the maximum and minimum RAM capacities in MiB for chip models used in phones manufactured by a specific company. The placeholders in the WHERE clause represent the company's name."}
{"sample_id": "train.1028", "rationale": ["The query identifies the relevant tables, which are 'chip_model' and 'phone'.", "It selects the average of the 'ROM_MiB' column from the 'chip_model' table.", "A JOIN is performed between 'chip_model' and 'phone' on the condition that the 'Model_name' in 'chip_model' matches the 'chip_model' in 'phone'.", "A condition is added to filter the results based on the 'Company_name' in the 'phone' table using a placeholder for string values."], "description": "This virtual table calculates the average amount of ROM in MiB for chip models used in phones manufactured by a specific company. The placeholder in the WHERE clause represents the company's name."}
{"sample_id": "train.1029", "rationale": ["The query identifies the relevant tables, which are 'chip_model' and 'phone'.", "It selects the columns 'Hardware_Model_name' and 'Company_name' from the 'phone' table.", "A JOIN operation is performed between 'chip_model' and 'phone' on the condition that the chip model name matches.", "The WHERE clause filters the results based on the launch year of the chip model or the RAM size, using placeholders for numeric values."], "description": "This virtual table provides the hardware model names and company names of phones that utilize chip models launched in a specific year or have a RAM capacity exceeding a certain amount. The placeholders in the WHERE clause represent the launch year and the RAM size criteria."}
{"sample_id": "train.1030", "rationale": ["The query identifies the relevant table, which is 'phone'.", "Select the columns to display, 'Hardware_Model_name' and 'Company_name'.", "Add a condition to filter the 'Accreditation_type' column using a placeholder for string values."], "description": "This virtual table describes the hardware model names and company names of phones from the 'phone' table that have a specific type of accreditation. The placeholder in the WHERE clause represents the accreditation type being queried."}
{"sample_id": "train.1031", "rationale": ["The query identifies the relevant tables, which are 'screen_mode' and 'phone'.", "It selects the columns 'Char_cells', 'Pixels', and 'Hardware_colours' from the 'screen_mode' table.", "A JOIN operation is performed between 'screen_mode' and 'phone' on the condition that the 'Graphics_mode' in 'screen_mode' matches the 'screen_mode' in 'phone'.", "A condition is added to filter the results based on the specified 'Hardware_Model_name' using a placeholder for string values."], "description": "This virtual table provides information about the character cells, resolution in pixels, and the number of hardware colors supported by the screen modes of phones that match a specific hardware model name. The placeholder in the WHERE clause represents the hardware model name of the phone."}
{"sample_id": "train.1032", "rationale": ["The query identifies the relevant tables, which are 'screen_mode' and 'phone'.", "It selects the columns to display, 'Hardware_Model_name' and 'Company_name' from the 'phone' table.", "A JOIN operation is performed between 'screen_mode' and 'phone' on the condition that the 'Graphics_mode' in 'screen_mode' matches the 'screen_mode' in 'phone'.", "A condition is added to filter the 'Type' column in the 'screen_mode' table for the specified type using a placeholder for string values."], "description": "This virtual table describes the hardware model names and company names of phones that utilize a specific type of screen mode from the 'screen_mode' table. The placeholder in the WHERE clause represents the type of screen mode being queried."}
{"sample_id": "train.1033", "rationale": ["The query identifies the relevant table, which is 'phone'.", "It selects the 'Company_name' and counts the number of entries for each company using the count function.", "The GROUP BY clause is used to group the results by 'Company_name' to get the count of phones for each company.", "The ORDER BY clause sorts the results by the count of phones in ascending order.", "The LIMIT clause uses a placeholder to allow the user to specify how many companies to display."], "description": "This virtual table summarizes the number of phones manufactured by each company from the 'phone' table. The placeholder in the LIMIT clause allows the user to specify the maximum number of companies to display, sorted by the count of phones in ascending order."}
{"sample_id": "train.1034", "rationale": ["The query identifies the relevant table, which is 'phone'.", "It selects the 'Company_name' column to display the names of the companies.", "The GROUP BY clause is used to group the results by 'Company_name'.", "The HAVING clause filters the groups to include only those companies that have produced more than a specified number of phone models, using a placeholder for numeric values."], "description": "This virtual table lists the names of companies that manufacture phones, specifically those that have produced more than a specified number of phone models. The placeholder in the HAVING clause represents the minimum count of phone models a company must have to be included in the results."}
{"sample_id": "train.1035", "rationale": ["The query identifies the relevant table, which is 'screen_mode'.", "It selects the maximum, minimum, and average values of the 'used_kb' column to provide statistical insights.", "The use of aggregate functions (max, min, avg) allows for a summary of the 'used_kb' data across all records in the 'screen_mode' table."], "description": "This virtual table provides statistical information about the amount of kilobytes used by different screen modes from the 'screen_mode' table. The placeholders in the SELECT clause represent the maximum, minimum, and average kilobytes used across all screen modes."}
{"sample_id": "train.1036", "rationale": ["The query identifies the relevant tables, 'chip_model' and 'phone', and establishes a join condition based on the chip model name.", "It selects the 'Hardware_Model_name' from the 'phone' table, which is associated with the chip model.", "A condition is added to filter the results based on the 'Launch_year' of the chip model using a placeholder for numeric values.", "The results are ordered by 'RAM_MiB' in descending order to prioritize models with more RAM.", "A limit is applied to restrict the number of results returned, using a placeholder for numeric values."], "description": "This virtual table provides a list of hardware model names of phones that utilize chip models launched in a specific year. The results are ordered by the amount of RAM in descending order, and the number of results returned can be limited by a placeholder value."}
{"sample_id": "train.1037", "rationale": ["The query identifies the relevant tables: 'chip_model', 'phone', and 'screen_mode'.", "It selects the 'WiFi' column from the 'chip_model' table and the 'Type' column from the 'screen_mode' table.", "The JOIN operations link the 'chip_model' and 'screen_mode' tables through the 'phone' table using their respective foreign keys.", "A condition is added to filter the results based on the specified hardware model name using a placeholder for string values."], "description": "This virtual table provides information about the WiFi capabilities and the type of screen mode for phones based on a specific hardware model name. The placeholders in the WHERE clause represent the hardware model name of the phone."}
{"sample_id": "train.1038", "rationale": ["The query identifies the relevant tables: 'chip_model', 'phone', and 'screen_mode'.", "It selects the 'Hardware_Model_name' from the 'phone' table, which is aliased as T2.", "The query joins the 'chip_model' table (aliased as T1) on the condition that the 'Model_name' matches the 'chip_model' in the 'phone' table.", "It also joins the 'screen_mode' table (aliased as T3) on the condition that the 'Graphics_mode' matches the 'screen_mode' in the 'phone' table.", "The WHERE clause filters results based on the specified screen mode type or RAM capacity, using placeholders for user-defined values."], "description": "This virtual table describes the hardware model names of phones that either support a specific type of screen mode or have a RAM capacity greater than a specified amount. The placeholders in the WHERE clause represent the screen mode type and the RAM capacity respectively."}
{"sample_id": "train.1039", "rationale": ["The query identifies the relevant tables, which are 'screen_mode' and 'phone'.", "It selects distinct hardware model names from the 'phone' table.", "A JOIN operation is performed between 'screen_mode' and 'phone' based on the screen mode reference.", "Conditions are added to filter the results based on the specified screen mode type or company name using placeholders for string values."], "description": "This virtual table provides a list of distinct hardware model names of phones that are associated with a specific type of screen mode or a specific company name. The placeholders in the WHERE clause represent the type of screen mode and the company name, allowing users to filter the results based on their criteria."}
{"sample_id": "train.1040", "rationale": ["The query identifies the relevant tables, which are 'screen_mode' and 'phone'.", "It uses a JOIN operation to connect the two tables based on the screen mode used in the phone.", "The SELECT DISTINCT statement is used to ensure that only unique hardware model names are returned.", "Conditions are added to filter the results based on the specified company name and exclude a specific type of screen mode using placeholders for string values."], "description": "This virtual table provides a list of distinct hardware model names of phones from the 'phone' table that are associated with a specific company and do not use a particular type of screen mode. The placeholders in the WHERE clause represent the company name and the type of screen mode to filter the results accordingly."}
{"sample_id": "train.1041", "rationale": ["The query identifies the relevant tables, 'screen_mode' and 'phone'.", "It selects distinct values for 'Hardware_Model_name' and 'Company_name' from the 'phone' table.", "A JOIN operation is performed between 'screen_mode' and 'phone' on the condition that the 'Graphics_mode' in 'screen_mode' matches the 'screen_mode' in 'phone'.", "A condition is added to filter the results based on the 'used_kb' column in 'screen_mode', using placeholders for the numeric range."], "description": "This virtual table provides a distinct list of hardware model names and their corresponding company names from the 'phone' table, filtered by the screen modes that use a specific range of kilobytes. The placeholders in the WHERE clause represent the lower and upper limits of kilobytes used by the screen mode."}
{"sample_id": "train.1042", "rationale": ["The query identifies the relevant table, which is 'phone'.", "It selects the 'Accreditation_type' column and counts the number of occurrences for each type.", "The GROUP BY clause is used to aggregate the results based on the 'Accreditation_type', allowing us to see how many phones fall under each accreditation type."], "description": "This virtual table summarizes the count of phones grouped by their accreditation type from the 'phone' table. The placeholder in the SELECT clause represents the accreditation type of the phones."}
{"sample_id": "train.1044", "rationale": ["The query identifies the relevant table, which is 'phone'.", "It selects the 'Accreditation_level' column to display the different levels of accreditation.", "The results are grouped by 'Accreditation_level' to aggregate the data.", "A condition is added using the HAVING clause to filter groups that have a count greater than a specified number, using a placeholder for numeric values."], "description": "This virtual table provides the accreditation levels of phones from the 'phone' table, grouped by their accreditation level. The placeholder in the HAVING clause represents the minimum count of phones that must have the same accreditation level to be included in the results."}
{"sample_id": "train.1045", "rationale": ["The query is selecting all columns from the 'chip_model' table.", "This allows for a complete overview of each chip model's specifications and features.", "The virtual table can be further customized by adding conditions or filters based on specific attributes of the chip models."], "description": "This virtual table provides a comprehensive view of all chip models available in the 'chip_model' table, including their names, launch years, RAM and ROM capacities, slot availability, and wireless capabilities. The data can be filtered or modified based on specific chip model attributes as needed."}
{"sample_id": "train.1046", "rationale": ["The query identifies the relevant table, which is 'chip_model'.", "It selects a count of all entries that match the specified WiFi capability.", "A condition is added to filter the results based on the 'WiFi' column using a placeholder for string values."], "description": "This virtual table provides a count of chip models from the 'chip_model' table that have specific WiFi capabilities. The placeholder in the WHERE clause represents the WiFi capability being queried."}
{"sample_id": "train.1048", "rationale": ["The query identifies the relevant table, which is 'chip_model'.", "Select the column to display, 'model_name'.", "Order the results by the 'launch_year' column to show the progression of chip models based on their launch dates."], "description": "This virtual table lists the names of chip models from the 'chip_model' table, ordered by their launch year. This allows users to see the progression of chip models over time."}
{"sample_id": "train.1049", "rationale": ["The query identifies the relevant table, which is 'chip_model'.", "It selects the average of the 'RAM_MiB' column to compute the average RAM.", "The WHERE clause filters out chip models that are referenced in the 'phone' table by using a subquery that selects chip models from the 'phone' table."], "description": "This virtual table calculates the average amount of RAM in MiB for chip models that are not used in any phone. The placeholder in the subquery represents the chip models that are associated with phones, ensuring that only those chip models that are not referenced in the phone table are considered for the average calculation."}
{"sample_id": "train.1052", "rationale": ["The query is identifying the relevant table, which is 'country'.", "Using the COUNT function to count all entries in the 'country' table.", "The result will give the total number of countries present in the database."], "description": "This virtual table provides the total count of countries listed in the 'country' table. The query uses the COUNT function to aggregate the number of entries in the table, which helps in understanding the total number of unique countries available in the database."}
{"sample_id": "train.1054", "rationale": ["The query is identifying the relevant table, which is 'country'.", "Select the columns to display, 'Country_name' and 'Capital'.", "No filtering conditions are applied, so it retrieves all records from the 'country' table."], "description": "This virtual table describes the names and capitals of countries from the 'country' table. The query retrieves the 'Country_name' and 'Capital' columns, providing a clear view of each country's capital city."}
{"sample_id": "train.1056", "rationale": ["The query identifies the relevant table, which is 'country'.", "Select the column to display, 'Official_native_language'.", "Add a condition to filter the 'Official_native_language' column using a placeholder for string values that allows for pattern matching."], "description": "This virtual table provides the official native languages of countries from the 'country' table that match a specific pattern. The placeholder in the WHERE clause allows for filtering based on a specified language pattern."}
{"sample_id": "train.1061", "rationale": ["The query identifies the relevant table, which is 'match_season'.", "Select the column to display, 'Player'.", "Add a condition to filter the 'College' column for the specified college using a placeholder for string values."], "description": "This virtual table describes the players who participated in matches during a specific season and attended a particular college. The placeholder in the WHERE clause represents the name of the college."}
{"sample_id": "train.1065", "rationale": ["The query identifies the relevant table, which is 'match_season'.", "Select the columns to display, 'Draft_Pick_Number' and 'Draft_Class'.", "Add a condition to filter the 'Position' column for the specified position using a placeholder for string values."], "description": "This virtual table provides information about the draft pick number and draft class of players from the 'match_season' table who play in a specific position. The placeholder in the WHERE clause represents the position of the player."}
{"sample_id": "train.1066", "rationale": ["The query identifies the relevant table, which is 'match_season'.", "It uses the COUNT function to count the number of distinct teams.", "The DISTINCT keyword ensures that only unique team entries are counted."], "description": "This virtual table provides the count of distinct teams that participated in matches during a specific season from the 'match_season' table. The result will give an overview of the number of unique teams involved in the matches."}
{"sample_id": "train.1068", "rationale": ["The query identifies the relevant table, which is 'player'.", "Selects the columns to display, 'Player' and 'Years_Played'.", "No filtering conditions are applied, allowing for the retrieval of all players and their years played."], "description": "This virtual table provides the names and total years played by players from the 'player' table. The placeholder in the SELECT statement allows for the retrieval of player names and their corresponding years of experience."}
{"sample_id": "train.1070", "rationale": ["The query identifies the relevant table, which is 'team'.", "Select the column to display, 'Name'.", "No conditions are applied, so it retrieves all entries from the 'Name' column."], "description": "This virtual table describes the names of teams from the 'team' table. There are no conditions applied, so it retrieves all team names available in the database."}
{"sample_id": "train.1072", "rationale": ["The query identifies the relevant tables, which are 'country' and 'match_season'.", "It selects the columns 'Season' and 'Player' from the 'match_season' table and 'Country_name' from the 'country' table.", "A JOIN operation is performed on the 'Country_id' from the 'country' table and the 'Country' from the 'match_season' table to link players with their countries."], "description": "This virtual table provides a list of match seasons along with the players participating in those seasons and the corresponding country names they represent. The data is retrieved by joining the 'country' table with the 'match_season' table based on the country identifier, allowing us to associate each player with their respective country during a specific season."}
{"sample_id": "train.1074", "rationale": ["The query identifies the relevant tables, which are 'country' and 'match_season'.", "It selects the 'Player' column from the 'match_season' table.", "A JOIN operation is performed between 'country' and 'match_season' on the 'Country_id' to link players to their respective countries.", "A condition is added to filter the results based on the 'Country_name' using a placeholder for string values."], "description": "This virtual table describes the players from the 'match_season' table who represent a specific country. The query joins the 'country' table to filter players based on the country's name, with a placeholder for the country name in the WHERE clause."}
{"sample_id": "train.1076", "rationale": ["The query identifies the relevant tables, which are 'country' and 'match_season'.", "It selects distinct positions from the 'match_season' table.", "A join is performed between 'country' and 'match_season' on the country identifier to link players to their respective countries.", "A condition is added to filter the results based on the capital city using a placeholder for string values."], "description": "This virtual table provides a list of unique player positions from the 'match_season' table for players representing countries with a specific capital city. The placeholder in the WHERE clause represents the name of the capital city."}
{"sample_id": "train.1078", "rationale": ["The query identifies the relevant tables, which are 'country' and 'match_season'.", "It selects the 'Official_native_language' column from the 'country' table.", "A JOIN is performed between 'country' and 'match_season' on the 'Country_id' to link players to their respective countries.", "The WHERE clause includes conditions to filter the results based on the specified college names using placeholders for string values."], "description": "This virtual table provides the official native languages of countries represented by players who attended specific colleges. The placeholders in the WHERE clause allow for filtering based on the names of the colleges."}
{"sample_id": "train.1081", "rationale": ["The query identifies the relevant tables, which are 'country' and 'match_season'.", "It uses a JOIN to connect the 'country' table with the 'match_season' table based on the country identifier.", "The SELECT statement counts the distinct values of the 'Official_native_language' column from the 'country' table.", "A condition is added to filter the results based on the player's position using a placeholder for string values."], "description": "This virtual table counts the distinct official native languages of countries represented by players in a specific position during matches. The placeholder in the WHERE clause represents the player's position."}
{"sample_id": "train.1084", "rationale": ["The query identifies the relevant tables, which are 'match_season' and 'team'.", "It selects the 'Position' column from the 'match_season' table.", "A JOIN operation is performed to link 'match_season' and 'team' based on the 'Team' and 'Team_id' columns.", "A condition is added to filter the results based on the specified team name using a placeholder for string values."], "description": "This virtual table describes the positions of players from the 'match_season' table who are part of a specific team. The placeholder in the WHERE clause represents the name of the team."}
{"sample_id": "train.1086", "rationale": ["The query identifies the relevant tables, 'match_season' and 'team'.", "It uses a JOIN operation to connect the 'match_season' table with the 'team' table based on the 'Team' and 'Team_id' columns.", "The SELECT statement counts the distinct colleges from the 'match_season' table.", "A condition is added to filter the results based on the team's name using a placeholder for string values."], "description": "This virtual table provides the count of distinct colleges represented by players in a specific team from the 'match_season' table. The placeholder in the WHERE clause allows for filtering by the team's name."}
{"sample_id": "train.1088", "rationale": ["The query identifies the relevant tables, which are 'player' and 'team'.", "It selects the columns to display, 'Player' and 'Years_Played' from the 'player' table.", "A JOIN operation is performed between 'player' and 'team' on the 'Team' column to link players with their respective teams.", "A condition is added to filter the results based on the 'Name' column of the 'team' table using a placeholder for string values."], "description": "This virtual table provides the names and years played of players from the 'player' table who are part of a specific team. The placeholder in the WHERE clause represents the name of the team."}
{"sample_id": "train.1095", "rationale": ["The query identifies the relevant table, which is 'match_season'.", "Select the column to display, which is 'player'.", "Add an ORDER BY clause to sort the results based on the 'College' column in ascending order."], "description": "This virtual table lists the names of players from the 'match_season' table, ordered by their college names in ascending order. The placeholder in the ORDER BY clause represents the college names."}
{"sample_id": "train.1100", "rationale": ["The query identifies the relevant table, which is 'match_season'.", "Select the 'College' column to display the colleges.", "Group the results by 'College' to aggregate the data based on each college.", "Add a condition in the HAVING clause to filter colleges that have produced a number of players greater than or equal to a specified count using a placeholder for numeric values."], "description": "This virtual table lists the colleges that have produced a significant number of players participating in matches during a specific season. The placeholder in the HAVING clause represents the minimum count of players that must be associated with each college."}
{"sample_id": "train.1102", "rationale": ["The query identifies the relevant table, which is 'match_season'.", "Select the 'College' column to display the colleges of players.", "Group the results by 'College' to aggregate the data.", "Use the HAVING clause to filter colleges that have a count of players greater than or equal to a specified number, using a placeholder for numeric values.", "Order the results in descending order by 'College' to list them from Z to A."], "description": "This virtual table provides a list of colleges from which players have participated in matches during a specific season. The results are grouped by college, and only those colleges with a number of players equal to or greater than a specified threshold are included. The placeholder in the HAVING clause represents the minimum number of players required from each college."}
{"sample_id": "train.1104", "rationale": ["The query identifies the relevant table, which is 'team'.", "Select the column to display, 'Name'.", "Add a condition to filter teams that are not present in the 'match_season' table by using a subquery that selects 'Team' from 'match_season'."], "description": "This virtual table lists the names of teams from the 'team' table that have not participated in any matches during the specified season. The placeholder in the subquery represents the team IDs associated with the matches."}
{"sample_id": "train.1110", "rationale": ["The query is identifying the relevant table, which is 'climber'.", "Using the count function to aggregate the total number of climbers in the table."], "description": "This virtual table provides the total number of climbers recorded in the 'climber' table. The count function is used to aggregate the number of entries, giving a single numeric result representing the total climbers."}
{"sample_id": "train.1112", "rationale": ["The query is identifying the relevant table, which is 'climber'.", "Select the column to display, 'Name'.", "Order the results by the 'Points' column in descending order to show the climbers with the highest points first."], "description": "This virtual table lists the names of climbers from the 'climber' table, ordered by the points they have earned in descending order. This allows for easy identification of the top climbers based on their achievements."}
{"sample_id": "train.1114", "rationale": ["The query is identifying the relevant table, which is 'climber'.", "Select the column to display, 'Name'.", "Add a condition to filter the 'Country' column to exclude climbers from a specified country using a placeholder for string values."], "description": "This virtual table describes the names of climbers from the 'climber' table who are not from a specific country. The placeholder in the WHERE clause represents the country that is being excluded."}
{"sample_id": "train.1116", "rationale": ["The query identifies the relevant table, which is 'climber'.", "It selects the maximum value of the 'Points' column to find the highest score achieved by climbers.", "A condition is added to filter the results based on the 'Country' column using a placeholder for string values."], "description": "This virtual table provides the maximum points awarded to climbers from a specific country based on their achievements in climbing mountains. The placeholder in the WHERE clause represents the country of origin of the climbers."}
{"sample_id": "train.1118", "rationale": ["The query is identifying the relevant table, which is 'climber'.", "The COUNT function is used to count the number of distinct entries in the 'Country' column.", "The DISTINCT keyword ensures that only unique country entries are counted."], "description": "This virtual table provides the count of distinct countries represented by climbers in the 'climber' table. The result indicates the diversity of climbers based on their country of origin."}
{"sample_id": "train.1120", "rationale": ["The query identifies the relevant table, which is 'mountain'.", "Select the column to display, 'Name'.", "Add an ORDER BY clause to sort the results in ascending order based on the mountain names."], "description": "This virtual table lists the names of mountains from the 'mountain' table, sorted in ascending order. The query retrieves all mountain names without any filtering conditions."}
{"sample_id": "train.1124", "rationale": ["The query identifies the relevant table, which is 'mountain'.", "Select the column to display, 'Name', which represents the names of the mountains.", "Order the results by the 'Height' column in descending order to show the tallest mountains first.", "Limit the number of results returned using a placeholder for numeric values."], "description": "This virtual table lists the names of mountains from the 'mountain' table, ordered by their height in descending order. The placeholder in the LIMIT clause represents the maximum number of mountain names to be returned."}
{"sample_id": "train.1128", "rationale": ["The query identifies the relevant tables, 'climber' and 'mountain'.", "It selects the 'Name' column from both tables, using aliases T1 for climber and T2 for mountain.", "A JOIN operation is performed on the Mountain_ID to link climbers with the mountains they have climbed, ensuring that the data is related correctly."], "description": "This virtual table describes the names of climbers and the names of the mountains they have climbed. The join operation links the climber's data with the corresponding mountain data based on the Mountain_ID, allowing for a comprehensive view of which climbers have ascended which mountains."}
{"sample_id": "train.1130", "rationale": ["The query identifies the relevant tables, 'climber' and 'mountain'.", "It selects the 'Name' column from the 'climber' table and the 'Height' column from the 'mountain' table.", "A JOIN operation is performed on the 'Mountain_ID' to link climbers to the mountains they have climbed, ensuring that the data is related correctly."], "description": "This virtual table provides the names of climbers along with the heights of the mountains they have climbed. The data is sourced from the 'climber' and 'mountain' tables, linked by the Mountain_ID, which serves as a foreign key. The placeholders in the query allow for dynamic selection of climber and mountain data based on specific criteria."}
{"sample_id": "train.1132", "rationale": ["The query identifies the relevant tables, 'climber' and 'mountain'.", "It selects the 'Height' column from the 'mountain' table.", "A JOIN operation is performed between the 'climber' and 'mountain' tables using the 'Mountain_ID' to link climbers to the mountains they climbed.", "The results are ordered by the 'Points' column from the 'climber' table in descending order to prioritize climbers with higher achievements.", "The LIMIT clause uses a placeholder to allow the user to specify how many results they want to retrieve."], "description": "This virtual table provides the heights of mountains that climbers have ascended, ordered by the points awarded to the climbers. The placeholder in the LIMIT clause allows for specifying the number of results to return."}
{"sample_id": "train.1134", "rationale": ["The query identifies the relevant tables, 'climber' and 'mountain'.", "It uses a JOIN operation to link the two tables based on the Mountain_ID, which is a foreign key in the climber table.", "The SELECT DISTINCT statement is used to ensure that only unique mountain names are returned.", "A condition is added to filter climbers based on their country using a placeholder for string values."], "description": "This virtual table lists the distinct names of mountains climbed by climbers from a specific country. The placeholder in the WHERE clause represents the country of origin of the climbers."}
{"sample_id": "train.1136", "rationale": ["The query identifies the relevant tables, which are 'climber' and 'mountain'.", "It selects the 'Time' column from the 'climber' table, which indicates the time taken by climbers to reach the summit.", "A JOIN operation is performed between the 'climber' and 'mountain' tables based on the 'Mountain_ID' to link climbers to the mountains they climbed.", "A condition is added to filter the results based on the 'Country' column from the 'mountain' table, using a placeholder for string values."], "description": "This virtual table provides the climbing times of climbers who have ascended mountains located in a specific country. The placeholder in the WHERE clause represents the name of the country."}
{"sample_id": "train.1138", "rationale": ["The query identifies the relevant table, which is 'climber'.", "It selects the 'Country' column to display the country names.", "The COUNT function is used to count the number of climbers for each country.", "The GROUP BY clause is applied to group the results by the 'Country' column."], "description": "This virtual table summarizes the number of climbers from each country who have climbed mountains. The placeholder in the SELECT statement allows for the retrieval of the country names, while the COUNT function aggregates the total number of climbers per country."}
{"sample_id": "train.1140", "rationale": ["The query identifies the relevant table, which is 'mountain'.", "It selects the 'Country' column to display.", "The GROUP BY clause is used to group the results by country.", "The HAVING clause filters the groups to include only those countries that have a count of mountains greater than a specified number, using a placeholder for numeric values."], "description": "This virtual table provides a list of countries that have more than a specified number of mountains in the 'mountain' table. The placeholder in the HAVING clause represents the minimum count of mountains required for a country to be included in the results."}
{"sample_id": "train.1142", "rationale": ["The query identifies the relevant table, which is 'mountain'.", "Select the column to display, 'Name', which represents the names of the mountains.", "Add a condition to filter out mountains that have been climbed by using a subquery that checks for 'Mountain_ID' in the 'climber' table."], "description": "This virtual table lists the names of mountains from the 'mountain' table that have not been climbed by any climber. The subquery checks for mountain IDs that exist in the 'climber' table, and the placeholder in the WHERE clause ensures that only mountains without any climbers are selected."}
{"sample_id": "train.1146", "rationale": ["The query identifies the relevant table, which is 'mountain'.", "It selects the 'Range' column to display the names of the mountain ranges.", "The results are grouped by the 'Range' to aggregate the data based on the mountain ranges.", "The results are ordered by the count of mountains in each range in descending order to show the most populated ranges first.", "A limit is applied to restrict the number of results returned, using a placeholder for numeric values."], "description": "This virtual table provides a list of mountain ranges from the 'mountain' table, grouped by the range name. The results are ordered by the number of mountains in each range in descending order, and the placeholder allows for limiting the number of results returned."}
{"sample_id": "train.1148", "rationale": ["The query identifies the relevant table, which is 'mountain'.", "Select the column to display, 'Name'.", "Add conditions to filter the 'Height' and 'Prominence' columns for values greater than the specified thresholds using placeholders for numeric values."], "description": "This virtual table lists the names of mountains from the 'mountain' table that have a height greater than a specified value or a prominence greater than a specified value. The placeholders in the WHERE clause represent the height and prominence thresholds."}
