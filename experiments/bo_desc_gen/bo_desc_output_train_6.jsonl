{"sample_id": "train.1326", "rationale": ["The query identifies the relevant table, which is 'department'.", "Select the columns to display, 'dept_name' and 'building'.", "Add a condition to filter departments based on their budget being greater than the average budget of all departments, using a subquery to calculate the average budget."], "description": "This virtual table provides the names of academic departments and their corresponding buildings from the 'department' table, specifically for those departments whose budget exceeds the average budget of all departments. The placeholder in the WHERE clause represents the budget threshold for comparison."}
{"sample_id": "train.1328", "rationale": ["The query identifies the relevant table, which is 'classroom'.", "Select the columns to display, 'building' and 'room_number'.", "Add a condition to filter the 'capacity' column for a specified range using placeholders for numeric values."], "description": "This virtual table describes the buildings and room numbers of classrooms from the 'classroom' table that can accommodate a specific range of students. The placeholders in the WHERE clause represent the minimum and maximum capacity of students."}
{"sample_id": "train.1330", "rationale": ["The query identifies the relevant table, which is 'department'.", "Select the columns to display, 'dept_name' and 'building'.", "Add an ORDER BY clause to sort the results based on the 'budget' column in descending order.", "Include a LIMIT clause with a placeholder to restrict the number of results returned."], "description": "This virtual table provides a list of academic departments along with their respective building locations, sorted by the allocated budget in descending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of departments to retrieve."}
{"sample_id": "train.1332", "rationale": ["The query identifies the relevant table, which is 'student'.", "Select the column to display, 'name'.", "Add a condition to filter the 'dept_name' column for the specified department using a placeholder for string values.", "Order the results by 'tot_cred' in descending order to show students with the most credits first.", "Limit the number of results returned using a placeholder for numeric values."], "description": "This virtual table lists the names of students from the 'student' table who are enrolled in a specific department. The results are ordered by the total credits earned by each student in descending order, and the number of results returned is limited by a specified number."}
{"sample_id": "train.1334", "rationale": ["The query identifies the relevant table, which is 'classroom'.", "It selects a count of all entries in the table to determine the number of classrooms.", "A condition is added to filter the results based on the specified building using a placeholder for string values."], "description": "This virtual table provides the total number of classrooms located in a specific building from the 'classroom' table. The placeholder in the WHERE clause represents the name of the building."}
{"sample_id": "train.1336", "rationale": ["The query is identifying the relevant table, which is 'advisor'.", "The goal is to count the distinct student identifiers, hence using the COUNT function with DISTINCT on the 's_id' column."], "description": "This virtual table provides the count of distinct student identifiers from the 'advisor' table, which indicates the number of unique students being advised."}
{"sample_id": "train.1338", "rationale": ["The query identifies the relevant table, which is 'course'.", "It uses the COUNT function to count the number of distinct department names in the 'dept_name' column.", "The DISTINCT keyword is applied to ensure that only unique department names are counted."], "description": "This virtual table provides the count of distinct academic departments that offer courses in the 'course' table. The query uses the DISTINCT keyword to ensure that each department is only counted once, regardless of how many courses it offers."}
{"sample_id": "train.1340", "rationale": ["The query identifies the relevant table, which is 'course'.", "It selects the count of distinct 'course_id' to determine the number of unique courses.", "A condition is added to filter the results based on the 'dept_name' column for the specified department using a placeholder for string values."], "description": "This virtual table provides the count of distinct courses offered by a specific academic department from the 'course' table. The placeholder in the WHERE clause represents the name of the department."}
{"sample_id": "train.1342", "rationale": ["The query identifies the relevant table, which is 'course', and uses an alias 'T1' for clarity.", "It joins the 'prereq' table using the course_id to link courses with their prerequisites.", "The GROUP BY clause is used to group the results by course_id, allowing us to count the number of prerequisites for each course.", "The HAVING clause filters the results to only include courses that have a specific number of prerequisites, represented by a placeholder for numeric values."], "description": "This virtual table lists the titles of courses from the 'course' table that have a specific number of prerequisites. The placeholder in the HAVING clause represents the required count of prerequisite courses for each course."}
{"sample_id": "train.1344", "rationale": ["The query identifies the relevant table, which is 'course', and uses an alias 'T1' for clarity.", "It selects the columns 'title', 'credits', and 'dept_name' from the 'course' table.", "The query joins the 'course' table with the 'prereq' table using the 'course_id' to find courses that have prerequisites.", "It groups the results by 'course_id' to aggregate the prerequisite counts.", "The HAVING clause filters the results to include only those courses that have more than a specified number of prerequisites, using a placeholder for numeric values."], "description": "This virtual table provides a list of course titles and their corresponding credit values from the 'course' table, specifically for courses that have more than a specified number of prerequisites. The placeholder in the HAVING clause represents the minimum count of prerequisites required for the courses listed."}
{"sample_id": "train.1346", "rationale": ["The query identifies the relevant table, which is 'course'.", "It uses a subquery to find all course IDs that have prerequisites from the 'prereq' table.", "The main query counts the number of courses whose IDs are not in the list of prerequisite course IDs using a NOT IN clause."], "description": "This virtual table provides a count of courses from the 'course' table that do not have any prerequisites. The subquery identifies all course IDs that are listed as prerequisites in the 'prereq' table, and the main query counts those courses that are not included in that list."}
{"sample_id": "train.1348", "rationale": ["The query identifies the relevant table, which is 'course'.", "Select the column to display, 'title'.", "Add a condition to filter out course IDs that are present in the 'prereq' table using a subquery, ensuring that only courses without prerequisites are included."], "description": "This virtual table lists the titles of courses from the 'course' table that do not have any prerequisites associated with them. The subquery checks for course IDs in the 'prereq' table, and the placeholder in the WHERE clause indicates that we are filtering out courses that are not prerequisites for any other course."}
{"sample_id": "train.1350", "rationale": ["The query is identifying the relevant table, which is 'teaches'.", "The COUNT function is used to count the number of distinct instructor IDs.", "Using DISTINCT ensures that each instructor is only counted once, regardless of how many courses they teach."], "description": "This virtual table provides the count of distinct instructors who are teaching courses. The placeholder in the COUNT function allows for filtering based on specific criteria if needed."}
{"sample_id": "train.1352", "rationale": ["The query identifies the relevant table, which is 'department'.", "It selects the sum of the 'budget' column to calculate the total budget.", "A condition is added to filter the results for specific departments using placeholders for string values."], "description": "This virtual table calculates the total budget allocated to specific academic departments from the 'department' table. The placeholders in the WHERE clause represent the names of the departments for which the budget is being summed."}
{"sample_id": "train.1354", "rationale": ["The query identifies the relevant table, which is 'instructor'.", "Select the column to display, 'dept_name'.", "Add a condition to filter the 'name' column using a LIKE operator for pattern matching with a placeholder for string values."], "description": "This virtual table provides the names of academic departments associated with instructors whose names match a specified pattern. The placeholder in the WHERE clause allows for flexible searching of instructor names."}
{"sample_id": "train.1356", "rationale": ["The query identifies the relevant table, which is 'classroom'.", "It selects the count of rows that meet the specified conditions.", "The conditions filter the results based on the 'building' column for a specific building and the 'capacity' column to ensure it is less than a specified number."], "description": "This virtual table provides the count of classrooms located in a specific building that have a capacity less than a specified number of students. The placeholders in the WHERE clause represent the building's name and the maximum capacity."}
{"sample_id": "train.1358", "rationale": ["The query identifies the relevant table, which is 'department'.", "Select the columns to display, 'dept_name' and 'budget'.", "Add a condition to filter the 'budget' column for departments with a budget greater than the average budget, using a subquery to calculate the average budget from the 'department' table."], "description": "This virtual table provides the names of academic departments along with their budgets from the 'department' table, specifically filtering for those departments whose budgets exceed the average budget of all departments. The placeholder in the WHERE clause represents the average budget value."}
{"sample_id": "train.1360", "rationale": ["The query identifies the relevant table, which is 'instructor'.", "It selects the 'name' column to display the names of the instructors.", "A condition is added to filter the results based on the 'dept_name' column using a placeholder for string values.", "The results are ordered by the 'salary' column to show the instructors in order of their salaries.", "A limit is applied to restrict the number of results returned, using a placeholder for numeric values."], "description": "This virtual table lists the names of instructors from the 'instructor' table who belong to a specific department. The results are ordered by the instructors' salaries, and the number of results returned is limited by a specified number."}
{"sample_id": "train.1362", "rationale": ["The query identifies the relevant table, which is 'course'.", "It selects the 'title' column to display the names of the courses.", "The INTERSECT operator is used to find common course titles between two departments, each specified by a placeholder for string values."], "description": "This virtual table describes the titles of courses that are offered by two specific academic departments. The placeholders in the WHERE clauses represent the names of the departments being compared."}
{"sample_id": "train.1366", "rationale": ["The query is identifying the relevant table, which is 'teaches'.", "Select the column to display, 'id', which represents the instructor's identifier.", "Add a condition to filter the 'semester' and 'year' columns for the specified semester and year using placeholders for string and numeric values.", "Use the EXCEPT clause to exclude the identifiers of instructors teaching in another specified semester and year."], "description": "This virtual table identifies the unique identifiers of instructors who are teaching courses in a specific semester and year, excluding those who are teaching in another specified semester and year. The placeholders in the query represent the semester and year values for filtering the results."}
{"sample_id": "train.1368", "rationale": ["The query identifies the relevant tables, which are 'student' and 'takes'.", "It selects the distinct names of students from the 'student' table.", "A JOIN operation is performed between 'student' and 'takes' on the student ID to link students with their course enrollments.", "The WHERE clause filters the results based on the specified academic years using placeholders for numeric values."], "description": "This virtual table lists the distinct names of students who have taken courses in either of the specified academic years. The placeholders in the WHERE clause represent the years of interest."}
{"sample_id": "train.1370", "rationale": ["The query identifies the relevant table, which is 'course'.", "It selects the 'dept_name' column to display the names of the departments.", "The results are grouped by 'dept_name' to aggregate the courses offered by each department.", "The results are ordered by the count of courses in descending order to show the most active departments first.", "A limit is applied to restrict the number of departments returned, using a placeholder for numeric values."], "description": "This virtual table provides a list of academic departments from the 'course' table, grouped by department name. The results are ordered by the number of courses offered by each department in descending order, with a limit on the number of departments returned, specified by a placeholder for numeric values."}
{"sample_id": "train.1372", "rationale": ["The query identifies the relevant table, which is 'course'.", "It selects the 'dept_name' column to display the names of the departments.", "The results are grouped by 'dept_name' to aggregate the data for each department.", "The query orders the results by the sum of 'credits' in descending order to prioritize departments with the highest total credits.", "The LIMIT clause is included to restrict the number of results returned, using a placeholder for numeric values."], "description": "This virtual table summarizes the academic departments based on the total credits of the courses they offer. It retrieves the department names from the 'course' table, groups the results by department name, and orders them in descending order of the sum of credits. The placeholder in the LIMIT clause allows the user to specify the maximum number of departments to display."}
{"sample_id": "train.1374", "rationale": ["The query identifies the relevant table, which is 'course'.", "Select the column to display, 'title'.", "Add an ORDER BY clause to sort the results first by 'title' and then by 'credits'."], "description": "This virtual table lists the titles of courses from the 'course' table, sorted alphabetically by title and then by the number of credits awarded for each course. The sorting allows for easy identification of courses based on their titles and credit values."}
{"sample_id": "train.1376", "rationale": ["The query identifies the relevant table, which is 'department'.", "Select the column to display, 'dept_name'.", "Add an ORDER BY clause to sort the results based on the 'budget' column.", "Include a LIMIT clause to restrict the number of results returned, using a placeholder for numeric values."], "description": "This virtual table lists the names of academic departments from the 'department' table, ordered by their allocated budget. The placeholder in the LIMIT clause represents the maximum number of departments to be displayed."}
{"sample_id": "train.1378", "rationale": ["The query identifies the relevant table, which is 'department'.", "Select the columns to display, 'dept_name' and 'building'.", "Add an ORDER BY clause to sort the results based on the 'budget' column in descending order."], "description": "This virtual table provides a list of academic departments along with their respective building locations, sorted by the allocated budget in descending order. The placeholder in the ORDER BY clause represents the budget for each department."}
{"sample_id": "train.1380", "rationale": ["The query identifies the relevant table, which is 'instructor'.", "Select the column to display, 'name'.", "Order the results by the 'salary' column in descending order to show the highest-paid instructors first.", "Limit the number of results returned using a placeholder for numeric values."], "description": "This virtual table lists the names of instructors from the 'instructor' table, ordered by their annual salary in descending order. The placeholder in the LIMIT clause represents the maximum number of instructors to be displayed."}
{"sample_id": "train.1382", "rationale": ["The query identifies the relevant table, which is 'instructor'.", "It selects all columns from the 'instructor' table using '*'.", "The results are ordered by the 'salary' column to display instructors from the lowest to the highest salary."], "description": "This virtual table provides a comprehensive list of all instructors from the 'instructor' table, sorted by their annual salary in ascending order. The query retrieves all columns for each instructor, allowing for a detailed view of their information."}
{"sample_id": "train.1384", "rationale": ["The query identifies the relevant table, which is 'student'.", "Selects the columns to display, 'name' and 'dept_name'.", "Adds an ORDER BY clause to sort the results based on 'tot_cred' in ascending order."], "description": "This virtual table provides a list of student names along with their respective department names from the 'student' table, sorted by the total credits earned by each student. The sorting is done in ascending order based on the total credits."}
{"sample_id": "train.1386", "rationale": ["The query identifies the relevant tables: 'course', 'teaches', and 'instructor'.", "It selects the 'title' from the 'course' table and the 'name' from the 'instructor' table.", "The JOIN operation connects the 'course' table with the 'teaches' table based on the 'course_id', and then connects the 'teaches' table with the 'instructor' table based on the instructor's ID.", "A condition is added to filter the results for a specific academic year using a placeholder for numeric values.", "The results are ordered by the course title."], "description": "This virtual table provides a list of course titles along with the names of instructors who are teaching those courses in a specific academic year. The placeholders in the WHERE clause represent the academic year for which the data is being queried."}
{"sample_id": "train.1388", "rationale": ["The query identifies the relevant tables, which are 'instructor' and 'advisor'.", "It selects the 'name' column from the 'instructor' table, aliased as T1.", "A JOIN operation is performed between 'instructor' (T1) and 'advisor' (T2) on the condition that the instructor's ID matches the advisor's ID.", "The results are grouped by the instructor's ID to aggregate the count of students advised.", "The HAVING clause filters the groups to include only those instructors who advise more than a specified number of students, using a placeholder for the numeric value."], "description": "This virtual table lists the names of instructors who are advising more than a specified number of students. The placeholder in the HAVING clause represents the minimum number of students an instructor must advise to be included in the results."}
{"sample_id": "train.1390", "rationale": ["The query identifies the relevant tables, which are 'student' and 'advisor'.", "It selects the 'name' column from the 'student' table, aliased as T1.", "The join condition is established between the 'student' table and the 'advisor' table based on the student ID.", "The results are grouped by the student ID to aggregate the number of advisors per student.", "A HAVING clause is used to filter the groups, allowing only those students with a count of advisors greater than a specified number, represented by a placeholder."], "description": "This virtual table lists the names of students who have more than a specified number of advisors. The query joins the 'student' table with the 'advisor' table on the student ID, groups the results by student ID, and filters the groups to include only those with a count of advisors greater than a placeholder value."}
{"sample_id": "train.1392", "rationale": ["The query identifies the relevant table, which is 'classroom'.", "It selects the count of classrooms and the building name.", "A condition is added to filter classrooms based on their capacity using a placeholder for numeric values.", "The results are grouped by the building to provide a count per building."], "description": "This virtual table provides the count of classrooms grouped by building, where the capacity of the classrooms exceeds a specified number. The placeholder in the WHERE clause represents the minimum capacity requirement for the classrooms."}
{"sample_id": "train.1394", "rationale": ["The query identifies the relevant table, which is 'classroom'.", "It selects the maximum and average values of the 'capacity' column.", "The results are grouped by the 'building' column to provide insights on classroom capacities per building."], "description": "This virtual table summarizes the maximum and average classroom capacities grouped by building from the 'classroom' table. The placeholders represent the building names and capacity values."}
{"sample_id": "train.1396", "rationale": ["The query identifies the relevant table, which is 'course'.", "Select the column to display, 'title'.", "Group the results by 'title' to aggregate course offerings.", "Add a condition in the HAVING clause to filter course titles that have been offered more than a specified number of times using a placeholder for numeric values."], "description": "This virtual table lists the titles of courses from the 'course' table that have been offered more than a specified number of times. The placeholder in the HAVING clause represents the minimum count of offerings required to include a course title in the results."}
{"sample_id": "train.1398", "rationale": ["The query identifies the relevant table, which is 'course'.", "It selects the sum of the 'credits' column to calculate the total credits offered.", "The 'dept_name' column is included to group the results by each department.", "The GROUP BY clause is used to aggregate the total credits for each department."], "description": "This virtual table summarizes the total number of credits offered by each academic department from the 'course' table. The placeholder in the SELECT clause represents the total credits, while the GROUP BY clause organizes the results by department name."}
{"sample_id": "train.1408", "rationale": ["The query identifies the relevant table, which is 'student'.", "It selects the 'dept_name' column to display the names of the departments.", "The results are grouped by 'dept_name' to aggregate the number of students in each department.", "The results are ordered by the count of students in each department in descending order to show the most populated departments first.", "A limit is applied to restrict the number of departments returned, using a placeholder for numeric values."], "description": "This virtual table provides a list of academic departments from the 'student' table, grouped by department name. The results are ordered by the number of students in each department in descending order, and the number of departments returned is limited by a specified placeholder value."}
{"sample_id": "train.1410", "rationale": ["The query identifies the relevant table, which is 'student'.", "It selects a count of students and groups the results by 'dept_name'.", "The use of count(*) allows for the total number of students in each department to be calculated."], "description": "This virtual table provides a count of students grouped by their respective academic departments. The placeholder in the SELECT statement represents the department's name, allowing for an aggregation of student counts per department."}
{"sample_id": "train.1414", "rationale": ["The query identifies the relevant tables, which are 'advisor' and 'student'.", "It selects the 'i_id' column from the 'advisor' table, which represents the instructor's identifier.", "A JOIN operation is performed between 'advisor' and 'student' on the student identifier to link advisors with their respective students.", "A condition is added to filter the results based on the 'dept_name' column from the 'student' table, using a placeholder for the department's name."], "description": "This virtual table lists the identifiers of instructors who are acting as advisors for students enrolled in a specific department. The placeholder in the WHERE clause represents the name of the department."}
{"sample_id": "train.1416", "rationale": ["The query identifies the relevant tables: 'advisor', 'instructor', and 'student'.", "It selects the columns to display, which are 'name' and 'salary' from the 'instructor' table.", "The JOIN operations link the 'advisor' table to the 'instructor' table using the instructor's ID, and to the 'student' table using the student's ID.", "A condition is added to filter the results based on the department of the students using a placeholder for string values."], "description": "This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholders in the WHERE clause represent the department's name."}
{"sample_id": "train.1418", "rationale": ["The query identifies the relevant tables, which are 'course' and 'prereq'.", "It selects the 'course_id' from the 'course' table.", "The EXCEPT clause is used to filter out any 'course_id' that exists in the 'prereq' table, ensuring that only courses without prerequisites are included."], "description": "This virtual table lists the course IDs of courses that do not have any prerequisites. It is derived from the 'course' table by excluding those course IDs that appear in the 'prereq' table, indicating that they are not dependent on any other courses for enrollment."}
{"sample_id": "train.1423", "rationale": ["The query identifies the relevant table, which is 'course'.", "It selects the 'title' column to display the names of the courses.", "A subquery is used to find the prerequisite course IDs by joining the 'prereq' table with the 'course' table based on the course ID.", "The outer query filters the courses based on the prerequisite IDs obtained from the subquery, using a placeholder for the course title."], "description": "This virtual table lists the titles of courses that are prerequisites for a specific course identified by its title. The placeholder in the WHERE clause represents the title of the course for which the prerequisites are being queried."}
{"sample_id": "train.1428", "rationale": ["The query identifies the relevant tables, which are 'course' and 'section'.", "It selects the 'title' column from the 'course' table, aliased as T1.", "It joins the 'course' table with the 'section' table on the 'course_id' to link courses with their respective sections.", "Conditions are added to filter results based on the specified building, semester, and year using placeholders for string and numeric values."], "description": "This virtual table describes the titles of courses offered in a specific building during a particular semester and year. The placeholders in the WHERE clause represent the building name, semester, and year for filtering the results."}
{"sample_id": "train.1430", "rationale": ["The query identifies the relevant tables: 'instructor', 'teaches', and 'course'.", "It selects the 'name' column from the 'instructor' table.", "The JOIN operations link the 'instructor' table to the 'teaches' table using the instructor's ID, and then to the 'course' table using the course ID.", "A condition is added to filter the results based on the course title using a placeholder for string values."], "description": "This virtual table describes the names of instructors who teach a specific course identified by its title. The placeholders in the WHERE clause represent the course title that the user can specify."}
{"sample_id": "train.1432", "rationale": ["The query identifies the relevant tables: 'advisor', 'instructor', and 'student'.", "It selects the columns to display, which are 'name' and 'salary' from the 'instructor' table.", "The JOIN operations link the 'advisor' table to the 'instructor' table using the instructor's ID, and to the 'student' table using the student's ID.", "A condition is added to filter the results based on the 'dept_name' column from the 'student' table, using a placeholder for string values."], "description": "This virtual table provides the names and salaries of instructors who are advising students from a specific department. The placeholder in the WHERE clause represents the department's name."}
{"sample_id": "train.1434", "rationale": ["The query identifies the relevant tables: 'advisor', 'instructor', and 'student'.", "It selects the 'name' column from the 'instructor' table (aliased as T2).", "The JOIN operations link the 'advisor' table (T1) to the 'instructor' table (T2) and the 'student' table (T3) based on their respective IDs.", "A condition is added to filter the results based on the department name of the students using a placeholder for string values.", "Finally, the results are ordered by the total credits earned by the students."], "description": "This virtual table provides the names of instructors who are advisors to students from a specific department. The placeholder in the WHERE clause represents the department's name, and the results are ordered by the total credits earned by the students."}
{"sample_id": "train.1440", "rationale": ["The query identifies the relevant table, which is 'instructor'.", "Select the column to display, 'name'.", "Add a condition to filter out instructors whose IDs are present in the 'teaches' table using a subquery that selects IDs from 'teaches'."], "description": "This virtual table lists the names of instructors from the 'instructor' table who are not currently teaching any courses. The subquery identifies the IDs of instructors who are teaching, and the main query filters out those IDs to return only the names of instructors who are available for teaching."}
{"sample_id": "train.1442", "rationale": ["The query identifies the relevant table, which is 'instructor'.", "It selects the 'id' column to display the identifiers of instructors.", "The EXCEPT clause is used to exclude those instructors who have records in the 'teaches' table, meaning they are currently teaching courses."], "description": "This virtual table lists the identifiers of instructors from the 'instructor' table who are not currently teaching any courses. The use of the EXCEPT clause ensures that only those instructors who do not have any associated records in the 'teaches' table are included in the result."}
{"sample_id": "train.1444", "rationale": ["The query identifies the relevant table, which is 'instructor'.", "It selects the 'name' column to display the names of instructors.", "The subquery checks the 'teaches' table to find instructors who are teaching in the specified semester using a placeholder for string values."], "description": "This virtual table lists the names of instructors from the 'instructor' table who are not teaching any courses during a specific semester. The placeholder in the subquery represents the semester in which we want to check if the instructors are teaching."}
{"sample_id": "train.1446", "rationale": ["The query identifies the relevant table, which is 'instructor'.", "It selects the 'dept_name' column to display the names of the departments.", "The results are grouped by 'dept_name' to aggregate the data for each department.", "The average salary of instructors is calculated and used to order the results in descending order.", "A limit is applied to restrict the number of departments returned, using a placeholder for numeric values."], "description": "This virtual table provides a list of academic departments from the 'instructor' table, grouped by department name. The results are ordered by the average salary of instructors in each department in descending order, and the number of departments returned is limited by a specified placeholder for numeric values."}
{"sample_id": "train.1450", "rationale": ["The query identifies the relevant tables: 'classroom', 'section', and 'course'.", "It selects the 'title' and 'credits' columns from the 'course' table.", "The join conditions link the 'classroom' and 'section' tables based on the building and room number, and then link the 'section' and 'course' tables based on the course ID.", "A subquery is used to find the maximum capacity from the 'classroom' table, which is used to filter the results."], "description": "This virtual table provides the titles and credits of courses that are held in the classroom with the maximum capacity. It joins the 'classroom', 'section', and 'course' tables to filter the results based on the classroom's capacity."}
{"sample_id": "train.1456", "rationale": ["The query identifies the relevant tables, which are 'student' and 'takes'.", "It selects the 'name' column from the 'student' table.", "A join is performed between 'student' and 'takes' on the student ID to link students with the courses they are taking.", "A subquery is used to find the prerequisite course IDs for a specific course title by joining 'course' and 'prereq'.", "The placeholder in the WHERE clause of the subquery represents the course title for which we want to find the prerequisites."], "description": "This virtual table lists the names of students who are enrolled in courses that have prerequisites, specifically for a course with a given title. The placeholder in the subquery represents the title of the course for which we want to find the students enrolled in its prerequisite courses."}
{"sample_id": "train.1459", "rationale": ["The query identifies the relevant table, which is 'instructor'.", "Select the columns to display, 'name' and 'salary'.", "Add a condition to filter the instructors based on their salary being less than the average salary of instructors in a specified department.", "The subquery calculates the average salary for instructors in the specified department using a placeholder for string values."], "description": "This virtual table provides the names and salaries of instructors from the 'instructor' table who earn less than the average salary of instructors in a specified department. The placeholder in the subquery represents the department's name."}
{"sample_id": "train.1460", "rationale": ["The query identifies the relevant tables: 'course', 'takes', and 'student'.", "It selects the 'name' column from the 'student' table.", "The JOIN operations link the 'course' table to the 'takes' table using 'course_id', and the 'takes' table to the 'student' table using 'ID'.", "A condition is added to filter the results based on the 'dept_name' column from the 'course' table, using a placeholder for the department's name."], "description": "This virtual table describes the names of students who are enrolled in courses offered by a specific academic department. The placeholder in the WHERE clause represents the name of the department."}
{"sample_id": "train.1462", "rationale": ["The query identifies the relevant tables, 'course' and 'section', to retrieve the necessary information.", "It selects the columns 'building', 'room_number', 'semester', and 'year' from the 'section' table.", "A JOIN operation is performed between 'course' and 'section' on the 'course_id' to link courses with their respective sections.", "A condition is added to filter the results based on the specified department name using a placeholder for string values.", "The results are ordered by the course title from the 'course' table."], "description": "This virtual table provides information about the buildings and room numbers where courses from a specific department are held, along with the semester and year of those courses. The placeholder in the WHERE clause represents the name of the department."}
{"sample_id": "train.1465", "rationale": ["The query is identifying the relevant table, which is 'instructor'.", "Select the column to display, 'name'.", "Add a condition to filter the 'dept_name' column for the specified department using a placeholder for string values."], "description": "This virtual table describes the names of instructors from the 'instructor' table who belong to a specific academic department. The placeholder in the WHERE clause represents the department's name."}
{"sample_id": "train.1466", "rationale": ["The query identifies the relevant table, which is 'instructor'.", "Select the column to display, 'name'.", "Add conditions to filter the 'dept_name' column for the specified department and the 'salary' column for salaries greater than a specified amount using placeholders for string and numeric values."], "description": "This virtual table provides the names of instructors from the 'instructor' table who belong to a specific department and have a salary above a certain threshold. The placeholders in the WHERE clause represent the department's name and the salary amount."}
{"sample_id": "train.1468", "rationale": ["The query identifies the relevant tables, which are 'instructor' and 'teaches'.", "It selects the columns to display, 'name' from the 'instructor' table and 'course_id' from the 'teaches' table.", "A join operation is performed between the 'instructor' table and the 'teaches' table on the instructor's ID to link instructors with the courses they teach."], "description": "This virtual table describes the names of instructors along with the course identifiers for the courses they teach. The join operation connects the 'instructor' table with the 'teaches' table based on the instructor's ID, allowing us to retrieve relevant information about the courses taught by each instructor."}
{"sample_id": "train.1470", "rationale": ["The query identifies the relevant tables, which are 'instructor' and 'teaches'.", "It selects the columns to display, 'name' from the 'instructor' table and 'course_id' from the 'teaches' table.", "A JOIN operation is performed on the 'instructor' and 'teaches' tables using the instructor's ID to link them.", "A condition is added to filter the results based on the 'dept_name' column from the 'instructor' table using a placeholder for string values."], "description": "This virtual table provides the names of instructors along with the course IDs of the courses they teach, specifically filtered by the department they belong to. The placeholder in the WHERE clause represents the department's name."}
{"sample_id": "train.1472", "rationale": ["The query identifies the relevant table, which is 'instructor'.", "Select the column to display, which is 'name'.", "Add a condition to filter the 'name' column using a LIKE operator with a placeholder for string values."], "description": "This virtual table lists the names of instructors from the 'instructor' table whose names match a specific pattern. The placeholder in the WHERE clause allows for flexible searching based on the provided string value."}
{"sample_id": "train.1474", "rationale": ["The query identifies the relevant table, which is 'instructor'.", "It selects the 'name' column to display the names of instructors.", "The DISTINCT keyword ensures that only unique names are retrieved, eliminating duplicates.", "The ORDER BY clause sorts the results alphabetically by the instructor's name."], "description": "This virtual table lists the distinct names of instructors from the 'instructor' table, sorted in alphabetical order. The absence of any filtering conditions means it retrieves all unique instructor names available in the database."}
{"sample_id": "train.1477", "rationale": ["The query identifies the relevant table, which is 'section'.", "It selects the 'course_id' column to display the identifiers of the courses.", "The query includes two SELECT statements combined with a UNION to retrieve course IDs for two instances of the same semester and year, using placeholders for the semester and year values."], "description": "This virtual table provides a list of course identifiers from the 'section' table for two different instances of the same semester and year. The placeholders in the WHERE clauses represent the semester and year values that can be specified by the user."}
{"sample_id": "train.1479", "rationale": ["The query is identifying the relevant table, which is 'section'.", "Select the 'course_id' column to display the identifiers of the courses.", "Add conditions to filter the results for two different semesters and the same academic year using placeholders for string and numeric values.", "Use the INTERSECT operator to find common course IDs between the two queries."], "description": "This virtual table identifies the course IDs from the 'section' table that are offered in two different semesters of the same academic year. The placeholders in the WHERE clauses represent the specific semesters and the academic year."}
{"sample_id": "train.1481", "rationale": ["The query is identifying the relevant table, which is 'SECTION'.", "Select the 'course_id' column to display the course identifiers.", "Add a condition to filter the results based on the specified semester and year using placeholders for string and numeric values.", "Use the EXCEPT clause to exclude course IDs from another specified semester and year."], "description": "This virtual table identifies the course IDs from the 'SECTION' table that are offered in a specific semester and year, excluding those that are also offered in another specified semester and year. The placeholders in the query represent the semester and year values for filtering the results."}
{"sample_id": "train.1482", "rationale": ["The query identifies the relevant table, which is 'instructor'.", "It selects distinct values of the 'salary' column to avoid duplicates.", "A subquery is used to find the maximum salary from the 'instructor' table, and the main query filters salaries that are less than this maximum using a placeholder for numeric values."], "description": "This virtual table provides a list of distinct salaries of instructors from the 'instructor' table that are less than the maximum salary among all instructors. The placeholder in the WHERE clause represents a comparison to the maximum salary value."}
{"sample_id": "train.1484", "rationale": ["The query identifies the relevant table, which is 'teaches'.", "It uses the COUNT function to count distinct instructor IDs, ensuring that each instructor is only counted once.", "The WHERE clause filters the results based on the specified semester and year using placeholders for string and numeric values."], "description": "This virtual table provides the count of distinct instructors who are teaching courses during a specific semester and year. The placeholders in the WHERE clause represent the semester and year for which the count is being calculated."}
{"sample_id": "train.1488", "rationale": ["The query identifies the relevant table, which is 'instructor'.", "It selects the 'name' column to display the names of instructors.", "A subquery is used to find the minimum salary of instructors in a specified department, using a placeholder for the department's name.", "The main query filters the instructors based on their salary being greater than the minimum salary obtained from the subquery."], "description": "This virtual table lists the names of instructors from the 'instructor' table who earn a salary greater than the minimum salary of instructors in a specified department. The placeholder in the subquery represents the department's name."}
{"sample_id": "train.1490", "rationale": ["The query identifies the relevant table, which is 'instructor'.", "It selects the 'name' column to display the names of instructors.", "A subquery is used to find the maximum salary of instructors in a specified department, using a placeholder for the department's name.", "The main query filters the instructors based on their salary being greater than the maximum salary found in the subquery."], "description": "This virtual table lists the names of instructors from the 'instructor' table who earn a salary greater than the maximum salary of instructors in a specified department. The placeholder in the subquery represents the department's name."}
{"sample_id": "train.1492", "rationale": ["The query is identifying the relevant table, which is 'debate'.", "The count function is used to aggregate the total number of rows in the 'debate' table, which represents the total number of debate events."], "description": "This virtual table provides the total number of debate events recorded in the 'debate' table. The query counts all entries in the table, giving a clear overview of how many debates have taken place."}
{"sample_id": "train.1493", "rationale": ["The query identifies the relevant table, which is 'debate'.", "Select the column to display, 'Venue'.", "Order the results by 'Num_of_Audience' in ascending order to show venues with fewer audience members first."], "description": "This virtual table provides a list of venues from the 'debate' table, ordered by the number of audience members attending each debate in ascending order. This allows users to see which venues had the least to most audience participation."}
{"sample_id": "train.1494", "rationale": ["The query identifies the relevant table, which is 'debate'.", "Select the columns to display, 'Date' and 'Venue'.", "No filtering conditions are applied, allowing for a general overview of all debate events."], "description": "This virtual table provides the date and venue of debate events from the 'debate' table. The placeholders in the SELECT statement can be modified to filter or sort the results based on specific criteria."}
{"sample_id": "train.1495", "rationale": ["The query identifies the relevant table, which is 'debate'.", "Select the column to display, 'Date'.", "Add a condition to filter the 'Num_of_Audience' column for values greater than a specified number using a placeholder for numeric values."], "description": "This virtual table provides the dates of debate events from the 'debate' table where the number of audience members exceeds a specified threshold. The placeholder in the WHERE clause represents the minimum number of audience members required to filter the results."}
{"sample_id": "train.1496", "rationale": ["The query identifies the relevant table, which is 'people'.", "Select the column to display, 'Name'.", "Add a condition to filter the 'Age' column for two specific ages using placeholders for numeric values."], "description": "This virtual table describes the names of individuals from the 'people' table who are of specific ages. The placeholders in the WHERE clause represent the ages being queried."}
{"sample_id": "train.1497", "rationale": ["The query identifies the relevant table, which is 'people'.", "Select the column to display, 'Party'.", "Order the results by the 'Age' column in ascending order to show the youngest individuals first.", "Limit the number of results returned using a placeholder for numeric values."], "description": "This virtual table provides a list of political party affiliations from the 'people' table, ordered by the age of individuals in ascending order. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return."}
{"sample_id": "train.1498", "rationale": ["The query identifies the relevant table, which is 'people'.", "Select the 'Party' column to display the political affiliations.", "Use the COUNT function to count the number of individuals in each party.", "Group the results by the 'Party' column to aggregate the counts for each political party."], "description": "This virtual table summarizes the number of individuals affiliated with each political party from the 'people' table. The query groups the results by the 'Party' column, allowing for a count of people in each party."}
{"sample_id": "train.1500", "rationale": ["The query identifies the relevant table, which is 'debate'.", "It selects the 'Venue' column to display the locations of the debates.", "The DISTINCT keyword is used to ensure that only unique venues are returned in the result set."], "description": "This virtual table provides a list of unique venues from the 'debate' table where debate events are held. The query uses the DISTINCT keyword to ensure that each venue is listed only once, regardless of how many debates occur at that location."}
{"sample_id": "train.1501", "rationale": ["The query identifies the relevant tables: 'debate_people', 'debate', and 'people'.", "It selects the 'Name' from the 'people' table, and 'Date' and 'Venue' from the 'debate' table.", "The JOIN operations link the 'debate_people' table to the 'debate' table using 'Debate_ID', and to the 'people' table using 'Affirmative' to get the names of the affirmative participants."], "description": "This virtual table provides the names of individuals who were on the affirmative side of debates, along with the corresponding date and venue of each debate. The placeholders in the query represent the identifiers linking the debates and the people involved."}
{"sample_id": "train.1502", "rationale": ["The query identifies the relevant tables: 'debate_people', 'debate', and 'people'.", "It selects the 'Name' from the 'people' table, 'Date' and 'Venue' from the 'debate' table.", "The JOIN operations link the 'debate_people' table to the 'debate' table using 'Debate_ID', and to the 'people' table using 'Negative' to get the names of the negative participants.", "The results are ordered by the names of the participants in ascending order."], "description": "This virtual table provides the names of individuals who participated on the negative side of debates, along with the corresponding debate dates and venues. The placeholders in the query allow for dynamic filtering and sorting based on the names of the participants."}
{"sample_id": "train.1503", "rationale": ["The query identifies the relevant tables: 'debate_people', 'debate', and 'people'.", "It selects the 'Name' column from the 'people' table, which corresponds to individuals on the affirmative side.", "The query joins the 'debate_people' table with the 'debate' table using the 'Debate_ID' to access debate details.", "It further joins the 'people' table to get the names of those on the affirmative side using the 'Affirmative' column.", "A condition is added to filter debates based on the number of audience members using a placeholder for numeric values."], "description": "This virtual table lists the names of individuals who were on the affirmative side of debates that had a specific number of audience members. The placeholders in the query allow for filtering based on the audience size."}
{"sample_id": "train.1504", "rationale": ["The query identifies the relevant tables, which are 'debate_people' and 'people'.", "It selects the 'Name' column from the 'people' table and counts the occurrences of each name in the 'debate_people' table.", "The join condition links the 'Affirmative' column in 'debate_people' to the 'People_ID' in 'people' to ensure we are counting the correct individuals.", "The results are grouped by the 'Name' to provide a count of debates for each person."], "description": "This virtual table summarizes the count of debates in which each person has participated on the affirmative side. It joins the 'debate_people' table with the 'people' table to retrieve the names of individuals and their corresponding counts of affirmative participation."}
{"sample_id": "train.1505", "rationale": ["The query identifies the relevant tables, which are 'debate_people' and 'people'.", "It selects the 'Name' column from the 'people' table, which corresponds to individuals on the negative side of debates.", "A join is performed between 'debate_people' and 'people' on the condition that the 'Negative' field in 'debate_people' matches the 'People_ID' in 'people'.", "The results are grouped by the names of the individuals to aggregate their participation in debates.", "The HAVING clause filters the results to include only those individuals who have participated in a specified minimum number of debates, represented by a placeholder for numeric values."], "description": "This virtual table lists the names of individuals who have participated in debates on the negative side, specifically those who have participated in a minimum number of debates as specified by the placeholder. The query joins the 'debate_people' table with the 'people' table to retrieve the names of the individuals associated with the negative side of the debates."}
{"sample_id": "train.1506", "rationale": ["The query identifies the relevant table, which is 'people'.", "Select the column to display, 'Name'.", "Add a condition to filter out individuals whose 'People_ID' is present in the affirmative participants of the 'debate_people' table using a subquery."], "description": "This virtual table lists the names of individuals from the 'people' table who did not participate on the affirmative side in any debate. The placeholder in the subquery represents the affirmative participants' identifiers."}
{"sample_id": "train.1507", "rationale": ["The query identifies the relevant table, which is 'Customers'.", "Select the column to display, 'customer_details'.", "Add an ORDER BY clause to sort the results based on 'customer_details' in ascending order."], "description": "This virtual table provides a list of detailed information about customers from the 'Customers' table, sorted in ascending order based on the customer details. The placeholder in the ORDER BY clause allows for dynamic sorting based on the specified criteria."}
{"sample_id": "train.1509", "rationale": ["The query identifies the relevant tables, which are 'Policies' and 'Customers'.", "It selects the 'policy_type_code' column from the 'Policies' table.", "A JOIN operation is performed to link the 'Policies' table with the 'Customers' table based on the 'customer_id'.", "A condition is added to filter the results based on the 'customer_details' column using a placeholder for string values."], "description": "This virtual table describes the types of insurance policies from the 'Policies' table that are associated with a specific customer. The placeholder in the WHERE clause represents the detailed information about the customer."}
{"sample_id": "train.1512", "rationale": ["The query identifies the relevant table, which is 'Policies'.", "It selects the 'policy_type_code' column to display the types of insurance policies.", "The query groups the results by 'policy_type_code' to aggregate the data based on policy types.", "It orders the results by the count of each policy type in descending order to show the most common types first.", "The LIMIT clause uses a placeholder to specify the maximum number of results to return."], "description": "This virtual table provides a summary of the different types of insurance policies available in the 'Policies' table. It groups the policies by their type code and orders them by the number of occurrences, allowing users to see the most common policy types. The placeholder in the LIMIT clause represents the maximum number of policy types to return."}
{"sample_id": "train.1514", "rationale": ["The query identifies the relevant table, which is 'Policies'.", "It selects the 'policy_type_code' to display unique policy types.", "The GROUP BY clause is used to group the results by 'policy_type_code'.", "The HAVING clause filters the groups to include only those with a count greater than a specified number, using a placeholder for numeric values."], "description": "This virtual table provides a list of unique insurance policy types from the 'Policies' table that have been issued more than a specified number of times. The placeholder in the HAVING clause represents the minimum count of policies required to be included in the results."}
{"sample_id": "train.1520", "rationale": ["The query identifies the relevant tables: 'Claim_Headers', 'Policies', and 'Customers'.", "It selects the 'Customer_Details' from the 'Customers' table.", "The join conditions link 'Claim_Headers' to 'Policies' using 'Policy_ID', and 'Policies' to 'Customers' using 'Customer_ID'.", "The WHERE clause filters the results to only include the claim with the maximum amount claimed, using a subquery to determine this maximum value."], "description": "This virtual table retrieves the detailed information of the customer associated with the claim that has the highest amount claimed. It joins the 'Claim_Headers' table with the 'Policies' table to link claims to policies, and then joins with the 'Customers' table to get the customer details. The placeholder in the WHERE clause represents the maximum amount claimed across all claims."}
{"sample_id": "train.1523", "rationale": ["The query identifies the relevant table, which is 'Customers'.", "It selects the 'customer_details' column to display information about customers.", "The EXCEPT clause is used to exclude customer details that are linked to any policies by joining the 'Policies' table with the 'Customers' table on the 'Customer_ID' field."], "description": "This virtual table provides a list of customer details from the 'Customers' table, excluding those customers who have associated insurance policies. The query uses an EXCEPT clause to filter out customers that are linked to any policies, ensuring that only customers without policies are displayed."}
{"sample_id": "train.1525", "rationale": ["The query is identifying the relevant table, which is 'Claims_Processing_Stages'.", "The count function is used to aggregate the total number of records in the table, which gives the total number of claim processing stages."], "description": "This virtual table provides a count of all claim processing stages recorded in the 'Claims_Processing_Stages' table. The result will indicate the total number of distinct stages available for processing claims."}
{"sample_id": "train.1529", "rationale": ["The query identifies the relevant table, which is 'Customers'.", "Select the column to display, 'customer_details'.", "Add a condition to filter the 'customer_details' column using a LIKE clause with a placeholder for string values."], "description": "This virtual table describes the detailed information of customers from the 'Customers' table that match a specific pattern. The placeholder in the WHERE clause represents the search criteria for customer details."}
{"sample_id": "train.1532", "rationale": ["The query identifies the relevant tables, which are 'Policies' and 'Customers'.", "It uses a JOIN operation to link the 'Policies' table with the 'Customers' table based on the 'Customer_ID'.", "The SELECT DISTINCT statement is used to ensure that only unique customer details are returned.", "A condition is added to filter the results based on the 'Policy_Type_Code' using a placeholder for string values."], "description": "This virtual table provides a distinct list of customer details from the 'Customers' table for those customers who hold a specific type of insurance policy. The placeholder in the WHERE clause represents the policy type code that is being queried."}
{"sample_id": "train.1534", "rationale": ["The query identifies the relevant tables, which are 'Policies' and 'Customers'.", "It selects distinct customer details from the 'Customers' table.", "A JOIN operation is performed on the 'customer_id' to link the 'Policies' table with the 'Customers' table.", "The WHERE clause filters the results based on specific policy type codes using placeholders for string values."], "description": "This virtual table provides a list of distinct customer details from the 'Customers' table for those customers who have specific types of insurance policies. The placeholders in the WHERE clause represent the policy type codes that the user can specify."}
{"sample_id": "train.1537", "rationale": ["The query identifies the relevant table, which is 'Policies'.", "It selects the 'policy_type_code' column to display the type of insurance policy.", "The count function is used to aggregate the number of policies for each type.", "The GROUP BY clause is applied to group the results by 'policy_type_code' to get the count for each type."], "description": "This virtual table summarizes the count of insurance policies grouped by their type from the 'Policies' table. The placeholder in the SELECT clause represents the policy type code."}
{"sample_id": "train.1539", "rationale": ["The query identifies the relevant tables, which are 'Policies' and 'Customers'.", "It selects the 'Customer_Details' from the 'Customers' table.", "A JOIN operation is performed on 'Policies' and 'Customers' using the 'Customer_ID' to link them.", "The results are grouped by 'Customer_Details' to aggregate the data.", "The results are ordered by the count of policies in descending order to prioritize customers with the most policies.", "A LIMIT clause is added to restrict the number of results returned, using a placeholder for numeric values."], "description": "This virtual table provides a list of customer details from the 'Customers' table, specifically for those customers who have insurance policies. The data is aggregated by customer details, sorted in descending order based on the number of policies they hold, and limited to a specified number of results. The placeholder in the LIMIT clause represents the maximum number of customer details to return."}
{"sample_id": "train.1541", "rationale": ["The query identifies the relevant table, which is 'claims_processing_stages'.", "Select the column to display, 'claim_status_description'.", "Add a condition to filter the 'claim_status_name' column for the specified status using a placeholder for string values."], "description": "This virtual table provides the description of the current status of claims from the 'claims_processing_stages' table based on a specific status name. The placeholder in the WHERE clause represents the name of the claim status being queried."}
{"sample_id": "train.1543", "rationale": ["The query identifies the relevant table, which is 'Claims_Processing'.", "It uses the COUNT function to count the number of distinct values in the 'claim_outcome_code' column.", "The DISTINCT keyword ensures that only unique outcome codes are counted."], "description": "This virtual table provides the count of distinct claim outcome codes from the 'Claims_Processing' table. The result will indicate how many unique outcomes have been recorded for claims processing."}
{"sample_id": "train.1551", "rationale": ["The query identifies the relevant table, which is 'Accounts'.", "Select the columns to display: 'account_id', 'date_account_opened', 'account_name', and 'other_account_details'.", "No filtering conditions are applied, so all records from the 'Accounts' table will be retrieved."], "description": "This virtual table describes the account details of customers from the 'Accounts' table. It includes the account ID, the date the account was opened, the name of the account, and any additional details related to the account."}
{"sample_id": "train.1554", "rationale": ["The query identifies the relevant tables, which are 'Accounts' and 'Customers'.", "It selects the columns to display from the 'Accounts' table: 'account_id', 'date_account_opened', 'account_name', and 'other_account_details'.", "A JOIN operation is performed between 'Accounts' and 'Customers' on the 'customer_id' to link accounts to their respective customers.", "A condition is added to filter the results based on the 'customer_first_name' from the 'Customers' table using a placeholder for string values."], "description": "This virtual table provides details about customer accounts from the 'Accounts' table, including the account ID, the date the account was opened, the account name, and any additional account details. The results are filtered based on the first name of the customer from the 'Customers' table, represented by a placeholder for string values."}
{"sample_id": "train.1555", "rationale": ["The query identifies the relevant tables, which are 'Accounts' and 'Customers'.", "It selects the columns to display, 'account_name' and 'other_account_details' from the 'Accounts' table.", "A JOIN operation is performed to link 'Accounts' with 'Customers' based on the 'customer_id'.", "Conditions are added to filter the results based on the specified first and last names of the customer using placeholders for string values."], "description": "This virtual table describes the account names and additional details of accounts associated with customers from the 'Accounts' table, filtered by the first and last names of the customers. The placeholders in the WHERE clause represent the customer's first and last names."}
{"sample_id": "train.1557", "rationale": ["The query identifies the relevant tables, which are 'Accounts' and 'Customers'.", "It selects the columns to display, 'customer_first_name' and 'customer_last_name'.", "A JOIN operation is performed on 'Accounts' and 'Customers' using the 'customer_id' to link the two tables.", "A condition is added to filter the 'account_name' column for the specified account using a placeholder for string values."], "description": "This virtual table describes the first and last names of customers associated with a specific account name from the 'Accounts' and 'Customers' tables. The placeholder in the WHERE clause represents the account name being queried."}
