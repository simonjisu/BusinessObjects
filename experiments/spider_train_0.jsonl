{"sample_id": 0, "db_id": "department_management", "question": "How many heads of the departments are older than 56 ?", "rationale": ["Identify the table that contains the relevant information about department heads, which is the 'head' table.", "Determine the column that stores the age of the department heads, which is 'age'.", "Formulate a condition to filter the department heads who are older than 56, using the condition 'age > 56'.", "Use the COUNT() function to count the number of department heads that meet the condition.", "Construct the SQL query to select the count of heads from the 'head' table where the age is greater than 56."], "pred_sql": "SELECT COUNT(*) AS num_heads FROM head WHERE age > 56;", "gold_sql": "SELECT count(*) FROM head WHERE age  >  56", "source_tables": ["head"]}
{"sample_id": 1, "db_id": "department_management", "question": "List the name, born state and age of the heads of departments ordered by age.", "rationale": ["Identify the columns needed: name, born state, and age of department heads.", "Determine the tables involved: head, management, and department.", "Establish the relationships between the tables using JOINs: head is linked to management via head_ID, and management is linked to department via department_ID.", "Construct the SELECT statement to retrieve the required columns from the head table.", "Add the JOIN clauses to connect the tables appropriately.", "Include the ORDER BY clause to sort the results by the age of the department heads."], "pred_sql": "SELECT head.name, head.born_state, head.age FROM head JOIN management ON head.head_ID = management.head_ID JOIN department ON management.department_ID = department.Department_ID ORDER BY head.age;", "gold_sql": "SELECT name ,  born_state ,  age FROM head ORDER BY age", "source_tables": ["head"]}
{"sample_id": 2, "db_id": "department_management", "question": "List the creation year, name and budget of each department.", "rationale": ["Identify the columns needed: creation year, name, and budget of each department.", "The 'Creation' column needs to be formatted to extract the year, which can be done using the strftime function in SQLite.", "Select the 'Name' and 'Budget_in_Billions' columns directly from the department table.", "Construct the SQL query using SELECT to retrieve the specified columns from the department table."], "pred_sql": "SELECT strftime('%Y', Creation) AS creation_year, Name, Budget_in_Billions FROM department;", "gold_sql": "SELECT creation ,  name ,  budget_in_billions FROM department", "source_tables": ["department"]}
{"sample_id": 3, "db_id": "department_management", "question": "What are the maximum and minimum budget of the departments?", "rationale": ["Identify the relevant table: The query requires information about the budget of departments, which is found in the 'department' table.", "Determine the required calculations: We need to find the maximum and minimum values of the 'Budget_in_Billions' column.", "Construct the SQL query: Use the SELECT statement to retrieve the maximum and minimum budget values from the 'Budget_in_Billions' column in the 'department' table."], "pred_sql": "SELECT MAX(Budget_in_Billions) AS Max_Budget, MIN(Budget_in_Billions) AS Min_Budget FROM department;", "gold_sql": "SELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department", "source_tables": ["department"]}
{"sample_id": 4, "db_id": "department_management", "question": "What is the average number of employees of the departments whose rank is between 10 and 15?", "rationale": ["Identify the table that contains the relevant data: the 'department' table has the 'Num_Employees' and 'Ranking' columns.", "Determine the condition for filtering the departments: we need departments with a ranking between 10 and 15.", "Use the AVG() function to calculate the average number of employees for the filtered departments.", "Construct the SQL query to select the average number of employees from the 'department' table where the ranking is between 10 and 15."], "pred_sql": "SELECT AVG(Num_Employees) AS average_num_employees FROM department WHERE Ranking BETWEEN '10' AND '15';", "gold_sql": "SELECT avg(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15", "source_tables": ["department"]}
{"sample_id": 5, "db_id": "department_management", "question": "What are the names of the heads who are born outside the California state?", "rationale": ["Identify the table that contains the information about department heads, which is the 'head' table.", "Determine the relevant column that contains the state of birth for the department heads, which is 'born_state'.", "Formulate a condition to filter out heads born in California, which translates to 'born_state != 'California'.", "Select the 'name' column from the 'head' table to get the names of the heads that meet the condition."], "pred_sql": "SELECT head.name FROM head WHERE head.born_state != 'California';", "gold_sql": "SELECT name FROM head WHERE born_state != 'California'", "source_tables": ["head"]}
{"sample_id": 6, "db_id": "department_management", "question": "What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?", "rationale": ["Identify the relevant tables: department, management, and head.", "Determine the columns needed: Creation from department and born_state from head.", "Join the tables based on their relationships: management links department and head.", "Filter the results to only include departments managed by heads born in 'Alabama'.", "Select distinct years from the Creation date, converting it to a year format."], "pred_sql": "SELECT DISTINCT strftime('%Y', Creation) AS creation_year FROM department d JOIN management m ON d.Department_ID = m.department_ID JOIN head h ON m.head_ID = h.head_ID WHERE h.born_state = 'Alabama';", "gold_sql": "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama'", "source_tables": ["head", "department", "management"]}
{"sample_id": 7, "db_id": "department_management", "question": "What are the names of the states where at least 3 heads were born?", "rationale": ["Identify the relevant table: We need to look at the 'head' table since it contains information about department heads, including their birth states.", "Determine the required information: We need the names of the states where at least 3 heads were born, which means we need to group the results by the 'born_state' column.", "Count the number of heads per state: We will use the COUNT() function to count the number of heads for each state.", "Filter the results: We will use the HAVING clause to filter the groups to only include those with a count of 3 or more."], "pred_sql": "SELECT born_state FROM head GROUP BY born_state HAVING COUNT(head_ID) >= 3;", "gold_sql": "SELECT born_state FROM head GROUP BY born_state HAVING count(*)  >=  3", "source_tables": ["head"]}
{"sample_id": 8, "db_id": "department_management", "question": "In which year were most departments established?", "rationale": ["Identify the relevant table: The 'department' table contains the 'Creation' column which indicates when departments were established.", "Extract the year from the 'Creation' date: Use the strftime function to convert the 'Creation' date into a year format.", "Count the number of departments established each year: Use COUNT(*) to count the number of entries for each year.", "Group the results by year: Use GROUP BY to aggregate the counts by the establishment year.", "Order the results to find the year with the most departments: Use ORDER BY to sort the counts in descending order.", "Limit the results to the top entry: Use LIMIT 1 to get only the year with the highest count."], "pred_sql": "SELECT strftime('%Y', Creation) AS establishment_year, COUNT(*) AS num_departments\nFROM department\nGROUP BY establishment_year\nORDER BY num_departments DESC\nLIMIT 1;", "gold_sql": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1", "source_tables": ["department"]}
{"sample_id": 9, "db_id": "department_management", "question": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?", "rationale": ["Identify the columns needed: 'Name' and 'Num_Employees' from the 'department' table.", "Determine the relationship between the tables: 'department' is linked to 'management' via 'Department_ID', and 'management' is linked to 'head' via 'head_ID'.", "Use JOIN clauses to combine the 'department', 'management', and 'head' tables based on their relationships.", "Filter the results to include only those departments where the corresponding head has 'temporary_acting' set to 'Yes'.", "Construct the SQL SELECT statement to retrieve the desired columns from the joined tables."], "pred_sql": "SELECT department.Name, department.Num_Employees \nFROM department \nJOIN management ON department.Department_ID = management.department_ID \nJOIN head ON management.head_ID = head.head_ID \nWHERE management.temporary_acting = 'Yes';", "gold_sql": "SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  'Yes'", "source_tables": ["department", "management"]}
{"sample_id": 10, "db_id": "department_management", "question": "How many acting statuses are there?", "rationale": ["Identify the relevant table: The 'management' table contains the 'temporary_acting' column which indicates the acting status.", "Determine the goal: We need to count the distinct values in the 'temporary_acting' column to find out how many different acting statuses exist.", "Construct the SQL query: Use the COUNT function along with DISTINCT to count unique values in the 'temporary_acting' column."], "pred_sql": "SELECT COUNT(DISTINCT temporary_acting) AS acting_status_count FROM management;", "gold_sql": "SELECT count(DISTINCT temporary_acting) FROM management", "source_tables": ["management"]}
{"sample_id": 11, "db_id": "department_management", "question": "How many departments are led by heads who are not mentioned?", "rationale": ["Identify the tables involved: department, management, and head.", "We need to count the number of departments, so we will use the COUNT function.", "To find departments led by heads who are not mentioned, we will perform a LEFT JOIN between the department and management tables, and then another LEFT JOIN with the head table.", "The condition to check for heads who are not mentioned is to look for NULL values in the head table's head_ID column after the joins.", "We will use DISTINCT to ensure we count each department only once, even if there are multiple entries in the management table."], "pred_sql": "SELECT COUNT(DISTINCT department.Department_ID) AS num_departments\nFROM department\nLEFT JOIN management ON department.Department_ID = management.department_ID\nLEFT JOIN head ON management.head_ID = head.head_ID\nWHERE head.head_ID IS NULL;", "gold_sql": "SELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);", "source_tables": ["department", "management"]}
{"sample_id": 12, "db_id": "department_management", "question": "What are the distinct ages of the heads who are acting?", "rationale": ["Identify the relevant tables: 'head' for department heads and 'management' for their acting status.", "We need to find distinct ages, so we will use the DISTINCT keyword.", "The condition specifies that we are only interested in heads who are temporarily acting, which is indicated by the 'temporary_acting' column in the 'management' table.", "We will join the 'head' and 'management' tables on the 'head_ID' to correlate heads with their acting status.", "Finally, we will select the 'age' column from the 'head' table where the 'temporary_acting' column is set to 'yes'."], "pred_sql": "SELECT DISTINCT h.age FROM head h JOIN management m ON h.head_ID = m.head_ID WHERE m.temporary_acting = 'yes';", "gold_sql": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'", "source_tables": ["management", "head"]}
{"sample_id": 13, "db_id": "department_management", "question": "List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.", "rationale": ["Identify the departments of interest: 'Treasury' and 'Homeland Security'.", "Join the 'department' table with the 'management' table to link departments with their heads.", "Join the 'management' table with the 'head' table to access the head's details, specifically their born state.", "Select the 'born_state' of the head for the 'Treasury' department.", "Use UNION to combine the results with the 'born_state' of the head for the 'Homeland Security' department."], "pred_sql": "SELECT h1.born_state\nFROM department d1\nJOIN management m1 ON d1.Department_ID = m1.department_ID\nJOIN head h1 ON m1.head_ID = h1.head_ID\nWHERE d1.Name = 'Treasury'\nUNION\nSELECT h2.born_state\nFROM department d2\nJOIN management m2 ON d2.Department_ID = m2.department_ID\nJOIN head h2 ON m2.head_ID = h2.head_ID\nWHERE d2.Name = 'Homeland Security';", "gold_sql": "SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Homeland Security'", "source_tables": ["head", "department", "management"]}
{"sample_id": 14, "db_id": "department_management", "question": "Which department has more than 1 head at a time? List the id, name and the number of heads.", "rationale": ["Identify the relevant tables: We need to look at the 'department' and 'management' tables to find the departments and their heads.", "Join the tables: We will join the 'department' table with the 'management' table on the department ID to associate each department with its heads.", "Group the results: We will group the results by department ID and name to count the number of heads for each department.", "Count the heads: We will use COUNT(management.head_ID) to count the number of heads associated with each department.", "Filter the results: We will use HAVING COUNT(management.head_ID) > 1 to filter departments that have more than one head."], "pred_sql": "SELECT department.Department_ID, department.Name, COUNT(management.head_ID) AS Number_of_Heads\nFROM department\nJOIN management ON department.Department_ID = management.department_ID\nGROUP BY department.Department_ID, department.Name\nHAVING COUNT(management.head_ID) > 1;", "gold_sql": "SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  1", "source_tables": ["management", "department"]}
{"sample_id": 15, "db_id": "department_management", "question": "Which head's name has the substring 'Ha'? List the id and name.", "rationale": ["Identify the table that contains the head's name, which is the 'head' table.", "Determine the columns needed for the output: 'head_ID' and 'name'.", "Use the SQL SELECT statement to retrieve the specified columns.", "Apply a WHERE clause to filter the results based on the condition that the 'name' contains the substring 'Ha'.", "Use the LIKE operator with wildcards '%' to match any characters before and after 'Ha'."], "pred_sql": "SELECT head_ID, name FROM head WHERE name LIKE '%Ha%';", "gold_sql": "SELECT head_id ,  name FROM head WHERE name LIKE '%Ha%'", "source_tables": ["head"]}
{"sample_id": 16, "db_id": "farm", "question": "How many farms are there?", "rationale": ["Identify the table that contains information about farms, which is the 'farm' table.", "To find out how many farms there are, we need to count the number of entries in the 'farm' table.", "Use the COUNT() function to count all rows in the 'farm' table.", "Construct the SQL query to select the count of farms from the 'farm' table."], "pred_sql": "SELECT COUNT(*) AS Total_Farms FROM farm;", "gold_sql": "SELECT count(*) FROM farm", "source_tables": ["farm"]}
{"sample_id": 17, "db_id": "farm", "question": "Count the number of farms.", "rationale": ["Identify the table that contains the information about farms, which is the 'farm' table.", "To count the number of farms, we will use the COUNT() function in SQL.", "The SQL query will select the count of all records from the 'farm' table.", "The final SQL query will be 'SELECT COUNT(*) AS NumberOfFarms FROM farm;' to get the total number of farms."], "pred_sql": "SELECT COUNT(*) AS NumberOfFarms FROM farm;", "gold_sql": "SELECT count(*) FROM farm", "source_tables": ["farm"]}
{"sample_id": 18, "db_id": "farm", "question": "List the total number of horses on farms in ascending order.", "rationale": ["Identify the relevant table: The 'farm' table contains the 'Total_Horses' column which is needed for the query.", "Determine the required operation: The user wants to list the total number of horses, which means we need to select the 'Total_Horses' column.", "Specify the order: The user requested the results in ascending order, so we will use the ORDER BY clause with ASC.", "Construct the SQL query: Combine the SELECT statement with the ORDER BY clause to form the complete SQL query."], "pred_sql": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC;", "gold_sql": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC", "source_tables": ["farm"]}
{"sample_id": 19, "db_id": "farm", "question": "What is the total horses record for each farm, sorted ascending?", "rationale": ["Identify the relevant table: The query is asking for data related to farms, so we will use the 'farm' table.", "Determine the required columns: We need the 'Farm_ID' and 'Total_Horses' columns to answer the query.", "Specify the sorting order: The query requests that the results be sorted in ascending order based on the total number of horses.", "Construct the SQL query: Combine the selected columns, the table name, and the sorting clause to form the complete SQL query."], "pred_sql": "SELECT Farm_ID, Total_Horses FROM farm ORDER BY Total_Horses ASC;", "gold_sql": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC", "source_tables": ["farm"]}
{"sample_id": 20, "db_id": "farm", "question": "What are the hosts of competitions whose theme is not \"Aliens\"?", "rationale": ["Identify the table that contains the information about competition hosts, which is 'farm_competition'.", "Determine the relevant column for hosts, which is 'Hosts'.", "Identify the column that contains the theme of the competition, which is 'Theme'.", "Formulate a query to select distinct hosts from 'farm_competition' where the theme is not 'Aliens'."], "pred_sql": "SELECT DISTINCT Hosts FROM farm_competition WHERE Theme != 'Aliens';", "gold_sql": "SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'", "source_tables": ["farm_competition"]}
{"sample_id": 21, "db_id": "farm", "question": "Return the hosts of competitions for which the theme is not Aliens?", "rationale": ["Identify the table that contains the information about competitions, which is 'farm_competition'.", "Determine the relevant column that contains the theme of the competition, which is 'Theme'.", "Specify the condition that the theme should not be 'Aliens', using the '!=' operator.", "Select the 'Hosts' column to retrieve the names of the hosts for the competitions that meet the condition."], "pred_sql": "SELECT Hosts FROM farm_competition WHERE Theme != 'Aliens';", "gold_sql": "SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'", "source_tables": ["farm_competition"]}
{"sample_id": 22, "db_id": "farm", "question": "What are the themes of farm competitions sorted by year in ascending order?", "rationale": ["Identify the relevant table: The query is asking for themes of farm competitions, which are stored in the 'farm_competition' table.", "Select the appropriate column: The 'Theme' column contains the information we need about the themes of the competitions.", "Sort the results: The query specifies that the results should be sorted by 'Year' in ascending order, so we will include an ORDER BY clause for the 'Year' column.", "Construct the SQL query: Combine the SELECT statement with the ORDER BY clause to form the complete SQL query."], "pred_sql": "SELECT Theme FROM farm_competition ORDER BY Year ASC;", "gold_sql": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC", "source_tables": ["farm_competition"]}
{"sample_id": 23, "db_id": "farm", "question": "Return the themes of farm competitions, sorted by year ascending.", "rationale": ["Identify the relevant table: The query requires information about farm competitions, which is found in the 'farm_competition' table.", "Determine the required column: The user wants the 'Theme' of the competitions.", "Sort the results: The user requests that the results be sorted by 'Year' in ascending order.", "Construct the SQL query: Combine the SELECT statement for the 'Theme' column with the ORDER BY clause for 'Year' to form the complete SQL query."], "pred_sql": "SELECT Theme FROM farm_competition ORDER BY Year ASC;", "gold_sql": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC", "source_tables": ["farm_competition"]}
{"sample_id": 24, "db_id": "farm", "question": "What is the average number of working horses of farms with more than 5000 total number of horses?", "rationale": ["Identify the relevant table: The query pertains to farms, so we will use the 'farm' table.", "Determine the required calculation: We need to calculate the average number of working horses.", "Identify the relevant column: The column for working horses is 'Working_Horses'.", "Set the condition: We need to filter farms that have more than 5000 total horses, which refers to the 'Total_Horses' column.", "Construct the SQL query: Use the AVG function to calculate the average of 'Working_Horses' where 'Total_Horses' is greater than 5000."], "pred_sql": "SELECT AVG(Working_Horses) AS Average_Working_Horses FROM farm WHERE Total_Horses > 5000;", "gold_sql": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000", "source_tables": ["farm"]}
{"sample_id": 25, "db_id": "farm", "question": "Give the average number of working horses on farms with more than 5000 total horses.", "rationale": ["Identify the table that contains the relevant data: the 'farm' table has the columns for 'Total_Horses' and 'Working_Horses'.", "Determine the condition: we need to filter farms where 'Total_Horses' is greater than 5000.", "Calculate the average of 'Working_Horses' for the filtered farms using the AVG() function.", "Construct the SQL query to select the average number of working horses from the 'farm' table with the specified condition."], "pred_sql": "SELECT AVG(Working_Horses) AS Average_Working_Horses\nFROM farm\nWHERE Total_Horses > 5000;", "gold_sql": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000", "source_tables": ["farm"]}
{"sample_id": 26, "db_id": "farm", "question": "What are the maximum and minimum number of cows across all farms.", "rationale": ["Identify the relevant table: The query requires information about cows, which is found in the 'farm' table.", "Determine the required calculations: We need to find the maximum and minimum number of cows.", "Construct the SQL query: Use the SELECT statement to retrieve the maximum and minimum values of the 'Cows' column from the 'farm' table."], "pred_sql": "SELECT MAX(Cows) AS Max_Cows, MIN(Cows) AS Min_Cows FROM farm;", "gold_sql": "SELECT max(Cows) ,  min(Cows) FROM farm", "source_tables": ["farm"]}
{"sample_id": 27, "db_id": "farm", "question": "Return the maximum and minimum number of cows across all farms.", "rationale": ["Identify the relevant table: The 'farm' table contains the data about cows.", "Determine the required calculations: We need to find the maximum and minimum number of cows.", "Construct the SQL query: Use the MAX() and MIN() functions to get the desired values from the 'Cows' column in the 'farm' table."], "pred_sql": "SELECT MAX(Cows) AS Max_Cows, MIN(Cows) AS Min_Cows FROM farm;", "gold_sql": "SELECT max(Cows) ,  min(Cows) FROM farm", "source_tables": ["farm"]}
{"sample_id": 28, "db_id": "farm", "question": "How many different statuses do cities have?", "rationale": ["Identify the table that contains the relevant data, which is the 'city' table.", "Determine the column that holds the status information, which is the 'Status' column.", "To find the number of different statuses, use the COUNT function combined with DISTINCT to count unique values in the 'Status' column.", "Construct the SQL query to select the count of distinct statuses from the 'city' table."], "pred_sql": "SELECT COUNT(DISTINCT Status) AS Different_Statuses FROM city;", "gold_sql": "SELECT count(DISTINCT Status) FROM city", "source_tables": ["city"]}
{"sample_id": 29, "db_id": "farm", "question": "Count the number of different statuses.", "rationale": ["Identify the table that contains the 'Status' column, which is the 'city' table.", "To count the number of different statuses, we need to use the COUNT function along with DISTINCT to ensure we only count unique statuses.", "The SQL query will select the count of distinct statuses from the 'Status' column in the 'city' table."], "pred_sql": "SELECT COUNT(DISTINCT Status) AS Different_Status_Count FROM city;", "gold_sql": "SELECT count(DISTINCT Status) FROM city", "source_tables": ["city"]}
{"sample_id": 30, "db_id": "farm", "question": "List official names of cities in descending order of population.", "rationale": ["Identify the table that contains the required information: the 'city' table has the 'Official_Name' and 'Population' columns.", "Select the 'Official_Name' column from the 'city' table.", "Order the results by the 'Population' column in descending order to get the cities with the highest population first."], "pred_sql": "SELECT Official_Name FROM city ORDER BY Population DESC;", "gold_sql": "SELECT Official_Name FROM city ORDER BY Population DESC", "source_tables": ["city"]}
{"sample_id": 31, "db_id": "farm", "question": "What are the official names of cities, ordered descending by population?", "rationale": ["Identify the table that contains the required information: the 'city' table has the 'Official_Name' and 'Population' columns.", "Select the 'Official_Name' column from the 'city' table.", "Order the results by the 'Population' column in descending order to get the cities with the highest population first."], "pred_sql": "SELECT Official_Name FROM city ORDER BY Population DESC;", "gold_sql": "SELECT Official_Name FROM city ORDER BY Population DESC", "source_tables": ["city"]}
{"sample_id": 32, "db_id": "farm", "question": "List the official name and status of the city with the largest population.", "rationale": ["Identify the columns needed: Official_Name and Status from the city table.", "Determine the condition to find the city with the largest population: we need to find the maximum value of the Population column.", "Use a subquery to get the maximum population from the city table.", "Select the Official_Name and Status from the city table where the Population matches the maximum value found in the subquery."], "pred_sql": "SELECT Official_Name, Status FROM city WHERE Population = (SELECT MAX(Population) FROM city);", "gold_sql": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1", "source_tables": ["city"]}
{"sample_id": 33, "db_id": "farm", "question": "What is the official name and status of the city with the most residents?", "rationale": ["Identify the relevant table: The 'city' table contains the information about cities, including their official names and populations.", "Determine the required columns: We need the 'Official_Name' and 'Status' of the city.", "Find the city with the most residents: This can be achieved by ordering the results by the 'Population' column in descending order.", "Limit the results to one entry: Since we only want the city with the most residents, we will use 'LIMIT 1' to get the top result."], "pred_sql": "SELECT Official_Name, Status FROM city ORDER BY Population DESC LIMIT 1;", "gold_sql": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1", "source_tables": ["city"]}
{"sample_id": 34, "db_id": "farm", "question": "Show the years and the official names of the host cities of competitions.", "rationale": ["Identify the relevant tables: farm_competition (for competition years and host city IDs) and city (for official names of cities).", "Determine the columns needed: 'Year' from farm_competition and 'Official_Name' from city.", "Establish the relationship between the tables: farm_competition.Host_city_ID is a foreign key that references city.City_ID.", "Construct the SQL query using a JOIN to combine data from both tables based on the foreign key relationship."], "pred_sql": "SELECT farm_competition.Year, city.Official_Name FROM farm_competition JOIN city ON farm_competition.Host_city_ID = city.City_ID;", "gold_sql": "SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID", "source_tables": ["farm_competition", "city"]}
{"sample_id": 35, "db_id": "farm", "question": "Give the years and official names of the cities of each competition.", "rationale": ["Identify the relevant tables: farm_competition and city.", "Determine the columns needed: Year from farm_competition and Official_Name from city.", "Establish the relationship between the tables using the foreign key: farm_competition.Host_city_ID relates to city.City_ID.", "Construct the SQL SELECT statement to retrieve the Year and Official_Name, using a JOIN to combine the data from both tables."], "pred_sql": "SELECT farm_competition.Year, city.Official_Name \nFROM farm_competition \nJOIN city ON farm_competition.Host_city_ID = city.City_ID;", "gold_sql": "SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID", "source_tables": ["farm_competition", "city"]}
{"sample_id": 36, "db_id": "farm", "question": "Show the official names of the cities that have hosted more than one competition.", "rationale": ["Identify the relevant tables: We need to look at the 'city' table for official names and the 'farm_competition' table to find hosted competitions.", "Join the 'city' table with the 'farm_competition' table on the 'City_ID' and 'Host_city_ID' to link cities with their hosted competitions.", "Group the results by 'City_ID' to aggregate the number of competitions hosted by each city.", "Use the HAVING clause to filter the groups to only include cities that have hosted more than one competition."], "pred_sql": "SELECT c.Official_Name \nFROM city c \nJOIN farm_competition fc ON c.City_ID = fc.Host_city_ID \nGROUP BY c.City_ID \nHAVING COUNT(fc.Competition_ID) > 1;", "gold_sql": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1", "source_tables": ["farm_competition", "city"]}
{"sample_id": 37, "db_id": "farm", "question": "What are the official names of cities that have hosted more than one competition?", "rationale": ["Identify the relevant tables: We need to look at the 'city' table for official names and the 'farm_competition' table to find hosted competitions.", "Join the 'city' table with the 'farm_competition' table on the 'Host_city_ID' to link cities with their hosted competitions.", "Group the results by 'City_ID' to aggregate the number of competitions hosted by each city.", "Use the HAVING clause to filter the groups to only include cities that have hosted more than one competition."], "pred_sql": "SELECT c.Official_Name \nFROM city c \nJOIN farm_competition fc ON c.City_ID = fc.Host_city_ID \nGROUP BY c.City_ID \nHAVING COUNT(fc.Competition_ID) > 1;", "gold_sql": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1", "source_tables": ["farm_competition", "city"]}
{"sample_id": 38, "db_id": "farm", "question": "Show the status of the city that has hosted the greatest number of competitions.", "rationale": ["Identify the relevant tables: We need to look at the 'city' table for the status and the 'farm_competition' table to find out how many competitions each city has hosted.", "Join the 'city' table with the 'farm_competition' table on the 'Host_city_ID' to link cities with their hosted competitions.", "Group the results by 'City_ID' to aggregate the number of competitions hosted by each city.", "Count the number of competitions for each city using COUNT(fc.Competition_ID).", "Order the results in descending order to find the city with the greatest number of competitions hosted.", "Limit the results to 1 to get only the top city.", "Select the 'Status' of that city."], "pred_sql": "SELECT c.Status FROM city c JOIN farm_competition fc ON c.City_ID = fc.Host_city_ID GROUP BY c.City_ID ORDER BY COUNT(fc.Competition_ID) DESC LIMIT 1;", "gold_sql": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["farm_competition", "city"]}
{"sample_id": 39, "db_id": "farm", "question": "What is the status of the city that has hosted the most competitions?", "rationale": ["Identify the relevant tables: We need to look at the 'city' table for the status and the 'farm_competition' table to find out which city hosted the most competitions.", "Join the 'city' table with the 'farm_competition' table on the 'Host_city_ID' to link cities with their hosted competitions.", "Group the results by 'City_ID' to aggregate the number of competitions hosted by each city.", "Count the number of competitions for each city using COUNT(fc.Competition_ID).", "Order the results in descending order to find the city with the most competitions.", "Limit the results to 1 to get only the top city.", "Select the 'Status' of that city."], "pred_sql": "SELECT c.Status FROM city c JOIN farm_competition fc ON c.City_ID = fc.Host_city_ID GROUP BY c.City_ID ORDER BY COUNT(fc.Competition_ID) DESC LIMIT 1;", "gold_sql": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["farm_competition", "city"]}
{"sample_id": 40, "db_id": "farm", "question": "Please show the themes of competitions with host cities having populations larger than 1000.", "rationale": ["Identify the relevant tables: farm_competition and city.", "Determine the columns needed: we need the Theme from farm_competition and we need to filter based on the Population from city.", "Establish the relationship between the tables: farm_competition has a foreign key Host_city_ID that references City_ID in the city table.", "Construct the SQL query to select the Theme from farm_competition where the corresponding city's population is greater than 1000."], "pred_sql": "SELECT fc.Theme \nFROM farm_competition fc \nJOIN city c ON fc.Host_city_ID = c.City_ID \nWHERE c.Population > 1000;", "gold_sql": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000", "source_tables": ["farm_competition", "city"]}
{"sample_id": 41, "db_id": "farm", "question": "What are the themes of competitions that have corresponding host cities with more than 1000 residents?", "rationale": ["Identify the relevant tables: farm_competition and city.", "Determine the relationship between the tables: farm_competition has a foreign key Host_city_ID that references City_ID in the city table.", "We need to filter the competitions based on the population of the host cities, specifically those with more than 1000 residents.", "Select the distinct themes from the farm_competition table where the corresponding host city's population exceeds 1000."], "pred_sql": "SELECT DISTINCT fc.Theme \nFROM farm_competition fc \nJOIN city c ON fc.Host_city_ID = c.City_ID \nWHERE c.Population > 1000;", "gold_sql": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000", "source_tables": ["farm_competition", "city"]}
{"sample_id": 42, "db_id": "farm", "question": "Please show the different statuses of cities and the average population of cities with each status.", "rationale": ["Identify the relevant table: The 'city' table contains the necessary information about city statuses and populations.", "Determine the required columns: We need the 'Status' column to group the cities and the 'Population' column to calculate the average.", "Use the AVG() function: This function will help us calculate the average population for each status.", "Group the results: We will use GROUP BY to aggregate the results based on the 'Status' column."], "pred_sql": "SELECT Status, AVG(Population) AS Average_Population FROM city GROUP BY Status;", "gold_sql": "SELECT Status ,  avg(Population) FROM city GROUP BY Status", "source_tables": ["city"]}
{"sample_id": 43, "db_id": "farm", "question": "What are the statuses and average populations of each city?", "rationale": ["Identify the columns needed: 'Status' and 'Population' from the 'city' table.", "To find the average population, we will use the AVG() function on the 'Population' column.", "We need to group the results by 'Status' to get the average population for each status category.", "Construct the SQL query using SELECT to choose the 'Status' and the average of 'Population', and use GROUP BY to group the results by 'Status'."], "pred_sql": "SELECT Status, AVG(Population) AS Average_Population FROM city GROUP BY Status;", "gold_sql": "SELECT Status ,  avg(Population) FROM city GROUP BY Status", "source_tables": ["city"]}
{"sample_id": 44, "db_id": "farm", "question": "Please show the different statuses, ordered by the number of cities that have each.", "rationale": ["Identify the column to be selected: 'Status' from the 'city' table.", "Count the number of cities for each status using COUNT(*) and alias it as 'City_Count'.", "Group the results by 'Status' to aggregate the counts for each unique status.", "Order the results by 'City_Count' in descending order to show the most common statuses first."], "pred_sql": "SELECT Status, COUNT(*) AS City_Count FROM city GROUP BY Status ORDER BY City_Count DESC;", "gold_sql": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC", "source_tables": ["city"]}
{"sample_id": 45, "db_id": "farm", "question": "Return the different statuses of cities, ascending by frequency.", "rationale": ["Identify the column of interest: 'Status' from the 'city' table.", "Count the occurrences of each unique status using COUNT(*) and group the results by 'Status'.", "Order the results in ascending order based on the frequency of each status using ORDER BY Frequency ASC."], "pred_sql": "SELECT Status, COUNT(*) as Frequency FROM city GROUP BY Status ORDER BY Frequency ASC;", "gold_sql": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC", "source_tables": ["city"]}
{"sample_id": 46, "db_id": "farm", "question": "List the most common type of Status across cities.", "rationale": ["Identify the table that contains the 'Status' column, which is the 'city' table.", "To find the most common type of Status, we need to count the occurrences of each Status.", "Use the COUNT() function to count the number of cities for each Status.", "Group the results by the 'Status' column to aggregate the counts for each unique Status.", "Order the results in descending order based on the count to get the most common Status at the top.", "Limit the results to 1 to get only the most common Status."], "pred_sql": "SELECT Status, COUNT(*) as Count FROM city GROUP BY Status ORDER BY Count DESC LIMIT 1;", "gold_sql": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["city"]}
{"sample_id": 47, "db_id": "farm", "question": "What is the most common status across all cities?", "rationale": ["Identify the relevant table: The 'city' table contains the 'Status' column which we need to analyze.", "Count the occurrences of each status: Use COUNT(*) to count how many times each status appears in the 'city' table.", "Group the results by status: Use GROUP BY Status to aggregate the counts for each unique status.", "Order the results: Use ORDER BY Count DESC to sort the statuses by their count in descending order, so the most common status appears first.", "Limit the results to one: Use LIMIT 1 to get only the most common status."], "pred_sql": "SELECT Status, COUNT(*) as Count FROM city GROUP BY Status ORDER BY Count DESC LIMIT 1;", "gold_sql": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["city"]}
{"sample_id": 48, "db_id": "farm", "question": "List the official names of cities that have not held any competition.", "rationale": ["Identify the relevant table: We need to work with the 'city' table to get the official names of cities.", "Determine the condition: We want cities that have not hosted any competition, which means we need to find cities whose IDs are not present in the 'Host_city_ID' column of the 'farm_competition' table.", "Construct the subquery: Create a subquery that selects all 'Host_city_ID' from the 'farm_competition' table.", "Combine the main query with the subquery: Use the NOT IN clause to filter out cities that are in the subquery result from the 'city' table."], "pred_sql": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)", "gold_sql": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)", "source_tables": ["farm_competition", "city"]}
{"sample_id": 49, "db_id": "farm", "question": "What are the official names of cities that have not hosted a farm competition?", "rationale": ["Identify the main table to query from, which is the 'city' table, as we need the official names of cities.", "We need to find cities that have not hosted a farm competition, which means we need to check against the 'farm_competition' table.", "The 'farm_competition' table has a column 'Host_city_ID' that indicates which cities have hosted competitions.", "To find cities that have not hosted any competition, we can use a subquery to select all 'Host_city_ID' from 'farm_competition'.", "We will use the NOT IN clause to filter out cities whose IDs are in the list of 'Host_city_ID' from the subquery.", "Finally, we select the 'Official_Name' from the 'city' table where the 'City_ID' is not in the list of hosted city IDs."], "pred_sql": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)", "gold_sql": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)", "source_tables": ["farm_competition", "city"]}
{"sample_id": 50, "db_id": "farm", "question": "Show the status shared by cities with population bigger than 1500 and smaller than 500.", "rationale": ["Identify the table to query: The 'city' table contains the relevant information about cities.", "Determine the columns needed: We need the 'Status' column to show the status of the cities.", "Set the conditions for the population: We want cities with a population greater than 1500 and less than 500.", "Construct the SQL query: Use a SELECT statement to retrieve the 'Status' from the 'city' table with the specified population conditions."], "pred_sql": "SELECT Status FROM city WHERE Population > 1500 AND Population < 500", "gold_sql": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500", "source_tables": ["city"]}
{"sample_id": 51, "db_id": "farm", "question": "Which statuses correspond to both cities that have a population over 1500 and cities that have a population lower than 500?", "rationale": ["Identify the table that contains the relevant data: the 'city' table.", "Determine the conditions for filtering: cities with a population over 1500 and cities with a population lower than 500.", "Use the 'Population' column to apply the conditions: > 1500 and < 500.", "Since we want the statuses that correspond to both conditions, we will use an OR clause in the WHERE statement.", "Select the distinct statuses to avoid duplicates in the results.", "Construct the SQL query to retrieve the distinct statuses based on the specified population conditions."], "pred_sql": "SELECT DISTINCT Status FROM city WHERE Population > 1500 OR Population < 500;", "gold_sql": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500", "source_tables": ["city"]}
{"sample_id": 52, "db_id": "farm", "question": "Find the official names of cities with population bigger than 1500 or smaller than 500.", "rationale": ["Identify the table that contains the required information: the 'city' table has the 'Official_Name' and 'Population' columns.", "Determine the condition for filtering the cities: we need cities with a population greater than 1500 or less than 500.", "Construct the SQL SELECT statement to retrieve the 'Official_Name' from the 'city' table where the population meets the specified conditions.", "Combine the conditions using the OR operator to ensure that either condition can be satisfied."], "pred_sql": "SELECT Official_Name FROM city WHERE Population > 1500 OR Population < 500;", "gold_sql": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500", "source_tables": ["city"]}
{"sample_id": 53, "db_id": "farm", "question": "What are the official names of cities that have population over 1500 or less than 500?", "rationale": ["Identify the table that contains the required information: the 'city' table has the 'Official_Name' and 'Population' columns.", "Determine the condition for filtering cities based on population: we need cities with a population greater than 1500 or less than 500.", "Construct the SQL SELECT statement to retrieve the 'Official_Name' from the 'city' table where the population meets the specified conditions."], "pred_sql": "SELECT Official_Name FROM city WHERE Population > 1500 OR Population < 500;", "gold_sql": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500", "source_tables": ["city"]}
{"sample_id": 54, "db_id": "farm", "question": "Show the census ranking of cities whose status are not \"Village\".", "rationale": ["Identify the table that contains the required information: the 'city' table has the 'Census_Ranking' and 'Status' columns.", "Determine the condition for filtering: we need cities whose status is not 'Village'.", "Construct the SQL query to select the 'Census_Ranking' from the 'city' table where the 'Status' is not equal to 'Village'."], "pred_sql": "SELECT Census_Ranking FROM city WHERE Status != 'Village';", "gold_sql": "SELECT Census_Ranking FROM city WHERE Status !=  'Village'", "source_tables": ["city"]}
{"sample_id": 55, "db_id": "farm", "question": "What are the census rankings of cities that do not have the status \"Village\"?", "rationale": ["Identify the table to query: The 'city' table contains the relevant information about cities.", "Determine the columns needed: We need the 'Census_Ranking' column.", "Specify the condition: We want cities that do not have the status 'Village'.", "Construct the SQL query: Use a SELECT statement to retrieve 'Census_Ranking' from 'city' where 'Status' is not equal to 'Village'."], "pred_sql": "SELECT Census_Ranking FROM city WHERE Status != 'Village';", "gold_sql": "SELECT Census_Ranking FROM city WHERE Status !=  'Village'", "source_tables": ["city"]}
{"sample_id": 56, "db_id": "student_assessment", "question": "which course has most number of registered students?", "rationale": ["Identify the table that contains the registration information for students in courses, which is the 'Student_Course_Registrations' table.", "We need to count the number of students registered for each course, so we will use the COUNT() function on 'student_id'.", "To group the results by each course, we will use the GROUP BY clause on 'course_id'.", "To find the course with the most registered students, we will order the results in descending order based on the count of students using ORDER BY student_count DESC.", "Finally, we will limit the results to only the top entry using LIMIT 1."], "pred_sql": "SELECT course_id, COUNT(student_id) AS student_count\nFROM Student_Course_Registrations\nGROUP BY course_id\nORDER BY student_count DESC\nLIMIT 1;", "gold_sql": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["courses", "student_course_registrations"]}
{"sample_id": 57, "db_id": "student_assessment", "question": "What is the name of the course with the most registered students?", "rationale": ["Identify the relevant table that contains course information, which is the 'Courses' table.", "Determine the relationship between courses and student registrations, which is through the 'Student_Course_Registrations' table.", "To find the course with the most registered students, we need to count the number of students registered for each course.", "Use a subquery to group the registrations by course_id and count the number of student_id entries for each course.", "Order the results of the subquery in descending order based on the count of students and limit the results to 1 to get the course with the highest count.", "Finally, use the course_id from the subquery to select the corresponding course_name from the 'Courses' table."], "pred_sql": "SELECT course_name FROM Courses WHERE course_id = (SELECT course_id FROM Student_Course_Registrations GROUP BY course_id ORDER BY COUNT(student_id) DESC LIMIT 1);", "gold_sql": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["courses", "student_course_registrations"]}
{"sample_id": 58, "db_id": "student_assessment", "question": "what is id of students who registered some courses but the least number of courses in these students?", "rationale": ["We need to find students who have registered for courses.", "We will use the Student_Course_Registrations table to get the student_id and count the number of courses each student has registered for.", "We will group the results by student_id to get the count of courses for each student.", "To find the least number of courses registered, we will use a subquery that counts the courses for each student and then finds the minimum count.", "Finally, we will select the student_id of those students whose course count matches the minimum count found in the subquery."], "pred_sql": "SELECT student_id FROM Student_Course_Registrations GROUP BY student_id HAVING COUNT(course_id) = (SELECT MIN(course_count) FROM (SELECT COUNT(course_id) AS course_count FROM Student_Course_Registrations GROUP BY student_id))", "gold_sql": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1", "source_tables": ["student_course_registrations"]}
{"sample_id": 59, "db_id": "student_assessment", "question": "What are the ids of the students who registered for some courses but had the least number of courses for all students?", "rationale": ["Identify the relevant table: We need to work with the 'Student_Course_Registrations' table to find students and their course registrations.", "Count the number of courses each student has registered for: We can use the COUNT function and GROUP BY student_id to achieve this.", "Find the minimum number of courses registered by any student: We can use a subquery to find the minimum count of courses from the grouped results.", "Select the student IDs of those who have the minimum course count: We will use the HAVING clause to filter students whose course count matches the minimum found in the previous step."], "pred_sql": "SELECT student_id FROM Student_Course_Registrations GROUP BY student_id HAVING COUNT(course_id) = (SELECT MIN(course_count) FROM (SELECT COUNT(course_id) AS course_count FROM Student_Course_Registrations GROUP BY student_id));", "gold_sql": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1", "source_tables": ["student_course_registrations"]}
{"sample_id": 60, "db_id": "student_assessment", "question": "what are the first name and last name of all candidates?", "rationale": ["Identify the tables needed: We need the 'People' table for first and last names and the 'Candidates' table to filter for candidates.", "Determine the relationship: The 'Candidates' table has a foreign key 'candidate_id' that corresponds to 'person_id' in the 'People' table.", "Construct the SQL query: Use a JOIN to combine 'People' and 'Candidates' on the matching IDs and select the required columns (first_name and last_name)."], "pred_sql": "SELECT P.first_name, P.last_name FROM People P JOIN Candidates C ON P.person_id = C.candidate_id;", "gold_sql": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id", "source_tables": ["candidates", "people"]}
{"sample_id": 61, "db_id": "student_assessment", "question": "What are the first and last names of all the candidates?", "rationale": ["Identify the tables needed: We need to retrieve first and last names of candidates, so we will use the 'People' and 'Candidates' tables.", "Determine the columns to select: We need 'first_name' and 'last_name' from the 'People' table.", "Establish the relationship between tables: The 'Candidates' table has a foreign key 'candidate_id' that corresponds to 'person_id' in the 'People' table.", "Construct the SQL query: Use a JOIN to combine 'People' and 'Candidates' on the matching IDs and select the required columns."], "pred_sql": "SELECT P.first_name, P.last_name FROM People P JOIN Candidates C ON P.person_id = C.candidate_id;", "gold_sql": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id", "source_tables": ["candidates", "people"]}
{"sample_id": 62, "db_id": "student_assessment", "question": "List the id of students who never attends courses?", "rationale": ["Identify the table that contains student information, which is the 'Students' table.", "Determine the relationship between students and course attendance, which is represented in the 'Student_Course_Attendance' table.", "To find students who never attended any courses, we can use a LEFT JOIN between the 'Students' table and the 'Student_Course_Attendance' table.", "In the LEFT JOIN, we will check for cases where there is no matching record in the 'Student_Course_Attendance' table, which indicates that the student has never attended a course.", "Select the 'student_id' from the 'Students' table where the corresponding 'course_id' in the 'Student_Course_Attendance' table is NULL."], "pred_sql": "SELECT s.student_id FROM Students s LEFT JOIN Student_Course_Attendance a ON s.student_id = a.student_id WHERE a.course_id IS NULL;", "gold_sql": "SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)", "source_tables": ["student_course_attendance", "students"]}
{"sample_id": 63, "db_id": "student_assessment", "question": "What are the  ids of every student who has never attended a course?", "rationale": ["We need to find students who have never attended a course.", "To do this, we will use a LEFT JOIN between the Students table and the Student_Course_Attendance table on the student_id column.", "The LEFT JOIN will include all students from the Students table and match them with any records in the Student_Course_Attendance table.", "For students who have never attended a course, the corresponding records in the Student_Course_Attendance table will be NULL.", "We can filter these results by checking where the course_id in the Student_Course_Attendance table is NULL.", "Finally, we will select the student_id from the Students table."], "pred_sql": "SELECT s.student_id FROM Students s LEFT JOIN Student_Course_Attendance a ON s.student_id = a.student_id WHERE a.course_id IS NULL;", "gold_sql": "SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)", "source_tables": ["student_course_attendance", "students"]}
{"sample_id": 64, "db_id": "student_assessment", "question": "List the id of students who attended some courses?", "rationale": ["Identify the relevant table that contains information about student attendance, which is the 'Student_Course_Attendance' table.", "Determine the column that holds the student identifiers, which is 'student_id'.", "Since we want to list the IDs of students who attended some courses, we will use the SELECT statement to retrieve the 'student_id' from the 'Student_Course_Attendance' table.", "To ensure that we only get unique student IDs, we will use the DISTINCT keyword in the query."], "pred_sql": "SELECT DISTINCT student_id FROM Student_Course_Attendance;", "gold_sql": "SELECT student_id FROM student_course_attendance", "source_tables": ["student_course_attendance"]}
{"sample_id": 65, "db_id": "student_assessment", "question": "What are the ids of all students who have attended at least one course?", "rationale": ["Identify the relevant table that contains information about student attendance, which is 'Student_Course_Attendance'.", "Determine the column that holds the unique identifier for students, which is 'student_id'.", "Since we want the ids of students who have attended at least one course, we will select the 'student_id' from the 'Student_Course_Attendance' table.", "Use the DISTINCT keyword to ensure that each student id is listed only once, even if they have attended multiple courses."], "pred_sql": "SELECT DISTINCT student_id FROM Student_Course_Attendance;", "gold_sql": "SELECT student_id FROM student_course_attendance", "source_tables": ["student_course_attendance"]}
{"sample_id": 66, "db_id": "student_assessment", "question": "What are the ids of all students for courses and what are the names of those courses?", "rationale": ["Identify the tables involved: Students, Courses, and Student_Course_Registrations.", "We need to retrieve student IDs and course names, so we will select 'student_id' from the Students table and 'course_name' from the Courses table.", "To link students with their courses, we will use the Student_Course_Registrations table, which connects students to courses.", "We will perform a JOIN operation between Students and Student_Course_Registrations on 'student_id'.", "Next, we will perform another JOIN operation between Student_Course_Registrations and Courses on 'course_id'.", "Finally, we will select the required fields: Students.student_id and Courses.course_name."], "pred_sql": "SELECT Students.student_id, Courses.course_name FROM Students JOIN Student_Course_Registrations ON Students.student_id = Student_Course_Registrations.student_id JOIN Courses ON Student_Course_Registrations.course_id = Courses.course_id;", "gold_sql": "SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id", "source_tables": ["courses", "student_course_registrations"]}
{"sample_id": 67, "db_id": "student_assessment", "question": "What is detail of the student who most recently registered course?", "rationale": ["Identify the relevant tables: Students and Student_Course_Registrations are needed to get student details and their registration information.", "Determine the fields to select: We need the student_id, student_details from Students, and registration_date from Student_Course_Registrations.", "Join the Students table with the Student_Course_Registrations table on student_id to link students with their course registrations.", "Sort the results by registration_date in descending order to get the most recent registration at the top.", "Limit the results to 1 to get only the most recent student registration."], "pred_sql": "SELECT s.student_id, s.student_details, scr.registration_date \nFROM Students s \nJOIN Student_Course_Registrations scr ON s.student_id = scr.student_id \nORDER BY scr.registration_date DESC \nLIMIT 1;", "gold_sql": "SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1", "source_tables": ["student_course_registrations", "students"]}
{"sample_id": 68, "db_id": "student_assessment", "question": "What details do we have on the students who registered for courses most recently?", "rationale": ["Identify the relevant tables: Students, Student_Course_Registrations, and Courses are needed to get student details and their course registrations.", "Select the necessary columns: We need student_id and student_details from Students, registration_date from Student_Course_Registrations, and course_name and course_description from Courses.", "Join the tables: Use JOIN to connect Students with Student_Course_Registrations on student_id, and then join with Courses on course_id to get course details.", "Order the results: To find the most recent registrations, order the results by registration_date in descending order.", "Limit the results: Use LIMIT to restrict the output to the most recent 10 registrations."], "pred_sql": "SELECT s.student_id, s.student_details, scr.registration_date, c.course_name, c.course_description \nFROM Students s \nJOIN Student_Course_Registrations scr ON s.student_id = scr.student_id \nJOIN Courses c ON scr.course_id = c.course_id \nORDER BY scr.registration_date DESC \nLIMIT 10;", "gold_sql": "SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1", "source_tables": ["student_course_registrations", "students"]}
{"sample_id": 69, "db_id": "student_assessment", "question": "How many students attend course English?", "rationale": ["Identify the relevant tables: We need to find out how many students attend a specific course, which involves the 'Student_Course_Attendance', 'Student_Course_Registrations', and 'Courses' tables.", "Count the distinct students: We want to count the number of unique students attending the course, so we will use COUNT(DISTINCT Student_Course_Attendance.student_id).", "Join the tables: We need to join 'Student_Course_Attendance' with 'Student_Course_Registrations' to link students with their registered courses, and then join with 'Courses' to filter by course name.", "Filter by course name: We will add a WHERE clause to filter the results to only include students attending the course named 'English'."], "pred_sql": "SELECT COUNT(DISTINCT Student_Course_Attendance.student_id) AS student_count\nFROM Student_Course_Attendance\nJOIN Student_Course_Registrations ON Student_Course_Attendance.student_id = Student_Course_Registrations.student_id\nJOIN Courses ON Student_Course_Registrations.course_id = Courses.course_id\nWHERE Courses.course_name = 'English';", "gold_sql": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = 'English'", "source_tables": ["courses", "student_course_attendance"]}
{"sample_id": 70, "db_id": "student_assessment", "question": "How many students are attending English courses?", "rationale": ["Identify the relevant tables: We need to find students attending courses, so we will use the Student_Course_Attendance and Student_Course_Registrations tables, along with the Courses table to filter by course name.", "Count the distinct students: We want to count how many unique students are attending English courses, so we will use COUNT(DISTINCT scr.student_id).", "Join the tables: We will join Student_Course_Attendance with Student_Course_Registrations on student_id and course_id to link attendance records with registration records. Then, we will join with the Courses table to filter for English courses.", "Filter for English courses: We will use a WHERE clause to filter the courses by name, specifically looking for courses that include 'English' in their name."], "pred_sql": "SELECT COUNT(DISTINCT scr.student_id) AS number_of_students\nFROM Student_Course_Attendance AS sca\nJOIN Student_Course_Registrations AS scr ON sca.student_id = scr.student_id AND sca.course_id = scr.course_id\nJOIN Courses AS c ON scr.course_id = c.course_id\nWHERE c.course_name LIKE '%English%';", "gold_sql": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = 'English'", "source_tables": ["courses", "student_course_attendance"]}
{"sample_id": 71, "db_id": "student_assessment", "question": "How many courses do the student whose id is 171 attend?", "rationale": ["Identify the relevant table: We need to find out how many courses a specific student attends, which involves the 'Student_Course_Attendance' table.", "Determine the condition: The student we are interested in has an ID of '171'.", "Construct the SQL query: We will use the COUNT() function to count the number of records in the 'Student_Course_Attendance' table where the 'student_id' matches '171'.", "Select the count as 'course_count' for clarity in the result."], "pred_sql": "SELECT COUNT(*) AS course_count FROM Student_Course_Attendance WHERE student_id = '171';", "gold_sql": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171", "source_tables": ["courses", "student_course_attendance"]}
{"sample_id": 72, "db_id": "student_assessment", "question": "How many courses does the student with id 171 actually attend?", "rationale": ["Identify the relevant table: We need to find out how many courses a specific student attends, which involves the 'Student_Course_Attendance' table.", "Determine the condition: We are interested in the student with id '171'.", "Count the distinct courses: We will use the COUNT function to count the number of distinct course_ids associated with the student_id '171'.", "Construct the SQL query: Combine the SELECT statement with the COUNT function and the WHERE clause to filter by student_id."], "pred_sql": "SELECT COUNT(DISTINCT course_id) AS course_count FROM Student_Course_Attendance WHERE student_id = '171';", "gold_sql": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171", "source_tables": ["courses", "student_course_attendance"]}
{"sample_id": 73, "db_id": "student_assessment", "question": "Find id of the candidate whose email is stanley.monahan@example.org?", "rationale": ["Identify the relevant table that contains the candidate information, which is the 'Candidates' table.", "Determine that the 'candidate_id' in the 'Candidates' table corresponds to the 'person_id' in the 'People' table.", "Formulate a subquery to find the 'person_id' from the 'People' table where the 'email_address' matches 'stanley.monahan@example.org'.", "Use the result of the subquery to filter the 'candidate_id' in the 'Candidates' table."], "pred_sql": "SELECT candidate_id FROM Candidates WHERE candidate_id IN (SELECT person_id FROM People WHERE email_address = 'stanley.monahan@example.org');", "gold_sql": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = 'stanley.monahan@example.org'", "source_tables": ["candidates", "people"]}
{"sample_id": 74, "db_id": "student_assessment", "question": "What is the id of the candidate whose email is stanley.monahan@example.org?", "rationale": ["Identify the relevant table for candidates, which is the 'Candidates' table.", "Determine that we need to find the 'candidate_id' based on the email address provided.", "The email address is stored in the 'People' table, so we need to first find the 'person_id' associated with the given email.", "Use a subquery to select the 'person_id' from the 'People' table where the 'email_address' matches 'stanley.monahan@example.org'.", "Finally, use this 'person_id' to select the corresponding 'candidate_id' from the 'Candidates' table."], "pred_sql": "SELECT candidate_id FROM Candidates WHERE candidate_id = (SELECT person_id FROM People WHERE email_address = 'stanley.monahan@example.org');", "gold_sql": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = 'stanley.monahan@example.org'", "source_tables": ["candidates", "people"]}
{"sample_id": 75, "db_id": "student_assessment", "question": "Find id of the candidate who most recently accessed the course?", "rationale": ["Identify the relevant tables: Candidates, Candidate_Assessments, Student_Course_Registrations, and Student_Course_Attendance.", "Join the Candidates table with Candidate_Assessments to get the assessment details for each candidate.", "Join the Student_Course_Registrations table to link candidates to the courses they registered for.", "Join the Student_Course_Attendance table to find out which candidates attended the courses.", "Order the results by the assessment date in descending order to get the most recent access.", "Limit the results to 1 to get only the most recent candidate who accessed the course."], "pred_sql": "SELECT DISTINCT c.candidate_id FROM Candidates c JOIN Candidate_Assessments ca ON c.candidate_id = ca.candidate_id JOIN Student_Course_Registrations scr ON c.candidate_id = scr.student_id JOIN Student_Course_Attendance sca ON scr.student_id = sca.student_id AND scr.course_id = sca.course_id ORDER BY ca.assessment_date DESC LIMIT 1;", "gold_sql": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1", "source_tables": ["candidate_assessments"]}
{"sample_id": 76, "db_id": "student_assessment", "question": "What is the id of the candidate who most recently accessed the course?", "rationale": ["Identify the relevant tables: Candidates, Student_Course_Attendance, and Student_Course_Registrations.", "We need to find the candidate who accessed a course, which implies a relationship between candidates and course attendance.", "Join the Candidates table with the Student_Course_Attendance table on the candidate_id and student_id respectively to link candidates with their course attendance.", "To ensure we are considering only those candidates who have accessed courses, we also join with the Student_Course_Registrations table to confirm their registration.", "Order the results by the date_of_attendance in descending order to get the most recent attendance first.", "Limit the results to 1 to get only the most recent candidate who accessed a course."], "pred_sql": "SELECT c.candidate_id FROM Candidates c JOIN Student_Course_Attendance a ON c.candidate_id = a.student_id JOIN Student_Course_Registrations r ON a.student_id = r.student_id ORDER BY a.date_of_attendance DESC LIMIT 1;", "gold_sql": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1", "source_tables": ["candidate_assessments"]}
{"sample_id": 77, "db_id": "student_assessment", "question": "What is detail of the student who registered the most number of courses?", "rationale": ["Identify the relevant tables: Students and Student_Course_Registrations.", "We need to count the number of courses each student has registered for, so we will join the Students table with the Student_Course_Registrations table on the student_id.", "Use COUNT() to count the number of course registrations for each student.", "Group the results by student_id and student_details to get the count per student.", "Order the results by the count of courses in descending order to find the student with the most registrations.", "Limit the results to 1 to get only the student with the highest count."], "pred_sql": "SELECT s.student_id, s.student_details, COUNT(scr.course_id) AS course_count\nFROM Students s\nJOIN Student_Course_Registrations scr ON s.student_id = scr.student_id\nGROUP BY s.student_id, s.student_details\nORDER BY course_count DESC\nLIMIT 1;", "gold_sql": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student_course_registrations", "students"]}
{"sample_id": 78, "db_id": "student_assessment", "question": "What are the details of the student who registered for the most number of courses?", "rationale": ["Identify the relevant tables: Students and Student_Course_Registrations.", "We need to join these tables on the student_id to get the details of students along with their course registrations.", "Count the number of courses each student has registered for using COUNT() function.", "Group the results by student_id and student_details to aggregate the course counts per student.", "Order the results in descending order based on the course count to find the student with the most registrations.", "Limit the results to 1 to get only the student with the highest course registration count."], "pred_sql": "SELECT s.student_id, s.student_details, COUNT(scr.course_id) AS course_count\nFROM Students s\nJOIN Student_Course_Registrations scr ON s.student_id = scr.student_id\nGROUP BY s.student_id, s.student_details\nORDER BY course_count DESC\nLIMIT 1;", "gold_sql": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student_course_registrations", "students"]}
{"sample_id": 79, "db_id": "student_assessment", "question": "List the id of students who registered some courses and the number of their registered courses?", "rationale": ["Identify the relevant table: The 'Student_Course_Registrations' table contains the information about students and their registered courses.", "Select the student ID: We need to retrieve the 'student_id' from the 'Student_Course_Registrations' table.", "Count the number of registered courses: Use the COUNT() function to count the number of 'course_id' entries for each student.", "Group the results by student ID: Use GROUP BY to aggregate the results for each student, allowing us to count the number of courses they are registered for."], "pred_sql": "SELECT sr.student_id, COUNT(sr.course_id) AS registered_courses_count\nFROM Student_Course_Registrations sr\nGROUP BY sr.student_id;", "gold_sql": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id", "source_tables": ["student_course_registrations", "students"]}
{"sample_id": 80, "db_id": "student_assessment", "question": "For every student who is registered for some course, how many courses are they registered for?", "rationale": ["Identify the relevant tables: Students and Student_Course_Registrations.", "We need to count the number of courses each student is registered for, so we will use the COUNT() function.", "Join the Students table with the Student_Course_Registrations table on the student_id field to link students with their course registrations.", "Group the results by student_id to get the count of courses for each student."], "pred_sql": "SELECT s.student_id, COUNT(scr.course_id) AS course_count\nFROM Students s\nJOIN Student_Course_Registrations scr ON s.student_id = scr.student_id\nGROUP BY s.student_id;", "gold_sql": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id", "source_tables": ["student_course_registrations", "students"]}
{"sample_id": 81, "db_id": "student_assessment", "question": "How many registed students do each course have? List course name and the number of their registered students?", "rationale": ["Identify the tables involved: Courses and Student_Course_Registrations.", "We need to count the number of registered students for each course, so we will use the COUNT() function.", "To get the course names along with the count of registered students, we will select the course_name from the Courses table and the count of student_id from the Student_Course_Registrations table.", "We will perform a LEFT JOIN between Courses and Student_Course_Registrations on the course_id to ensure we get all courses even if they have no registered students.", "Finally, we will group the results by course_name to get the count of registered students for each course."], "pred_sql": "SELECT Courses.course_name, COUNT(Student_Course_Registrations.student_id) AS registered_students_count\nFROM Courses\nLEFT JOIN Student_Course_Registrations ON Courses.course_id = Student_Course_Registrations.course_id\nGROUP BY Courses.course_name;", "gold_sql": "SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id", "source_tables": ["courses", "student_course_registrations", "students"]}
{"sample_id": 82, "db_id": "student_assessment", "question": "For each course id, how many students are registered and what are the course names?", "rationale": ["Identify the tables needed: Courses and Student_Course_Registrations.", "We need to count the number of students registered for each course, so we will use COUNT() function on the student_id from Student_Course_Registrations.", "We need to retrieve the course_id and course_name from the Courses table.", "To combine data from both tables, we will use a LEFT JOIN on the course_id.", "We will group the results by course_id and course_name to get the count of students for each course."], "pred_sql": "SELECT Courses.course_id, COUNT(Student_Course_Registrations.student_id) AS student_count, Courses.course_name FROM Courses LEFT JOIN Student_Course_Registrations ON Courses.course_id = Student_Course_Registrations.course_id GROUP BY Courses.course_id, Courses.course_name;", "gold_sql": "SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id", "source_tables": ["courses", "student_course_registrations", "students"]}
{"sample_id": 83, "db_id": "student_assessment", "question": "Find id of candidates whose assessment code is \"Pass\"?", "rationale": ["Identify the relevant table: Candidate_Assessments contains the assessment outcomes for candidates.", "Determine the specific column needed: We need the candidate_id of candidates with a specific assessment outcome.", "Filter the results: We want to find candidates whose assessment outcome code is 'Pass'.", "Construct the SQL query: Use SELECT to retrieve candidate_id from Candidate_Assessments where asessment_outcome_code equals 'Pass'."], "pred_sql": "SELECT candidate_id FROM Candidate_Assessments WHERE asessment_outcome_code = 'Pass';", "gold_sql": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = 'Pass'", "source_tables": ["candidate_assessments"]}
{"sample_id": 84, "db_id": "student_assessment", "question": "What are the ids of the candidates that have an outcome code of Pass?", "rationale": ["Identify the relevant table: Candidate_Assessments contains the candidate_id and the assessment outcome code.", "Determine the condition: We need to filter the results where the asessment_outcome_code is 'Pass'.", "Construct the SQL query to select candidate_id from Candidate_Assessments with the specified condition."], "pred_sql": "SELECT candidate_id FROM Candidate_Assessments WHERE asessment_outcome_code = 'Pass';", "gold_sql": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = 'Pass'", "source_tables": ["candidate_assessments"]}
{"sample_id": 85, "db_id": "student_assessment", "question": "Find the cell mobile number of the candidates whose assessment code is \"Fail\"?", "rationale": ["Identify the relevant tables: People, Candidates, and Candidate_Assessments.", "We need to find the cell mobile number, which is in the People table.", "Candidates table links candidates to people using candidate_id.", "Candidate_Assessments table contains the assessment outcomes linked to candidates.", "Join the People table with Candidates on person_id and candidate_id.", "Join the Candidates table with Candidate_Assessments on candidate_id.", "Filter the results where the assessment outcome code is 'Fail'.", "Select the cell_mobile_number from the resulting joined tables."], "pred_sql": "SELECT P.cell_mobile_number FROM People P JOIN Candidates C ON P.person_id = C.candidate_id JOIN Candidate_Assessments CA ON C.candidate_id = CA.candidate_id WHERE CA.asessment_outcome_code = 'Fail';", "gold_sql": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = 'Fail'", "source_tables": ["candidates", "candidate_assessments", "people"]}
{"sample_id": 86, "db_id": "student_assessment", "question": "What are the cell phone numbers of the candidates that received an assessment code of \"Fail\"?", "rationale": ["Identify the relevant tables: People, Candidates, and Candidate_Assessments.", "We need to retrieve the cell phone numbers, which are stored in the People table under the column 'cell_mobile_number'.", "Candidates are linked to People through the 'candidate_id', which corresponds to 'person_id' in the People table.", "Candidate assessments are linked to Candidates through the 'candidate_id' in the Candidate_Assessments table.", "We need to filter the results to only include candidates who received an assessment outcome code of 'Fail'.", "Construct the SQL query using JOINs to connect the tables and apply the necessary WHERE clause for filtering."], "pred_sql": "SELECT P.cell_mobile_number \nFROM People P \nJOIN Candidates C ON P.person_id = C.candidate_id \nJOIN Candidate_Assessments CA ON C.candidate_id = CA.candidate_id \nWHERE CA.asessment_outcome_code = 'Fail';", "gold_sql": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = 'Fail'", "source_tables": ["candidates", "candidate_assessments", "people"]}
{"sample_id": 87, "db_id": "student_assessment", "question": "What are the id of students who registered course 301?", "rationale": ["Identify the relevant table: Student_Course_Registrations contains the information about student registrations for courses.", "Determine the columns needed: We need the student_id of students who registered for a specific course.", "Specify the course of interest: The course_id we are interested in is '301'.", "Construct the SQL query to select student_id from Student_Course_Registrations where course_id is '301'."], "pred_sql": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = '301';", "gold_sql": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301", "source_tables": ["student_course_attendance"]}
{"sample_id": 88, "db_id": "student_assessment", "question": "What are the ids of the students who registered for course 301?", "rationale": ["Identify the relevant table: Student_Course_Registrations, which contains the relationship between students and courses.", "Determine the columns needed: We need the 'student_id' column to get the IDs of the students.", "Specify the condition: We want to filter the results to only include registrations for course ID '301'.", "Construct the SQL query using SELECT to retrieve 'student_id' from Student_Course_Registrations where course_id is '301'."], "pred_sql": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = '301';", "gold_sql": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301", "source_tables": ["student_course_attendance"]}
{"sample_id": 89, "db_id": "student_assessment", "question": "What is the id of the student who most recently registered course 301?", "rationale": ["Identify the relevant table: Student_Course_Registrations, which contains information about student registrations for courses.", "Filter the records to only include those where the course_id is '301'.", "Order the results by registration_date in descending order to get the most recent registration first.", "Limit the results to 1 to get only the most recent student registration for the specified course."], "pred_sql": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = '301' ORDER BY registration_date DESC LIMIT 1;", "gold_sql": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1", "source_tables": ["student_course_attendance"]}
{"sample_id": 90, "db_id": "student_assessment", "question": "What are the ids of the students who registered for course 301 most recently?", "rationale": ["Identify the relevant table: Student_Course_Registrations, which contains information about student registrations for courses.", "Determine the specific course of interest: course_id = '301'.", "To find the most recent registration, we need to order the results by the registration_date in descending order.", "Limit the results to only the most recent entry by using LIMIT 1."], "pred_sql": "SELECT student_id FROM Student_Course_Registrations WHERE course_id = '301' ORDER BY registration_date DESC LIMIT 1;", "gold_sql": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1", "source_tables": ["student_course_attendance"]}
{"sample_id": 91, "db_id": "student_assessment", "question": "Find distinct cities of addresses of people?", "rationale": ["Identify the relevant tables: Addresses and People_Addresses, as well as People to link addresses to people.", "We need to retrieve distinct cities, so we will use the DISTINCT keyword in our SQL query.", "Join the Addresses table with People_Addresses on address_id to associate addresses with people.", "Join the People_Addresses table with People on person_id to ensure we are considering addresses of people.", "Select the city column from the Addresses table to get the distinct cities."], "pred_sql": "SELECT DISTINCT A.city FROM Addresses A JOIN People_Addresses PA ON A.address_id = PA.address_id JOIN People P ON PA.person_id = P.person_id;", "gold_sql": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id", "source_tables": ["addresses", "people_addresses"]}
{"sample_id": 92, "db_id": "student_assessment", "question": "What are the different cities where people live?", "rationale": ["Identify the relevant table that contains city information, which is the Addresses table.", "Determine that we need to select distinct cities to avoid duplicates.", "Construct the SQL query to select the distinct city column from the Addresses table."], "pred_sql": "SELECT DISTINCT city FROM Addresses;", "gold_sql": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id", "source_tables": ["addresses", "people_addresses"]}
{"sample_id": 93, "db_id": "student_assessment", "question": "Find distinct cities of address of students?", "rationale": ["Identify the relevant tables: Addresses, People, and Students.", "We need to find distinct cities, so we will use the SELECT DISTINCT statement on the city column from the Addresses table.", "To link the Addresses to Students, we need to join the People table because it contains the person_id that connects to the Students table.", "The join conditions will be: Addresses to People on address_id and person_id, and People to Students on person_id and student_id.", "Construct the SQL query using the identified tables and join conditions."], "pred_sql": "SELECT DISTINCT a.city FROM Addresses a JOIN People p ON a.address_id = p.person_id JOIN Students s ON p.person_id = s.student_id;", "gold_sql": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id", "source_tables": ["addresses", "people_addresses", "students"]}
{"sample_id": 94, "db_id": "student_assessment", "question": "What are the different cities where students live?", "rationale": ["Identify the relevant tables: We need to find cities where students live, which involves the Addresses and Students tables.", "Determine the relationships: Students are linked to addresses through the People_Addresses table, which connects the People table (where student information is stored) to the Addresses table.", "Select the distinct cities: We want to retrieve unique city names, so we will use the DISTINCT keyword in our SQL query.", "Construct the SQL query: We will join the Addresses table with the People_Addresses table on address_id and then join with the Students table on person_id to filter the results to only those related to students."], "pred_sql": "SELECT DISTINCT a.city FROM Addresses a JOIN People_Addresses pa ON a.address_id = pa.address_id JOIN Students s ON pa.person_id = s.student_id;", "gold_sql": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id", "source_tables": ["addresses", "people_addresses", "students"]}
{"sample_id": 95, "db_id": "student_assessment", "question": "List the names of courses in alphabetical order?", "rationale": ["Identify the table that contains the course names, which is the 'Courses' table.", "Select the 'course_name' column from the 'Courses' table.", "Use the ORDER BY clause to sort the results in alphabetical order (ASC) based on the 'course_name' column."], "pred_sql": "SELECT course_name FROM Courses ORDER BY course_name ASC;", "gold_sql": "SELECT course_name FROM courses ORDER BY course_name", "source_tables": ["courses"]}
{"sample_id": 96, "db_id": "student_assessment", "question": "What are the names of the courses in alphabetical order?", "rationale": ["Identify the table that contains course information, which is the 'Courses' table.", "Determine the specific column needed to retrieve the names of the courses, which is 'course_name'.", "Specify that the results should be ordered alphabetically, which can be achieved using the 'ORDER BY' clause with 'ASC' for ascending order.", "Construct the SQL query to select 'course_name' from 'Courses' and order the results alphabetically."], "pred_sql": "SELECT course_name FROM Courses ORDER BY course_name ASC;", "gold_sql": "SELECT course_name FROM courses ORDER BY course_name", "source_tables": ["courses"]}
{"sample_id": 97, "db_id": "student_assessment", "question": "List the first names of people in alphabetical order?", "rationale": ["Identify the table that contains the required data: the 'People' table has the 'first_name' column.", "Determine the specific data to retrieve: we need to list the 'first_name' of people.", "Specify the order of the results: the request asks for the names to be in alphabetical order, which can be achieved using the ORDER BY clause.", "Construct the SQL query to select the 'first_name' from the 'People' table and order the results in ascending order."], "pred_sql": "SELECT first_name FROM People ORDER BY first_name ASC;", "gold_sql": "SELECT first_name FROM people ORDER BY first_name", "source_tables": ["people"]}
{"sample_id": 98, "db_id": "student_assessment", "question": "What are the first names of the people in alphabetical order?", "rationale": ["Identify the table that contains the required information: the 'People' table has the 'first_name' column.", "Determine the specific data to retrieve: we need to select the 'first_name' column.", "Specify the order of the results: the query should order the results alphabetically, which can be done using 'ORDER BY first_name ASC'.", "Combine these elements into a complete SQL query."], "pred_sql": "SELECT first_name FROM People ORDER BY first_name ASC;", "gold_sql": "SELECT first_name FROM people ORDER BY first_name", "source_tables": ["people"]}
{"sample_id": 99, "db_id": "student_assessment", "question": "What are the id of students who registered courses or attended courses?", "rationale": ["Identify the relevant tables: Student_Course_Registrations and Student_Course_Attendance, as they both contain student_id.", "Use SELECT DISTINCT to ensure that we get unique student_ids from both tables.", "Combine the results from both tables using UNION to get a single list of student_ids who either registered for or attended courses."], "pred_sql": "SELECT DISTINCT student_id FROM Student_Course_Registrations UNION SELECT DISTINCT student_id FROM Student_Course_Attendance;", "gold_sql": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance", "source_tables": ["student_course_attendance", "student_course_registrations"]}
{"sample_id": 100, "db_id": "student_assessment", "question": "What are the ids of the students who either registered or attended a course?", "rationale": ["Identify the relevant tables: Student_Course_Registrations and Student_Course_Attendance, as they both contain student_id.", "Use SELECT DISTINCT to ensure that we get unique student_ids from both tables.", "Combine the results from both tables using UNION to get a single list of student_ids who either registered or attended a course."], "pred_sql": "SELECT DISTINCT student_id FROM Student_Course_Registrations UNION SELECT DISTINCT student_id FROM Student_Course_Attendance;", "gold_sql": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance", "source_tables": ["student_course_attendance", "student_course_registrations"]}
{"sample_id": 101, "db_id": "student_assessment", "question": "Find the id of courses which are registered or attended by student whose id is 121?", "rationale": ["Identify the tables that contain information about course registrations and attendance: Student_Course_Registrations and Student_Course_Attendance.", "Determine the relevant column to filter by student ID, which is 'student_id' in both tables.", "Construct a query to select 'course_id' from Student_Course_Registrations where 'student_id' is '121'.", "Construct a second query to select 'course_id' from Student_Course_Attendance where 'student_id' is '121'.", "Use UNION to combine the results of both queries to ensure that we get unique course IDs from both registrations and attendance."], "pred_sql": "SELECT DISTINCT course_id FROM Student_Course_Registrations WHERE student_id = '121' UNION SELECT DISTINCT course_id FROM Student_Course_Attendance WHERE student_id = '121';", "gold_sql": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121", "source_tables": ["student_course_attendance", "student_course_registrations"]}
{"sample_id": 102, "db_id": "student_assessment", "question": "What are the ids of the courses that are registered or attended by the student whose id is 121?", "rationale": ["Identify the tables that contain information about course registrations and attendance: 'Student_Course_Registrations' and 'Student_Course_Attendance'.", "Determine the relevant column for filtering: 'student_id' is the key to identify the student in both tables.", "Construct a query to select 'course_id' from 'Student_Course_Registrations' where 'student_id' is '121'.", "Construct a second query to select 'course_id' from 'Student_Course_Attendance' where 'student_id' is '121'.", "Use UNION to combine the results of both queries to ensure that we get unique course IDs from both registrations and attendance."], "pred_sql": "SELECT DISTINCT course_id FROM Student_Course_Registrations WHERE student_id = '121' UNION SELECT DISTINCT course_id FROM Student_Course_Attendance WHERE student_id = '121';", "gold_sql": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121", "source_tables": ["student_course_attendance", "student_course_registrations"]}
{"sample_id": 103, "db_id": "student_assessment", "question": "What are all info of students who registered courses but not attended courses?", "rationale": ["Identify the relevant tables: Students, Student_Course_Registrations, and Student_Course_Attendance.", "We need to find students who have registered for courses but have not attended any courses.", "Join the Students table with the Student_Course_Registrations table to get the list of registered students and their courses.", "Use a LEFT JOIN to connect the Student_Course_Registrations with Student_Course_Attendance to find out if they attended the courses.", "Filter the results where the attendance record is NULL, indicating that the student did not attend the registered courses."], "pred_sql": "SELECT s.student_id, s.student_details \nFROM Students s \nJOIN Student_Course_Registrations scr ON s.student_id = scr.student_id \nLEFT JOIN Student_Course_Attendance sca ON scr.student_id = sca.student_id AND scr.course_id = sca.course_id \nWHERE sca.student_id IS NULL;", "gold_sql": "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)", "source_tables": ["student_course_attendance", "student_course_registrations"]}
{"sample_id": 104, "db_id": "student_assessment", "question": "What are all details of the students who registered but did not attend any course?", "rationale": ["Identify the relevant tables: Students, Student_Course_Registrations, and Student_Course_Attendance.", "We need to find students who have registered for courses but have not attended any. This requires a LEFT JOIN between Students and Student_Course_Registrations to get all students who registered.", "Next, we perform another LEFT JOIN with Student_Course_Attendance to check for attendance records.", "In the WHERE clause, we ensure that we only include students who have registered (scr.student_id IS NOT NULL) and have no attendance records (sca.student_id IS NULL).", "Select the necessary details from the Students table, specifically student_id and student_details."], "pred_sql": "SELECT s.student_id, s.student_details \nFROM Students s \nLEFT JOIN Student_Course_Registrations scr ON s.student_id = scr.student_id \nLEFT JOIN Student_Course_Attendance sca ON scr.student_id = sca.student_id AND scr.course_id = sca.course_id \nWHERE scr.student_id IS NOT NULL AND sca.student_id IS NULL;", "gold_sql": "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)", "source_tables": ["student_course_attendance", "student_course_registrations"]}
{"sample_id": 105, "db_id": "student_assessment", "question": "List the id of students who registered course statistics in the order of registration date.", "rationale": ["Identify the relevant tables: We need to look at the 'Student_Course_Registrations' table to find student registrations and the 'Courses' table to filter by course name.", "Join the 'Student_Course_Registrations' table with the 'Courses' table on the course_id to access course names.", "Filter the results to only include registrations for the course named 'Statistics'.", "Select the 'student_id' from the filtered results.", "Order the results by 'registration_date' to get the students in the order they registered."], "pred_sql": "SELECT sr.student_id FROM Student_Course_Registrations sr JOIN Courses c ON sr.course_id = c.course_id WHERE c.course_name = 'Statistics' ORDER BY sr.registration_date;", "gold_sql": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = 'statistics' ORDER BY T2.registration_date", "source_tables": ["courses", "student_course_registrations"]}
{"sample_id": 106, "db_id": "student_assessment", "question": "What are the ids of the students who registered course statistics by order of registration date?", "rationale": ["Identify the relevant tables: We need to look at the 'Student_Course_Registrations' table to find student registrations and the 'Courses' table to filter by course name.", "Determine the necessary columns: We need the 'student_id' from the 'Student_Course_Registrations' table.", "Join the tables: We will join 'Student_Course_Registrations' with 'Courses' on 'course_id' to access course names.", "Filter the results: We will filter the results to only include registrations for the course named 'Statistics'.", "Order the results: Finally, we will order the results by 'registration_date' to get the ids in the order of registration."], "pred_sql": "SELECT sr.student_id FROM Student_Course_Registrations sr JOIN Courses c ON sr.course_id = c.course_id WHERE c.course_name = 'Statistics' ORDER BY sr.registration_date;", "gold_sql": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = 'statistics' ORDER BY T2.registration_date", "source_tables": ["courses", "student_course_registrations"]}
{"sample_id": 107, "db_id": "student_assessment", "question": "List the id of students who attended  statistics courses in the order of attendance date.", "rationale": ["Identify the relevant tables: We need to find students who attended statistics courses, so we will use the Student_Course_Attendance, Student_Course_Registrations, and Courses tables.", "Join the tables: We will join Student_Course_Attendance with Student_Course_Registrations on student_id to link attendance records with course registrations. Then, we will join with Courses on course_id to filter by course name.", "Filter for statistics courses: We will use a WHERE clause to filter the courses to only those that include 'statistics' in their name.", "Select distinct student IDs: We want to list the unique student IDs, so we will use SELECT DISTINCT to avoid duplicates.", "Order by attendance date: Finally, we will order the results by the date of attendance to meet the requirement of the query."], "pred_sql": "SELECT DISTINCT Student_Course_Attendance.student_id\nFROM Student_Course_Attendance\nJOIN Student_Course_Registrations ON Student_Course_Attendance.student_id = Student_Course_Registrations.student_id\nJOIN Courses ON Student_Course_Registrations.course_id = Courses.course_id\nWHERE Courses.course_name LIKE '%statistics%'\nORDER BY Student_Course_Attendance.date_of_attendance;", "gold_sql": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = 'statistics' ORDER BY T2.date_of_attendance", "source_tables": ["courses", "student_course_attendance"]}
{"sample_id": 108, "db_id": "student_assessment", "question": "What are the ids of the students who attended courses in the statistics department in order of attendance date.", "rationale": ["Identify the relevant tables: We need to find students who attended courses, so we will use the Student_Course_Attendance and Student_Course_Registrations tables.", "Join the Student_Course_Attendance table with the Student_Course_Registrations table on student_id to link attendance records with course registrations.", "Next, join the result with the Courses table to filter for courses in the statistics department. We can use a LIKE clause to match course names that include 'Statistics'.", "Select the distinct student_ids from the resulting joined tables to avoid duplicates.", "Finally, order the results by the date of attendance to get the ids in the order of attendance date."], "pred_sql": "SELECT DISTINCT scr.student_id\nFROM Student_Course_Attendance scr\nJOIN Student_Course_Registrations scrg ON scr.student_id = scrg.student_id\nJOIN Courses c ON scrg.course_id = c.course_id\nWHERE c.course_name LIKE '%Statistics%'\nORDER BY scr.date_of_attendance;", "gold_sql": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = 'statistics' ORDER BY T2.date_of_attendance", "source_tables": ["courses", "student_course_attendance"]}
{"sample_id": 109, "db_id": "bike_1", "question": "Give me the dates when the max temperature was higher than 85.", "rationale": ["Identify the relevant table: The query is asking about temperature, so we will use the 'weather' table.", "Determine the specific column needed: We need the 'date' column for the dates when the maximum temperature exceeds 85 degrees.", "Formulate the condition: We need to filter the records where 'max_temperature_f' is greater than 85.", "Construct the SQL SELECT statement: We will select the 'date' from the 'weather' table with the specified condition."], "pred_sql": "SELECT date FROM weather WHERE max_temperature_f > 85;", "gold_sql": "SELECT date FROM weather WHERE max_temperature_f  >  85", "source_tables": ["weather"]}
{"sample_id": 110, "db_id": "bike_1", "question": "What are the dates with a maximum temperature higher than 85?", "rationale": ["Identify the relevant table: The query is asking about maximum temperatures, which are found in the 'weather' table.", "Determine the condition: We need to find dates where the maximum temperature is higher than 85 degrees Fahrenheit.", "Construct the SQL query: We will select the 'date' column from the 'weather' table where the 'max_temperature_f' is greater than 85."], "pred_sql": "SELECT date FROM weather WHERE max_temperature_f > 85;", "gold_sql": "SELECT date FROM weather WHERE max_temperature_f  >  85", "source_tables": ["weather"]}
{"sample_id": 111, "db_id": "bike_1", "question": "What are the names of stations that have latitude lower than 37.5?", "rationale": ["Identify the table that contains the station names and their latitude, which is the 'station' table.", "Determine the specific columns needed: 'name' for the station names and 'lat' for the latitude.", "Formulate the condition to filter stations based on latitude being lower than 37.5.", "Construct the SQL SELECT statement to retrieve the 'name' column from the 'station' table where the 'lat' column meets the specified condition."], "pred_sql": "SELECT name FROM station WHERE lat < '37.5';", "gold_sql": "SELECT name FROM station WHERE lat  <  37.5", "source_tables": ["station"]}
{"sample_id": 112, "db_id": "bike_1", "question": "What are the names of all stations with a latitude smaller than 37.5?", "rationale": ["Identify the table that contains the station information, which is the 'station' table.", "Determine the relevant column for the station names, which is 'name'.", "Identify the column that contains the latitude information, which is 'lat'.", "Formulate the condition to filter stations based on latitude being smaller than 37.5.", "Construct the SQL query to select the 'name' from the 'station' table where the 'lat' is less than 37.5."], "pred_sql": "SELECT name FROM station WHERE lat < '37.5';", "gold_sql": "SELECT name FROM station WHERE lat  <  37.5", "source_tables": ["station"]}
{"sample_id": 113, "db_id": "bike_1", "question": "For each city, return the highest latitude among its stations.", "rationale": ["Identify the relevant table: The 'station' table contains the necessary information about the stations, including their latitude and city.", "Determine the required columns: We need the 'city' and the maximum 'lat' (latitude) for each city.", "Use the MAX() function: This function will help us find the highest latitude for each city.", "Group the results: We will use GROUP BY to aggregate the results by 'city', ensuring we get one result per city with the highest latitude."], "pred_sql": "SELECT city, MAX(lat) AS highest_latitude FROM station GROUP BY city;", "gold_sql": "SELECT city ,  max(lat) FROM station GROUP BY city", "source_tables": ["station"]}
{"sample_id": 114, "db_id": "bike_1", "question": "For each city, what is the highest latitude for its stations?", "rationale": ["Identify the relevant table: The 'station' table contains the necessary information about the stations, including their latitude and city.", "Determine the required columns: We need the 'city' and the maximum 'lat' (latitude) for each city.", "Use the MAX() function: To find the highest latitude, we will use the MAX() function on the 'lat' column.", "Group the results: Since we want the highest latitude for each city, we will use the GROUP BY clause on the 'city' column."], "pred_sql": "SELECT city, MAX(lat) AS highest_latitude FROM station GROUP BY city;", "gold_sql": "SELECT city ,  max(lat) FROM station GROUP BY city", "source_tables": ["station"]}
{"sample_id": 115, "db_id": "bike_1", "question": "Give me the start station and end station for the trips with the three oldest id.", "rationale": ["Identify the relevant table: The 'trip' table contains information about trips, including start and end station names.", "Determine the required columns: We need 'start_station_name' and 'end_station_name' from the 'trip' table.", "Sort the trips by 'id' to find the three oldest trips: Use 'ORDER BY id ASC' to sort the trips in ascending order based on their IDs.", "Limit the results to the three oldest trips: Use 'LIMIT 3' to restrict the output to only three records."], "pred_sql": "SELECT start_station_name, end_station_name FROM trip ORDER BY id ASC LIMIT 3;", "gold_sql": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3", "source_tables": ["trip"]}
{"sample_id": 116, "db_id": "bike_1", "question": "What is the station station and end station for the trips with the three smallest ids?", "rationale": ["Identify the relevant table: The 'trip' table contains information about trips, including start and end station names.", "Determine the required columns: We need 'start_station_name' and 'end_station_name' from the 'trip' table.", "Filter the trips: We need to find the trips with the three smallest ids. This can be done by ordering the trips by 'id' in ascending order and limiting the results to 3.", "Construct the SQL query: Use a subquery to select the three smallest ids and then select the corresponding start and end station names from the 'trip' table."], "pred_sql": "SELECT start_station_name, end_station_name FROM trip WHERE id IN (SELECT id FROM trip ORDER BY id ASC LIMIT 3)", "gold_sql": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3", "source_tables": ["trip"]}
{"sample_id": 117, "db_id": "bike_1", "question": "What is the average latitude and longitude of stations located in San Jose city?", "rationale": ["Identify the table that contains the latitude and longitude of the stations, which is the 'station' table.", "Determine the columns needed for the average calculation, which are 'lat' and 'long'.", "Filter the results to include only those stations located in 'San Jose' by using a WHERE clause.", "Use the AVG() function to calculate the average latitude and longitude for the filtered results."], "pred_sql": "SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude FROM station WHERE city = 'San Jose';", "gold_sql": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  'San Jose'", "source_tables": ["station"]}
{"sample_id": 118, "db_id": "bike_1", "question": "What is the average latitude and longitude in San Jose?", "rationale": ["Identify the table that contains latitude and longitude information, which is the 'station' table.", "Determine the columns needed for the average calculation, which are 'lat' and 'long'.", "Filter the results to only include stations located in 'San Jose' by using a WHERE clause.", "Use the AVG() function to calculate the average latitude and longitude for the filtered results."], "pred_sql": "SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude FROM station WHERE city = 'San Jose';", "gold_sql": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  'San Jose'", "source_tables": ["station"]}
{"sample_id": 119, "db_id": "bike_1", "question": "What is the id of the trip that has the shortest duration?", "rationale": ["Identify the table that contains the trip information, which is the 'trip' table.", "To find the trip with the shortest duration, we need to sort the trips by the 'duration' column in ascending order.", "We will use the 'ORDER BY' clause to sort the results based on the 'duration' column.", "To get only the trip with the shortest duration, we will limit the results to 1 using 'LIMIT 1'.", "Finally, we will select the 'id' of the trip from the sorted results."], "pred_sql": "SELECT id FROM trip ORDER BY duration ASC LIMIT 1;", "gold_sql": "SELECT id FROM trip ORDER BY duration LIMIT 1", "source_tables": ["trip"]}
{"sample_id": 120, "db_id": "bike_1", "question": "What is the id of the shortest trip?", "rationale": ["Identify the table that contains trip information, which is the 'trip' table.", "Determine the relevant column for the trip identifier, which is 'id'.", "Identify the column that represents the duration of the trip, which is 'duration'.", "To find the shortest trip, we need to order the results by 'duration' in ascending order.", "Limit the results to only one entry to get the shortest trip's id."], "pred_sql": "SELECT id FROM trip ORDER BY duration ASC LIMIT 1;", "gold_sql": "SELECT id FROM trip ORDER BY duration LIMIT 1", "source_tables": ["trip"]}
{"sample_id": 121, "db_id": "bike_1", "question": "What is the total and maximum duration of trips with bike id 636?", "rationale": ["Identify the relevant table: The 'trip' table contains the duration of trips and the bike_id.", "Determine the required calculations: We need to calculate the total duration and the maximum duration of trips.", "Formulate the SQL query: Use the SUM() function to get the total duration and the MAX() function to get the maximum duration, filtering the results by bike_id = '636'."], "pred_sql": "SELECT SUM(duration) AS total_duration, MAX(duration) AS max_duration FROM trip WHERE bike_id = '636';", "gold_sql": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636", "source_tables": ["trip"]}
{"sample_id": 122, "db_id": "bike_1", "question": "What is the total and maximum duration for all trips with the bike id 636?", "rationale": ["Identify the relevant table: The 'trip' table contains the duration of trips and the bike_id.", "Determine the required calculations: We need to calculate the total duration and the maximum duration of trips.", "Formulate the SQL query: Use the SUM() function to get the total duration and the MAX() function to get the maximum duration, filtering the results by bike_id = '636'."], "pred_sql": "SELECT SUM(duration) AS total_duration, MAX(duration) AS max_duration FROM trip WHERE bike_id = '636';", "gold_sql": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636", "source_tables": ["trip"]}
{"sample_id": 123, "db_id": "bike_1", "question": "For each zip code, return the average mean temperature of August there.", "rationale": ["Identify the relevant table: The 'weather' table contains the temperature data and zip codes.", "Determine the columns needed: We need 'zip_code' and 'mean_temperature_f' for the average calculation.", "Filter the data for August: Use a WHERE clause to select records where the date falls within August (from '2023-08-01' to '2023-08-31').", "Calculate the average: Use the AVG() function to compute the average mean temperature for each zip code.", "Group the results: Use GROUP BY to aggregate the results by 'zip_code' to get the average for each unique zip code."], "pred_sql": "SELECT zip_code, AVG(mean_temperature_f) AS average_mean_temperature\nFROM weather\nWHERE date >= '2023-08-01' AND date <= '2023-08-31'\nGROUP BY zip_code;", "gold_sql": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE '8/%' GROUP BY zip_code", "source_tables": ["weather"]}
{"sample_id": 124, "db_id": "bike_1", "question": "For each zip code, what is the average mean temperature for all dates that start with '8'?", "rationale": ["Identify the relevant table: The 'weather' table contains the temperature data and zip codes.", "Determine the required columns: We need 'zip_code' and the average of 'mean_temperature_f'.", "Filter the data: We need to consider only those records where the 'date' starts with '8'.", "Group the results: We need to group the results by 'zip_code' to calculate the average mean temperature for each zip code."], "pred_sql": "SELECT zip_code, AVG(mean_temperature_f) AS average_mean_temperature\nFROM weather\nWHERE date LIKE '8%'\nGROUP BY zip_code;", "gold_sql": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE '8/%' GROUP BY zip_code", "source_tables": ["weather"]}
{"sample_id": 125, "db_id": "bike_1", "question": "From the trip record, find the number of unique bikes.", "rationale": ["Identify the table that contains the bike records, which is the 'trip' table.", "Determine the column that represents the bike identifier, which is 'bike_id'.", "To find the number of unique bikes, use the COUNT function with DISTINCT on the 'bike_id' column.", "Construct the SQL query to select the count of distinct bike IDs from the trip table."], "pred_sql": "SELECT COUNT(DISTINCT bike_id) AS unique_bike_count FROM trip;", "gold_sql": "SELECT count(DISTINCT bike_id) FROM trip", "source_tables": ["trip"]}
{"sample_id": 126, "db_id": "bike_1", "question": "How many different bike ids are there?", "rationale": ["Identify the table that contains bike IDs, which is the 'trip' table.", "To find the number of different bike IDs, we need to count distinct values in the 'bike_id' column.", "The SQL query will use the COUNT function along with DISTINCT to ensure we only count unique bike IDs."], "pred_sql": "SELECT COUNT(DISTINCT bike_id) AS different_bike_ids FROM trip;", "gold_sql": "SELECT count(DISTINCT bike_id) FROM trip", "source_tables": ["trip"]}
{"sample_id": 127, "db_id": "bike_1", "question": "What is the number of distinct cities the stations are located at?", "rationale": ["Identify the table that contains the city information, which is the 'station' table.", "To find the number of distinct cities, we need to use the COUNT function along with DISTINCT on the 'city' column.", "Construct the SQL query to select the count of distinct cities from the 'station' table."], "pred_sql": "SELECT COUNT(DISTINCT city) AS distinct_city_count FROM station;", "gold_sql": "SELECT count(DISTINCT city) FROM station", "source_tables": ["station"]}
{"sample_id": 128, "db_id": "bike_1", "question": "How many different cities have these stations?", "rationale": ["Identify the table that contains city information, which is the 'station' table.", "To find the number of different cities, we need to count distinct values in the 'city' column.", "The SQL query will use the COUNT function along with DISTINCT to count unique city entries."], "pred_sql": "SELECT COUNT(DISTINCT city) AS different_cities FROM station;", "gold_sql": "SELECT count(DISTINCT city) FROM station", "source_tables": ["station"]}
{"sample_id": 129, "db_id": "bike_1", "question": "How many stations does Mountain View city has?", "rationale": ["Identify the table that contains the information about bike stations, which is the 'station' table.", "Determine the relevant column that indicates the city, which is the 'city' column in the 'station' table.", "Formulate a query to count the number of stations in the specified city, 'Mountain View'.", "Use the COUNT() function to get the total number of records that match the condition.", "Construct the final SQL query to select the count from the 'station' table where the city is 'Mountain View'."], "pred_sql": "SELECT COUNT(*) AS station_count FROM station WHERE city = 'Mountain View';", "gold_sql": "SELECT COUNT(*) FROM station WHERE city  =  'Mountain View'", "source_tables": ["station"]}
{"sample_id": 130, "db_id": "bike_1", "question": "How many stations are in Mountain View?", "rationale": ["Identify the table that contains the information about stations, which is the 'station' table.", "Determine the relevant column that indicates the city, which is the 'city' column in the 'station' table.", "Formulate a query to count the number of entries in the 'station' table where the 'city' is 'Mountain View'.", "Use the COUNT() function to get the total number of stations in Mountain View."], "pred_sql": "SELECT COUNT(*) AS station_count FROM station WHERE city = 'Mountain View';", "gold_sql": "SELECT COUNT(*) FROM station WHERE city  =  'Mountain View'", "source_tables": ["station"]}
{"sample_id": 131, "db_id": "bike_1", "question": "Return the unique name for stations that have ever had 7 bikes available.", "rationale": ["Identify the tables involved: We need to get station names from the 'station' table and the bike availability from the 'status' table.", "Determine the relationship: The 'status' table has a foreign key 'station_id' that relates to the 'id' in the 'station' table.", "Formulate the query: We need to select distinct station names from the 'station' table where the corresponding 'bikes_available' in the 'status' table equals 7.", "Join the tables: Use an INNER JOIN to combine 'station' and 'status' on the matching 'id' and 'station_id'.", "Select the unique names: Use DISTINCT to ensure that we only get unique station names that meet the criteria."], "pred_sql": "SELECT DISTINCT s.name FROM station s JOIN status st ON s.id = st.station_id WHERE st.bikes_available = 7;", "gold_sql": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7", "source_tables": ["status", "station"]}
{"sample_id": 132, "db_id": "bike_1", "question": "What are the different names for each station that has ever had 7 bikes available?", "rationale": ["Identify the relevant tables: 'station' for station names and 'status' for bike availability.", "We need to find stations that have ever had 7 bikes available, so we will join the 'station' table with the 'status' table on the station ID.", "Use a SELECT statement to retrieve distinct station names from the 'station' table.", "Add a WHERE clause to filter the results to only include records where 'bikes_available' equals 7."], "pred_sql": "SELECT DISTINCT s.name FROM station s JOIN status st ON s.id = st.station_id WHERE st.bikes_available = 7;", "gold_sql": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7", "source_tables": ["status", "station"]}
{"sample_id": 133, "db_id": "bike_1", "question": "Which start station had the most trips starting from August? Give me the name and id of the station.", "rationale": ["Identify the relevant table: The 'trip' table contains information about trips, including start station names and IDs.", "Determine the filtering criteria: We need to filter trips that started in August. This can be done by extracting the month from the 'start_date' column.", "Group the results: We need to group the results by 'start_station_id' to count the number of trips for each station.", "Order the results: We will order the grouped results by the count of trips in descending order to find the station with the most trips.", "Limit the results: Since we only need the station with the most trips, we will limit the results to 1."], "pred_sql": "SELECT start_station_name, start_station_id FROM trip WHERE strftime('%m', start_date) = '08' GROUP BY start_station_id ORDER BY COUNT(*) DESC LIMIT 1;", "gold_sql": "SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE '8/%' GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["trip"]}
{"sample_id": 134, "db_id": "bike_1", "question": "What are the start station's name and id for the one that had the most start trips in August?", "rationale": ["Identify the relevant table: The 'trip' table contains information about trips, including start station names and IDs.", "Filter trips for August: Use the 'start_date' column to filter trips that occurred in August 2023. This can be done using the strftime function to format the date.", "Group by start station: To find the number of trips per station, group the results by 'start_station_name' and 'start_station_id'.", "Count trips: Use COUNT(*) to count the number of trips for each station.", "Order by trip count: Sort the results in descending order based on the count of trips to find the station with the most trips.", "Limit the results: Use LIMIT 1 to get only the station with the highest number of trips."], "pred_sql": "SELECT start_station_name, start_station_id\nFROM trip\nWHERE strftime('%Y-%m', start_date) = '2023-08'\nGROUP BY start_station_name, start_station_id\nORDER BY COUNT(*) DESC\nLIMIT 1;", "gold_sql": "SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE '8/%' GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["trip"]}
{"sample_id": 135, "db_id": "bike_1", "question": "Which bike traveled the most often in zip code 94002?", "rationale": ["Identify the relevant table: The 'trip' table contains information about bike trips, including the bike ID and zip code.", "Filter trips by zip code: We need to focus on trips that started in the zip code '94002'.", "Count the number of trips for each bike: Use the COUNT function to tally the number of trips for each bike ID.", "Group the results by bike ID: This allows us to aggregate the trip counts for each bike.", "Order the results by trip count in descending order: This will help us find the bike that traveled the most often.", "Limit the results to 1: We only need the bike that traveled the most often."], "pred_sql": "SELECT bike_id, COUNT(*) as trip_count \nFROM trip \nWHERE zip_code = '94002' \nGROUP BY bike_id \nORDER BY trip_count DESC \nLIMIT 1;", "gold_sql": "SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["trip"]}
{"sample_id": 136, "db_id": "bike_1", "question": "What is the id of the bike that traveled the most in 94002?", "rationale": ["Identify the relevant table: The 'trip' table contains information about bike trips, including the bike ID and duration.", "Filter trips by zip code: We need to filter the trips to only include those that started in the zip code '94002'.", "Order the results: To find the bike that traveled the most, we will order the results by the 'duration' column in descending order, as a longer duration indicates more travel.", "Limit the results: Since we only want the bike that traveled the most, we will limit the results to 1."], "pred_sql": "SELECT bike_id FROM trip WHERE zip_code = '94002' ORDER BY duration DESC LIMIT 1;", "gold_sql": "SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["trip"]}
{"sample_id": 137, "db_id": "bike_1", "question": "How many days had both mean humidity above 50 and mean visibility above 8?", "rationale": ["Identify the relevant table: The query pertains to weather conditions, so we will use the 'weather' table.", "Determine the conditions: We need to find days where both mean humidity is above 50 and mean visibility is above 8.", "Construct the SQL query: We will use a SELECT statement to count the number of days that meet both conditions, applying a WHERE clause to filter the results accordingly."], "pred_sql": "SELECT COUNT(*) AS days_count\nFROM weather\nWHERE mean_humidity > 50 AND mean_visibility > 8;", "gold_sql": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8", "source_tables": ["weather"]}
{"sample_id": 138, "db_id": "bike_1", "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?", "rationale": ["Identify the relevant table: The query pertains to weather conditions, so we will use the 'weather' table.", "Determine the conditions: We need to find days where the average humidity is above 50 and the average visibility is above 8.", "Construct the SQL query: We will use a SELECT statement to count the number of days that meet the specified conditions. We will use the COUNT function to get the total number of days that satisfy both conditions."], "pred_sql": "SELECT COUNT(*) AS number_of_days\nFROM weather\nWHERE mean_humidity > 50 AND mean_visibility_miles > 8;", "gold_sql": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8", "source_tables": ["weather"]}
{"sample_id": 139, "db_id": "bike_1", "question": "What is the latitude, longitude, city of the station from which the shortest trip started?", "rationale": ["Identify the relevant tables: We need data from the 'station' table for latitude, longitude, and city, and from the 'trip' table for trip duration.", "Join the 'station' table with the 'trip' table on the station ID to correlate trips with their starting stations.", "Order the results by the trip duration in ascending order to find the shortest trip.", "Limit the results to 1 to get only the shortest trip's starting station details."], "pred_sql": "SELECT s.lat, s.long, s.city FROM station s JOIN trip t ON s.id = t.start_station_id ORDER BY t.duration ASC LIMIT 1;", "gold_sql": "SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1", "source_tables": ["trip", "station"]}
{"sample_id": 140, "db_id": "bike_1", "question": "What is the latitude, longitude, and city of the station from which the trip with smallest duration started?", "rationale": ["Identify the relevant tables: We need data from the 'trip' table to find the trip with the smallest duration and from the 'station' table to get the latitude, longitude, and city of the starting station.", "Determine the required columns: We need the latitude (lat), longitude (long), and city from the 'station' table.", "Find the trip with the smallest duration: This can be done by ordering the trips by duration in ascending order and limiting the result to 1.", "Join the 'trip' table with the 'station' table: We need to join these tables on the station ID to get the station details for the trip with the smallest duration.", "Construct the SQL query: Combine all the above steps into a single SQL query."], "pred_sql": "SELECT s.lat, s.long, s.city \nFROM trip t \nJOIN station s ON t.start_station_id = s.id \nORDER BY t.duration ASC \nLIMIT 1;", "gold_sql": "SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1", "source_tables": ["trip", "station"]}
{"sample_id": 141, "db_id": "bike_1", "question": "What are the ids of stations that are located in San Francisco and have average bike availability above 10.", "rationale": ["Identify the relevant tables: 'station' for station details and 'status' for bike availability.", "We need to filter stations based on the city, which is in the 'station' table.", "We also need to calculate the average bike availability, which is in the 'status' table.", "Join the 'station' table with the 'status' table on the station id.", "Filter the results to include only those stations located in 'San Francisco'.", "Group the results by station id to calculate the average bike availability for each station.", "Use the HAVING clause to filter groups where the average bike availability is greater than 10."], "pred_sql": "SELECT s.id FROM station s JOIN status st ON s.id = st.station_id WHERE s.city = 'San Francisco' GROUP BY s.id HAVING AVG(st.bikes_available) > 10;", "gold_sql": "SELECT id FROM station WHERE city  =  'San Francisco' INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10", "source_tables": ["status", "station"]}
{"sample_id": 142, "db_id": "bike_1", "question": "What are the ids of the stations in San Francisco that normally have more than 10 bikes available?", "rationale": ["Identify the relevant tables: 'station' for station details and 'status' for current bike availability.", "We need to filter stations based on the city, which is in the 'station' table.", "We also need to check the number of bikes available, which is in the 'status' table.", "Join the 'station' table with the 'status' table on the station id to combine the information.", "Filter the results to only include stations in 'San Francisco' and where 'bikes_available' is greater than 10.", "Select the 'id' of the stations that meet these criteria."], "pred_sql": "SELECT s.id FROM station s JOIN status st ON s.id = st.station_id WHERE s.city = 'San Francisco' AND st.bikes_available > 10;", "gold_sql": "SELECT id FROM station WHERE city  =  'San Francisco' INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10", "source_tables": ["status", "station"]}
{"sample_id": 143, "db_id": "bike_1", "question": "What are the names and ids of stations that had more than 14 bikes available on average or were installed in December?", "rationale": ["We need to select the names and ids of stations, so we will select 's.name' and 's.id' from the 'station' table.", "To find the average number of bikes available, we will join the 'station' table with the 'status' table on the station id.", "We will group the results by station id to calculate the average number of bikes available for each station.", "We will use the HAVING clause to filter the results to include only those stations where the average number of bikes available is greater than 14.", "Additionally, we will check if the installation date of the station falls in December by using the strftime function to extract the month from the 'installation_date' column and compare it to '12'."], "pred_sql": "SELECT s.name, s.id \nFROM station s \nJOIN status st ON s.id = st.station_id \nGROUP BY s.id \nHAVING AVG(st.bikes_available) > 14 OR strftime('%m', s.installation_date) = '12';", "gold_sql": "SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE '12/%'", "source_tables": ["status", "station"]}
{"sample_id": 144, "db_id": "bike_1", "question": "What are the names and ids of all stations that have more than 14 bikes available on average or had bikes installed in December?", "rationale": ["Identify the relevant tables: 'station' and 'status'.", "We need to select the 'name' and 'id' from the 'station' table.", "Join the 'station' table with the 'status' table on the 'id' and 'station_id' columns respectively.", "Group the results by the station 'id' to calculate the average number of bikes available per station.", "Use the HAVING clause to filter stations that have an average of more than 14 bikes available or were installed in December (checking the 'installation_date' for the month of December)."], "pred_sql": "SELECT s.name, s.id \nFROM station s \nJOIN status st ON s.id = st.station_id \nGROUP BY s.id \nHAVING AVG(st.bikes_available) > 14 OR s.installation_date LIKE '%-12-%';", "gold_sql": "SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE '12/%'", "source_tables": ["status", "station"]}
{"sample_id": 145, "db_id": "bike_1", "question": "What is the 3 most common cloud cover rates in the region of zip code 94107?", "rationale": ["Identify the relevant table: The query pertains to cloud cover rates, which are found in the 'weather' table.", "Filter by zip code: We need to focus on records where the zip code is 94107, so we will add a WHERE clause for this condition.", "Group by cloud cover: To find the most common cloud cover rates, we will group the results by the 'cloud_cover' column.", "Count occurrences: We will count how many times each cloud cover rate appears using COUNT(cloud_cover).", "Order the results: To get the most common rates, we will order the results in descending order based on the count.", "Limit the results: Finally, we will limit the output to the top 3 results using LIMIT 3."], "pred_sql": "SELECT cloud_cover, COUNT(cloud_cover) AS count FROM weather WHERE zip_code = 94107 GROUP BY cloud_cover ORDER BY count DESC LIMIT 3;", "gold_sql": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3", "source_tables": ["weather"]}
{"sample_id": 146, "db_id": "bike_1", "question": "What are the 3 most common cloud covers in the zip code of 94107?", "rationale": ["Identify the relevant table: The query requires information about cloud covers, which is found in the 'weather' table.", "Filter by zip code: We need to focus on records where the zip code is 94107, so we will add a WHERE clause to filter the results accordingly.", "Group the results: To find the most common cloud covers, we will group the results by the 'cloud_cover' column.", "Count occurrences: We will count how many times each cloud cover appears using COUNT(cloud_cover) and alias it as cover_count.", "Order the results: To get the most common cloud covers, we will order the results in descending order based on the count of occurrences.", "Limit the results: Since we only want the top 3 most common cloud covers, we will use LIMIT 3 to restrict the output."], "pred_sql": "SELECT cloud_cover, COUNT(cloud_cover) AS cover_count \nFROM weather \nWHERE zip_code = 94107 \nGROUP BY cloud_cover \nORDER BY cover_count DESC \nLIMIT 3;", "gold_sql": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3", "source_tables": ["weather"]}
{"sample_id": 147, "db_id": "bike_1", "question": "What is the zip code in which the average mean sea level pressure is the lowest?", "rationale": ["Identify the relevant table: The query requires information about mean sea level pressure, which is found in the 'weather' table.", "Group the data by zip code: To find the average mean sea level pressure for each zip code, we need to group the results by the 'zip_code' column.", "Calculate the average: Use the AVG() function to calculate the average mean sea level pressure for each zip code.", "Order the results: To find the lowest average mean sea level pressure, we will order the results in ascending order.", "Limit the results: Since we only want the zip code with the lowest average mean sea level pressure, we will limit the results to 1."], "pred_sql": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY AVG(mean_sea_level_pressure_inches) ASC LIMIT 1;", "gold_sql": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1", "source_tables": ["weather"]}
{"sample_id": 148, "db_id": "bike_1", "question": "What is the zip code that has the lowest average mean sea level pressure?", "rationale": ["Identify the relevant table: The 'weather' table contains the 'zip_code' and 'mean_sea_level_pressure_inches' columns.", "Group the data by 'zip_code' to calculate the average mean sea level pressure for each zip code.", "Use the AVG() function to compute the average mean sea level pressure for each zip code.", "Order the results in ascending order to find the lowest average mean sea level pressure.", "Limit the results to 1 to get the zip code with the lowest average mean sea level pressure."], "pred_sql": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY AVG(mean_sea_level_pressure_inches) ASC LIMIT 1;", "gold_sql": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1", "source_tables": ["weather"]}
{"sample_id": 149, "db_id": "bike_1", "question": "What is the average bike availability in stations that are not located in Palo Alto?", "rationale": ["Identify the relevant tables: 'status' for bike availability and 'station' for city information.", "We need to calculate the average bike availability, so we will use the AVG() function on the 'bikes_available' column from the 'status' table.", "To filter out stations not located in Palo Alto, we will join the 'status' table with the 'station' table on the 'station_id' and 'id' columns respectively.", "We will apply a WHERE clause to exclude stations located in Palo Alto by checking the 'city' column in the 'station' table."], "pred_sql": "SELECT AVG(s.bikes_available) AS average_bike_availability\nFROM status s\nJOIN station st ON s.station_id = st.id\nWHERE st.city != 'Palo Alto';", "gold_sql": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  'Palo Alto')", "source_tables": ["status", "station"]}
{"sample_id": 150, "db_id": "bike_1", "question": "What is the average bike availablility for stations not in Palo Alto?", "rationale": ["Identify the relevant tables: 'status' for bike availability and 'station' for city information.", "We need to calculate the average number of bikes available, so we will use the AVG() function on the 'bikes_available' column from the 'status' table.", "To filter out stations not in Palo Alto, we will join the 'status' table with the 'station' table on the 'station_id' and 'id' columns respectively.", "We will apply a WHERE clause to exclude any records where the city is 'Palo Alto'.", "Finally, we will select the average bike availability from the filtered results."], "pred_sql": "SELECT AVG(bikes_available) AS average_bike_availability \nFROM status \nJOIN station ON status.station_id = station.id \nWHERE station.city != 'Palo Alto';", "gold_sql": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  'Palo Alto')", "source_tables": ["status", "station"]}
{"sample_id": 151, "db_id": "bike_1", "question": "What is the average longitude of stations that never had bike availability more than 10?", "rationale": ["Identify the requirement to find the average longitude of stations.", "Determine that we need to filter stations based on their bike availability history.", "Use a subquery to find all station_ids from the status table where bikes_available is greater than 10.", "Use the NOT IN clause to exclude these station_ids from the main query on the station table.", "Select the average longitude from the remaining stations."], "pred_sql": "SELECT AVG(long) AS average_longitude FROM station WHERE id NOT IN (SELECT station_id FROM status WHERE bikes_available > 10);", "gold_sql": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)", "source_tables": ["status", "station"]}
{"sample_id": 152, "db_id": "bike_1", "question": "What is the mean longitude for all stations that have never had more than 10 bikes available?", "rationale": ["Identify the requirement: We need to find the mean longitude of all stations that have never had more than 10 bikes available.", "To achieve this, we need to filter the stations based on their availability of bikes. We will use a subquery to find all station IDs that have had more than 10 bikes available at any point in time.", "The subquery will select the 'station_id' from the 'status' table where 'bikes_available' is greater than 10.", "The main query will then select the average of the 'long' column from the 'station' table, filtering out the stations whose IDs are in the result of the subquery using the NOT IN clause."], "pred_sql": "SELECT AVG(long) AS mean_longitude FROM station WHERE id NOT IN (SELECT station_id FROM status WHERE bikes_available > 10);", "gold_sql": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)", "source_tables": ["status", "station"]}
{"sample_id": 153, "db_id": "bike_1", "question": "When and in what zip code did max temperature reach 80?", "rationale": ["Identify the relevant table: The query is asking about maximum temperature, which is found in the 'weather' table.", "Determine the columns needed: We need the 'date' and 'zip_code' where the maximum temperature reached 80.", "Construct the SQL query: We will select 'date' and 'zip_code' from the 'weather' table where 'max_temperature_f' equals 80."], "pred_sql": "SELECT date, zip_code FROM weather WHERE max_temperature_f = 80;", "gold_sql": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80", "source_tables": ["weather"]}
{"sample_id": 154, "db_id": "bike_1", "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?", "rationale": ["Identify the relevant tables: 'weather' for temperature data and 'station' for zip code information.", "We need to find zip codes associated with stations that have a maximum temperature of 80 or higher.", "Join the 'weather' table with the 'station' table on the condition that the zip code in the weather table matches the city in the station table.", "Select distinct zip codes and the date when the maximum temperature was recorded, ensuring we only include records where the max temperature is 80 or above."], "pred_sql": "SELECT DISTINCT w.zip_code, w.date FROM weather w JOIN station s ON w.zip_code = s.city WHERE w.max_temperature_f >= 80;", "gold_sql": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80", "source_tables": ["weather"]}
{"sample_id": 155, "db_id": "bike_1", "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.", "rationale": ["Identify the relevant tables: 'trip' for trip IDs and 'weather' for temperature data.", "Determine the condition: we need trips where the average mean temperature is above 60 degrees Fahrenheit.", "Establish the relationship between the tables: 'trip' has a 'zip_code' that can be matched with 'weather' zip_code.", "Construct the SQL query to select trip IDs from the 'trip' table where the corresponding 'mean_temperature_f' in the 'weather' table is greater than 60."], "pred_sql": "SELECT trip.id FROM trip JOIN weather ON trip.zip_code = weather.zip_code WHERE weather.mean_temperature_f > 60;", "gold_sql": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60", "source_tables": ["weather", "trip"]}
{"sample_id": 156, "db_id": "bike_1", "question": "For each zip code, find the ids of all trips that have a higher average mean temperature above 60?", "rationale": ["Identify the relevant tables: 'trip' for trip IDs and 'weather' for temperature data.", "Determine the relationship between the tables: trips are associated with weather based on the start date of the trip and the date of the weather report.", "Use a JOIN to combine the 'trip' and 'weather' tables based on the condition that the trip's start date falls within the same day as the weather report.", "Group the results by zip code to calculate the average mean temperature for each zip code.", "Use the HAVING clause to filter groups where the average mean temperature is greater than 60 degrees."], "pred_sql": "SELECT DISTINCT trip.id\nFROM trip\nJOIN weather ON trip.start_date >= weather.date AND trip.start_date < weather.date + 1\nGROUP BY trip.zip_code\nHAVING AVG(weather.mean_temperature_f) > 60;", "gold_sql": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60", "source_tables": ["weather", "trip"]}
{"sample_id": 157, "db_id": "bike_1", "question": "For each zip code, return how many times max wind speed reached 25?", "rationale": ["Identify the relevant table: The 'weather' table contains the 'max_wind_Speed_mph' and 'zip_code' columns.", "We need to count occurrences where 'max_wind_Speed_mph' is greater than or equal to 25.", "Use the COUNT function to count these occurrences for each zip code.", "Group the results by 'zip_code' to get the count for each individual zip code."], "pred_sql": "SELECT zip_code, COUNT(*) AS count_max_wind_speed_25\nFROM weather\nWHERE max_wind_Speed_mph >= 25\nGROUP BY zip_code;", "gold_sql": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code", "source_tables": ["weather"]}
{"sample_id": 158, "db_id": "bike_1", "question": "For each zip code, how many times has the maximum wind speed reached 25 mph?", "rationale": ["Identify the relevant table: The 'weather' table contains the 'max_wind_Speed_mph' and 'zip_code' columns.", "Determine the condition: We need to count instances where 'max_wind_Speed_mph' is greater than or equal to 25 mph.", "Use the COUNT function to count occurrences for each zip code.", "Group the results by 'zip_code' to get the count for each individual zip code."], "pred_sql": "SELECT zip_code, COUNT(*) AS count FROM weather WHERE max_wind_Speed_mph >= 25 GROUP BY zip_code;", "gold_sql": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code", "source_tables": ["weather"]}
{"sample_id": 159, "db_id": "bike_1", "question": "On which day and in which zip code was the min dew point lower than any day in zip code 94107?", "rationale": ["Identify the relevant table: The query involves weather data, so we will use the 'weather' table.", "Determine the condition: We need to find days where the minimum dew point is lower than the minimum dew point recorded for zip code 94107.", "Use a subquery: To find the minimum dew point for zip code 94107, we will use a subquery that selects the minimum value from the 'weather' table where the zip code is 94107.", "Select the required columns: We need to select the 'date' and 'zip_code' from the 'weather' table for the days that meet the condition.", "Order the results: Finally, we will order the results by date for better readability."], "pred_sql": "SELECT w.date, w.zip_code \nFROM weather w \nWHERE w.min_dew_point_f < (SELECT MIN(w2.min_dew_point_f) \n                             FROM weather w2 \n                             WHERE w2.zip_code = 94107) \nORDER BY w.date;", "gold_sql": "SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)", "source_tables": ["weather"]}
{"sample_id": 160, "db_id": "bike_1", "question": "Which days had a minimum dew point smaller than any day in zip code 94107, and in which zip codes were those measurements taken?", "rationale": ["Identify the relevant table: The query involves weather data, so we will use the 'weather' table.", "Determine the condition for minimum dew point: We need to find days where the minimum dew point is smaller than the minimum dew point recorded for zip code 94107.", "Create a subquery to find the minimum dew point for zip code 94107: This will help us set the threshold for our main query.", "Select the zip codes from the weather table where the condition is met: We will select the zip_code from the weather table where the min_dew_point_f is less than the result of the subquery."], "pred_sql": "SELECT w.zip_code FROM weather w WHERE w.min_dew_point_f < (SELECT MIN(min_dew_point_f) FROM weather WHERE zip_code = 94107)", "gold_sql": "SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)", "source_tables": ["weather"]}
{"sample_id": 161, "db_id": "bike_1", "question": "For each trip, return its ending station's installation date.", "rationale": ["Identify the relevant tables: 'trip' for trip details and 'station' for station installation dates.", "Determine the columns needed: 'end_station_id' from the 'trip' table and 'installation_date' from the 'station' table.", "Establish the relationship between the tables: 'end_station_id' in 'trip' corresponds to 'id' in 'station'.", "Use a JOIN clause to combine the 'trip' and 'station' tables based on the station ID.", "Select the required columns to return the ending station's installation date for each trip."], "pred_sql": "SELECT trip.end_station_id, station.installation_date \nFROM trip \nJOIN station ON trip.end_station_id = station.id;", "gold_sql": "SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id", "source_tables": ["trip", "station"]}
{"sample_id": 162, "db_id": "bike_1", "question": "What is the installation date for each ending station on all the trips?", "rationale": ["Identify the relevant tables: 'trip' for trip details and 'station' for station installation dates.", "We need to find the installation date for each ending station, which means we will focus on the 'end_station_id' from the 'trip' table.", "Join the 'trip' table with the 'station' table on the condition that 'end_station_id' from 'trip' matches 'id' from 'station'.", "Select the 'installation_date' from the 'station' table to get the required information."], "pred_sql": "SELECT s.installation_date FROM trip t JOIN station s ON t.end_station_id = s.id;", "gold_sql": "SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id", "source_tables": ["trip", "station"]}
{"sample_id": 163, "db_id": "bike_1", "question": "Which trip started from the station with the largest dock count? Give me the trip id.", "rationale": ["Identify the station with the largest dock count by using a subquery to find the maximum dock count from the station table.", "Join the trip table with the station table on the start_station_id to filter trips that started from the identified station.", "Select the trip id from the trip table where the start station's dock count matches the maximum dock count found in the subquery."], "pred_sql": "SELECT trip.id FROM trip JOIN station ON trip.start_station_id = station.id WHERE station.dock_count = (SELECT MAX(dock_count) FROM station);", "gold_sql": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1", "source_tables": ["trip", "station"]}
{"sample_id": 164, "db_id": "bike_1", "question": "What is the id of the trip that started from the station with the highest dock count?", "rationale": ["Identify the table that contains the trip information, which is the 'trip' table.", "Identify the table that contains the station information, which is the 'station' table.", "To find the station with the highest dock count, we need to use a subquery to get the maximum dock count from the 'station' table.", "Join the 'trip' table with the 'station' table on the station ID to correlate trips with their starting stations.", "Select the trip ID from the 'trip' table where the starting station's dock count matches the maximum dock count obtained from the subquery."], "pred_sql": "SELECT trip.id FROM trip JOIN station ON trip.start_station_id = station.id WHERE station.dock_count = (SELECT MAX(dock_count) FROM station);", "gold_sql": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1", "source_tables": ["trip", "station"]}
{"sample_id": 165, "db_id": "bike_1", "question": "Count the number of trips that did not end in San Francisco city.", "rationale": ["Identify the relevant table: The 'trip' table contains information about trips, including the end station.", "Determine the condition: We need to count trips that did not end in San Francisco.", "Join the necessary information: To find trips that did not end in San Francisco, we can use a subquery to get the names of stations in San Francisco from the 'station' table.", "Construct the SQL query: Use COUNT(*) to count the trips where the end station name is not in the list of station names from San Francisco."], "pred_sql": "SELECT COUNT(*) AS trip_count FROM trip WHERE end_station_name NOT IN (SELECT name FROM station WHERE city = 'San Francisco');", "gold_sql": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city !=  'San Francisco'", "source_tables": ["trip", "station"]}
{"sample_id": 166, "db_id": "bike_1", "question": "How many trips did not end in San Francisco?", "rationale": ["Identify the relevant table: The 'trip' table contains information about trips, including the end station name.", "Determine the condition: We need to count trips where the end station name is not 'San Francisco'.", "Use the COUNT function to count the number of trips that meet the condition.", "Construct the SQL query to select the count from the 'trip' table with the specified condition."], "pred_sql": "SELECT COUNT(*) AS trip_count FROM trip WHERE end_station_name != 'San Francisco';", "gold_sql": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city != 'San Francisco'", "source_tables": ["trip", "station"]}
{"sample_id": 167, "db_id": "bike_1", "question": "In zip code 94107, on which day neither Fog nor Rain was not observed?", "rationale": ["Identify the relevant table: The query requires information about weather events, so we will use the 'weather' table.", "Filter by zip code: We need to filter the results to only include records where the zip code is 94107.", "Exclude specific weather events: We need to ensure that the results do not include days where 'Fog' or 'Rain' was observed. This can be done using the NOT LIKE operator to filter out those events.", "Select the date: Finally, we will select the 'date' column to get the days that meet the criteria."], "pred_sql": "SELECT date FROM weather WHERE zip_code = 94107 AND events NOT LIKE '%Fog%' AND events NOT LIKE '%Rain%';", "gold_sql": "SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != 'Fog' AND EVENTS != 'Rain'", "source_tables": ["weather"]}
{"sample_id": 168, "db_id": "bike_1", "question": "On which day has it neither been foggy nor rained in the zip code of 94107?", "rationale": ["Identify the relevant table: The query requires information about weather conditions, so we will use the 'weather' table.", "Determine the filtering criteria: We need to find days where it has neither been foggy nor rained. This can be done by checking the 'events' column for the absence of 'fog' and 'rain'.", "Specify the zip code: The query specifies a particular zip code (94107), which will be included in the WHERE clause.", "Construct the SQL query: Combine the selected columns and filtering criteria into a complete SQL query."], "pred_sql": "SELECT date FROM weather WHERE zip_code = 94107 AND events NOT LIKE '%fog%' AND events NOT LIKE '%rain%';", "gold_sql": "SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != 'Fog' AND EVENTS != 'Rain'", "source_tables": ["weather"]}
{"sample_id": 169, "db_id": "bike_1", "question": "What are the ids of stations that have latitude above 37.4 and never had bike availability below 7?", "rationale": ["Identify the relevant tables: 'station' for station details and 'status' for bike availability.", "We need to filter stations based on latitude, so we will use the 'lat' column from the 'station' table.", "We need to check bike availability, which is in the 'status' table under 'bikes_available'.", "We want stations with latitude greater than 37.4, so we will add a WHERE clause for this condition.", "To ensure that the stations never had bike availability below 7, we will use the HAVING clause with MIN(st.bikes_available) >= 7 after grouping by station id.", "Finally, we will select the 'id' of the stations that meet these criteria."], "pred_sql": "SELECT s.id FROM station s JOIN status st ON s.id = st.station_id WHERE s.lat > 37.4 GROUP BY s.id HAVING MIN(st.bikes_available) >= 7;", "gold_sql": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7", "source_tables": ["status", "station"]}
{"sample_id": 170, "db_id": "bike_1", "question": "What are the ids of all stations that have a latitude above 37.4 and have never had less than 7 bikes available?", "rationale": ["Identify the relevant tables: 'station' for station details and 'status' for bike availability.", "We need to filter stations based on latitude, so we will use the 'lat' column from the 'station' table.", "We also need to check the availability of bikes, which is in the 'status' table under 'bikes_available'.", "We will join the 'station' and 'status' tables on the station ID to correlate the data.", "The condition for latitude is straightforward: it must be greater than 37.4.", "To ensure that a station has never had less than 7 bikes available, we will use the HAVING clause with MIN(st.bikes_available) >= 7 after grouping by station ID."], "pred_sql": "SELECT s.id FROM station s JOIN status st ON s.id = st.station_id WHERE s.lat > 37.4 GROUP BY s.id HAVING MIN(st.bikes_available) >= 7;", "gold_sql": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7", "source_tables": ["status", "station"]}
{"sample_id": 171, "db_id": "bike_1", "question": "What are names of stations that have average bike availability above 10 and are not located in San Jose city?", "rationale": ["We need to select the names of stations, so we will use the SELECT statement to get the 'name' column from the 'station' table.", "To find the average bike availability, we will join the 'station' table with the 'status' table on the station ID, which is the foreign key relationship.", "We will group the results by the station ID to calculate the average number of bikes available for each station.", "We will use the HAVING clause to filter the results to only include stations with an average bike availability greater than 10.", "Additionally, we will filter out stations located in San Jose by adding a condition in the HAVING clause that checks if the city is not 'San Jose'."], "pred_sql": "SELECT s.name \nFROM station s \nJOIN status st ON s.id = st.station_id \nGROUP BY s.id \nHAVING AVG(st.bikes_available) > 10 AND s.city != 'San Jose';", "gold_sql": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  'San Jose'", "source_tables": ["status", "station"]}
{"sample_id": 172, "db_id": "bike_1", "question": "What are the names of all stations that have more than 10 bikes available and are not located in San Jose?", "rationale": ["Identify the relevant tables: 'station' for station names and 'status' for bike availability.", "We need to join the 'station' table with the 'status' table on the station ID to access both station names and bike availability.", "Filter the results to include only those stations where the number of bikes available is greater than 10.", "Additionally, filter out stations located in San Jose by checking that the city is not 'San Jose'.", "Select the 'name' column from the 'station' table to get the names of the qualifying stations."], "pred_sql": "SELECT s.name FROM station s JOIN status st ON s.id = st.station_id WHERE st.bikes_available > 10 AND s.city != 'San Jose';", "gold_sql": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  'San Jose'", "source_tables": ["status", "station"]}
{"sample_id": 173, "db_id": "bike_1", "question": "What are the name, latitude, and city of the station with the lowest latitude?", "rationale": ["Identify the columns needed: name, lat, and city from the station table.", "Determine the condition to find the station with the lowest latitude, which requires sorting the latitude in ascending order.", "Use the ORDER BY clause to sort the results by the 'lat' column.", "Limit the results to 1 to get only the station with the lowest latitude."], "pred_sql": "SELECT name, lat, city FROM station ORDER BY lat ASC LIMIT 1;", "gold_sql": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1", "source_tables": ["station"]}
{"sample_id": 174, "db_id": "bike_1", "question": "What is the name, latitude, and city of the station that is located the furthest South?", "rationale": ["Identify the relevant table: The 'station' table contains the necessary information about the stations.", "Determine the columns needed: We need the 'name', 'lat', and 'city' of the station.", "To find the station located the furthest South, we need to order the results by latitude ('lat') in ascending order, as lower latitude values indicate a more southern location.", "Limit the results to 1 to get only the station that is the furthest South."], "pred_sql": "SELECT name, lat, city FROM station ORDER BY lat ASC LIMIT 1;", "gold_sql": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1", "source_tables": ["station"]}
{"sample_id": 175, "db_id": "bike_1", "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?", "rationale": ["Identify the relevant table: The query requires data about weather, so we will use the 'weather' table.", "Select the required columns: We need to retrieve 'date', 'mean_temperature_f', and 'mean_humidity'.", "Determine the sorting criteria: The query asks for the top 3 days with the largest max gust speeds, so we will order the results by 'max_gust_speed_mph' in descending order.", "Limit the results: We only need the top 3 records, so we will use 'LIMIT 3' in the query."], "pred_sql": "SELECT date, mean_temperature_f, mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3;", "gold_sql": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3", "source_tables": ["weather"]}
{"sample_id": 176, "db_id": "bike_1", "question": "What is the date, average temperature and mean humidity for the days with the 3 largest maximum gust speeds?", "rationale": ["Identify the relevant table: The query requires data from the 'weather' table.", "Determine the required columns: The user wants the 'date', 'mean_temperature_f', and 'mean_humidity' columns.", "Sort the data: To find the days with the largest maximum gust speeds, we need to order the results by 'max_gust_speed_mph' in descending order.", "Limit the results: Since we only need the top 3 days, we will use a LIMIT clause to restrict the output to 3 records."], "pred_sql": "SELECT date, mean_temperature_f, mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3;", "gold_sql": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3", "source_tables": ["weather"]}
{"sample_id": 177, "db_id": "bike_1", "question": "List the name and the number of stations for all the cities that have at least 15 stations.", "rationale": ["Identify the relevant table: The 'station' table contains information about bike stations, including their names and cities.", "Determine the required output: We need to list the city names and the count of stations in each city.", "Use the COUNT() function to count the number of stations for each city.", "Group the results by city using GROUP BY to aggregate the station counts per city.", "Use HAVING to filter the results to include only those cities that have 15 or more stations."], "pred_sql": "SELECT city, COUNT(*) AS station_count FROM station GROUP BY city HAVING COUNT(*) >= 15;", "gold_sql": "SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15", "source_tables": ["station"]}
{"sample_id": 178, "db_id": "bike_1", "question": "What is the name of every city that has at least 15 stations and how many stations does it have?", "rationale": ["Identify the relevant table: The 'station' table contains the information about bike stations and their associated cities.", "We need to count the number of stations for each city, so we will use the COUNT() function.", "To group the results by city, we will use the GROUP BY clause on the 'city' column.", "We want to filter the results to only include cities with at least 15 stations, so we will use the HAVING clause with COUNT(*) >= 15."], "pred_sql": "SELECT city, COUNT(*) AS station_count\nFROM station\nGROUP BY city\nHAVING COUNT(*) >= 15;", "gold_sql": "SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15", "source_tables": ["station"]}
{"sample_id": 179, "db_id": "bike_1", "question": "Find the ids and names of stations from which at least 200 trips started.", "rationale": ["Identify the relevant table: The 'trip' table contains information about trips, including the starting station.", "Determine the columns needed: We need the 'start_station_id' and 'start_station_name' from the 'trip' table.", "Group the results: We will group the results by 'start_station_id' and 'start_station_name' to count the number of trips per station.", "Apply the condition: We will use the HAVING clause to filter groups that have at least 200 trips."], "pred_sql": "SELECT start_station_id AS id, start_station_name AS name\nFROM trip\nGROUP BY start_station_id, start_station_name\nHAVING COUNT(id) >= 200;", "gold_sql": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200", "source_tables": ["trip"]}
{"sample_id": 180, "db_id": "bike_1", "question": "What are the ids and names of all start stations that were the beginning of at least 200 trips?", "rationale": ["Identify the relevant table: The 'trip' table contains information about trips, including start station details.", "Select the required columns: We need the 'start_station_id' and 'start_station_name' from the 'trip' table.", "Group the results: To find the number of trips per start station, we will group the results by 'start_station_id' and 'start_station_name'.", "Count the trips: We will use the COUNT function to count the number of trips for each start station.", "Filter the results: We will use the HAVING clause to filter the groups to only include those with a count of at least 200 trips."], "pred_sql": "SELECT start_station_id, start_station_name\nFROM trip\nGROUP BY start_station_id, start_station_name\nHAVING COUNT(id) >= 200;", "gold_sql": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200", "source_tables": ["trip"]}
{"sample_id": 181, "db_id": "bike_1", "question": "Find the zip code in which the average mean visibility is lower than 10.", "rationale": ["Identify the relevant table: The 'weather' table contains the 'mean_visibility_miles' and 'zip_code' columns.", "We need to calculate the average mean visibility for each zip code, so we will use the AVG() function.", "To group the results by zip code, we will use the GROUP BY clause on the 'zip_code' column.", "We want to filter the results to only include zip codes where the average mean visibility is lower than 10, so we will use the HAVING clause with the condition AVG(mean_visibility_miles) < 10."], "pred_sql": "SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_visibility_miles) < 10;", "gold_sql": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10", "source_tables": ["weather"]}
{"sample_id": 182, "db_id": "bike_1", "question": "For each zip code, select all those that have an average mean visiblity below 10.", "rationale": ["Identify the relevant table: The 'weather' table contains the 'zip_code' and 'mean_visibility_miles' columns.", "We need to group the results by 'zip_code' to calculate the average mean visibility for each zip code.", "Use the AVG() function to calculate the average mean visibility for each zip code.", "Apply a HAVING clause to filter the results to only include zip codes where the average mean visibility is below 10."], "pred_sql": "SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_visibility_miles) < 10;", "gold_sql": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10", "source_tables": ["weather"]}
{"sample_id": 183, "db_id": "bike_1", "question": "List all the cities in a decreasing order of each city's stations' highest latitude.", "rationale": ["We need to list all the cities from the station table.", "To find the highest latitude for each city, we will use the MAX function on the 'lat' column.", "We will group the results by 'city' to ensure we get the highest latitude for each city.", "Finally, we will order the results in decreasing order based on the highest latitude."], "pred_sql": "SELECT city, MAX(lat) AS highest_latitude\nFROM station\nGROUP BY city\nORDER BY highest_latitude DESC;", "gold_sql": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC", "source_tables": ["station"]}
{"sample_id": 184, "db_id": "bike_1", "question": "For each city, list their names in decreasing order by their highest station latitude.", "rationale": ["Identify the relevant table: The 'station' table contains the necessary columns: 'city', 'name', and 'lat'.", "Select the columns needed: We need to select 'city' and 'name' from the 'station' table.", "Order the results: We need to order the results by the highest latitude, which is represented by the 'lat' column. Since 'lat' is stored as text, we will cast it to REAL for proper numerical ordering.", "Construct the SQL query: Combine the SELECT statement with the ORDER BY clause to create the final SQL query."], "pred_sql": "SELECT city, name FROM station ORDER BY CAST(lat AS REAL) DESC;", "gold_sql": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC", "source_tables": ["station"]}
{"sample_id": 185, "db_id": "bike_1", "question": "What are the dates that had the top 5 cloud cover rates? Also tell me the cloud cover rate.", "rationale": ["Identify the relevant table: The query requires information about cloud cover rates, which is found in the 'weather' table.", "Select the necessary columns: We need the 'date' and 'cloud_cover' columns from the 'weather' table.", "Order the results: To find the top 5 cloud cover rates, we need to order the results by 'cloud_cover' in descending order.", "Limit the results: We only want the top 5 entries, so we will use the LIMIT clause."], "pred_sql": "SELECT date, cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5;", "gold_sql": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5", "source_tables": ["weather"]}
{"sample_id": 186, "db_id": "bike_1", "question": "What are the dates that have the 5 highest cloud cover rates and what are the rates?", "rationale": ["Identify the relevant table: The query requires information about cloud cover rates, which is found in the 'weather' table.", "Select the necessary columns: We need the 'date' and 'cloud_cover' columns from the 'weather' table.", "Order the results: To find the highest cloud cover rates, we will order the results by 'cloud_cover' in descending order.", "Limit the results: We only need the top 5 entries, so we will use 'LIMIT 5' to restrict the output to the 5 highest cloud cover rates."], "pred_sql": "SELECT date, cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5;", "gold_sql": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5", "source_tables": ["weather"]}
{"sample_id": 187, "db_id": "bike_1", "question": "What are the ids and durations of the trips with the top 3 durations?", "rationale": ["Identify the relevant table: The 'trip' table contains the information about trips, including their ids and durations.", "Select the required columns: We need to retrieve the 'id' and 'duration' columns from the 'trip' table.", "Order the results: To get the top 3 durations, we need to order the results by the 'duration' column in descending order.", "Limit the results: We will limit the results to the top 3 entries using the LIMIT clause."], "pred_sql": "SELECT id, duration FROM trip ORDER BY duration DESC LIMIT 3;", "gold_sql": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3", "source_tables": ["trip"]}
{"sample_id": 188, "db_id": "bike_1", "question": "What are the ids of the trips that lasted the longest and how long did they last?", "rationale": ["Identify the relevant table: The 'trip' table contains information about trips, including their duration and unique identifiers.", "Determine the required fields: We need the 'id' of the trip and the 'duration' of the trip.", "Sort the trips by duration: To find the longest trip, we will order the results by the 'duration' column in descending order.", "Limit the results: Since we only want the longest trip, we will limit the results to 1."], "pred_sql": "SELECT id, duration FROM trip ORDER BY duration DESC LIMIT 1;", "gold_sql": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3", "source_tables": ["trip"]}
{"sample_id": 189, "db_id": "bike_1", "question": "For each station, return its longitude and the average duration of trips that started from the station.", "rationale": ["Identify the required columns: longitude from the station table and average duration from the trip table.", "Determine the relationship between the tables: the trip table has a foreign key (start_station_id) that references the station table (id).", "Use a JOIN clause to combine the station and trip tables based on the station ID.", "Use the AVG() function to calculate the average duration of trips for each station.", "Group the results by the station ID to ensure the average is calculated for each station."], "pred_sql": "SELECT s.long, AVG(t.duration) AS average_duration\nFROM station s\nJOIN trip t ON s.id = t.start_station_id\nGROUP BY s.id;", "gold_sql": "SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id", "source_tables": ["trip", "station"]}
{"sample_id": 190, "db_id": "bike_1", "question": "For each start station id, what is its name, longitude and average duration of trips started there?", "rationale": ["Identify the required columns: start station id, station name, station longitude, and average trip duration.", "The 'trip' table contains the trip details including start station id and duration.", "The 'station' table contains the station details including name and longitude.", "To get the average duration of trips for each start station, we will use the AVG() function on the duration column from the trip table.", "We need to join the 'trip' table with the 'station' table on the start station id to get the corresponding station details.", "Group the results by start station id, station name, and station longitude to calculate the average duration for each station."], "pred_sql": "SELECT trip.start_station_id, station.name, station.long, AVG(trip.duration) AS average_duration\nFROM trip\nJOIN station ON trip.start_station_id = station.id\nGROUP BY trip.start_station_id, station.name, station.long;", "gold_sql": "SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id", "source_tables": ["trip", "station"]}
{"sample_id": 191, "db_id": "bike_1", "question": "For each station, find its latitude and the minimum duration of trips that ended at the station.", "rationale": ["Identify the relevant tables: 'station' for station details and 'trip' for trip details.", "We need the latitude from the 'station' table and the minimum duration from the 'trip' table.", "Join the 'station' table with the 'trip' table on the condition that the station's id matches the end station id in the trip.", "Select the latitude from the 'station' table and the minimum duration of trips from the 'trip' table.", "Group the results by the station id to ensure we get the minimum duration for each station."], "pred_sql": "SELECT s.lat, MIN(t.duration) AS min_duration\nFROM station s\nJOIN trip t ON s.id = t.end_station_id\nGROUP BY s.id;", "gold_sql": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id", "source_tables": ["trip", "station"]}
{"sample_id": 192, "db_id": "bike_1", "question": "For each end station id, what is its name, latitude, and minimum duration for trips ended there?", "rationale": ["Identify the required columns: end station id, end station name, latitude, and minimum duration of trips.", "The 'trip' table contains the trip details including end station id, end station name, and duration.", "The 'station' table contains the station details including id, name, and latitude.", "To get the latitude of the end stations, we need to join the 'trip' table with the 'station' table on the end station id.", "Use the SQL MIN function to find the minimum duration for trips that ended at each station.", "Group the results by end station id, end station name, and latitude to ensure we get the minimum duration for each unique end station."], "pred_sql": "SELECT end_station_id, end_station_name, lat, MIN(duration) AS min_duration\nFROM trip\nJOIN station ON trip.end_station_id = station.id\nGROUP BY end_station_id, end_station_name, lat;", "gold_sql": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id", "source_tables": ["trip", "station"]}
{"sample_id": 193, "db_id": "bike_1", "question": "List all the distinct stations from which a trip of duration below 100 started.", "rationale": ["Identify the relevant table: The 'trip' table contains information about trips, including their duration and starting station.", "Determine the condition: We need to filter trips where the duration is below 100 minutes.", "Select the distinct stations: We want to list distinct starting station names from the filtered results.", "Construct the SQL query: Use SELECT DISTINCT to get unique station names from the trip table where the duration is less than 100."], "pred_sql": "SELECT DISTINCT start_station_name FROM trip WHERE duration < 100;", "gold_sql": "SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100", "source_tables": ["trip"]}
{"sample_id": 194, "db_id": "bike_1", "question": "What are all the different start station names for a trip that lasted less than 100?", "rationale": ["Identify the relevant table: The 'trip' table contains information about trips, including the start station names and trip durations.", "Determine the required columns: We need the 'start_station_name' column to get the names of the start stations.", "Apply the condition: We need to filter the trips where the 'duration' is less than 100 minutes.", "Use DISTINCT to ensure we get unique start station names.", "Construct the SQL query using SELECT, DISTINCT, and WHERE clauses."], "pred_sql": "SELECT DISTINCT start_station_name FROM trip WHERE duration < 100;", "gold_sql": "SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100", "source_tables": ["trip"]}
{"sample_id": 195, "db_id": "bike_1", "question": "Find all the zip codes in which the max dew point have never reached 70.", "rationale": ["Identify the relevant table: The query requires information about zip codes and max dew points, which are found in the 'weather' table.", "Determine the condition: We need to find records where the max dew point has never reached 70. This means we are looking for max_dew_point_f values that are less than 70.", "Select distinct zip codes: Since we want unique zip codes, we will use the DISTINCT keyword in our SELECT statement.", "Construct the SQL query: Combine the selected fields and conditions into a complete SQL query."], "pred_sql": "SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f < 70;", "gold_sql": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70", "source_tables": ["weather"]}
{"sample_id": 196, "db_id": "bike_1", "question": "What are all the different zip codes that have a maximum dew point that was always below 70?", "rationale": ["Identify the relevant table: The query requires information about zip codes and dew points, so we will use the 'weather' table.", "Determine the condition: We need to find zip codes where the maximum dew point is always below 70.", "Use the SELECT statement: We will select distinct zip codes from the weather table that meet the condition.", "Construct the WHERE clause: The condition for the maximum dew point is specified as 'max_dew_point_f < 70'.", "Combine these elements to form the final SQL query."], "pred_sql": "SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f < 70;", "gold_sql": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70", "source_tables": ["weather"]}
{"sample_id": 197, "db_id": "bike_1", "question": "Find the id for the trips that lasted at least as long as the average duration of trips in zip code 94103.", "rationale": ["Identify the relevant table: The 'trip' table contains the information about trips, including their duration and zip code.", "Calculate the average duration of trips for the specified zip code (94103): This requires a subquery that selects the average duration from the 'trip' table where the zip code matches.", "Select the trip IDs: The main query selects the 'id' from the 'trip' table where the duration is greater than or equal to the average duration calculated in the subquery."], "pred_sql": "SELECT id FROM trip WHERE duration >= (SELECT AVG(duration) FROM trip WHERE zip_code = '94103')", "gold_sql": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)", "source_tables": ["trip"]}
{"sample_id": 198, "db_id": "bike_1", "question": "What are the ids of all trips that had a duration as long as the average trip duration in the zip code 94103?", "rationale": ["Identify the relevant table: The 'trip' table contains the information about trips, including their duration and zip code.", "Determine the average trip duration for the specified zip code: Use a subquery to calculate the average duration from the 'trip' table where the zip code is '94103'.", "Select the trip ids: Use the main query to select the 'id' of trips from the 'trip' table where the duration matches the average duration calculated in the subquery."], "pred_sql": "SELECT id FROM trip WHERE duration = (SELECT AVG(duration) FROM trip WHERE zip_code = '94103')", "gold_sql": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)", "source_tables": ["trip"]}
{"sample_id": 199, "db_id": "bike_1", "question": "What are the dates in which the mean sea level pressure was between 30.3 and 31?", "rationale": ["Identify the table that contains the relevant data: the 'weather' table.", "Determine the specific column needed for the query: 'date' for the dates and 'mean_sea_level_pressure_inches' for the pressure values.", "Formulate the SQL SELECT statement to retrieve the 'date' column from the 'weather' table.", "Add a WHERE clause to filter the results where 'mean_sea_level_pressure_inches' is between 30.3 and 31."], "pred_sql": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31;", "gold_sql": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31", "source_tables": ["weather"]}
{"sample_id": 200, "db_id": "bike_1", "question": "What are the dates that have an average sea level pressure between 30.3 and 31?", "rationale": ["Identify the table that contains the relevant data: the 'weather' table.", "Determine the column that holds the average sea level pressure: 'mean_sea_level_pressure_inches'.", "Specify the condition for filtering the data: average sea level pressure should be between 30.3 and 31.", "Select the 'date' column to retrieve the dates that meet the condition."], "pred_sql": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31;", "gold_sql": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31", "source_tables": ["weather"]}
{"sample_id": 201, "db_id": "bike_1", "question": "Find the day in which the difference between the max temperature and min temperature was the smallest. Also report the difference.", "rationale": ["Identify the relevant table: The 'weather' table contains temperature data.", "Determine the columns needed: We need 'date', 'max_temperature_f', and 'min_temperature_f' to calculate the difference.", "Calculate the temperature difference: This can be done by subtracting 'min_temperature_f' from 'max_temperature_f'.", "Sort the results: We want to find the smallest difference, so we will order the results by the calculated difference in ascending order.", "Limit the results: Since we only need the day with the smallest difference, we will limit the results to 1."], "pred_sql": "SELECT date, (max_temperature_f - min_temperature_f) AS temperature_difference\nFROM weather\nORDER BY temperature_difference ASC\nLIMIT 1;", "gold_sql": "SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1", "source_tables": ["weather"]}
{"sample_id": 202, "db_id": "bike_1", "question": "What are the days that had the smallest temperature range, and what was that range?", "rationale": ["Identify the relevant table: The query requires information about temperature, which is found in the 'weather' table.", "Determine the columns needed: We need the 'date' and the temperature range, which can be calculated as the difference between 'max_temperature_f' and 'min_temperature_f'.", "Formulate the SQL query: We will select the 'date' and calculate the temperature range, then order the results by this range in ascending order to find the smallest range.", "Limit the results to 1 to get only the day with the smallest temperature range."], "pred_sql": "SELECT date, (max_temperature_f - min_temperature_f) AS temperature_range \nFROM weather \nORDER BY temperature_range ASC \nLIMIT 1;", "gold_sql": "SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1", "source_tables": ["weather"]}
{"sample_id": 203, "db_id": "bike_1", "question": "What are the id and name of the stations that have ever had more than 12 bikes available?", "rationale": ["Identify the relevant tables: We need data from the 'station' table for station details and the 'status' table for bike availability.", "Determine the columns needed: We need the 'id' and 'name' from the 'station' table.", "Establish the relationship: The 'status' table has a foreign key 'station_id' that relates to the 'id' in the 'station' table.", "Formulate the query: We will join the 'station' table with the 'status' table on the 'id' and 'station_id' respectively.", "Apply the condition: We need to filter the results to only include stations that have ever had more than 12 bikes available, which is done using a WHERE clause."], "pred_sql": "SELECT DISTINCT s.id, s.name \nFROM station s \nJOIN status st ON s.id = st.station_id \nWHERE st.bikes_available > 12;", "gold_sql": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12", "source_tables": ["status", "station"]}
{"sample_id": 204, "db_id": "bike_1", "question": "What are the different ids and names of the stations that have had more than 12 bikes available?", "rationale": ["Identify the relevant tables: 'station' for station details and 'status' for bike availability.", "Determine the columns needed: 'id' and 'name' from the 'station' table.", "Establish the relationship between the tables: 'status.station_id' corresponds to 'station.id'.", "Set the condition for filtering: we want stations where 'bikes_available' in the 'status' table is greater than 12.", "Construct the SQL query using a JOIN to combine the two tables and apply the WHERE clause for filtering."], "pred_sql": "SELECT station.id, station.name FROM station JOIN status ON station.id = status.station_id WHERE status.bikes_available > 12;", "gold_sql": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12", "source_tables": ["status", "station"]}
{"sample_id": 205, "db_id": "bike_1", "question": "Give me the zip code where the average mean humidity is below 70 and at least 100 trips took place.", "rationale": ["Identify the requirement to find zip codes with average mean humidity below 70 and at least 100 trips.", "To achieve this, we need to use subqueries to filter zip codes based on the conditions provided.", "First, create a subquery to select zip codes from the weather table where the average mean humidity is below 70, grouping by zip code.", "Next, create another subquery to select zip codes from the trip table where the count of trips is at least 100, also grouping by zip code.", "Finally, combine these two subqueries in the main query to select zip codes that meet both conditions."], "pred_sql": "SELECT zip_code FROM trip\nWHERE zip_code IN (\n    SELECT zip_code\n    FROM weather\n    GROUP BY zip_code\n    HAVING AVG(mean_humidity) < 70\n) \nAND zip_code IN (\n    SELECT zip_code\n    FROM trip\n    GROUP BY zip_code\n    HAVING COUNT(id) >= 100\n);", "gold_sql": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100", "source_tables": ["weather", "trip"]}
{"sample_id": 206, "db_id": "bike_1", "question": "What are the zip codes that have an average mean humidity below 70 and had at least 100 trips come through there?", "rationale": ["Identify the relevant table: The 'trip' table contains the 'zip_code' and the number of trips.", "We need to calculate the average mean humidity for each zip code. However, the mean humidity data is not directly in the 'trip' table, so we need to join the 'trip' table with the 'weather' table on the date.", "The 'weather' table contains the 'mean_humidity' column, which we will use to calculate the average humidity.", "We will group the results by 'zip_code' to calculate the average mean humidity for each zip code.", "We will use the HAVING clause to filter the results to only include zip codes with an average mean humidity below 70 and at least 100 trips."], "pred_sql": "SELECT zip_code\nFROM trip\nGROUP BY zip_code\nHAVING AVG(mean_humidity) < 70 AND COUNT(id) >= 100;", "gold_sql": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100", "source_tables": ["weather", "trip"]}
{"sample_id": 207, "db_id": "bike_1", "question": "What are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times?", "rationale": ["Identify the relevant table: We need to get station names from the 'station' table and check trip data from the 'trip' table.", "Filter stations by city: We will filter the stations to only include those located in 'Palo Alto'.", "Count trips: We need to count how many times each station has been the ending point of trips. This can be done by joining the 'station' table with the 'trip' table on the station ID and counting the occurrences of each station's ID in the 'end_station_id' column of the 'trip' table.", "Use LEFT JOIN: A LEFT JOIN will allow us to include stations that have no trips at all, which is necessary to find those that have never been the ending point of trips.", "Group by station: We will group the results by station ID to get the count of trips for each station.", "Filter by count: Finally, we will use a HAVING clause to filter out stations that have been the ending point of trips more than 100 times."], "pred_sql": "SELECT s.name \nFROM station s \nLEFT JOIN trip t ON s.id = t.end_station_id \nWHERE s.city = 'Palo Alto' \nGROUP BY s.id \nHAVING COUNT(t.id) <= 100;", "gold_sql": "SELECT name FROM station WHERE city  =  'Palo Alto' EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100", "source_tables": ["trip", "station"]}
{"sample_id": 208, "db_id": "bike_1", "question": "What are the names of the stations that are located in Palo Alto but have never been the ending point of the trips", "rationale": ["Identify the relevant table: We need to retrieve station names, so we will use the 'station' table.", "Filter by city: We need to find stations located in 'Palo Alto', so we will add a WHERE clause to filter by the 'city' column.", "Exclude stations that have been ending points: We need to ensure that the stations have never been the ending point of trips. This requires a subquery that selects 'end_station_id' from the 'trip' table.", "Combine the conditions: We will use the NOT IN clause to exclude any station IDs that appear in the subquery from our main query."], "pred_sql": "SELECT name FROM station WHERE city = 'Palo Alto' AND id NOT IN (SELECT end_station_id FROM trip);", "gold_sql": "SELECT name FROM station WHERE city  =  'Palo Alto' EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100", "source_tables": ["trip", "station"]}
{"sample_id": 209, "db_id": "bike_1", "question": "How many trips started from Mountain View city and ended at Palo Alto city?", "rationale": ["Identify the relevant tables: We need to use the 'trip' table to count the trips and the 'station' table to filter by city.", "Determine the conditions for the trips: We need to find trips that started from stations in 'Mountain View' and ended at stations in 'Palo Alto'.", "Use subqueries to find station names: Create subqueries to get the names of stations located in 'Mountain View' and 'Palo Alto'.", "Count the trips: Use the COUNT() function to count the number of trips that meet the criteria."], "pred_sql": "SELECT COUNT(*) AS trip_count \nFROM trip \nWHERE start_station_name IN (SELECT name FROM station WHERE city = 'Mountain View') \nAND end_station_name IN (SELECT name FROM station WHERE city = 'Palo Alto');", "gold_sql": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  'Mountain View' AND T3.city  =  'Palo Alto'", "source_tables": ["trip", "station"]}
{"sample_id": 210, "db_id": "bike_1", "question": "How many trips stated from  a station in Mountain View and ended at one in Palo Alto?", "rationale": ["Identify the relevant tables: We need to use the 'trip' table to count the trips, and the 'station' table to filter the stations by city.", "Determine the conditions for the trips: We need to find trips that start from a station in 'Mountain View' and end at a station in 'Palo Alto'.", "Use subqueries to find station names: We will use subqueries to get the names of the stations located in 'Mountain View' and 'Palo Alto'.", "Count the trips: Finally, we will count the number of trips that meet the criteria using COUNT(*) in the SELECT statement."], "pred_sql": "SELECT COUNT(*) AS trip_count \nFROM trip \nWHERE start_station_name IN (SELECT name FROM station WHERE city = 'Mountain View') \nAND end_station_name IN (SELECT name FROM station WHERE city = 'Palo Alto');", "gold_sql": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  'Mountain View' AND T3.city  =  'Palo Alto'", "source_tables": ["trip", "station"]}
{"sample_id": 211, "db_id": "bike_1", "question": "What is the average latitude and longitude of the starting points of all trips?", "rationale": ["Identify the relevant tables: We need to calculate the average latitude and longitude of the starting points of all trips, which involves the 'station' and 'trip' tables.", "Determine the necessary columns: We need the 'lat' and 'long' columns from the 'station' table, and the 'start_station_id' from the 'trip' table to identify the starting stations.", "Filter the stations: We will filter the 'station' table to include only those stations that are referenced in the 'trip' table as starting points.", "Calculate the averages: Use the AVG() function to calculate the average latitude and longitude for the filtered stations."], "pred_sql": "SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude FROM station WHERE id IN (SELECT start_station_id FROM trip);", "gold_sql": "SELECT avg(T1.lat) ,  avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id", "source_tables": ["trip", "station"]}
{"sample_id": 212, "db_id": "bike_1", "question": "What is the average latitude and longitude of all starting stations for the trips?", "rationale": ["Identify the relevant table for the starting stations, which is the 'station' table.", "We need to calculate the average latitude and longitude, so we will use the AVG() function for both 'lat' and 'long' columns.", "To find the starting stations, we will look at the 'trip' table and specifically the 'start_station_id' column.", "We will use a subquery to select all 'start_station_id' values from the 'trip' table and match them with the 'id' in the 'station' table.", "Finally, we will construct the SQL query to select the average latitude and longitude from the 'station' table based on the filtered starting stations."], "pred_sql": "SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude FROM station WHERE id IN (SELECT start_station_id FROM trip);", "gold_sql": "SELECT avg(T1.lat) ,  avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id", "source_tables": ["trip", "station"]}
{"sample_id": 213, "db_id": "book_2", "question": "How many books are there?", "rationale": ["The user wants to know how many books are there, which requires counting the number of entries in the 'book' table.", "To count the number of books, we will use the COUNT() function in SQL.", "We will select from the 'book' table, which contains the information about the books.", "The final SQL query will be 'SELECT COUNT(*) AS total_books FROM book;' to get the total count of books."], "pred_sql": "SELECT COUNT(*) AS total_books FROM book;", "gold_sql": "SELECT count(*) FROM book", "source_tables": ["book"]}
{"sample_id": 214, "db_id": "book_2", "question": "List the writers of the books in ascending alphabetical order.", "rationale": ["Identify the relevant table: The 'book' table contains the 'Writer' column that we need to list.", "Select the 'Writer' column from the 'book' table: We need to retrieve the names of the writers.", "Use DISTINCT to ensure that each writer is listed only once: This avoids duplicates in the result set.", "Order the results in ascending alphabetical order: We need to sort the writers alphabetically.", "Construct the SQL query: Combine all the elements into a valid SQL SELECT statement."], "pred_sql": "SELECT DISTINCT b.Writer FROM book b ORDER BY b.Writer ASC;", "gold_sql": "SELECT Writer FROM book ORDER BY Writer ASC", "source_tables": ["book"]}
{"sample_id": 215, "db_id": "book_2", "question": "List the titles of the books in ascending order of issues.", "rationale": ["Identify the table that contains the book titles, which is the 'book' table.", "Determine the column that contains the book titles, which is 'Title'.", "Identify the column that contains the number of issues, which is 'Issues'.", "Construct the SQL query to select the 'Title' from the 'book' table and order the results by 'Issues' in ascending order."], "pred_sql": "SELECT Title FROM book ORDER BY Issues ASC;", "gold_sql": "SELECT Title FROM book ORDER BY Issues ASC", "source_tables": ["book"]}
{"sample_id": 216, "db_id": "book_2", "question": "What are the titles of the books whose writer is not \"Elaine Lee\"?", "rationale": ["Identify the relevant table: The query is asking for book titles, so we will focus on the 'book' table.", "Determine the condition: We need to filter the results where the writer is not 'Elaine Lee'.", "Construct the SQL SELECT statement: We will select the 'Title' column from the 'book' table.", "Add the WHERE clause: We will include a condition to exclude books written by 'Elaine Lee'."], "pred_sql": "SELECT book.Title FROM book WHERE book.Writer != 'Elaine Lee';", "gold_sql": "SELECT Title FROM book WHERE Writer != 'Elaine Lee'", "source_tables": ["book"]}
{"sample_id": 217, "db_id": "book_2", "question": "What are the title and issues of the books?", "rationale": ["Identify the required information: the title and issues of the books.", "Determine the relevant table: the 'book' table contains the 'Title' and 'Issues' columns.", "Construct the SQL SELECT statement to retrieve 'Title' and 'Issues' from the 'book' table."], "pred_sql": "SELECT Title, Issues FROM book;", "gold_sql": "SELECT Title ,  Issues FROM book", "source_tables": ["book"]}
{"sample_id": 218, "db_id": "book_2", "question": "What are the dates of publications in descending order of price?", "rationale": ["Identify the required data: We need the publication dates from the publication table.", "Determine the order: The results should be sorted in descending order based on the price.", "Construct the SQL query: Use SELECT to get the Publication_Date and ORDER BY to sort by Price in descending order."], "pred_sql": "SELECT Publication_Date FROM publication ORDER BY Price DESC;", "gold_sql": "SELECT Publication_Date FROM publication ORDER BY Price DESC", "source_tables": ["publication"]}
{"sample_id": 219, "db_id": "book_2", "question": "What are the distinct publishers of publications with price higher than 5000000?", "rationale": ["Identify the table that contains the publisher information, which is the 'publication' table.", "Determine the condition for filtering the records, which is that the price must be higher than 5000000.", "Use the DISTINCT keyword to ensure that only unique publishers are returned.", "Construct the SQL query to select the distinct publishers from the 'publication' table where the price condition is met."], "pred_sql": "SELECT DISTINCT Publisher FROM publication WHERE Price > '5000000';", "gold_sql": "SELECT DISTINCT Publisher FROM publication WHERE Price  >  5000000", "source_tables": ["publication"]}
{"sample_id": 220, "db_id": "book_2", "question": "List the publisher of the publication with the highest price.", "rationale": ["Identify the table that contains the publisher information, which is the 'publication' table.", "Determine that we need to find the publication with the highest price.", "Use a subquery to find the maximum price from the 'publication' table.", "Select the publisher from the 'publication' table where the price matches the maximum price found in the subquery."], "pred_sql": "SELECT Publisher FROM publication WHERE Price = (SELECT MAX(Price) FROM publication)", "gold_sql": "SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1", "source_tables": ["publication"]}
{"sample_id": 221, "db_id": "book_2", "question": "List the publication dates of publications with 3 lowest prices.", "rationale": ["Identify the table that contains the publication dates, which is the 'publication' table.", "Determine that we need to retrieve the 'Publication_Date' column from the 'publication' table.", "To find the publications with the lowest prices, we need to sort the results by the 'Price' column in ascending order.", "Since we only want the 3 lowest prices, we will use the LIMIT clause to restrict the results to 3 entries."], "pred_sql": "SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3;", "gold_sql": "SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3", "source_tables": ["publication"]}
{"sample_id": 222, "db_id": "book_2", "question": "Show the title and publication dates of books.", "rationale": ["Identify the required columns: Title from the book table and Publication_Date from the publication table.", "Determine the relationship between the tables: The book table and publication table are linked by the Book_ID column.", "Construct the SQL SELECT statement to retrieve the Title and Publication_Date.", "Use a JOIN clause to combine the two tables based on the Book_ID foreign key relationship."], "pred_sql": "SELECT book.Title, publication.Publication_Date FROM book JOIN publication ON book.Book_ID = publication.Book_ID;", "gold_sql": "SELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID", "source_tables": ["publication", "book"]}
{"sample_id": 223, "db_id": "book_2", "question": "Show writers who have published a book with price more than 4000000.", "rationale": ["Identify the tables involved: 'book' and 'publication'.", "Determine the relationship between the tables: 'publication' has a foreign key 'Book_ID' that references 'book'.", "Select the 'Writer' from the 'book' table, as we need to show writers.", "Join the 'book' table with the 'publication' table on 'Book_ID' to access publication details for each book.", "Filter the results where the 'Price' in the 'publication' table is greater than 4000000.", "Use DISTINCT to ensure that each writer is listed only once in the results."], "pred_sql": "SELECT DISTINCT b.Writer \nFROM book b \nJOIN publication p ON b.Book_ID = p.Book_ID \nWHERE p.Price > '4000000';", "gold_sql": "SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  4000000", "source_tables": ["publication", "book"]}
{"sample_id": 224, "db_id": "book_2", "question": "Show the titles of books in descending order of publication price.", "rationale": ["Identify the tables involved: 'book' and 'publication'.", "Determine the columns needed: 'Title' from 'book' and 'Price' from 'publication'.", "Establish the relationship between the tables using the foreign key: 'publication.Book_ID' = 'book.Book_ID'.", "Formulate the SELECT statement to retrieve the 'Title' from the 'book' table.", "Add a JOIN clause to combine 'book' and 'publication' based on the Book_ID.", "Include an ORDER BY clause to sort the results by 'Price' in descending order."], "pred_sql": "SELECT book.Title FROM book JOIN publication ON book.Book_ID = publication.Book_ID ORDER BY publication.Price DESC;", "gold_sql": "SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Price DESC", "source_tables": ["publication", "book"]}
{"sample_id": 225, "db_id": "book_2", "question": "Show publishers that have more than one publication.", "rationale": ["Identify the relevant table: The 'publication' table contains the 'Publisher' and 'Publication_ID' columns.", "We need to find publishers with more than one publication, which means we need to group the results by 'Publisher'.", "Use the COUNT function to count the number of publications for each publisher.", "Apply the HAVING clause to filter the groups where the count of publications is greater than one."], "pred_sql": "SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(Publication_ID) > 1;", "gold_sql": "SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1", "source_tables": ["publication"]}
{"sample_id": 226, "db_id": "book_2", "question": "Show different publishers together with the number of publications they have.", "rationale": ["Identify the relevant table: The 'publication' table contains the 'Publisher' and 'Publication_ID' columns needed for this query.", "Select the 'Publisher' column to display the names of different publishers.", "Use the COUNT() function to count the number of publications for each publisher, which will be represented as 'Number_of_Publications'.", "Group the results by 'Publisher' to ensure that the count is calculated for each unique publisher."], "pred_sql": "SELECT Publisher, COUNT(Publication_ID) AS Number_of_Publications FROM publication GROUP BY Publisher;", "gold_sql": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher", "source_tables": ["publication"]}
{"sample_id": 227, "db_id": "book_2", "question": "Please show the most common publication date.", "rationale": ["Identify the relevant table: The query requires information about publication dates, so we will use the 'publication' table.", "Determine the required data: We need to find the most common publication date, which involves counting occurrences of each publication date.", "Use the COUNT function: To find the most common date, we will count how many times each publication date appears.", "Group the results: We will group the results by 'Publication_Date' to aggregate the counts for each date.", "Order the results: To find the most common date, we will order the results by the count in descending order.", "Limit the results: Since we only want the most common publication date, we will limit the results to 1."], "pred_sql": "SELECT Publication_Date, COUNT(*) as count FROM publication GROUP BY Publication_Date ORDER BY count DESC LIMIT 1;", "gold_sql": "SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["publication"]}
{"sample_id": 228, "db_id": "book_2", "question": "List the writers who have written more than one book.", "rationale": ["Identify the relevant table: The 'book' table contains information about the writers and the books they have written.", "Determine the necessary columns: We need the 'Writer' column to identify the writers.", "Group the results: Use GROUP BY on the 'Writer' column to aggregate the data by each writer.", "Count the number of books per writer: Use COUNT(Book_ID) to count how many books each writer has written.", "Filter the results: Use HAVING to filter the groups to only include those where the count of books is greater than one."], "pred_sql": "SELECT Writer FROM book GROUP BY Writer HAVING COUNT(Book_ID) > 1;", "gold_sql": "SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  1", "source_tables": ["book"]}
{"sample_id": 229, "db_id": "book_2", "question": "List the titles of books that are not published.", "rationale": ["Identify the tables involved: 'book' and 'publication'.", "We need to find books that are not published, which means we need to look for books whose Book_ID does not exist in the publication table.", "Use a subquery to select all Book_IDs from the publication table.", "Select the Title from the book table where the Book_ID is not in the list of Book_IDs from the publication table."], "pred_sql": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication);", "gold_sql": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)", "source_tables": ["publication", "book"]}
{"sample_id": 230, "db_id": "book_2", "question": "Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000.", "rationale": ["Identify the relevant table: The query requires information about publishers, which is found in the 'publication' table.", "Determine the conditions: We need to find publishers with publications that have a price higher than 10000000 or lower than 5000000.", "Use the SELECT statement: We will select the distinct publishers from the 'publication' table to avoid duplicates.", "Apply the WHERE clause: We will filter the results based on the price conditions specified in the query."], "pred_sql": "SELECT DISTINCT p.Publisher FROM publication p WHERE p.Price > '10000000' OR p.Price < '5000000';", "gold_sql": "SELECT Publisher FROM publication WHERE Price  >  10000000 INTERSECT SELECT Publisher FROM publication WHERE Price  <  5000000", "source_tables": ["publication"]}
{"sample_id": 231, "db_id": "book_2", "question": "What is the number of distinct publication dates?", "rationale": ["Identify the requirement to count distinct publication dates.", "Determine the relevant table, which is 'publication', that contains the 'Publication_Date' column.", "Use the COUNT function to count the distinct values in the 'Publication_Date' column.", "Construct the SQL query to select the count of distinct publication dates from the publication table."], "pred_sql": "SELECT COUNT(DISTINCT Publication_Date) AS distinct_publication_dates FROM publication;", "gold_sql": "SELECT COUNT (DISTINCT Publication_Date) FROM publication", "source_tables": ["publication"]}
{"sample_id": 232, "db_id": "book_2", "question": "How many distinct publication dates are there in our record?", "rationale": ["Identify the requirement to count distinct publication dates.", "Determine the relevant table, which is 'publication', that contains the 'Publication_Date' column.", "Use the COUNT function to count the distinct values in the 'Publication_Date' column.", "Construct the SQL query to select the count of distinct publication dates from the publication table."], "pred_sql": "SELECT COUNT(DISTINCT Publication_Date) AS Distinct_Publication_Dates FROM publication;", "gold_sql": "SELECT COUNT (DISTINCT Publication_Date) FROM publication", "source_tables": ["publication"]}
{"sample_id": 233, "db_id": "book_2", "question": "Show the prices of publications whose publisher is either \"Person\" or \"Wiley\"", "rationale": ["Identify the table that contains the relevant data: the 'publication' table has the 'Price' and 'Publisher' columns.", "Determine the condition for filtering: we need to find publications where the publisher is either 'Person' or 'Wiley'.", "Use the SQL 'SELECT' statement to specify that we want to retrieve the 'Price' column.", "Use the 'WHERE' clause to filter the results based on the publisher names, utilizing the 'IN' operator for multiple values."], "pred_sql": "SELECT Price FROM publication WHERE Publisher IN ('Person', 'Wiley');", "gold_sql": "SELECT Price FROM publication WHERE Publisher  =  'Person' OR Publisher  =  'Wiley'", "source_tables": ["publication"]}
{"sample_id": 234, "db_id": "musical", "question": "How many actors are there?", "rationale": ["Identify the table that contains actor information, which is the 'actor' table.", "To find out how many actors there are, we need to count the number of entries in the 'actor' table.", "Use the COUNT() function to count all rows in the 'actor' table.", "Select the count with an alias 'ActorCount' for clarity."], "pred_sql": "SELECT COUNT(*) AS ActorCount FROM actor;", "gold_sql": "SELECT count(*) FROM actor", "source_tables": ["actor"]}
{"sample_id": 235, "db_id": "musical", "question": "Count the number of actors.", "rationale": ["Identify the requirement to count the number of actors.", "Determine the appropriate table to query, which is the 'actor' table.", "Use the COUNT() function to count the total number of entries in the 'actor' table.", "Construct the SQL query to select the count from the 'actor' table."], "pred_sql": "SELECT COUNT(*) AS NumberOfActors FROM actor;", "gold_sql": "SELECT count(*) FROM actor", "source_tables": ["actor"]}
{"sample_id": 236, "db_id": "musical", "question": "List the name of actors in ascending alphabetical order.", "rationale": ["Identify the table that contains the actor names, which is the 'actor' table.", "Determine the column that holds the names of the actors, which is 'Name'.", "Specify that we want to select the 'Name' column from the 'actor' table.", "To list the names in ascending alphabetical order, use the ORDER BY clause with 'Name ASC'."], "pred_sql": "SELECT Name FROM actor ORDER BY Name ASC;", "gold_sql": "SELECT Name FROM actor ORDER BY Name ASC", "source_tables": ["actor"]}
{"sample_id": 237, "db_id": "musical", "question": "What are the names of actors, ordered alphabetically?", "rationale": ["Identify the table that contains the information about actors, which is the 'actor' table.", "Determine the column that contains the names of the actors, which is the 'Name' column.", "Construct a SQL SELECT statement to retrieve the 'Name' column from the 'actor' table.", "Add an ORDER BY clause to sort the results alphabetically by the 'Name' column."], "pred_sql": "SELECT Name FROM actor ORDER BY Name ASC;", "gold_sql": "SELECT Name FROM actor ORDER BY Name ASC", "source_tables": ["actor"]}
{"sample_id": 238, "db_id": "musical", "question": "What are the characters and duration of actors?", "rationale": ["Identify the required information: characters and duration of actors.", "Determine the relevant table: the 'actor' table contains both 'Character' and 'Duration' columns.", "Construct the SQL SELECT statement to retrieve 'Character' and 'Duration' from the 'actor' table."], "pred_sql": "SELECT Character, Duration FROM actor;", "gold_sql": "SELECT Character ,  Duration FROM actor", "source_tables": ["actor"]}
{"sample_id": 239, "db_id": "musical", "question": "Return the characters and durations for each actor.", "rationale": ["Identify the table that contains the required information: The 'actor' table contains the 'Character' and 'Duration' columns.", "Formulate the SQL SELECT statement to retrieve the 'Character' and 'Duration' columns from the 'actor' table."], "pred_sql": "SELECT Character, Duration FROM actor;", "gold_sql": "SELECT Character ,  Duration FROM actor", "source_tables": ["actor"]}
{"sample_id": 240, "db_id": "musical", "question": "List the name of actors whose age is not 20.", "rationale": ["Identify the table to query: The 'actor' table contains the relevant information about actors.", "Determine the specific column needed: We need the 'Name' column to list the names of the actors.", "Specify the condition: We want to filter actors whose age is not 20, which translates to 'age != 20' in SQL.", "Construct the SQL query: Combine the SELECT statement with the WHERE clause to form the complete SQL query."], "pred_sql": "SELECT Name FROM actor WHERE age != 20;", "gold_sql": "SELECT Name FROM actor WHERE Age != 20", "source_tables": ["actor"]}
{"sample_id": 241, "db_id": "musical", "question": "What are the names of actors who are not 20 years old?", "rationale": ["Identify the table that contains the information about actors, which is the 'actor' table.", "Determine the column that contains the names of the actors, which is the 'Name' column.", "Identify the column that contains the age of the actors, which is the 'age' column.", "Formulate a SQL query to select the 'Name' from the 'actor' table where the 'age' is not equal to 20."], "pred_sql": "SELECT Name FROM actor WHERE age != 20;", "gold_sql": "SELECT Name FROM actor WHERE Age != 20", "source_tables": ["actor"]}
{"sample_id": 242, "db_id": "musical", "question": "What are the characters of actors in descending order of age?", "rationale": ["Identify the table that contains the character information, which is the 'actor' table.", "Determine the relevant column for characters, which is 'Character'.", "Identify the column that contains the age of the actors, which is 'age'.", "Construct the SQL query to select the 'Character' column from the 'actor' table.", "Add an ORDER BY clause to sort the results by 'age' in descending order."], "pred_sql": "SELECT Character FROM actor ORDER BY age DESC;", "gold_sql": "SELECT Character FROM actor ORDER BY age DESC", "source_tables": ["actor"]}
{"sample_id": 243, "db_id": "musical", "question": "Return the characters for actors, ordered by age descending.", "rationale": ["Identify the table that contains the character information, which is the 'actor' table.", "Determine the columns needed for the query; we need 'Character' and 'age'.", "Specify that we want to select the 'Character' column from the 'actor' table.", "Add an ORDER BY clause to sort the results by 'age' in descending order."], "pred_sql": "SELECT Character FROM actor ORDER BY age DESC;", "gold_sql": "SELECT Character FROM actor ORDER BY age DESC", "source_tables": ["actor"]}
{"sample_id": 244, "db_id": "musical", "question": "What is the duration of the oldest actor?", "rationale": ["Identify the relevant table: The 'actor' table contains the 'Duration' and 'age' columns.", "Determine the requirement: We need to find the duration of the oldest actor.", "To find the oldest actor, we need to find the maximum age from the 'actor' table.", "Use a subquery to get the maximum age: (SELECT MAX(age) FROM actor) will give us the age of the oldest actor.", "Finally, select the 'Duration' from the 'actor' table where the age matches the maximum age found in the subquery."], "pred_sql": "SELECT Duration FROM actor WHERE age = (SELECT MAX(age) FROM actor);", "gold_sql": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1", "source_tables": ["actor"]}
{"sample_id": 245, "db_id": "musical", "question": "Return the duration of the actor with the greatest age.", "rationale": ["Identify the table that contains the relevant data, which is the 'actor' table.", "We need to find the actor with the greatest age, so we will use a subquery to find the maximum age in the 'actor' table.", "Once we have the maximum age, we will select the 'Duration' of the actor(s) who has that age.", "The final SQL query will select the 'Duration' from the 'actor' table where the 'age' is equal to the maximum age found in the subquery."], "pred_sql": "SELECT Duration FROM actor WHERE age = (SELECT MAX(age) FROM actor);", "gold_sql": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1", "source_tables": ["actor"]}
{"sample_id": 246, "db_id": "musical", "question": "What are the names of musicals with nominee \"Bob Fosse\"?", "rationale": ["Identify the table that contains the information about musicals, which is the 'musical' table.", "Determine the relevant column that contains the names of the musicals, which is the 'Name' column.", "Identify the condition needed to filter the results, which is that the 'Nominee' column must equal 'Bob Fosse'.", "Construct the SQL query to select the 'Name' from the 'musical' table where the 'Nominee' is 'Bob Fosse'."], "pred_sql": "SELECT Name FROM musical WHERE Nominee = 'Bob Fosse';", "gold_sql": "SELECT Name FROM musical WHERE Nominee  =  'Bob Fosse'", "source_tables": ["musical"]}
{"sample_id": 247, "db_id": "musical", "question": "Return the names of musicals who have the nominee Bob Fosse.", "rationale": ["Identify the table that contains the relevant information about musicals, which is the 'musical' table.", "Determine the column that holds the names of the musicals, which is 'Name'.", "Identify the column that contains the nominee's name, which is 'Nominee'.", "Construct a SQL query to select the 'Name' from the 'musical' table where the 'Nominee' is 'Bob Fosse'."], "pred_sql": "SELECT Name FROM musical WHERE Nominee = 'Bob Fosse';", "gold_sql": "SELECT Name FROM musical WHERE Nominee  =  'Bob Fosse'", "source_tables": ["musical"]}
{"sample_id": 248, "db_id": "musical", "question": "What are the distinct nominees of the musicals with the award that is not \"Tony Award\"?", "rationale": ["Identify the table that contains the nominees, which is the 'musical' table.", "We need to select distinct nominees, so we will use the SELECT DISTINCT statement.", "We need to filter the results to only include musicals that do not have the award 'Tony Award'.", "This requires a WHERE clause to specify the condition for the Award column.", "Combine these elements to form the complete SQL query."], "pred_sql": "SELECT DISTINCT Nominee FROM musical WHERE Award != 'Tony Award';", "gold_sql": "SELECT DISTINCT Nominee FROM musical WHERE Award != 'Tony Award'", "source_tables": ["musical"]}
{"sample_id": 249, "db_id": "musical", "question": "Return the different nominees of musicals that have an award that is not the Tony Award.", "rationale": ["Identify the table that contains the nominees, which is the 'musical' table.", "Determine the relevant column for nominees, which is 'Nominee'.", "Filter the results to exclude any musicals that have the award 'Tony Award'.", "Use the DISTINCT keyword to ensure that each nominee is listed only once."], "pred_sql": "SELECT DISTINCT Nominee FROM musical WHERE Award != 'Tony Award';", "gold_sql": "SELECT DISTINCT Nominee FROM musical WHERE Award != 'Tony Award'", "source_tables": ["musical"]}
{"sample_id": 250, "db_id": "musical", "question": "Show names of actors and names of musicals they are in.", "rationale": ["Identify the tables involved: 'actor' and 'musical'.", "Determine the columns needed: 'actor.Name' for actor names and 'musical.Name' for musical names.", "Establish the relationship between the tables using the foreign key: 'actor.Musical_ID' links to 'musical.Musical_ID'.", "Construct the SQL query using a JOIN to combine data from both tables based on the relationship established."], "pred_sql": "SELECT actor.Name AS Actor_Name, musical.Name AS Musical_Name FROM actor JOIN musical ON actor.Musical_ID = musical.Musical_ID;", "gold_sql": "SELECT T1.Name ,  T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID", "source_tables": ["actor", "musical"]}
{"sample_id": 251, "db_id": "musical", "question": "What are the names of actors and the musicals that they are in?", "rationale": ["Identify the tables involved: 'actor' and 'musical'.", "Determine the columns needed: 'actor.Name' for actor names and 'musical.Name' for musical names.", "Establish the relationship between the tables using the foreign key: 'actor.Musical_ID' links to 'musical.Musical_ID'.", "Construct the SQL query using a JOIN to combine data from both tables based on the relationship established."], "pred_sql": "SELECT actor.Name AS Actor_Name, musical.Name AS Musical_Name FROM actor JOIN musical ON actor.Musical_ID = musical.Musical_ID;", "gold_sql": "SELECT T1.Name ,  T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID", "source_tables": ["actor", "musical"]}
{"sample_id": 252, "db_id": "musical", "question": "Show names of actors that have appeared in musical with name \"The Phantom of the Opera\".", "rationale": ["Identify the tables involved: 'actor' and 'musical'.", "Determine the relationship between the tables: 'actor' has a foreign key 'Musical_ID' that links to 'musical'.", "Specify the condition: we want actors from the musical titled 'The Phantom of the Opera'.", "Construct the SQL query to select the actor names from the 'actor' table where the corresponding musical name matches 'The Phantom of the Opera'.", "Use a JOIN clause to combine data from both tables based on the 'Musical_ID'."], "pred_sql": "SELECT actor.Name FROM actor JOIN musical ON actor.Musical_ID = musical.Musical_ID WHERE musical.Name = 'The Phantom of the Opera';", "gold_sql": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  'The Phantom of the Opera'", "source_tables": ["actor", "musical"]}
{"sample_id": 253, "db_id": "musical", "question": "What are the names of actors who have been in the musical titled The Phantom of the Opera?", "rationale": ["Identify the relevant tables: 'actor' and 'musical'.", "Determine the relationship between the tables: 'actor' is linked to 'musical' through 'Musical_ID'.", "Specify the condition: we need to find actors from the musical titled 'The Phantom of the Opera'.", "Construct the SQL query to select the names of actors from the 'actor' table where the corresponding musical name in the 'musical' table matches 'The Phantom of the Opera'."], "pred_sql": "SELECT actor.Name FROM actor JOIN musical ON actor.Musical_ID = musical.Musical_ID WHERE musical.Name = 'The Phantom of the Opera';", "gold_sql": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  'The Phantom of the Opera'", "source_tables": ["actor", "musical"]}
{"sample_id": 254, "db_id": "musical", "question": "Show names of actors in descending order of the year their musical is awarded.", "rationale": ["Identify the tables involved: 'actor' and 'musical'.", "Determine the relationship between the tables: 'actor' is linked to 'musical' through 'Musical_ID'.", "Select the 'Name' column from the 'actor' table to get the names of the actors.", "Join the 'actor' table with the 'musical' table on 'Musical_ID' to access the year of the musical.", "Order the results by the 'Year' column from the 'musical' table in descending order to meet the requirement of showing actors based on the year their musical is awarded."], "pred_sql": "SELECT a.Name FROM actor a JOIN musical m ON a.Musical_ID = m.Musical_ID ORDER BY m.Year DESC;", "gold_sql": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC", "source_tables": ["actor", "musical"]}
{"sample_id": 255, "db_id": "musical", "question": "What are the names of actors ordered descending by the year in which their musical was awarded?", "rationale": ["Identify the tables involved: 'actor' and 'musical'.", "We need to retrieve the names of actors, so we will select 'a.Name' from the 'actor' table.", "To get the year in which their musical was awarded, we need to join the 'actor' table with the 'musical' table on 'Musical_ID'.", "We are only interested in musicals that have won awards, so we will filter the results where 'm.Result' is 'Won'.", "Finally, we need to order the results by the 'Year' column in descending order."], "pred_sql": "SELECT a.Name\nFROM actor a\nJOIN musical m ON a.Musical_ID = m.Musical_ID\nWHERE m.Result = 'Won'\nORDER BY m.Year DESC;", "gold_sql": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC", "source_tables": ["actor", "musical"]}
{"sample_id": 256, "db_id": "musical", "question": "Show names of musicals and the number of actors who have appeared in the musicals.", "rationale": ["Identify the tables involved: 'musical' for musical names and 'actor' for actor details.", "We need to count the number of actors associated with each musical, so we will use the COUNT() function.", "To link the two tables, we will use a LEFT JOIN on the 'Musical_ID' column, which is common to both tables.", "We will select the 'Name' from the 'musical' table and the count of 'Actor_ID' from the 'actor' table.", "Finally, we will group the results by the musical name to get the count of actors for each musical."], "pred_sql": "SELECT musical.Name, COUNT(actor.Actor_ID) AS NumberOfActors\nFROM musical\nLEFT JOIN actor ON musical.Musical_ID = actor.Musical_ID\nGROUP BY musical.Name;", "gold_sql": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID", "source_tables": ["actor", "musical"]}
{"sample_id": 257, "db_id": "musical", "question": "How many actors have appeared in each musical?", "rationale": ["Identify the tables involved: 'musical' and 'actor'.", "We need to count the number of actors for each musical, so we will use the COUNT() function.", "To relate actors to musicals, we will perform a LEFT JOIN on the 'musical' table and the 'actor' table using the 'Musical_ID'.", "We will group the results by the musical name to get the count of actors for each musical.", "The final query will select the musical name and the count of actors, using an alias for the count."], "pred_sql": "SELECT musical.Name, COUNT(actor.Actor_ID) AS Actor_Count FROM musical LEFT JOIN actor ON musical.Musical_ID = actor.Musical_ID GROUP BY musical.Name;", "gold_sql": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID", "source_tables": ["actor", "musical"]}
{"sample_id": 258, "db_id": "musical", "question": "Show names of musicals which have at least three actors.", "rationale": ["Identify the table that contains the names of musicals, which is the 'musical' table.", "Identify the table that contains the actors, which is the 'actor' table.", "To find musicals with at least three actors, we need to join the 'musical' table with the 'actor' table on the 'Musical_ID'.", "We will group the results by 'Musical_ID' to count the number of actors associated with each musical.", "Use the HAVING clause to filter the groups to only include those with a count of actors greater than or equal to 3."], "pred_sql": "SELECT m.Name \nFROM musical m \nJOIN actor a ON m.Musical_ID = a.Musical_ID \nGROUP BY m.Musical_ID \nHAVING COUNT(a.Actor_ID) >= 3;", "gold_sql": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3", "source_tables": ["actor", "musical"]}
{"sample_id": 259, "db_id": "musical", "question": "What are the names of musicals who have at 3 or more actors?", "rationale": ["Identify the table that contains the musical names, which is the 'musical' table.", "Identify the table that contains the actors, which is the 'actor' table.", "We need to join the 'musical' table with the 'actor' table on the 'Musical_ID' to link actors to their respective musicals.", "We need to group the results by 'Musical_ID' to count the number of actors associated with each musical.", "Use the COUNT function to count the number of actors for each musical and filter the results to include only those with 3 or more actors using the HAVING clause."], "pred_sql": "SELECT m.Name\nFROM musical m\nJOIN actor a ON m.Musical_ID = a.Musical_ID\nGROUP BY m.Musical_ID\nHAVING COUNT(a.Actor_ID) >= 3;", "gold_sql": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3", "source_tables": ["actor", "musical"]}
{"sample_id": 260, "db_id": "musical", "question": "Show different nominees and the number of musicals they have been nominated.", "rationale": ["Identify the relevant table: The 'musical' table contains information about nominees and their nominations.", "Determine the columns needed: We need the 'Nominee' column to list the nominees and we need to count the number of musicals they have been nominated for.", "Filter the results: We only want to include those entries where the 'Result' is 'Nominated'.", "Group the results: To get the count of musicals for each nominee, we will group the results by the 'Nominee' column.", "Count the nominations: Use the COUNT() function to count the number of 'Musical_ID' entries for each nominee."], "pred_sql": "SELECT Nominee, COUNT(Musical_ID) AS Number_of_Musicals FROM musical WHERE Result = 'Nominated' GROUP BY Nominee;", "gold_sql": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee", "source_tables": ["musical"]}
{"sample_id": 261, "db_id": "musical", "question": "How many musicals has each nominee been nominated for?", "rationale": ["Identify the relevant table: The 'musical' table contains information about nominations.", "Determine the relevant columns: We need the 'Nominee' column to identify each nominee and we will count the nominations using COUNT().", "Filter the results: We only want to count nominations, so we will filter for rows where 'Result' is 'Nominated'.", "Group the results: To get the count of nominations for each nominee, we will use GROUP BY on the 'Nominee' column."], "pred_sql": "SELECT Nominee, COUNT(*) AS Nomination_Count FROM musical WHERE Result = 'Nominated' GROUP BY Nominee;", "gold_sql": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee", "source_tables": ["musical"]}
{"sample_id": 262, "db_id": "musical", "question": "Please show the nominee who has been nominated the greatest number of times.", "rationale": ["Identify the relevant table: The 'musical' table contains the 'Nominee' column which we need to analyze.", "Count the nominations: We need to count how many times each nominee appears in the 'musical' table, which indicates how many times they have been nominated.", "Group by nominee: To get the count for each nominee, we will use the GROUP BY clause on the 'Nominee' column.", "Order the results: We want to find the nominee with the greatest number of nominations, so we will order the results in descending order based on the count of nominations.", "Limit the results: Since we only want the nominee with the greatest number of nominations, we will limit the results to 1."], "pred_sql": "SELECT Nominee, COUNT(*) AS Nomination_Count FROM musical GROUP BY Nominee ORDER BY Nomination_Count DESC LIMIT 1;", "gold_sql": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["musical"]}
{"sample_id": 263, "db_id": "musical", "question": "Who is the nominee who has been nominated for the most musicals?", "rationale": ["Identify the relevant table: The 'musical' table contains information about nominees and their nominations.", "Focus on the 'Nominee' column to find out who has been nominated.", "Count the number of nominations for each nominee using COUNT(*) and group the results by 'Nominee'.", "Filter the results to include only those with a 'Result' of 'Nominated'.", "Order the results in descending order based on the count of nominations to find the nominee with the most nominations.", "Limit the results to 1 to get the top nominee."], "pred_sql": "SELECT Nominee, COUNT(*) AS NominationCount FROM musical WHERE Result = 'Nominated' GROUP BY Nominee ORDER BY NominationCount DESC LIMIT 1;", "gold_sql": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["musical"]}
{"sample_id": 264, "db_id": "musical", "question": "List the most common result of the musicals.", "rationale": ["Identify the column that contains the results of the musicals, which is 'Result'.", "To find the most common result, we need to count the occurrences of each result. This can be done using the COUNT() function.", "We will group the results by the 'Result' column to aggregate the counts for each unique result.", "To get the most common result, we will order the results by the count in descending order.", "Finally, we will limit the results to 1 to get only the most common result."], "pred_sql": "SELECT Result, COUNT(*) as Count FROM musical GROUP BY Result ORDER BY Count DESC LIMIT 1;", "gold_sql": "SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["musical"]}
{"sample_id": 265, "db_id": "musical", "question": "Return the most frequent result across all musicals.", "rationale": ["Identify the column of interest: 'Result' from the 'musical' table, which indicates the outcome of nominations.", "Use the COUNT function to count the occurrences of each unique result.", "Group the results by the 'Result' column to aggregate the counts for each unique result.", "Order the results in descending order based on the frequency count to get the most frequent result at the top.", "Limit the results to 1 to return only the most frequent result."], "pred_sql": "SELECT Result, COUNT(*) as Frequency FROM musical GROUP BY Result ORDER BY Frequency DESC LIMIT 1;", "gold_sql": "SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1", "source_tables": ["musical"]}
{"sample_id": 266, "db_id": "musical", "question": "List the nominees that have been nominated more than two musicals.", "rationale": ["Identify the relevant table: The 'musical' table contains the nominees and their associated musicals.", "We need to count the number of distinct musicals each nominee has been nominated for.", "Use the GROUP BY clause to group the results by the 'Nominee' column.", "Use the COUNT function to count the distinct 'Musical_ID' for each nominee.", "Use the HAVING clause to filter the results to only include nominees with more than two nominations."], "pred_sql": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(DISTINCT Musical_ID) > 2;", "gold_sql": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2", "source_tables": ["musical"]}
{"sample_id": 267, "db_id": "musical", "question": "Who are the nominees who have been nominated more than two times?", "rationale": ["Identify the relevant table: The 'musical' table contains information about nominees.", "Determine the criteria: We need to find nominees who have been nominated more than two times.", "Use the COUNT function: We will count the number of nominations for each nominee.", "Filter for nominations: We will only consider rows where the Result is 'Nominated'.", "Group the results: We will group the results by the Nominee to aggregate the counts.", "Apply the HAVING clause: We will filter the grouped results to include only those with a count greater than 2."], "pred_sql": "SELECT Nominee, COUNT(*) as NominationCount FROM musical WHERE Result = 'Nominated' GROUP BY Nominee HAVING COUNT(*) > 2;", "gold_sql": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2", "source_tables": ["musical"]}
{"sample_id": 268, "db_id": "musical", "question": "List the name of musicals that do not have actors.", "rationale": ["Identify the table that contains the musicals, which is the 'musical' table.", "We need to find musicals that do not have any associated actors, which means we need to check the 'actor' table for any entries linked to the 'musical' table.", "To find musicals without actors, we can use a subquery to select all Musical_IDs from the 'actor' table.", "We will then select the names of musicals from the 'musical' table where the Musical_ID is not in the list of Musical_IDs returned by the subquery."], "pred_sql": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT DISTINCT Musical_ID FROM actor);", "gold_sql": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)", "source_tables": ["actor", "musical"]}
{"sample_id": 269, "db_id": "musical", "question": "What are the names of musicals who have no actors?", "rationale": ["Identify the table that contains the musicals, which is the 'musical' table.", "We need to find musicals that have no associated actors, which means we need to check the 'actor' table for any entries linked to the 'musical' table.", "To find musicals with no actors, we can use a subquery that selects all distinct 'Musical_ID' from the 'actor' table.", "We will then select the 'Name' of musicals from the 'musical' table where the 'Musical_ID' is not in the list of 'Musical_IDs' returned by the subquery."], "pred_sql": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT DISTINCT Musical_ID FROM actor);", "gold_sql": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)", "source_tables": ["actor", "musical"]}
{"sample_id": 270, "db_id": "musical", "question": "Show the nominees that have nominated musicals for both \"Tony Award\" and \"Drama Desk Award\".", "rationale": ["Identify the relevant table: The 'musical' table contains information about nominees and their associated awards.", "Determine the awards of interest: We are looking for nominees associated with both 'Tony Award' and 'Drama Desk Award'.", "Use the SQL SELECT statement to retrieve the 'Nominee' column from the 'musical' table.", "Apply a WHERE clause to filter the results to only include rows where the 'Award' is either 'Tony Award' or 'Drama Desk Award'.", "Group the results by 'Nominee' to aggregate the data for each nominee.", "Use the HAVING clause to ensure that we only include nominees who have nominations for both awards, which means they should appear in the results for both awards (count of distinct awards should be 2).", "Select distinct nominees to avoid duplicates in the final output."], "pred_sql": "SELECT DISTINCT Nominee FROM musical WHERE Award IN ('Tony Award', 'Drama Desk Award') GROUP BY Nominee HAVING COUNT(DISTINCT Award) = 2;", "gold_sql": "SELECT Nominee FROM musical WHERE Award  =  'Tony Award' INTERSECT SELECT Nominee FROM musical WHERE Award  =  'Drama Desk Award'", "source_tables": ["musical"]}
{"sample_id": 271, "db_id": "musical", "question": "Who are the nominees who have been nominated for both a Tony Award and a Drama Desk Award?", "rationale": ["Identify the relevant table: The 'musical' table contains information about awards and nominees.", "Determine the criteria: We need to find nominees who have been nominated for both a 'Tony Award' and a 'Drama Desk Award'.", "Use the 'Award' column to filter for the two specific awards.", "Select distinct nominees to avoid duplicates.", "Group the results by nominee to count the number of different awards each nominee has been nominated for.", "Use the HAVING clause to ensure that only those nominees who have been nominated for both awards (count of distinct awards = 2) are included in the final result."], "pred_sql": "SELECT DISTINCT Nominee FROM musical WHERE Award IN ('Tony Award', 'Drama Desk Award') GROUP BY Nominee HAVING COUNT(DISTINCT Award) = 2;", "gold_sql": "SELECT Nominee FROM musical WHERE Award  =  'Tony Award' INTERSECT SELECT Nominee FROM musical WHERE Award  =  'Drama Desk Award'", "source_tables": ["musical"]}
{"sample_id": 272, "db_id": "musical", "question": "Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\".", "rationale": ["Identify the relevant table: The query pertains to the 'musical' table since it involves awards and nominees.", "Determine the columns needed: We need the 'Name' of the musical and the 'Nominee' associated with the specified awards.", "Specify the condition: We are interested in records where the 'Award' is either 'Bob Fosse' or 'Cleavant Derricks'.", "Construct the SQL query: Use a SELECT statement to retrieve the 'Name' and 'Nominee' from the 'musical' table with a WHERE clause to filter the awards."], "pred_sql": "SELECT Name, Nominee FROM musical WHERE Award IN ('Bob Fosse', 'Cleavant Derricks');", "gold_sql": "SELECT Nominee FROM musical WHERE Award  =  'Tony Award' OR Award  =  'Cleavant Derricks'", "source_tables": ["musical"]}
{"sample_id": 273, "db_id": "musical", "question": "Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards?", "rationale": ["Identify the relevant table: The 'musical' table contains information about awards and nominees.", "Determine the columns needed: We need the 'Nominee' column to list the nominees.", "Filter the results: We want nominees who were nominated for either 'Bob Fosse' or 'Cleavant Derricks' awards.", "Specify the condition for nomination: We need to ensure that the 'Result' is 'Nominated'.", "Construct the SQL query: Use SELECT to get distinct nominees from the 'musical' table where the award is either 'Bob Fosse' or 'Cleavant Derricks' and the result is 'Nominated'."], "pred_sql": "SELECT DISTINCT Nominee FROM musical WHERE Award IN ('Bob Fosse', 'Cleavant Derricks') AND Result = 'Nominated';", "gold_sql": "SELECT Nominee FROM musical WHERE Award  =  'Tony Award' OR Award  =  'Cleavant Derricks'", "source_tables": ["musical"]}
{"sample_id": 274, "db_id": "twitter_1", "question": "Find the emails of the user named \"Mary\".", "rationale": ["Identify the table that contains the email information, which is the user_profiles table.", "Determine the column that contains the user's name, which is also in the user_profiles table.", "Formulate a query to select the email column from the user_profiles table where the name matches 'Mary'."], "pred_sql": "SELECT email FROM user_profiles WHERE name = 'Mary';", "gold_sql": "SELECT email FROM user_profiles WHERE name  =  'Mary'", "source_tables": ["user_profiles"]}
{"sample_id": 275, "db_id": "twitter_1", "question": "What is the partition id of the user named \"Iron Man\".", "rationale": ["Identify the table that contains the user information, which is 'user_profiles'.", "Determine the column that contains the user's name, which is 'name'.", "Identify the column that contains the partition id, which is 'partitionid'.", "Construct a SQL query to select 'partitionid' from 'user_profiles' where 'name' matches 'Iron Man'."], "pred_sql": "SELECT partitionid FROM user_profiles WHERE name = 'Iron Man';", "gold_sql": "SELECT partitionid FROM user_profiles WHERE name  =  'Iron Man'", "source_tables": ["user_profiles"]}
{"sample_id": 276, "db_id": "twitter_1", "question": "How many users are there?", "rationale": ["Identify the table that contains user information, which is 'user_profiles'.", "To find the total number of users, we need to count the entries in the 'user_profiles' table.", "Use the COUNT() function to count all rows in the 'user_profiles' table.", "Construct the SQL query to select the count of users from the 'user_profiles' table."], "pred_sql": "SELECT COUNT(*) AS user_count FROM user_profiles;", "gold_sql": "SELECT count(*) FROM user_profiles", "source_tables": ["user_profiles"]}
{"sample_id": 277, "db_id": "twitter_1", "question": "How many followers does each user have?", "rationale": ["Identify the table that contains the follower information, which is the user_profiles table.", "Select the columns that are relevant to the query: 'uid' for the user identifier and 'followers' for the number of followers.", "Construct the SQL query to select these columns from the user_profiles table."], "pred_sql": "SELECT uid, followers FROM user_profiles;", "gold_sql": "SELECT count(*) FROM follows", "source_tables": ["follows"]}
{"sample_id": 278, "db_id": "twitter_1", "question": "Find the number of followers for each user.", "rationale": ["Identify the table that contains the number of followers for each user, which is the user_profiles table.", "Select the columns uid (user identifier) and followers (number of followers) from the user_profiles table.", "Construct the SQL query to retrieve the uid and followers for each user."], "pred_sql": "SELECT uid, followers FROM user_profiles;", "gold_sql": "SELECT count(*) FROM follows GROUP BY f1", "source_tables": ["follows"]}
{"sample_id": 279, "db_id": "twitter_1", "question": "Find the number of tweets in record.", "rationale": ["Identify the table that contains the tweets, which is the 'tweets' table.", "To find the number of tweets, we need to count the entries in the 'tweets' table.", "Use the COUNT() function to count all rows in the 'tweets' table.", "Select the count and alias it as 'tweet_count' for clarity."], "pred_sql": "SELECT COUNT(*) AS tweet_count FROM tweets;", "gold_sql": "SELECT count(*) FROM tweets", "source_tables": ["tweets"]}
{"sample_id": 280, "db_id": "twitter_1", "question": "Find the number of users who posted some tweets.", "rationale": ["Identify the table that contains the information about users who posted tweets, which is the 'tweets' table.", "To find the number of unique users who posted tweets, we need to count distinct user identifiers (uid) in the 'tweets' table.", "The SQL query will use the COUNT function along with DISTINCT to ensure we only count unique user IDs.", "The final SQL query will select the count of distinct user IDs from the 'tweets' table."], "pred_sql": "SELECT COUNT(DISTINCT uid) AS number_of_users FROM tweets;", "gold_sql": "SELECT count(DISTINCT UID) FROM tweets", "source_tables": ["tweets"]}
{"sample_id": 281, "db_id": "twitter_1", "question": "Find the name and email of the user whose name contains the word \u2018Swift\u2019.", "rationale": ["Identify the table that contains user names and emails, which is the user_profiles table.", "Determine the columns needed for the output, which are name and email.", "Formulate a condition to filter users whose name contains the word 'Swift'.", "Use the SQL LIKE operator with wildcards to match any name containing 'Swift'.", "Construct the final SQL query to select the desired columns from the user_profiles table with the specified condition."], "pred_sql": "SELECT name, email FROM user_profiles WHERE name LIKE '%Swift%';", "gold_sql": "SELECT name ,  email FROM user_profiles WHERE name LIKE '%Swift%'", "source_tables": ["user_profiles"]}
{"sample_id": 282, "db_id": "twitter_1", "question": "Find the names of users whose emails contain \u2018superstar\u2019 or \u2018edu\u2019.", "rationale": ["Identify the table that contains user information, which is 'user_profiles'.", "Determine the relevant column for user names, which is 'name'.", "Identify the column that contains email addresses, which is 'email'.", "Formulate the condition to filter emails that contain 'superstar' or 'edu' using the LIKE operator with wildcards.", "Combine the selected column and the condition to create the SQL SELECT statement."], "pred_sql": "SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%';", "gold_sql": "SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'", "source_tables": ["user_profiles"]}
{"sample_id": 283, "db_id": "twitter_1", "question": "Return the text of tweets about the topic 'intern'.", "rationale": ["Identify the table that contains the tweets, which is the 'tweets' table.", "Determine the column that contains the content of the tweets, which is 'text'.", "Formulate a query to select the 'text' column from the 'tweets' table.", "Add a condition to filter the tweets that contain the word 'intern' in the 'text' column using the LIKE operator."], "pred_sql": "SELECT text FROM tweets WHERE text LIKE '%intern%';", "gold_sql": "SELECT text FROM tweets WHERE text LIKE '%intern%'", "source_tables": ["tweets"]}
{"sample_id": 284, "db_id": "twitter_1", "question": "Find the name and email of the users who have more than 1000 followers.", "rationale": ["Identify the table that contains the required information: user_profiles.", "Determine the columns needed: name and email.", "Apply the condition to filter users with more than 1000 followers using the followers column."], "pred_sql": "SELECT name, email FROM user_profiles WHERE followers > 1000;", "gold_sql": "SELECT name ,  email FROM user_profiles WHERE followers  >  1000", "source_tables": ["user_profiles"]}
{"sample_id": 285, "db_id": "twitter_1", "question": "Find the names of the users whose number of followers is greater than that of the user named \"Tyler Swift\".", "rationale": ["Identify the user 'Tyler Swift' to find their follower count.", "Use a subquery to get the number of followers for 'Tyler Swift'.", "Select names from the user_profiles table where the number of followers is greater than the count obtained from the subquery."], "pred_sql": "SELECT up.name FROM user_profiles up WHERE up.followers > (SELECT up2.followers FROM user_profiles up2 WHERE up2.name = 'Tyler Swift')", "gold_sql": "SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  (SELECT count(*) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 WHERE T1.name  =  'Tyler Swift')", "source_tables": ["follows", "user_profiles"]}
{"sample_id": 286, "db_id": "twitter_1", "question": "Find the name and email for the users who have more than one follower.", "rationale": ["Identify the table that contains the user information, which is 'user_profiles'.", "Determine the columns needed for the output, which are 'name' and 'email'.", "Identify the condition for filtering users, which is having more than one follower. This is represented by the 'followers' column in the 'user_profiles' table.", "Construct the SQL query using the SELECT statement to retrieve 'name' and 'email' from 'user_profiles' where 'followers' is greater than 1."], "pred_sql": "SELECT name, email FROM user_profiles WHERE followers > 1;", "gold_sql": "SELECT T1.name ,  T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  1", "source_tables": ["follows", "user_profiles"]}
{"sample_id": 287, "db_id": "twitter_1", "question": "Find the names of users who have more than one tweet.", "rationale": ["Identify the relevant tables: user_profiles and tweets.", "We need to find users who have posted more than one tweet, so we will join the user_profiles table with the tweets table on the user ID (uid).", "We will group the results by user ID to aggregate the tweets for each user.", "Using the HAVING clause, we will filter the groups to include only those users who have more than one tweet, which is determined by counting the tweet IDs (t.id).", "Finally, we will select the names of these users from the user_profiles table."], "pred_sql": "SELECT up.name FROM user_profiles up JOIN tweets t ON up.uid = t.uid GROUP BY up.uid HAVING COUNT(t.id) > 1;", "gold_sql": "SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1", "source_tables": ["tweets", "user_profiles"]}
{"sample_id": 288, "db_id": "twitter_1", "question": "Find the id of users who are followed by Mary and Susan.", "rationale": ["Identify the users Mary and Susan by their names from the user_profiles table.", "Use a subquery to get the unique identifiers (uid) of Mary and Susan.", "Select the identifiers (f1) of users who are followed by either Mary or Susan from the follows table, where f2 matches the uids obtained from the subquery."], "pred_sql": "SELECT f1 FROM follows WHERE f2 IN (SELECT uid FROM user_profiles WHERE name IN ('Mary', 'Susan'));", "gold_sql": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  'Mary' INTERSECT SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  'Susan'", "source_tables": ["follows", "user_profiles"]}
{"sample_id": 289, "db_id": "twitter_1", "question": "Find the id of users who are followed by Mary or Susan.", "rationale": ["Identify the relevant tables: 'follows' for following relationships and 'user_profiles' for user details.", "We need to find users who are followed by either 'Mary' or 'Susan'.", "To do this, we will join the 'follows' table with the 'user_profiles' table on the user ID (uid).", "We will filter the results where the name of the user who is following (f2) is either 'Mary' or 'Susan'.", "Finally, we will select the 'f1' column from the 'follows' table, which represents the users being followed."], "pred_sql": "SELECT f1 FROM follows JOIN user_profiles ON follows.f2 = user_profiles.uid WHERE user_profiles.name IN ('Mary', 'Susan');", "gold_sql": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  'Mary' OR T1.name  =  'Susan'", "source_tables": ["follows", "user_profiles"]}
{"sample_id": 290, "db_id": "twitter_1", "question": "Find the name of the user who has the largest number of followers.", "rationale": ["Identify the table that contains the user names and their follower counts, which is the user_profiles table.", "We need to select the 'name' column from the user_profiles table.", "To find the user with the largest number of followers, we will order the results by the 'followers' column in descending order.", "To get only the user with the largest number of followers, we will limit the results to 1."], "pred_sql": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1;", "gold_sql": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1", "source_tables": ["user_profiles"]}
{"sample_id": 291, "db_id": "twitter_1", "question": "Find the name and email of the user followed by the least number of people.", "rationale": ["Identify the user_profiles table as it contains the name and email of users.", "To find the user followed by the least number of people, we need to look at the 'followers' column in the user_profiles table.", "We will order the users by the number of followers in ascending order to get the user with the least followers.", "Using a subquery, we select the uid of the user with the least followers and then use that uid to get the corresponding name and email from the user_profiles table."], "pred_sql": "SELECT name, email FROM user_profiles WHERE uid = (SELECT uid FROM user_profiles ORDER BY followers ASC LIMIT 1)", "gold_sql": "SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1", "source_tables": ["user_profiles"]}
{"sample_id": 292, "db_id": "twitter_1", "question": "List the name and number of followers for each user, and sort the results by the number of followers in descending order.", "rationale": ["We need to retrieve the name and number of followers for each user, which are found in the user_profiles table.", "The relevant columns for our query are 'name' and 'followers'.", "To get the desired results, we will select these two columns from the user_profiles table.", "Finally, we need to sort the results by the number of followers in descending order, which can be done using the ORDER BY clause with 'followers DESC'."], "pred_sql": "SELECT name, followers FROM user_profiles ORDER BY followers DESC;", "gold_sql": "SELECT name ,  followers FROM user_profiles ORDER BY followers DESC", "source_tables": ["user_profiles"]}
{"sample_id": 293, "db_id": "twitter_1", "question": "List the names of 5 users followed by the largest number of other users.", "rationale": ["Identify the table that contains user information: user_profiles.", "Identify the table that contains the following relationships: follows.", "We need to find users who are followed by the largest number of other users, which means we need to count how many times each user appears as 'f1' in the follows table.", "Join the user_profiles table with the follows table on the user ID (uid) to get the names of the users being followed.", "Group the results by the user ID to aggregate the count of followers for each user.", "Order the results by the count of followers in descending order to get the users with the most followers at the top.", "Limit the results to the top 5 users."], "pred_sql": "SELECT up.name FROM user_profiles up JOIN follows f ON up.uid = f.f1 GROUP BY up.uid ORDER BY COUNT(f.f2) DESC LIMIT 5;", "gold_sql": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 5", "source_tables": ["user_profiles"]}
{"sample_id": 294, "db_id": "twitter_1", "question": "List the text of all tweets in the order of date.", "rationale": ["Identify the table that contains the tweets, which is the 'tweets' table.", "Determine the column that contains the text of the tweets, which is 'text'.", "Identify the column that contains the date of the tweets, which is 'createdate'.", "Construct the SQL query to select the 'text' from the 'tweets' table.", "Add an ORDER BY clause to sort the results by 'createdate' in ascending order."], "pred_sql": "SELECT text FROM tweets ORDER BY createdate;", "gold_sql": "SELECT text FROM tweets ORDER BY createdate", "source_tables": ["tweets"]}
{"sample_id": 295, "db_id": "twitter_1", "question": "Find the name of each user and number of tweets tweeted by each of them.", "rationale": ["Identify the tables needed: user_profiles for user names and tweets for counting tweets.", "We need to join the user_profiles table with the tweets table on the user ID (uid).", "Use a LEFT JOIN to ensure we include users even if they have not tweeted.", "Select the name from user_profiles and count the tweet IDs from tweets to get the number of tweets per user.", "Group the results by user ID to aggregate the tweet counts for each user."], "pred_sql": "SELECT user_profiles.name, COUNT(tweets.id) AS tweet_count\nFROM user_profiles\nLEFT JOIN tweets ON user_profiles.uid = tweets.uid\nGROUP BY user_profiles.uid;", "gold_sql": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid", "source_tables": ["tweets", "user_profiles"]}
{"sample_id": 296, "db_id": "twitter_1", "question": "Find the name and partition id for users who tweeted less than twice.", "rationale": ["We need to find users who tweeted less than twice, so we will focus on the 'tweets' table.", "We will join the 'user_profiles' table to get the names and partition ids of the users.", "To find the number of tweets per user, we will group the results by the user identifier (uid).", "We will use the HAVING clause to filter the groups to only include those with a count of tweets less than 2."], "pred_sql": "SELECT up.name, up.partitionid FROM user_profiles up JOIN tweets t ON up.uid = t.uid GROUP BY up.uid HAVING COUNT(t.id) < 2;", "gold_sql": "SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2", "source_tables": ["tweets", "user_profiles"]}
{"sample_id": 297, "db_id": "twitter_1", "question": "Find the name of the user who tweeted more than once, and number of tweets tweeted by them.", "rationale": ["Identify the relevant tables: We need to use the 'tweets' table to count the number of tweets and the 'user_profiles' table to get the user's name.", "Join the 'tweets' table with the 'user_profiles' table on the user ID (uid) to access the user's name along with their tweets.", "Group the results by the user's name to aggregate the tweet counts for each user.", "Use the COUNT function to count the number of tweets for each user.", "Apply the HAVING clause to filter the results to only include users who have tweeted more than once."], "pred_sql": "SELECT up.name, COUNT(t.id) AS tweet_count\nFROM tweets t\nJOIN user_profiles up ON t.uid = up.uid\nGROUP BY up.name\nHAVING COUNT(t.id) > 1;", "gold_sql": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1", "source_tables": ["tweets", "user_profiles"]}
{"sample_id": 298, "db_id": "twitter_1", "question": "Find the average number of followers for the users who do not have any tweet.", "rationale": ["Identify the table that contains the number of followers, which is 'user_profiles'.", "We need to find users who do not have any tweets, so we will use a subquery to select 'uid' from the 'tweets' table.", "The main query will calculate the average number of followers for users whose 'uid' is not in the list of 'uid' from the 'tweets' table.", "Use the AVG() function to compute the average of the 'followers' column for the filtered users."], "pred_sql": "SELECT AVG(followers) AS average_followers FROM user_profiles WHERE uid NOT IN (SELECT uid FROM tweets);", "gold_sql": "SELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)", "source_tables": ["tweets", "user_profiles"]}
{"sample_id": 299, "db_id": "twitter_1", "question": "Find the average number of followers for the users who had some tweets.", "rationale": ["Identify the relevant table: user_profiles contains the followers count.", "We need to find users who have posted tweets, so we will look at the tweets table.", "We will use a subquery to get the distinct user IDs (uid) from the tweets table.", "The main query will calculate the average number of followers for these users by filtering the user_profiles table based on the user IDs obtained from the subquery."], "pred_sql": "SELECT AVG(followers) AS average_followers\nFROM user_profiles\nWHERE uid IN (\n    SELECT DISTINCT uid\n    FROM tweets\n);", "gold_sql": "SELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)", "source_tables": ["tweets", "user_profiles"]}
{"sample_id": 300, "db_id": "twitter_1", "question": "Find the maximum and total number of followers of all users.", "rationale": ["Identify the table that contains the followers information, which is the user_profiles table.", "To find the maximum number of followers, we will use the MAX() function on the followers column.", "To find the total number of followers, we will use the SUM() function on the followers column.", "Combine both calculations in a single SELECT statement, selecting the maximum and total followers from the user_profiles table."], "pred_sql": "SELECT MAX(followers) AS max_followers, SUM(followers) AS total_followers FROM user_profiles;", "gold_sql": "SELECT max(followers) ,  sum(followers) FROM user_profiles", "source_tables": ["user_profiles"]}
{"sample_id": 301, "db_id": "product_catalog", "question": "Find the names of all the catalog entries.", "rationale": ["Identify the table that contains catalog entries, which is 'Catalog_Contents'.", "Determine the specific column that holds the names of the catalog entries, which is 'catalog_entry_name'.", "Construct the SQL query to select the 'catalog_entry_name' from the 'Catalog_Contents' table."], "pred_sql": "SELECT catalog_entry_name FROM Catalog_Contents;", "gold_sql": "SELECT distinct(catalog_entry_name) FROM catalog_contents", "source_tables": ["catalog_contents"]}
{"sample_id": 302, "db_id": "product_catalog", "question": "What are all the catalog entry names?", "rationale": ["Identify the table that contains the catalog entry names, which is the Catalog_Contents table.", "Determine the specific column that holds the names of the catalog entries, which is catalog_entry_name.", "Construct a SQL SELECT statement to retrieve all values from the catalog_entry_name column in the Catalog_Contents table."], "pred_sql": "SELECT catalog_entry_name FROM Catalog_Contents;", "gold_sql": "SELECT distinct(catalog_entry_name) FROM catalog_contents", "source_tables": ["catalog_contents"]}
{"sample_id": 303, "db_id": "product_catalog", "question": "Find the list of attribute data types possessed by more than 3 attribute definitions.", "rationale": ["Identify the table that contains the attribute data types, which is 'Attribute_Definitions'.", "We need to select the 'attribute_data_type' column from this table.", "To find the data types that are possessed by more than 3 attribute definitions, we will group the results by 'attribute_data_type'.", "We will use the HAVING clause to filter the groups, keeping only those where the count of 'attribute_id' is greater than 3."], "pred_sql": "SELECT attribute_data_type\nFROM Attribute_Definitions\nGROUP BY attribute_data_type\nHAVING COUNT(attribute_id) > 3;", "gold_sql": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3", "source_tables": ["attribute_definitions"]}
{"sample_id": 304, "db_id": "product_catalog", "question": "What are the attribute data types with more than 3 attribute definitions?", "rationale": ["Identify the table that contains the attribute definitions, which is 'Attribute_Definitions'.", "Determine the relevant columns needed: 'attribute_data_type' for the type of attribute and 'attribute_id' to count the definitions.", "Use the COUNT function to count the number of attribute definitions for each attribute data type.", "Group the results by 'attribute_data_type' to aggregate the counts for each type.", "Use the HAVING clause to filter the results to only include those attribute data types that have more than 3 definitions."], "pred_sql": "SELECT attribute_data_type, COUNT(attribute_id) AS attribute_count \nFROM Attribute_Definitions \nGROUP BY attribute_data_type \nHAVING COUNT(attribute_id) > 3;", "gold_sql": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3", "source_tables": ["attribute_definitions"]}
{"sample_id": 305, "db_id": "product_catalog", "question": "What is the attribute data type of the attribute with name \"Green\"?", "rationale": ["Identify the table that contains the attribute name and its data type, which is 'Attribute_Definitions'.", "Determine the specific columns needed: 'attribute_data_type' for the data type and 'attribute_name' to filter by the name 'Green'.", "Construct the SQL query to select 'attribute_data_type' from 'Attribute_Definitions' where 'attribute_name' equals 'Green'."], "pred_sql": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name = 'Green';", "gold_sql": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  'Green'", "source_tables": ["attribute_definitions"]}
{"sample_id": 306, "db_id": "product_catalog", "question": "Find the attribute data type for the attribute named \"Green\".", "rationale": ["Identify the table that contains the attribute data type, which is 'Attribute_Definitions'.", "Determine the column that holds the attribute data type, which is 'attribute_data_type'.", "Identify the column that contains the attribute name to filter by, which is 'attribute_name'.", "Construct the SQL query to select 'attribute_data_type' from 'Attribute_Definitions' where 'attribute_name' equals 'Green'."], "pred_sql": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name = 'Green';", "gold_sql": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  'Green'", "source_tables": ["attribute_definitions"]}
{"sample_id": 307, "db_id": "product_catalog", "question": "Find the name and level of catalog structure with level between 5 and 10.", "rationale": ["Identify the relevant table: Catalog_Structure, as it contains the catalog levels.", "Determine the columns needed: catalog_level_name and catalog_level_number.", "Specify the condition for the level: it should be between 5 and 10.", "Construct the SQL SELECT statement to retrieve the desired columns from the Catalog_Structure table with the specified condition."], "pred_sql": "SELECT catalog_level_name, catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN '5' AND '10';", "gold_sql": "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10", "source_tables": ["catalog_structure"]}
{"sample_id": 308, "db_id": "product_catalog", "question": "What are the name and level of catalog structure with level number between 5 and 10", "rationale": ["Identify the relevant table: Catalog_Structure, as it contains the catalog level information.", "Determine the columns needed: catalog_level_name and catalog_level_number.", "Specify the condition for the level number: it should be between 5 and 10.", "Construct the SQL SELECT statement to retrieve the required columns from the Catalog_Structure table with the specified condition."], "pred_sql": "SELECT catalog_level_name, catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN '5' AND '10';", "gold_sql": "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10", "source_tables": ["catalog_structure"]}
{"sample_id": 309, "db_id": "product_catalog", "question": "Find all the catalog publishers whose name contains \"Murray\"", "rationale": ["Identify the table that contains the publisher information, which is the 'Catalogs' table.", "Determine the column that holds the publisher names, which is 'catalog_publisher'.", "Use the SQL SELECT statement to retrieve the distinct publisher names from the 'Catalogs' table.", "Apply a WHERE clause to filter the results to only include publishers whose names contain the substring 'Murray'.", "Use the LIKE operator with wildcards (%) to match any publisher names that include 'Murray' anywhere in the name."], "pred_sql": "SELECT DISTINCT catalog_publisher FROM Catalogs WHERE catalog_publisher LIKE '%Murray%';", "gold_sql": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE '%Murray%'", "source_tables": ["catalogs"]}
{"sample_id": 310, "db_id": "product_catalog", "question": "Which catalog publishers have substring \"Murray\" in their names?", "rationale": ["Identify the table that contains the publisher information, which is the 'Catalogs' table.", "Determine the column that holds the publisher names, which is 'catalog_publisher'.", "Formulate a query to select distinct publisher names from the 'Catalogs' table.", "Use the LIKE operator to filter publisher names that contain the substring 'Murray'.", "The '%' wildcard is used before and after 'Murray' to match any characters before or after the substring."], "pred_sql": "SELECT DISTINCT catalog_publisher FROM Catalogs WHERE catalog_publisher LIKE '%Murray%';", "gold_sql": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE '%Murray%'", "source_tables": ["catalogs"]}
{"sample_id": 311, "db_id": "product_catalog", "question": "Which catalog publisher has published the most catalogs?", "rationale": ["Identify the relevant table: The query requires information about catalog publishers and the number of catalogs they have published, which is found in the 'Catalogs' table.", "Count the number of catalogs for each publisher: Use the COUNT function to count the number of 'catalog_id' entries for each 'catalog_publisher'.", "Group the results by publisher: Use GROUP BY to aggregate the counts for each unique 'catalog_publisher'.", "Order the results: Use ORDER BY to sort the results in descending order based on the count of catalogs.", "Limit the results to the top publisher: Use LIMIT 1 to get only the publisher with the highest count of catalogs."], "pred_sql": "SELECT catalog_publisher, COUNT(catalog_id) AS catalog_count\nFROM Catalogs\nGROUP BY catalog_publisher\nORDER BY catalog_count DESC\nLIMIT 1;", "gold_sql": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1", "source_tables": ["catalogs"]}
{"sample_id": 312, "db_id": "product_catalog", "question": "Find the catalog publisher that has the most catalogs.", "rationale": ["Identify the relevant table: The query requires information about catalog publishers, which is found in the 'Catalogs' table.", "Count the number of catalogs for each publisher: Use the COUNT function to count the number of catalogs associated with each publisher.", "Group the results by publisher: Use GROUP BY to aggregate the counts for each unique publisher.", "Order the results: Use ORDER BY to sort the publishers by the count of catalogs in descending order, so the publisher with the most catalogs appears first.", "Limit the results to one: Use LIMIT 1 to return only the publisher with the highest count of catalogs."], "pred_sql": "SELECT catalog_publisher, COUNT(catalog_id) AS catalog_count\nFROM Catalogs\nGROUP BY catalog_publisher\nORDER BY catalog_count DESC\nLIMIT 1;", "gold_sql": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1", "source_tables": ["catalogs"]}
{"sample_id": 313, "db_id": "product_catalog", "question": "Find the names and publication dates of all catalogs that have catalog level number greater than 5.", "rationale": ["Identify the main requirement: to find catalog names and publication dates.", "Determine the relevant tables: Catalogs for catalog names and publication dates, and Catalog_Structure for catalog level numbers.", "Use a subquery to filter catalogs based on the condition of catalog level number being greater than 5.", "Select the catalog_name and date_of_publication from the Catalogs table where the catalog_id matches those from the subquery."], "pred_sql": "SELECT catalog_name, date_of_publication FROM Catalogs WHERE catalog_id IN (SELECT catalog_id FROM Catalog_Structure WHERE catalog_level_number > '5');", "gold_sql": "SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5", "source_tables": ["catalog_structure", "catalogs"]}
{"sample_id": 314, "db_id": "product_catalog", "question": "What are the name and publication date of the catalogs with catalog level number above 5?", "rationale": ["Identify the required columns: catalog_name and date_of_publication from the Catalogs table.", "Determine the condition: catalog level number must be above 5.", "To find catalogs with a level number above 5, we need to join the Catalogs table with the Catalog_Structure table.", "Use a subquery to select catalog_ids from Catalog_Structure where catalog_level_number is greater than 5.", "Finally, select the catalog_name and date_of_publication from the Catalogs table where the catalog_id matches the results from the subquery."], "pred_sql": "SELECT catalog_name, date_of_publication FROM Catalogs WHERE catalog_id IN (SELECT catalog_id FROM Catalog_Structure WHERE catalog_level_number > '5');", "gold_sql": "SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5", "source_tables": ["catalog_structure", "catalogs"]}
{"sample_id": 315, "db_id": "product_catalog", "question": "What are the entry names of catalog with the attribute possessed by most entries.", "rationale": ["Identify the attribute that is possessed by the most entries in the Catalog_Contents table.", "To find this attribute, I will group the entries in the Catalog_Contents_Additional_Attributes table by attribute_id and count the number of occurrences for each attribute.", "I will order the results by the count in descending order and limit the results to 1 to get the attribute_id with the highest count.", "Next, I will join the Catalog_Contents table with the Catalog_Contents_Additional_Attributes table on catalog_entry_id to get the entry names associated with the most common attribute.", "Finally, I will select the catalog_entry_name from the Catalog_Contents table where the attribute_id matches the one identified in the previous steps."], "pred_sql": "SELECT cc.catalog_entry_name\nFROM Catalog_Contents cc\nJOIN Catalog_Contents_Additional_Attributes cca ON cc.catalog_entry_id = cca.catalog_entry_id\nWHERE cca.attribute_id = (\n    SELECT attribute_id\n    FROM Catalog_Contents_Additional_Attributes\n    GROUP BY attribute_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)", "gold_sql": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)", "source_tables": ["catalog_contents", "catalog_contents_additional_attributes"]}
{"sample_id": 316, "db_id": "product_catalog", "question": "Find the entry names of the catalog with the attribute that have the most entries.", "rationale": ["Identify the table that contains the catalog entry names, which is the Catalog_Contents table.", "Determine the relationship between Catalog_Contents and Catalog_Contents_Additional_Attributes to find entries with specific attributes.", "To find the attribute with the most entries, I will group by attribute_id in the Catalog_Contents_Additional_Attributes table and count the occurrences of each attribute.", "Order the results of the count in descending order and limit the results to 1 to get the attribute_id with the most entries.", "Use this attribute_id to filter the Catalog_Contents_Additional_Attributes table and join it with Catalog_Contents to get the corresponding catalog entry names."], "pred_sql": "SELECT cc.catalog_entry_name\nFROM Catalog_Contents cc\nJOIN Catalog_Contents_Additional_Attributes cca ON cc.catalog_entry_id = cca.catalog_entry_id\nWHERE cca.attribute_id = (\n    SELECT attribute_id\n    FROM Catalog_Contents_Additional_Attributes\n    GROUP BY attribute_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)", "gold_sql": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)", "source_tables": ["catalog_contents", "catalog_contents_additional_attributes"]}
{"sample_id": 317, "db_id": "product_catalog", "question": "What is the entry name of the most expensive catalog (in USD)?", "rationale": ["Identify the most expensive catalog by finding the catalog with the highest price in dollars.", "Join the Catalogs table with the Catalog_Contents table to access the catalog entries and their prices.", "Use a subquery to select the most recently published catalog.", "Order the entries by price in descending order to find the most expensive entry.", "Limit the results to get only the top entry name."], "pred_sql": "SELECT cc.catalog_entry_name\nFROM Catalogs c\nJOIN Catalog_Contents cc ON c.catalog_id = cc.catalog_id\nWHERE c.catalog_id = (\n    SELECT catalog_id\n    FROM Catalogs\n    ORDER BY date_of_publication DESC\n    LIMIT 1\n)\nORDER BY cc.price_in_dollars DESC\nLIMIT 1;", "gold_sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1", "source_tables": ["catalog_contents"]}
{"sample_id": 318, "db_id": "product_catalog", "question": "Find the entry name of the catalog with the highest price (in USD).", "rationale": ["Identify the table that contains the price information and entry names, which is the Catalog_Contents table.", "To find the entry with the highest price in USD, we need to sort the entries by the price_in_dollars column in descending order.", "Using the ORDER BY clause allows us to sort the results based on the price.", "To limit the results to only the highest price, we use the LIMIT clause set to 1."], "pred_sql": "SELECT catalog_entry_name FROM Catalog_Contents ORDER BY price_in_dollars DESC LIMIT 1;", "gold_sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1", "source_tables": ["catalog_contents"]}
{"sample_id": 319, "db_id": "product_catalog", "question": "What is the level name of the cheapest catalog (in USD)?", "rationale": ["Identify the relevant tables: Catalogs, Catalog_Contents, and Catalog_Structure are needed to find the level name of the cheapest catalog.", "Join the Catalogs table with Catalog_Contents on catalog_id to access the price information.", "Join the Catalog_Contents table with Catalog_Structure on catalog_level_number to get the level names.", "Order the results by price_in_dollars in ascending order to find the cheapest catalog.", "Limit the results to 1 to get only the cheapest catalog's level name."], "pred_sql": "SELECT cs.catalog_level_name \nFROM Catalogs c \nJOIN Catalog_Contents cc ON c.catalog_id = cc.catalog_id \nJOIN Catalog_Structure cs ON cc.catalog_level_number = cs.catalog_level_number \nORDER BY cc.price_in_dollars ASC \nLIMIT 1;", "gold_sql": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1", "source_tables": ["catalog_structure", "catalog_contents"]}
{"sample_id": 320, "db_id": "product_catalog", "question": "Find the level name of the catalog with the lowest price (in USD).", "rationale": ["Identify the relevant tables: Catalogs, Catalog_Contents, and Catalog_Structure are needed to find the catalog level name and the price.", "Join the Catalogs table with Catalog_Contents on catalog_id to access the price information.", "Join the resulting table with Catalog_Structure on catalog_level_number to get the catalog level names.", "Order the results by price_in_dollars in ascending order to find the lowest price.", "Limit the results to 1 to get only the catalog level name associated with the lowest price."], "pred_sql": "SELECT cs.catalog_level_name \nFROM Catalogs c \nJOIN Catalog_Contents cc ON c.catalog_id = cc.catalog_id \nJOIN Catalog_Structure cs ON cc.catalog_level_number = cs.catalog_level_number \nORDER BY cc.price_in_dollars ASC \nLIMIT 1;", "gold_sql": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1", "source_tables": ["catalog_structure", "catalog_contents"]}
{"sample_id": 321, "db_id": "product_catalog", "question": "What are the average and minimum price (in Euro) of all products?", "rationale": ["Identify the required data: average and minimum prices in Euros.", "Determine the relevant table: Catalog_Contents contains the price information.", "Use aggregate functions: AVG() for average price and MIN() for minimum price.", "Construct the SQL query to select the average and minimum prices from the price_in_euros column in the Catalog_Contents table."], "pred_sql": "SELECT AVG(price_in_euros) AS average_price, MIN(price_in_euros) AS minimum_price FROM Catalog_Contents;", "gold_sql": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents", "source_tables": ["catalog_contents"]}
{"sample_id": 322, "db_id": "product_catalog", "question": "Give me the average and minimum price (in Euro) of the products.", "rationale": ["Identify the required data: average and minimum price in Euros of products.", "Determine the relevant table: Catalog_Contents contains the price information.", "Use aggregate functions: AVG() for average price and MIN() for minimum price.", "Construct the SQL query to select the average and minimum prices from the price_in_euros column in the Catalog_Contents table."], "pred_sql": "SELECT AVG(price_in_euros) AS average_price, MIN(price_in_euros) AS minimum_price FROM Catalog_Contents;", "gold_sql": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents", "source_tables": ["catalog_contents"]}
{"sample_id": 323, "db_id": "product_catalog", "question": "What is the product with the highest height? Give me the catalog entry name.", "rationale": ["Identify the table that contains the product height and catalog entry name, which is the Catalog_Contents table.", "To find the product with the highest height, we need to sort the entries in the Catalog_Contents table by the height column in descending order.", "Using the ORDER BY clause allows us to sort the results based on the height.", "To limit the results to only the highest entry, we use the LIMIT clause set to 1."], "pred_sql": "SELECT catalog_entry_name FROM Catalog_Contents ORDER BY height DESC LIMIT 1;", "gold_sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1", "source_tables": ["catalog_contents"]}
{"sample_id": 324, "db_id": "product_catalog", "question": "Which catalog content has the highest height? Give me the catalog entry name.", "rationale": ["Identify the table that contains the height information, which is the Catalog_Contents table.", "We need to select the catalog_entry_name along with the height to determine which entry has the highest height.", "To find the entry with the highest height, we will order the results by the height column in descending order.", "We will limit the results to 1 to get only the top entry with the highest height."], "pred_sql": "SELECT catalog_entry_name FROM Catalog_Contents ORDER BY height DESC LIMIT 1;", "gold_sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1", "source_tables": ["catalog_contents"]}
{"sample_id": 325, "db_id": "product_catalog", "question": "Find the name of the product that has the smallest capacity.", "rationale": ["Identify the relevant table: The product information, including capacity, is stored in the Catalog_Contents table.", "Determine the required column: We need the name of the product, which is in the 'catalog_entry_name' column.", "Find the smallest capacity: To find the product with the smallest capacity, we will order the results by the 'capacity' column in ascending order.", "Limit the results: Since we only want the product with the smallest capacity, we will limit the results to 1."], "pred_sql": "SELECT catalog_entry_name FROM Catalog_Contents ORDER BY capacity ASC LIMIT 1;", "gold_sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1", "source_tables": ["catalog_contents"]}
{"sample_id": 326, "db_id": "product_catalog", "question": "Which catalog content has the smallest capacity? Return the catalog entry name.", "rationale": ["Identify the table that contains the relevant data: Catalog_Contents holds the catalog entries and their attributes, including capacity.", "Determine the specific attribute to filter by: We need to find the entry with the smallest capacity.", "Use the ORDER BY clause to sort the entries by capacity in ascending order.", "Limit the results to only one entry using LIMIT 1 to get the smallest capacity.", "Select the catalog_entry_name to return the name of the catalog content with the smallest capacity."], "pred_sql": "SELECT catalog_entry_name FROM Catalog_Contents ORDER BY capacity ASC LIMIT 1;", "gold_sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1", "source_tables": ["catalog_contents"]}
{"sample_id": 327, "db_id": "product_catalog", "question": "Find the names of all the products whose stock number starts with \"2\".", "rationale": ["Identify the table that contains product information, which is the Catalog_Contents table.", "Determine the relevant column for product names, which is catalog_entry_name.", "Identify the column that contains the stock number, which is product_stock_number.", "Formulate a query to select catalog_entry_name from Catalog_Contents where product_stock_number starts with '2'.", "Use the SQL LIKE operator with '2%' to filter stock numbers that start with '2'."], "pred_sql": "SELECT catalog_entry_name FROM Catalog_Contents WHERE product_stock_number LIKE '2%';", "gold_sql": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE '2%'", "source_tables": ["catalog_contents"]}
{"sample_id": 328, "db_id": "product_catalog", "question": "Which catalog contents have a product stock number that starts from \"2\"? Show the catalog entry names.", "rationale": ["Identify the table that contains the product stock number, which is 'Catalog_Contents'.", "Determine the specific column that holds the product stock number, which is 'product_stock_number'.", "The requirement is to find entries where the product stock number starts with '2', which can be achieved using the SQL 'LIKE' operator with the pattern '2%'.", "Select the 'catalog_entry_name' column to display the names of the catalog entries that meet the criteria.", "Construct the SQL query to select 'catalog_entry_name' from 'Catalog_Contents' where 'product_stock_number' matches the specified pattern."], "pred_sql": "SELECT catalog_entry_name FROM Catalog_Contents WHERE product_stock_number LIKE '2%';", "gold_sql": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE '2%'", "source_tables": ["catalog_contents"]}
{"sample_id": 329, "db_id": "product_catalog", "question": "Find the names of catalog entries with level number 8.", "rationale": ["Identify the table that contains catalog entry names, which is 'Catalog_Contents'.", "Determine the column that holds the level number, which is 'catalog_level_number'.", "Specify the condition to filter the results to only include entries with level number 8.", "Construct the SQL query to select 'catalog_entry_name' from 'Catalog_Contents' where 'catalog_level_number' equals '8'."], "pred_sql": "SELECT catalog_entry_name FROM Catalog_Contents WHERE catalog_level_number = '8';", "gold_sql": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  '8'", "source_tables": ["catalog_contents", "catalog_contents_additional_attributes"]}
{"sample_id": 330, "db_id": "product_catalog", "question": "What are the names of catalog entries with level number 8?", "rationale": ["Identify the table that contains catalog entries, which is 'Catalog_Contents'.", "Determine the column that holds the level number, which is 'catalog_level_number'.", "Identify the column that contains the names of the catalog entries, which is 'catalog_entry_name'.", "Construct the SQL query to select 'catalog_entry_name' from 'Catalog_Contents' where 'catalog_level_number' equals '8'."], "pred_sql": "SELECT catalog_entry_name FROM Catalog_Contents WHERE catalog_level_number = '8';", "gold_sql": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  '8'", "source_tables": ["catalog_contents", "catalog_contents_additional_attributes"]}
{"sample_id": 331, "db_id": "product_catalog", "question": "Find the names of the products with length smaller than 3 or height greater than 5.", "rationale": ["Identify the table that contains product information, which is 'Catalog_Contents'.", "Determine the relevant columns needed for the query: 'catalog_entry_name' for product names, 'length' for the length condition, and 'height' for the height condition.", "Formulate the WHERE clause to filter products based on the conditions: length smaller than 3 or height greater than 5.", "Combine the SELECT statement with the WHERE clause to create the full SQL query."], "pred_sql": "SELECT catalog_entry_name FROM Catalog_Contents WHERE length < 3 OR height > 5;", "gold_sql": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5", "source_tables": ["catalog_contents"]}
{"sample_id": 332, "db_id": "product_catalog", "question": "Which catalog contents have length below 3 or above 5? Find the catalog entry names.", "rationale": ["Identify the table that contains the relevant data: Catalog_Contents holds the catalog entry names and their lengths.", "Determine the specific columns needed: We need 'catalog_entry_name' and 'length'.", "Formulate the condition for filtering: We want entries where the length is below 3 or above 5.", "Construct the SQL SELECT statement to retrieve the desired data based on the conditions."], "pred_sql": "SELECT catalog_entry_name FROM Catalog_Contents WHERE length < 3 OR length > 5;", "gold_sql": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5", "source_tables": ["catalog_contents"]}
{"sample_id": 333, "db_id": "product_catalog", "question": "Find the name and attribute ID of the attribute definitions with attribute value 0.", "rationale": ["Identify the tables involved: We need to retrieve data from the Attribute_Definitions table and the Catalog_Contents_Additional_Attributes table.", "Determine the columns to select: We need the 'attribute_name' and 'attribute_id' from the Attribute_Definitions table.", "Establish the relationship between the tables: The Catalog_Contents_Additional_Attributes table has a foreign key 'attribute_id' that links to the 'attribute_id' in the Attribute_Definitions table.", "Set the condition for filtering: We want to filter the results where the 'attribute_value' in the Catalog_Contents_Additional_Attributes table is 0.", "Construct the SQL query: Combine the SELECT statement with the JOIN and WHERE clause to form the complete SQL query."], "pred_sql": "SELECT ad.attribute_name, ad.attribute_id \nFROM Attribute_Definitions ad \nJOIN Catalog_Contents_Additional_Attributes cca \nON ad.attribute_id = cca.attribute_id \nWHERE cca.attribute_value = 0;", "gold_sql": "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0", "source_tables": ["attribute_definitions", "catalog_contents_additional_attributes"]}
{"sample_id": 334, "db_id": "product_catalog", "question": "Which attribute definitions have attribute value 0? Give me the attribute name and attribute ID.", "rationale": ["Identify the relevant tables: We need to retrieve data from the Attribute_Definitions table and the Catalog_Contents_Additional_Attributes table since we are looking for attribute definitions with a specific attribute value.", "Determine the columns to select: We need the attribute_id and attribute_name from the Attribute_Definitions table.", "Establish the relationship between tables: The Catalog_Contents_Additional_Attributes table contains the attribute_id that links to the Attribute_Definitions table, so we will perform a JOIN on these tables.", "Set the condition for filtering: We need to filter the results where the attribute_value is 0, which is found in the Catalog_Contents_Additional_Attributes table.", "Construct the SQL query: Combine all the elements into a complete SQL query that selects the required columns from the joined tables with the specified condition."], "pred_sql": "SELECT ad.attribute_id, ad.attribute_name \nFROM Attribute_Definitions ad \nJOIN Catalog_Contents_Additional_Attributes cca ON ad.attribute_id = cca.attribute_id \nWHERE cca.attribute_value = 0;", "gold_sql": "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0", "source_tables": ["attribute_definitions", "catalog_contents_additional_attributes"]}
{"sample_id": 335, "db_id": "product_catalog", "question": "Find the name and capacity of products with price greater than 700 (in USD).", "rationale": ["Identify the relevant table: The 'Catalog_Contents' table contains the product information including name and capacity.", "Determine the columns needed: We need 'catalog_entry_name' for the product name and 'capacity' for the product capacity.", "Set the condition for filtering: We want products with a price greater than 700 in USD, which corresponds to the 'price_in_dollars' column.", "Construct the SQL SELECT statement: We will select the required columns from the 'Catalog_Contents' table with the specified condition."], "pred_sql": "SELECT cc.catalog_entry_name, cc.capacity \nFROM Catalog_Contents cc \nWHERE cc.price_in_dollars > 700;", "gold_sql": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700", "source_tables": ["catalog_contents"]}
{"sample_id": 336, "db_id": "product_catalog", "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.", "rationale": ["Identify the table that contains the relevant data: Catalog_Contents holds the catalog entries and their prices.", "Determine the columns needed: We need 'catalog_entry_name' and 'capacity' from the Catalog_Contents table.", "Set the condition for the query: We want entries where 'price_in_dollars' is greater than 700.", "Construct the SQL SELECT statement to retrieve the desired columns with the specified condition."], "pred_sql": "SELECT catalog_entry_name, capacity FROM Catalog_Contents WHERE price_in_dollars > 700;", "gold_sql": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700", "source_tables": ["catalog_contents"]}
{"sample_id": 337, "db_id": "product_catalog", "question": "Find the dates on which more than one revisions were made.", "rationale": ["Identify the relevant table: The 'Catalogs' table contains the 'date_of_latest_revision' column which is needed to find the dates of revisions.", "Count the number of revisions for each date: Use the COUNT function to count how many entries exist for each 'date_of_latest_revision'.", "Group the results by the revision date: Use the GROUP BY clause to group the results based on 'date_of_latest_revision'.", "Filter the results to find dates with more than one revision: Use the HAVING clause to filter the grouped results to only include those with a count greater than 1."], "pred_sql": "SELECT date_of_latest_revision, COUNT(*) as revision_count \nFROM Catalogs \nGROUP BY date_of_latest_revision \nHAVING COUNT(*) > 1;", "gold_sql": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1", "source_tables": ["catalogs"]}
{"sample_id": 338, "db_id": "product_catalog", "question": "On which days more than one revisions were made on catalogs.", "rationale": ["Identify the relevant table: The query is about catalog revisions, so we will focus on the 'Catalogs' table.", "Determine the relevant columns: We need the 'date_of_latest_revision' to group by the revision dates and count the number of revisions.", "Group the results: We will group the results by 'date_of_latest_revision' to count how many revisions occurred on each date.", "Filter the results: We will use the HAVING clause to filter the groups to only include those with a count greater than 1, indicating more than one revision on that day."], "pred_sql": "SELECT date_of_latest_revision, COUNT(*) as revision_count \nFROM Catalogs \nGROUP BY date_of_latest_revision \nHAVING COUNT(*) > 1;", "gold_sql": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1", "source_tables": ["catalogs"]}
{"sample_id": 339, "db_id": "product_catalog", "question": "How many products are there in the records?", "rationale": ["Identify the table that contains product records, which is 'Catalog_Contents'.", "To find the total number of products, we need to count the entries in the 'Catalog_Contents' table.", "Use the COUNT() function to count all rows in the 'Catalog_Contents' table.", "Construct the SQL query to select the count of all products from 'Catalog_Contents'."], "pred_sql": "SELECT COUNT(*) AS total_products FROM Catalog_Contents;", "gold_sql": "SELECT count(*) FROM catalog_contents", "source_tables": ["catalog_contents"]}
{"sample_id": 340, "db_id": "product_catalog", "question": "Find the total number of catalog contents.", "rationale": ["Identify the goal: We need to find the total number of entries in the Catalog_Contents table.", "Determine the appropriate SQL function: To count the total number of entries, we will use the COUNT() function.", "Specify the target table: The table we are interested in is Catalog_Contents.", "Construct the SQL query: We will select the count of all entries from the Catalog_Contents table."], "pred_sql": "SELECT COUNT(*) AS total_catalog_contents FROM Catalog_Contents;", "gold_sql": "SELECT count(*) FROM catalog_contents", "source_tables": ["catalog_contents"]}
{"sample_id": 341, "db_id": "product_catalog", "question": "Name all the products with next entry ID greater than 8.", "rationale": ["Identify the table that contains product information, which is 'Catalog_Contents'.", "Determine the relevant column for product names, which is 'catalog_entry_name'.", "Identify the condition specified in the query, which is that 'next_entry_id' should be greater than 8.", "Construct the SQL SELECT statement to retrieve 'catalog_entry_name' from 'Catalog_Contents' where the condition on 'next_entry_id' is met."], "pred_sql": "SELECT catalog_entry_name FROM Catalog_Contents WHERE next_entry_id > '8';", "gold_sql": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8", "source_tables": ["catalog_contents"]}
{"sample_id": 342, "db_id": "product_catalog", "question": "What are the catalog entry names of the products with next entry ID above 8?", "rationale": ["Identify the table that contains the catalog entry names, which is the Catalog_Contents table.", "Determine the condition specified in the query, which is that the next_entry_id should be greater than 8.", "Construct the SQL SELECT statement to retrieve the catalog_entry_name from the Catalog_Contents table where the next_entry_id meets the specified condition."], "pred_sql": "SELECT catalog_entry_name FROM Catalog_Contents WHERE next_entry_id > '8';", "gold_sql": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8", "source_tables": ["catalog_contents"]}
{"sample_id": 343, "db_id": "flight_1", "question": "How many aircrafts do we have?", "rationale": ["Identify the table that contains information about aircraft, which is the 'aircraft' table.", "To find out how many aircrafts there are, we need to count the number of entries in the 'aircraft' table.", "Use the COUNT() function to count the total number of rows in the 'aircraft' table.", "Select the count with an alias 'total_aircrafts' for clarity."], "pred_sql": "SELECT COUNT(*) AS total_aircrafts FROM aircraft;", "gold_sql": "SELECT count(*) FROM Aircraft", "source_tables": ["aircraft"]}
{"sample_id": 344, "db_id": "flight_1", "question": "How many aircrafts exist in the database?", "rationale": ["Identify the table that contains the information about aircraft, which is the 'aircraft' table.", "To find out how many aircraft exist, we need to count the number of entries in the 'aircraft' table.", "Use the COUNT() function to count the total number of rows in the 'aircraft' table.", "Select the count and label it as 'aircraft_count' for clarity."], "pred_sql": "SELECT COUNT(*) AS aircraft_count FROM aircraft;", "gold_sql": "SELECT count(*) FROM Aircraft", "source_tables": ["aircraft"]}
{"sample_id": 345, "db_id": "flight_1", "question": "Show name and distance for all aircrafts.", "rationale": ["Identify the table needed: The query requests information about aircraft, so we will use the 'aircraft' table.", "Determine the columns to select: The user wants to see the 'name' and 'distance' of all aircraft.", "Construct the SQL SELECT statement: We will use 'SELECT name, distance' to specify the columns we want.", "Specify the table in the FROM clause: We will add 'FROM aircraft' to indicate the source of the data.", "Combine the parts to form the complete SQL query: The final query will be 'SELECT name, distance FROM aircraft;'."], "pred_sql": "SELECT name, distance FROM aircraft;", "gold_sql": "SELECT name ,  distance FROM Aircraft", "source_tables": ["aircraft"]}
{"sample_id": 346, "db_id": "flight_1", "question": "What are the names and distances for all airplanes?", "rationale": ["Identify the table that contains the required information: the 'aircraft' table.", "Determine the specific columns needed: 'name' and 'distance'.", "Construct the SQL query to select these columns from the 'aircraft' table."], "pred_sql": "SELECT name, distance FROM aircraft;", "gold_sql": "SELECT name ,  distance FROM Aircraft", "source_tables": ["aircraft"]}
{"sample_id": 347, "db_id": "flight_1", "question": "Show ids for all aircrafts with more than 1000 distance.", "rationale": ["Identify the table that contains the relevant data: the 'aircraft' table holds information about aircraft including their IDs and maximum distances.", "Determine the specific columns needed: we need the 'aid' column for aircraft IDs.", "Establish the condition for filtering: we want aircraft with a distance greater than 1000.", "Construct the SQL query using the SELECT statement to retrieve the 'aid' from the 'aircraft' table where the distance is greater than 1000."], "pred_sql": "SELECT aid FROM aircraft WHERE distance > 1000;", "gold_sql": "SELECT aid FROM Aircraft WHERE distance  >  1000", "source_tables": ["aircraft"]}
{"sample_id": 348, "db_id": "flight_1", "question": "What are the ids of all aircrafts that can cover a distance of more than 1000?", "rationale": ["Identify the table that contains the relevant information about aircraft, which is the 'aircraft' table.", "Determine the column that specifies the maximum distance an aircraft can travel, which is 'distance'.", "Formulate a condition to filter aircraft that can cover a distance greater than 1000.", "Construct the SQL query to select the 'aid' (aircraft ID) from the 'aircraft' table where the 'distance' is greater than 1000."], "pred_sql": "SELECT aid FROM aircraft WHERE distance > 1000;", "gold_sql": "SELECT aid FROM Aircraft WHERE distance  >  1000", "source_tables": ["aircraft"]}
{"sample_id": 349, "db_id": "flight_1", "question": "How many aircrafts have distance between 1000 and 5000?", "rationale": ["Identify the table that contains the relevant data: the 'aircraft' table holds information about aircraft and their maximum distances.", "Determine the specific requirement: we need to count the number of aircraft whose distance is between 1000 and 5000.", "Use the COUNT() function to count the number of records that meet the criteria.", "Apply the WHERE clause to filter the records based on the distance range using the BETWEEN operator."], "pred_sql": "SELECT COUNT(*) AS aircraft_count FROM aircraft WHERE distance BETWEEN 1000 AND 5000;", "gold_sql": "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000", "source_tables": ["aircraft"]}
{"sample_id": 350, "db_id": "flight_1", "question": "What is the count of aircrafts that have a distance between 1000 and 5000?", "rationale": ["Identify the table to query: The relevant table is 'aircraft' as it contains the distance information.", "Determine the required operation: We need to count the number of aircrafts, which can be done using the COUNT() function.", "Specify the condition: We need aircrafts with a distance between 1000 and 5000, which can be expressed using the BETWEEN operator in the WHERE clause.", "Construct the SQL query: Combine the SELECT statement with the COUNT function, the FROM clause to specify the table, and the WHERE clause to filter the results based on the distance condition."], "pred_sql": "SELECT COUNT(*) AS aircraft_count FROM aircraft WHERE distance BETWEEN 1000 AND 5000;", "gold_sql": "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000", "source_tables": ["aircraft"]}
{"sample_id": 351, "db_id": "flight_1", "question": "What is the name and distance for aircraft with id 12?", "rationale": ["Identify the table that contains the required information: The 'aircraft' table has the columns 'name' and 'distance'.", "Determine the specific aircraft to query: The user specified an aircraft with id 12, which corresponds to the 'aid' column in the 'aircraft' table.", "Construct the SQL SELECT statement to retrieve the 'name' and 'distance' columns from the 'aircraft' table where 'aid' equals 12."], "pred_sql": "SELECT name, distance FROM aircraft WHERE aid = 12;", "gold_sql": "SELECT name ,  distance FROM Aircraft WHERE aid  =  12", "source_tables": ["aircraft"]}
{"sample_id": 352, "db_id": "flight_1", "question": "What is the name and distance for the aircraft that has an id of 12?", "rationale": ["Identify the table that contains the required information: The 'aircraft' table has the columns 'name' and 'distance'.", "Determine the specific aircraft by its ID: We need to filter the results where 'aid' equals 12.", "Construct the SQL SELECT statement: We will select 'name' and 'distance' from the 'aircraft' table where 'aid' is 12."], "pred_sql": "SELECT name, distance FROM aircraft WHERE aid = 12;", "gold_sql": "SELECT name ,  distance FROM Aircraft WHERE aid  =  12", "source_tables": ["aircraft"]}
{"sample_id": 353, "db_id": "flight_1", "question": "What is the minimum, average, and maximum distance of all aircrafts.", "rationale": ["Identify the table that contains the distance information, which is the 'aircraft' table.", "Determine the required calculations: minimum, average, and maximum distances.", "Use the SQL aggregate functions MIN(), AVG(), and MAX() to compute the respective values for the 'distance' column in the 'aircraft' table.", "Construct the SQL query to select these aggregate values from the 'aircraft' table."], "pred_sql": "SELECT MIN(distance) AS min_distance, AVG(distance) AS avg_distance, MAX(distance) AS max_distance FROM aircraft;", "gold_sql": "SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft", "source_tables": ["aircraft"]}
{"sample_id": 354, "db_id": "flight_1", "question": "Return the minimum, average and maximum distances traveled across all aircrafts.", "rationale": ["Identify the required calculations: minimum, average, and maximum distances.", "Determine the relevant table: the 'aircraft' table contains the distance information.", "Use aggregate functions in SQL: MIN(), AVG(), and MAX() to compute the required values.", "Construct the SQL SELECT statement to retrieve the minimum, average, and maximum distances from the 'distance' column in the 'aircraft' table."], "pred_sql": "SELECT MIN(distance) AS min_distance, AVG(distance) AS avg_distance, MAX(distance) AS max_distance FROM aircraft;", "gold_sql": "SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft", "source_tables": ["aircraft"]}
{"sample_id": 355, "db_id": "flight_1", "question": "Show the id and name of the aircraft with the maximum distance.", "rationale": ["Identify the table that contains the required information: the 'aircraft' table has the 'aid' and 'name' columns, as well as the 'distance' column.", "To find the aircraft with the maximum distance, we need to use a subquery to determine the maximum distance from the 'aircraft' table.", "The subquery will be: (SELECT MAX(distance) FROM aircraft), which retrieves the maximum distance value.", "We will then select the 'aid' and 'name' from the 'aircraft' table where the 'distance' matches the maximum distance obtained from the subquery."], "pred_sql": "SELECT aid, name FROM aircraft WHERE distance = (SELECT MAX(distance) FROM aircraft);", "gold_sql": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1", "source_tables": ["aircraft"]}
{"sample_id": 356, "db_id": "flight_1", "question": "What is the id and name of the aircraft that can cover the maximum distance?", "rationale": ["Identify the relevant table: The query is asking for information about aircraft, so we will use the 'aircraft' table.", "Determine the required columns: We need the 'aid' (aircraft ID) and 'name' (model of the aircraft).", "Find the maximum distance: We need to find the maximum distance that any aircraft can cover, which requires a subquery to select the maximum distance from the 'aircraft' table.", "Combine the results: We will select the 'aid' and 'name' from the 'aircraft' table where the distance is equal to the maximum distance found in the subquery."], "pred_sql": "SELECT aid, name FROM aircraft WHERE distance = (SELECT MAX(distance) FROM aircraft);", "gold_sql": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1", "source_tables": ["aircraft"]}
{"sample_id": 357, "db_id": "flight_1", "question": "Show the name of aircrafts with top three lowest distances.", "rationale": ["Identify the table that contains the information about aircrafts, which is the 'aircraft' table.", "Determine the column that contains the distance information, which is the 'distance' column in the 'aircraft' table.", "To find the top three lowest distances, we need to sort the results by the 'distance' column in ascending order.", "Use the LIMIT clause to restrict the results to the top three entries after sorting."], "pred_sql": "SELECT name FROM aircraft ORDER BY distance ASC LIMIT 3;", "gold_sql": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3", "source_tables": ["aircraft"]}
{"sample_id": 358, "db_id": "flight_1", "question": "What are the aircrafts with top 3 shortest lengthes? List their names.", "rationale": ["Identify the table that contains the information about aircrafts, which is the 'aircraft' table.", "Determine the relevant column that contains the length of the aircrafts, which is 'distance'.", "To find the top 3 shortest lengths, we need to sort the results by the 'distance' column in ascending order.", "Use the 'LIMIT' clause to restrict the results to the top 3 entries.", "Select the 'name' column to get the names of the aircrafts."], "pred_sql": "SELECT name FROM aircraft ORDER BY distance ASC LIMIT 3;", "gold_sql": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3", "source_tables": ["aircraft"]}
{"sample_id": 359, "db_id": "flight_1", "question": "Show names for all aircrafts with distances more than the average.", "rationale": ["Identify the table that contains the aircraft information, which is the 'aircraft' table.", "Determine the column that contains the names of the aircraft, which is 'name'.", "Determine the column that contains the distance information, which is 'distance'.", "Calculate the average distance of all aircraft using the AVG() function in a subquery.", "Formulate the main query to select the names of aircraft where their distance is greater than the average distance calculated in the subquery."], "pred_sql": "SELECT name FROM aircraft WHERE distance > (SELECT AVG(distance) FROM aircraft);", "gold_sql": "SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)", "source_tables": ["aircraft"]}
{"sample_id": 360, "db_id": "flight_1", "question": "What are the names of all aircrafts that can cover more distances than average?", "rationale": ["Identify the table that contains the information about aircraft, which is the 'aircraft' table.", "Determine the relevant column that holds the distance capability of the aircraft, which is the 'distance' column.", "To find aircraft that can cover more distance than average, we need to calculate the average distance using the AVG() function on the 'distance' column.", "Construct a subquery to calculate the average distance: (SELECT AVG(distance) FROM aircraft).", "Use this subquery in the WHERE clause of the main query to filter aircraft whose distance is greater than the average distance.", "Select the 'name' column from the 'aircraft' table to get the names of the aircraft that meet the criteria."], "pred_sql": "SELECT name FROM aircraft WHERE distance > (SELECT AVG(distance) FROM aircraft);", "gold_sql": "SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)", "source_tables": ["aircraft"]}
{"sample_id": 361, "db_id": "flight_1", "question": "How many employees do we have?", "rationale": ["Identify the table that contains employee information, which is the 'employee' table.", "To find out how many employees there are, we need to count the number of entries in the 'employee' table.", "Use the COUNT() function to count the total number of rows in the 'employee' table.", "Construct the SQL query to select the count of employees from the 'employee' table."], "pred_sql": "SELECT COUNT(*) AS employee_count FROM employee;", "gold_sql": "SELECT count(*) FROM Employee", "source_tables": ["employee"]}
{"sample_id": 362, "db_id": "flight_1", "question": "What is the number of employees?", "rationale": ["Identify the table that contains employee information, which is the 'employee' table.", "To find the number of employees, we need to count the entries in the 'employee' table.", "Use the COUNT() function to count all rows in the 'employee' table.", "Select the count with an alias 'number_of_employees' for clarity."], "pred_sql": "SELECT COUNT(*) AS number_of_employees FROM employee;", "gold_sql": "SELECT count(*) FROM Employee", "source_tables": ["employee"]}
{"sample_id": 363, "db_id": "flight_1", "question": "Show name and salary for all employees sorted by salary.", "rationale": ["Identify the table that contains employee information, which is the 'employee' table.", "Determine the columns needed for the output, which are 'name' and 'salary'.", "Construct the SELECT statement to retrieve 'name' and 'salary' from the 'employee' table.", "Add an ORDER BY clause to sort the results by 'salary' in ascending order."], "pred_sql": "SELECT name, salary FROM employee ORDER BY salary;", "gold_sql": "SELECT name ,  salary FROM Employee ORDER BY salary", "source_tables": ["employee"]}
{"sample_id": 364, "db_id": "flight_1", "question": "What is the name and salary of all employees in order of salary?", "rationale": ["Identify the table that contains employee information, which is the 'employee' table.", "Determine the columns needed for the output, which are 'name' and 'salary'.", "Formulate the SELECT statement to retrieve 'name' and 'salary' from the 'employee' table.", "Add an ORDER BY clause to sort the results by 'salary' in ascending order."], "pred_sql": "SELECT name, salary FROM employee ORDER BY salary;", "gold_sql": "SELECT name ,  salary FROM Employee ORDER BY salary", "source_tables": ["employee"]}
{"sample_id": 365, "db_id": "flight_1", "question": "Show ids for all employees with at least 100000 salary.", "rationale": ["Identify the table that contains employee information, which is the 'employee' table.", "Determine the column that contains the employee IDs, which is 'eid'.", "Identify the column that contains the salary information, which is 'salary'.", "Formulate a SQL query to select the 'eid' from the 'employee' table where the 'salary' is greater than or equal to 100000."], "pred_sql": "SELECT eid FROM employee WHERE salary >= '100000';", "gold_sql": "SELECT eid FROM Employee WHERE salary  >  100000", "source_tables": ["employee"]}
{"sample_id": 366, "db_id": "flight_1", "question": "What is the id of every employee who has at least a salary of  100000?", "rationale": ["Identify the table that contains employee information, which is the 'employee' table.", "Determine the column that holds the employee ID, which is 'eid'.", "Identify the column that contains the salary information, which is 'salary'.", "Formulate a SQL query to select the 'eid' from the 'employee' table where the 'salary' is greater than or equal to 100000."], "pred_sql": "SELECT eid FROM employee WHERE salary >= '100000';", "gold_sql": "SELECT eid FROM Employee WHERE salary  >  100000", "source_tables": ["employee"]}
{"sample_id": 367, "db_id": "flight_1", "question": "How many employees have salary between 100000 and 200000?", "rationale": ["Identify the table that contains employee salary information, which is the 'employee' table.", "Determine the specific columns needed for the query, which are the 'salary' column and a count of employees.", "Use the COUNT() function to count the number of employees whose salary falls within the specified range.", "Construct the SQL query using the SELECT statement to count employees, applying the WHERE clause to filter salaries between 100000 and 200000."], "pred_sql": "SELECT COUNT(*) AS employee_count FROM employee WHERE salary BETWEEN '100000' AND '200000';", "gold_sql": "SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000", "source_tables": ["employee"]}
{"sample_id": 368, "db_id": "flight_1", "question": "What is the number of employees that have a salary between 100000 and 200000?", "rationale": ["Identify the table that contains employee salary information, which is the 'employee' table.", "Determine the requirement to count the number of employees with a salary in a specific range (between 100000 and 200000).", "Use the COUNT() function to count the number of records that meet the salary criteria.", "Construct the SQL query using the SELECT statement to retrieve the count from the 'employee' table with a WHERE clause to filter the salary range."], "pred_sql": "SELECT COUNT(*) AS employee_count FROM employee WHERE salary BETWEEN '100000' AND '200000';", "gold_sql": "SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000", "source_tables": ["employee"]}
{"sample_id": 369, "db_id": "flight_1", "question": "What is the name and salary for employee with id 242518965?", "rationale": ["Identify the table that contains employee information, which is the 'employee' table.", "Determine the columns needed from the 'employee' table, which are 'name' and 'salary'.", "Specify the condition to filter the results to only include the employee with the ID '242518965'.", "Construct the SQL query using the SELECT statement to retrieve the specified columns from the 'employee' table with the appropriate WHERE clause."], "pred_sql": "SELECT name, salary FROM employee WHERE eid = '242518965';", "gold_sql": "SELECT name ,  salary FROM Employee WHERE eid  =  242518965", "source_tables": ["employee"]}
{"sample_id": 370, "db_id": "flight_1", "question": "What is the name and salary of the employee with the id 242518965?", "rationale": ["Identify the table that contains employee information, which is the 'employee' table.", "Determine the columns needed from the 'employee' table, which are 'name' and 'salary'.", "Specify the condition to filter the results to only include the employee with the ID '242518965'.", "Construct the SQL query using the SELECT statement to retrieve the specified columns from the 'employee' table with the appropriate WHERE clause."], "pred_sql": "SELECT name, salary FROM employee WHERE eid = '242518965';", "gold_sql": "SELECT name ,  salary FROM Employee WHERE eid  =  242518965", "source_tables": ["employee"]}
{"sample_id": 371, "db_id": "flight_1", "question": "What is average and maximum salary of all employees.", "rationale": ["Identify the table that contains salary information, which is the 'employee' table.", "To find the average salary, use the AVG() function on the 'salary' column.", "To find the maximum salary, use the MAX() function on the 'salary' column.", "Combine both calculations in a single SQL SELECT statement, selecting from the 'employee' table."], "pred_sql": "SELECT AVG(salary) AS average_salary, MAX(salary) AS maximum_salary FROM employee;", "gold_sql": "SELECT avg(salary) ,  max(salary) FROM Employee", "source_tables": ["employee"]}
{"sample_id": 372, "db_id": "flight_1", "question": "What is the average and largest salary of all employees?", "rationale": ["Identify the table that contains salary information, which is the 'employee' table.", "To find the average salary, use the AVG() function on the 'salary' column.", "To find the largest salary, use the MAX() function on the 'salary' column.", "Combine both calculations in a single SELECT statement, selecting the average and maximum salary from the 'employee' table."], "pred_sql": "SELECT AVG(salary) AS average_salary, MAX(salary) AS largest_salary FROM employee;", "gold_sql": "SELECT avg(salary) ,  max(salary) FROM Employee", "source_tables": ["employee"]}
{"sample_id": 373, "db_id": "flight_1", "question": "Show the id and name of the employee with maximum salary.", "rationale": ["Identify the table that contains employee information, which is the 'employee' table.", "Determine the columns needed: 'eid' for employee ID and 'name' for the employee's name.", "To find the employee with the maximum salary, we need to use a subquery to get the maximum salary from the 'employee' table.", "The subquery will be: (SELECT MAX(salary) FROM employee).", "Finally, we will select the 'eid' and 'name' from the 'employee' table where the salary matches the maximum salary found in the subquery."], "pred_sql": "SELECT eid, name FROM employee WHERE salary = (SELECT MAX(salary) FROM employee);", "gold_sql": "SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1", "source_tables": ["employee"]}
{"sample_id": 374, "db_id": "flight_1", "question": "What is the id and name of the employee with the highest salary?", "rationale": ["Identify the table that contains employee information, which is the 'employee' table.", "We need to retrieve the 'eid' (employee ID) and 'name' (employee name) of the employee.", "To find the employee with the highest salary, we will order the results by the 'salary' column in descending order.", "Using 'LIMIT 1' will ensure that we only get the top result, which corresponds to the employee with the highest salary."], "pred_sql": "SELECT eid, name FROM employee ORDER BY salary DESC LIMIT 1;", "gold_sql": "SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1", "source_tables": ["employee"]}
{"sample_id": 375, "db_id": "flight_1", "question": "Show the name of employees with three lowest salaries.", "rationale": ["Identify the table that contains employee information, which is the 'employee' table.", "Determine the column that contains the salary information, which is 'salary'.", "To find the three lowest salaries, we need to sort the employees by their salary in ascending order.", "Use the ORDER BY clause to sort the results by salary.", "Limit the results to the top 3 entries using the LIMIT clause."], "pred_sql": "SELECT name FROM employee ORDER BY salary ASC LIMIT 3;", "gold_sql": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3", "source_tables": ["employee"]}
{"sample_id": 376, "db_id": "flight_1", "question": "What is the name of the 3 employees who get paid the least?", "rationale": ["Identify the table that contains employee information, which is the 'employee' table.", "Determine the relevant column for employee names, which is 'name'.", "Identify the column that contains salary information, which is 'salary'.", "To find the employees who get paid the least, sort the results by 'salary' in ascending order.", "Limit the results to the top 3 employees to get the names of the three employees with the lowest salaries."], "pred_sql": "SELECT name FROM employee ORDER BY salary ASC LIMIT 3;", "gold_sql": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3", "source_tables": ["employee"]}
{"sample_id": 377, "db_id": "flight_1", "question": "Show names for all employees with salary more than the average.", "rationale": ["Identify the table needed: employee, since we need employee names and salaries.", "Determine the condition: we need employees with a salary greater than the average salary.", "Calculate the average salary using a subquery: SELECT AVG(salary) FROM employee.", "Combine the selection of names with the condition using a WHERE clause."], "pred_sql": "SELECT name FROM employee WHERE salary > (SELECT AVG(salary) FROM employee);", "gold_sql": "SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)", "source_tables": ["employee"]}
{"sample_id": 378, "db_id": "flight_1", "question": "What are the names of all employees who have a salary higher than average?", "rationale": ["Identify the table that contains employee information, which is the 'employee' table.", "Determine the column that contains the employee names, which is 'name'.", "Identify the column that contains the salary information, which is 'salary'.", "To find employees with a salary higher than average, we need to calculate the average salary using the AVG() function.", "Construct a subquery to calculate the average salary: (SELECT AVG(salary) FROM employee).", "Use the main query to select names from the 'employee' table where the salary is greater than the average calculated in the subquery."], "pred_sql": "SELECT name FROM employee WHERE salary > (SELECT AVG(salary) FROM employee);", "gold_sql": "SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)", "source_tables": ["employee"]}
{"sample_id": 379, "db_id": "flight_1", "question": "Show the id and salary of Mark Young.", "rationale": ["Identify the table that contains employee information, which is the 'employee' table.", "Determine the columns needed for the output, which are 'eid' (employee ID) and 'salary'.", "Formulate the SQL SELECT statement to retrieve the specified columns from the 'employee' table.", "Add a WHERE clause to filter the results to only include the employee with the name 'Mark Young'."], "pred_sql": "SELECT eid, salary FROM employee WHERE name = 'Mark Young';", "gold_sql": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'", "source_tables": ["employee"]}
{"sample_id": 380, "db_id": "flight_1", "question": "What is the id and salary of the employee named Mark Young?", "rationale": ["Identify the table that contains employee information, which is the 'employee' table.", "Determine the columns needed from the 'employee' table, which are 'eid' (employee ID) and 'salary'.", "Formulate the SQL query to select 'eid' and 'salary' from the 'employee' table where the 'name' matches 'Mark Young'."], "pred_sql": "SELECT eid, salary FROM employee WHERE name = 'Mark Young';", "gold_sql": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'", "source_tables": ["employee"]}
{"sample_id": 381, "db_id": "flight_1", "question": "How many flights do we have?", "rationale": ["Identify the requirement: The user wants to know the total number of flights.", "Determine the relevant table: The 'flight' table contains all the flight records.", "Use the COUNT() function to count the number of entries in the 'flight' table.", "Construct the SQL query to select the count of flights from the 'flight' table."], "pred_sql": "SELECT COUNT(*) AS total_flights FROM flight;", "gold_sql": "SELECT count(*) FROM Flight", "source_tables": ["flight"]}
{"sample_id": 382, "db_id": "flight_1", "question": "What is the number of flights?", "rationale": ["Identify the requirement: The user wants to know the number of flights.", "Determine the relevant table: The 'flight' table contains all the flight records.", "Use the COUNT() function to count the total number of entries in the 'flight' table.", "Construct the SQL query to select the count from the 'flight' table."], "pred_sql": "SELECT COUNT(*) AS number_of_flights FROM flight;", "gold_sql": "SELECT count(*) FROM Flight", "source_tables": ["flight"]}
{"sample_id": 383, "db_id": "flight_1", "question": "Show flight number, origin, destination of all flights in the alphabetical order of the departure cities.", "rationale": ["Identify the columns needed: flight number (flno), origin, and destination from the flight table.", "Determine the sorting requirement: the results should be ordered by the origin (departure city) in alphabetical order.", "Construct the SQL SELECT statement to retrieve the specified columns from the flight table.", "Add the ORDER BY clause to sort the results by the origin column in ascending order."], "pred_sql": "SELECT flno, origin, destination FROM flight ORDER BY origin ASC;", "gold_sql": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin", "source_tables": ["flight"]}
{"sample_id": 384, "db_id": "flight_1", "question": "What is the flight number, origin, and destination for all flights in alphabetical order by departure cities?", "rationale": ["Identify the columns needed: flight number (flno), origin, and destination.", "Determine the table to query: the flight table contains all the required information.", "Specify the order of results: the user requested the results to be in alphabetical order by departure cities, which corresponds to the 'origin' column.", "Construct the SQL SELECT statement to retrieve the specified columns from the flight table and apply the ORDER BY clause on the origin column."], "pred_sql": "SELECT flno, origin, destination FROM flight ORDER BY origin ASC;", "gold_sql": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin", "source_tables": ["flight"]}
{"sample_id": 385, "db_id": "flight_1", "question": "Show all flight number from Los Angeles.", "rationale": ["Identify the table that contains flight information, which is the 'flight' table.", "Determine the specific column needed, which is 'flno' for flight numbers.", "Specify the condition to filter the results, which is that the 'origin' must be 'Los Angeles'.", "Construct the SQL query using the SELECT statement to retrieve the 'flno' from the 'flight' table where the origin matches 'Los Angeles'."], "pred_sql": "SELECT flno FROM flight WHERE origin = 'Los Angeles';", "gold_sql": "SELECT flno FROM Flight WHERE origin  =  'Los Angeles'", "source_tables": ["flight"]}
{"sample_id": 386, "db_id": "flight_1", "question": "What are the numbers of all flights coming from Los Angeles?", "rationale": ["Identify the table that contains flight information, which is the 'flight' table.", "Determine the relevant column for the origin of the flights, which is 'origin'.", "Specify the condition to filter flights that are coming from 'Los Angeles'.", "Construct the SQL query to select the flight numbers (flno) from the 'flight' table where the origin is 'Los Angeles'."], "pred_sql": "SELECT flno FROM flight WHERE origin = 'Los Angeles';", "gold_sql": "SELECT flno FROM Flight WHERE origin  =  'Los Angeles'", "source_tables": ["flight"]}
{"sample_id": 387, "db_id": "flight_1", "question": "Show origins of all flights with destination Honolulu.", "rationale": ["Identify the table that contains the relevant information about flights, which is the 'flight' table.", "Determine the columns needed for the query: we need the 'origin' column to show the origins of flights and the 'destination' column to filter for flights going to Honolulu.", "Use the SELECT statement to retrieve the 'origin' column from the 'flight' table.", "Apply a WHERE clause to filter the results to only include flights where the 'destination' is 'Honolulu'.", "Use DISTINCT to ensure that each origin is listed only once, even if there are multiple flights from the same origin to Honolulu."], "pred_sql": "SELECT DISTINCT origin FROM flight WHERE destination = 'Honolulu';", "gold_sql": "SELECT origin FROM Flight WHERE destination  =  'Honolulu'", "source_tables": ["flight"]}
{"sample_id": 388, "db_id": "flight_1", "question": "What are the origins of all flights that are headed to Honolulu?", "rationale": ["Identify the relevant table: The 'flight' table contains information about flight origins and destinations.", "Determine the required columns: We need the 'origin' column for the results.", "Specify the condition: We want flights that are headed to 'Honolulu', which means we need to filter the results where the 'destination' column equals 'Honolulu'.", "Use DISTINCT to ensure that we only get unique origins, as there may be multiple flights from the same origin to Honolulu."], "pred_sql": "SELECT DISTINCT origin FROM flight WHERE destination = 'Honolulu';", "gold_sql": "SELECT origin FROM Flight WHERE destination  =  'Honolulu'", "source_tables": ["flight"]}
{"sample_id": 389, "db_id": "flight_1", "question": "Show me the departure date and arrival date for all flights from Los Angeles to Honolulu.", "rationale": ["Identify the relevant table: The 'flight' table contains the information about flights, including departure and arrival dates.", "Determine the columns needed: The user requested the 'departure_date' and 'arrival_date' for the flights.", "Specify the conditions: The flights should be filtered based on the origin being 'Los Angeles' and the destination being 'Honolulu'.", "Construct the SQL SELECT statement: Use SELECT to choose the required columns and WHERE to apply the filtering conditions."], "pred_sql": "SELECT departure_date, arrival_date FROM flight WHERE origin = 'Los Angeles' AND destination = 'Honolulu';", "gold_sql": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  'Los Angeles' AND destination  =  'Honolulu'", "source_tables": ["flight"]}
{"sample_id": 390, "db_id": "flight_1", "question": "What are the departure and arrival dates of all flights from LA to Honolulu?", "rationale": ["Identify the relevant table: The 'flight' table contains the information about flights, including departure and arrival dates.", "Determine the columns needed: We need 'departure_date' and 'arrival_date' for the flights.", "Specify the conditions: We want flights that originate from 'LA' and have 'Honolulu' as their destination.", "Construct the SQL query: Use SELECT to get the required columns from the flight table with the specified conditions."], "pred_sql": "SELECT departure_date, arrival_date FROM flight WHERE origin = 'LA' AND destination = 'Honolulu';", "gold_sql": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  'Los Angeles' AND destination  =  'Honolulu'", "source_tables": ["flight"]}
{"sample_id": 391, "db_id": "flight_1", "question": "Show flight number for all flights with more than 2000 distance.", "rationale": ["Identify the table that contains the flight information, which is the 'flight' table.", "Determine the column that holds the flight number, which is 'flno'.", "Identify the column that contains the distance of the flights, which is 'distance'.", "Formulate a SQL query to select the 'flno' from the 'flight' table where the 'distance' is greater than 2000."], "pred_sql": "SELECT flno FROM flight WHERE distance > 2000;", "gold_sql": "SELECT flno FROM Flight WHERE distance  >  2000", "source_tables": ["flight"]}
{"sample_id": 392, "db_id": "flight_1", "question": "What are the numbers of all flights that can cover a distance of more than 2000?", "rationale": ["Identify the relevant table: The 'flight' table contains the flight numbers and distances.", "Determine the condition: We need to find flights that can cover a distance of more than 2000.", "Construct the SQL query: Use a SELECT statement to retrieve the 'flno' from the 'flight' table where the 'distance' is greater than 2000."], "pred_sql": "SELECT flno FROM flight WHERE distance > 2000;", "gold_sql": "SELECT flno FROM Flight WHERE distance  >  2000", "source_tables": ["flight"]}
{"sample_id": 393, "db_id": "flight_1", "question": "What is the average price for flights from Los Angeles to Honolulu.", "rationale": ["Identify the relevant table: The 'flight' table contains information about flights, including their prices.", "Determine the columns needed: We need the 'price' column to calculate the average price.", "Specify the condition: We are interested in flights from 'Los Angeles' to 'Honolulu', so we will filter the results based on the 'origin' and 'destination' columns.", "Use the AVG() function: To calculate the average price, we will use the AVG() function on the 'price' column.", "Construct the SQL query: Combine all the elements into a complete SQL query that selects the average price for the specified flights."], "pred_sql": "SELECT AVG(price) AS average_price FROM flight WHERE origin = 'Los Angeles' AND destination = 'Honolulu';", "gold_sql": "SELECT avg(price) FROM Flight WHERE origin  =  'Los Angeles' AND destination  =  'Honolulu'", "source_tables": ["flight"]}
{"sample_id": 394, "db_id": "flight_1", "question": "What is the average price for flights from LA to Honolulu?", "rationale": ["Identify the relevant table: The 'flight' table contains the information about flights, including their prices.", "Determine the columns needed: We need the 'price' column to calculate the average price.", "Specify the condition: We are interested in flights from 'LA' to 'Honolulu', so we will filter the results based on the 'origin' and 'destination' columns.", "Construct the SQL query: Use the AVG() function to calculate the average price for the filtered flights."], "pred_sql": "SELECT AVG(price) AS average_price FROM flight WHERE origin = 'LA' AND destination = 'Honolulu';", "gold_sql": "SELECT avg(price) FROM Flight WHERE origin  =  'Los Angeles' AND destination  =  'Honolulu'", "source_tables": ["flight"]}
{"sample_id": 395, "db_id": "flight_1", "question": "Show origin and destination for flights with price higher than 300.", "rationale": ["Identify the columns needed: 'origin' and 'destination'.", "Determine the table to query: 'flight'.", "Specify the condition for filtering: price higher than 300.", "Construct the SQL SELECT statement to retrieve the specified columns from the flight table with the given condition."], "pred_sql": "SELECT origin, destination FROM flight WHERE price > 300;", "gold_sql": "SELECT origin ,  destination FROM Flight WHERE price  >  300", "source_tables": ["flight"]}
{"sample_id": 396, "db_id": "flight_1", "question": "What is the origin and destination for all flights whose price is higher than 300?", "rationale": ["Identify the relevant table: The query is about flights, so we will use the 'flight' table.", "Determine the columns needed: We need the 'origin' and 'destination' columns from the 'flight' table.", "Specify the condition: We need to filter the results where the 'price' is greater than 300.", "Construct the SQL query: Using SELECT to get the required columns and WHERE to apply the condition."], "pred_sql": "SELECT origin, destination FROM flight WHERE price > '300';", "gold_sql": "SELECT origin ,  destination FROM Flight WHERE price  >  300", "source_tables": ["flight"]}
{"sample_id": 397, "db_id": "flight_1", "question": "Show the flight number and distance of the flight with maximum price.", "rationale": ["Identify the columns needed: flight number (flno) and distance from the flight table.", "Determine the condition: we need to find the flight with the maximum price.", "Use a subquery to find the maximum price from the flight table.", "Select the flight number and distance where the price matches the maximum price found in the subquery."], "pred_sql": "SELECT flno, distance FROM flight WHERE price = (SELECT MAX(price) FROM flight);", "gold_sql": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1", "source_tables": ["flight"]}
{"sample_id": 398, "db_id": "flight_1", "question": "What is the flight number and its distance for the one with the maximum price?", "rationale": ["Identify the columns needed: flight number (flno) and distance.", "Determine the condition: we need the flight with the maximum price.", "Use a subquery to find the maximum price from the flight table.", "Select the flight number and distance where the price matches the maximum price found in the subquery."], "pred_sql": "SELECT flno, distance FROM flight WHERE price = (SELECT MAX(price) FROM flight)", "gold_sql": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1", "source_tables": ["flight"]}
{"sample_id": 399, "db_id": "flight_1", "question": "Show the flight number of flights with three lowest distances.", "rationale": ["Identify the relevant table: The 'flight' table contains the flight number and distance information.", "Determine the required output: We need to select the flight number (flno) of the flights.", "Sort the results: To find the three lowest distances, we need to order the results by the 'distance' column in ascending order.", "Limit the results: We only want the top three results, so we will use the LIMIT clause."], "pred_sql": "SELECT flno FROM flight ORDER BY distance ASC LIMIT 3;", "gold_sql": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3", "source_tables": ["flight"]}
{"sample_id": 400, "db_id": "flight_1", "question": "What are the numbers of the shortest flights?", "rationale": ["Identify the relevant table: The 'flight' table contains information about flights, including their distances.", "Determine the required information: We need the flight numbers of the shortest flights.", "Sort the flights by distance: Use the ORDER BY clause to sort the flights in ascending order based on the 'distance' column.", "Limit the results: Use the LIMIT clause to return only the shortest flight."], "pred_sql": "SELECT flno FROM flight ORDER BY distance ASC LIMIT 1;", "gold_sql": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3", "source_tables": ["flight"]}
{"sample_id": 401, "db_id": "flight_1", "question": "What is the average distance and average price for flights from Los Angeles.", "rationale": ["Identify the relevant table: The 'flight' table contains the necessary information about flights, including distance and price.", "Determine the required calculations: We need to calculate the average distance and average price, which can be done using the AVG() function in SQL.", "Specify the filtering condition: We are only interested in flights originating from Los Angeles, so we will add a WHERE clause to filter by the 'origin' column.", "Construct the SQL query: Combine the SELECT statement with the AVG() functions and the WHERE clause to form the complete SQL query."], "pred_sql": "SELECT AVG(distance) AS average_distance, AVG(price) AS average_price FROM flight WHERE origin = 'Los Angeles';", "gold_sql": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  'Los Angeles'", "source_tables": ["flight"]}
{"sample_id": 402, "db_id": "flight_1", "question": "What is the average distance and price for all flights from LA?", "rationale": ["Identify the relevant table: The 'flight' table contains the necessary information about flights, including distance and price.", "Determine the required calculations: We need to calculate the average distance and average price for flights.", "Specify the filtering condition: We are only interested in flights originating from 'LA'.", "Construct the SQL query: Use the AVG() function to calculate the average distance and price, and include a WHERE clause to filter by origin."], "pred_sql": "SELECT AVG(distance) AS average_distance, AVG(price) AS average_price FROM flight WHERE origin = 'LA';", "gold_sql": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  'Los Angeles'", "source_tables": ["flight"]}
{"sample_id": 403, "db_id": "flight_1", "question": "Show all origins and the number of flights from each origin.", "rationale": ["Identify the table that contains the relevant data: the 'flight' table.", "Determine the columns needed: 'origin' for the starting location and a count of flights.", "Use the COUNT() function to count the number of flights for each origin.", "Group the results by 'origin' to get the count for each unique origin."], "pred_sql": "SELECT origin, COUNT(*) AS number_of_flights FROM flight GROUP BY origin;", "gold_sql": "SELECT origin ,  count(*) FROM Flight GROUP BY origin", "source_tables": ["flight"]}
{"sample_id": 404, "db_id": "flight_1", "question": "For each origin, how many flights came from there?", "rationale": ["Identify the relevant table: The 'flight' table contains the 'origin' column and is where flight data is stored.", "Determine the required output: We need to count the number of flights for each unique origin.", "Use the COUNT() function to count the number of flights for each origin.", "Group the results by the 'origin' column to get the count for each unique origin.", "Construct the SQL query using SELECT, COUNT(), and GROUP BY clauses."], "pred_sql": "SELECT origin, COUNT(*) AS flight_count FROM flight GROUP BY origin;", "gold_sql": "SELECT origin ,  count(*) FROM Flight GROUP BY origin", "source_tables": ["flight"]}
{"sample_id": 405, "db_id": "flight_1", "question": "Show all destinations and the number of flights to each destination.", "rationale": ["Identify the required information: We need to show all destinations and the number of flights to each destination.", "Determine the relevant table: The 'flight' table contains the 'destination' and we can count the number of flights.", "Use the COUNT() function to count the number of flights for each destination.", "Group the results by 'destination' to get the count for each unique destination."], "pred_sql": "SELECT destination, COUNT(*) AS number_of_flights FROM flight GROUP BY destination;", "gold_sql": "SELECT destination ,  count(*) FROM Flight GROUP BY destination", "source_tables": ["flight"]}
{"sample_id": 406, "db_id": "flight_1", "question": "What are the destinations and number of flights to each one?", "rationale": ["Identify the relevant table: The 'flight' table contains information about flights, including their destinations.", "Determine the required information: We need to retrieve the destinations and the count of flights to each destination.", "Use the COUNT() function to count the number of flights for each destination.", "Group the results by destination using GROUP BY to aggregate the flight counts for each unique destination."], "pred_sql": "SELECT destination, COUNT(*) AS number_of_flights FROM flight GROUP BY destination;", "gold_sql": "SELECT destination ,  count(*) FROM Flight GROUP BY destination", "source_tables": ["flight"]}
{"sample_id": 407, "db_id": "flight_1", "question": "Which origin has most number of flights?", "rationale": ["Identify the relevant table: The 'flight' table contains the 'origin' column and is where flight data is stored.", "Count the number of flights for each origin: Use the COUNT() function to count the number of entries for each unique origin.", "Group the results by origin: Use GROUP BY to aggregate the counts for each origin.", "Order the results by flight count in descending order: Use ORDER BY flight_count DESC to sort the origins by the number of flights.", "Limit the results to the top origin: Use LIMIT 1 to get only the origin with the most flights."], "pred_sql": "SELECT origin, COUNT(*) AS flight_count FROM flight GROUP BY origin ORDER BY flight_count DESC LIMIT 1;", "gold_sql": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1", "source_tables": ["flight"]}
{"sample_id": 408, "db_id": "flight_1", "question": "What place has the most flights coming from there?", "rationale": ["Identify the relevant table: The 'flight' table contains information about flights, including their origin.", "Determine the required information: We need to find the place (origin) with the most flights.", "Use the COUNT function: To count the number of flights from each origin, we will use the COUNT(*) function.", "Group the results: We will group the results by the 'origin' column to aggregate the flight counts for each place.", "Order the results: To find the place with the most flights, we will order the results in descending order based on the flight count.", "Limit the results: Since we only want the place with the most flights, we will limit the results to 1."], "pred_sql": "SELECT origin, COUNT(*) AS flight_count FROM flight GROUP BY origin ORDER BY flight_count DESC LIMIT 1;", "gold_sql": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1", "source_tables": ["flight"]}
{"sample_id": 409, "db_id": "flight_1", "question": "Which destination has least number of flights?", "rationale": ["Identify the relevant table: The 'flight' table contains information about flights, including their destinations.", "Determine the goal: We need to find the destination with the least number of flights.", "Group the results by destination: This will allow us to count the number of flights for each destination.", "Count the number of flights for each destination: Use COUNT(*) to get the number of flights per destination.", "Order the results: We want the destination with the least number of flights, so we will order the results in ascending order based on the count.", "Limit the results: Since we only want the destination with the least number of flights, we will limit the results to 1."], "pred_sql": "SELECT destination FROM flight GROUP BY destination ORDER BY COUNT(*) ASC LIMIT 1;", "gold_sql": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1", "source_tables": ["flight"]}
{"sample_id": 410, "db_id": "flight_1", "question": "What destination has the fewest number of flights?", "rationale": ["Identify the relevant table: The 'flight' table contains information about flights, including their destinations.", "Group the results by destination: We need to count the number of flights for each destination, so we will use the GROUP BY clause on the 'destination' column.", "Count the number of flights: Use the COUNT() function to count the number of flights for each destination.", "Order the results: To find the destination with the fewest flights, we will order the results in ascending order based on the count of flights.", "Limit the results: Since we only want the destination with the fewest flights, we will use LIMIT 1 to get only the top result."], "pred_sql": "SELECT destination FROM flight GROUP BY destination ORDER BY COUNT(*) ASC LIMIT 1;", "gold_sql": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1", "source_tables": ["flight"]}
{"sample_id": 411, "db_id": "flight_1", "question": "What is the aircraft name for the flight with number 99", "rationale": ["Identify the relevant tables: 'flight' and 'aircraft'.", "Determine the relationship between the tables: 'flight' has a foreign key 'aid' that references 'aircraft.aid'.", "The user is interested in the aircraft name for a specific flight number, which is provided as '99'.", "Construct the SQL query to select the 'name' from the 'aircraft' table, joining it with the 'flight' table on the 'aid' column, and filtering by the flight number 'flno' equal to '99'."], "pred_sql": "SELECT aircraft.name FROM flight JOIN aircraft ON flight.aid = aircraft.aid WHERE flight.flno = '99';", "gold_sql": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99", "source_tables": ["aircraft", "flight"]}
{"sample_id": 412, "db_id": "flight_1", "question": "What is the name of the aircraft that was on flight number 99?", "rationale": ["Identify the relevant tables: 'flight' and 'aircraft'.", "Determine the relationship between the tables: 'flight' has a foreign key 'aid' that references 'aircraft.aid'.", "The query needs to retrieve the 'name' of the aircraft from the 'aircraft' table.", "Filter the results based on the flight number, which is specified as '99'.", "Construct the SQL query using a JOIN to connect the two tables and a WHERE clause to filter by flight number."], "pred_sql": "SELECT aircraft.name FROM flight JOIN aircraft ON flight.aid = aircraft.aid WHERE flight.flno = '99';", "gold_sql": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99", "source_tables": ["aircraft", "flight"]}
{"sample_id": 413, "db_id": "flight_1", "question": "Show all flight numbers with aircraft Airbus A340-300.", "rationale": ["Identify the relevant tables: 'flight' and 'aircraft'.", "Determine the columns needed: 'flno' from 'flight' and 'name' from 'aircraft'.", "Establish the relationship between the tables using the foreign key: flight.aid = aircraft.aid.", "Filter the results to include only those flights where the aircraft name is 'Airbus A340-300'.", "Construct the SQL query to select the flight numbers based on the specified conditions."], "pred_sql": "SELECT flight.flno FROM flight JOIN aircraft ON flight.aid = aircraft.aid WHERE aircraft.name = 'Airbus A340-300';", "gold_sql": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  'Airbus A340-300'", "source_tables": ["aircraft", "flight"]}
{"sample_id": 414, "db_id": "flight_1", "question": "What are the flight numbers for the aircraft Airbus A340-300?", "rationale": ["Identify the relevant tables: 'flight' and 'aircraft'.", "Determine the relationship between the tables: 'flight' has a foreign key 'aid' that references 'aircraft.aid'.", "We need to select the 'flno' from the 'flight' table.", "To filter the results, we need to join the 'flight' table with the 'aircraft' table on the 'aid' column.", "The condition for filtering is that the 'name' of the aircraft should be 'Airbus A340-300'.", "Construct the SQL query using SELECT, JOIN, and WHERE clauses."], "pred_sql": "SELECT flight.flno FROM flight JOIN aircraft ON flight.aid = aircraft.aid WHERE aircraft.name = 'Airbus A340-300';", "gold_sql": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  'Airbus A340-300'", "source_tables": ["aircraft", "flight"]}
{"sample_id": 415, "db_id": "flight_1", "question": "Show aircraft names and number of flights for each aircraft.", "rationale": ["Identify the tables needed: We need data from the 'aircraft' table for aircraft names and from the 'flight' table to count the number of flights.", "Determine the relationship: The 'flight' table has a foreign key 'aid' that relates to the 'aircraft' table's 'aid'.", "Use a LEFT JOIN to include all aircraft even if they have no flights, ensuring we count flights correctly.", "Select the aircraft name and count the number of flights, using COUNT() function to aggregate the flight numbers.", "Group the results by aircraft ID and name to get the count of flights for each aircraft."], "pred_sql": "SELECT a.name, COUNT(f.flno) AS number_of_flights\nFROM aircraft a\nLEFT JOIN flight f ON a.aid = f.aid\nGROUP BY a.aid, a.name;", "gold_sql": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid", "source_tables": ["aircraft", "flight"]}
{"sample_id": 416, "db_id": "flight_1", "question": "What is the name of each aircraft and how many flights does each one complete?", "rationale": ["Identify the tables involved: We need information from the 'aircraft' table for aircraft names and the 'flight' table for counting flights.", "Determine the relationship: The 'flight' table has a foreign key 'aid' that relates to the 'aircraft' table's 'aid'.", "Use a LEFT JOIN to include all aircraft even if they have no flights, ensuring we count flights correctly.", "Select the aircraft name and count the number of flights associated with each aircraft.", "Group the results by aircraft ID to get the count of flights for each aircraft."], "pred_sql": "SELECT a.name, COUNT(f.flno) AS flight_count\nFROM aircraft a\nLEFT JOIN flight f ON a.aid = f.aid\nGROUP BY a.aid;", "gold_sql": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid", "source_tables": ["aircraft", "flight"]}
{"sample_id": 417, "db_id": "flight_1", "question": "Show names for all aircraft with at least two flights.", "rationale": ["We need to find aircraft that have at least two flights.", "To do this, we will join the 'aircraft' table with the 'flight' table on the aircraft ID ('aid').", "We will group the results by the aircraft ID to count the number of flights associated with each aircraft.", "Using the HAVING clause, we will filter the groups to include only those with a count of flights greater than or equal to 2.", "Finally, we will select the distinct names of the aircraft from the results."], "pred_sql": "SELECT DISTINCT a.name FROM aircraft a JOIN flight f ON a.aid = f.aid GROUP BY a.aid HAVING COUNT(f.flno) >= 2;", "gold_sql": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2", "source_tables": ["aircraft", "flight"]}
{"sample_id": 418, "db_id": "flight_1", "question": "What are the names for all aircrafts with at least 2 flights?", "rationale": ["We need to find the names of aircraft that have at least 2 flights.", "To do this, we will join the 'aircraft' table with the 'flight' table on the aircraft ID ('aid').", "We will group the results by the aircraft ID to count the number of flights associated with each aircraft.", "We will use the HAVING clause to filter the groups to only include those with a count of flights greater than or equal to 2.", "Finally, we will select the distinct names of the aircraft from the results."], "pred_sql": "SELECT DISTINCT a.name FROM aircraft a JOIN flight f ON a.aid = f.aid GROUP BY a.aid HAVING COUNT(f.flno) >= 2;", "gold_sql": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2", "source_tables": ["aircraft", "flight"]}
{"sample_id": 419, "db_id": "flight_1", "question": "How many employees have certificate.", "rationale": ["Identify the relevant table: The 'certificate' table contains the employee IDs (eid) of individuals holding certificates.", "Determine the requirement: We need to count the number of distinct employees who have a certificate.", "Use the COUNT function to count the unique employee IDs in the 'certificate' table.", "Construct the SQL query to select the count of distinct employee IDs from the 'certificate' table."], "pred_sql": "SELECT COUNT(DISTINCT eid) AS employee_count FROM certificate;", "gold_sql": "SELECT count(DISTINCT eid) FROM Certificate", "source_tables": ["certificate"]}
{"sample_id": 420, "db_id": "flight_1", "question": "What is the count of distinct employees with certificates?", "rationale": ["Identify the relevant table: The 'certificate' table contains the employee IDs (eid) of individuals holding certificates.", "Determine the requirement: We need to count distinct employees, which means we need to use the COUNT function with DISTINCT on the 'eid' column.", "Construct the SQL query: The query will select the count of distinct 'eid' from the 'certificate' table."], "pred_sql": "SELECT COUNT(DISTINCT eid) AS distinct_employee_count FROM certificate;", "gold_sql": "SELECT count(DISTINCT eid) FROM Certificate", "source_tables": ["certificate"]}
{"sample_id": 421, "db_id": "flight_1", "question": "Show ids for all employees who don't have a certificate.", "rationale": ["Identify the table that contains employee information, which is the 'employee' table.", "We need to find employees who do not have a certificate, which is represented in the 'certificate' table.", "To find employees without a certificate, we can use a subquery to select all employee IDs (eid) from the 'certificate' table.", "We will then use the NOT IN clause to filter out those employee IDs from the 'employee' table.", "The final query will select the 'eid' from the 'employee' table where the 'eid' is not in the list of 'eid' from the 'certificate' table."], "pred_sql": "SELECT eid FROM employee WHERE eid NOT IN (SELECT eid FROM certificate)", "gold_sql": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate", "source_tables": ["employee", "certificate"]}
{"sample_id": 422, "db_id": "flight_1", "question": "What are the ids of all employees that don't have certificates?", "rationale": ["Identify the table that contains employee information, which is the 'employee' table.", "We need to find employees who do not have certificates, so we will look for employee IDs (eid) that are not present in the 'certificate' table.", "To achieve this, we can use a subquery that selects all employee IDs from the 'certificate' table.", "The main query will select employee IDs from the 'employee' table where the employee ID is not in the list of IDs returned by the subquery."], "pred_sql": "SELECT eid FROM employee WHERE eid NOT IN (SELECT eid FROM certificate)", "gold_sql": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate", "source_tables": ["employee", "certificate"]}
{"sample_id": 423, "db_id": "flight_1", "question": "Show names for all aircrafts of which John Williams has certificates.", "rationale": ["Identify the tables involved: We need to retrieve aircraft names, so we will use the 'aircraft' table. We also need to check for certificates held by 'John Williams', which involves the 'certificate' and 'employee' tables.", "Determine the relationships: The 'certificate' table links employees to aircraft through the 'aid' (aircraft ID) and 'eid' (employee ID). We will join these tables based on these keys.", "Construct the SQL query: We will select the distinct names of aircraft from the 'aircraft' table, joining it with the 'certificate' table on 'aid' and with the 'employee' table on 'eid'. We will filter the results to only include those where the employee's name is 'John Williams'."], "pred_sql": "SELECT DISTINCT aircraft.name FROM aircraft JOIN certificate ON aircraft.aid = certificate.aid JOIN employee ON certificate.eid = employee.eid WHERE employee.name = 'John Williams';", "gold_sql": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  'John Williams'", "source_tables": ["employee", "certificate", "aircraft"]}
{"sample_id": 424, "db_id": "flight_1", "question": "What are the names of all aircrafts that John Williams have certificates to be able to fly?", "rationale": ["Identify the tables involved: We need to find aircraft names based on employee certificates, so we will use the 'aircraft', 'certificate', and 'employee' tables.", "Determine the relationships: The 'certificate' table links 'employee' and 'aircraft' through the 'eid' and 'aid' columns respectively.", "Formulate the JOINs: We will join 'aircraft' with 'certificate' on 'aircraft.aid = certificate.aid', and then join 'certificate' with 'employee' on 'certificate.eid = employee.eid'.", "Specify the condition: We need to filter the results to only include records where the employee's name is 'John Williams'.", "Select the required fields: We want the names of the aircraft, so we will select 'aircraft.name'.", "Use DISTINCT to avoid duplicate aircraft names in the result."], "pred_sql": "SELECT DISTINCT aircraft.name FROM aircraft JOIN certificate ON aircraft.aid = certificate.aid JOIN employee ON certificate.eid = employee.eid WHERE employee.name = 'John Williams';", "gold_sql": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  'John Williams'", "source_tables": ["employee", "certificate", "aircraft"]}
{"sample_id": 425, "db_id": "flight_1", "question": "Show names for all employees who have certificate of Boeing 737-800.", "rationale": ["Identify the tables involved: employee, certificate, and aircraft.", "We need to find employees who have a certificate for a specific aircraft, which means we will join the employee table with the certificate table on the employee ID (eid).", "Next, we will join the certificate table with the aircraft table on the aircraft ID (aid) to access the aircraft details.", "We need to filter the results to only include those employees who have a certificate for the 'Boeing 737-800'.", "Finally, we will select the names of the employees from the resulting joined tables."], "pred_sql": "SELECT employee.name FROM employee JOIN certificate ON employee.eid = certificate.eid JOIN aircraft ON certificate.aid = aircraft.aid WHERE aircraft.name = 'Boeing 737-800';", "gold_sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  'Boeing 737-800'", "source_tables": ["employee", "certificate", "aircraft"]}
{"sample_id": 426, "db_id": "flight_1", "question": "What are the names of all employees who have a certificate to fly Boeing 737-800?", "rationale": ["Identify the tables involved: employee, certificate, and aircraft.", "We need to find employees who have a certificate to fly a specific aircraft, which means we will join the employee table with the certificate table on the employee ID (eid).", "Next, we will join the certificate table with the aircraft table on the aircraft ID (aid) to access the aircraft details.", "We need to filter the results to only include the aircraft named 'Boeing 737-800'.", "Finally, we will select the names of the employees from the resulting joined tables."], "pred_sql": "SELECT employee.name FROM employee JOIN certificate ON employee.eid = certificate.eid JOIN aircraft ON certificate.aid = aircraft.aid WHERE aircraft.name = 'Boeing 737-800';", "gold_sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  'Boeing 737-800'", "source_tables": ["employee", "certificate", "aircraft"]}
{"sample_id": 427, "db_id": "flight_1", "question": "Show names for all employees who have certificates on both Boeing 737-800 and Airbus A340-300.", "rationale": ["Identify the tables involved: employee, certificate, and aircraft.", "We need to find employees who have certificates for two specific aircraft: Boeing 737-800 and Airbus A340-300.", "Join the employee table with the certificate table to link employees with their certificates.", "Join the certificate table with the aircraft table to filter by aircraft names.", "Use a subquery to find employees who have a certificate for the Airbus A340-300.", "Filter the results to ensure that the employee has certificates for both aircraft."], "pred_sql": "SELECT e.name FROM employee e JOIN certificate c1 ON e.eid = c1.eid JOIN aircraft a1 ON c1.aid = a1.aid WHERE a1.name = 'Boeing 737-800' AND c1.eid IN (SELECT c2.eid FROM certificate c2 JOIN aircraft a2 ON c2.aid = a2.aid WHERE a2.name = 'Airbus A340-300');", "gold_sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  'Boeing 737-800' INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  'Airbus A340-300'", "source_tables": ["employee", "certificate", "aircraft"]}
{"sample_id": 428, "db_id": "flight_1", "question": "What are the names of all employees who can fly both the Boeing 737-800 and the Airbus A340-300?", "rationale": ["Identify the tables involved: employee, certificate, and aircraft.", "We need to find employees who can fly specific aircraft, so we will join the employee table with the certificate table to link employees to their certifications.", "Next, we will join the certificate table with the aircraft table to get the aircraft details.", "We need to filter for employees who can fly both the Boeing 737-800 and the Airbus A340-300. This requires two separate queries: one for each aircraft.", "The first query selects employee names who can fly the Boeing 737-800.", "The second query selects employee names who can fly the Airbus A340-300.", "To find employees who can fly both aircraft, we can use the INTERSECT operator to get the common names from both queries."], "pred_sql": "SELECT e.name FROM employee e JOIN certificate c1 ON e.eid = c1.eid JOIN aircraft a1 ON c1.aid = a1.aid WHERE a1.name = 'Boeing 737-800' INTERSECT SELECT e.name FROM employee e JOIN certificate c2 ON e.eid = c2.eid JOIN aircraft a2 ON c2.aid = a2.aid WHERE a2.name = 'Airbus A340-300';", "gold_sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  'Boeing 737-800' INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  'Airbus A340-300'", "source_tables": ["employee", "certificate", "aircraft"]}
{"sample_id": 429, "db_id": "flight_1", "question": "Show names for all employees who do not have certificate of Boeing 737-800.", "rationale": ["Identify the employees who hold a certificate for the Boeing 737-800 by querying the certificate table for the corresponding aircraft ID.", "Use a subquery to find the aircraft ID for the Boeing 737-800 from the aircraft table.", "Select the names of employees from the employee table whose IDs are not in the list of IDs obtained from the previous step."], "pred_sql": "SELECT name FROM employee WHERE eid NOT IN (SELECT eid FROM certificate WHERE aid = (SELECT aid FROM aircraft WHERE name = 'Boeing 737-800'));", "gold_sql": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  'Boeing 737-800'", "source_tables": ["employee", "certificate", "aircraft"]}
{"sample_id": 430, "db_id": "flight_1", "question": "What are the names of all employees who are not certified to fly Boeing 737-800s?", "rationale": ["Identify the relevant tables: employee and certificate.", "We need to find employees who are not certified to fly a specific aircraft, in this case, the Boeing 737-800.", "To do this, we will first find the employee IDs (eid) of those who are certified to fly the Boeing 737-800 by joining the certificate and aircraft tables.", "Next, we will select the names of employees from the employee table whose IDs are not in the list of certified employee IDs for the Boeing 737-800.", "The final SQL query will use a subquery to filter out the certified employees from the employee table."], "pred_sql": "SELECT e.name FROM employee e WHERE e.eid NOT IN (SELECT c.eid FROM certificate c JOIN aircraft a ON c.aid = a.aid WHERE a.name = 'Boeing 737-800')", "gold_sql": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  'Boeing 737-800'", "source_tables": ["employee", "certificate", "aircraft"]}
{"sample_id": 431, "db_id": "flight_1", "question": "Show the name of aircraft which fewest people have its certificate.", "rationale": ["Identify the relevant tables: We need to get the aircraft names from the 'aircraft' table and the number of certificates from the 'certificate' table.", "Join the 'aircraft' table with the 'certificate' table on the aircraft ID (aid) to associate each aircraft with its certificates.", "Group the results by aircraft ID to count the number of certificates each aircraft has.", "Order the results by the count of certificates in ascending order to find the aircraft with the fewest certificates.", "Limit the results to 1 to get only the aircraft with the fewest certificates."], "pred_sql": "SELECT a.name\nFROM aircraft a\nJOIN certificate c ON a.aid = c.aid\nGROUP BY a.aid\nORDER BY COUNT(c.eid) ASC\nLIMIT 1;", "gold_sql": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["aircraft", "certificate"]}
{"sample_id": 432, "db_id": "flight_1", "question": "What are the names of the aircraft that the least people are certified to fly?", "rationale": ["Identify the relevant tables: We need information from the 'aircraft' and 'certificate' tables.", "Join the 'aircraft' table with the 'certificate' table on the aircraft ID (aid) to link aircraft with their certifications.", "Group the results by aircraft ID to count how many employees are certified for each aircraft.", "Order the results by the count of certified employees in ascending order to find the aircraft with the least certifications.", "Limit the results to 1 to get only the aircraft with the least number of certified pilots."], "pred_sql": "SELECT a.name\nFROM aircraft a\nJOIN certificate c ON a.aid = c.aid\nGROUP BY a.aid\nORDER BY COUNT(c.eid) ASC\nLIMIT 1;", "gold_sql": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["aircraft", "certificate"]}
{"sample_id": 433, "db_id": "flight_1", "question": "Show the name and distance of the aircrafts with more than 5000 distance and which at least 5 people have its certificate.", "rationale": ["We need to select the name and distance of aircrafts, so we will use SELECT to specify these columns: a.name and a.distance.", "The aircrafts are stored in the 'aircraft' table, and we need to join it with the 'certificate' table to filter based on the number of certificates.", "We will use a JOIN clause to combine the 'aircraft' table with the 'certificate' table on the common column 'aid'.", "To find aircrafts with more than 5000 distance, we will use a HAVING clause after grouping the results by aircraft ID (a.aid).", "We also need to ensure that at least 5 people have a certificate for the aircraft, so we will use COUNT(c.eid) to count the number of certificates and apply the condition in the HAVING clause.", "Finally, we will group the results by aircraft ID to ensure we can count the certificates correctly and apply the distance condition."], "pred_sql": "SELECT a.name, a.distance \nFROM aircraft a \nJOIN certificate c ON a.aid = c.aid \nGROUP BY a.aid \nHAVING a.distance > 5000 AND COUNT(c.eid) >= 5;", "gold_sql": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5", "source_tables": ["aircraft", "certificate"]}
{"sample_id": 434, "db_id": "flight_1", "question": "What is the name and distance of every aircraft that can cover a distance of more than 5000 and which at least 5 people can fly?", "rationale": ["Identify the columns needed: 'name' and 'distance' from the 'aircraft' table.", "Determine the condition for distance: it should be greater than 5000.", "Identify the condition for the number of flights: we need to find aircraft that have at least 5 flights associated with them.", "Use a subquery to count the number of distinct flight numbers (flno) for each aircraft (aid) in the 'flight' table, grouping by 'aid' and filtering with HAVING COUNT(DISTINCT flno) >= 5.", "Combine the conditions using an AND clause to filter the aircraft based on both distance and the number of flights."], "pred_sql": "SELECT name, distance FROM aircraft WHERE distance > 5000 AND aid IN (SELECT aid FROM flight GROUP BY aid HAVING COUNT(DISTINCT flno) >= 5);", "gold_sql": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5", "source_tables": ["aircraft", "certificate"]}
{"sample_id": 435, "db_id": "flight_1", "question": "what is the salary and name of the employee who has the most number of aircraft certificates?", "rationale": ["Identify the relevant tables: employee and certificate.", "We need to find the employee with the most aircraft certificates, so we will join the employee table with the certificate table on the employee ID (eid).", "We will group the results by employee ID to count the number of certificates each employee has.", "We will order the results by the count of certificates in descending order to get the employee with the most certificates at the top.", "Finally, we will limit the results to 1 to get only the top employee.", "Select the name and salary of the employee from the results."], "pred_sql": "SELECT e.name, e.salary FROM employee e JOIN certificate c ON e.eid = c.eid GROUP BY e.eid ORDER BY COUNT(c.aid) DESC LIMIT 1;", "gold_sql": "SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["employee", "certificate"]}
{"sample_id": 436, "db_id": "flight_1", "question": "What is the salaray and name of the employee that is certified to fly the most planes?", "rationale": ["We need to find the employee who is certified to fly the most planes, which means we need to count the number of aircraft each employee is certified for.", "The 'certificate' table links employees to the aircraft they are certified to fly, so we will join the 'employee' table with the 'certificate' table on the employee ID (eid).", "We will group the results by employee ID to count how many aircraft each employee is certified for.", "To find the employee with the most certifications, we will order the results by the count of aircraft in descending order.", "Finally, we will limit the results to just one employee to get the one with the highest count, and select the employee's name and salary."], "pred_sql": "SELECT e.name, e.salary FROM employee e JOIN certificate c ON e.eid = c.eid GROUP BY e.eid ORDER BY COUNT(c.aid) DESC LIMIT 1;", "gold_sql": "SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["employee", "certificate"]}
{"sample_id": 437, "db_id": "flight_1", "question": "What is the salary and name of the employee who has the most number of certificates on aircrafts with distance more than 5000?", "rationale": ["Identify the relevant tables: employee, certificate, and aircraft.", "We need to find employees who have certificates for aircrafts with a distance greater than 5000.", "Join the employee table with the certificate table on employee ID (eid) and then join with the aircraft table on aircraft ID (aid).", "Filter the results to include only those aircrafts where the distance is greater than 5000.", "Group the results by employee ID to count the number of certificates each employee has.", "Order the results by the count of certificates in descending order to find the employee with the most certificates.", "Limit the results to 1 to get only the top employee."], "pred_sql": "SELECT e.name, e.salary \nFROM employee e \nJOIN certificate c ON e.eid = c.eid \nJOIN aircraft a ON c.aid = a.aid \nWHERE a.distance > 5000 \nGROUP BY e.eid \nORDER BY COUNT(c.aid) DESC \nLIMIT 1;", "gold_sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["employee", "certificate", "aircraft"]}
{"sample_id": 438, "db_id": "flight_1", "question": "What is the salaray and name of the employee with the most certificates to fly planes more than 5000?", "rationale": ["Identify the relevant tables: employee, certificate, and aircraft.", "We need to find employees who have certificates to fly aircraft with a maximum distance greater than 5000.", "Join the employee table with the certificate table on employee ID (eid) and then join with the aircraft table on aircraft ID (aid).", "Filter the results to include only those aircraft where the distance is greater than 5000.", "Group the results by employee ID to count the number of certificates each employee has.", "Order the results by the count of certificates in descending order to find the employee with the most certificates.", "Limit the results to 1 to get only the top employee."], "pred_sql": "SELECT e.name, e.salary FROM employee e JOIN certificate c ON e.eid = c.eid JOIN aircraft a ON c.aid = a.aid WHERE a.distance > 5000 GROUP BY e.eid ORDER BY COUNT(c.eid) DESC LIMIT 1;", "gold_sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["employee", "certificate", "aircraft"]}
{"sample_id": 439, "db_id": "allergy_1", "question": "How many allergies are there?", "rationale": ["Identify the goal of the query: to count the number of allergies.", "Determine the relevant table: Allergy_Type contains the list of allergies.", "Use the COUNT() function to count the total number of entries in the Allergy column of the Allergy_Type table.", "Construct the SQL query to select the count from the Allergy_Type table."], "pred_sql": "SELECT COUNT(*) AS TotalAllergies FROM Allergy_Type;", "gold_sql": "SELECT count(DISTINCT allergy) FROM Allergy_type", "source_tables": ["allergy_type"]}
{"sample_id": 440, "db_id": "allergy_1", "question": "How many allergy entries are there?", "rationale": ["The user wants to know the total number of allergy entries.", "To get this information, we need to count the number of records in the Allergy_Type table, which contains the allergy entries.", "The SQL function COUNT(*) will be used to count all rows in the Allergy_Type table.", "The result will be labeled as 'AllergyCount' for clarity."], "pred_sql": "SELECT COUNT(*) AS AllergyCount FROM Allergy_Type;", "gold_sql": "SELECT count(DISTINCT allergy) FROM Allergy_type", "source_tables": ["allergy_type"]}
{"sample_id": 441, "db_id": "allergy_1", "question": "How many different allergy types exist?", "rationale": ["Identify the table that contains allergy types, which is 'Allergy_Type'.", "Determine the column that specifies the type of allergy, which is 'AllergyType'.", "To find the number of different allergy types, use the COUNT function with DISTINCT to count unique values in the 'AllergyType' column.", "Construct the SQL query to select the count of distinct allergy types from the 'Allergy_Type' table."], "pred_sql": "SELECT COUNT(DISTINCT AllergyType) AS DifferentAllergyTypes FROM Allergy_Type;", "gold_sql": "SELECT count(DISTINCT allergytype) FROM Allergy_type", "source_tables": ["allergy_type"]}
{"sample_id": 442, "db_id": "allergy_1", "question": "How many distinct allergies are there?", "rationale": ["Identify the requirement to count distinct allergies.", "Determine the relevant table, which is 'Allergy_Type' that contains the allergy names.", "Use the COUNT function to count distinct values in the 'Allergy' column.", "Formulate the SQL query to select the count of distinct allergies from the 'Allergy_Type' table."], "pred_sql": "SELECT COUNT(DISTINCT Allergy) AS distinct_allergies FROM Allergy_Type;", "gold_sql": "SELECT count(DISTINCT allergytype) FROM Allergy_type", "source_tables": ["allergy_type"]}
{"sample_id": 443, "db_id": "allergy_1", "question": "Show all allergy types.", "rationale": ["Identify the table that contains allergy types, which is 'Allergy_Type'.", "Determine the column that holds the allergy types, which is 'AllergyType'.", "Use the SELECT statement to retrieve the distinct values from the 'AllergyType' column to avoid duplicates.", "Construct the SQL query as 'SELECT DISTINCT AllergyType FROM Allergy_Type;' to show all unique allergy types."], "pred_sql": "SELECT DISTINCT AllergyType FROM Allergy_Type;", "gold_sql": "SELECT DISTINCT allergytype FROM Allergy_type", "source_tables": ["allergy_type"]}
{"sample_id": 444, "db_id": "allergy_1", "question": "What are the different allergy types?", "rationale": ["Identify the table that contains the allergy types, which is 'Allergy_Type'.", "Determine the column that specifies the type of allergy, which is 'AllergyType'.", "To get the different allergy types, use the SELECT statement with DISTINCT to avoid duplicate entries."], "pred_sql": "SELECT DISTINCT AllergyType FROM Allergy_Type;", "gold_sql": "SELECT DISTINCT allergytype FROM Allergy_type", "source_tables": ["allergy_type"]}
{"sample_id": 445, "db_id": "allergy_1", "question": "Show all allergies and their types.", "rationale": ["Identify the tables involved: We need to retrieve data from the Allergy_Type table.", "Determine the columns needed: We need both the 'Allergy' and 'AllergyType' columns from the Allergy_Type table.", "Construct the SQL query: Use a SELECT statement to get the required columns from the specified table."], "pred_sql": "SELECT Allergy, AllergyType FROM Allergy_Type;", "gold_sql": "SELECT allergy ,  allergytype FROM Allergy_type", "source_tables": ["allergy_type"]}
{"sample_id": 446, "db_id": "allergy_1", "question": "What are the allergies and their types?", "rationale": ["Identify the tables involved: We need to retrieve data from the Allergy_Type table.", "Determine the columns needed: We need the 'Allergy' and 'AllergyType' columns from the Allergy_Type table.", "Construct the SQL query: Use a SELECT statement to get the required columns from the Allergy_Type table."], "pred_sql": "SELECT Allergy, AllergyType FROM Allergy_Type;", "gold_sql": "SELECT allergy ,  allergytype FROM Allergy_type", "source_tables": ["allergy_type"]}
{"sample_id": 447, "db_id": "allergy_1", "question": "Show all allergies with type food.", "rationale": ["Identify the relevant table: Allergy_Type, which contains information about allergies and their types.", "Determine the specific information needed: we want to retrieve all allergies that fall under the type 'food'.", "Construct the SQL query to select the 'Allergy' column from the 'Allergy_Type' table where the 'AllergyType' is 'food'."], "pred_sql": "SELECT Allergy FROM Allergy_Type WHERE AllergyType = 'food';", "gold_sql": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  'food'", "source_tables": ["allergy_type"]}
{"sample_id": 448, "db_id": "allergy_1", "question": "What are all the different food allergies?", "rationale": ["Identify the relevant table that contains information about allergies, which is the Allergy_Type table.", "We need to find all different food allergies, so we will filter the results based on the AllergyType column.", "Use the DISTINCT keyword to ensure that we only get unique allergy names.", "Construct the SQL query to select the Allergy column from the Allergy_Type table where the AllergyType is 'Food'."], "pred_sql": "SELECT DISTINCT Allergy FROM Allergy_Type WHERE AllergyType = 'Food';", "gold_sql": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  'food'", "source_tables": ["allergy_type"]}
{"sample_id": 449, "db_id": "allergy_1", "question": "What is the type of allergy Cat?", "rationale": ["Identify the relevant table that contains information about allergies, which is the Allergy_Type table.", "Determine the specific column that contains the type of allergy, which is AllergyType.", "Formulate a SQL query to select the AllergyType from the Allergy_Type table where the Allergy is 'Cat'."], "pred_sql": "SELECT AllergyType FROM Allergy_Type WHERE Allergy = 'Cat';", "gold_sql": "SELECT allergytype FROM Allergy_type WHERE allergy  =  'Cat'", "source_tables": ["allergy_type"]}
{"sample_id": 450, "db_id": "allergy_1", "question": "What is allergy type of a cat allergy?", "rationale": ["Identify the relevant table that contains information about allergy types, which is the Allergy_Type table.", "Determine the specific column that contains the allergy type, which is AllergyType.", "Formulate a SQL query to select the AllergyType from the Allergy_Type table where the Allergy matches 'cat allergy'."], "pred_sql": "SELECT AllergyType FROM Allergy_Type WHERE Allergy = 'cat allergy';", "gold_sql": "SELECT allergytype FROM Allergy_type WHERE allergy  =  'Cat'", "source_tables": ["allergy_type"]}
{"sample_id": 451, "db_id": "allergy_1", "question": "How many allergies have type animal?", "rationale": ["Identify the relevant table: Allergy_Type contains the allergy types.", "Determine the specific column to filter: AllergyType is the column that specifies the type of allergy.", "Formulate the query to count the number of records where AllergyType is 'animal'.", "Use the COUNT() function to get the total number of allergies of the specified type."], "pred_sql": "SELECT COUNT(*) AS AllergyCount FROM Allergy_Type WHERE AllergyType = 'animal';", "gold_sql": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  'animal'", "source_tables": ["allergy_type"]}
{"sample_id": 452, "db_id": "allergy_1", "question": "How many animal type allergies exist?", "rationale": ["Identify the relevant table: Allergy_Type contains the allergy information.", "Determine the specific type of allergy we are interested in: 'Animal' allergies.", "Use the COUNT() function to count the number of records that match the specified allergy type.", "Construct the SQL query to select the count from the Allergy_Type table where the AllergyType is 'Animal'."], "pred_sql": "SELECT COUNT(*) AS Animal_Allergy_Count FROM Allergy_Type WHERE AllergyType = 'Animal';", "gold_sql": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  'animal'", "source_tables": ["allergy_type"]}
{"sample_id": 453, "db_id": "allergy_1", "question": "Show all allergy types and the number of allergies in each type.", "rationale": ["Identify the relevant table: Allergy_Type contains the allergy types and their names.", "We need to count the number of allergies for each type, which requires using the COUNT() function.", "Group the results by AllergyType to get the count for each type.", "Construct the SQL query to select the AllergyType and the count of allergies, using GROUP BY to aggregate the results."], "pred_sql": "SELECT AllergyType, COUNT(Allergy) AS NumberOfAllergies FROM Allergy_Type GROUP BY AllergyType;", "gold_sql": "SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype", "source_tables": ["allergy_type"]}
{"sample_id": 454, "db_id": "allergy_1", "question": "What are the allergy types and how many allergies correspond to each one?", "rationale": ["Identify the relevant table: Allergy_Type contains the allergy types and their corresponding allergies.", "We need to count the number of allergies for each allergy type, which requires using the COUNT() function.", "To group the results by allergy type, we will use the GROUP BY clause on the AllergyType column.", "The final SQL query will select the AllergyType and the count of allergies, using COUNT(Allergy) as AllergyCount."], "pred_sql": "SELECT AllergyType, COUNT(Allergy) AS AllergyCount FROM Allergy_Type GROUP BY AllergyType;", "gold_sql": "SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype", "source_tables": ["allergy_type"]}
{"sample_id": 455, "db_id": "allergy_1", "question": "Which allergy type has most number of allergies?", "rationale": ["Identify the relevant table that contains the allergy types, which is 'Allergy_Type'.", "We need to count the number of allergies for each allergy type, so we will use the COUNT() function.", "Group the results by 'AllergyType' to aggregate the counts for each type.", "Order the results in descending order based on the count of allergies to find the type with the most allergies.", "Limit the results to 1 to get only the allergy type with the highest count."], "pred_sql": "SELECT AllergyType, COUNT(Allergy) AS AllergyCount\nFROM Allergy_Type\nGROUP BY AllergyType\nORDER BY AllergyCount DESC\nLIMIT 1;", "gold_sql": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1", "source_tables": ["allergy_type"]}
{"sample_id": 456, "db_id": "allergy_1", "question": "Which allergy type is most common?", "rationale": ["Identify the relevant tables: Allergy_Type and Has_Allergy are needed to find the allergy types and their occurrences.", "Join the Allergy_Type table with the Has_Allergy table on the Allergy column to associate students with their allergies.", "Group the results by AllergyType to count how many times each allergy type appears.", "Use COUNT(*) to count the occurrences of each allergy type.", "Order the results in descending order based on the count of occurrences to find the most common allergy type.", "Limit the results to 1 to get only the most common allergy type."], "pred_sql": "SELECT AllergyType, COUNT(*) as AllergyCount \nFROM Allergy_Type \nJOIN Has_Allergy ON Allergy_Type.Allergy = Has_Allergy.Allergy \nGROUP BY AllergyType \nORDER BY AllergyCount DESC \nLIMIT 1;", "gold_sql": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1", "source_tables": ["allergy_type"]}
{"sample_id": 457, "db_id": "allergy_1", "question": "Which allergy type has least number of allergies?", "rationale": ["Identify the relevant table: Allergy_Type contains the allergy types and their corresponding allergies.", "We need to count the number of allergies for each allergy type, so we will use the COUNT() function.", "Group the results by AllergyType to get the count of allergies for each type.", "Order the results in ascending order based on the count of allergies to find the type with the least number.", "Limit the results to 1 to get only the allergy type with the least number of allergies."], "pred_sql": "SELECT AllergyType FROM Allergy_Type GROUP BY AllergyType ORDER BY COUNT(Allergy) ASC LIMIT 1;", "gold_sql": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1", "source_tables": ["allergy_type"]}
{"sample_id": 458, "db_id": "allergy_1", "question": "Which allergy type is the least common?", "rationale": ["Identify the relevant tables: Allergy_Type and Has_Allergy are needed to find the allergy types and their occurrences.", "Join the Allergy_Type table with the Has_Allergy table on the Allergy column to associate each allergy with its type.", "Group the results by AllergyType to count how many times each allergy type appears.", "Use COUNT(*) to count the occurrences of each allergy type.", "Order the results in ascending order based on the count to find the least common allergy type.", "Limit the results to 1 to get only the least common allergy type."], "pred_sql": "SELECT AllergyType, COUNT(*) AS AllergyCount\nFROM Allergy_Type AT\nJOIN Has_Allergy HA ON AT.Allergy = HA.Allergy\nGROUP BY AllergyType\nORDER BY AllergyCount ASC\nLIMIT 1;", "gold_sql": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1", "source_tables": ["allergy_type"]}
{"sample_id": 459, "db_id": "allergy_1", "question": "How many students are there?", "rationale": ["Identify the requirement: We need to count the number of students.", "Determine the relevant table: The 'Student' table contains the information about students.", "Use the COUNT() function to count the total number of entries in the 'Student' table.", "Construct the SQL query to select the count from the 'Student' table."], "pred_sql": "SELECT COUNT(*) AS total_students FROM Student;", "gold_sql": "SELECT count(*) FROM Student", "source_tables": ["student"]}
{"sample_id": 460, "db_id": "allergy_1", "question": "What is the total number of students?", "rationale": ["Identify the table that contains student information, which is the 'Student' table.", "To find the total number of students, we need to count the number of entries in the 'Student' table.", "Use the COUNT() function to count all rows in the 'Student' table.", "Select the count with an alias 'total_students' for clarity."], "pred_sql": "SELECT COUNT(*) AS total_students FROM Student;", "gold_sql": "SELECT count(*) FROM Student", "source_tables": ["student"]}
{"sample_id": 461, "db_id": "allergy_1", "question": "Show first name and last name for all students.", "rationale": ["Identify the required columns: first name (Fname) and last name (LName) of students.", "Determine the table that contains the student information, which is the 'Student' table.", "Construct the SQL SELECT statement to retrieve the specified columns from the 'Student' table."], "pred_sql": "SELECT Fname, LName FROM Student;", "gold_sql": "SELECT Fname ,  Lname FROM Student", "source_tables": ["student"]}
{"sample_id": 462, "db_id": "allergy_1", "question": "What are the full names of all students", "rationale": ["Identify the table that contains student names, which is the 'Student' table.", "To get the full names, we need to concatenate the 'Fname' and 'LName' columns.", "Use the SQL SELECT statement to retrieve the concatenated names.", "Alias the concatenated result as 'FullName' for clarity."], "pred_sql": "SELECT Fname || ' ' || LName AS FullName FROM Student;", "gold_sql": "SELECT Fname ,  Lname FROM Student", "source_tables": ["student"]}
{"sample_id": 463, "db_id": "allergy_1", "question": "How many different advisors are listed?", "rationale": ["Identify the table that contains the information about advisors, which is the 'Student' table.", "To find the number of different advisors, we need to count distinct values in the 'Advisor' column.", "The SQL query will use the COUNT function along with DISTINCT to ensure we only count unique advisors."], "pred_sql": "SELECT COUNT(DISTINCT Advisor) AS DifferentAdvisors FROM Student;", "gold_sql": "SELECT count(DISTINCT advisor) FROM Student", "source_tables": ["student"]}
{"sample_id": 464, "db_id": "allergy_1", "question": "How many advisors are there?", "rationale": ["Identify the requirement: We need to find out how many unique advisors there are.", "Determine the relevant table: The 'Student' table contains the 'Advisor' column.", "Use the COUNT function to count distinct advisors to avoid duplicates.", "Construct the SQL query to select the count of distinct advisors from the Student table."], "pred_sql": "SELECT COUNT(DISTINCT Advisor) AS NumberOfAdvisors FROM Student;", "gold_sql": "SELECT count(DISTINCT advisor) FROM Student", "source_tables": ["student"]}
{"sample_id": 465, "db_id": "allergy_1", "question": "Show all majors.", "rationale": ["Identify the table that contains the information about majors, which is the 'Student' table.", "Determine that we need to select the 'Major' column from the 'Student' table.", "Use the DISTINCT keyword to ensure that we only get unique majors without duplicates."], "pred_sql": "SELECT DISTINCT Major FROM Student;", "gold_sql": "SELECT DISTINCT Major FROM Student", "source_tables": ["student"]}
{"sample_id": 466, "db_id": "allergy_1", "question": "What are the different majors?", "rationale": ["Identify the information needed: the different majors of students.", "Determine the appropriate table to query: the 'Student' table contains the 'Major' column.", "Use the SELECT statement to retrieve the 'Major' column.", "Use DISTINCT to ensure that only unique majors are returned."], "pred_sql": "SELECT DISTINCT Major FROM Student;", "gold_sql": "SELECT DISTINCT Major FROM Student", "source_tables": ["student"]}
{"sample_id": 467, "db_id": "allergy_1", "question": "Show all cities where students live.", "rationale": ["Identify the table that contains information about students and their cities, which is the 'Student' table.", "Determine the column that represents the city where students live, which is 'city_code'.", "Since we want to show all cities, we need to select distinct values to avoid duplicates.", "Construct the SQL query to select distinct city_code from the Student table."], "pred_sql": "SELECT DISTINCT city_code FROM Student;", "gold_sql": "SELECT DISTINCT city_code FROM Student", "source_tables": ["student"]}
{"sample_id": 468, "db_id": "allergy_1", "question": "What cities do students live in?", "rationale": ["Identify the relevant table: The 'Student' table contains information about students, including their city codes.", "Determine the required information: The query asks for the cities where students live, which corresponds to the 'city_code' column in the 'Student' table.", "Use DISTINCT to ensure that each city code is listed only once, even if multiple students live in the same city.", "Construct the SQL query to select distinct city codes from the Student table."], "pred_sql": "SELECT DISTINCT city_code FROM Student;", "gold_sql": "SELECT DISTINCT city_code FROM Student", "source_tables": ["student"]}
{"sample_id": 469, "db_id": "allergy_1", "question": "Show first name, last name, age for all female students. Their sex is F.", "rationale": ["Identify the columns needed: Fname, LName, Age.", "Determine the table to query: Student.", "Apply the condition to filter results: where Sex is 'F'."], "pred_sql": "SELECT Fname, LName, Age FROM Student WHERE Sex = 'F';", "gold_sql": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'", "source_tables": ["student"]}
{"sample_id": 470, "db_id": "allergy_1", "question": "What are the full names and ages for all female students whose sex is F?", "rationale": ["Identify the columns needed: Full names (Fname and LName) and Age.", "To get the full name, we will concatenate Fname and LName with a space in between.", "We need to filter the results to include only female students, which is indicated by Sex = 'F'.", "Construct the SQL SELECT statement to retrieve the desired columns from the Student table with the specified condition."], "pred_sql": "SELECT Fname || ' ' || LName AS FullName, Age FROM Student WHERE Sex = 'F';", "gold_sql": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'", "source_tables": ["student"]}
{"sample_id": 471, "db_id": "allergy_1", "question": "Show student ids for all male students.", "rationale": ["Identify the table that contains the information about students, which is the 'Student' table.", "Determine the column that contains the gender information, which is the 'Sex' column.", "Formulate a query to select the 'StuID' column from the 'Student' table where the 'Sex' is 'Male'."], "pred_sql": "SELECT StuID FROM Student WHERE Sex = 'Male';", "gold_sql": "SELECT StuID FROM Student WHERE Sex  =  'M'", "source_tables": ["student"]}
{"sample_id": 472, "db_id": "allergy_1", "question": "What are the student ids for all male students?", "rationale": ["Identify the table that contains student information, which is the 'Student' table.", "Determine the column that contains the gender information, which is the 'Sex' column.", "Filter the results to include only male students by using a WHERE clause with the condition 'Sex = 'male'',' and select the 'StuID' column to get the student ids."], "pred_sql": "SELECT StuID FROM Student WHERE Sex = 'male';", "gold_sql": "SELECT StuID FROM Student WHERE Sex  =  'M'", "source_tables": ["student"]}
{"sample_id": 473, "db_id": "allergy_1", "question": "How many students are age 18?", "rationale": ["Identify the table that contains the age information, which is the 'Student' table.", "Determine the specific column that holds the age data, which is 'Age'.", "Formulate a query to count the number of students where the 'Age' column equals '18'.", "Use the COUNT() function to get the total number of students that meet this criterion."], "pred_sql": "SELECT COUNT(*) AS NumberOfStudents FROM Student WHERE Age = '18';", "gold_sql": "SELECT count(*) FROM Student WHERE age  =  18", "source_tables": ["student"]}
{"sample_id": 474, "db_id": "allergy_1", "question": "How many students are 18 years old?", "rationale": ["Identify the table that contains the age of students, which is the 'Student' table.", "Determine the condition needed to filter the students, which is that their age must be '18'.", "Use the COUNT() function to count the number of students that meet this condition.", "Construct the SQL query to select the count of students from the 'Student' table where the age is '18'."], "pred_sql": "SELECT COUNT(*) AS NumberOfStudents FROM Student WHERE Age = '18';", "gold_sql": "SELECT count(*) FROM Student WHERE age  =  18", "source_tables": ["student"]}
{"sample_id": 475, "db_id": "allergy_1", "question": "Show all student ids who are older than 20.", "rationale": ["Identify the table that contains the student information, which is the 'Student' table.", "Determine the column that contains the age of the students, which is 'Age'.", "Formulate a query to select the 'StuID' from the 'Student' table where the 'Age' is greater than 20."], "pred_sql": "SELECT StuID FROM Student WHERE Age > '20';", "gold_sql": "SELECT StuID FROM Student WHERE age  >  20", "source_tables": ["student"]}
{"sample_id": 476, "db_id": "allergy_1", "question": "What are the student ids for students over 20 years old?", "rationale": ["Identify the table that contains the student information, which is the 'Student' table.", "Determine the relevant column for student IDs, which is 'StuID'.", "Identify the condition for filtering students, which is that their age must be greater than 20.", "Construct the SQL query to select 'StuID' from the 'Student' table where the 'Age' is greater than 20."], "pred_sql": "SELECT StuID FROM Student WHERE Age > '20';", "gold_sql": "SELECT StuID FROM Student WHERE age  >  20", "source_tables": ["student"]}
{"sample_id": 477, "db_id": "allergy_1", "question": "Which city does the student whose last name is \"Kim\" live in?", "rationale": ["Identify the table that contains the information about students and their city codes, which is the 'Student' table.", "Determine the column that contains the last names of students, which is 'LName'.", "Specify the condition to filter the results to only include the student with the last name 'Kim'.", "Construct the SQL query to select the 'city_code' from the 'Student' table where the last name matches 'Kim'."], "pred_sql": "SELECT city_code FROM Student WHERE LName = 'Kim';", "gold_sql": "SELECT city_code FROM Student WHERE LName  =  'Kim'", "source_tables": ["student"]}
{"sample_id": 478, "db_id": "allergy_1", "question": "Give the city that the student whose family name is Kim lives in.", "rationale": ["Identify the relevant table: The 'Student' table contains information about students including their last names and city codes.", "Determine the condition: We need to find the city code for the student whose last name is 'Kim'.", "Construct the SQL query: We will select the 'city_code' from the 'Student' table where the 'LName' matches 'Kim'."], "pred_sql": "SELECT city_code FROM Student WHERE LName = 'Kim';", "gold_sql": "SELECT city_code FROM Student WHERE LName  =  'Kim'", "source_tables": ["student"]}
{"sample_id": 479, "db_id": "allergy_1", "question": "Who is the advisor of student with ID 1004?", "rationale": ["Identify the table that contains the information about students and their advisors, which is the 'Student' table.", "Determine the specific column needed, which is 'Advisor', to find out who the advisor is.", "Use the 'StuID' column to filter the results to the specific student with ID 1004.", "Construct the SQL query using the SELECT statement to retrieve the Advisor for the student with StuID 1004."], "pred_sql": "SELECT Advisor FROM Student WHERE StuID = '1004';", "gold_sql": "SELECT Advisor FROM Student WHERE StuID  =  1004", "source_tables": ["student"]}
{"sample_id": 480, "db_id": "allergy_1", "question": "Who advises student 1004?", "rationale": ["Identify the table that contains the information about students and their advisors, which is the 'Student' table.", "Determine the specific column that contains the advisor's name, which is 'Advisor'.", "Identify the condition needed to filter the results to only the student with the unique identifier '1004', which is in the 'StuID' column.", "Construct the SQL query to select the 'Advisor' from the 'Student' table where 'StuID' equals '1004'."], "pred_sql": "SELECT Advisor FROM Student WHERE StuID = '1004';", "gold_sql": "SELECT Advisor FROM Student WHERE StuID  =  1004", "source_tables": ["student"]}
{"sample_id": 481, "db_id": "allergy_1", "question": "How many students live in HKG or CHI?", "rationale": ["Identify the table that contains the information about students and their city codes, which is the 'Student' table.", "Determine the requirement to count the number of students, which suggests using the COUNT() function in SQL.", "The query needs to filter students based on their city codes, specifically those who live in 'HKG' or 'CHI'.", "Use the WHERE clause to specify the condition for city_code, utilizing the IN operator to check for multiple values ('HKG' and 'CHI').", "Construct the final SQL query to select the count of students from the 'Student' table with the specified city codes."], "pred_sql": "SELECT COUNT(*) AS student_count FROM Student WHERE city_code IN ('HKG', 'CHI');", "gold_sql": "SELECT count(*) FROM Student WHERE city_code  =  'HKG' OR city_code  =  'CHI'", "source_tables": ["student"]}
{"sample_id": 482, "db_id": "allergy_1", "question": "Give the number of students living in either HKG or CHI.", "rationale": ["Identify the relevant table: The 'Student' table contains information about students, including their city codes.", "Determine the required information: We need to count the number of students based on their city codes.", "Use the COUNT() function to count the number of students that meet the criteria.", "Specify the condition for the city codes using the IN clause to include both 'HKG' and 'CHI'.", "Construct the SQL query to select the count of students from the 'Student' table where the city_code is either 'HKG' or 'CHI'."], "pred_sql": "SELECT COUNT(*) AS NumberOfStudents FROM Student WHERE city_code IN ('HKG', 'CHI');", "gold_sql": "SELECT count(*) FROM Student WHERE city_code  =  'HKG' OR city_code  =  'CHI'", "source_tables": ["student"]}
{"sample_id": 483, "db_id": "allergy_1", "question": "Show the minimum, average, and maximum age of all students.", "rationale": ["Identify the required information: minimum, average, and maximum age of students.", "Determine the relevant table: the 'Student' table contains the age information.", "Use aggregate functions: MIN(), AVG(), and MAX() to calculate the respective values for the 'Age' column.", "Construct the SQL query to select these aggregate values from the 'Student' table."], "pred_sql": "SELECT MIN(Age) AS Min_Age, AVG(Age) AS Avg_Age, MAX(Age) AS Max_Age FROM Student;", "gold_sql": "SELECT min(age) ,  avg(age) ,  max(age) FROM Student", "source_tables": ["student"]}
{"sample_id": 484, "db_id": "allergy_1", "question": "What is the minimum, mean, and maximum age across all students?", "rationale": ["Identify the required information: minimum, mean, and maximum age of students.", "Determine the relevant table: the 'Student' table contains the age information.", "Use aggregate functions: MIN() for minimum age, AVG() for mean age, and MAX() for maximum age.", "Construct the SQL query to select these aggregate values from the 'Student' table."], "pred_sql": "SELECT MIN(Age) AS Min_Age, AVG(Age) AS Mean_Age, MAX(Age) AS Max_Age FROM Student;", "gold_sql": "SELECT min(age) ,  avg(age) ,  max(age) FROM Student", "source_tables": ["student"]}
{"sample_id": 485, "db_id": "allergy_1", "question": "What is the last name of the youngest student?", "rationale": ["Identify the relevant table: The query requires information about students, so we will use the 'Student' table.", "Determine the required column: We need the last name of the student, which is in the 'LName' column.", "Find the youngest student: To find the youngest student, we need to order the results by the 'Age' column in ascending order.", "Limit the results: Since we only want the last name of the youngest student, we will limit the results to 1."], "pred_sql": "SELECT LName FROM Student ORDER BY Age ASC LIMIT 1;", "gold_sql": "SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)", "source_tables": ["student"]}
{"sample_id": 486, "db_id": "allergy_1", "question": "Provide the last name of the youngest student.", "rationale": ["Identify the table that contains the last names of students, which is the 'Student' table.", "To find the youngest student, we need to sort the students by their age in ascending order.", "Use the ORDER BY clause to sort the 'Age' column in ascending order.", "To get only the last name of the youngest student, we will use the LIMIT clause to restrict the result to just one record."], "pred_sql": "SELECT LName FROM Student ORDER BY Age ASC LIMIT 1;", "gold_sql": "SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)", "source_tables": ["student"]}
{"sample_id": 487, "db_id": "allergy_1", "question": "Show the student id of the oldest student.", "rationale": ["Identify the table that contains student information, which is the 'Student' table.", "To find the oldest student, we need to sort the students by their age in descending order.", "We will select the 'StuID' of the student after sorting.", "To get only the oldest student, we will limit the results to 1."], "pred_sql": "SELECT StuID FROM Student ORDER BY Age DESC LIMIT 1;", "gold_sql": "SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)", "source_tables": ["student"]}
{"sample_id": 488, "db_id": "allergy_1", "question": "What student id corresponds to the oldest student?", "rationale": ["Identify the table that contains student information, which is the 'Student' table.", "To find the oldest student, we need to sort the students by their age in descending order.", "We will select the 'StuID' of the student after sorting.", "To get only the oldest student, we will limit the results to 1."], "pred_sql": "SELECT StuID FROM Student ORDER BY Age DESC LIMIT 1;", "gold_sql": "SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)", "source_tables": ["student"]}
{"sample_id": 489, "db_id": "allergy_1", "question": "Show all majors and corresponding number of students.", "rationale": ["Identify the relevant table: The 'Student' table contains the 'Major' and 'StuID' columns.", "Determine the required output: We need to show all majors and the corresponding number of students for each major.", "Use the COUNT function to count the number of students (StuID) for each major.", "Group the results by the 'Major' column to get the count for each distinct major."], "pred_sql": "SELECT Major, COUNT(StuID) AS NumberOfStudents FROM Student GROUP BY Major;", "gold_sql": "SELECT major ,  count(*) FROM Student GROUP BY major", "source_tables": ["student"]}
{"sample_id": 490, "db_id": "allergy_1", "question": "How many students are there for each major?", "rationale": ["Identify the table that contains information about students, which is the 'Student' table.", "Determine the relevant column for the major of the students, which is 'Major'.", "To count the number of students for each major, use the COUNT() function.", "Group the results by the 'Major' column to get the count for each distinct major."], "pred_sql": "SELECT Major, COUNT(*) AS StudentCount FROM Student GROUP BY Major;", "gold_sql": "SELECT major ,  count(*) FROM Student GROUP BY major", "source_tables": ["student"]}
{"sample_id": 491, "db_id": "allergy_1", "question": "Which major has most number of students?", "rationale": ["Identify the relevant table: The 'Student' table contains information about students and their majors.", "Determine the required information: We need to count the number of students for each major.", "Use the COUNT() function to count students grouped by their major.", "Group the results by the 'Major' column to aggregate the counts.", "Order the results in descending order based on the count of students to find the major with the most students.", "Limit the results to 1 to get only the major with the highest count."], "pred_sql": "SELECT Major, COUNT(*) as StudentCount FROM Student GROUP BY Major ORDER BY StudentCount DESC LIMIT 1;", "gold_sql": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student"]}
{"sample_id": 492, "db_id": "allergy_1", "question": "What is the largest major?", "rationale": ["Identify the table that contains the information about majors, which is the 'Student' table.", "To find the largest major, we need to count the number of students in each major.", "Use the COUNT function to count the number of students for each major.", "Group the results by the 'Major' column to aggregate the counts for each major.", "Order the results in descending order based on the count of students to get the major with the most students at the top.", "Limit the results to 1 to get only the largest major."], "pred_sql": "SELECT Major, COUNT(*) as MajorCount FROM Student GROUP BY Major ORDER BY MajorCount DESC LIMIT 1;", "gold_sql": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student"]}
{"sample_id": 493, "db_id": "allergy_1", "question": "Show all ages and corresponding number of students.", "rationale": ["Identify the relevant table: The 'Student' table contains the 'Age' column and the unique identifier for students.", "Determine the required output: We need to show all ages and the corresponding number of students for each age.", "Use the COUNT function to count the number of students for each age.", "Group the results by the 'Age' column to get the count for each distinct age.", "Construct the SQL query using SELECT, COUNT, and GROUP BY clauses."], "pred_sql": "SELECT Age, COUNT(*) AS NumberOfStudents FROM Student GROUP BY Age;", "gold_sql": "SELECT age ,  count(*) FROM Student GROUP BY age", "source_tables": ["student"]}
{"sample_id": 494, "db_id": "allergy_1", "question": "How old is each student and how many students are each age?", "rationale": ["Identify the relevant table: The 'Student' table contains the age of each student.", "Determine the required information: We need to know the age of each student and the count of students for each age.", "Use the COUNT() function to count the number of students for each age.", "Group the results by age using GROUP BY clause to aggregate the counts for each unique age."], "pred_sql": "SELECT Age, COUNT(*) AS NumberOfStudents FROM Student GROUP BY Age;", "gold_sql": "SELECT age ,  count(*) FROM Student GROUP BY age", "source_tables": ["student"]}
{"sample_id": 495, "db_id": "allergy_1", "question": "Show the average age for male and female students.", "rationale": ["Identify the relevant table: The 'Student' table contains the age and sex of students.", "Determine the required output: We need to calculate the average age for male and female students.", "Use the AVG() function to calculate the average age.", "Group the results by the 'Sex' column to separate male and female averages.", "Construct the SQL query to select the 'Sex' and the average age, using GROUP BY to aggregate the results."], "pred_sql": "SELECT Sex, AVG(Age) AS Average_Age FROM Student GROUP BY Sex;", "gold_sql": "SELECT avg(age) ,  sex FROM Student GROUP BY sex", "source_tables": ["student"]}
{"sample_id": 496, "db_id": "allergy_1", "question": "What are the average ages for male and female students?", "rationale": ["Identify the relevant table: The 'Student' table contains the age and sex of students.", "Determine the required information: We need to calculate the average age for male and female students.", "Use the AVG() function to calculate the average age.", "Group the results by the 'Sex' column to get separate averages for male and female students."], "pred_sql": "SELECT Sex, AVG(Age) AS Average_Age FROM Student GROUP BY Sex;", "gold_sql": "SELECT avg(age) ,  sex FROM Student GROUP BY sex", "source_tables": ["student"]}
{"sample_id": 497, "db_id": "allergy_1", "question": "Show all cities and corresponding number of students.", "rationale": ["Identify the relevant table: The 'Student' table contains the 'city_code' and 'StuID' columns needed for the query.", "Select the columns needed: We need to select 'city_code' and count the number of students (StuID) for each city.", "Use the COUNT() function to count the number of students for each city.", "Group the results by 'city_code' to get the count of students per city."], "pred_sql": "SELECT city_code, COUNT(StuID) AS number_of_students FROM Student GROUP BY city_code;", "gold_sql": "SELECT city_code ,  count(*) FROM Student GROUP BY city_code", "source_tables": ["student"]}
{"sample_id": 498, "db_id": "allergy_1", "question": "How many students live in each city?", "rationale": ["Identify the relevant table: The 'Student' table contains information about students, including their city codes.", "Determine the required information: We need to count the number of students in each city.", "Use the COUNT() function to count the number of students for each city code.", "Group the results by 'city_code' to get the count for each city.", "Construct the SQL query using SELECT, COUNT(), and GROUP BY clauses."], "pred_sql": "SELECT city_code, COUNT(*) AS student_count FROM Student GROUP BY city_code;", "gold_sql": "SELECT city_code ,  count(*) FROM Student GROUP BY city_code", "source_tables": ["student"]}
{"sample_id": 499, "db_id": "allergy_1", "question": "Show all advisors and corresponding number of students.", "rationale": ["Identify the required information: We need to show all advisors and the corresponding number of students.", "Determine the relevant table: The 'Student' table contains the 'Advisor' and 'StuID' columns.", "Use the COUNT function to count the number of students for each advisor.", "Group the results by 'Advisor' to get the count for each advisor."], "pred_sql": "SELECT Advisor, COUNT(StuID) AS NumberOfStudents FROM Student GROUP BY Advisor;", "gold_sql": "SELECT advisor ,  count(*) FROM Student GROUP BY advisor", "source_tables": ["student"]}
